{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.png","path":"img/upyun_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/ascetic.css","path":"css/highlight/ascetic.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/androidstudio.css","path":"css/highlight/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/arta.css","path":"css/highlight/arta.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/agate.css","path":"css/highlight/agate.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/arduino-light.css","path":"css/highlight/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-cave-dark.css","path":"css/highlight/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-cave-light.css","path":"css/highlight/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-dune-dark.css","path":"css/highlight/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-dune-light.css","path":"css/highlight/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-estuary-dark.css","path":"css/highlight/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-estuary-light.css","path":"css/highlight/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-forest-light.css","path":"css/highlight/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-forest-dark.css","path":"css/highlight/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-heath-dark.css","path":"css/highlight/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-heath-light.css","path":"css/highlight/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-lakeside-dark.css","path":"css/highlight/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-lakeside-light.css","path":"css/highlight/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-plateau-dark.css","path":"css/highlight/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-savanna-dark.css","path":"css/highlight/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-savanna-light.css","path":"css/highlight/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-plateau-light.css","path":"css/highlight/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-seaside-dark.css","path":"css/highlight/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-seaside-light.css","path":"css/highlight/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-dark.css","path":"css/highlight/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-light.css","path":"css/highlight/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atom-one-dark.css","path":"css/highlight/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atom-one-light.css","path":"css/highlight/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/codepen-embed.css","path":"css/highlight/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/brown-paper.css","path":"css/highlight/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/color-brewer.css","path":"css/highlight/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/darkula.css","path":"css/highlight/darkula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/dark.css","path":"css/highlight/dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/darcula.css","path":"css/highlight/darcula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/dracula.css","path":"css/highlight/dracula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/far.css","path":"css/highlight/far.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/github-gist.css","path":"css/highlight/github-gist.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/foundation.css","path":"css/highlight/foundation.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/github.css","path":"css/highlight/github.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/googlecode.css","path":"css/highlight/googlecode.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/grayscale.css","path":"css/highlight/grayscale.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/docco.css","path":"css/highlight/docco.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/gruvbox-dark.css","path":"css/highlight/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/gruvbox-light.css","path":"css/highlight/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/hopscotch.css","path":"css/highlight/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/idea.css","path":"css/highlight/idea.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/hybrid.css","path":"css/highlight/hybrid.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/ir-black.css","path":"css/highlight/ir-black.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/kimbie.dark.css","path":"css/highlight/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/magula.css","path":"css/highlight/magula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/mono-blue.css","path":"css/highlight/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/monokai-sublime.css","path":"css/highlight/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/obsidian.css","path":"css/highlight/obsidian.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/kimbie.light.css","path":"css/highlight/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/monokai.css","path":"css/highlight/monokai.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/ocean.css","path":"css/highlight/ocean.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/paraiso-light.css","path":"css/highlight/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/pojoaque.css","path":"css/highlight/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/purebasic.css","path":"css/highlight/purebasic.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/qtcreator_light.css","path":"css/highlight/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/railscasts.css","path":"css/highlight/railscasts.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/paraiso-dark.css","path":"css/highlight/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/qtcreator_dark.css","path":"css/highlight/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/rainbow.css","path":"css/highlight/rainbow.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/school-book.css","path":"css/highlight/school-book.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/solarized-light.css","path":"css/highlight/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/solarized-dark.css","path":"css/highlight/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/solarized-white.css","path":"css/highlight/solarized-white.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night-bright.css","path":"css/highlight/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/sunburst.css","path":"css/highlight/sunburst.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night-blue.css","path":"css/highlight/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night.css","path":"css/highlight/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/vs.css","path":"css/highlight/vs.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night-eighties.css","path":"css/highlight/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow.css","path":"css/highlight/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/xcode.css","path":"css/highlight/xcode.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/xt256.css","path":"css/highlight/xt256.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/zenburn.css","path":"css/highlight/zenburn.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","path":"img/footer/footer_ico-bilibili.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","path":"img/footer/footer_ico-facebook.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.png","path":"img/footer/footer_ico-github.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","path":"img/footer/footer_ico-gplus.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","path":"img/footer/footer_ico-linkedin.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","path":"img/footer/footer_ico-twitter.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","path":"img/footer/footer_ico-tumblr.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","path":"img/footer/footer_ico-weibo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","path":"img/footer/footer_ico-zhihu.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","path":"img/footer/footer_ico-instagram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","path":"img/footer/footer_ico-telegram.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/jquery.poptrox.min.js","path":"js/gallery/jquery.poptrox.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/util.min.js","path":"js/gallery/util.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/main.min.js","path":"js/gallery/main.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/skel.min.js","path":"js/gallery/skel.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material/.travis.yml","hash":"639b4687fa0c080b419405136a5081603a83b6c0","modified":1486177090585},{"_id":"themes/material/LICENSE","hash":"2ea9f02239dc6b5fdbfff01fcdf85bcc8c13667c","modified":1486177090588},{"_id":"themes/material/README.md","hash":"5a91c828e5d0c8c1be4c67653195e911e6f42c95","modified":1486177090588},{"_id":"themes/material/_config.yml","hash":"05e107629aaf1e17675c33dd48c15dd37490d53d","modified":1487053766534},{"_id":"themes/material/contributing.json","hash":"f6f039672fef8e0267d9586c73d1a425c6c882d8","modified":1486177090589},{"_id":"themes/material/lint.sh","hash":"b082677c539a554f3ba9435e9569b7257610c08a","modified":1486177090619},{"_id":"themes/material/package.json","hash":"ef6da09bbf3e331e9de1a3e20131cbb935e39fc9","modified":1486177090620},{"_id":"source/_posts/elasticsearch-elastalert.md","hash":"52dd6034e594f32ae711a02f5ea69b2044217aa0","modified":1487053945097},{"_id":"source/_posts/elk-stack-beats.md","hash":"5a4d07cc1ea441ecdf4ef2807745557e2b69e354","modified":1488452261760},{"_id":"source/_posts/heartbeat.md","hash":"17aad92e05a3ec867a8be4d87d86526261c2650f","modified":1488520485856},{"_id":"source/_posts/hexo-github-pages-blog.md","hash":"fb72ec300e8e1e342b6b5da830641d78ec2c146e","modified":1486563374903},{"_id":"source/_posts/elastalert-wechat-plugin.md","hash":"cb1dd12308ea37a17bba7020048f981500a7e3bc","modified":1487238099566},{"_id":"source/_posts/springmvc-log4j-to-logback.md","hash":"ddecc48e838432ee6438e941470cc29b732ad468","modified":1488348125838},{"_id":"source/_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","hash":"084589f785c2899c0ef09486edcf6c308a58b531","modified":1487035162744},{"_id":"themes/material/languages/de.yml","hash":"379e03591ebeeaab42f8588ab05e897ba7b2e68c","modified":1486177090590},{"_id":"themes/material/languages/en.yml","hash":"b940600c889b0b722ec7f12322858572360e898e","modified":1486177090592},{"_id":"themes/material/languages/ar.yml","hash":"165e0430a3da3c5882b5f3ca5e098a09f70a909d","modified":1486177090590},{"_id":"themes/material/languages/es.yml","hash":"0d72be17279100cb4c96da41945d7d8351fa0255","modified":1486177090593},{"_id":"themes/material/languages/ms.yml","hash":"5bf0268854ba1f8940392e80a92c8e6b0db0cbcd","modified":1486177090595},{"_id":"themes/material/languages/zh-TW.yml","hash":"5a445321470a404e801f8b4faa89b0b9989a052c","modified":1486177090595},{"_id":"themes/material/languages/fr.yml","hash":"00332d7dd371b118f52e46f65256eb3c10ecd17d","modified":1486177090594},{"_id":"themes/material/languages/ja.yml","hash":"0733638e6dfa2bdf6238d2410ab5d4f76227e7cf","modified":1486177090594},{"_id":"themes/material/languages/zh-CN.yml","hash":"af9c232284013a5ae9f84fb9ea62ac82373a108d","modified":1486177090595},{"_id":"themes/material/layout/index.ejs","hash":"6d2452593a818992e530916d610b12cf1a82cab2","modified":1486177090617},{"_id":"themes/material/layout/layout.ejs","hash":"6e7163bb7c2db095aa5c751f5abb0dffba42356b","modified":1486177090619},{"_id":"themes/material/layout/post.ejs","hash":"1ca0ec79e39e47bd3c0db59238fc59187db37a7d","modified":1486177090619},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486177090597},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"4c12ceb81c83fed5f7e7e89dbde2af9d548a7837","modified":1486177090600},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"e904df50a90823f774e32b831455a01ee1d354e2","modified":1486177090600},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"c1ea5ebbdbc44f363891753e7bb78bdb707e197f","modified":1486177090597},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"82fa342d7fe4c02bdb417a75300a4860e93cd551","modified":1486177090602},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"08439ca843fb5bec3ab48e9a6baf02d212ff2132","modified":1486177090600},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"b836eedd4881575000f57b7a6e58b7e6ac48d0eb","modified":1486177090597},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"ee75b08a39761aa5a25616ffbabb4ce9eb4850d6","modified":1486177090603},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"eabe53e9d9341101be6529d6331c617864a59b0d","modified":1486177090607},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"a53365c8a50db079eb6602350aa3f53d3712797d","modified":1486177090601},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"0b032f47c7a3abbcdeee712ab61844981bb4c831","modified":1486177090603},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"d46a577253c61eb152c59ab2f51a26d4ba7f805a","modified":1486177090606},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"08b37548a1dccf671289c642ad43b24e37a78c5a","modified":1486177090606},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"1b9c0681f9a259f1431bc5bb2f97e0b8b45e2f83","modified":1486177090607},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"6eb3bed89ad5853dbc10056f8c57a5ecf4cbd437","modified":1486177090601},{"_id":"themes/material/layout/_partial/head.ejs","hash":"8873959841d065d493882c87c409eaced5f39374","modified":1486177090607},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"d93b04ae59602991368e940431cd4db266616a17","modified":1486177090609},{"_id":"themes/material/layout/_partial/nprogress.ejs","hash":"c3389daf95014d2e1e3537cd15baac014aa16d4b","modified":1486177090609},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"81f47a927ca4ffebf7768aa63c59523a792990de","modified":1486177090608},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"74de1f8ef14b58c21eb7895e9c9b3f3080d40aa4","modified":1486177090608},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"20acafaa1fddf22e1db0fad2fee95a3119c84122","modified":1486177090610},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"6b514c951b2535a0c1d22224c06856588ba18026","modified":1486177090610},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"05520fdd12408d6ab96dfbe9323faae9187dbd5d","modified":1486177090610},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"b64ac5d04ddbe8a8c42b7aaf10e9fddec3a2e109","modified":1486177090611},{"_id":"themes/material/layout/_partial/sidebar-sponsor.ejs","hash":"4a0e5c9f0405a500057d70e1a7699f2151678f6e","modified":1486177090611},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"fb12a47eb350954274982dffc4a221454e4a0fe1","modified":1486177090606},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"6e9b69fcb444cfc369653d7062721c92b0c04a94","modified":1486177090609},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"5fa89113054ae63689ad0edd1092a4bfac8cdcdb","modified":1486177090612},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"62cdda091d7901113bf32c58cc1e110908c3c135","modified":1486177090612},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"2fe70d9d7eb21c00a2e86fd389128388bb8c9c25","modified":1486177090611},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"5483f0c8b753e171400d9c27a585de6de890c8ba","modified":1486177090613},{"_id":"themes/material/layout/_widget/duoshuo.ejs","hash":"e0293b279e5bb3c4b980d3763ded0a97fb2db870","modified":1487050748224},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"a5ce35f2a456dc424e09b7e105b8d789dfe008df","modified":1486177090614},{"_id":"themes/material/layout/_widget/disqus.ejs","hash":"a57414d4b57e004c4753b7f793d3bc50b86b0d6d","modified":1486177090613},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"8d4474d5c797a6fdececeecb946e993a19fe9a40","modified":1486177090615},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"2bdb6a28eab0cbee9a95c0b6ee7ed2ea3795cd14","modified":1486177090615},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"d080683e457fc9b5501d9c1d25b900cdcd4d147e","modified":1486177090616},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"ff3a8bebfaf298cd362b9bb13639bfacf4c8e380","modified":1486177090617},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ae562eea1b432e44927a999381c9c2c43d5c1cc4","modified":1486177090616},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"69f5f3b2a9a2c84f0c8b424a412ef354cb0481a7","modified":1486177090614},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"353fe66ab5d5686f798d2a906a293341640db38b","modified":1486177090617},{"_id":"themes/material/source/css/duoshuo.css","hash":"7372200a8d019d4c368283de089d2e0481cb1de7","modified":1486177090621},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1486177090621},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1486177090622},{"_id":"themes/material/source/css/ie-blocker.css","hash":"121016e89d5f8b1f84f2e0a22da30f3c096de36e","modified":1486177090661},{"_id":"themes/material/source/css/uc.css","hash":"fdd08a03390256c5b89e38cad6e53228a49f02e1","modified":1486177090668},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1486177090675},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1486177090675},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1486177090718},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1486177090719},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1486177090720},{"_id":"themes/material/source/img/logo.jpg","hash":"bf6ec9ed12d93f95987ffe2fe5af74d721d9b918","modified":1486184489547},{"_id":"themes/material/source/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1486177090777},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1486177090776},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1486177090730},{"_id":"themes/material/source/js/highlight.min.js","hash":"e2959a551162dbea01307c72f7bd8d9d236b0cd0","modified":1486177090779},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"0bbd768e3be0081cf8d3fc3a9568c6a0f951ada7","modified":1486177090780},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"198ffa1583343a5b5bf5e52afcfbff96fd0ef569","modified":1486177090780},{"_id":"themes/material/source/js/smoothscroll.js","hash":"53204da28f2ccfd4af92511969319c574da1f7b5","modified":1486177090784},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1486177090783},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1486177090664},{"_id":"themes/material/source/css/style.css","hash":"80f630335467f259dc992182c91e502eeb92101f","modified":1486177090665},{"_id":"themes/material/source/css/style.min.css","hash":"2460d86314e416338aa5ec6ec032be5d8e100581","modified":1486177090667},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1486177090669},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1486177090674},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1486177090712},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1486177090717},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1486177090717},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1486177090720},{"_id":"themes/material/source/js/jquery.min.js","hash":"d0c03f4b0c3b72172804cbc5d19e44b3a0a9a171","modified":1486177090781},{"_id":"themes/material/source/js/js.js","hash":"c8d49615327c38fd7d00dff47fdd0d52fb94ca4c","modified":1486177090782},{"_id":"themes/material/source/js/js.min.js","hash":"1113143e83eaad19f43e84f9e8782f8afa3c9e67","modified":1486177090783},{"_id":"themes/material/source/css/highlight/ascetic.css","hash":"1b3f8c010d93271fe0b8973b24a83cccb43d2ab5","modified":1486177090625},{"_id":"themes/material/source/css/highlight/androidstudio.css","hash":"bd1d92a769b5e54f65ed659be012a5da7b933f67","modified":1486177090624},{"_id":"themes/material/source/css/highlight/arta.css","hash":"0c83871a3be547414936f040d1b651796ed432e9","modified":1486177090625},{"_id":"themes/material/source/css/highlight/agate.css","hash":"267d7a729d7106899d887940bd62f01a7f8810a8","modified":1486177090623},{"_id":"themes/material/source/css/highlight/arduino-light.css","hash":"459a63e66124cf3db5fdcbd0b211199048d718d3","modified":1486177090624},{"_id":"themes/material/source/css/highlight/atelier-cave-dark.css","hash":"0fe44a5e2e47a6d5f808f343be5e0ee38a157513","modified":1486177090626},{"_id":"themes/material/source/css/highlight/atelier-cave-light.css","hash":"8e8a3cd5611034e8cb1cf17ae598cb146feae0e5","modified":1486177090626},{"_id":"themes/material/source/css/highlight/atelier-dune-dark.css","hash":"371fbf41c919b2cf66dbd64db24fc9a9f270f0ca","modified":1486177090627},{"_id":"themes/material/source/css/highlight/atelier-dune-light.css","hash":"978c280fbb391ab34ec798ff63d27ccf0622ffc5","modified":1486177090627},{"_id":"themes/material/source/css/highlight/atelier-estuary-dark.css","hash":"6cd190c8e9645ec6cc3aa897f2076c9a2a65fbf4","modified":1486177090627},{"_id":"themes/material/source/css/highlight/atelier-estuary-light.css","hash":"eaf8d2305631471a5c69039f5f666ec7cdb0991e","modified":1486177090630},{"_id":"themes/material/source/css/highlight/atelier-forest-light.css","hash":"cdfdc19fd6e33879b2212cf41d5159484d72b1ac","modified":1486177090630},{"_id":"themes/material/source/css/highlight/atelier-forest-dark.css","hash":"8d9cece07b6ea31e01fec11987b42ffc5bfb8c3f","modified":1486177090630},{"_id":"themes/material/source/css/highlight/atelier-heath-dark.css","hash":"707c60a91e0390b4d481710e5cab28441b1a6d20","modified":1486177090630},{"_id":"themes/material/source/css/highlight/atelier-heath-light.css","hash":"9b034e416e989edba7d2c2fd57ed706dc2059c4e","modified":1486177090631},{"_id":"themes/material/source/css/highlight/atelier-lakeside-dark.css","hash":"6f9102332449833997b2e72e8658fb9de212bc48","modified":1486177090631},{"_id":"themes/material/source/css/highlight/atelier-lakeside-light.css","hash":"180699d969cb62743bc8e4cf4dc5b88ea1c6ed9b","modified":1486177090631},{"_id":"themes/material/source/css/highlight/atelier-plateau-dark.css","hash":"4d69e5501ec2a7b81810466837ec731a81590d4d","modified":1486177090632},{"_id":"themes/material/source/css/highlight/atelier-savanna-dark.css","hash":"3768ba3e44fc1038adb09ff3adfbe4c8d807c338","modified":1486177090634},{"_id":"themes/material/source/css/highlight/atelier-savanna-light.css","hash":"fd76c75ef1f1ab693ccd09e973204cc80dae18cd","modified":1486177090634},{"_id":"themes/material/source/css/highlight/atelier-plateau-light.css","hash":"f8e768bd2b111a4dffb6100391b647f6d9b1f445","modified":1486177090633},{"_id":"themes/material/source/css/highlight/atelier-seaside-dark.css","hash":"f44bb322aab7a93f0c52a39e878670b7d6c2a8b8","modified":1486177090635},{"_id":"themes/material/source/css/highlight/atelier-seaside-light.css","hash":"dd9657b37f5fd62a288972380193db4249bcdf96","modified":1486177090635},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-dark.css","hash":"f6dc59deaf5dc1a87229e207f18b0def15a235cd","modified":1486177090635},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-light.css","hash":"4783dd049a048c7858603984b61b5f7db920c44d","modified":1486177090636},{"_id":"themes/material/source/css/highlight/atom-one-dark.css","hash":"91671ed42c0ce1363843144a9666d34faddb7e27","modified":1486177090636},{"_id":"themes/material/source/css/highlight/atom-one-light.css","hash":"526e305a190476a2b28a244ca928aabdcc686c34","modified":1486177090636},{"_id":"themes/material/source/css/highlight/codepen-embed.css","hash":"a4ce8f56fa8ec5078f597db441ebeace6264a508","modified":1486177090637},{"_id":"themes/material/source/css/highlight/brown-paper.css","hash":"9a030da7dc781e1461b15186f2b01ea684ee9ad2","modified":1486177090637},{"_id":"themes/material/source/css/highlight/color-brewer.css","hash":"317e097d8b2e0fd3e7c64d97bb93caa8e9e23b9d","modified":1486177090637},{"_id":"themes/material/source/css/highlight/darkula.css","hash":"d004ba64216234a53c84fa55baefdc8b371bb4d9","modified":1486177090639},{"_id":"themes/material/source/css/highlight/dark.css","hash":"d4b6d04ed87e2ef4fcd359052c0220b70060a0f3","modified":1486177090638},{"_id":"themes/material/source/css/highlight/darcula.css","hash":"243e56c3eca2c7234b125df3c9a882d984f89b8a","modified":1486177090638},{"_id":"themes/material/source/css/highlight/dracula.css","hash":"896157dc66de96b3e8ac2c2d032ac1f79f42ac42","modified":1486177090640},{"_id":"themes/material/source/css/highlight/far.css","hash":"3c9b37b9d4f992042165069792ea373ce299fa31","modified":1486177090640},{"_id":"themes/material/source/css/highlight/github-gist.css","hash":"26f7b67c3c0ad968daf23129c5706c797ce24284","modified":1486177090641},{"_id":"themes/material/source/css/highlight/foundation.css","hash":"b8f36a5621cc6043fbf3ba23915b6faa92b2e6ba","modified":1486177090640},{"_id":"themes/material/source/css/highlight/github.css","hash":"6f28691831ef118939d2e109a205b425a5249b90","modified":1486177090641},{"_id":"themes/material/source/css/highlight/googlecode.css","hash":"8ea1780e834b7f40c962744cb4ef533f9b805f9b","modified":1486177090642},{"_id":"themes/material/source/css/highlight/grayscale.css","hash":"b2074d4f1ffa928a9948a9edecf8e4ec513999e6","modified":1486177090642},{"_id":"themes/material/source/css/highlight/docco.css","hash":"9495b22865033719a0701b8e3557a843611204db","modified":1486177090639},{"_id":"themes/material/source/css/highlight/gruvbox-dark.css","hash":"bfe2f24aef069669dc44dba54f14b0005667d700","modified":1486177090642},{"_id":"themes/material/source/css/highlight/gruvbox-light.css","hash":"4e5445d5eaa82f1787e91682e544fea3be3b4bb9","modified":1486177090643},{"_id":"themes/material/source/css/highlight/hopscotch.css","hash":"1043cccf681b3c58b54dc044e2fcaeb409cdbda1","modified":1486177090643},{"_id":"themes/material/source/css/highlight/idea.css","hash":"cfdc18180d926095d8322f36f041a2cf43445eef","modified":1486177090644},{"_id":"themes/material/source/css/highlight/hybrid.css","hash":"c1cf52abb1248498794739cea51d6ecbd7539c69","modified":1486177090643},{"_id":"themes/material/source/css/highlight/ir-black.css","hash":"c8ee27f6873ee1e52c394b373bc8be49d059a46c","modified":1486177090644},{"_id":"themes/material/source/css/highlight/kimbie.dark.css","hash":"8fb1f4307f136010545bb095fd9a4bd298bd9dee","modified":1486177090645},{"_id":"themes/material/source/css/highlight/magula.css","hash":"5a0e59aff9f270dbb166e2735edf0bd91569ad9d","modified":1486177090646},{"_id":"themes/material/source/css/highlight/mono-blue.css","hash":"3d78780568f60215686ca93e1459c0a86b1e13a2","modified":1486177090647},{"_id":"themes/material/source/css/highlight/monokai-sublime.css","hash":"0d16b61fd8723b61ebbb4ae85936b7222089cd5c","modified":1486177090647},{"_id":"themes/material/source/css/highlight/obsidian.css","hash":"c8f452d1dd3c24ed1fd31a8a542976a98768f0ee","modified":1486177090648},{"_id":"themes/material/source/css/highlight/kimbie.light.css","hash":"6c95f1dc95fe047eff53b52231a8f552ec17713d","modified":1486177090645},{"_id":"themes/material/source/css/highlight/monokai.css","hash":"525238932a2e8a86d36ff559ec8c56617a81c66a","modified":1486177090648},{"_id":"themes/material/source/css/highlight/ocean.css","hash":"05261db4eab97828f1e0e2d8dac3c17b46c5135b","modified":1486177090649},{"_id":"themes/material/source/css/highlight/paraiso-light.css","hash":"ec682ddb4f6c6022e86bbc3b21fee2db17534dfa","modified":1486177090649},{"_id":"themes/material/source/css/highlight/pojoaque.css","hash":"147fa0862896e6954bc6800e573d0dc009d0bd76","modified":1486177090650},{"_id":"themes/material/source/css/highlight/purebasic.css","hash":"90723dc0145d109bfd8f52a6586cafc0b60f3744","modified":1486177090652},{"_id":"themes/material/source/css/highlight/qtcreator_light.css","hash":"64a3df679ec5c1189fc4f4c046da13ccfde61088","modified":1486177090652},{"_id":"themes/material/source/css/highlight/railscasts.css","hash":"1bb2dd8ccba3e33aa3fd419bad757b0710ca7bf3","modified":1486177090653},{"_id":"themes/material/source/css/highlight/paraiso-dark.css","hash":"54a74080b472d4f02ec892383df7243a9fc0325c","modified":1486177090649},{"_id":"themes/material/source/css/highlight/qtcreator_dark.css","hash":"f6247839bf5f054c1c67675c9a2009c9dd882a54","modified":1486177090652},{"_id":"themes/material/source/css/highlight/rainbow.css","hash":"34ebae47223dc8e1b6464880fa83e217a5774199","modified":1486177090653},{"_id":"themes/material/source/css/highlight/school-book.css","hash":"908952208417159a90bd05cd6b9c1ae6cfab5274","modified":1486177090654},{"_id":"themes/material/source/css/highlight/solarized-light.css","hash":"fe6779c179c3e6136384e463fdc6d3b08ff88ba7","modified":1486177090654},{"_id":"themes/material/source/css/highlight/solarized-dark.css","hash":"97bba4362e3001a93f1b111a140895cbe6047a81","modified":1486177090654},{"_id":"themes/material/source/css/highlight/solarized-white.css","hash":"1d10f6dc697821d0959eaf975dddddff971a6d63","modified":1486177090655},{"_id":"themes/material/source/css/highlight/tomorrow-night-bright.css","hash":"db7f477d609bfd0d264f69fdee32d28b2b3771ec","modified":1486177090656},{"_id":"themes/material/source/css/highlight/sunburst.css","hash":"bcbe342ac0be63bb2e8545f426e13c1751a70923","modified":1486177090655},{"_id":"themes/material/source/css/highlight/tomorrow-night-blue.css","hash":"8fc2bd599487fa428895af9c15278b629205a005","modified":1486177090655},{"_id":"themes/material/source/css/highlight/tomorrow-night.css","hash":"51486c77fab70d7615e814787531d1a7db22a65a","modified":1486177090657},{"_id":"themes/material/source/css/highlight/vs.css","hash":"7f91ad5a66ffbc8db2af542bd2db0e84bcf22587","modified":1486177090658},{"_id":"themes/material/source/css/highlight/tomorrow-night-eighties.css","hash":"12449d31f223502297086943f1bfeeac5f28c4c1","modified":1486177090657},{"_id":"themes/material/source/css/material.css","hash":"a4f33bc2e224f7731456d5ee4aae2a1ac80c3011","modified":1486177090663},{"_id":"themes/material/source/css/highlight/tomorrow.css","hash":"e98fd167fe9c5668165f28dd6c0ecb59b3293f67","modified":1486177090658},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1486177090671},{"_id":"themes/material/source/css/highlight/xcode.css","hash":"229ba54cfed52b79c389eb094ef3e480350bf308","modified":1486177090660},{"_id":"themes/material/source/css/highlight/xt256.css","hash":"1cfc26a3ec7154a4649eee5bfe57a50e0dc5046e","modified":1486177090661},{"_id":"themes/material/source/css/highlight/zenburn.css","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1486177090661},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1486177090728},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1486177090716},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1486177090728},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1486177090729},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1486177090721},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1486177090722},{"_id":"themes/material/source/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1486177090722},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1486177090722},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1486177090723},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1486177090724},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1486177090724},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1486177090725},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1486177090725},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1486177090723},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1486177090723},{"_id":"themes/material/source/js/gallery/jquery.poptrox.min.js","hash":"4b156b61a32467b6bf7766201b777d8949a74ee4","modified":1486177090777},{"_id":"themes/material/source/js/gallery/util.min.js","hash":"21f9de56727e235a83d514d08a65c7ef1b09c9e9","modified":1486177090779},{"_id":"themes/material/source/js/gallery/main.min.js","hash":"c8ab39417f0d855bd28b3f6e040e93b245ba10f1","modified":1486177090778},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1486177090742},{"_id":"themes/material/source/js/gallery/skel.min.js","hash":"18a181affac3ac6dcb5e4504e56b14941f4f2185","modified":1486177090778},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1486177090747},{"_id":"themes/material/source/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1486177090748},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1486177090745},{"_id":"themes/material/source/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1486177090761},{"_id":"themes/material/source/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1486177090766},{"_id":"themes/material/source/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1486177090735},{"_id":"themes/material/source/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1486177090741},{"_id":"themes/material/source/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1486177090759},{"_id":"themes/material/source/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1486177090775},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1486177090714},{"_id":"themes/material/source/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1486177090737},{"_id":"themes/material/source/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1486177090752},{"_id":"themes/material/source/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1486177090774},{"_id":"themes/material/source/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1486177090733},{"_id":"themes/material/source/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1486177090757},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1486177090682},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1486177090687},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1486177090703},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1486177090699},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1486177090692},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1486177090711},{"_id":"themes/material/source/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1486177090770},{"_id":"themes/material/source/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1486177090750},{"_id":"themes/material/source/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1486177090765},{"_id":"themes/material/source/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1486177090744},{"_id":"public/content.json","hash":"2c77ce5fe06c2b2f66af7fc27527d725d0fa303e","modified":1488475337858},{"_id":"public/atom.xml","hash":"78ac3fdec3884a3dd7cd4b132f42d96e161116ca","modified":1488475337889},{"_id":"public/2017/02/08/share-mouse-and-keyboard-with-your-windows-linux-machines-md/index.html","hash":"198e32d0eeae299fc5a754e84e4a9ed91a872944","modified":1488475338013},{"_id":"public/2017/02/03/hexo-github-pages-blog/index.html","hash":"67f5214c58eca8669fe7974363fcad43268990e1","modified":1488475338119},{"_id":"public/2017/02/14/elasticsearch-elastalert/index.html","hash":"dea00b6c466dcd93738f5f50367c56b872ac71ff","modified":1488475338122},{"_id":"public/2017/03/03/heartbeat/index.html","hash":"9468b1a81f76f5ae3377c243fe8704ff45677615","modified":1488475338165},{"_id":"public/2017/03/02/elk-stack-beats/index.html","hash":"b9eab36984083731db72432a2add20144dff5a0f","modified":1488475338217},{"_id":"public/2017/02/28/springmvc-log4j-to-logback/index.html","hash":"516d22b68dd007e4ab0260a45845d5dde702a756","modified":1488475338222},{"_id":"public/archives/index.html","hash":"e8d927746c7b7cc3947f445657cb24091d132f3e","modified":1488475338222},{"_id":"public/2017/02/16/elastalert-wechat-plugin/index.html","hash":"0ae9a121e5c8639205b71eba1f1c6489938e8098","modified":1488475338222},{"_id":"public/archives/2017/index.html","hash":"1654d7c4642ebb281636d0d891f213a86145cfec","modified":1488475338222},{"_id":"public/archives/2017/02/index.html","hash":"c316269061559212ff93e273cda801816f9ae2f0","modified":1488475338222},{"_id":"public/index.html","hash":"fa3a93a274c718ef7cb7760fd905d6c520e2f3c6","modified":1488475338222},{"_id":"public/tags/elk/index.html","hash":"595c4ecd01364a174847d3224cfdc51c40926af2","modified":1488475338222},{"_id":"public/categories/elkstasck/index.html","hash":"e6e0b24d01a2eaeb7fe3085ba777223227856cbe","modified":1488475338223},{"_id":"public/categories/工具/index.html","hash":"2d0473b24b617601a294cd680c8644aa843720e1","modified":1488475338223},{"_id":"public/tags/elkstasck/index.html","hash":"ce70a7e6342515d3fe85dab8ac962f1d33e55b51","modified":1488475338223},{"_id":"public/tags/ElastAlert/index.html","hash":"d6b8c09da13faaabb345ed78dec61359039802ff","modified":1488475338223},{"_id":"public/categories/编程/index.html","hash":"cc09d9eae097a7116d59051ed3ad88a42fbbec6e","modified":1488475338223},{"_id":"public/tags/blog/index.html","hash":"de60aa551fb7e785f19a67fbfe7cc6076dd70821","modified":1488475338223},{"_id":"public/tags/synergy/index.html","hash":"db582144f8d39b1c218f61bb5d31cc88befe692b","modified":1488475338223},{"_id":"public/tags/hexo/index.html","hash":"a2883663b718b3326a05f0b3d1b2f53041c75652","modified":1488475338224},{"_id":"public/archives/2017/03/index.html","hash":"28c585b7b85b7c097e25e44206fcd12f81596460","modified":1488475338236},{"_id":"public/tags/elkstack/index.html","hash":"b033afac7fd7676c47c43e689883e10ca5d2a99a","modified":1488475338236},{"_id":"public/tags/beats/index.html","hash":"d87c1a03e4f29dcf445afdadcab4919395f5eb7e","modified":1488475338236},{"_id":"public/tags/springmvc/index.html","hash":"2f6a87978b72734d0e714ffe7913d0473754de9b","modified":1488475338236},{"_id":"public/tags/logback/index.html","hash":"ab694e66b4fdd4e06fd20a7125535c5cc145d058","modified":1488475338236},{"_id":"public/tags/log4j/index.html","hash":"5d1460ae67240adcc9ab7e460218b30fe2a796e3","modified":1488475338236},{"_id":"public/tags/Heartbeat/index.html","hash":"ada8586aee0f1d6f70173f3a266b5b78f4f067c5","modified":1488475338236},{"_id":"public/tags/log/index.html","hash":"f5bbf7608c8ff287d96fb5acbfc31ee056039d72","modified":1488475338237},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1488475338237},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1488475338237},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1488475338237},{"_id":"public/img/logo.jpg","hash":"bf6ec9ed12d93f95987ffe2fe5af74d721d9b918","modified":1488475338237},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1488475338237},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1488475338237},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1488475338238},{"_id":"public/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1488475338238},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1488475338238},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1488475338238},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1488475338238},{"_id":"public/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1488475338238},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1488475338238},{"_id":"public/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1488475338238},{"_id":"public/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1488475338238},{"_id":"public/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1488475338238},{"_id":"public/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1488475338238},{"_id":"public/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1488475338238},{"_id":"public/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1488475338238},{"_id":"public/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1488475338238},{"_id":"public/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1488475338238},{"_id":"public/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1488475338238},{"_id":"public/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1488475338238},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1488475338255},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1488475338259},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1488475338273},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1488475338273},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1488475338273},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1488475338273},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1488475338273},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1488475338274},{"_id":"public/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1488475338274},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1488475338274},{"_id":"public/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1488475338274},{"_id":"public/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1488475338274},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1488475338290},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1488475338290},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1488475338290},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1488475338290},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1488475338290},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1488475338290},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1488475338290},{"_id":"public/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1488475338290},{"_id":"public/css/highlight/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1488475338290},{"_id":"public/css/highlight/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1488475338290},{"_id":"public/css/highlight/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1488475338291},{"_id":"public/css/highlight/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1488475338291},{"_id":"public/css/highlight/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1488475338291},{"_id":"public/css/highlight/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1488475338291},{"_id":"public/css/highlight/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1488475338291},{"_id":"public/css/highlight/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1488475338291},{"_id":"public/css/highlight/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1488475338291},{"_id":"public/css/highlight/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1488475338291},{"_id":"public/css/highlight/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1488475338291},{"_id":"public/css/highlight/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1488475338291},{"_id":"public/css/highlight/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1488475338291},{"_id":"public/css/highlight/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1488475338291},{"_id":"public/css/highlight/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1488475338291},{"_id":"public/css/highlight/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1488475338291},{"_id":"public/css/highlight/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1488475338291},{"_id":"public/css/highlight/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1488475338291},{"_id":"public/css/highlight/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1488475338291},{"_id":"public/css/highlight/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1488475338291},{"_id":"public/css/highlight/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1488475338291},{"_id":"public/css/highlight/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1488475338291},{"_id":"public/css/highlight/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1488475338291},{"_id":"public/css/highlight/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1488475338291},{"_id":"public/css/highlight/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1488475338291},{"_id":"public/css/highlight/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1488475338291},{"_id":"public/css/highlight/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1488475338291},{"_id":"public/css/highlight/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1488475338292},{"_id":"public/css/highlight/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1488475338292},{"_id":"public/css/highlight/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1488475338292},{"_id":"public/css/highlight/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1488475338292},{"_id":"public/css/highlight/darcula.css","hash":"7740224d07375ddc321147dffabbfa83e39f0d8b","modified":1488475338292},{"_id":"public/css/highlight/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1488475338292},{"_id":"public/css/highlight/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1488475338292},{"_id":"public/css/highlight/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1488475338292},{"_id":"public/css/highlight/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1488475338292},{"_id":"public/css/highlight/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1488475338292},{"_id":"public/css/highlight/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1488475338292},{"_id":"public/css/highlight/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1488475338292},{"_id":"public/css/highlight/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1488475338292},{"_id":"public/css/highlight/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1488475338292},{"_id":"public/css/highlight/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1488475338292},{"_id":"public/css/highlight/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1488475338292},{"_id":"public/css/highlight/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1488475338292},{"_id":"public/css/highlight/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1488475338292},{"_id":"public/css/highlight/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1488475338292},{"_id":"public/css/highlight/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1488475338292},{"_id":"public/css/highlight/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1488475338292},{"_id":"public/css/highlight/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1488475338292},{"_id":"public/css/highlight/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1488475338292},{"_id":"public/css/highlight/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1488475338292},{"_id":"public/css/highlight/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1488475338292},{"_id":"public/css/highlight/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1488475338292},{"_id":"public/css/highlight/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1488475338292},{"_id":"public/css/highlight/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1488475338292},{"_id":"public/css/highlight/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1488475338293},{"_id":"public/css/highlight/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1488475338293},{"_id":"public/css/highlight/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1488475338293},{"_id":"public/css/highlight/purebasic.css","hash":"ef74aa66da52bf7ff04ae4972b3e351372043057","modified":1488475338293},{"_id":"public/css/highlight/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1488475338293},{"_id":"public/css/highlight/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1488475338294},{"_id":"public/css/highlight/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1488475338294},{"_id":"public/css/highlight/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1488475338294},{"_id":"public/css/highlight/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1488475338294},{"_id":"public/css/highlight/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1488475338294},{"_id":"public/css/highlight/solarized-white.css","hash":"e6d606e8e4b1fa3a363fb3ef0b2b8a2a40e3f7ed","modified":1488475338294},{"_id":"public/css/highlight/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1488475338294},{"_id":"public/css/highlight/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1488475338294},{"_id":"public/css/highlight/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1488475338294},{"_id":"public/css/highlight/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1488475338294},{"_id":"public/css/highlight/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1488475338294},{"_id":"public/css/highlight/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1488475338294},{"_id":"public/css/highlight/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1488475338294},{"_id":"public/css/highlight/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1488475338294},{"_id":"public/css/highlight/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1488475338294},{"_id":"public/css/highlight/xt256.css","hash":"bbe28ec69177699cb6300d777598adf6323f7861","modified":1488475338294},{"_id":"public/css/highlight/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1488475338294},{"_id":"public/js/gallery/jquery.poptrox.min.js","hash":"ade2e2710565eebca01b68b9bfae4a4848d779aa","modified":1488475338294},{"_id":"public/js/gallery/skel.min.js","hash":"a337cc51a3fb9953d306b3879e2e7676dd27ce53","modified":1488475338295},{"_id":"public/js/gallery/main.min.js","hash":"c8ab39417f0d855bd28b3f6e040e93b245ba10f1","modified":1488475338295},{"_id":"public/js/gallery/util.min.js","hash":"21f9de56727e235a83d514d08a65c7ef1b09c9e9","modified":1488475338295},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1488475338295},{"_id":"public/js/highlight.min.js","hash":"de8b5bc84ade7906ea2000deb3a9c29dd700ea05","modified":1488475338295},{"_id":"public/css/style.css","hash":"d37a4998c382a6ffda6365e7352ba6ccca39175b","modified":1488475338295},{"_id":"public/css/style.min.css","hash":"ac6be209ae8814ccc9b9dad7b87c14d40e8ef303","modified":1488475338295},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1488475338295},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1488475338295},{"_id":"public/js/js.min.js","hash":"0653ac558249173228c656f0b51b08286c1da250","modified":1488475338295},{"_id":"public/js/js.js","hash":"5c36b940f65bd43dbe9613cb1a7f730d93213021","modified":1488475338295},{"_id":"public/css/material.css","hash":"3c138cc7cf3d53c033471c6706b0d553b0b936bf","modified":1488475338295},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1488475338295},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1488475338295},{"_id":"public/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1488475338295},{"_id":"public/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1488475338296},{"_id":"public/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1488475338296},{"_id":"public/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1488475338296},{"_id":"public/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1488475338323},{"_id":"public/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1488475338324},{"_id":"public/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1488475338324},{"_id":"public/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1488475338353},{"_id":"public/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1488475338353},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1488475338366},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1488475338425},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1488475338425},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1488475338425},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1488475338426},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1488475338426},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1488475338426},{"_id":"public/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1488475338426},{"_id":"public/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1488475338429},{"_id":"public/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1488475338429},{"_id":"public/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1488475338435}],"Category":[{"name":"elkstasck","_id":"cizsns8oe0002vkdor2068vbu"},{"name":"编程","_id":"cizsns8ov000cvkdol6ws9cxw"},{"name":"工具","_id":"cizsns8oz000lvkdo3p5c7cnw"}],"Data":[],"Page":[],"Post":[{"title":"ElastAlert 基于Elasticsearch的监控告警","date":"2017-02-14T00:27:47.000Z","_content":"\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","source":"_posts/elasticsearch-elastalert.md","raw":"---\ntitle: ElastAlert 基于Elasticsearch的监控告警\ndate: 2017-02-14 08:27:47\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","slug":"elasticsearch-elastalert","published":1,"updated":"2017-02-14T06:32:25.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizsns8o60000vkdo0n2nc3su","content":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"external\">https://github.com/Yelp/elastalert</a></p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\" target=\"_blank\" rel=\"external\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python --version</div><div class=\"line\"></div><div class=\"line\">Python 2.7.12+</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></div><div class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></div></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ sudo python setup.py install</div><div class=\"line\"></div><div class=\"line\">$ sudo pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</div><div class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</div><div class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</div><div class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</div><div class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</div></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\" target=\"_blank\" rel=\"external\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ elastalert-create-index</div><div class=\"line\">New index name (Default elastalert_status)</div><div class=\"line\">Name of existing index to copy (Default None)</div><div class=\"line\">New index elastalert_status created</div><div class=\"line\">Done!</div></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\" target=\"_blank\" rel=\"external\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi ~/elastalert/config.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></div><div class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></div><div class=\"line\"><span class=\"attr\">rules_folder:</span> example_rules</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></div><div class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></div><div class=\"line\"><span class=\"attr\">run_every:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></div><div class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></div><div class=\"line\"><span class=\"attr\">buffer_time:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></div><div class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></div><div class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></div><div class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></div><div class=\"line\"><span class=\"comment\">#verify_certs: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></div><div class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></div><div class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></div><div class=\"line\"><span class=\"comment\"># for details</span></div><div class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></div><div class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></div><div class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></div><div class=\"line\"><span class=\"attr\">writeback_index:</span> elastalert_status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></div><div class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></div><div class=\"line\"><span class=\"attr\">alert_time_limit:</span></div><div class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></div><div class=\"line\"><span class=\"attr\">user:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></div><div class=\"line\"><span class=\"attr\">password:</span> xxx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\" target=\"_blank\" rel=\"external\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">#限定时间刻度</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\">    <span class=\"comment\">#1分钟</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- query:</span></div><div class=\"line\"><span class=\"attr\">    query_string:</span></div><div class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></div><div class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></div><div class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></div><div class=\"line\"><span class=\"attr\">smtp_host:</span> smtp<span class=\"number\">.163</span>.com</div><div class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></div><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\"><span class=\"attr\">smtp_auth_file:</span> /home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</div><div class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></div><div class=\"line\"><span class=\"attr\">email_reply_to:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></div><div class=\"line\"><span class=\"attr\">from_addr:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (required, email specific)</span></div><div class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></div><div class=\"line\"><span class=\"attr\">email:</span></div><div class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\" target=\"_blank\" rel=\"external\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"external\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</div><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</span></div><div class=\"line\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></div></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</div><div class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</div><div class=\"line\">INFO:elastalert:Example rule</div><div class=\"line\"></div><div class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</div><div class=\"line\"></div><div class=\"line\">@timestamp: 2017-02-14T03:10:46Z</div><div class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</div><div class=\"line\">_index: logstash-2017.02.14</div><div class=\"line\">_type: <span class=\"built_in\">test</span></div><div class=\"line\">field: value</div><div class=\"line\">num_hits: 2</div><div class=\"line\">num_matches: 1</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>\n","excerpt":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\">https://github.com/Yelp/elastalert</a></p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python --version</div><div class=\"line\"></div><div class=\"line\">Python 2.7.12+</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></div><div class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></div></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ sudo python setup.py install</div><div class=\"line\"></div><div class=\"line\">$ sudo pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</div><div class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</div><div class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</div><div class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</div><div class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</div></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ elastalert-create-index</div><div class=\"line\">New index name (Default elastalert_status)</div><div class=\"line\">Name of existing index to copy (Default None)</div><div class=\"line\">New index elastalert_status created</div><div class=\"line\">Done!</div></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi ~/elastalert/config.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></div><div class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></div><div class=\"line\"><span class=\"attr\">rules_folder:</span> example_rules</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></div><div class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></div><div class=\"line\"><span class=\"attr\">run_every:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></div><div class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></div><div class=\"line\"><span class=\"attr\">buffer_time:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></div><div class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></div><div class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></div><div class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></div><div class=\"line\"><span class=\"comment\">#verify_certs: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></div><div class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></div><div class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></div><div class=\"line\"><span class=\"comment\"># for details</span></div><div class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></div><div class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></div><div class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></div><div class=\"line\"><span class=\"attr\">writeback_index:</span> elastalert_status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></div><div class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></div><div class=\"line\"><span class=\"attr\">alert_time_limit:</span></div><div class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></div><div class=\"line\"><span class=\"attr\">user:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></div><div class=\"line\"><span class=\"attr\">password:</span> xxx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">#限定时间刻度</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\">    <span class=\"comment\">#1分钟</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- query:</span></div><div class=\"line\"><span class=\"attr\">    query_string:</span></div><div class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></div><div class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></div><div class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></div><div class=\"line\"><span class=\"attr\">smtp_host:</span> smtp<span class=\"number\">.163</span>.com</div><div class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></div><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\"><span class=\"attr\">smtp_auth_file:</span> /home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</div><div class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></div><div class=\"line\"><span class=\"attr\">email_reply_to:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></div><div class=\"line\"><span class=\"attr\">from_addr:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (required, email specific)</span></div><div class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></div><div class=\"line\"><span class=\"attr\">email:</span></div><div class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</div><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</div><div class=\"line\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></div></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</div><div class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</div><div class=\"line\">INFO:elastalert:Example rule</div><div class=\"line\"></div><div class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</div><div class=\"line\"></div><div class=\"line\">@timestamp: 2017-02-14T03:10:46Z</div><div class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</div><div class=\"line\">_index: logstash-2017.02.14</div><div class=\"line\">_type: <span class=\"built_in\">test</span></div><div class=\"line\">field: value</div><div class=\"line\">num_hits: 2</div><div class=\"line\">num_matches: 1</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>"},{"title":"ELK Stack之Beats简介","date":"2017-03-02T10:55:39.000Z","_content":"\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","source":"_posts/elk-stack-beats.md","raw":"---\ntitle: ELK Stack之Beats简介\ndate: 2017-03-02 18:55:39\ntags: [elk,elkstack,beats]\ncategories: [elkstasck]\n---\n\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","slug":"elk-stack-beats","published":1,"updated":"2017-03-02T10:57:41.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizsns8oa0001vkdozvkeozk9","content":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br><a id=\"more\"></a></p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n","excerpt":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br>","more":"</p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>"},{"title":"hexo搭建博客","date":"2017-02-03T08:07:16.000Z","_content":"本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","source":"_posts/hexo-github-pages-blog.md","raw":"title: hexo搭建博客\ndate: 2017-02-03 16:07:16\ntags: [blog,hexo]\ncategories: [编程]\n---\n本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","slug":"hexo-github-pages-blog","published":1,"updated":"2017-02-08T14:16:14.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizsns8oh0004vkdo3q582nkf","content":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>\n<a id=\"more\"></a>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">; cli configs</div><div class=\"line\">long = <span class=\"literal\">true</span></div><div class=\"line\">scope = <span class=\"string\">\"\"</span></div><div class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></div><div class=\"line\"></div><div class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</div><div class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</div><div class=\"line\">cache-lock-retries = 10</div><div class=\"line\">cache-lock-stale = 60000</div><div class=\"line\">cache-lock-wait = 10000</div><div class=\"line\">cache-max = null</div></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></div><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"external\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></div><div class=\"line\"></div><div class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></div><div class=\"line\"></div><div class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></div><div class=\"line\"></div><div class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></div><div class=\"line\"></div><div class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></div><div class=\"line\"></div><div class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></div></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令缩写</span></div><div class=\"line\"></div><div class=\"line\">hexo n == hexo new</div><div class=\"line\"></div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\"></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\"></div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令组合</span></div><div class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></div><div class=\"line\"></div><div class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></div></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ssh-keygen</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输入编译代码</span></div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></div><div class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></div></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh-rsa</div><div class=\"line\"></div><div class=\"line\">xxxx 具体的key xxxxxx  userName@email</div></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></div><div class=\"line\"></div><div class=\"line\">git add . <span class=\"comment\"># 添加文件</span></div><div class=\"line\"></div><div class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></div><div class=\"line\"></div><div class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></div><div class=\"line\"></div><div class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></div><div class=\"line\"></div><div class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></div></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"attr\">node_js:</span> stable</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></div><div class=\"line\"><span class=\"attr\">install:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">before_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-helper-qrcode --save</div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-generator-feed --save</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> hexo g</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">after_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> cd ./public</div><div class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></div><div class=\"line\"><span class=\"bullet\">  -</span> if [ $MY_DOMAIN ]; then echo $&#123;MY_DOMAIN&#125; &gt; CNAME; fi</div><div class=\"line\"><span class=\"bullet\">  -</span> git init</div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.name <span class=\"string\">\"$&#123;userName&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.email <span class=\"string\">\"$&#123;email&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git add .</div><div class=\"line\"><span class=\"bullet\">  -</span> git commit -m <span class=\"string\">\"Update docs\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git push --force --quiet <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> master:master</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> blog-source</div><div class=\"line\"><span class=\"attr\">env:</span></div><div class=\"line\"><span class=\"attr\"> global:</span></div><div class=\"line\"><span class=\"attr\">   - GH_REF:</span> github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</div><div class=\"line\">   <span class=\"comment\"># 自定义域名</span></div><div class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> anjia.ml</div></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"external\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\" target=\"_blank\" rel=\"external\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>\n","excerpt":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>","more":"<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">; cli configs</div><div class=\"line\">long = <span class=\"literal\">true</span></div><div class=\"line\">scope = <span class=\"string\">\"\"</span></div><div class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></div><div class=\"line\"></div><div class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</div><div class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</div><div class=\"line\">cache-lock-retries = 10</div><div class=\"line\">cache-lock-stale = 60000</div><div class=\"line\">cache-lock-wait = 10000</div><div class=\"line\">cache-max = null</div></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></div><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></div><div class=\"line\"></div><div class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></div><div class=\"line\"></div><div class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></div><div class=\"line\"></div><div class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></div><div class=\"line\"></div><div class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></div><div class=\"line\"></div><div class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></div></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令缩写</span></div><div class=\"line\"></div><div class=\"line\">hexo n == hexo new</div><div class=\"line\"></div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\"></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\"></div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令组合</span></div><div class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></div><div class=\"line\"></div><div class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></div></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ssh-keygen</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输入编译代码</span></div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></div><div class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></div></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh-rsa</div><div class=\"line\"></div><div class=\"line\">xxxx 具体的key xxxxxx  userName@email</div></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></div><div class=\"line\"></div><div class=\"line\">git add . <span class=\"comment\"># 添加文件</span></div><div class=\"line\"></div><div class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></div><div class=\"line\"></div><div class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></div><div class=\"line\"></div><div class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></div><div class=\"line\"></div><div class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></div></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"attr\">node_js:</span> stable</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></div><div class=\"line\"><span class=\"attr\">install:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">before_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-helper-qrcode --save</div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-generator-feed --save</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> hexo g</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">after_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> cd ./public</div><div class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></div><div class=\"line\"><span class=\"bullet\">  -</span> if [ $MY_DOMAIN ]; then echo $&#123;MY_DOMAIN&#125; &gt; CNAME; fi</div><div class=\"line\"><span class=\"bullet\">  -</span> git init</div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.name <span class=\"string\">\"$&#123;userName&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.email <span class=\"string\">\"$&#123;email&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git add .</div><div class=\"line\"><span class=\"bullet\">  -</span> git commit -m <span class=\"string\">\"Update docs\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git push --force --quiet <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> master:master</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> blog-source</div><div class=\"line\"><span class=\"attr\">env:</span></div><div class=\"line\"><span class=\"attr\"> global:</span></div><div class=\"line\"><span class=\"attr\">   - GH_REF:</span> github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</div><div class=\"line\">   <span class=\"comment\"># 自定义域名</span></div><div class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> anjia.ml</div></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>"},{"title":"ElkStack之Heartbeat(心跳检测)","date":"2017-03-02T17:20:16.000Z","_content":"\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","source":"_posts/heartbeat.md","raw":"---\ntitle: ElkStack之Heartbeat(心跳检测)\ndate: 2017-03-03 01:20:16\ntags: [elk,elkstasck,Heartbeat]\ncategories: [elkstasck]\n---\n\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","slug":"heartbeat","published":1,"updated":"2017-03-03T05:54:45.856Z","_id":"cizsns8oj0005vkdoi2wq91hj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"external\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</div><div class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</div></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</div><div class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</div></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</div><div class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"external\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><div class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></div><div class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\" target=\"_blank\" rel=\"external\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\" target=\"_blank\" rel=\"external\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> icmp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost:7\"</span>]  <span class=\"comment\"># default TCP Echo Protocol</span></div><div class=\"line\"><span class=\"attr\">  mode:</span> any                     <span class=\"comment\">#3</span></div><div class=\"line\">  check.send: <span class=\"string\">\"Check\"</span></div><div class=\"line\">  check.receive: <span class=\"string\">\"Check\"</span></div><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://localhost:80/service/status\"</span>]</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\" target=\"_blank\" rel=\"external\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\" target=\"_blank\" rel=\"external\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\">  watch.poll_file:</div><div class=\"line\"><span class=\"attr\">    path:</span> &#123;path.config&#125;/monitors/dynamic.json</div><div class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span>s</div></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</div><div class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</div></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">7</span>]</div><div class=\"line\">  check.send: <span class=\"string\">'Hello World'</span></div><div class=\"line\">  check.receive: <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">proxy_url:</span> socks5://user:password@socks5-proxy:<span class=\"number\">2233</span></div></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div><div class=\"line\"><span class=\"attr\">  ssl:</span></div><div class=\"line\"><span class=\"attr\">    certificate_authorities:</span> [<span class=\"string\">'/etc/ca.crt'</span>]</div><div class=\"line\"><span class=\"attr\">    supported_protocols:</span> [<span class=\"string\">\"TLSv1.0\"</span>, <span class=\"string\">\"TLSv1.1\"</span>, <span class=\"string\">\"TLSv1.2\"</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div><div class=\"line\">  check.request.method: HEAD</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"https://myhost:80\"</span>]</div><div class=\"line\">check.request:</div><div class=\"line\"><span class=\"attr\">  method:</span> GET</div><div class=\"line\"><span class=\"attr\">  headers:</span></div><div class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></div><div class=\"line\">check.response:</div><div class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></div><div class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></div></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></div></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">output.elasticsearch:</div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"192.168.1.42:9200\"</span>]</div><div class=\"line\">  template.name: <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></div><div class=\"line\">  template.path: <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></div></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\" target=\"_blank\" rel=\"external\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\" target=\"_blank\" rel=\"external\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ start</div></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/heartbeat start</div></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ./heartbeat <span class=\"_\">-e</span> -c heartbeat.yml <span class=\"_\">-d</span> <span class=\"string\">\"publish\"</span></div></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">net start heartbeat</div></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\" target=\"_blank\" rel=\"external\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\" target=\"_blank\" rel=\"external\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\" target=\"_blank\" rel=\"external\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\" target=\"_blank\" rel=\"external\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\" target=\"_blank\" rel=\"external\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\" target=\"_blank\" rel=\"external\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></div><div class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch host</span></div><div class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch port</span></div><div class=\"line\"><span class=\"comment\"># es_port: 14900</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></div><div class=\"line\"><span class=\"attr\">name:</span> heartbeat-monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Type of alert.</span></div><div class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></div><div class=\"line\"><span class=\"attr\">type:</span> change</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></div><div class=\"line\"><span class=\"attr\">index:</span> heartbeat-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The field to look for changes in</span></div><div class=\"line\"><span class=\"attr\">compare_key:</span> up</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></div><div class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></div><div class=\"line\"><span class=\"attr\">query_key:</span> monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"comment\">#- \"email\"</span></div><div class=\"line\"><span class=\"comment\">#- \"debug\"</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xxx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></div><div class=\"line\"><span class=\"comment\">#party_id: xxx</span></div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></div><div class=\"line\"><span class=\"comment\">#user_id: xxx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xxx</div></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\" target=\"_blank\" rel=\"external\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"external\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"external\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n","excerpt":"","more":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</div><div class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</div></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</div><div class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</div></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</div><div class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><div class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></div><div class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> icmp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost:7\"</span>]  <span class=\"comment\"># default TCP Echo Protocol</span></div><div class=\"line\"><span class=\"attr\">  mode:</span> any                     <span class=\"comment\">#3</span></div><div class=\"line\">  check.send: <span class=\"string\">\"Check\"</span></div><div class=\"line\">  check.receive: <span class=\"string\">\"Check\"</span></div><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://localhost:80/service/status\"</span>]</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\">  watch.poll_file:</div><div class=\"line\"><span class=\"attr\">    path:</span> &#123;path.config&#125;/monitors/dynamic.json</div><div class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span>s</div></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</div><div class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</div></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">7</span>]</div><div class=\"line\">  check.send: <span class=\"string\">'Hello World'</span></div><div class=\"line\">  check.receive: <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">proxy_url:</span> socks5://user:password@socks5-proxy:<span class=\"number\">2233</span></div></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div><div class=\"line\"><span class=\"attr\">  ssl:</span></div><div class=\"line\"><span class=\"attr\">    certificate_authorities:</span> [<span class=\"string\">'/etc/ca.crt'</span>]</div><div class=\"line\"><span class=\"attr\">    supported_protocols:</span> [<span class=\"string\">\"TLSv1.0\"</span>, <span class=\"string\">\"TLSv1.1\"</span>, <span class=\"string\">\"TLSv1.2\"</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div><div class=\"line\">  check.request.method: HEAD</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"https://myhost:80\"</span>]</div><div class=\"line\">check.request:</div><div class=\"line\"><span class=\"attr\">  method:</span> GET</div><div class=\"line\"><span class=\"attr\">  headers:</span></div><div class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></div><div class=\"line\">check.response:</div><div class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></div><div class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></div></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></div></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">output.elasticsearch:</div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"192.168.1.42:9200\"</span>]</div><div class=\"line\">  template.name: <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></div><div class=\"line\">  template.path: <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></div></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ start</div></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/heartbeat start</div></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ./heartbeat <span class=\"_\">-e</span> -c heartbeat.yml <span class=\"_\">-d</span> <span class=\"string\">\"publish\"</span></div></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">net start heartbeat</div></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></div><div class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch host</span></div><div class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch port</span></div><div class=\"line\"><span class=\"comment\"># es_port: 14900</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></div><div class=\"line\"><span class=\"attr\">name:</span> heartbeat-monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Type of alert.</span></div><div class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></div><div class=\"line\"><span class=\"attr\">type:</span> change</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></div><div class=\"line\"><span class=\"attr\">index:</span> heartbeat-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The field to look for changes in</span></div><div class=\"line\"><span class=\"attr\">compare_key:</span> up</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></div><div class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></div><div class=\"line\"><span class=\"attr\">query_key:</span> monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"comment\">#- \"email\"</span></div><div class=\"line\"><span class=\"comment\">#- \"debug\"</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xxx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></div><div class=\"line\"><span class=\"comment\">#party_id: xxx</span></div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></div><div class=\"line\"><span class=\"comment\">#user_id: xxx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xxx</div></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n"},{"title":"elastalert微信报警","date":"2017-02-16T08:27:53.000Z","_content":"\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.16/test\"  -d '{\n\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",\n\"field\": \"value\"\n}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","source":"_posts/elastalert-wechat-plugin.md","raw":"---\ntitle: elastalert微信报警\ndate: 2017-02-16 16:27:53\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.16/test\"  -d '{\n\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",\n\"field\": \"value\"\n}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","slug":"elastalert-wechat-plugin","published":1,"updated":"2017-02-16T09:41:39.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizsns8oq0006vkdobb4176v8","content":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\" target=\"_blank\" rel=\"external\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/</div><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</div><div class=\"line\"></div><div class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py</div><div class=\"line\"></div><div class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</div><div class=\"line\"></div><div class=\"line\">$ cp  config.yaml.example config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- term:</span></div><div class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#部门id</span></div><div class=\"line\"><span class=\"attr\">party_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#用户微信号</span></div><div class=\"line\"><span class=\"attr\">user_id:</span> xx</div><div class=\"line\"><span class=\"comment\"># 标签id</span></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.16/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</span></div><div class=\"line\">\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</div><div class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</div><div class=\"line\">INFO:elastalert:发送消息给 xxx</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\" target=\"_blank\" rel=\"external\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\" target=\"_blank\" rel=\"external\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"external\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\" target=\"_blank\" rel=\"external\">anjia0532/weixin-qiye-alert</a></p>\n","excerpt":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/</div><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</div><div class=\"line\"></div><div class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py</div><div class=\"line\"></div><div class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</div><div class=\"line\"></div><div class=\"line\">$ cp  config.yaml.example config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- term:</span></div><div class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#部门id</span></div><div class=\"line\"><span class=\"attr\">party_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#用户微信号</span></div><div class=\"line\"><span class=\"attr\">user_id:</span> xx</div><div class=\"line\"><span class=\"comment\"># 标签id</span></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.16/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</div><div class=\"line\">\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</span></div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</div><div class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</div><div class=\"line\">INFO:elastalert:发送消息给 xxx</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\">anjia0532/weixin-qiye-alert</a></p>"},{"title":"Spring3.0 Log4j转logback","date":"2017-02-28T06:54:44.000Z","_content":"公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","source":"_posts/springmvc-log4j-to-logback.md","raw":"---\ntitle: Spring3.0 Log4j转logback\ndate: 2017-02-28 14:54:44\ntags: [springmvc,logback,log4j,log]\ncategories: [编程]\n---\n公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","slug":"springmvc-log4j-to-logback","published":1,"updated":"2017-03-01T06:02:05.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizsns8os0009vkdo9apn6dny","content":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\" target=\"_blank\" rel=\"external\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">jackson-annotations-2.8.0.jar</div><div class=\"line\">jackson-core-2.8.6.jar</div><div class=\"line\">jackson-databind-2.8.6.jar</div><div class=\"line\">jcl-over-slf4j-1.7.24.jar</div><div class=\"line\">log4j-over-slf4j-1.7.24.jar</div><div class=\"line\">logback-classic-1.2.1.jar</div><div class=\"line\">logback-core-1.2.1.jar</div><div class=\"line\">logback-ext-spring-0.1.4.jar</div><div class=\"line\">logstash-logback-encoder-4.8.jar</div><div class=\"line\">slf4j-api-1.7.24.jar</div></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</div><div class=\"line\"></div><div class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\" target=\"_blank\" rel=\"external\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\" target=\"_blank\" rel=\"external\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\" target=\"_blank\" rel=\"external\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</div><div class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</div><div class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</div><div class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</div><div class=\"line\">    .toString()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">jackson-annotations-2.8.0.jar</div><div class=\"line\">jackson-core-2.8.6.jar</div><div class=\"line\">jackson-databind-2.8.6.jar</div><div class=\"line\">jcl-over-slf4j-1.7.24.jar</div><div class=\"line\">log4j-over-slf4j-1.7.24.jar</div><div class=\"line\">logback-classic-1.2.1.jar</div><div class=\"line\">logback-core-1.2.1.jar</div><div class=\"line\">logback-ext-spring-0.1.4.jar</div><div class=\"line\">logstash-logback-encoder-4.8.jar</div><div class=\"line\">slf4j-api-1.7.24.jar</div></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</div><div class=\"line\"></div><div class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</div><div class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</div><div class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</div><div class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</div><div class=\"line\">    .toString()</div></pre></td></tr></table></figure></p>\n"},{"title":"synergy 一套键鼠多台设备共享","date":"2017-02-08T09:44:28.000Z","_content":"Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n## 注册[synergy](https://symless.com/synergy/#get-synergy)\n\n填写`email`和`fullname`\n\n<kbd>Enter</kbd>回车确定，不进行支付\n\n## 下载最新版本[每夜构建版本](https://symless.com/nightly)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-master-stable-a5140aa-Windows-x64.msi](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi) 和 [synergy-master-stable-a5140aa-Linux-x86_64.deb](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb)\n\n## 获取序列号\n\n从 [1.4.18免费下载页面](http://symless.com/download/free/)随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的`Login` 进行登录，重复此步骤\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","source":"_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","raw":"---\ntitle: synergy 一套键鼠多台设备共享\ndate: 2017-02-08 17:44:28\ntags: [synergy]\ncategories: [工具]\n---\nSynergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n## 注册[synergy](https://symless.com/synergy/#get-synergy)\n\n填写`email`和`fullname`\n\n<kbd>Enter</kbd>回车确定，不进行支付\n\n## 下载最新版本[每夜构建版本](https://symless.com/nightly)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-master-stable-a5140aa-Windows-x64.msi](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi) 和 [synergy-master-stable-a5140aa-Linux-x86_64.deb](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb)\n\n## 获取序列号\n\n从 [1.4.18免费下载页面](http://symless.com/download/free/)随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的`Login` 进行登录，重复此步骤\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","slug":"share-mouse-and-keyboard-with-your-windows-linux-machines-md","published":1,"updated":"2017-02-14T01:19:22.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizsns8ou000bvkdo3fnjzguc","content":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>\n<a id=\"more\"></a>\n<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\" target=\"_blank\" rel=\"external\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\" target=\"_blank\" rel=\"external\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"注册synergy\"><a href=\"#注册synergy\" class=\"headerlink\" title=\"注册synergy\"></a>注册<a href=\"https://symless.com/synergy/#get-synergy\" target=\"_blank\" rel=\"external\">synergy</a></h2><p>填写<code>email</code>和<code>fullname</code></p>\n<p><kbd>Enter</kbd>回车确定，不进行支付</p>\n<h2 id=\"下载最新版本每夜构建版本\"><a href=\"#下载最新版本每夜构建版本\" class=\"headerlink\" title=\"下载最新版本每夜构建版本\"></a>下载最新版本<a href=\"https://symless.com/nightly\" target=\"_blank\" rel=\"external\">每夜构建版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi\" target=\"_blank\" rel=\"external\">synergy-master-stable-a5140aa-Windows-x64.msi</a> 和 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\" target=\"_blank\" rel=\"external\">synergy-master-stable-a5140aa-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p>从 <a href=\"http://symless.com/download/free/\" target=\"_blank\" rel=\"external\">1.4.18免费下载页面</a>随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的<code>Login</code> 进行登录，重复此步骤</p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\" target=\"_blank\" rel=\"external\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></div><div class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></div><div class=\"line\"><span class=\"comment\"># 所以手动下载</span></div><div class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></div><div class=\"line\"></div><div class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></div><div class=\"line\"></div><div class=\"line\">wget https://symless.com/files/nightly/synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></div><div class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">nohup synergy &amp;</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>\n","excerpt":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>","more":"<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"注册synergy\"><a href=\"#注册synergy\" class=\"headerlink\" title=\"注册synergy\"></a>注册<a href=\"https://symless.com/synergy/#get-synergy\">synergy</a></h2><p>填写<code>email</code>和<code>fullname</code></p>\n<p><kbd>Enter</kbd>回车确定，不进行支付</p>\n<h2 id=\"下载最新版本每夜构建版本\"><a href=\"#下载最新版本每夜构建版本\" class=\"headerlink\" title=\"下载最新版本每夜构建版本\"></a>下载最新版本<a href=\"https://symless.com/nightly\">每夜构建版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi\">synergy-master-stable-a5140aa-Windows-x64.msi</a> 和 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\">synergy-master-stable-a5140aa-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p>从 <a href=\"http://symless.com/download/free/\">1.4.18免费下载页面</a>随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的<code>Login</code> 进行登录，重复此步骤</p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></div><div class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></div><div class=\"line\"><span class=\"comment\"># 所以手动下载</span></div><div class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></div><div class=\"line\"></div><div class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></div><div class=\"line\"></div><div class=\"line\">wget https://symless.com/files/nightly/synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></div><div class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">nohup synergy &amp;</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cizsns8oj0005vkdoi2wq91hj","category_id":"cizsns8oe0002vkdor2068vbu","_id":"cizsns8ou000avkdosgpwcwym"},{"post_id":"cizsns8o60000vkdo0n2nc3su","category_id":"cizsns8oe0002vkdor2068vbu","_id":"cizsns8ow000evkdoegw01ure"},{"post_id":"cizsns8oq0006vkdobb4176v8","category_id":"cizsns8oe0002vkdor2068vbu","_id":"cizsns8ow000fvkdot2zt0z3j"},{"post_id":"cizsns8oa0001vkdozvkeozk9","category_id":"cizsns8oe0002vkdor2068vbu","_id":"cizsns8ox000ivkdoh8vpfwuc"},{"post_id":"cizsns8oh0004vkdo3q582nkf","category_id":"cizsns8ov000cvkdol6ws9cxw","_id":"cizsns8oy000kvkdov4g2e22z"},{"post_id":"cizsns8os0009vkdo9apn6dny","category_id":"cizsns8ov000cvkdol6ws9cxw","_id":"cizsns8p1000pvkdo4jcg4m4o"},{"post_id":"cizsns8ou000bvkdo3fnjzguc","category_id":"cizsns8oz000lvkdo3p5c7cnw","_id":"cizsns8p4000rvkdomizv5wge"}],"PostTag":[{"post_id":"cizsns8o60000vkdo0n2nc3su","tag_id":"cizsns8og0003vkdofpd2eyt8","_id":"cizsns8oy000jvkdogjiiuoz2"},{"post_id":"cizsns8o60000vkdo0n2nc3su","tag_id":"cizsns8or0008vkdofxs1mway","_id":"cizsns8p0000mvkdo0r4r2fnu"},{"post_id":"cizsns8o60000vkdo0n2nc3su","tag_id":"cizsns8ov000dvkdowcb10xc1","_id":"cizsns8p1000ovkdoq11s2vuv"},{"post_id":"cizsns8oa0001vkdozvkeozk9","tag_id":"cizsns8og0003vkdofpd2eyt8","_id":"cizsns8p5000tvkdo8odnxl5z"},{"post_id":"cizsns8oa0001vkdozvkeozk9","tag_id":"cizsns8p1000nvkdo0uokme51","_id":"cizsns8p6000uvkdog3g8hr3x"},{"post_id":"cizsns8oa0001vkdozvkeozk9","tag_id":"cizsns8p2000qvkdoqm64mkma","_id":"cizsns8p7000wvkdoqb67h2xz"},{"post_id":"cizsns8oh0004vkdo3q582nkf","tag_id":"cizsns8p4000svkdokgsq38yq","_id":"cizsns8p9000yvkdot4kwcort"},{"post_id":"cizsns8oh0004vkdo3q582nkf","tag_id":"cizsns8p6000vvkdoiv868oiv","_id":"cizsns8pa000zvkdoea60taa2"},{"post_id":"cizsns8oj0005vkdoi2wq91hj","tag_id":"cizsns8og0003vkdofpd2eyt8","_id":"cizsns8pe0012vkdo9lpfnxvf"},{"post_id":"cizsns8oj0005vkdoi2wq91hj","tag_id":"cizsns8or0008vkdofxs1mway","_id":"cizsns8pe0013vkdoez0p7izj"},{"post_id":"cizsns8oj0005vkdoi2wq91hj","tag_id":"cizsns8pa0010vkdojlxfbs37","_id":"cizsns8pf0015vkdopdi1ft7a"},{"post_id":"cizsns8oq0006vkdobb4176v8","tag_id":"cizsns8og0003vkdofpd2eyt8","_id":"cizsns8pg0017vkdofx16y02j"},{"post_id":"cizsns8oq0006vkdobb4176v8","tag_id":"cizsns8or0008vkdofxs1mway","_id":"cizsns8pg0018vkdodmpx1sq1"},{"post_id":"cizsns8oq0006vkdobb4176v8","tag_id":"cizsns8ov000dvkdowcb10xc1","_id":"cizsns8ph001avkdonsz8ajiu"},{"post_id":"cizsns8os0009vkdo9apn6dny","tag_id":"cizsns8pg0016vkdokifyvwof","_id":"cizsns8pj001evkdou75ksvqh"},{"post_id":"cizsns8os0009vkdo9apn6dny","tag_id":"cizsns8ph0019vkdox6fni962","_id":"cizsns8pk001fvkdoh771s1p3"},{"post_id":"cizsns8os0009vkdo9apn6dny","tag_id":"cizsns8ph001bvkdow203hnnl","_id":"cizsns8pk001gvkdoee5v16hd"},{"post_id":"cizsns8os0009vkdo9apn6dny","tag_id":"cizsns8pi001cvkdopcxbzqh6","_id":"cizsns8pk001hvkdod8kir6g6"},{"post_id":"cizsns8ou000bvkdo3fnjzguc","tag_id":"cizsns8pj001dvkdoraj43y8s","_id":"cizsns8pk001ivkdojp5hdmce"}],"Tag":[{"name":"elk","_id":"cizsns8og0003vkdofpd2eyt8"},{"name":"elkstasck","_id":"cizsns8or0008vkdofxs1mway"},{"name":"ElastAlert","_id":"cizsns8ov000dvkdowcb10xc1"},{"name":"elkstack","_id":"cizsns8p1000nvkdo0uokme51"},{"name":"beats","_id":"cizsns8p2000qvkdoqm64mkma"},{"name":"blog","_id":"cizsns8p4000svkdokgsq38yq"},{"name":"hexo","_id":"cizsns8p6000vvkdoiv868oiv"},{"name":"Heartbeat","_id":"cizsns8pa0010vkdojlxfbs37"},{"name":"springmvc","_id":"cizsns8pg0016vkdokifyvwof"},{"name":"logback","_id":"cizsns8ph0019vkdox6fni962"},{"name":"log4j","_id":"cizsns8ph001bvkdow203hnnl"},{"name":"log","_id":"cizsns8pi001cvkdopcxbzqh6"},{"name":"synergy","_id":"cizsns8pj001dvkdoraj43y8s"}]}}