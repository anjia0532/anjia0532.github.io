{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1498729816686},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1498729816687},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1498729816687},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1498729816688},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1498729816687},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1498729816689},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1498729816689},{"_id":"themes/yilia/_config.yml","hash":"9065f1247945ab7ccdec96740e345df4f766b681","modified":1498980629117},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1498729816712},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1498729816757},{"_id":"source/_posts/elastalert-wechat-plugin.md","hash":"5c6d3fcc98de0b500a6a5adb8eb043723f987fa8","modified":1510547488683},{"_id":"source/_posts/alpine-mirror-server.md","hash":"3a66474212255612e91c2c1cfba3ef8eea39642d","modified":1503449602124},{"_id":"source/_posts/docker-dns.md","hash":"bac6b093fee2d97f1fa15ca3f22d16546c567fb9","modified":1504246397413},{"_id":"source/_posts/anaconda-install-and-configurating-jupyter.md","hash":"edb07290e4b891f727d8f1707e32635f5a7c87f1","modified":1499078816080},{"_id":"source/_posts/gcr-io-image-mirror.md","hash":"995a2130056f711df50d59a14187c01b2c43729d","modified":1510727045705},{"_id":"source/_posts/gitlab-upgrade.md","hash":"e4a641a066091b50f80a05d2bc23be1d032a4bbd","modified":1510109400420},{"_id":"source/_posts/elasticsearch-delete-indices-by-date.md","hash":"39946d54c43b4b14d497c9f25d59b87c2125e96a","modified":1491459217068},{"_id":"source/_posts/elasticsearch-elastalert.md","hash":"52dd6034e594f32ae711a02f5ea69b2044217aa0","modified":1487053945098},{"_id":"source/_posts/elk-stack-beats.md","hash":"5a4d07cc1ea441ecdf4ef2807745557e2b69e354","modified":1488452261760},{"_id":"source/_posts/heartbeat.md","hash":"dcfd28a48322e3d542d41774c524ae6adb9e407b","modified":1488520704584},{"_id":"source/_posts/hexo-github-pages-blog.md","hash":"fb72ec300e8e1e342b6b5da830641d78ec2c146e","modified":1486563374904},{"_id":"source/_posts/jdk-zip.md","hash":"29f0288a65db890c3b3b29e16c7e66ae8da5703a","modified":1494998277917},{"_id":"source/_posts/opencv-on-jupyter.md","hash":"c4e741bbac0d29424c5d0864e1e45e09eb2b60d4","modified":1500945705089},{"_id":"source/_posts/nginx-logging-request-body-as-hexidecimal.md","hash":"6bc3a9f1811d64f3f58608c03582c3a6aff0dcd4","modified":1498014465271},{"_id":"source/_posts/rancher-k8s-china.md","hash":"012f547457eafb633528aada5ee84a723d3c5700","modified":1510727109373},{"_id":"source/_posts/nginx-regex-test-way.md","hash":"fbdbf717b0603f2b30114692ec71ec5ae44dfc19","modified":1498724310569},{"_id":"source/_posts/rancher-k8s.md","hash":"121c1c112e117bdbd76955d8189a30380b25612f","modified":1510584762450},{"_id":"source/_posts/openresty-redis-common-utils.md","hash":"d024bd17f8e88a30141ae2baa5e186dfa0f58304","modified":1502871510080},{"_id":"source/_posts/owncloud.md","hash":"8ad803964c8db8c5b32020e8a0913493a30ba49d","modified":1491840161477},{"_id":"source/_posts/openresty.md","hash":"2ff2a1f8bca8a4de2703752058e37a337ef35bc8","modified":1506761541141},{"_id":"source/_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","hash":"d80c0bcfb55b68c39a2f1180a16345a93315291f","modified":1509332202415},{"_id":"source/_posts/xrebel-introducing-microservices-profiling.md","hash":"cc343c539220f66994ceec5a81a3032045e3776a","modified":1511254070808},{"_id":"source/_posts/springmvc-log4j-to-logback.md","hash":"ddecc48e838432ee6438e941470cc29b732ad468","modified":1488348125839},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1498729816674},{"_id":"source/_posts/stap.md","hash":"831e27172fd648420cb04b31b088684f54ef4041","modified":1506754160552},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1498729811021},{"_id":"source/_posts/windows-install-tensorflow-keras.md","hash":"4f566a871dd2e140453ac48327514846faed848c","modified":1499080059776},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1498729816664},{"_id":"source/_posts/zsh-home-end-keypad-not-work.md","hash":"5c9a1a805b3b88dafabdaaf728032f684af37833","modified":1505035503555},{"_id":"themes/yilia/.git/index","hash":"7904da296989978d66d09b128bca339f4539f8f3","modified":1498729816758},{"_id":"themes/yilia/.git/packed-refs","hash":"cf41ff42218453f57f86f8bf8a37ce6b19a31ad9","modified":1498729816654},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1498729816692},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1498729816692},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1498729816693},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1498729816693},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1498729816693},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1498729816694},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1498729816694},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1498729816707},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1498729816707},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1498729816708},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498729816710},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498729816711},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1498729816711},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1498729816709},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1498729816753},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1498729816713},{"_id":"themes/yilia/source/slider.445162.js","hash":"a727717abfd319c5de84b425331f55aa709c9276","modified":1498729816757},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1498729816745},{"_id":"themes/yilia/source/main.b3331d.js","hash":"5fcc25cc1650f4ebe5d29ac9744f6d2d3a8be677","modified":1498729816754},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"0873195fea8d34db7233dab3591d41558fb7388b","modified":1498729816756},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1498729811022},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1498729811023},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1498729811024},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1498729811024},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1498729811025},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1498729811025},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1498729811026},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1498729811026},{"_id":"themes/yilia/.git/logs/HEAD","hash":"bcc3c9e8c3d3c03035c71aaf6412b74faf5ff168","modified":1498729816670},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1498729811027},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1498729811028},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1498729816696},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1498729816695},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1498729816697},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1498729816697},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1498729816698},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1498729816698},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8bbf5db9e4d3c1037bbeaa16f9d7ea0dc281d23c","modified":1498729816697},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1498729816696},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1498729816700},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1498729816699},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1498729816700},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1498729816699},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1498729816701},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1498729816706},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1498729816707},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1498729816746},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1498729816747},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1498729816749},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1498729816750},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1498729816749},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1498729816747},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1498729816750},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1498729816714},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1498729816748},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1498729816751},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1498729811023},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1498729816714},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1498729816716},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1498729816715},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1498729816715},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"2d1c70bb606c0d87e4f68ec2e600e08b27f32b99","modified":1498729816717},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1498729816716},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1498729816717},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1498729816727},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1498729816727},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"768e77b775923c53f974a15fe9ab04d0e05198a5","modified":1498729816722},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1498729816728},{"_id":"themes/yilia/source-src/css/main.scss","hash":"1bc3240d693f190f86bf5e258cc5846e09be9ec1","modified":1498729816730},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1498729816728},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1498729816732},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1498729816730},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1498729816731},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"7c24ea86d95c86b82337177559d78ce56d8912e0","modified":1498729816731},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1498729816732},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1498729816732},{"_id":"themes/yilia/source-src/css/social.scss","hash":"7c4c54bcc4cd0bd69162745ae2a2357dcc54f5cd","modified":1498729816733},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1498729816733},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1498729816734},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1498729816736},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"6932c642bf8191768d7090982a91c8c1f1c4ed1e","modified":1498729816735},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1498729816734},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1498729816740},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1498729816742},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1498729816740},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1498729816741},{"_id":"themes/yilia/source-src/js/fix.js","hash":"0b434b658abad220459b1e3ee962ebfa4f8f88ca","modified":1498729816741},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1498729816742},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1498729816743},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1498729816743},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1498729816744},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1498729816745},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1498729816744},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"eaa2c1cb8165dee6fb10127a0de8dcfcd1799c2e","modified":1498729816706},{"_id":"themes/yilia/.git/refs/heads/master","hash":"597a0d14c701a189e5d74eaa70341e78e3ad7c80","modified":1498729816669},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1498729816701},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1498729816702},{"_id":"themes/yilia/.git/objects/pack/pack-149e73dd21ac165412f3146538f0edfe9cab3b36.idx","hash":"b5c96f156ea151d3839346b96cf9478dc0c7e181","modified":1498729816559},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1498729816703},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1498729816704},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"cc384aeaed9ffde92efdf192c26db4da3fe5858f","modified":1498729816702},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1498729816705},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1498729816704},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1498729816703},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1498729816703},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1498729816718},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1498729816719},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1498729816719},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1498729816721},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1498729816720},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1498729816725},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1498729816725},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1498729816726},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1498729816729},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1498729816730},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1498729816726},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1498729816729},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1498729816661},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"bcc3c9e8c3d3c03035c71aaf6412b74faf5ff168","modified":1498729816671},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"bcc3c9e8c3d3c03035c71aaf6412b74faf5ff168","modified":1498729816660},{"_id":"themes/yilia/.git/objects/pack/pack-149e73dd21ac165412f3146538f0edfe9cab3b36.pack","hash":"ac7f9af6c96969bf7610ba6c41a96860378baac3","modified":1498729816615}],"Category":[{"name":"elkstasck","_id":"cjaq5melw00045gdowj80dnlg"},{"name":"anaconda","_id":"cjaq5mem500095gdoourk0fcm"},{"name":"jupyter","parent":"cjaq5mem500095gdoourk0fcm","_id":"cjaq5memf000f5gdoubwyzkx2"},{"name":"编程","_id":"cjaq5memn000r5gdo32rna35t"},{"name":"nginx","_id":"cjaq5memq000z5gdo1c4twnl3"},{"name":"owncloud","_id":"cjaq5men9001f5gdofm121ufx"},{"name":"工具","_id":"cjaq5menh001l5gdo3vdc3vv1"},{"name":"python","parent":"cjaq5mem500095gdoourk0fcm","_id":"cjaq5menl001s5gdo2wuajbaq"},{"name":"AI","parent":"cjaq5menl001s5gdo2wuajbaq","_id":"cjaq5meno001z5gdo2zo9a281"},{"name":"Tensorflow","parent":"cjaq5meno001z5gdo2zo9a281","_id":"cjaq5menp00225gdoibckttwb"},{"name":"Keras","parent":"cjaq5menp00225gdoibckttwb","_id":"cjaq5menv00255gdocjasosk7"}],"Data":[],"Page":[],"Post":[{"title":"alpine-mirror-server","date":"2017-08-23T00:49:53.000Z","_content":"\nalpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积\n\n但是天朝网络很。。。。所以经常容易安装软件失败(`apk update && apk --no-cache add ...`)\n\n<!--more-->\n\n## 利用国内镜像源\n\n[清华镜像][]\n\n[中科大镜像][]\n\n[阿里云镜像][]\n\n三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。\n\n## 境外服务器做反代\n\n如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)\n\n## 自建镜像站\n\n截止 20170510  官方给出的全部镜像的磁盘使用量\n\n|  edge |  v2.4 |  v2.5 |  v2.6 |  v2.7 |  v3.0 |  v3.1 |  v3.2 |  v3.3 |  v3.4 |  v3.5 |  v3.6 | Total  |\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|--------|\n| 53.1G | 18.8G | 10.4G | 13.0G | 16.5G | 16.5G | 17.5G | 14.5G | 19.0G | 23.2G | 32.5G | 34.4G | 269.5G |\n\n一般自用的话，只会用有限几个版本，比如`v3.6` 的`x86_64` ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。\n\n核心命令是\n\nrsync.sh\n\n```bash\nsrc=rsync://rsync.alpinelinux.org/alpine/ \ndest=/usr/share/nginx/html\n\n/usr/bin/rsync -prua \\\n    --exclude-from /etc/rsync/exclude.txt \\\n    --delete \\\n    --timeout=600 \\\n    --delay-updates \\\n    --delete-after \\\n    \"$src\" \"$dest\"\n```\n/etc/rsync/exclude.txt\n```\nedge/\nv2.*/\nv3.0/\nv3.1/\nv3.2/\nv3.3/\nv3.4/\nv3.5/\naarch64/\narmhf/\nppc64le/\ns390x/\nx86/\n```\n\n解释一下,edge+v*.* 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位\n\n```bash\nlscpu | grep Architecture\n```\n\n根据实际情况，自行加减\n\n详细情况，详见项目 [anjia0532/alpine-package-mirror](https://github.com/anjia0532/alpine-package-mirror)\n\n博客 [https://anjia.ml/2017/08/23/alpine-mirror-server/][blog]\n掘金 [https://juejin.im/post/599b1b2a51882511264e7097][juejin]\n简书 [http://www.jianshu.com/p/36396a20ea4c][jianshu]\n\n[blog]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n[juejin]: https://juejin.im/post/599b1b2a51882511264e7097\n[jianshu]: http://www.jianshu.com/p/36396a20ea4c\n[阿里云镜像]: https://mirrors.aliyun.com/alpine/\n[中科大镜像]: https://mirrors.ustc.edu.cn/alpine/\n[清华镜像]: https://mirrors.tuna.tsinghua.edu.cn/alpine/\n","source":"_posts/alpine-mirror-server.md","raw":"---\ntitle: alpine-mirror-server\ndate: 2017-08-23 08:49:53\ntags: [docker,alpine,alpine-mirror]\n---\n\nalpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积\n\n但是天朝网络很。。。。所以经常容易安装软件失败(`apk update && apk --no-cache add ...`)\n\n<!--more-->\n\n## 利用国内镜像源\n\n[清华镜像][]\n\n[中科大镜像][]\n\n[阿里云镜像][]\n\n三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。\n\n## 境外服务器做反代\n\n如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)\n\n## 自建镜像站\n\n截止 20170510  官方给出的全部镜像的磁盘使用量\n\n|  edge |  v2.4 |  v2.5 |  v2.6 |  v2.7 |  v3.0 |  v3.1 |  v3.2 |  v3.3 |  v3.4 |  v3.5 |  v3.6 | Total  |\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|--------|\n| 53.1G | 18.8G | 10.4G | 13.0G | 16.5G | 16.5G | 17.5G | 14.5G | 19.0G | 23.2G | 32.5G | 34.4G | 269.5G |\n\n一般自用的话，只会用有限几个版本，比如`v3.6` 的`x86_64` ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。\n\n核心命令是\n\nrsync.sh\n\n```bash\nsrc=rsync://rsync.alpinelinux.org/alpine/ \ndest=/usr/share/nginx/html\n\n/usr/bin/rsync -prua \\\n    --exclude-from /etc/rsync/exclude.txt \\\n    --delete \\\n    --timeout=600 \\\n    --delay-updates \\\n    --delete-after \\\n    \"$src\" \"$dest\"\n```\n/etc/rsync/exclude.txt\n```\nedge/\nv2.*/\nv3.0/\nv3.1/\nv3.2/\nv3.3/\nv3.4/\nv3.5/\naarch64/\narmhf/\nppc64le/\ns390x/\nx86/\n```\n\n解释一下,edge+v*.* 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位\n\n```bash\nlscpu | grep Architecture\n```\n\n根据实际情况，自行加减\n\n详细情况，详见项目 [anjia0532/alpine-package-mirror](https://github.com/anjia0532/alpine-package-mirror)\n\n博客 [https://anjia.ml/2017/08/23/alpine-mirror-server/][blog]\n掘金 [https://juejin.im/post/599b1b2a51882511264e7097][juejin]\n简书 [http://www.jianshu.com/p/36396a20ea4c][jianshu]\n\n[blog]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n[juejin]: https://juejin.im/post/599b1b2a51882511264e7097\n[jianshu]: http://www.jianshu.com/p/36396a20ea4c\n[阿里云镜像]: https://mirrors.aliyun.com/alpine/\n[中科大镜像]: https://mirrors.ustc.edu.cn/alpine/\n[清华镜像]: https://mirrors.tuna.tsinghua.edu.cn/alpine/\n","slug":"alpine-mirror-server","published":1,"updated":"2017-08-23T00:53:22.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5melm00005gdo5uls28ix","content":"<p>alpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积</p>\n<p>但是天朝网络很。。。。所以经常容易安装软件失败(<code>apk update &amp;&amp; apk --no-cache add ...</code>)</p>\n<a id=\"more\"></a>\n<h2 id=\"利用国内镜像源\"><a href=\"#利用国内镜像源\" class=\"headerlink\" title=\"利用国内镜像源\"></a>利用国内镜像源</h2><p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">清华镜像</a></p>\n<p><a href=\"https://mirrors.ustc.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">中科大镜像</a></p>\n<p><a href=\"https://mirrors.aliyun.com/alpine/\" target=\"_blank\" rel=\"noopener\">阿里云镜像</a></p>\n<p>三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。</p>\n<h2 id=\"境外服务器做反代\"><a href=\"#境外服务器做反代\" class=\"headerlink\" title=\"境外服务器做反代\"></a>境外服务器做反代</h2><p>如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)</p>\n<h2 id=\"自建镜像站\"><a href=\"#自建镜像站\" class=\"headerlink\" title=\"自建镜像站\"></a>自建镜像站</h2><p>截止 20170510  官方给出的全部镜像的磁盘使用量</p>\n<table>\n<thead>\n<tr>\n<th>edge</th>\n<th>v2.4</th>\n<th>v2.5</th>\n<th>v2.6</th>\n<th>v2.7</th>\n<th>v3.0</th>\n<th>v3.1</th>\n<th>v3.2</th>\n<th>v3.3</th>\n<th>v3.4</th>\n<th>v3.5</th>\n<th>v3.6</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>53.1G</td>\n<td>18.8G</td>\n<td>10.4G</td>\n<td>13.0G</td>\n<td>16.5G</td>\n<td>16.5G</td>\n<td>17.5G</td>\n<td>14.5G</td>\n<td>19.0G</td>\n<td>23.2G</td>\n<td>32.5G</td>\n<td>34.4G</td>\n<td>269.5G</td>\n</tr>\n</tbody>\n</table>\n<p>一般自用的话，只会用有限几个版本，比如<code>v3.6</code> 的<code>x86_64</code> ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。</p>\n<p>核心命令是</p>\n<p>rsync.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">src=rsync://rsync.alpinelinux.org/alpine/ </span><br><span class=\"line\">dest=/usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/rsync -prua \\</span><br><span class=\"line\">    --exclude-from /etc/rsync/exclude.txt \\</span><br><span class=\"line\">    --delete \\</span><br><span class=\"line\">    --timeout=600 \\</span><br><span class=\"line\">    --delay-updates \\</span><br><span class=\"line\">    --delete-after \\</span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"variable\">$src</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$dest</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>/etc/rsync/exclude.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">edge/</span><br><span class=\"line\">v2.*/</span><br><span class=\"line\">v3.0/</span><br><span class=\"line\">v3.1/</span><br><span class=\"line\">v3.2/</span><br><span class=\"line\">v3.3/</span><br><span class=\"line\">v3.4/</span><br><span class=\"line\">v3.5/</span><br><span class=\"line\">aarch64/</span><br><span class=\"line\">armhf/</span><br><span class=\"line\">ppc64le/</span><br><span class=\"line\">s390x/</span><br><span class=\"line\">x86/</span><br></pre></td></tr></table></figure></p>\n<p>解释一下,edge+v<em>.</em> 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lscpu | grep Architecture</span><br></pre></td></tr></table></figure>\n<p>根据实际情况，自行加减</p>\n<p>详细情况，详见项目 <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\">https://anjia.ml/2017/08/23/alpine-mirror-server/</a><br>掘金 <a href=\"https://juejin.im/post/599b1b2a51882511264e7097\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/599b1b2a51882511264e7097</a><br>简书 <a href=\"http://www.jianshu.com/p/36396a20ea4c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/36396a20ea4c</a></p>\n","site":{"data":{}},"excerpt":"<p>alpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积</p>\n<p>但是天朝网络很。。。。所以经常容易安装软件失败(<code>apk update &amp;&amp; apk --no-cache add ...</code>)</p>","more":"<h2 id=\"利用国内镜像源\"><a href=\"#利用国内镜像源\" class=\"headerlink\" title=\"利用国内镜像源\"></a>利用国内镜像源</h2><p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">清华镜像</a></p>\n<p><a href=\"https://mirrors.ustc.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">中科大镜像</a></p>\n<p><a href=\"https://mirrors.aliyun.com/alpine/\" target=\"_blank\" rel=\"noopener\">阿里云镜像</a></p>\n<p>三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。</p>\n<h2 id=\"境外服务器做反代\"><a href=\"#境外服务器做反代\" class=\"headerlink\" title=\"境外服务器做反代\"></a>境外服务器做反代</h2><p>如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)</p>\n<h2 id=\"自建镜像站\"><a href=\"#自建镜像站\" class=\"headerlink\" title=\"自建镜像站\"></a>自建镜像站</h2><p>截止 20170510  官方给出的全部镜像的磁盘使用量</p>\n<table>\n<thead>\n<tr>\n<th>edge</th>\n<th>v2.4</th>\n<th>v2.5</th>\n<th>v2.6</th>\n<th>v2.7</th>\n<th>v3.0</th>\n<th>v3.1</th>\n<th>v3.2</th>\n<th>v3.3</th>\n<th>v3.4</th>\n<th>v3.5</th>\n<th>v3.6</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>53.1G</td>\n<td>18.8G</td>\n<td>10.4G</td>\n<td>13.0G</td>\n<td>16.5G</td>\n<td>16.5G</td>\n<td>17.5G</td>\n<td>14.5G</td>\n<td>19.0G</td>\n<td>23.2G</td>\n<td>32.5G</td>\n<td>34.4G</td>\n<td>269.5G</td>\n</tr>\n</tbody>\n</table>\n<p>一般自用的话，只会用有限几个版本，比如<code>v3.6</code> 的<code>x86_64</code> ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。</p>\n<p>核心命令是</p>\n<p>rsync.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">src=rsync://rsync.alpinelinux.org/alpine/ </span><br><span class=\"line\">dest=/usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/rsync -prua \\</span><br><span class=\"line\">    --exclude-from /etc/rsync/exclude.txt \\</span><br><span class=\"line\">    --delete \\</span><br><span class=\"line\">    --timeout=600 \\</span><br><span class=\"line\">    --delay-updates \\</span><br><span class=\"line\">    --delete-after \\</span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"variable\">$src</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$dest</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>/etc/rsync/exclude.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">edge/</span><br><span class=\"line\">v2.*/</span><br><span class=\"line\">v3.0/</span><br><span class=\"line\">v3.1/</span><br><span class=\"line\">v3.2/</span><br><span class=\"line\">v3.3/</span><br><span class=\"line\">v3.4/</span><br><span class=\"line\">v3.5/</span><br><span class=\"line\">aarch64/</span><br><span class=\"line\">armhf/</span><br><span class=\"line\">ppc64le/</span><br><span class=\"line\">s390x/</span><br><span class=\"line\">x86/</span><br></pre></td></tr></table></figure></p>\n<p>解释一下,edge+v<em>.</em> 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lscpu | grep Architecture</span><br></pre></td></tr></table></figure>\n<p>根据实际情况，自行加减</p>\n<p>详细情况，详见项目 <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\">https://anjia.ml/2017/08/23/alpine-mirror-server/</a><br>掘金 <a href=\"https://juejin.im/post/599b1b2a51882511264e7097\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/599b1b2a51882511264e7097</a><br>简书 <a href=\"http://www.jianshu.com/p/36396a20ea4c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/36396a20ea4c</a></p>"},{"title":"elastalert微信报警","date":"2017-02-16T08:27:53.000Z","_content":"\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST 'http://127.0.0.1:9200/logstash-'$(date +%Y.%m.%d)'/test' -d '{\"@timestamp\": \"'$(date +%Y-%m-%d'T'%T%z)'\",\"field\": \"value\"}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","source":"_posts/elastalert-wechat-plugin.md","raw":"---\ntitle: elastalert微信报警\ndate: 2017-02-16 16:27:53\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST 'http://127.0.0.1:9200/logstash-'$(date +%Y.%m.%d)'/test' -d '{\"@timestamp\": \"'$(date +%Y-%m-%d'T'%T%z)'\",\"field\": \"value\"}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","slug":"elastalert-wechat-plugin","published":1,"updated":"2017-11-13T04:31:28.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5melr00015gdo6jaa8al5","content":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\" target=\"_blank\" rel=\"noopener\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</span><br><span class=\"line\"></span><br><span class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ cp  config.yaml.example config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#部门id</span></span><br><span class=\"line\"><span class=\"attr\">party_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#用户微信号</span></span><br><span class=\"line\"><span class=\"attr\">user_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\"># 标签id</span></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -X POST <span class=\"string\">'http://127.0.0.1:9200/logstash-'</span>$(date +%Y.%m.%d)<span class=\"string\">'/test'</span> -d <span class=\"string\">'&#123;\"@timestamp\": \"'</span>$(date +%Y-%m-%d<span class=\"string\">'T'</span>%T%z)<span class=\"string\">'\",\"field\": \"value\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</span><br><span class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</span><br><span class=\"line\">INFO:elastalert:发送消息给 xxx</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\" target=\"_blank\" rel=\"noopener\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\" target=\"_blank\" rel=\"noopener\">anjia0532/weixin-qiye-alert</a></p>\n","site":{"data":{}},"excerpt":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\" target=\"_blank\" rel=\"noopener\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</span><br><span class=\"line\"></span><br><span class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ cp  config.yaml.example config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#部门id</span></span><br><span class=\"line\"><span class=\"attr\">party_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#用户微信号</span></span><br><span class=\"line\"><span class=\"attr\">user_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\"># 标签id</span></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -X POST <span class=\"string\">'http://127.0.0.1:9200/logstash-'</span>$(date +%Y.%m.%d)<span class=\"string\">'/test'</span> -d <span class=\"string\">'&#123;\"@timestamp\": \"'</span>$(date +%Y-%m-%d<span class=\"string\">'T'</span>%T%z)<span class=\"string\">'\",\"field\": \"value\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</span><br><span class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</span><br><span class=\"line\">INFO:elastalert:发送消息给 xxx</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\" target=\"_blank\" rel=\"noopener\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\" target=\"_blank\" rel=\"noopener\">anjia0532/weixin-qiye-alert</a></p>"},{"title":"彻底解决docker build时安装软件失败问题","date":"2017-09-01T03:35:31.000Z","_content":"\n最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例\n\n失败日志如下\n\n```bash\nStep 4/6 : RUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories &&     apk update &&     apk add tzdata &&     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &&     echo \"Asia/Shanghai\" >  /etc/timezone &&     rm -rf /var/cache/apk/*\n ---> Running in bd5d1dfd3ff4\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz\nv3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]\nv3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]\nOK: 8440 distinct packages available\n(1/1) Installing tzdata (2017a-r0)\nERROR: tzdata-2017a-r0: temporary error (try again later)\n```\n\n\n为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区\n\n为了加速构建，替换为中科大的镜像地址\n\nDockerfile\n\n```Dockerfile\nFROM alpine\nRUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories && \\\n    apk update &&\\\n    apk --no-cache add tzdata && \\\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    echo \"Asia/Shanghai\" >  /etc/timezone\n```\n\n<!-- more -->\n\n其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo [anjia0532/alpine-package-mirror][] , [三种方法解决docker构建失败(alpine)][],但是都是时好时坏，严重影响效率。\n\n后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 `tcpdump` 进行进一步排查\n\n**note**\n\n为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)\n\n```bash\nsudo tcpdump -i docker0\n\n....\n\n10:47:43.038404 IP6 :: > ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28\n10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n10:47:43.114750 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114775 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114827 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.114833 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.209679 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)\n10:47:43.229261 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18687 0/1/0 (106)\n\n....\n```\n\n发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）\n\n>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).\n\n原文见官方文档 [Embedded DNS server in user-defined networks][linkEmbeddedDnsServerInUser-defined]\n\n两种方案，\n\n1. 修改宿主机的`hosts`文件，写死ip\n2. 修改Docker的`daemon.json`文件\n\n推荐用第二种，参考一下官方文档 [DAEMON CONFIGURATION FILE#On Linux][linkDaemonConfigurationFile#onLinux]\n\n更合理的方案是修改docker的daemon.json `sudo vi /etc/docker/daemon.json`\n\n比如改成dnspod dns\n\n增加 `\"dns\": [\"119.29.29.29\"]`\n\n然后`sudo systemctl daemon-reload`\n\n```bash\n11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n11:14:17.586581 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)\n11:14:17.586604 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)\n11:14:17.777921 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53868 0/1/0 (106)\n11:14:17.843875 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)\n11:14:17.844028 IP 172.17.0.2.36810 > 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0\n```\n\n整个过程可参见我在中科大 github的issues [alpine 镜像频繁异常][linkAlpine镜像频繁异常]\n\n博客 [https://anjia.ml/2017/09/01/docker-dns/][blog]\n掘金 [https://juejin.im/post/59a8f9e0f265da24797b7da0][juejin]\n简书 [http://www.jianshu.com/p/1f4e62dff251][jianshu]\n\n[blog]: https://anjia.ml/2017/09/01/docker-dns/\n[juejin]: https://juejin.im/post/59a8f9e0f265da24797b7da0\n[jianshu]: http://www.jianshu.com/p/1f4e62dff251\n[anjia0532/alpine-package-mirror]: https://github.com/anjia0532/alpine-package-mirror\n[linkDaemonConfigurationFile#onLinux]: https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\n[linkEmbeddedDnsServerInUser-defined]: https://docs.docker.com/engine/userguide/networking/configure-dns/\n[linkAlpine镜像频繁异常]: https://github.com/ustclug/discussions/issues/166\n[三种方法解决docker构建失败(alpine)]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n","source":"_posts/docker-dns.md","raw":"---\ntitle: 彻底解决docker build时安装软件失败问题\ndate: 2017-09-01 11:35:31\ntags: [docker]\n---\n\n最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例\n\n失败日志如下\n\n```bash\nStep 4/6 : RUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories &&     apk update &&     apk add tzdata &&     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &&     echo \"Asia/Shanghai\" >  /etc/timezone &&     rm -rf /var/cache/apk/*\n ---> Running in bd5d1dfd3ff4\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz\nv3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]\nv3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]\nOK: 8440 distinct packages available\n(1/1) Installing tzdata (2017a-r0)\nERROR: tzdata-2017a-r0: temporary error (try again later)\n```\n\n\n为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区\n\n为了加速构建，替换为中科大的镜像地址\n\nDockerfile\n\n```Dockerfile\nFROM alpine\nRUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories && \\\n    apk update &&\\\n    apk --no-cache add tzdata && \\\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    echo \"Asia/Shanghai\" >  /etc/timezone\n```\n\n<!-- more -->\n\n其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo [anjia0532/alpine-package-mirror][] , [三种方法解决docker构建失败(alpine)][],但是都是时好时坏，严重影响效率。\n\n后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 `tcpdump` 进行进一步排查\n\n**note**\n\n为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)\n\n```bash\nsudo tcpdump -i docker0\n\n....\n\n10:47:43.038404 IP6 :: > ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28\n10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n10:47:43.114750 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114775 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114827 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.114833 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.209679 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)\n10:47:43.229261 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18687 0/1/0 (106)\n\n....\n```\n\n发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）\n\n>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).\n\n原文见官方文档 [Embedded DNS server in user-defined networks][linkEmbeddedDnsServerInUser-defined]\n\n两种方案，\n\n1. 修改宿主机的`hosts`文件，写死ip\n2. 修改Docker的`daemon.json`文件\n\n推荐用第二种，参考一下官方文档 [DAEMON CONFIGURATION FILE#On Linux][linkDaemonConfigurationFile#onLinux]\n\n更合理的方案是修改docker的daemon.json `sudo vi /etc/docker/daemon.json`\n\n比如改成dnspod dns\n\n增加 `\"dns\": [\"119.29.29.29\"]`\n\n然后`sudo systemctl daemon-reload`\n\n```bash\n11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n11:14:17.586581 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)\n11:14:17.586604 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)\n11:14:17.777921 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53868 0/1/0 (106)\n11:14:17.843875 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)\n11:14:17.844028 IP 172.17.0.2.36810 > 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0\n```\n\n整个过程可参见我在中科大 github的issues [alpine 镜像频繁异常][linkAlpine镜像频繁异常]\n\n博客 [https://anjia.ml/2017/09/01/docker-dns/][blog]\n掘金 [https://juejin.im/post/59a8f9e0f265da24797b7da0][juejin]\n简书 [http://www.jianshu.com/p/1f4e62dff251][jianshu]\n\n[blog]: https://anjia.ml/2017/09/01/docker-dns/\n[juejin]: https://juejin.im/post/59a8f9e0f265da24797b7da0\n[jianshu]: http://www.jianshu.com/p/1f4e62dff251\n[anjia0532/alpine-package-mirror]: https://github.com/anjia0532/alpine-package-mirror\n[linkDaemonConfigurationFile#onLinux]: https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\n[linkEmbeddedDnsServerInUser-defined]: https://docs.docker.com/engine/userguide/networking/configure-dns/\n[linkAlpine镜像频繁异常]: https://github.com/ustclug/discussions/issues/166\n[三种方法解决docker构建失败(alpine)]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n","slug":"docker-dns","published":1,"updated":"2017-09-01T06:13:17.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5melu00035gdonk3eb3tl","content":"<p>最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例</p>\n<p>失败日志如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Step 4/6 : RUN <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp;     apk update &amp;&amp;     apk add tzdata &amp;&amp;     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone &amp;&amp;     rm -rf /var/cache/apk/*</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd5d1dfd3ff4</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">v3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]</span><br><span class=\"line\">v3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]</span><br><span class=\"line\">OK: 8440 distinct packages available</span><br><span class=\"line\">(1/1) Installing tzdata (2017a-r0)</span><br><span class=\"line\">ERROR: tzdata-2017a-r0: temporary error (try again later)</span><br></pre></td></tr></table></figure>\n<p>为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区</p>\n<p>为了加速构建，替换为中科大的镜像地址</p>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    apk update &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    apk --no-cache add tzdata &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a> , <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\">三种方法解决docker构建失败(alpine)</a>,但是都是时好时坏，严重影响效率。</p>\n<p>后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 <code>tcpdump</code> 进行进一步排查</p>\n<p><strong>note</strong></p>\n<p>为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -i docker0</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">10:47:43.038404 IP6 :: &gt; ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28</span><br><span class=\"line\">10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">10:47:43.114750 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114775 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114827 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114833 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.209679 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">10:47:43.229261 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18687 0/1/0 (106)</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）</p>\n<blockquote>\n<p>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).</p>\n</blockquote>\n<p>原文见官方文档 <a href=\"https://docs.docker.com/engine/userguide/networking/configure-dns/\" target=\"_blank\" rel=\"noopener\">Embedded DNS server in user-defined networks</a></p>\n<p>两种方案，</p>\n<ol>\n<li>修改宿主机的<code>hosts</code>文件，写死ip</li>\n<li>修改Docker的<code>daemon.json</code>文件</li>\n</ol>\n<p>推荐用第二种，参考一下官方文档 <a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\" target=\"_blank\" rel=\"noopener\">DAEMON CONFIGURATION FILE#On Linux</a></p>\n<p>更合理的方案是修改docker的daemon.json <code>sudo vi /etc/docker/daemon.json</code></p>\n<p>比如改成dnspod dns</p>\n<p>增加 <code>&quot;dns&quot;: [&quot;119.29.29.29&quot;]</code></p>\n<p>然后<code>sudo systemctl daemon-reload</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">11:14:17.586581 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.586604 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.777921 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53868 0/1/0 (106)</span><br><span class=\"line\">11:14:17.843875 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">11:14:17.844028 IP 172.17.0.2.36810 &gt; 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0</span><br></pre></td></tr></table></figure>\n<p>整个过程可参见我在中科大 github的issues <a href=\"https://github.com/ustclug/discussions/issues/166\" target=\"_blank\" rel=\"noopener\">alpine 镜像频繁异常</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/09/01/docker-dns/\">https://anjia.ml/2017/09/01/docker-dns/</a><br>掘金 <a href=\"https://juejin.im/post/59a8f9e0f265da24797b7da0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59a8f9e0f265da24797b7da0</a><br>简书 <a href=\"http://www.jianshu.com/p/1f4e62dff251\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1f4e62dff251</a></p>\n","site":{"data":{}},"excerpt":"<p>最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例</p>\n<p>失败日志如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Step 4/6 : RUN <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp;     apk update &amp;&amp;     apk add tzdata &amp;&amp;     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone &amp;&amp;     rm -rf /var/cache/apk/*</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd5d1dfd3ff4</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">v3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]</span><br><span class=\"line\">v3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]</span><br><span class=\"line\">OK: 8440 distinct packages available</span><br><span class=\"line\">(1/1) Installing tzdata (2017a-r0)</span><br><span class=\"line\">ERROR: tzdata-2017a-r0: temporary error (try again later)</span><br></pre></td></tr></table></figure>\n<p>为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区</p>\n<p>为了加速构建，替换为中科大的镜像地址</p>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    apk update &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    apk --no-cache add tzdata &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone</span></span><br></pre></td></tr></table></figure>","more":"<p>其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a> , <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\">三种方法解决docker构建失败(alpine)</a>,但是都是时好时坏，严重影响效率。</p>\n<p>后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 <code>tcpdump</code> 进行进一步排查</p>\n<p><strong>note</strong></p>\n<p>为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -i docker0</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">10:47:43.038404 IP6 :: &gt; ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28</span><br><span class=\"line\">10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">10:47:43.114750 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114775 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114827 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114833 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.209679 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">10:47:43.229261 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18687 0/1/0 (106)</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）</p>\n<blockquote>\n<p>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).</p>\n</blockquote>\n<p>原文见官方文档 <a href=\"https://docs.docker.com/engine/userguide/networking/configure-dns/\" target=\"_blank\" rel=\"noopener\">Embedded DNS server in user-defined networks</a></p>\n<p>两种方案，</p>\n<ol>\n<li>修改宿主机的<code>hosts</code>文件，写死ip</li>\n<li>修改Docker的<code>daemon.json</code>文件</li>\n</ol>\n<p>推荐用第二种，参考一下官方文档 <a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\" target=\"_blank\" rel=\"noopener\">DAEMON CONFIGURATION FILE#On Linux</a></p>\n<p>更合理的方案是修改docker的daemon.json <code>sudo vi /etc/docker/daemon.json</code></p>\n<p>比如改成dnspod dns</p>\n<p>增加 <code>&quot;dns&quot;: [&quot;119.29.29.29&quot;]</code></p>\n<p>然后<code>sudo systemctl daemon-reload</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">11:14:17.586581 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.586604 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.777921 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53868 0/1/0 (106)</span><br><span class=\"line\">11:14:17.843875 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">11:14:17.844028 IP 172.17.0.2.36810 &gt; 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0</span><br></pre></td></tr></table></figure>\n<p>整个过程可参见我在中科大 github的issues <a href=\"https://github.com/ustclug/discussions/issues/166\" target=\"_blank\" rel=\"noopener\">alpine 镜像频繁异常</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/09/01/docker-dns/\">https://anjia.ml/2017/09/01/docker-dns/</a><br>掘金 <a href=\"https://juejin.im/post/59a8f9e0f265da24797b7da0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59a8f9e0f265da24797b7da0</a><br>简书 <a href=\"http://www.jianshu.com/p/1f4e62dff251\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1f4e62dff251</a></p>"},{"title":"安装anaconda并且配置jupyter notebook支持python2.x和3.x共存","date":"2017-07-02T02:59:18.000Z","_content":"\n业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。[基于elk报警器elastalert的微信企业号插件](https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py)\n\n之前一直用的[sublime text 3][linkSublimeText3] , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过`sublimeREPL`->`python`->`execfile(filepath)`实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用`sublime+python`切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便\n\n经过一番搜索，最后决定使用[Anaconda][Anaconda] Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了[jupyter notebook][linkJupyterNotebook] ，可以使用 [try it in your browser][linkTryItInYourBrowser] 进行体验。\n\n<!-- more -->\n\n## 安装anaconda\n\n官方安装包 [https://www.continuum.io/downloads][anacondaDownloads] ,但是国内比较慢，可以使用[清华镜像][qinghua] ,从 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/][anacondaQingHuaDownloads] 下载安装包。目前(2017-07-02)最新的是 `Anaconda3-4.4.0-*` \n\n我下载的是windows 64位版[Anaconda3-4.4.0-Windows-x86_64.exe][linkWindows64]（如果用于机器学习(e.g. [Tensorflow][]) 建议使用Linux系统，具体参见 [Keras安装和配置指南(Windows)][keras_windows]）。\n\n同时推荐 [李金][lijin-THU]的 [《中文 Python 笔记》][notes-python] ,github 打开.ipynb 较慢，推荐使用[NbViewer][] 查看\n\n\n\n\n#### 设置清华镜像源\n更多可参阅 [conda 使用清华大学开源软件镜像][linkConda使用清华大学开源软件镜像] 或者 [清华镜像][qinghua]\n```bash\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n```\n\n#### 修改windows下jupyter默认路径\n参考 stackoverflow 上 [how to change jupyter start folder?][linkHowToChangeJupyterStartFolder?] 的回答\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 运行`jupyter notebook --generate-config`\n3. 会生成一个默认配置文件，`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n4. 修改`#c.NotebookApp.notebook_dir = ''` 为 `c.NotebookApp.notebook_dir = '你的默认路径'`\n5. 打开`C:\\Users\\{用户名}\\Anaconda3\\Scripts`\n6. 右键单击`jupyter-notebook.exe`并发送到`桌面快捷方式` \n7. 在桌面上找到该快捷方式，`右键`->`属性`->`更改图标(C)...`->`{Anaconda3_home}\\Menu\\jupyter.ico`\n8. 双击运行，会自动打开默认浏览器。\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg)\n\n输入\n\n```python\nprint('hello jupyter')\n```\n按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg)\n\n具体快捷键，参见 `Help` -> `Keyboard Shortcuts`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg)\n\n### 切换python版本\n\n参考 [Managing Python][linkManagingPython] 或者 [Anaconda多环境多版本python配置指导][5465452]\n\n打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n\n#### 创建python2.7环境\n\n```bash\nconda create -n python27 python=2.7 -y\nactivate python27\n```\n#### 设置jupyter 2.7,3.6共存\n参考 [Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法][linkAnaconda3Python3和2InJupyterNotebook共存方法]\n```\nconda install ipykernel -y\n```\n\n复制`${Anaconda3_home}\\share\\jupyter\\kernels\\python3` 并重命名为`${Anaconda3_home}\\share\\jupyter\\kernels\\python27`，编辑`${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json`\n```\n{\n \"argv\": [\n  \"${Anaconda3_home}\\\\envs\\\\python27\\\\python.exe\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python 27\",\n \"language\": \"python\"\n}\n```\n\n注意，修改`display_name`为自定义名称，`argv`第一行中路径用`\\\\`替代`\\`\n\n![jupyter-change-kernel](http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg)\n\n在`cell`中输入\n```python\nimport sys \nsys.version\n```\n\n切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的`3.6.1`,因为 Tensorflow官方文档说windows只支持 [3.5.x][] ，故而又装了一个3.5.3的环境\n\n#### jupyter作为公开服务使用(云IDE)\n\n参考 [Running a notebook server][linkRunningANotebookServer] ，使用[nssm][linkWindows10CreatorsUpdate]将jupyter设置为开机自启动服务\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 切换回anaconda默认环境`activate root`\n3. 创建密码 `jupyter notebook password` [Preparing a hashed password][linkPreparingAHashedPassword]\n4. 修改`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`中`c.NotebookApp.ip = '*'`,`c.NotebookApp.open_browser = False`\n5. 重启 jupyter ,打开 http://{ip}:8888, 提示输入密码，输入密码即可登录\n6. 注册为服务 下载[nssm][linkWindows10CreatorsUpdate] 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 [Windows 10 Creators Update][linkWindows10CreatorsUpdate] \n7. `{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n8. `{nssm_home}\\win64\\nssm.exe start jupyter'\n9. 浏览器打开 http://ip:8888 输入密码登录\n\n注意，nssm默认使用`LOCALSYSTEM `账号操作，而jupyter默认读取`~\\.jupyter`(`~\\`是当前登录用户文件夹)，可以使用`nssm set <servicename> ObjectName <username> <password>` 使用指定用户，这样就不需要`--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py` 参数了，具体详见 [Usage][] 和 [Managing services from the command line][linkManagingServicesFromTheCommandLine]\n\n#### nginx反向代理\n\n```\nupstream jupyter {\n    server http://ip:8888;\n    server http://ip2:8888;\n}\nserver {\n    listen 80;\n    server_name jupyter.example.com;\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_set_header Host  $host;\n\n        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        #如果是单服务，无负载，则不需要用upsstream\n        #proxy_pass     http://ip:8888;\n        proxy_pass http://jupyter;\n    }\n}\n```\n\n博客 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/][blog]\n掘金 [https://juejin.im/post/595897c36fb9a06bca0b91eb][juejin]\n简书 [http://www.jianshu.com/p/e981c9d28555][jianshu]\n\n[blog]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\n[juejin]: https://juejin.im/post/595897c36fb9a06bca0b91eb\n[jianshu]: http://www.jianshu.com/p/e981c9d28555\n\n[linkSublimeText3]: http://www.sublimetext.com/3\n[Anaconda]: https://www.continuum.io\n[linkJupyterNotebook]: http://jupyter.org/\n[linkTryItInYourBrowser]: https://try.jupyter.org/\n[qinghua]: https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\n[anacondaDownloads]: https://www.continuum.io/downloads\n[anacondaQingHuaDownloads]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\n[Tensorflow]: http://tensorflow.org/\n[keras_windows]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[linkWindows64]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\n[notes-python]: https://github.com/lijin-THU/notes-python\n[lijin-THU]: https://github.com/lijin-THU\n[NbViewer]: http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb \n[linkManagingPython]: https://conda.io/docs/py2or3.html\n[5465452]: http://www.cnblogs.com/harvey888/p/5465452.html\n[linkConda使用清华大学开源软件镜像]: http://blog.csdn.net/u010570551/article/details/54291507\n[linkAnaconda3Python3和2InJupyterNotebook共存方法]: https://segmentfault.com/a/1190000008585746\n[3.5.x]: https://www.tensorflow.org/install/install_windows#installing_with_native_pip\n[linkHowToChangeJupyterStartFolder?]: https://stackoverflow.com/a/44463707/7001350\n[linkRunningANotebookServer]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\n[linkPreparingAHashedPassword]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\n[linkWindows10CreatorsUpdate]: http://www.nssm.cc/download\n[linkManagingServicesFromTheCommandLine]: http://www.nssm.cc/commands\n[Usage]: http://www.nssm.cc/usage\n","source":"_posts/anaconda-install-and-configurating-jupyter.md","raw":"---\ntitle: 安装anaconda并且配置jupyter notebook支持python2.x和3.x共存\ndate: 2017-07-02 10:59:18\ntags: [python,anaconda,jupyter,ipython]\ncategories: [anaconda,jupyter]\n---\n\n业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。[基于elk报警器elastalert的微信企业号插件](https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py)\n\n之前一直用的[sublime text 3][linkSublimeText3] , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过`sublimeREPL`->`python`->`execfile(filepath)`实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用`sublime+python`切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便\n\n经过一番搜索，最后决定使用[Anaconda][Anaconda] Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了[jupyter notebook][linkJupyterNotebook] ，可以使用 [try it in your browser][linkTryItInYourBrowser] 进行体验。\n\n<!-- more -->\n\n## 安装anaconda\n\n官方安装包 [https://www.continuum.io/downloads][anacondaDownloads] ,但是国内比较慢，可以使用[清华镜像][qinghua] ,从 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/][anacondaQingHuaDownloads] 下载安装包。目前(2017-07-02)最新的是 `Anaconda3-4.4.0-*` \n\n我下载的是windows 64位版[Anaconda3-4.4.0-Windows-x86_64.exe][linkWindows64]（如果用于机器学习(e.g. [Tensorflow][]) 建议使用Linux系统，具体参见 [Keras安装和配置指南(Windows)][keras_windows]）。\n\n同时推荐 [李金][lijin-THU]的 [《中文 Python 笔记》][notes-python] ,github 打开.ipynb 较慢，推荐使用[NbViewer][] 查看\n\n\n\n\n#### 设置清华镜像源\n更多可参阅 [conda 使用清华大学开源软件镜像][linkConda使用清华大学开源软件镜像] 或者 [清华镜像][qinghua]\n```bash\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n```\n\n#### 修改windows下jupyter默认路径\n参考 stackoverflow 上 [how to change jupyter start folder?][linkHowToChangeJupyterStartFolder?] 的回答\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 运行`jupyter notebook --generate-config`\n3. 会生成一个默认配置文件，`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n4. 修改`#c.NotebookApp.notebook_dir = ''` 为 `c.NotebookApp.notebook_dir = '你的默认路径'`\n5. 打开`C:\\Users\\{用户名}\\Anaconda3\\Scripts`\n6. 右键单击`jupyter-notebook.exe`并发送到`桌面快捷方式` \n7. 在桌面上找到该快捷方式，`右键`->`属性`->`更改图标(C)...`->`{Anaconda3_home}\\Menu\\jupyter.ico`\n8. 双击运行，会自动打开默认浏览器。\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg)\n\n输入\n\n```python\nprint('hello jupyter')\n```\n按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg)\n\n具体快捷键，参见 `Help` -> `Keyboard Shortcuts`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg)\n\n### 切换python版本\n\n参考 [Managing Python][linkManagingPython] 或者 [Anaconda多环境多版本python配置指导][5465452]\n\n打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n\n#### 创建python2.7环境\n\n```bash\nconda create -n python27 python=2.7 -y\nactivate python27\n```\n#### 设置jupyter 2.7,3.6共存\n参考 [Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法][linkAnaconda3Python3和2InJupyterNotebook共存方法]\n```\nconda install ipykernel -y\n```\n\n复制`${Anaconda3_home}\\share\\jupyter\\kernels\\python3` 并重命名为`${Anaconda3_home}\\share\\jupyter\\kernels\\python27`，编辑`${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json`\n```\n{\n \"argv\": [\n  \"${Anaconda3_home}\\\\envs\\\\python27\\\\python.exe\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python 27\",\n \"language\": \"python\"\n}\n```\n\n注意，修改`display_name`为自定义名称，`argv`第一行中路径用`\\\\`替代`\\`\n\n![jupyter-change-kernel](http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg)\n\n在`cell`中输入\n```python\nimport sys \nsys.version\n```\n\n切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的`3.6.1`,因为 Tensorflow官方文档说windows只支持 [3.5.x][] ，故而又装了一个3.5.3的环境\n\n#### jupyter作为公开服务使用(云IDE)\n\n参考 [Running a notebook server][linkRunningANotebookServer] ，使用[nssm][linkWindows10CreatorsUpdate]将jupyter设置为开机自启动服务\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 切换回anaconda默认环境`activate root`\n3. 创建密码 `jupyter notebook password` [Preparing a hashed password][linkPreparingAHashedPassword]\n4. 修改`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`中`c.NotebookApp.ip = '*'`,`c.NotebookApp.open_browser = False`\n5. 重启 jupyter ,打开 http://{ip}:8888, 提示输入密码，输入密码即可登录\n6. 注册为服务 下载[nssm][linkWindows10CreatorsUpdate] 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 [Windows 10 Creators Update][linkWindows10CreatorsUpdate] \n7. `{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n8. `{nssm_home}\\win64\\nssm.exe start jupyter'\n9. 浏览器打开 http://ip:8888 输入密码登录\n\n注意，nssm默认使用`LOCALSYSTEM `账号操作，而jupyter默认读取`~\\.jupyter`(`~\\`是当前登录用户文件夹)，可以使用`nssm set <servicename> ObjectName <username> <password>` 使用指定用户，这样就不需要`--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py` 参数了，具体详见 [Usage][] 和 [Managing services from the command line][linkManagingServicesFromTheCommandLine]\n\n#### nginx反向代理\n\n```\nupstream jupyter {\n    server http://ip:8888;\n    server http://ip2:8888;\n}\nserver {\n    listen 80;\n    server_name jupyter.example.com;\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_set_header Host  $host;\n\n        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        #如果是单服务，无负载，则不需要用upsstream\n        #proxy_pass     http://ip:8888;\n        proxy_pass http://jupyter;\n    }\n}\n```\n\n博客 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/][blog]\n掘金 [https://juejin.im/post/595897c36fb9a06bca0b91eb][juejin]\n简书 [http://www.jianshu.com/p/e981c9d28555][jianshu]\n\n[blog]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\n[juejin]: https://juejin.im/post/595897c36fb9a06bca0b91eb\n[jianshu]: http://www.jianshu.com/p/e981c9d28555\n\n[linkSublimeText3]: http://www.sublimetext.com/3\n[Anaconda]: https://www.continuum.io\n[linkJupyterNotebook]: http://jupyter.org/\n[linkTryItInYourBrowser]: https://try.jupyter.org/\n[qinghua]: https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\n[anacondaDownloads]: https://www.continuum.io/downloads\n[anacondaQingHuaDownloads]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\n[Tensorflow]: http://tensorflow.org/\n[keras_windows]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[linkWindows64]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\n[notes-python]: https://github.com/lijin-THU/notes-python\n[lijin-THU]: https://github.com/lijin-THU\n[NbViewer]: http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb \n[linkManagingPython]: https://conda.io/docs/py2or3.html\n[5465452]: http://www.cnblogs.com/harvey888/p/5465452.html\n[linkConda使用清华大学开源软件镜像]: http://blog.csdn.net/u010570551/article/details/54291507\n[linkAnaconda3Python3和2InJupyterNotebook共存方法]: https://segmentfault.com/a/1190000008585746\n[3.5.x]: https://www.tensorflow.org/install/install_windows#installing_with_native_pip\n[linkHowToChangeJupyterStartFolder?]: https://stackoverflow.com/a/44463707/7001350\n[linkRunningANotebookServer]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\n[linkPreparingAHashedPassword]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\n[linkWindows10CreatorsUpdate]: http://www.nssm.cc/download\n[linkManagingServicesFromTheCommandLine]: http://www.nssm.cc/commands\n[Usage]: http://www.nssm.cc/usage\n","slug":"anaconda-install-and-configurating-jupyter","published":1,"updated":"2017-07-03T10:46:56.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5melw00055gdof881qoe2","content":"<p>业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。<a href=\"https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py\" target=\"_blank\" rel=\"noopener\">基于elk报警器elastalert的微信企业号插件</a></p>\n<p>之前一直用的<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">sublime text 3</a> , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过<code>sublimeREPL</code>-&gt;<code>python</code>-&gt;<code>execfile(filepath)</code>实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用<code>sublime+python</code>切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便</p>\n<p>经过一番搜索，最后决定使用<a href=\"https://www.continuum.io\" target=\"_blank\" rel=\"noopener\">Anaconda</a> Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了<a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"noopener\">jupyter notebook</a> ，可以使用 <a href=\"https://try.jupyter.org/\" target=\"_blank\" rel=\"noopener\">try it in your browser</a> 进行体验。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装anaconda\"><a href=\"#安装anaconda\" class=\"headerlink\" title=\"安装anaconda\"></a>安装anaconda</h2><p>官方安装包 <a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">https://www.continuum.io/downloads</a> ,但是国内比较慢，可以使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a> ,从 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载安装包。目前(2017-07-02)最新的是 <code>Anaconda3-4.4.0-*</code> </p>\n<p>我下载的是windows 64位版<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\" target=\"_blank\" rel=\"noopener\">Anaconda3-4.4.0-Windows-x86_64.exe</a>（如果用于机器学习(e.g. <a href=\"http://tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Tensorflow</a>) 建议使用Linux系统，具体参见 <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a>）。</p>\n<p>同时推荐 <a href=\"https://github.com/lijin-THU\" target=\"_blank\" rel=\"noopener\">李金</a>的 <a href=\"https://github.com/lijin-THU/notes-python\" target=\"_blank\" rel=\"noopener\">《中文 Python 笔记》</a> ,github 打开.ipynb 较慢，推荐使用<a href=\"http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb\" target=\"_blank\" rel=\"noopener\">NbViewer</a> 查看</p>\n<h4 id=\"设置清华镜像源\"><a href=\"#设置清华镜像源\" class=\"headerlink\" title=\"设置清华镜像源\"></a>设置清华镜像源</h4><p>更多可参阅 <a href=\"http://blog.csdn.net/u010570551/article/details/54291507\" target=\"_blank\" rel=\"noopener\">conda 使用清华大学开源软件镜像</a> 或者 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --<span class=\"built_in\">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改windows下jupyter默认路径\"><a href=\"#修改windows下jupyter默认路径\" class=\"headerlink\" title=\"修改windows下jupyter默认路径\"></a>修改windows下jupyter默认路径</h4><p>参考 stackoverflow 上 <a href=\"https://stackoverflow.com/a/44463707/7001350\" target=\"_blank\" rel=\"noopener\">how to change jupyter start folder?</a> 的回答</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>运行<code>jupyter notebook --generate-config</code></li>\n<li>会生成一个默认配置文件，<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>修改<code>#c.NotebookApp.notebook_dir = &#39;&#39;</code> 为 <code>c.NotebookApp.notebook_dir = &#39;你的默认路径&#39;</code></li>\n<li>打开<code>C:\\Users\\{用户名}\\Anaconda3\\Scripts</code></li>\n<li>右键单击<code>jupyter-notebook.exe</code>并发送到<code>桌面快捷方式</code> </li>\n<li>在桌面上找到该快捷方式，<code>右键</code>-&gt;<code>属性</code>-&gt;<code>更改图标(C)...</code>-&gt;<code>{Anaconda3_home}\\Menu\\jupyter.ico</code></li>\n<li>双击运行，会自动打开默认浏览器。<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg\" alt=\"\"></li>\n</ol>\n<p>输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello jupyter'</span>)</span><br></pre></td></tr></table></figure>\n<p>按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg\" alt=\"\"></p>\n<p>具体快捷键，参见 <code>Help</code> -&gt; <code>Keyboard Shortcuts</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg\" alt=\"\"></p>\n<h3 id=\"切换python版本\"><a href=\"#切换python版本\" class=\"headerlink\" title=\"切换python版本\"></a>切换python版本</h3><p>参考 <a href=\"https://conda.io/docs/py2or3.html\" target=\"_blank\" rel=\"noopener\">Managing Python</a> 或者 <a href=\"http://www.cnblogs.com/harvey888/p/5465452.html\" target=\"_blank\" rel=\"noopener\">Anaconda多环境多版本python配置指导</a></p>\n<p>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></p>\n<h4 id=\"创建python2-7环境\"><a href=\"#创建python2-7环境\" class=\"headerlink\" title=\"创建python2.7环境\"></a>创建python2.7环境</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n python27 python=2.7 -y</span><br><span class=\"line\">activate python27</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置jupyter-2-7-3-6共存\"><a href=\"#设置jupyter-2-7-3-6共存\" class=\"headerlink\" title=\"设置jupyter 2.7,3.6共存\"></a>设置jupyter 2.7,3.6共存</h4><p>参考 <a href=\"https://segmentfault.com/a/1190000008585746\" target=\"_blank\" rel=\"noopener\">Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda install ipykernel -y</span><br></pre></td></tr></table></figure></p>\n<p>复制<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python3</code> 并重命名为<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27</code>，编辑<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;argv&quot;: [</span><br><span class=\"line\">  &quot;$&#123;Anaconda3_home&#125;\\\\envs\\\\python27\\\\python.exe&quot;,</span><br><span class=\"line\">  &quot;-m&quot;,</span><br><span class=\"line\">  &quot;ipykernel_launcher&quot;,</span><br><span class=\"line\">  &quot;-f&quot;,</span><br><span class=\"line\">  &quot;&#123;connection_file&#125;&quot;</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> &quot;display_name&quot;: &quot;Python 27&quot;,</span><br><span class=\"line\"> &quot;language&quot;: &quot;python&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意，修改<code>display_name</code>为自定义名称，<code>argv</code>第一行中路径用<code>\\\\</code>替代<code>\\</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg\" alt=\"jupyter-change-kernel\"></p>\n<p>在<code>cell</code>中输入<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys </span><br><span class=\"line\">sys.version</span><br></pre></td></tr></table></figure></p>\n<p>切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的<code>3.6.1</code>,因为 Tensorflow官方文档说windows只支持 <a href=\"https://www.tensorflow.org/install/install_windows#installing_with_native_pip\" target=\"_blank\" rel=\"noopener\">3.5.x</a> ，故而又装了一个3.5.3的环境</p>\n<h4 id=\"jupyter作为公开服务使用-云IDE\"><a href=\"#jupyter作为公开服务使用-云IDE\" class=\"headerlink\" title=\"jupyter作为公开服务使用(云IDE)\"></a>jupyter作为公开服务使用(云IDE)</h4><p>参考 <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\" target=\"_blank\" rel=\"noopener\">Running a notebook server</a> ，使用<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>将jupyter设置为开机自启动服务</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>切换回anaconda默认环境<code>activate root</code></li>\n<li>创建密码 <code>jupyter notebook password</code> <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\" target=\"_blank\" rel=\"noopener\">Preparing a hashed password</a></li>\n<li>修改<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code>中<code>c.NotebookApp.ip = &#39;*&#39;</code>,<code>c.NotebookApp.open_browser = False</code></li>\n<li>重启 jupyter ,打开 <a href=\"http://{ip}:8888\" target=\"_blank\" rel=\"noopener\">http://{ip}:8888</a>, 提示输入密码，输入密码即可登录</li>\n<li>注册为服务 下载<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a> 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 <a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">Windows 10 Creators Update</a> </li>\n<li><code>{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>`{nssm_home}\\win64\\nssm.exe start jupyter’</li>\n<li>浏览器打开 <a href=\"http://ip:8888\" target=\"_blank\" rel=\"noopener\">http://ip:8888</a> 输入密码登录</li>\n</ol>\n<p>注意，nssm默认使用<code>LOCALSYSTEM</code>账号操作，而jupyter默认读取<code>~\\.jupyter</code>(<code>~\\</code>是当前登录用户文件夹)，可以使用<code>nssm set &lt;servicename&gt; ObjectName &lt;username&gt; &lt;password&gt;</code> 使用指定用户，这样就不需要<code>--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code> 参数了，具体详见 <a href=\"http://www.nssm.cc/usage\" target=\"_blank\" rel=\"noopener\">Usage</a> 和 <a href=\"http://www.nssm.cc/commands\" target=\"_blank\" rel=\"noopener\">Managing services from the command line</a></p>\n<h4 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream jupyter &#123;</span><br><span class=\"line\">    server http://ip:8888;</span><br><span class=\"line\">    server http://ip2:8888;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name jupyter.example.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">        proxy_set_header Host  $host;</span><br><span class=\"line\"></span><br><span class=\"line\">        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\"></span><br><span class=\"line\">        #如果是单服务，无负载，则不需要用upsstream</span><br><span class=\"line\">        #proxy_pass     http://ip:8888;</span><br><span class=\"line\">        proxy_pass http://jupyter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/595897c36fb9a06bca0b91eb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595897c36fb9a06bca0b91eb</a><br>简书 <a href=\"http://www.jianshu.com/p/e981c9d28555\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e981c9d28555</a></p>\n","site":{"data":{}},"excerpt":"<p>业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。<a href=\"https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py\" target=\"_blank\" rel=\"noopener\">基于elk报警器elastalert的微信企业号插件</a></p>\n<p>之前一直用的<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">sublime text 3</a> , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过<code>sublimeREPL</code>-&gt;<code>python</code>-&gt;<code>execfile(filepath)</code>实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用<code>sublime+python</code>切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便</p>\n<p>经过一番搜索，最后决定使用<a href=\"https://www.continuum.io\" target=\"_blank\" rel=\"noopener\">Anaconda</a> Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了<a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"noopener\">jupyter notebook</a> ，可以使用 <a href=\"https://try.jupyter.org/\" target=\"_blank\" rel=\"noopener\">try it in your browser</a> 进行体验。</p>","more":"<h2 id=\"安装anaconda\"><a href=\"#安装anaconda\" class=\"headerlink\" title=\"安装anaconda\"></a>安装anaconda</h2><p>官方安装包 <a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">https://www.continuum.io/downloads</a> ,但是国内比较慢，可以使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a> ,从 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载安装包。目前(2017-07-02)最新的是 <code>Anaconda3-4.4.0-*</code> </p>\n<p>我下载的是windows 64位版<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\" target=\"_blank\" rel=\"noopener\">Anaconda3-4.4.0-Windows-x86_64.exe</a>（如果用于机器学习(e.g. <a href=\"http://tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Tensorflow</a>) 建议使用Linux系统，具体参见 <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a>）。</p>\n<p>同时推荐 <a href=\"https://github.com/lijin-THU\" target=\"_blank\" rel=\"noopener\">李金</a>的 <a href=\"https://github.com/lijin-THU/notes-python\" target=\"_blank\" rel=\"noopener\">《中文 Python 笔记》</a> ,github 打开.ipynb 较慢，推荐使用<a href=\"http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb\" target=\"_blank\" rel=\"noopener\">NbViewer</a> 查看</p>\n<h4 id=\"设置清华镜像源\"><a href=\"#设置清华镜像源\" class=\"headerlink\" title=\"设置清华镜像源\"></a>设置清华镜像源</h4><p>更多可参阅 <a href=\"http://blog.csdn.net/u010570551/article/details/54291507\" target=\"_blank\" rel=\"noopener\">conda 使用清华大学开源软件镜像</a> 或者 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --<span class=\"built_in\">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改windows下jupyter默认路径\"><a href=\"#修改windows下jupyter默认路径\" class=\"headerlink\" title=\"修改windows下jupyter默认路径\"></a>修改windows下jupyter默认路径</h4><p>参考 stackoverflow 上 <a href=\"https://stackoverflow.com/a/44463707/7001350\" target=\"_blank\" rel=\"noopener\">how to change jupyter start folder?</a> 的回答</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>运行<code>jupyter notebook --generate-config</code></li>\n<li>会生成一个默认配置文件，<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>修改<code>#c.NotebookApp.notebook_dir = &#39;&#39;</code> 为 <code>c.NotebookApp.notebook_dir = &#39;你的默认路径&#39;</code></li>\n<li>打开<code>C:\\Users\\{用户名}\\Anaconda3\\Scripts</code></li>\n<li>右键单击<code>jupyter-notebook.exe</code>并发送到<code>桌面快捷方式</code> </li>\n<li>在桌面上找到该快捷方式，<code>右键</code>-&gt;<code>属性</code>-&gt;<code>更改图标(C)...</code>-&gt;<code>{Anaconda3_home}\\Menu\\jupyter.ico</code></li>\n<li>双击运行，会自动打开默认浏览器。<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg\" alt=\"\"></li>\n</ol>\n<p>输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello jupyter'</span>)</span><br></pre></td></tr></table></figure>\n<p>按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg\" alt=\"\"></p>\n<p>具体快捷键，参见 <code>Help</code> -&gt; <code>Keyboard Shortcuts</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg\" alt=\"\"></p>\n<h3 id=\"切换python版本\"><a href=\"#切换python版本\" class=\"headerlink\" title=\"切换python版本\"></a>切换python版本</h3><p>参考 <a href=\"https://conda.io/docs/py2or3.html\" target=\"_blank\" rel=\"noopener\">Managing Python</a> 或者 <a href=\"http://www.cnblogs.com/harvey888/p/5465452.html\" target=\"_blank\" rel=\"noopener\">Anaconda多环境多版本python配置指导</a></p>\n<p>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></p>\n<h4 id=\"创建python2-7环境\"><a href=\"#创建python2-7环境\" class=\"headerlink\" title=\"创建python2.7环境\"></a>创建python2.7环境</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n python27 python=2.7 -y</span><br><span class=\"line\">activate python27</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置jupyter-2-7-3-6共存\"><a href=\"#设置jupyter-2-7-3-6共存\" class=\"headerlink\" title=\"设置jupyter 2.7,3.6共存\"></a>设置jupyter 2.7,3.6共存</h4><p>参考 <a href=\"https://segmentfault.com/a/1190000008585746\" target=\"_blank\" rel=\"noopener\">Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda install ipykernel -y</span><br></pre></td></tr></table></figure></p>\n<p>复制<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python3</code> 并重命名为<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27</code>，编辑<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;argv&quot;: [</span><br><span class=\"line\">  &quot;$&#123;Anaconda3_home&#125;\\\\envs\\\\python27\\\\python.exe&quot;,</span><br><span class=\"line\">  &quot;-m&quot;,</span><br><span class=\"line\">  &quot;ipykernel_launcher&quot;,</span><br><span class=\"line\">  &quot;-f&quot;,</span><br><span class=\"line\">  &quot;&#123;connection_file&#125;&quot;</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> &quot;display_name&quot;: &quot;Python 27&quot;,</span><br><span class=\"line\"> &quot;language&quot;: &quot;python&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意，修改<code>display_name</code>为自定义名称，<code>argv</code>第一行中路径用<code>\\\\</code>替代<code>\\</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg\" alt=\"jupyter-change-kernel\"></p>\n<p>在<code>cell</code>中输入<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys </span><br><span class=\"line\">sys.version</span><br></pre></td></tr></table></figure></p>\n<p>切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的<code>3.6.1</code>,因为 Tensorflow官方文档说windows只支持 <a href=\"https://www.tensorflow.org/install/install_windows#installing_with_native_pip\" target=\"_blank\" rel=\"noopener\">3.5.x</a> ，故而又装了一个3.5.3的环境</p>\n<h4 id=\"jupyter作为公开服务使用-云IDE\"><a href=\"#jupyter作为公开服务使用-云IDE\" class=\"headerlink\" title=\"jupyter作为公开服务使用(云IDE)\"></a>jupyter作为公开服务使用(云IDE)</h4><p>参考 <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\" target=\"_blank\" rel=\"noopener\">Running a notebook server</a> ，使用<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>将jupyter设置为开机自启动服务</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>切换回anaconda默认环境<code>activate root</code></li>\n<li>创建密码 <code>jupyter notebook password</code> <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\" target=\"_blank\" rel=\"noopener\">Preparing a hashed password</a></li>\n<li>修改<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code>中<code>c.NotebookApp.ip = &#39;*&#39;</code>,<code>c.NotebookApp.open_browser = False</code></li>\n<li>重启 jupyter ,打开 <a href=\"http://{ip}:8888\" target=\"_blank\" rel=\"noopener\">http://{ip}:8888</a>, 提示输入密码，输入密码即可登录</li>\n<li>注册为服务 下载<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a> 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 <a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">Windows 10 Creators Update</a> </li>\n<li><code>{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>`{nssm_home}\\win64\\nssm.exe start jupyter’</li>\n<li>浏览器打开 <a href=\"http://ip:8888\" target=\"_blank\" rel=\"noopener\">http://ip:8888</a> 输入密码登录</li>\n</ol>\n<p>注意，nssm默认使用<code>LOCALSYSTEM</code>账号操作，而jupyter默认读取<code>~\\.jupyter</code>(<code>~\\</code>是当前登录用户文件夹)，可以使用<code>nssm set &lt;servicename&gt; ObjectName &lt;username&gt; &lt;password&gt;</code> 使用指定用户，这样就不需要<code>--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code> 参数了，具体详见 <a href=\"http://www.nssm.cc/usage\" target=\"_blank\" rel=\"noopener\">Usage</a> 和 <a href=\"http://www.nssm.cc/commands\" target=\"_blank\" rel=\"noopener\">Managing services from the command line</a></p>\n<h4 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream jupyter &#123;</span><br><span class=\"line\">    server http://ip:8888;</span><br><span class=\"line\">    server http://ip2:8888;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name jupyter.example.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">        proxy_set_header Host  $host;</span><br><span class=\"line\"></span><br><span class=\"line\">        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\"></span><br><span class=\"line\">        #如果是单服务，无负载，则不需要用upsstream</span><br><span class=\"line\">        #proxy_pass     http://ip:8888;</span><br><span class=\"line\">        proxy_pass http://jupyter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/595897c36fb9a06bca0b91eb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595897c36fb9a06bca0b91eb</a><br>简书 <a href=\"http://www.jianshu.com/p/e981c9d28555\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e981c9d28555</a></p>"},{"title":"Google Container Registry(gcr.io) 中国可用镜像(长期维护)","date":"2017-11-15T04:04:14.000Z","_content":"\ngoogle镜像库Google Container Registry([gcr.io][]) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 [Docker 中国官方镜像加速][Docker中国官方镜像加速] ,[加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台]速度还是很快的\n\n<!--more-->\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg)\n\n## 何时同步\n\n使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 [https://github.com/anjia0532/gcr.io_mirror][] , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可\n\n## 如何使用\n\n将 `gcr.io/google-containers` 替换为 `anjia0532` 即可.\n\n## 缺少镜像\n\n如果本项目中缺少 `gcr.io` 的镜像,[请提issues][]\n\n\n\n[gcr.io]: https://cloud.google.com/container-registry/\n[Docker中国官方镜像加速]: https://www.docker-cn.com/registry-mirror\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[https://github.com/anjia0532/gcr.io_mirror]: https://github.com/anjia0532/gcr.io_mirror\n[请提issues]: https://github.com/anjia0532/gcr.io_mirror/issues/new\n","source":"_posts/gcr-io-image-mirror.md","raw":"---\ntitle: Google Container Registry(gcr.io) 中国可用镜像(长期维护)\ndate: 2017-11-15 12:04:14\ntags: [k8s,kubernetes,rancher,gcr.io]\n---\n\ngoogle镜像库Google Container Registry([gcr.io][]) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 [Docker 中国官方镜像加速][Docker中国官方镜像加速] ,[加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台]速度还是很快的\n\n<!--more-->\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg)\n\n## 何时同步\n\n使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 [https://github.com/anjia0532/gcr.io_mirror][] , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可\n\n## 如何使用\n\n将 `gcr.io/google-containers` 替换为 `anjia0532` 即可.\n\n## 缺少镜像\n\n如果本项目中缺少 `gcr.io` 的镜像,[请提issues][]\n\n\n\n[gcr.io]: https://cloud.google.com/container-registry/\n[Docker中国官方镜像加速]: https://www.docker-cn.com/registry-mirror\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[https://github.com/anjia0532/gcr.io_mirror]: https://github.com/anjia0532/gcr.io_mirror\n[请提issues]: https://github.com/anjia0532/gcr.io_mirror/issues/new\n","slug":"gcr-io-image-mirror","published":1,"updated":"2017-11-15T06:24:05.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5melz00065gdo410l0zfb","content":"<p>google镜像库Google Container Registry(<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"noopener\">gcr.io</a>) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 <a href=\"https://www.docker-cn.com/registry-mirror\" target=\"_blank\" rel=\"noopener\">Docker 中国官方镜像加速</a> ,<a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a>速度还是很快的</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg\" alt=\"\"></p>\n<h2 id=\"何时同步\"><a href=\"#何时同步\" class=\"headerlink\" title=\"何时同步\"></a>何时同步</h2><p>使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 <a href=\"https://github.com/anjia0532/gcr.io_mirror\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/gcr.io_mirror</a> , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>将 <code>gcr.io/google-containers</code> 替换为 <code>anjia0532</code> 即可.</p>\n<h2 id=\"缺少镜像\"><a href=\"#缺少镜像\" class=\"headerlink\" title=\"缺少镜像\"></a>缺少镜像</h2><p>如果本项目中缺少 <code>gcr.io</code> 的镜像,<a href=\"https://github.com/anjia0532/gcr.io_mirror/issues/new\" target=\"_blank\" rel=\"noopener\">请提issues</a></p>\n","site":{"data":{}},"excerpt":"<p>google镜像库Google Container Registry(<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"noopener\">gcr.io</a>) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 <a href=\"https://www.docker-cn.com/registry-mirror\" target=\"_blank\" rel=\"noopener\">Docker 中国官方镜像加速</a> ,<a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a>速度还是很快的</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg\" alt=\"\"></p>\n<h2 id=\"何时同步\"><a href=\"#何时同步\" class=\"headerlink\" title=\"何时同步\"></a>何时同步</h2><p>使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 <a href=\"https://github.com/anjia0532/gcr.io_mirror\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/gcr.io_mirror</a> , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>将 <code>gcr.io/google-containers</code> 替换为 <code>anjia0532</code> 即可.</p>\n<h2 id=\"缺少镜像\"><a href=\"#缺少镜像\" class=\"headerlink\" title=\"缺少镜像\"></a>缺少镜像</h2><p>如果本项目中缺少 <code>gcr.io</code> 的镜像,<a href=\"https://github.com/anjia0532/gcr.io_mirror/issues/new\" target=\"_blank\" rel=\"noopener\">请提issues</a></p>"},{"title":"gitlab迁移到docker并升级大版本到10.1.1和汉化","date":"2017-11-07T02:38:37.000Z","_content":"\n本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式\n\n<!--more-->\n\n## gitlab备份\n\n### 查看现有版本\n```bash\nsudo gitlab-rake gitlab:env:info\n\n...\nGitLab information\nVersion:    9.2.5\n...\n```\n\n### 备份\n在原服务器运行\n```\nsudo gitlab-rake gitlab:backup:create RAILS_ENV=production\n\nsudo sh -c 'umask 0077; tar -cf /var/opt/gitlab/backups/$(date \"+etc-gitlab-%s_%Y_%m_%d.tar\") -C / etc/gitlab'\n```\n\n通过`sudo ls -lah /var/opt/gitlab/backups | grep $(date \"+%Y_%m_%d\" )` 查看\n\n```\n-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar\n-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar\n```\n\n### 移动到目标服务器\n\n使用`scp`将备份文件复制到目标主机\n\n`username`是用户名\n`ip`是来源主机ip\n\n登陆目标主机，\n\n```bash\nsudo mkdir -p /data/gitlab/data/backups\n\nscp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar\nscp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/\n\n# 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传\n```\n\n## gitlab恢复\n\n### docker-compose\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'gitlab/gitlab-ce:x.x.x-ce.0' # 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n`docker-compose up -d`\n\n### 恢复数据\n\n```bash\ndocker exec -it gitlab_gitlab_1 /bin/bash\n\ngitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 # 1510024070_gitlab_backup.tar 的前段\ntar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /\n\n```\n\n访问以下http://ip/如果正常，则执行`docker-compose down`\n\n## gitlab升级和汉化\n\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'anjia0532/gitlab-ce-zh:10.1.1-ce.0' # 汉化的10.1.1版本\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n参考连接:\n\n- [gitlab服务器迁移--深山鬼怪][]\n\n- [Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 -- baowei][GitlabCe8.9升级/迁移到gitlabCe9.3.4--]\n\n- [Backups -- gitlab-ce-doc][Backups--Gitlab-ce-doc]\n\n博客 [https://anjia.ml/2017/11/07/gitlab-upgrade/][blog]\n掘金 [https://juejin.im/post/5a0170a9f265da430702aea5][juejin]\n简书 [http://www.jianshu.com/p/3ac4bd8372e0][jianshu]\n\n[blog]: https://anjia.ml/2017/11/07/gitlab-upgrade/\n[juejin]: https://juejin.im/post/5a0170a9f265da430702aea5\n[jianshu]: http://www.jianshu.com/p/3ac4bd8372e0\n[gitlab服务器迁移--深山鬼怪]: http://www.cnblogs.com/wenwei-blog/p/6362829.html\n[GitlabCe8.9升级/迁移到gitlabCe9.3.4--]: http://www.jianshu.com/p/79447d5bf99e\n[Backups--Gitlab-ce-doc]: https://docs.gitlab.com/omnibus/settings/backups.html\n","source":"_posts/gitlab-upgrade.md","raw":"---\ntitle: gitlab迁移到docker并升级大版本到10.1.1和汉化\ndate: 2017-11-07 10:38:37\ntags: [gitlab,docker,docker-compose]\n---\n\n本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式\n\n<!--more-->\n\n## gitlab备份\n\n### 查看现有版本\n```bash\nsudo gitlab-rake gitlab:env:info\n\n...\nGitLab information\nVersion:    9.2.5\n...\n```\n\n### 备份\n在原服务器运行\n```\nsudo gitlab-rake gitlab:backup:create RAILS_ENV=production\n\nsudo sh -c 'umask 0077; tar -cf /var/opt/gitlab/backups/$(date \"+etc-gitlab-%s_%Y_%m_%d.tar\") -C / etc/gitlab'\n```\n\n通过`sudo ls -lah /var/opt/gitlab/backups | grep $(date \"+%Y_%m_%d\" )` 查看\n\n```\n-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar\n-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar\n```\n\n### 移动到目标服务器\n\n使用`scp`将备份文件复制到目标主机\n\n`username`是用户名\n`ip`是来源主机ip\n\n登陆目标主机，\n\n```bash\nsudo mkdir -p /data/gitlab/data/backups\n\nscp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar\nscp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/\n\n# 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传\n```\n\n## gitlab恢复\n\n### docker-compose\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'gitlab/gitlab-ce:x.x.x-ce.0' # 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n`docker-compose up -d`\n\n### 恢复数据\n\n```bash\ndocker exec -it gitlab_gitlab_1 /bin/bash\n\ngitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 # 1510024070_gitlab_backup.tar 的前段\ntar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /\n\n```\n\n访问以下http://ip/如果正常，则执行`docker-compose down`\n\n## gitlab升级和汉化\n\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'anjia0532/gitlab-ce-zh:10.1.1-ce.0' # 汉化的10.1.1版本\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n参考连接:\n\n- [gitlab服务器迁移--深山鬼怪][]\n\n- [Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 -- baowei][GitlabCe8.9升级/迁移到gitlabCe9.3.4--]\n\n- [Backups -- gitlab-ce-doc][Backups--Gitlab-ce-doc]\n\n博客 [https://anjia.ml/2017/11/07/gitlab-upgrade/][blog]\n掘金 [https://juejin.im/post/5a0170a9f265da430702aea5][juejin]\n简书 [http://www.jianshu.com/p/3ac4bd8372e0][jianshu]\n\n[blog]: https://anjia.ml/2017/11/07/gitlab-upgrade/\n[juejin]: https://juejin.im/post/5a0170a9f265da430702aea5\n[jianshu]: http://www.jianshu.com/p/3ac4bd8372e0\n[gitlab服务器迁移--深山鬼怪]: http://www.cnblogs.com/wenwei-blog/p/6362829.html\n[GitlabCe8.9升级/迁移到gitlabCe9.3.4--]: http://www.jianshu.com/p/79447d5bf99e\n[Backups--Gitlab-ce-doc]: https://docs.gitlab.com/omnibus/settings/backups.html\n","slug":"gitlab-upgrade","published":1,"updated":"2017-11-08T02:50:00.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mem400085gdog9acbwc3","content":"<p>本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式</p>\n<a id=\"more\"></a>\n<h2 id=\"gitlab备份\"><a href=\"#gitlab备份\" class=\"headerlink\" title=\"gitlab备份\"></a>gitlab备份</h2><h3 id=\"查看现有版本\"><a href=\"#查看现有版本\" class=\"headerlink\" title=\"查看现有版本\"></a>查看现有版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:env:info</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">GitLab information</span><br><span class=\"line\">Version:    9.2.5</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>在原服务器运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sh -c &apos;umask 0077; tar -cf /var/opt/gitlab/backups/$(date &quot;+etc-gitlab-%s_%Y_%m_%d.tar&quot;) -C / etc/gitlab&apos;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>sudo ls -lah /var/opt/gitlab/backups | grep $(date &quot;+%Y_%m_%d&quot; )</code> 查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar</span><br><span class=\"line\">-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动到目标服务器\"><a href=\"#移动到目标服务器\" class=\"headerlink\" title=\"移动到目标服务器\"></a>移动到目标服务器</h3><p>使用<code>scp</code>将备份文件复制到目标主机</p>\n<p><code>username</code>是用户名<br><code>ip</code>是来源主机ip</p>\n<p>登陆目标主机，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /data/gitlab/data/backups</span><br><span class=\"line\"></span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar</span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gitlab恢复\"><a href=\"#gitlab恢复\" class=\"headerlink\" title=\"gitlab恢复\"></a>gitlab恢复</h2><h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'gitlab/gitlab-ce:x.x.x-ce.0'</span> <span class=\"comment\"># 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p><code>docker-compose up -d</code></p>\n<h3 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it gitlab_gitlab_1 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 <span class=\"comment\"># 1510024070_gitlab_backup.tar 的前段</span></span><br><span class=\"line\">tar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /</span><br></pre></td></tr></table></figure>\n<p>访问以下<a href=\"http://ip/如果正常，则执行`docker-compose\" target=\"_blank\" rel=\"noopener\">http://ip/如果正常，则执行`docker-compose</a> down`</p>\n<h2 id=\"gitlab升级和汉化\"><a href=\"#gitlab升级和汉化\" class=\"headerlink\" title=\"gitlab升级和汉化\"></a>gitlab升级和汉化</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'anjia0532/gitlab-ce-zh:10.1.1-ce.0'</span> <span class=\"comment\"># 汉化的10.1.1版本</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p>参考连接:</p>\n<ul>\n<li><p><a href=\"http://www.cnblogs.com/wenwei-blog/p/6362829.html\" target=\"_blank\" rel=\"noopener\">gitlab服务器迁移–深山鬼怪</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/79447d5bf99e\" target=\"_blank\" rel=\"noopener\">Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 – baowei</a></p>\n</li>\n<li><p><a href=\"https://docs.gitlab.com/omnibus/settings/backups.html\" target=\"_blank\" rel=\"noopener\">Backups – gitlab-ce-doc</a></p>\n</li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/11/07/gitlab-upgrade/\">https://anjia.ml/2017/11/07/gitlab-upgrade/</a><br>掘金 <a href=\"https://juejin.im/post/5a0170a9f265da430702aea5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a0170a9f265da430702aea5</a><br>简书 <a href=\"http://www.jianshu.com/p/3ac4bd8372e0\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ac4bd8372e0</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式</p>","more":"<h2 id=\"gitlab备份\"><a href=\"#gitlab备份\" class=\"headerlink\" title=\"gitlab备份\"></a>gitlab备份</h2><h3 id=\"查看现有版本\"><a href=\"#查看现有版本\" class=\"headerlink\" title=\"查看现有版本\"></a>查看现有版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:env:info</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">GitLab information</span><br><span class=\"line\">Version:    9.2.5</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>在原服务器运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sh -c &apos;umask 0077; tar -cf /var/opt/gitlab/backups/$(date &quot;+etc-gitlab-%s_%Y_%m_%d.tar&quot;) -C / etc/gitlab&apos;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>sudo ls -lah /var/opt/gitlab/backups | grep $(date &quot;+%Y_%m_%d&quot; )</code> 查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar</span><br><span class=\"line\">-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动到目标服务器\"><a href=\"#移动到目标服务器\" class=\"headerlink\" title=\"移动到目标服务器\"></a>移动到目标服务器</h3><p>使用<code>scp</code>将备份文件复制到目标主机</p>\n<p><code>username</code>是用户名<br><code>ip</code>是来源主机ip</p>\n<p>登陆目标主机，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /data/gitlab/data/backups</span><br><span class=\"line\"></span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar</span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gitlab恢复\"><a href=\"#gitlab恢复\" class=\"headerlink\" title=\"gitlab恢复\"></a>gitlab恢复</h2><h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'gitlab/gitlab-ce:x.x.x-ce.0'</span> <span class=\"comment\"># 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p><code>docker-compose up -d</code></p>\n<h3 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it gitlab_gitlab_1 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 <span class=\"comment\"># 1510024070_gitlab_backup.tar 的前段</span></span><br><span class=\"line\">tar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /</span><br></pre></td></tr></table></figure>\n<p>访问以下<a href=\"http://ip/如果正常，则执行`docker-compose\" target=\"_blank\" rel=\"noopener\">http://ip/如果正常，则执行`docker-compose</a> down`</p>\n<h2 id=\"gitlab升级和汉化\"><a href=\"#gitlab升级和汉化\" class=\"headerlink\" title=\"gitlab升级和汉化\"></a>gitlab升级和汉化</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'anjia0532/gitlab-ce-zh:10.1.1-ce.0'</span> <span class=\"comment\"># 汉化的10.1.1版本</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p>参考连接:</p>\n<ul>\n<li><p><a href=\"http://www.cnblogs.com/wenwei-blog/p/6362829.html\" target=\"_blank\" rel=\"noopener\">gitlab服务器迁移–深山鬼怪</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/79447d5bf99e\" target=\"_blank\" rel=\"noopener\">Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 – baowei</a></p>\n</li>\n<li><p><a href=\"https://docs.gitlab.com/omnibus/settings/backups.html\" target=\"_blank\" rel=\"noopener\">Backups – gitlab-ce-doc</a></p>\n</li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/11/07/gitlab-upgrade/\">https://anjia.ml/2017/11/07/gitlab-upgrade/</a><br>掘金 <a href=\"https://juejin.im/post/5a0170a9f265da430702aea5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a0170a9f265da430702aea5</a><br>简书 <a href=\"http://www.jianshu.com/p/3ac4bd8372e0\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ac4bd8372e0</a></p>"},{"title":"elasticsearch按照日期定时删除索引","date":"2017-04-06T06:10:47.000Z","_content":"\n使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。\n\n<!-- more -->\n\n### 使用官网_delete_by_query进行删除\n[官网文档--Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html)\n\n```bash\ncurl -u 用户名:密码  -H'Content-Type:application/json' -d'{\n    \"query\": {\n        \"range\": {\n            \"@timestamp\": {\n                \"lt\": \"now-7d\",\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"\n```\n\n**解释**\n\n`-u`是格式为`userName:password`，使用`Basic Auth`进行登录。如果`elasticsearch`没有使用类似`x-pack`进行安全登录，则不需要加`-u参数`\n\n`-H`是指定文档类型是json格式\n\n`-XPOST`是指定用`POST`方式请求\n\n`-d`是指定`body`内容\n\n```javascript\n{\n    \"query\": {\n        \"range\": { //范围\n            \"@timestamp\": {//时间字段\n                \"lt\": \"now-7d\",//lt是小于(<)，lte是小于等于(<=),gt是大于(>),gte是大于等于(>=),now-7d是当前时间减7天\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n```\n\n定时删除\n```bash\n$ crontab -e\n\n* 0 * * * /usr/bin/curl -u username:password  -H'Content-Type:application/json' -d'{\"query\":{\"range\":{\"@timestamp\":{\"lt\":\"now-7d\",\"format\":\"epoch_millis\"}}}}' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\" > /tmp/elk_clean.txt\n```\n\n每天0点删除超过7天的无效索引\n\n优点：\n\n- 不依赖第三方插件或者代码\n\n- 简单易理解\n\n- 不需要指定索引名称可用`*`通配符删除\n\n缺点：\n- 效率低\n\n### 使用sh脚本删除\n在stackoverflow看到一个帖子 [Removing old indices in elasticsearch#answer-39746705](http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705)\n```bash\n#!/bin/bash\nsearchIndex=logstash-monitor\nelastic_url=logging.core.k94.kvk.nl\nelastic_port=9200\n\ndate2stamp () {\n    date --utc --date \"$1\" +%s\n}\n\ndateDiff (){\n    case $1 in\n        -s)   sec=1;      shift;;\n        -m)   sec=60;     shift;;\n        -h)   sec=3600;   shift;;\n        -d)   sec=86400;  shift;;\n        *)    sec=86400;;\n    esac\n    dte1=$(date2stamp $1)\n    dte2=$(date2stamp $2)\n    diffSec=$((dte2-dte1))\n    if ((diffSec < 0)); then abs=-1; else abs=1; fi\n    echo $((diffSec/sec*abs))\n}\n\nfor index in $(curl -s \"${elastic_url}:${elastic_port}/_cat/indices?v\" |     grep -E \" ${searchIndex}-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\" | awk '{     print $3 }'); do\n  date=$(echo ${index: -10} | sed 's/\\./-/g')\n  cond=$(date +%Y-%m-%d)\n  diff=$(dateDiff -d $date $cond)\n  echo -n \"${index} (${diff})\"\n  if [ $diff -gt 1 ]; then\n    echo \" / DELETE\"\n    # curl -XDELETE \"${elastic_url}:${elastic_port}/${index}?pretty\"\n  else\n    echo \"\"\n  fi\ndone    \n```\n使用了 `_cat/indices`api。\n\n### 使用 curator\n\n支持windows[zip](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html),[msi](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html),和linux[apt](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html),[yum](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html)\n\n[Curator Reference](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html) [github-curator](https://github.com/elastic/curator)\n\n#### 安装\n[安装](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html)\n\n#### 配置\n\n参考 http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\n\n1.config文件\n\n```yaml\n---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    * 127.0.0.1\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth: username:password\n  timeout:\n  master_only: True\n\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  #blacklist: ['elasticsearch', 'urllib3']\n```\n\n2.action文件\n\n```yaml\n---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 7 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    * filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    * filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7\n      exclude:\n```\n\n这里是用`index-'%Y.%m.%d'`进行匹配，如果是按照索引创建日期来删除，`source: creation_date` 参见 https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\n\n3.运行\n\n```\ncurator --config /path/config_file.yml /path/action_file.yml\n```\n\n别忘了加定时任务`crontab -e`","source":"_posts/elasticsearch-delete-indices-by-date.md","raw":"---\ntitle: elasticsearch按照日期定时删除索引\ndate: 2017-04-06 14:10:47\ntags: [elk,elkstasck,curator]\ncategories: [elkstasck]\n---\n\n使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。\n\n<!-- more -->\n\n### 使用官网_delete_by_query进行删除\n[官网文档--Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html)\n\n```bash\ncurl -u 用户名:密码  -H'Content-Type:application/json' -d'{\n    \"query\": {\n        \"range\": {\n            \"@timestamp\": {\n                \"lt\": \"now-7d\",\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"\n```\n\n**解释**\n\n`-u`是格式为`userName:password`，使用`Basic Auth`进行登录。如果`elasticsearch`没有使用类似`x-pack`进行安全登录，则不需要加`-u参数`\n\n`-H`是指定文档类型是json格式\n\n`-XPOST`是指定用`POST`方式请求\n\n`-d`是指定`body`内容\n\n```javascript\n{\n    \"query\": {\n        \"range\": { //范围\n            \"@timestamp\": {//时间字段\n                \"lt\": \"now-7d\",//lt是小于(<)，lte是小于等于(<=),gt是大于(>),gte是大于等于(>=),now-7d是当前时间减7天\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n```\n\n定时删除\n```bash\n$ crontab -e\n\n* 0 * * * /usr/bin/curl -u username:password  -H'Content-Type:application/json' -d'{\"query\":{\"range\":{\"@timestamp\":{\"lt\":\"now-7d\",\"format\":\"epoch_millis\"}}}}' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\" > /tmp/elk_clean.txt\n```\n\n每天0点删除超过7天的无效索引\n\n优点：\n\n- 不依赖第三方插件或者代码\n\n- 简单易理解\n\n- 不需要指定索引名称可用`*`通配符删除\n\n缺点：\n- 效率低\n\n### 使用sh脚本删除\n在stackoverflow看到一个帖子 [Removing old indices in elasticsearch#answer-39746705](http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705)\n```bash\n#!/bin/bash\nsearchIndex=logstash-monitor\nelastic_url=logging.core.k94.kvk.nl\nelastic_port=9200\n\ndate2stamp () {\n    date --utc --date \"$1\" +%s\n}\n\ndateDiff (){\n    case $1 in\n        -s)   sec=1;      shift;;\n        -m)   sec=60;     shift;;\n        -h)   sec=3600;   shift;;\n        -d)   sec=86400;  shift;;\n        *)    sec=86400;;\n    esac\n    dte1=$(date2stamp $1)\n    dte2=$(date2stamp $2)\n    diffSec=$((dte2-dte1))\n    if ((diffSec < 0)); then abs=-1; else abs=1; fi\n    echo $((diffSec/sec*abs))\n}\n\nfor index in $(curl -s \"${elastic_url}:${elastic_port}/_cat/indices?v\" |     grep -E \" ${searchIndex}-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\" | awk '{     print $3 }'); do\n  date=$(echo ${index: -10} | sed 's/\\./-/g')\n  cond=$(date +%Y-%m-%d)\n  diff=$(dateDiff -d $date $cond)\n  echo -n \"${index} (${diff})\"\n  if [ $diff -gt 1 ]; then\n    echo \" / DELETE\"\n    # curl -XDELETE \"${elastic_url}:${elastic_port}/${index}?pretty\"\n  else\n    echo \"\"\n  fi\ndone    \n```\n使用了 `_cat/indices`api。\n\n### 使用 curator\n\n支持windows[zip](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html),[msi](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html),和linux[apt](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html),[yum](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html)\n\n[Curator Reference](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html) [github-curator](https://github.com/elastic/curator)\n\n#### 安装\n[安装](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html)\n\n#### 配置\n\n参考 http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\n\n1.config文件\n\n```yaml\n---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    * 127.0.0.1\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth: username:password\n  timeout:\n  master_only: True\n\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  #blacklist: ['elasticsearch', 'urllib3']\n```\n\n2.action文件\n\n```yaml\n---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 7 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    * filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    * filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7\n      exclude:\n```\n\n这里是用`index-'%Y.%m.%d'`进行匹配，如果是按照索引创建日期来删除，`source: creation_date` 参见 https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\n\n3.运行\n\n```\ncurator --config /path/config_file.yml /path/action_file.yml\n```\n\n别忘了加定时任务`crontab -e`","slug":"elasticsearch-delete-indices-by-date","published":1,"updated":"2017-04-06T06:13:37.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mem6000a5gdoepv948m8","content":"<p>使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。</p>\n<a id=\"more\"></a>\n<h3 id=\"使用官网-delete-by-query进行删除\"><a href=\"#使用官网-delete-by-query进行删除\" class=\"headerlink\" title=\"使用官网_delete_by_query进行删除\"></a>使用官网_delete_by_query进行删除</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html\" target=\"_blank\" rel=\"noopener\">官网文档–Delete By Query API</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -u 用户名:密码  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"query\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"range\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">            \"@timestamp\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">                \"lt\": \"now-7d\",</span></span><br><span class=\"line\"><span class=\"string\">                \"format\": \"epoch_millis\"</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>解释</strong></p>\n<p><code>-u</code>是格式为<code>userName:password</code>，使用<code>Basic Auth</code>进行登录。如果<code>elasticsearch</code>没有使用类似<code>x-pack</code>进行安全登录，则不需要加<code>-u参数</code></p>\n<p><code>-H</code>是指定文档类型是json格式</p>\n<p><code>-XPOST</code>是指定用<code>POST</code>方式请求</p>\n<p><code>-d</code>是指定<code>body</code>内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"range\"</span>: &#123; <span class=\"comment\">//范围</span></span><br><span class=\"line\">            <span class=\"string\">\"@timestamp\"</span>: &#123;<span class=\"comment\">//时间字段</span></span><br><span class=\"line\">                <span class=\"string\">\"lt\"</span>: <span class=\"string\">\"now-7d\"</span>,<span class=\"comment\">//lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</span></span><br><span class=\"line\">                <span class=\"string\">\"format\"</span>: <span class=\"string\">\"epoch_millis\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时删除<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">* 0 * * * /usr/bin/curl -u username:password  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;\"query\":&#123;\"range\":&#123;\"@timestamp\":&#123;\"lt\":\"now-7d\",\"format\":\"epoch_millis\"&#125;&#125;&#125;&#125;'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span> &gt; /tmp/elk_clean.txt</span><br></pre></td></tr></table></figure></p>\n<p>每天0点删除超过7天的无效索引</p>\n<p>优点：</p>\n<ul>\n<li><p>不依赖第三方插件或者代码</p>\n</li>\n<li><p>简单易理解</p>\n</li>\n<li><p>不需要指定索引名称可用<code>*</code>通配符删除</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效率低</li>\n</ul>\n<h3 id=\"使用sh脚本删除\"><a href=\"#使用sh脚本删除\" class=\"headerlink\" title=\"使用sh脚本删除\"></a>使用sh脚本删除</h3><p>在stackoverflow看到一个帖子 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705\" target=\"_blank\" rel=\"noopener\">Removing old indices in elasticsearch#answer-39746705</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">searchIndex=logstash-monitor</span><br><span class=\"line\">elastic_url=logging.core.k94.kvk.nl</span><br><span class=\"line\">elastic_port=9200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">date2stamp</span></span> () &#123;</span><br><span class=\"line\">    date --utc --date <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> +%s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">dateDiff</span></span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        -s)   sec=1;      <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -m)   sec=60;     <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -h)   sec=3600;   <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -d)   sec=86400;  <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        *)    sec=86400;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    dte1=$(date2stamp <span class=\"variable\">$1</span>)</span><br><span class=\"line\">    dte2=$(date2stamp <span class=\"variable\">$2</span>)</span><br><span class=\"line\">    diffSec=$((dte2-dte1))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((diffSec &lt; 0)); <span class=\"keyword\">then</span> abs=-1; <span class=\"keyword\">else</span> abs=1; <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $((diffSec/sec*abs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> $(curl -s <span class=\"string\">\"<span class=\"variable\">$&#123;elastic_url&#125;</span>:<span class=\"variable\">$&#123;elastic_port&#125;</span>/_cat/indices?v\"</span> |     grep -E <span class=\"string\">\" <span class=\"variable\">$&#123;searchIndex&#125;</span>-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\"</span> | awk <span class=\"string\">'&#123;     print $3 &#125;'</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">  date=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;index: -10&#125;</span> | sed <span class=\"string\">'s/\\./-/g'</span>)</span><br><span class=\"line\">  cond=$(date +%Y-%m-%d)</span><br><span class=\"line\">  diff=$(dateDiff -d <span class=\"variable\">$date</span> <span class=\"variable\">$cond</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$&#123;index&#125;</span> (<span class=\"variable\">$&#123;diff&#125;</span>)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$diff</span> -gt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\" / DELETE\"</span></span><br><span class=\"line\">    <span class=\"comment\"># curl -XDELETE \"$&#123;elastic_url&#125;:$&#123;elastic_port&#125;/$&#123;index&#125;?pretty\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>使用了 <code>_cat/indices</code>api。</p>\n<h3 id=\"使用-curator\"><a href=\"#使用-curator\" class=\"headerlink\" title=\"使用 curator\"></a>使用 curator</h3><p>支持windows<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html\" target=\"_blank\" rel=\"noopener\">zip</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html\" target=\"_blank\" rel=\"noopener\">msi</a>,和linux<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html\" target=\"_blank\" rel=\"noopener\">apt</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html\" target=\"_blank\" rel=\"noopener\">yum</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html\" target=\"_blank\" rel=\"noopener\">Curator Reference</a> <a href=\"https://github.com/elastic/curator\" target=\"_blank\" rel=\"noopener\">github-curator</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html\" target=\"_blank\" rel=\"noopener\">安装</a></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>参考 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400</a></p>\n<p>1.config文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Remember, leave a key empty if there is no value.  None will be a string,</span></span><br><span class=\"line\"><span class=\"comment\"># not a Python \"NoneType\"</span></span><br><span class=\"line\"><span class=\"attr\">client:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">  url_prefix:</span></span><br><span class=\"line\"><span class=\"attr\">  use_ssl:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  certificate:</span></span><br><span class=\"line\"><span class=\"attr\">  client_cert:</span></span><br><span class=\"line\"><span class=\"attr\">  client_key:</span></span><br><span class=\"line\"><span class=\"attr\">  ssl_no_validate:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  http_auth:</span> <span class=\"attr\">username:password</span></span><br><span class=\"line\"><span class=\"attr\">  timeout:</span></span><br><span class=\"line\"><span class=\"attr\">  master_only:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\"><span class=\"attr\">  loglevel:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\"><span class=\"attr\">  logfile:</span></span><br><span class=\"line\"><span class=\"attr\">  logformat:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"comment\">#blacklist: ['elasticsearch', 'urllib3']</span></span><br></pre></td></tr></table></figure>\n<p>2.action文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">delete_indices</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">Delete</span> <span class=\"string\">indices</span> <span class=\"string\">older</span> <span class=\"string\">than</span> <span class=\"number\">7</span> <span class=\"string\">days</span> <span class=\"string\">(based</span> <span class=\"string\">on</span> <span class=\"string\">index</span> <span class=\"string\">name),</span> <span class=\"string\">for</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\">      <span class=\"string\">prefixed</span> <span class=\"string\">indices.</span> <span class=\"string\">Ignore</span> <span class=\"string\">the</span> <span class=\"string\">error</span> <span class=\"string\">if</span> <span class=\"string\">the</span> <span class=\"string\">filter</span> <span class=\"string\">does</span> <span class=\"string\">not</span> <span class=\"string\">result</span> <span class=\"string\">in</span> <span class=\"string\">an</span></span><br><span class=\"line\">      <span class=\"string\">actionable</span> <span class=\"string\">list</span> <span class=\"string\">of</span> <span class=\"string\">indices</span> <span class=\"string\">(ignore_empty_list)</span> <span class=\"string\">and</span> <span class=\"string\">exit</span> <span class=\"string\">cleanly.</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      ignore_empty_list:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">name</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br></pre></td></tr></table></figure>\n<p>这里是用<code>index-&#39;%Y.%m.%d&#39;</code>进行匹配，如果是按照索引创建日期来删除，<code>source: creation_date</code> 参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date</a></p>\n<p>3.运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curator --config /path/config_file.yml /path/action_file.yml</span><br></pre></td></tr></table></figure>\n<p>别忘了加定时任务<code>crontab -e</code></p>\n","site":{"data":{}},"excerpt":"<p>使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。</p>","more":"<h3 id=\"使用官网-delete-by-query进行删除\"><a href=\"#使用官网-delete-by-query进行删除\" class=\"headerlink\" title=\"使用官网_delete_by_query进行删除\"></a>使用官网_delete_by_query进行删除</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html\" target=\"_blank\" rel=\"noopener\">官网文档–Delete By Query API</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -u 用户名:密码  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"query\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"range\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">            \"@timestamp\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">                \"lt\": \"now-7d\",</span></span><br><span class=\"line\"><span class=\"string\">                \"format\": \"epoch_millis\"</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>解释</strong></p>\n<p><code>-u</code>是格式为<code>userName:password</code>，使用<code>Basic Auth</code>进行登录。如果<code>elasticsearch</code>没有使用类似<code>x-pack</code>进行安全登录，则不需要加<code>-u参数</code></p>\n<p><code>-H</code>是指定文档类型是json格式</p>\n<p><code>-XPOST</code>是指定用<code>POST</code>方式请求</p>\n<p><code>-d</code>是指定<code>body</code>内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"range\"</span>: &#123; <span class=\"comment\">//范围</span></span><br><span class=\"line\">            <span class=\"string\">\"@timestamp\"</span>: &#123;<span class=\"comment\">//时间字段</span></span><br><span class=\"line\">                <span class=\"string\">\"lt\"</span>: <span class=\"string\">\"now-7d\"</span>,<span class=\"comment\">//lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</span></span><br><span class=\"line\">                <span class=\"string\">\"format\"</span>: <span class=\"string\">\"epoch_millis\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时删除<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">* 0 * * * /usr/bin/curl -u username:password  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;\"query\":&#123;\"range\":&#123;\"@timestamp\":&#123;\"lt\":\"now-7d\",\"format\":\"epoch_millis\"&#125;&#125;&#125;&#125;'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span> &gt; /tmp/elk_clean.txt</span><br></pre></td></tr></table></figure></p>\n<p>每天0点删除超过7天的无效索引</p>\n<p>优点：</p>\n<ul>\n<li><p>不依赖第三方插件或者代码</p>\n</li>\n<li><p>简单易理解</p>\n</li>\n<li><p>不需要指定索引名称可用<code>*</code>通配符删除</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效率低</li>\n</ul>\n<h3 id=\"使用sh脚本删除\"><a href=\"#使用sh脚本删除\" class=\"headerlink\" title=\"使用sh脚本删除\"></a>使用sh脚本删除</h3><p>在stackoverflow看到一个帖子 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705\" target=\"_blank\" rel=\"noopener\">Removing old indices in elasticsearch#answer-39746705</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">searchIndex=logstash-monitor</span><br><span class=\"line\">elastic_url=logging.core.k94.kvk.nl</span><br><span class=\"line\">elastic_port=9200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">date2stamp</span></span> () &#123;</span><br><span class=\"line\">    date --utc --date <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> +%s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">dateDiff</span></span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        -s)   sec=1;      <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -m)   sec=60;     <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -h)   sec=3600;   <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -d)   sec=86400;  <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        *)    sec=86400;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    dte1=$(date2stamp <span class=\"variable\">$1</span>)</span><br><span class=\"line\">    dte2=$(date2stamp <span class=\"variable\">$2</span>)</span><br><span class=\"line\">    diffSec=$((dte2-dte1))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((diffSec &lt; 0)); <span class=\"keyword\">then</span> abs=-1; <span class=\"keyword\">else</span> abs=1; <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $((diffSec/sec*abs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> $(curl -s <span class=\"string\">\"<span class=\"variable\">$&#123;elastic_url&#125;</span>:<span class=\"variable\">$&#123;elastic_port&#125;</span>/_cat/indices?v\"</span> |     grep -E <span class=\"string\">\" <span class=\"variable\">$&#123;searchIndex&#125;</span>-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\"</span> | awk <span class=\"string\">'&#123;     print $3 &#125;'</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">  date=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;index: -10&#125;</span> | sed <span class=\"string\">'s/\\./-/g'</span>)</span><br><span class=\"line\">  cond=$(date +%Y-%m-%d)</span><br><span class=\"line\">  diff=$(dateDiff -d <span class=\"variable\">$date</span> <span class=\"variable\">$cond</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$&#123;index&#125;</span> (<span class=\"variable\">$&#123;diff&#125;</span>)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$diff</span> -gt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\" / DELETE\"</span></span><br><span class=\"line\">    <span class=\"comment\"># curl -XDELETE \"$&#123;elastic_url&#125;:$&#123;elastic_port&#125;/$&#123;index&#125;?pretty\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>使用了 <code>_cat/indices</code>api。</p>\n<h3 id=\"使用-curator\"><a href=\"#使用-curator\" class=\"headerlink\" title=\"使用 curator\"></a>使用 curator</h3><p>支持windows<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html\" target=\"_blank\" rel=\"noopener\">zip</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html\" target=\"_blank\" rel=\"noopener\">msi</a>,和linux<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html\" target=\"_blank\" rel=\"noopener\">apt</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html\" target=\"_blank\" rel=\"noopener\">yum</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html\" target=\"_blank\" rel=\"noopener\">Curator Reference</a> <a href=\"https://github.com/elastic/curator\" target=\"_blank\" rel=\"noopener\">github-curator</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html\" target=\"_blank\" rel=\"noopener\">安装</a></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>参考 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400</a></p>\n<p>1.config文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Remember, leave a key empty if there is no value.  None will be a string,</span></span><br><span class=\"line\"><span class=\"comment\"># not a Python \"NoneType\"</span></span><br><span class=\"line\"><span class=\"attr\">client:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">  url_prefix:</span></span><br><span class=\"line\"><span class=\"attr\">  use_ssl:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  certificate:</span></span><br><span class=\"line\"><span class=\"attr\">  client_cert:</span></span><br><span class=\"line\"><span class=\"attr\">  client_key:</span></span><br><span class=\"line\"><span class=\"attr\">  ssl_no_validate:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  http_auth:</span> <span class=\"attr\">username:password</span></span><br><span class=\"line\"><span class=\"attr\">  timeout:</span></span><br><span class=\"line\"><span class=\"attr\">  master_only:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\"><span class=\"attr\">  loglevel:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\"><span class=\"attr\">  logfile:</span></span><br><span class=\"line\"><span class=\"attr\">  logformat:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"comment\">#blacklist: ['elasticsearch', 'urllib3']</span></span><br></pre></td></tr></table></figure>\n<p>2.action文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">delete_indices</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">Delete</span> <span class=\"string\">indices</span> <span class=\"string\">older</span> <span class=\"string\">than</span> <span class=\"number\">7</span> <span class=\"string\">days</span> <span class=\"string\">(based</span> <span class=\"string\">on</span> <span class=\"string\">index</span> <span class=\"string\">name),</span> <span class=\"string\">for</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\">      <span class=\"string\">prefixed</span> <span class=\"string\">indices.</span> <span class=\"string\">Ignore</span> <span class=\"string\">the</span> <span class=\"string\">error</span> <span class=\"string\">if</span> <span class=\"string\">the</span> <span class=\"string\">filter</span> <span class=\"string\">does</span> <span class=\"string\">not</span> <span class=\"string\">result</span> <span class=\"string\">in</span> <span class=\"string\">an</span></span><br><span class=\"line\">      <span class=\"string\">actionable</span> <span class=\"string\">list</span> <span class=\"string\">of</span> <span class=\"string\">indices</span> <span class=\"string\">(ignore_empty_list)</span> <span class=\"string\">and</span> <span class=\"string\">exit</span> <span class=\"string\">cleanly.</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      ignore_empty_list:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">name</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br></pre></td></tr></table></figure>\n<p>这里是用<code>index-&#39;%Y.%m.%d&#39;</code>进行匹配，如果是按照索引创建日期来删除，<code>source: creation_date</code> 参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date</a></p>\n<p>3.运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curator --config /path/config_file.yml /path/action_file.yml</span><br></pre></td></tr></table></figure>\n<p>别忘了加定时任务<code>crontab -e</code></p>"},{"title":"ElastAlert 基于Elasticsearch的监控告警","date":"2017-02-14T00:27:47.000Z","_content":"\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","source":"_posts/elasticsearch-elastalert.md","raw":"---\ntitle: ElastAlert 基于Elasticsearch的监控告警\ndate: 2017-02-14 08:27:47\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","slug":"elasticsearch-elastalert","published":1,"updated":"2017-02-14T06:32:25.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mem7000c5gdols6g612o","content":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"noopener\">https://github.com/Yelp/elastalert</a></p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\" target=\"_blank\" rel=\"noopener\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\"></span><br><span class=\"line\">Python 2.7.12+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></span><br><span class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></span><br></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</span><br><span class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</span><br><span class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</span><br><span class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</span><br><span class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\" target=\"_blank\" rel=\"noopener\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ elastalert-create-index</span><br><span class=\"line\">New index name (Default elastalert_status)</span><br><span class=\"line\">Name of existing index to copy (Default None)</span><br><span class=\"line\">New index elastalert_status created</span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\" target=\"_blank\" rel=\"noopener\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi ~/elastalert/config.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></span><br><span class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></span><br><span class=\"line\"><span class=\"attr\">rules_folder:</span> <span class=\"string\">example_rules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></span><br><span class=\"line\"><span class=\"attr\">run_every:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></span><br><span class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></span><br><span class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></span><br><span class=\"line\"><span class=\"comment\">#verify_certs: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></span><br><span class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></span><br><span class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></span><br><span class=\"line\"><span class=\"comment\"># for details</span></span><br><span class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></span><br><span class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></span><br><span class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></span><br><span class=\"line\"><span class=\"attr\">writeback_index:</span> <span class=\"string\">elastalert_status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></span><br><span class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></span><br><span class=\"line\"><span class=\"attr\">alert_time_limit:</span></span><br><span class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></span><br><span class=\"line\"><span class=\"attr\">user:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\" target=\"_blank\" rel=\"noopener\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间刻度</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\">    <span class=\"comment\">#1分钟</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- query:</span></span><br><span class=\"line\"><span class=\"attr\">    query_string:</span></span><br><span class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></span><br><span class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></span><br><span class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></span><br><span class=\"line\"><span class=\"attr\">smtp_host:</span> <span class=\"string\">smtp.163.com</span></span><br><span class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></span><br><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\"><span class=\"attr\">smtp_auth_file:</span> <span class=\"string\">/home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></span><br><span class=\"line\"><span class=\"attr\">email_reply_to:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></span><br><span class=\"line\"><span class=\"attr\">from_addr:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (required, email specific)</span></span><br><span class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></span><br><span class=\"line\"><span class=\"attr\">email:</span></span><br><span class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\" target=\"_blank\" rel=\"noopener\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"noopener\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</span><br><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  -d <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</span></span><br><span class=\"line\"><span class=\"string\">\"field\": \"value\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</span><br><span class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</span><br><span class=\"line\">INFO:elastalert:Example rule</span><br><span class=\"line\"></span><br><span class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</span><br><span class=\"line\"></span><br><span class=\"line\">@timestamp: 2017-02-14T03:10:46Z</span><br><span class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</span><br><span class=\"line\">_index: logstash-2017.02.14</span><br><span class=\"line\">_type: <span class=\"built_in\">test</span></span><br><span class=\"line\">field: value</span><br><span class=\"line\">num_hits: 2</span><br><span class=\"line\">num_matches: 1</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>\n","site":{"data":{}},"excerpt":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"noopener\">https://github.com/Yelp/elastalert</a></p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\" target=\"_blank\" rel=\"noopener\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\"></span><br><span class=\"line\">Python 2.7.12+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></span><br><span class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></span><br></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</span><br><span class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</span><br><span class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</span><br><span class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</span><br><span class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\" target=\"_blank\" rel=\"noopener\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ elastalert-create-index</span><br><span class=\"line\">New index name (Default elastalert_status)</span><br><span class=\"line\">Name of existing index to copy (Default None)</span><br><span class=\"line\">New index elastalert_status created</span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\" target=\"_blank\" rel=\"noopener\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi ~/elastalert/config.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></span><br><span class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></span><br><span class=\"line\"><span class=\"attr\">rules_folder:</span> <span class=\"string\">example_rules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></span><br><span class=\"line\"><span class=\"attr\">run_every:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></span><br><span class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></span><br><span class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></span><br><span class=\"line\"><span class=\"comment\">#verify_certs: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></span><br><span class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></span><br><span class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></span><br><span class=\"line\"><span class=\"comment\"># for details</span></span><br><span class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></span><br><span class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></span><br><span class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></span><br><span class=\"line\"><span class=\"attr\">writeback_index:</span> <span class=\"string\">elastalert_status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></span><br><span class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></span><br><span class=\"line\"><span class=\"attr\">alert_time_limit:</span></span><br><span class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></span><br><span class=\"line\"><span class=\"attr\">user:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\" target=\"_blank\" rel=\"noopener\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间刻度</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\">    <span class=\"comment\">#1分钟</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- query:</span></span><br><span class=\"line\"><span class=\"attr\">    query_string:</span></span><br><span class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></span><br><span class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></span><br><span class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></span><br><span class=\"line\"><span class=\"attr\">smtp_host:</span> <span class=\"string\">smtp.163.com</span></span><br><span class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></span><br><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\"><span class=\"attr\">smtp_auth_file:</span> <span class=\"string\">/home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></span><br><span class=\"line\"><span class=\"attr\">email_reply_to:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></span><br><span class=\"line\"><span class=\"attr\">from_addr:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (required, email specific)</span></span><br><span class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></span><br><span class=\"line\"><span class=\"attr\">email:</span></span><br><span class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\" target=\"_blank\" rel=\"noopener\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"noopener\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</span><br><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  -d <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</span></span><br><span class=\"line\"><span class=\"string\">\"field\": \"value\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</span><br><span class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</span><br><span class=\"line\">INFO:elastalert:Example rule</span><br><span class=\"line\"></span><br><span class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</span><br><span class=\"line\"></span><br><span class=\"line\">@timestamp: 2017-02-14T03:10:46Z</span><br><span class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</span><br><span class=\"line\">_index: logstash-2017.02.14</span><br><span class=\"line\">_type: <span class=\"built_in\">test</span></span><br><span class=\"line\">field: value</span><br><span class=\"line\">num_hits: 2</span><br><span class=\"line\">num_matches: 1</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>"},{"title":"ELK Stack之Beats简介","date":"2017-03-02T10:55:39.000Z","_content":"\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","source":"_posts/elk-stack-beats.md","raw":"---\ntitle: ELK Stack之Beats简介\ndate: 2017-03-02 18:55:39\ntags: [elk,elkstack,beats]\ncategories: [elkstasck]\n---\n\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","slug":"elk-stack-beats","published":1,"updated":"2017-03-02T10:57:41.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mema000e5gdofco9cgjv","content":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br><a id=\"more\"></a></p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n","site":{"data":{}},"excerpt":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br>","more":"</p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>"},{"title":"ElkStack之Heartbeat(心跳检测)","date":"2017-03-02T17:20:16.000Z","_content":"\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用->不可用/不可用->可用)时获取到通知即可\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","source":"_posts/heartbeat.md","raw":"---\ntitle: ElkStack之Heartbeat(心跳检测)\ndate: 2017-03-03 01:20:16\ntags: [elk,elkstasck,Heartbeat]\ncategories: [elkstasck]\n---\n\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用->不可用/不可用->可用)时获取到通知即可\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","slug":"heartbeat","published":1,"updated":"2017-03-03T05:58:24.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5memh000h5gdo19pxvn2l","content":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</span><br><span class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</span><br></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</span><br><span class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br><span class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></span><br><span class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\" target=\"_blank\" rel=\"noopener\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">icmp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost:7\"]</span>  <span class=\"comment\"># default TCP Echo Protocol</span></span><br><span class=\"line\"><span class=\"attr\">  mode:</span> <span class=\"string\">any</span>                     <span class=\"comment\">#3</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://localhost:80/service/status\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\" target=\"_blank\" rel=\"noopener\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\" target=\"_blank\" rel=\"noopener\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\">  <span class=\"string\">watch.poll_file:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">&#123;path.config&#125;/monitors/dynamic.json</span></span><br><span class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span><span class=\"string\">s</span></span><br></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</span><br><span class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[7]</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxy_url:</span> <span class=\"attr\">socks5://user:password@socks5-proxy:2233</span></span><br></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">  ssl:</span></span><br><span class=\"line\"><span class=\"attr\">    certificate_authorities:</span> <span class=\"string\">['/etc/ca.crt']</span></span><br><span class=\"line\"><span class=\"attr\">    supported_protocols:</span> <span class=\"string\">[\"TLSv1.0\",</span> <span class=\"string\">\"TLSv1.1\"</span><span class=\"string\">,</span> <span class=\"string\">\"TLSv1.2\"</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.request.method:</span> <span class=\"string\">HEAD</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"https://myhost:80\"]</span></span><br><span class=\"line\"><span class=\"string\">check.request:</span></span><br><span class=\"line\"><span class=\"attr\">  method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\"><span class=\"attr\">  headers:</span></span><br><span class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></span><br><span class=\"line\"><span class=\"string\">check.response:</span></span><br><span class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></span><br></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">output.elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"192.168.1.42:9200\"]</span></span><br><span class=\"line\">  <span class=\"string\">template.name:</span> <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></span><br><span class=\"line\">  <span class=\"string\">template.path:</span> <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></span><br></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\" target=\"_blank\" rel=\"noopener\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\" target=\"_blank\" rel=\"noopener\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/ start</span><br></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/heartbeat start</span><br></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ./heartbeat -e -c heartbeat.yml -d <span class=\"string\">\"publish\"</span></span><br></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start heartbeat</span><br></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\" target=\"_blank\" rel=\"noopener\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\" target=\"_blank\" rel=\"noopener\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\" target=\"_blank\" rel=\"noopener\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\" target=\"_blank\" rel=\"noopener\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\" target=\"_blank\" rel=\"noopener\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\" target=\"_blank\" rel=\"noopener\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用-&gt;不可用/不可用-&gt;可用)时获取到通知即可</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></span><br><span class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch host</span></span><br><span class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch port</span></span><br><span class=\"line\"><span class=\"comment\"># es_port: 14900</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">heartbeat-monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Type of alert.</span></span><br><span class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">change</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">heartbeat-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The field to look for changes in</span></span><br><span class=\"line\"><span class=\"attr\">compare_key:</span> <span class=\"string\">up</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></span><br><span class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></span><br><span class=\"line\"><span class=\"attr\">query_key:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"comment\">#- \"email\"</span></span><br><span class=\"line\"><span class=\"comment\">#- \"debug\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></span><br><span class=\"line\"><span class=\"comment\">#party_id: xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></span><br><span class=\"line\"><span class=\"comment\">#user_id: xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\" target=\"_blank\" rel=\"noopener\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</span><br><span class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</span><br></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</span><br><span class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br><span class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></span><br><span class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\" target=\"_blank\" rel=\"noopener\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">icmp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost:7\"]</span>  <span class=\"comment\"># default TCP Echo Protocol</span></span><br><span class=\"line\"><span class=\"attr\">  mode:</span> <span class=\"string\">any</span>                     <span class=\"comment\">#3</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://localhost:80/service/status\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\" target=\"_blank\" rel=\"noopener\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\" target=\"_blank\" rel=\"noopener\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\">  <span class=\"string\">watch.poll_file:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">&#123;path.config&#125;/monitors/dynamic.json</span></span><br><span class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span><span class=\"string\">s</span></span><br></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</span><br><span class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[7]</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxy_url:</span> <span class=\"attr\">socks5://user:password@socks5-proxy:2233</span></span><br></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">  ssl:</span></span><br><span class=\"line\"><span class=\"attr\">    certificate_authorities:</span> <span class=\"string\">['/etc/ca.crt']</span></span><br><span class=\"line\"><span class=\"attr\">    supported_protocols:</span> <span class=\"string\">[\"TLSv1.0\",</span> <span class=\"string\">\"TLSv1.1\"</span><span class=\"string\">,</span> <span class=\"string\">\"TLSv1.2\"</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.request.method:</span> <span class=\"string\">HEAD</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"https://myhost:80\"]</span></span><br><span class=\"line\"><span class=\"string\">check.request:</span></span><br><span class=\"line\"><span class=\"attr\">  method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\"><span class=\"attr\">  headers:</span></span><br><span class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></span><br><span class=\"line\"><span class=\"string\">check.response:</span></span><br><span class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></span><br></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">output.elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"192.168.1.42:9200\"]</span></span><br><span class=\"line\">  <span class=\"string\">template.name:</span> <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></span><br><span class=\"line\">  <span class=\"string\">template.path:</span> <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></span><br></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\" target=\"_blank\" rel=\"noopener\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\" target=\"_blank\" rel=\"noopener\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/ start</span><br></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/heartbeat start</span><br></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ./heartbeat -e -c heartbeat.yml -d <span class=\"string\">\"publish\"</span></span><br></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start heartbeat</span><br></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\" target=\"_blank\" rel=\"noopener\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\" target=\"_blank\" rel=\"noopener\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\" target=\"_blank\" rel=\"noopener\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\" target=\"_blank\" rel=\"noopener\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\" target=\"_blank\" rel=\"noopener\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\" target=\"_blank\" rel=\"noopener\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用-&gt;不可用/不可用-&gt;可用)时获取到通知即可</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></span><br><span class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch host</span></span><br><span class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch port</span></span><br><span class=\"line\"><span class=\"comment\"># es_port: 14900</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">heartbeat-monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Type of alert.</span></span><br><span class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">change</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">heartbeat-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The field to look for changes in</span></span><br><span class=\"line\"><span class=\"attr\">compare_key:</span> <span class=\"string\">up</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></span><br><span class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></span><br><span class=\"line\"><span class=\"attr\">query_key:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"comment\">#- \"email\"</span></span><br><span class=\"line\"><span class=\"comment\">#- \"debug\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></span><br><span class=\"line\"><span class=\"comment\">#party_id: xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></span><br><span class=\"line\"><span class=\"comment\">#user_id: xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\" target=\"_blank\" rel=\"noopener\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n"},{"title":"hexo搭建博客","date":"2017-02-03T08:07:16.000Z","_content":"本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","source":"_posts/hexo-github-pages-blog.md","raw":"title: hexo搭建博客\ndate: 2017-02-03 16:07:16\ntags: [blog,hexo]\ncategories: [编程]\n---\n本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","slug":"hexo-github-pages-blog","published":1,"updated":"2017-02-08T14:16:14.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5memj000k5gdozs6vtad4","content":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>\n<a id=\"more\"></a>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">; cli configs</span><br><span class=\"line\">long = <span class=\"literal\">true</span></span><br><span class=\"line\">scope = <span class=\"string\">\"\"</span></span><br><span class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</span><br><span class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</span><br><span class=\"line\">cache-lock-retries = 10</span><br><span class=\"line\">cache-lock-stale = 60000</span><br><span class=\"line\">cache-lock-wait = 10000</span><br><span class=\"line\">cache-max = null</span><br></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令缩写</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d == hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令组合</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></span><br></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入编译代码</span></span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></span><br><span class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-rsa</span><br><span class=\"line\"></span><br><span class=\"line\">xxxx 具体的key xxxxxx  userName@email</span><br></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add . <span class=\"comment\"># 添加文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-helper-qrcode</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-feed</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">$MY_DOMAIN</span> <span class=\"string\">];</span> <span class=\"string\">then</span> <span class=\"string\">echo</span> <span class=\"string\">$&#123;MY_DOMAIN&#125;</span> <span class=\"string\">&gt; CNAME; fi</span></span><br><span class=\"line\"><span class=\"string\">  - git init</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.name \"$&#123;userName&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.email \"$&#123;email&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git add .</span></span><br><span class=\"line\"><span class=\"string\">  - git commit -m \"Update docs\"</span></span><br><span class=\"line\"><span class=\"string\">  - git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">blog-source</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\"> global:</span></span><br><span class=\"line\"><span class=\"attr\">   - GH_REF:</span> <span class=\"string\">github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</span></span><br><span class=\"line\">   <span class=\"comment\"># 自定义域名</span></span><br><span class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> <span class=\"string\">anjia.ml</span></span><br></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"noopener\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\" target=\"_blank\" rel=\"noopener\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>","more":"<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">; cli configs</span><br><span class=\"line\">long = <span class=\"literal\">true</span></span><br><span class=\"line\">scope = <span class=\"string\">\"\"</span></span><br><span class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</span><br><span class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</span><br><span class=\"line\">cache-lock-retries = 10</span><br><span class=\"line\">cache-lock-stale = 60000</span><br><span class=\"line\">cache-lock-wait = 10000</span><br><span class=\"line\">cache-max = null</span><br></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令缩写</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d == hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令组合</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></span><br></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入编译代码</span></span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></span><br><span class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-rsa</span><br><span class=\"line\"></span><br><span class=\"line\">xxxx 具体的key xxxxxx  userName@email</span><br></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add . <span class=\"comment\"># 添加文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-helper-qrcode</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-feed</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">$MY_DOMAIN</span> <span class=\"string\">];</span> <span class=\"string\">then</span> <span class=\"string\">echo</span> <span class=\"string\">$&#123;MY_DOMAIN&#125;</span> <span class=\"string\">&gt; CNAME; fi</span></span><br><span class=\"line\"><span class=\"string\">  - git init</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.name \"$&#123;userName&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.email \"$&#123;email&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git add .</span></span><br><span class=\"line\"><span class=\"string\">  - git commit -m \"Update docs\"</span></span><br><span class=\"line\"><span class=\"string\">  - git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">blog-source</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\"> global:</span></span><br><span class=\"line\"><span class=\"attr\">   - GH_REF:</span> <span class=\"string\">github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</span></span><br><span class=\"line\">   <span class=\"comment\"># 自定义域名</span></span><br><span class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> <span class=\"string\">anjia.ml</span></span><br></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"noopener\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\" target=\"_blank\" rel=\"noopener\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>"},{"title":"jdk绿色免安装","date":"2017-05-17T04:39:16.000Z","_content":"\n## windows 免安装\n\njava自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。\n\nwindows安装版有一下坏处\n1. 会写注册表\n2. 会将java.exe,javaw.exe 等解压到`C:\\Windows\\System32`或者`C:\\Windows\\SysWOW64` \n3. 会将定期更新程序设置开机自启动，发现新版本弹窗提示\n4. 会在`PATH`中写一个oracle的javapath,还会加上`jre\\bin`\n\n好处就是安装方便\n\n\n今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的`%JAVA_HOME%\\bin;`又配了一个`%JAVA_HOME%\\jre\\bin;`导致出了一个很诡异的错误。\n\n\n下面说一下，如何免安装\n\n从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载最新的jdk windows安装版\ne.g.\n`jdk-8u131-windows-x64.exe`\n\n用解压缩软件解压到`E:\\jdk-8u131-windows-x64\\` `Win+R`->`cmd`打开命令行\n\n```\ncd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\nextrac32.exe 111\n\n:: 此时解压出 tools.zip 文件\n:: 打开当前文件夹\nexplorer.exe .\n:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`\n\n:: 将 .pack文件改成.jar文件\n\ncd tools\nfor /r %x in (*.pack) do .\\bin\\unpack200 -r \"%x\" \"%~dx%~px%~nx.jar\"\n\n:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步\n\ncd ..\\..\\JAVA_CAB9\nextrac32 110\n\n:: 将src.zip移动到tools文件夹\n\nmove src.zip ..\\JAVA_CAB10\\tools\\\n\n:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk\n\nxcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk\n\n:: 删除 E:\\jdk-8u131-windows-x64 文件夹\ncd / && rd /s /q E:\\jdk-8u131-windows-x64\n```\n\n设置环境变量 \n增加 `JAVA_HOME` `d:\\jdk`\n\n修改`PATH`\n\n追加 `;%JAVA_HOME%\\bin;`\n\n增加 `CLASSPATH`\n\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n设置环境变量后，需要重新打开`cmd`\n\n```\njava -version && javac -version\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)\njavac 1.8.0_131\n```\n\n\n## linux 免安装\n```bash\n\n# 下载文件\n$ wget -P ~/downloads --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz\n\n# 解压\n$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/local/\n\n#创建软连接\n$ sudo ln -sf /usr/local/jdk1.8.0_121 /usr/local/jdk\n\n$ sudo vi /etc/profile\n\n#设置java环境\nexport JAVA_HOME=/usr/local/jdk\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar;:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$PATH\n\n#保存并退出\n\n#使配置生效\n$ source /etc/profile\n```\n\n本人原创\n\n博客 https://anjia.ml/2017/05/17/jdk-zip/\n简书 http://www.jianshu.com/p/5dc20d5d4f5c\n掘金 https://juejin.im/post/591bdb222f301e006bcde36b","source":"_posts/jdk-zip.md","raw":"---\ntitle: jdk绿色免安装\ndate: 2017-05-17 12:39:16\ntags: java\n---\n\n## windows 免安装\n\njava自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。\n\nwindows安装版有一下坏处\n1. 会写注册表\n2. 会将java.exe,javaw.exe 等解压到`C:\\Windows\\System32`或者`C:\\Windows\\SysWOW64` \n3. 会将定期更新程序设置开机自启动，发现新版本弹窗提示\n4. 会在`PATH`中写一个oracle的javapath,还会加上`jre\\bin`\n\n好处就是安装方便\n\n\n今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的`%JAVA_HOME%\\bin;`又配了一个`%JAVA_HOME%\\jre\\bin;`导致出了一个很诡异的错误。\n\n\n下面说一下，如何免安装\n\n从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载最新的jdk windows安装版\ne.g.\n`jdk-8u131-windows-x64.exe`\n\n用解压缩软件解压到`E:\\jdk-8u131-windows-x64\\` `Win+R`->`cmd`打开命令行\n\n```\ncd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\nextrac32.exe 111\n\n:: 此时解压出 tools.zip 文件\n:: 打开当前文件夹\nexplorer.exe .\n:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`\n\n:: 将 .pack文件改成.jar文件\n\ncd tools\nfor /r %x in (*.pack) do .\\bin\\unpack200 -r \"%x\" \"%~dx%~px%~nx.jar\"\n\n:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步\n\ncd ..\\..\\JAVA_CAB9\nextrac32 110\n\n:: 将src.zip移动到tools文件夹\n\nmove src.zip ..\\JAVA_CAB10\\tools\\\n\n:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk\n\nxcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk\n\n:: 删除 E:\\jdk-8u131-windows-x64 文件夹\ncd / && rd /s /q E:\\jdk-8u131-windows-x64\n```\n\n设置环境变量 \n增加 `JAVA_HOME` `d:\\jdk`\n\n修改`PATH`\n\n追加 `;%JAVA_HOME%\\bin;`\n\n增加 `CLASSPATH`\n\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n设置环境变量后，需要重新打开`cmd`\n\n```\njava -version && javac -version\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)\njavac 1.8.0_131\n```\n\n\n## linux 免安装\n```bash\n\n# 下载文件\n$ wget -P ~/downloads --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz\n\n# 解压\n$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/local/\n\n#创建软连接\n$ sudo ln -sf /usr/local/jdk1.8.0_121 /usr/local/jdk\n\n$ sudo vi /etc/profile\n\n#设置java环境\nexport JAVA_HOME=/usr/local/jdk\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar;:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$PATH\n\n#保存并退出\n\n#使配置生效\n$ source /etc/profile\n```\n\n本人原创\n\n博客 https://anjia.ml/2017/05/17/jdk-zip/\n简书 http://www.jianshu.com/p/5dc20d5d4f5c\n掘金 https://juejin.im/post/591bdb222f301e006bcde36b","slug":"jdk-zip","published":1,"updated":"2017-05-17T05:17:57.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5memk000o5gdo3a2n7y1s","content":"<h2 id=\"windows-免安装\"><a href=\"#windows-免安装\" class=\"headerlink\" title=\"windows 免安装\"></a>windows 免安装</h2><p>java自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。</p>\n<p>windows安装版有一下坏处</p>\n<ol>\n<li>会写注册表</li>\n<li>会将java.exe,javaw.exe 等解压到<code>C:\\Windows\\System32</code>或者<code>C:\\Windows\\SysWOW64</code> </li>\n<li>会将定期更新程序设置开机自启动，发现新版本弹窗提示</li>\n<li>会在<code>PATH</code>中写一个oracle的javapath,还会加上<code>jre\\bin</code></li>\n</ol>\n<p>好处就是安装方便</p>\n<p>今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的<code>%JAVA_HOME%\\bin;</code>又配了一个<code>%JAVA_HOME%\\jre\\bin;</code>导致出了一个很诡异的错误。</p>\n<p>下面说一下，如何免安装</p>\n<p>从 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载最新的jdk windows安装版<br>e.g.<br><code>jdk-8u131-windows-x64.exe</code></p>\n<p>用解压缩软件解压到<code>E:\\jdk-8u131-windows-x64\\</code> <code>Win+R</code>-&gt;<code>cmd</code>打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10</span><br><span class=\"line\">extrac32.exe 111</span><br><span class=\"line\"></span><br><span class=\"line\">:: 此时解压出 tools.zip 文件</span><br><span class=\"line\">:: 打开当前文件夹</span><br><span class=\"line\">explorer.exe .</span><br><span class=\"line\">:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将 .pack文件改成.jar文件</span><br><span class=\"line\"></span><br><span class=\"line\">cd tools</span><br><span class=\"line\">for /r %x in (*.pack) do .\\bin\\unpack200 -r &quot;%x&quot; &quot;%~dx%~px%~nx.jar&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步</span><br><span class=\"line\"></span><br><span class=\"line\">cd ..\\..\\JAVA_CAB9</span><br><span class=\"line\">extrac32 110</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将src.zip移动到tools文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">move src.zip ..\\JAVA_CAB10\\tools\\</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">xcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">:: 删除 E:\\jdk-8u131-windows-x64 文件夹</span><br><span class=\"line\">cd / &amp;&amp; rd /s /q E:\\jdk-8u131-windows-x64</span><br></pre></td></tr></table></figure>\n<p>设置环境变量<br>增加 <code>JAVA_HOME</code> <code>d:\\jdk</code></p>\n<p>修改<code>PATH</code></p>\n<p>追加 <code>;%JAVA_HOME%\\bin;</code></p>\n<p>增加 <code>CLASSPATH</code></p>\n<p><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p>设置环境变量后，需要重新打开<code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version &amp;&amp; javac -version</span><br><span class=\"line\">java version &quot;1.8.0_131&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)</span><br><span class=\"line\">javac 1.8.0_131</span><br></pre></td></tr></table></figure>\n<h2 id=\"linux-免安装\"><a href=\"#linux-免安装\" class=\"headerlink\" title=\"linux 免安装\"></a>linux 免安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">$ wget -P ~/downloads --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建软连接</span></span><br><span class=\"line\">$ sudo ln -sf /usr/<span class=\"built_in\">local</span>/jdk1.8.0_121 /usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar;:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存并退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使配置生效</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>本人原创</p>\n<p>博客 <a href=\"https://anjia.ml/2017/05/17/jdk-zip/\">https://anjia.ml/2017/05/17/jdk-zip/</a><br>简书 <a href=\"http://www.jianshu.com/p/5dc20d5d4f5c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/5dc20d5d4f5c</a><br>掘金 <a href=\"https://juejin.im/post/591bdb222f301e006bcde36b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/591bdb222f301e006bcde36b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"windows-免安装\"><a href=\"#windows-免安装\" class=\"headerlink\" title=\"windows 免安装\"></a>windows 免安装</h2><p>java自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。</p>\n<p>windows安装版有一下坏处</p>\n<ol>\n<li>会写注册表</li>\n<li>会将java.exe,javaw.exe 等解压到<code>C:\\Windows\\System32</code>或者<code>C:\\Windows\\SysWOW64</code> </li>\n<li>会将定期更新程序设置开机自启动，发现新版本弹窗提示</li>\n<li>会在<code>PATH</code>中写一个oracle的javapath,还会加上<code>jre\\bin</code></li>\n</ol>\n<p>好处就是安装方便</p>\n<p>今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的<code>%JAVA_HOME%\\bin;</code>又配了一个<code>%JAVA_HOME%\\jre\\bin;</code>导致出了一个很诡异的错误。</p>\n<p>下面说一下，如何免安装</p>\n<p>从 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载最新的jdk windows安装版<br>e.g.<br><code>jdk-8u131-windows-x64.exe</code></p>\n<p>用解压缩软件解压到<code>E:\\jdk-8u131-windows-x64\\</code> <code>Win+R</code>-&gt;<code>cmd</code>打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10</span><br><span class=\"line\">extrac32.exe 111</span><br><span class=\"line\"></span><br><span class=\"line\">:: 此时解压出 tools.zip 文件</span><br><span class=\"line\">:: 打开当前文件夹</span><br><span class=\"line\">explorer.exe .</span><br><span class=\"line\">:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将 .pack文件改成.jar文件</span><br><span class=\"line\"></span><br><span class=\"line\">cd tools</span><br><span class=\"line\">for /r %x in (*.pack) do .\\bin\\unpack200 -r &quot;%x&quot; &quot;%~dx%~px%~nx.jar&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步</span><br><span class=\"line\"></span><br><span class=\"line\">cd ..\\..\\JAVA_CAB9</span><br><span class=\"line\">extrac32 110</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将src.zip移动到tools文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">move src.zip ..\\JAVA_CAB10\\tools\\</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">xcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">:: 删除 E:\\jdk-8u131-windows-x64 文件夹</span><br><span class=\"line\">cd / &amp;&amp; rd /s /q E:\\jdk-8u131-windows-x64</span><br></pre></td></tr></table></figure>\n<p>设置环境变量<br>增加 <code>JAVA_HOME</code> <code>d:\\jdk</code></p>\n<p>修改<code>PATH</code></p>\n<p>追加 <code>;%JAVA_HOME%\\bin;</code></p>\n<p>增加 <code>CLASSPATH</code></p>\n<p><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p>设置环境变量后，需要重新打开<code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version &amp;&amp; javac -version</span><br><span class=\"line\">java version &quot;1.8.0_131&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)</span><br><span class=\"line\">javac 1.8.0_131</span><br></pre></td></tr></table></figure>\n<h2 id=\"linux-免安装\"><a href=\"#linux-免安装\" class=\"headerlink\" title=\"linux 免安装\"></a>linux 免安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">$ wget -P ~/downloads --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建软连接</span></span><br><span class=\"line\">$ sudo ln -sf /usr/<span class=\"built_in\">local</span>/jdk1.8.0_121 /usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar;:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存并退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使配置生效</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>本人原创</p>\n<p>博客 <a href=\"https://anjia.ml/2017/05/17/jdk-zip/\">https://anjia.ml/2017/05/17/jdk-zip/</a><br>简书 <a href=\"http://www.jianshu.com/p/5dc20d5d4f5c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/5dc20d5d4f5c</a><br>掘金 <a href=\"https://juejin.im/post/591bdb222f301e006bcde36b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/591bdb222f301e006bcde36b</a></p>\n"},{"title":"使用jupyter(IPython)开发opencv","date":"2017-07-16T09:09:12.000Z","_content":"\n\nopencv 的默认使用highgui显示图片，\n用命令行运行，可以正常显示\n```\ncv.namedWindow(\"Image\")\ncv.imshow(\"Image\",img)\n```\n\n用jupyter则有无反应\n\n<!--more-->\n\n## 本文环境\n```python\nimport sys\nimport cv2\nprint(\"python版本:%s\"% sys.version)\nprint(\"opencv版本:%s\"% cv2.__version__)\n```\n\n输出\n```\npython版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]\nopencv版本:3.2.0\n```\n\n## 安装opencv\n如果使用Anaconda,则打开 `Anaconda Prompt`,`activate python35`切换到相应的python环境\n\n```bash\npip install --upgrade setuptools\npip install numpy Matplotlib\npip install opencv-python\n```\n\n参考 [Python环境搭建之OpenCV][],但是在jupyter中，运行该博文下一段demo代码，无反应\n\n经过一番google，已解决，现整理如下\n\n## jupyter显示opencv图片\n以[lenna][] 图为例\n\n```python\n\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lenna1.png')\n \nshow_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n\nplt.imshow(show_img)\nplt.show()\n```\n\n参考自 [Quickie: Mix up OpenCV and Jupyter (iPython Notebook)][linkQuickie:MixUpOpencvAndJupyter_ipython] 和官方 [Using Matplotlib][linkUsingMatplotlib]\n\n## opencv读取网络图片\n```python\n%matplotlib inline\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\nimport urllib.request as ul\n\ndata = None\n\ntry:\n    \n    data = ul.urlopen('http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png').read()\n    \nexcept Exception as e:\n    \n    print(\"Could not download the image: %s \" %( e.message))\n    \nelse:\n    data =  np.fromstring(data, np.uint8)\n    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )\n    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)\n    plt.imshow(img_data)\n    plt.show()\n```\n\n本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在`cv2.CV_LOAD_IMAGE_COLOR`,根据 [Python OpenCV load image from byte string][linkPythonOpencvLoadImageFromByteString] ，改成`cv2.IMREAD_COLOR`\n\n大部分代码 参考自 [Quickie: Grab an image from the web with urllib2 and OpenCV][linkQuickie:GrabAnImageFromTheWebWith]\n\n\n## [OpenCV入门教程][opencv-tutorial]\n\n\n博客 [https://anjia.ml/2017/07/16/opencv-on-jupyter/][blog]\n掘金 [https://juejin.im/post/596b3e50f265da6c2211b609][juejin]\n简书 [http://www.jianshu.com/p/69af8b1dce6d][jianshu]\n\n[blog]: https://anjia.ml/2017/07/16/opencv-on-jupyter/\n[juejin]: https://juejin.im/post/596b3e50f265da6c2211b609\n[jianshu]: http://www.jianshu.com/p/69af8b1dce6d\n[opencv-tutorial]: http://blog.csdn.net/column/details/opencv-tutorial.html\n[lenna]: https://en.wikipedia.org/wiki/Lenna\n[Python环境搭建之OpenCV]: http://www.cnblogs.com/lclblack/p/6377710.html\n[linkQuickie:MixUpOpencvAndJupyter_ipython]: https://giusedroid.blogspot.jp/2015/04/blog-post.html\n[linkQuickie:GrabAnImageFromTheWebWith]: https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\n[linkPythonOpencvLoadImageFromByteString]: https://stackoverflow.com/a/17170855/7001350\n[linkUsingMatplotlib]: http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\n","source":"_posts/opencv-on-jupyter.md","raw":"---\ntitle: 使用jupyter(IPython)开发opencv\ndate: 2017-07-16 17:09:12\ntags: [opencv,ipython,jupyter]\n---\n\n\nopencv 的默认使用highgui显示图片，\n用命令行运行，可以正常显示\n```\ncv.namedWindow(\"Image\")\ncv.imshow(\"Image\",img)\n```\n\n用jupyter则有无反应\n\n<!--more-->\n\n## 本文环境\n```python\nimport sys\nimport cv2\nprint(\"python版本:%s\"% sys.version)\nprint(\"opencv版本:%s\"% cv2.__version__)\n```\n\n输出\n```\npython版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]\nopencv版本:3.2.0\n```\n\n## 安装opencv\n如果使用Anaconda,则打开 `Anaconda Prompt`,`activate python35`切换到相应的python环境\n\n```bash\npip install --upgrade setuptools\npip install numpy Matplotlib\npip install opencv-python\n```\n\n参考 [Python环境搭建之OpenCV][],但是在jupyter中，运行该博文下一段demo代码，无反应\n\n经过一番google，已解决，现整理如下\n\n## jupyter显示opencv图片\n以[lenna][] 图为例\n\n```python\n\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lenna1.png')\n \nshow_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n\nplt.imshow(show_img)\nplt.show()\n```\n\n参考自 [Quickie: Mix up OpenCV and Jupyter (iPython Notebook)][linkQuickie:MixUpOpencvAndJupyter_ipython] 和官方 [Using Matplotlib][linkUsingMatplotlib]\n\n## opencv读取网络图片\n```python\n%matplotlib inline\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\nimport urllib.request as ul\n\ndata = None\n\ntry:\n    \n    data = ul.urlopen('http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png').read()\n    \nexcept Exception as e:\n    \n    print(\"Could not download the image: %s \" %( e.message))\n    \nelse:\n    data =  np.fromstring(data, np.uint8)\n    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )\n    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)\n    plt.imshow(img_data)\n    plt.show()\n```\n\n本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在`cv2.CV_LOAD_IMAGE_COLOR`,根据 [Python OpenCV load image from byte string][linkPythonOpencvLoadImageFromByteString] ，改成`cv2.IMREAD_COLOR`\n\n大部分代码 参考自 [Quickie: Grab an image from the web with urllib2 and OpenCV][linkQuickie:GrabAnImageFromTheWebWith]\n\n\n## [OpenCV入门教程][opencv-tutorial]\n\n\n博客 [https://anjia.ml/2017/07/16/opencv-on-jupyter/][blog]\n掘金 [https://juejin.im/post/596b3e50f265da6c2211b609][juejin]\n简书 [http://www.jianshu.com/p/69af8b1dce6d][jianshu]\n\n[blog]: https://anjia.ml/2017/07/16/opencv-on-jupyter/\n[juejin]: https://juejin.im/post/596b3e50f265da6c2211b609\n[jianshu]: http://www.jianshu.com/p/69af8b1dce6d\n[opencv-tutorial]: http://blog.csdn.net/column/details/opencv-tutorial.html\n[lenna]: https://en.wikipedia.org/wiki/Lenna\n[Python环境搭建之OpenCV]: http://www.cnblogs.com/lclblack/p/6377710.html\n[linkQuickie:MixUpOpencvAndJupyter_ipython]: https://giusedroid.blogspot.jp/2015/04/blog-post.html\n[linkQuickie:GrabAnImageFromTheWebWith]: https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\n[linkPythonOpencvLoadImageFromByteString]: https://stackoverflow.com/a/17170855/7001350\n[linkUsingMatplotlib]: http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\n","slug":"opencv-on-jupyter","published":1,"updated":"2017-07-25T01:21:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5memn000s5gdo60z1o7kf","content":"<p>opencv 的默认使用highgui显示图片，<br>用命令行运行，可以正常显示<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cv.namedWindow(&quot;Image&quot;)</span><br><span class=\"line\">cv.imshow(&quot;Image&quot;,img)</span><br></pre></td></tr></table></figure></p>\n<p>用jupyter则有无反应</p>\n<a id=\"more\"></a>\n<h2 id=\"本文环境\"><a href=\"#本文环境\" class=\"headerlink\" title=\"本文环境\"></a>本文环境</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">print(<span class=\"string\">\"python版本:%s\"</span>% sys.version)</span><br><span class=\"line\">print(<span class=\"string\">\"opencv版本:%s\"</span>% cv2.__version__)</span><br></pre></td></tr></table></figure>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">opencv版本:3.2.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装opencv\"><a href=\"#安装opencv\" class=\"headerlink\" title=\"安装opencv\"></a>安装opencv</h2><p>如果使用Anaconda,则打开 <code>Anaconda Prompt</code>,<code>activate python35</code>切换到相应的python环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install --upgrade setuptools</span><br><span class=\"line\">pip install numpy Matplotlib</span><br><span class=\"line\">pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://www.cnblogs.com/lclblack/p/6377710.html\" target=\"_blank\" rel=\"noopener\">Python环境搭建之OpenCV</a>,但是在jupyter中，运行该博文下一段demo代码，无反应</p>\n<p>经过一番google，已解决，现整理如下</p>\n<h2 id=\"jupyter显示opencv图片\"><a href=\"#jupyter显示opencv图片\" class=\"headerlink\" title=\"jupyter显示opencv图片\"></a>jupyter显示opencv图片</h2><p>以<a href=\"https://en.wikipedia.org/wiki/Lenna\" target=\"_blank\" rel=\"noopener\">lenna</a> 图为例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'lenna1.png'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">show_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) </span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(show_img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/blog-post.html\" target=\"_blank\" rel=\"noopener\">Quickie: Mix up OpenCV and Jupyter (iPython Notebook)</a> 和官方 <a href=\"http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\" target=\"_blank\" rel=\"noopener\">Using Matplotlib</a></p>\n<h2 id=\"opencv读取网络图片\"><a href=\"#opencv读取网络图片\" class=\"headerlink\" title=\"opencv读取网络图片\"></a>opencv读取网络图片</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request <span class=\"keyword\">as</span> ul</span><br><span class=\"line\"></span><br><span class=\"line\">data = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    data = ul.urlopen(<span class=\"string\">'http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png'</span>).read()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Could not download the image: %s \"</span> %( e.message))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    data =  np.fromstring(data, np.uint8)</span><br><span class=\"line\">    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )</span><br><span class=\"line\">    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    plt.imshow(img_data)</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n<p>本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在<code>cv2.CV_LOAD_IMAGE_COLOR</code>,根据 <a href=\"https://stackoverflow.com/a/17170855/7001350\" target=\"_blank\" rel=\"noopener\">Python OpenCV load image from byte string</a> ，改成<code>cv2.IMREAD_COLOR</code></p>\n<p>大部分代码 参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\" target=\"_blank\" rel=\"noopener\">Quickie: Grab an image from the web with urllib2 and OpenCV</a></p>\n<h2 id=\"OpenCV入门教程\"><a href=\"#OpenCV入门教程\" class=\"headerlink\" title=\"OpenCV入门教程\"></a><a href=\"http://blog.csdn.net/column/details/opencv-tutorial.html\" target=\"_blank\" rel=\"noopener\">OpenCV入门教程</a></h2><p>博客 <a href=\"https://anjia.ml/2017/07/16/opencv-on-jupyter/\">https://anjia.ml/2017/07/16/opencv-on-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/596b3e50f265da6c2211b609\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/596b3e50f265da6c2211b609</a><br>简书 <a href=\"http://www.jianshu.com/p/69af8b1dce6d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/69af8b1dce6d</a></p>\n","site":{"data":{}},"excerpt":"<p>opencv 的默认使用highgui显示图片，<br>用命令行运行，可以正常显示<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cv.namedWindow(&quot;Image&quot;)</span><br><span class=\"line\">cv.imshow(&quot;Image&quot;,img)</span><br></pre></td></tr></table></figure></p>\n<p>用jupyter则有无反应</p>","more":"<h2 id=\"本文环境\"><a href=\"#本文环境\" class=\"headerlink\" title=\"本文环境\"></a>本文环境</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">print(<span class=\"string\">\"python版本:%s\"</span>% sys.version)</span><br><span class=\"line\">print(<span class=\"string\">\"opencv版本:%s\"</span>% cv2.__version__)</span><br></pre></td></tr></table></figure>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">opencv版本:3.2.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装opencv\"><a href=\"#安装opencv\" class=\"headerlink\" title=\"安装opencv\"></a>安装opencv</h2><p>如果使用Anaconda,则打开 <code>Anaconda Prompt</code>,<code>activate python35</code>切换到相应的python环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install --upgrade setuptools</span><br><span class=\"line\">pip install numpy Matplotlib</span><br><span class=\"line\">pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://www.cnblogs.com/lclblack/p/6377710.html\" target=\"_blank\" rel=\"noopener\">Python环境搭建之OpenCV</a>,但是在jupyter中，运行该博文下一段demo代码，无反应</p>\n<p>经过一番google，已解决，现整理如下</p>\n<h2 id=\"jupyter显示opencv图片\"><a href=\"#jupyter显示opencv图片\" class=\"headerlink\" title=\"jupyter显示opencv图片\"></a>jupyter显示opencv图片</h2><p>以<a href=\"https://en.wikipedia.org/wiki/Lenna\" target=\"_blank\" rel=\"noopener\">lenna</a> 图为例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'lenna1.png'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">show_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) </span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(show_img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/blog-post.html\" target=\"_blank\" rel=\"noopener\">Quickie: Mix up OpenCV and Jupyter (iPython Notebook)</a> 和官方 <a href=\"http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\" target=\"_blank\" rel=\"noopener\">Using Matplotlib</a></p>\n<h2 id=\"opencv读取网络图片\"><a href=\"#opencv读取网络图片\" class=\"headerlink\" title=\"opencv读取网络图片\"></a>opencv读取网络图片</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request <span class=\"keyword\">as</span> ul</span><br><span class=\"line\"></span><br><span class=\"line\">data = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    data = ul.urlopen(<span class=\"string\">'http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png'</span>).read()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Could not download the image: %s \"</span> %( e.message))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    data =  np.fromstring(data, np.uint8)</span><br><span class=\"line\">    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )</span><br><span class=\"line\">    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    plt.imshow(img_data)</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n<p>本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在<code>cv2.CV_LOAD_IMAGE_COLOR</code>,根据 <a href=\"https://stackoverflow.com/a/17170855/7001350\" target=\"_blank\" rel=\"noopener\">Python OpenCV load image from byte string</a> ，改成<code>cv2.IMREAD_COLOR</code></p>\n<p>大部分代码 参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\" target=\"_blank\" rel=\"noopener\">Quickie: Grab an image from the web with urllib2 and OpenCV</a></p>\n<h2 id=\"OpenCV入门教程\"><a href=\"#OpenCV入门教程\" class=\"headerlink\" title=\"OpenCV入门教程\"></a><a href=\"http://blog.csdn.net/column/details/opencv-tutorial.html\" target=\"_blank\" rel=\"noopener\">OpenCV入门教程</a></h2><p>博客 <a href=\"https://anjia.ml/2017/07/16/opencv-on-jupyter/\">https://anjia.ml/2017/07/16/opencv-on-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/596b3e50f265da6c2211b609\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/596b3e50f265da6c2211b609</a><br>简书 <a href=\"http://www.jianshu.com/p/69af8b1dce6d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/69af8b1dce6d</a></p>"},{"title":"nginx日志中$request_body 十六进制字符(\\x22\\x9B\\x5C\\x09\\x08...)完美解决方案","date":"2017-06-21T02:11:46.000Z","_content":"在使用nginx记录访问日志时，发现在含有`request_body`的 `PUT`,`POST` 请求时，日志中会含有 `\\x22` `\\x9B` `\\x5C` `\\x09` `\\x08` 字符，不利于阅读和处理。\n\n<!-- more -->\n\n具体 支持`request_body`的http method参见 [http1.1定义 9 Method Definitions][link9MethodDefinitions] 和 [Payloads of HTTP Request Methods][linkPayloadsOfHttpRequestMethods]\n\n\n`nginx.conf` 默认access_log 配置\n```\n    log_format  main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n                      '$http_host $upstream_status $upstream_addr $request_time $upstream_response_time'; \n```\n\n改成\n```\n    log_format json_log escape=json '{\"realip\":\"$remote_addr\",\"@timestamp\":\"$time_iso8601\",\"host\":\"$http_host\",\"request\":\"$request\",\"req_body\":\"$request_body\",\"status\":\"$status\",\"size\":$body_bytes_sent,\"ua\":\"$http_user_agent\",\"cookie\":\"$http_cookie\",\"req_time\":\"$request_time\",\"uri\":\"$uri\",\"referer\":\"$http_referer\",\"xff\":\"$http_x_forwarded_for\",\"ups_status\":\"$upstream_status\",\"ups_addr\":\"$upstream_addr\",\"ups_time\":\"$upstream_response_time\"}';\n```\n\n参考 [How to generate a JSON log from nginx?][linkHowToGenerateAJsonLogFromNginx?]\n\n[官方文档ngx_http_log_module.html#log_format][ngx_http_log_module] 注意，`escape`是从*1.11.8*后新增的参数。\n\n如果是老版本的，linux可以考虑使用`shell`命令替换，`logstash`可以考虑使用`ruby`处理 ，参考 [Optionally support handling of \\x escape codes][linkOptionallySupportHandlingOf\\xEscape]\n\n博客 [https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/][blog]\n简书 [http://www.jianshu.com/p/8409f28f32e9][jianshu]\n掘金 [https://juejin.im/post/5949e0f7128fe1006a627cc0][juejin]\n\n\n[link9MethodDefinitions]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[linkPayloadsOfHttpRequestMethods]: https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\n[linkHowToGenerateAJsonLogFromNginx?]: https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\n[ngx_http_log_module]: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n[linkOptionallySupportHandlingOf\\xEscape]: https://github.com/logstash-plugins/logstash-codec-json/issues/2\n[jianshu]: http://www.jianshu.com/p/8409f28f32e9\n[juejin]: https://juejin.im/post/5949e0f7128fe1006a627cc0\n[blog]: https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\n","source":"_posts/nginx-logging-request-body-as-hexidecimal.md","raw":"---\ntitle: nginx日志中$request_body 十六进制字符(\\x22\\x9B\\x5C\\x09\\x08...)完美解决方案\ndate: 2017-06-21 10:11:46\ntags: [nginx,logstash,elk,elkstack]\ncategories: [nginx]\n---\n在使用nginx记录访问日志时，发现在含有`request_body`的 `PUT`,`POST` 请求时，日志中会含有 `\\x22` `\\x9B` `\\x5C` `\\x09` `\\x08` 字符，不利于阅读和处理。\n\n<!-- more -->\n\n具体 支持`request_body`的http method参见 [http1.1定义 9 Method Definitions][link9MethodDefinitions] 和 [Payloads of HTTP Request Methods][linkPayloadsOfHttpRequestMethods]\n\n\n`nginx.conf` 默认access_log 配置\n```\n    log_format  main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n                      '$http_host $upstream_status $upstream_addr $request_time $upstream_response_time'; \n```\n\n改成\n```\n    log_format json_log escape=json '{\"realip\":\"$remote_addr\",\"@timestamp\":\"$time_iso8601\",\"host\":\"$http_host\",\"request\":\"$request\",\"req_body\":\"$request_body\",\"status\":\"$status\",\"size\":$body_bytes_sent,\"ua\":\"$http_user_agent\",\"cookie\":\"$http_cookie\",\"req_time\":\"$request_time\",\"uri\":\"$uri\",\"referer\":\"$http_referer\",\"xff\":\"$http_x_forwarded_for\",\"ups_status\":\"$upstream_status\",\"ups_addr\":\"$upstream_addr\",\"ups_time\":\"$upstream_response_time\"}';\n```\n\n参考 [How to generate a JSON log from nginx?][linkHowToGenerateAJsonLogFromNginx?]\n\n[官方文档ngx_http_log_module.html#log_format][ngx_http_log_module] 注意，`escape`是从*1.11.8*后新增的参数。\n\n如果是老版本的，linux可以考虑使用`shell`命令替换，`logstash`可以考虑使用`ruby`处理 ，参考 [Optionally support handling of \\x escape codes][linkOptionallySupportHandlingOf\\xEscape]\n\n博客 [https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/][blog]\n简书 [http://www.jianshu.com/p/8409f28f32e9][jianshu]\n掘金 [https://juejin.im/post/5949e0f7128fe1006a627cc0][juejin]\n\n\n[link9MethodDefinitions]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[linkPayloadsOfHttpRequestMethods]: https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\n[linkHowToGenerateAJsonLogFromNginx?]: https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\n[ngx_http_log_module]: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n[linkOptionallySupportHandlingOf\\xEscape]: https://github.com/logstash-plugins/logstash-codec-json/issues/2\n[jianshu]: http://www.jianshu.com/p/8409f28f32e9\n[juejin]: https://juejin.im/post/5949e0f7128fe1006a627cc0\n[blog]: https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\n","slug":"nginx-logging-request-body-as-hexidecimal","published":1,"updated":"2017-06-21T03:07:45.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5memp000u5gdothl8i3z1","content":"<p>在使用nginx记录访问日志时，发现在含有<code>request_body</code>的 <code>PUT</code>,<code>POST</code> 请求时，日志中会含有 <code>\\x22</code> <code>\\x9B</code> <code>\\x5C</code> <code>\\x09</code> <code>\\x08</code> 字符，不利于阅读和处理。</p>\n<a id=\"more\"></a>\n<p>具体 支持<code>request_body</code>的http method参见 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" target=\"_blank\" rel=\"noopener\">http1.1定义 9 Method Definitions</a> 和 <a href=\"https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\" target=\"_blank\" rel=\"noopener\">Payloads of HTTP Request Methods</a></p>\n<p><code>nginx.conf</code> 默认access_log 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class=\"line\">                  &apos;$http_host $upstream_status $upstream_addr $request_time $upstream_response_time&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format json_log escape=json &apos;&#123;&quot;realip&quot;:&quot;$remote_addr&quot;,&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;host&quot;:&quot;$http_host&quot;,&quot;request&quot;:&quot;$request&quot;,&quot;req_body&quot;:&quot;$request_body&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;size&quot;:$body_bytes_sent,&quot;ua&quot;:&quot;$http_user_agent&quot;,&quot;cookie&quot;:&quot;$http_cookie&quot;,&quot;req_time&quot;:&quot;$request_time&quot;,&quot;uri&quot;:&quot;$uri&quot;,&quot;referer&quot;:&quot;$http_referer&quot;,&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&quot;ups_status&quot;:&quot;$upstream_status&quot;,&quot;ups_addr&quot;:&quot;$upstream_addr&quot;,&quot;ups_time&quot;:&quot;$upstream_response_time&quot;&#125;&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\" target=\"_blank\" rel=\"noopener\">How to generate a JSON log from nginx?</a></p>\n<p><a href=\"http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\" target=\"_blank\" rel=\"noopener\">官方文档ngx_http_log_module.html#log_format</a> 注意，<code>escape</code>是从<em>1.11.8</em>后新增的参数。</p>\n<p>如果是老版本的，linux可以考虑使用<code>shell</code>命令替换，<code>logstash</code>可以考虑使用<code>ruby</code>处理 ，参考 <a href=\"https://github.com/logstash-plugins/logstash-codec-json/issues/2\" target=\"_blank\" rel=\"noopener\">Optionally support handling of \\x escape codes</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\">https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/</a><br>简书 <a href=\"http://www.jianshu.com/p/8409f28f32e9\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/8409f28f32e9</a><br>掘金 <a href=\"https://juejin.im/post/5949e0f7128fe1006a627cc0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5949e0f7128fe1006a627cc0</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用nginx记录访问日志时，发现在含有<code>request_body</code>的 <code>PUT</code>,<code>POST</code> 请求时，日志中会含有 <code>\\x22</code> <code>\\x9B</code> <code>\\x5C</code> <code>\\x09</code> <code>\\x08</code> 字符，不利于阅读和处理。</p>","more":"<p>具体 支持<code>request_body</code>的http method参见 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" target=\"_blank\" rel=\"noopener\">http1.1定义 9 Method Definitions</a> 和 <a href=\"https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\" target=\"_blank\" rel=\"noopener\">Payloads of HTTP Request Methods</a></p>\n<p><code>nginx.conf</code> 默认access_log 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class=\"line\">                  &apos;$http_host $upstream_status $upstream_addr $request_time $upstream_response_time&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format json_log escape=json &apos;&#123;&quot;realip&quot;:&quot;$remote_addr&quot;,&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;host&quot;:&quot;$http_host&quot;,&quot;request&quot;:&quot;$request&quot;,&quot;req_body&quot;:&quot;$request_body&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;size&quot;:$body_bytes_sent,&quot;ua&quot;:&quot;$http_user_agent&quot;,&quot;cookie&quot;:&quot;$http_cookie&quot;,&quot;req_time&quot;:&quot;$request_time&quot;,&quot;uri&quot;:&quot;$uri&quot;,&quot;referer&quot;:&quot;$http_referer&quot;,&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&quot;ups_status&quot;:&quot;$upstream_status&quot;,&quot;ups_addr&quot;:&quot;$upstream_addr&quot;,&quot;ups_time&quot;:&quot;$upstream_response_time&quot;&#125;&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\" target=\"_blank\" rel=\"noopener\">How to generate a JSON log from nginx?</a></p>\n<p><a href=\"http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\" target=\"_blank\" rel=\"noopener\">官方文档ngx_http_log_module.html#log_format</a> 注意，<code>escape</code>是从<em>1.11.8</em>后新增的参数。</p>\n<p>如果是老版本的，linux可以考虑使用<code>shell</code>命令替换，<code>logstash</code>可以考虑使用<code>ruby</code>处理 ，参考 <a href=\"https://github.com/logstash-plugins/logstash-codec-json/issues/2\" target=\"_blank\" rel=\"noopener\">Optionally support handling of \\x escape codes</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\">https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/</a><br>简书 <a href=\"http://www.jianshu.com/p/8409f28f32e9\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/8409f28f32e9</a><br>掘金 <a href=\"https://juejin.im/post/5949e0f7128fe1006a627cc0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5949e0f7128fe1006a627cc0</a></p>"},{"title":"rancher中国区加速安装Kubernetes","date":"2017-11-13T04:04:14.000Z","_content":"\n上篇 [《rancher安装Kubernetes》][] 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的`gcr.io`的镜像。\n\n本文是在群内`@天阑-李小威` `@洪晓露` `@logan` 等大神指导下,并根据 [《原生加速中国区Kubernetes安装》][]，最终搞定的方案\n\n<!--more-->\n\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  |     docker version    | ranhcer version |\n|--------------|---------------|--------------------------------------|-----------------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | Docker version 1.12.6 | v1.6.11         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n**一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard**\n\n如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 `docker 1.12.3+` 的版本\n\n```bash\ncurl https://releases.rancher.com/install-docker/1.12.sh | sh\n```\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为`google_containers`,建议v1.6.11+\n\n```bash\nsudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 && sudo docker logs -f rancher-server\n```\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n如果之前安装过docker和k8s，需要运行\n```\ndocker rm -f -v $(docker ps -aq) \ndocker volume rm $(docker volume ls)\nsudo rm -rf /var/etcd/\n```\n\n### 创建环境模板\n![创建环境模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg)\n\n### 修改k8s模板\n\n鉴于`gfw`屏蔽`gcr.io`的情况，花了点时间，将所有的`gcr.io`镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 [https://hub.docker.com/r/anjia0532/][] 并且每天定时更新，详情参见另外一篇文章 [Google Container Registry(gcr.io) 中国可用镜像(长期维护)][GoogleContainerRegistry(gcr.io)]\n\n`Private Registry for Add-Ons and Pod Infra Container Image` `index.docker.io`\n\n`Image namespace for  Add-Ons and Pod Infra Container Image` `anjia0532`\n\n`Image namespace for kubernetes-helm Image` `anjia0532`\n\n`Pod Infra Container Image` `anjia0532`\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg)\n\n\n### 创建k8s环境\n\n![创建k8s环境](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg)\n\n### 选择k8s环境并添加主机\n\n![选择k8s环境并添加主机](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg)\n\n### 查看k8s基础服务状态\n\n当基础服务都是绿色后，即可使用\n\n![查看k8s基础服务状态](http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg)\n\n### 查看k8s 仪表板 dashboard\n![查看k8s 仪表板 dashboard](http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg)\n\n## 异常排查\n\n如果打开dashboard 报 `503 ServiceUnavailable` , 非常感谢群内`@天阑-李小威` 耐心解答，同时 参考 [Kubernetes 部署失败的 10 个最普遍原因（Part 1）][Kubernetes部署失败的10个最普遍原因（part1）] 解决了好几个问题\n\n打开`Cli`\n\n```bash\n> kubectl --namespace=kube-system  get pods\nNAME                                   READY     STATUS             RESTARTS   AGE\nheapster-79684d56d6-8pjrd              1/1       Running            0          13m\nkube-dns-7f59fd996-nkvv5               3/3       Running            0          13m\nkubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m\nmonitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m\nmonitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m\ntiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m\n\n# 复\n> kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5\n# 我这是正常Running的日志,ImagePullBackOff的没截下来\n Events:\n  Type    Reason                 Age   From               Message\n  ----    ------                 ----  ----               -------\n  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s\n  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded for volume \"io-rancher-system-token-lb68r\"\n  Normal  Pulled                 16m   kubelet, k8s       Container image \"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\" already present on machine\n  Normal  Created                16m   kubelet, k8s       Created container\n  Normal  Started                16m   kubelet, k8s       Started container\n\n# 也可以根据 events 来辅助排查问题\n> kubectl --namespace=kube-system get events\n```\n\n博客 [https://anjia.ml/2017/11/13/rancher-k8s-china/][blog]\n掘金 [https://juejin.im/post/5a097599f265da430d578385][juejin]\n简书 [http://www.jianshu.com/p/2f906a7f4bfa][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/13/rancher-k8s-china/\n[juejin]: https://juejin.im/post/5a097599f265da430d578385\n[jianshu]: http://www.jianshu.com/p/2f906a7f4bfa\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n[《rancher安装Kubernetes》]: https://anjia.ml/2017/11/10/rancher-k8s/\n[《原生加速中国区Kubernetes安装》]: https://www.cnrancher.com/kubernetes-installation/\n[Kubernetes部署失败的10个最普遍原因（part1）]: http://dockone.io/article/2247\n[https://hub.docker.com/r/anjia0532/]: https://hub.docker.com/r/anjia0532/\n[GoogleContainerRegistry(gcr.io)]: https://anjia.ml/2017/11/15/gcr-io-image-mirror/\n","source":"_posts/rancher-k8s-china.md","raw":"---\ntitle: rancher中国区加速安装Kubernetes\ndate: 2017-11-13 12:04:14\ntags: [k8s,kubernetes,rancher,gcr.io]\n---\n\n上篇 [《rancher安装Kubernetes》][] 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的`gcr.io`的镜像。\n\n本文是在群内`@天阑-李小威` `@洪晓露` `@logan` 等大神指导下,并根据 [《原生加速中国区Kubernetes安装》][]，最终搞定的方案\n\n<!--more-->\n\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  |     docker version    | ranhcer version |\n|--------------|---------------|--------------------------------------|-----------------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | Docker version 1.12.6 | v1.6.11         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n**一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard**\n\n如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 `docker 1.12.3+` 的版本\n\n```bash\ncurl https://releases.rancher.com/install-docker/1.12.sh | sh\n```\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为`google_containers`,建议v1.6.11+\n\n```bash\nsudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 && sudo docker logs -f rancher-server\n```\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n如果之前安装过docker和k8s，需要运行\n```\ndocker rm -f -v $(docker ps -aq) \ndocker volume rm $(docker volume ls)\nsudo rm -rf /var/etcd/\n```\n\n### 创建环境模板\n![创建环境模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg)\n\n### 修改k8s模板\n\n鉴于`gfw`屏蔽`gcr.io`的情况，花了点时间，将所有的`gcr.io`镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 [https://hub.docker.com/r/anjia0532/][] 并且每天定时更新，详情参见另外一篇文章 [Google Container Registry(gcr.io) 中国可用镜像(长期维护)][GoogleContainerRegistry(gcr.io)]\n\n`Private Registry for Add-Ons and Pod Infra Container Image` `index.docker.io`\n\n`Image namespace for  Add-Ons and Pod Infra Container Image` `anjia0532`\n\n`Image namespace for kubernetes-helm Image` `anjia0532`\n\n`Pod Infra Container Image` `anjia0532`\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg)\n\n\n### 创建k8s环境\n\n![创建k8s环境](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg)\n\n### 选择k8s环境并添加主机\n\n![选择k8s环境并添加主机](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg)\n\n### 查看k8s基础服务状态\n\n当基础服务都是绿色后，即可使用\n\n![查看k8s基础服务状态](http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg)\n\n### 查看k8s 仪表板 dashboard\n![查看k8s 仪表板 dashboard](http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg)\n\n## 异常排查\n\n如果打开dashboard 报 `503 ServiceUnavailable` , 非常感谢群内`@天阑-李小威` 耐心解答，同时 参考 [Kubernetes 部署失败的 10 个最普遍原因（Part 1）][Kubernetes部署失败的10个最普遍原因（part1）] 解决了好几个问题\n\n打开`Cli`\n\n```bash\n> kubectl --namespace=kube-system  get pods\nNAME                                   READY     STATUS             RESTARTS   AGE\nheapster-79684d56d6-8pjrd              1/1       Running            0          13m\nkube-dns-7f59fd996-nkvv5               3/3       Running            0          13m\nkubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m\nmonitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m\nmonitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m\ntiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m\n\n# 复\n> kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5\n# 我这是正常Running的日志,ImagePullBackOff的没截下来\n Events:\n  Type    Reason                 Age   From               Message\n  ----    ------                 ----  ----               -------\n  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s\n  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded for volume \"io-rancher-system-token-lb68r\"\n  Normal  Pulled                 16m   kubelet, k8s       Container image \"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\" already present on machine\n  Normal  Created                16m   kubelet, k8s       Created container\n  Normal  Started                16m   kubelet, k8s       Started container\n\n# 也可以根据 events 来辅助排查问题\n> kubectl --namespace=kube-system get events\n```\n\n博客 [https://anjia.ml/2017/11/13/rancher-k8s-china/][blog]\n掘金 [https://juejin.im/post/5a097599f265da430d578385][juejin]\n简书 [http://www.jianshu.com/p/2f906a7f4bfa][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/13/rancher-k8s-china/\n[juejin]: https://juejin.im/post/5a097599f265da430d578385\n[jianshu]: http://www.jianshu.com/p/2f906a7f4bfa\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n[《rancher安装Kubernetes》]: https://anjia.ml/2017/11/10/rancher-k8s/\n[《原生加速中国区Kubernetes安装》]: https://www.cnrancher.com/kubernetes-installation/\n[Kubernetes部署失败的10个最普遍原因（part1）]: http://dockone.io/article/2247\n[https://hub.docker.com/r/anjia0532/]: https://hub.docker.com/r/anjia0532/\n[GoogleContainerRegistry(gcr.io)]: https://anjia.ml/2017/11/15/gcr-io-image-mirror/\n","slug":"rancher-k8s-china","published":1,"updated":"2017-11-15T06:25:09.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5memp000x5gdopqxiuvt1","content":"<p>上篇 <a href=\"https://anjia.ml/2017/11/10/rancher-k8s/\">《rancher安装Kubernetes》</a> 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的<code>gcr.io</code>的镜像。</p>\n<p>本文是在群内<code>@天阑-李小威</code> <code>@洪晓露</code> <code>@logan</code> 等大神指导下,并根据 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">《原生加速中国区Kubernetes安装》</a>，最终搞定的方案</p>\n<a id=\"more\"></a>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>Docker version 1.12.6</td>\n<td>v1.6.11</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<p><strong>一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard</strong></p>\n<p>如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 <code>docker 1.12.3+</code> 的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://releases.rancher.com/install-docker/1.12.sh | sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<p>如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为<code>google_containers</code>,建议v1.6.11+</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 &amp;&amp; sudo docker logs -f rancher-server</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p>如果之前安装过docker和k8s，需要运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f -v $(docker ps -aq) </span><br><span class=\"line\">docker volume rm $(docker volume ls)</span><br><span class=\"line\">sudo rm -rf /var/etcd/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建环境模板\"><a href=\"#创建环境模板\" class=\"headerlink\" title=\"创建环境模板\"></a>创建环境模板</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg\" alt=\"创建环境模板\"></p>\n<h3 id=\"修改k8s模板\"><a href=\"#修改k8s模板\" class=\"headerlink\" title=\"修改k8s模板\"></a>修改k8s模板</h3><p>鉴于<code>gfw</code>屏蔽<code>gcr.io</code>的情况，花了点时间，将所有的<code>gcr.io</code>镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 <a href=\"https://hub.docker.com/r/anjia0532/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/anjia0532/</a> 并且每天定时更新，详情参见另外一篇文章 <a href=\"https://anjia.ml/2017/11/15/gcr-io-image-mirror/\">Google Container Registry(gcr.io) 中国可用镜像(长期维护)</a></p>\n<p><code>Private Registry for Add-Ons and Pod Infra Container Image</code> <code>index.docker.io</code></p>\n<p><code>Image namespace for  Add-Ons and Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><code>Image namespace for kubernetes-helm Image</code> <code>anjia0532</code></p>\n<p><code>Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg\" alt=\"修改k8s模板\"></p>\n<h3 id=\"创建k8s环境\"><a href=\"#创建k8s环境\" class=\"headerlink\" title=\"创建k8s环境\"></a>创建k8s环境</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg\" alt=\"创建k8s环境\"></p>\n<h3 id=\"选择k8s环境并添加主机\"><a href=\"#选择k8s环境并添加主机\" class=\"headerlink\" title=\"选择k8s环境并添加主机\"></a>选择k8s环境并添加主机</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg\" alt=\"选择k8s环境并添加主机\"></p>\n<h3 id=\"查看k8s基础服务状态\"><a href=\"#查看k8s基础服务状态\" class=\"headerlink\" title=\"查看k8s基础服务状态\"></a>查看k8s基础服务状态</h3><p>当基础服务都是绿色后，即可使用</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg\" alt=\"查看k8s基础服务状态\"></p>\n<h3 id=\"查看k8s-仪表板-dashboard\"><a href=\"#查看k8s-仪表板-dashboard\" class=\"headerlink\" title=\"查看k8s 仪表板 dashboard\"></a>查看k8s 仪表板 dashboard</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg\" alt=\"查看k8s 仪表板 dashboard\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg\" alt=\"\"></p>\n<h2 id=\"异常排查\"><a href=\"#异常排查\" class=\"headerlink\" title=\"异常排查\"></a>异常排查</h2><p>如果打开dashboard 报 <code>503 ServiceUnavailable</code> , 非常感谢群内<code>@天阑-李小威</code> 耐心解答，同时 参考 <a href=\"http://dockone.io/article/2247\" target=\"_blank\" rel=\"noopener\">Kubernetes 部署失败的 10 个最普遍原因（Part 1）</a> 解决了好几个问题</p>\n<p>打开<code>Cli</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                   READY     STATUS             RESTARTS   AGE</span><br><span class=\"line\">heapster-79684d56d6-8pjrd              1/1       Running            0          13m</span><br><span class=\"line\">kube-dns-7f59fd996-nkvv5               3/3       Running            0          13m</span><br><span class=\"line\">kubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m</span><br><span class=\"line\">monitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m</span><br><span class=\"line\">monitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m</span><br><span class=\"line\">tiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5</span><br><span class=\"line\"><span class=\"comment\"># 我这是正常Running的日志,ImagePullBackOff的没截下来</span></span><br><span class=\"line\"> Events:</span><br><span class=\"line\">  Type    Reason                 Age   From               Message</span><br><span class=\"line\">  ----    ------                 ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s</span><br><span class=\"line\">  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded <span class=\"keyword\">for</span> volume <span class=\"string\">\"io-rancher-system-token-lb68r\"</span></span><br><span class=\"line\">  Normal  Pulled                 16m   kubelet, k8s       Container image <span class=\"string\">\"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\"</span> already present on machine</span><br><span class=\"line\">  Normal  Created                16m   kubelet, k8s       Created container</span><br><span class=\"line\">  Normal  Started                16m   kubelet, k8s       Started container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以根据 events 来辅助排查问题</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system get events</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/11/13/rancher-k8s-china/\">https://anjia.ml/2017/11/13/rancher-k8s-china/</a><br>掘金 <a href=\"https://juejin.im/post/5a097599f265da430d578385\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a097599f265da430d578385</a><br>简书 <a href=\"http://www.jianshu.com/p/2f906a7f4bfa\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2f906a7f4bfa</a></p>\n","site":{"data":{}},"excerpt":"<p>上篇 <a href=\"https://anjia.ml/2017/11/10/rancher-k8s/\">《rancher安装Kubernetes》</a> 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的<code>gcr.io</code>的镜像。</p>\n<p>本文是在群内<code>@天阑-李小威</code> <code>@洪晓露</code> <code>@logan</code> 等大神指导下,并根据 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">《原生加速中国区Kubernetes安装》</a>，最终搞定的方案</p>","more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>Docker version 1.12.6</td>\n<td>v1.6.11</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<p><strong>一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard</strong></p>\n<p>如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 <code>docker 1.12.3+</code> 的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://releases.rancher.com/install-docker/1.12.sh | sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<p>如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为<code>google_containers</code>,建议v1.6.11+</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 &amp;&amp; sudo docker logs -f rancher-server</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p>如果之前安装过docker和k8s，需要运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f -v $(docker ps -aq) </span><br><span class=\"line\">docker volume rm $(docker volume ls)</span><br><span class=\"line\">sudo rm -rf /var/etcd/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建环境模板\"><a href=\"#创建环境模板\" class=\"headerlink\" title=\"创建环境模板\"></a>创建环境模板</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg\" alt=\"创建环境模板\"></p>\n<h3 id=\"修改k8s模板\"><a href=\"#修改k8s模板\" class=\"headerlink\" title=\"修改k8s模板\"></a>修改k8s模板</h3><p>鉴于<code>gfw</code>屏蔽<code>gcr.io</code>的情况，花了点时间，将所有的<code>gcr.io</code>镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 <a href=\"https://hub.docker.com/r/anjia0532/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/anjia0532/</a> 并且每天定时更新，详情参见另外一篇文章 <a href=\"https://anjia.ml/2017/11/15/gcr-io-image-mirror/\">Google Container Registry(gcr.io) 中国可用镜像(长期维护)</a></p>\n<p><code>Private Registry for Add-Ons and Pod Infra Container Image</code> <code>index.docker.io</code></p>\n<p><code>Image namespace for  Add-Ons and Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><code>Image namespace for kubernetes-helm Image</code> <code>anjia0532</code></p>\n<p><code>Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg\" alt=\"修改k8s模板\"></p>\n<h3 id=\"创建k8s环境\"><a href=\"#创建k8s环境\" class=\"headerlink\" title=\"创建k8s环境\"></a>创建k8s环境</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg\" alt=\"创建k8s环境\"></p>\n<h3 id=\"选择k8s环境并添加主机\"><a href=\"#选择k8s环境并添加主机\" class=\"headerlink\" title=\"选择k8s环境并添加主机\"></a>选择k8s环境并添加主机</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg\" alt=\"选择k8s环境并添加主机\"></p>\n<h3 id=\"查看k8s基础服务状态\"><a href=\"#查看k8s基础服务状态\" class=\"headerlink\" title=\"查看k8s基础服务状态\"></a>查看k8s基础服务状态</h3><p>当基础服务都是绿色后，即可使用</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg\" alt=\"查看k8s基础服务状态\"></p>\n<h3 id=\"查看k8s-仪表板-dashboard\"><a href=\"#查看k8s-仪表板-dashboard\" class=\"headerlink\" title=\"查看k8s 仪表板 dashboard\"></a>查看k8s 仪表板 dashboard</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg\" alt=\"查看k8s 仪表板 dashboard\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg\" alt=\"\"></p>\n<h2 id=\"异常排查\"><a href=\"#异常排查\" class=\"headerlink\" title=\"异常排查\"></a>异常排查</h2><p>如果打开dashboard 报 <code>503 ServiceUnavailable</code> , 非常感谢群内<code>@天阑-李小威</code> 耐心解答，同时 参考 <a href=\"http://dockone.io/article/2247\" target=\"_blank\" rel=\"noopener\">Kubernetes 部署失败的 10 个最普遍原因（Part 1）</a> 解决了好几个问题</p>\n<p>打开<code>Cli</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                   READY     STATUS             RESTARTS   AGE</span><br><span class=\"line\">heapster-79684d56d6-8pjrd              1/1       Running            0          13m</span><br><span class=\"line\">kube-dns-7f59fd996-nkvv5               3/3       Running            0          13m</span><br><span class=\"line\">kubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m</span><br><span class=\"line\">monitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m</span><br><span class=\"line\">monitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m</span><br><span class=\"line\">tiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5</span><br><span class=\"line\"><span class=\"comment\"># 我这是正常Running的日志,ImagePullBackOff的没截下来</span></span><br><span class=\"line\"> Events:</span><br><span class=\"line\">  Type    Reason                 Age   From               Message</span><br><span class=\"line\">  ----    ------                 ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s</span><br><span class=\"line\">  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded <span class=\"keyword\">for</span> volume <span class=\"string\">\"io-rancher-system-token-lb68r\"</span></span><br><span class=\"line\">  Normal  Pulled                 16m   kubelet, k8s       Container image <span class=\"string\">\"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\"</span> already present on machine</span><br><span class=\"line\">  Normal  Created                16m   kubelet, k8s       Created container</span><br><span class=\"line\">  Normal  Started                16m   kubelet, k8s       Started container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以根据 events 来辅助排查问题</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system get events</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/11/13/rancher-k8s-china/\">https://anjia.ml/2017/11/13/rancher-k8s-china/</a><br>掘金 <a href=\"https://juejin.im/post/5a097599f265da430d578385\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a097599f265da430d578385</a><br>简书 <a href=\"http://www.jianshu.com/p/2f906a7f4bfa\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2f906a7f4bfa</a></p>"},{"title":"nginx正则表达式快捷测试方法","date":"2017-06-29T08:03:19.000Z","_content":"之前在配置时都是本地起一个nginx服务，修改`location`规则,然后`nginx -s reload` 或则 `service nginx reload`不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. [在线工具](http://tool.oschina.net/regex/))又因为使用的库不同，多少存在差异。\n\n<!-- more -->\n\n正则表达式有不同的规则引擎，具体参见 wikipedia的 [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries)\n\nnginx使用的是[PCRE](http://www.pcre.org/)\n\n截取nginx官方文档 [Building nginx from Sources](http://nginx.org/en/docs/configure.html)\n> --with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.\n\n建议使用linux下的 `grep` 工具\n\nwindows可以使用[cygwin](http://www.cygwin.com/) 或者[git for windows](https://git-for-windows.github.io/)中的`git-bash.exe`\n\n```bash\n$ grep --help\n\n# ...\n\nRegexp selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n\n# ...\n```\n\n使用 `grep -P`命令即可\n\n```bash\n$ echo 'a.gif' | grep -P '\\.(jp?g|gif|bmp|png)'\n\n#输出\na.gif\n\n```\n\n如果只想输出匹配部分，则加上`-o`参数\n\n```bash\n$ echo 'a.gif' | grep -P -o '\\.(jp?g|gif|bmp|png)'\n\n#输出\n.gif\n```\n\n具体 perl 正则表达式语法，可参考\n\n[Perl regular expressions man page](http://perldoc.perl.org/perlre.html)\n\n[汤姆的猫-Perl入门（四）Perl的正则表达式](http://blog.csdn.net/sunshoupo211/article/details/31769837)\n\n\n博客 [https://anjia.ml/2017/06/29/nginx-regex-test-way/][blog]\n简书 [http://www.jianshu.com/p/17eb0ba22ff6][jianshu]\n掘金 [https://juejin.im/post/5954ad1b5188250d8f602bca][juejin]\n\n[jianshu]: http://www.jianshu.com/p/17eb0ba22ff6\n[juejin]: https://juejin.im/post/5954ad1b5188250d8f602bca\n[blog]: https://anjia.ml/2017/06/29/nginx-regex-test-way/","source":"_posts/nginx-regex-test-way.md","raw":"---\ntitle: nginx正则表达式快捷测试方法\ndate: 2017-06-29 16:03:19\ntags: [nginx]\ncategories: [nginx]\n---\n之前在配置时都是本地起一个nginx服务，修改`location`规则,然后`nginx -s reload` 或则 `service nginx reload`不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. [在线工具](http://tool.oschina.net/regex/))又因为使用的库不同，多少存在差异。\n\n<!-- more -->\n\n正则表达式有不同的规则引擎，具体参见 wikipedia的 [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries)\n\nnginx使用的是[PCRE](http://www.pcre.org/)\n\n截取nginx官方文档 [Building nginx from Sources](http://nginx.org/en/docs/configure.html)\n> --with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.\n\n建议使用linux下的 `grep` 工具\n\nwindows可以使用[cygwin](http://www.cygwin.com/) 或者[git for windows](https://git-for-windows.github.io/)中的`git-bash.exe`\n\n```bash\n$ grep --help\n\n# ...\n\nRegexp selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n\n# ...\n```\n\n使用 `grep -P`命令即可\n\n```bash\n$ echo 'a.gif' | grep -P '\\.(jp?g|gif|bmp|png)'\n\n#输出\na.gif\n\n```\n\n如果只想输出匹配部分，则加上`-o`参数\n\n```bash\n$ echo 'a.gif' | grep -P -o '\\.(jp?g|gif|bmp|png)'\n\n#输出\n.gif\n```\n\n具体 perl 正则表达式语法，可参考\n\n[Perl regular expressions man page](http://perldoc.perl.org/perlre.html)\n\n[汤姆的猫-Perl入门（四）Perl的正则表达式](http://blog.csdn.net/sunshoupo211/article/details/31769837)\n\n\n博客 [https://anjia.ml/2017/06/29/nginx-regex-test-way/][blog]\n简书 [http://www.jianshu.com/p/17eb0ba22ff6][jianshu]\n掘金 [https://juejin.im/post/5954ad1b5188250d8f602bca][juejin]\n\n[jianshu]: http://www.jianshu.com/p/17eb0ba22ff6\n[juejin]: https://juejin.im/post/5954ad1b5188250d8f602bca\n[blog]: https://anjia.ml/2017/06/29/nginx-regex-test-way/","slug":"nginx-regex-test-way","published":1,"updated":"2017-06-29T08:18:30.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mems00105gdon10xi8si","content":"<p>之前在配置时都是本地起一个nginx服务，修改<code>location</code>规则,然后<code>nginx -s reload</code> 或则 <code>service nginx reload</code>不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. <a href=\"http://tool.oschina.net/regex/\" target=\"_blank\" rel=\"noopener\">在线工具</a>)又因为使用的库不同，多少存在差异。</p>\n<a id=\"more\"></a>\n<p>正则表达式有不同的规则引擎，具体参见 wikipedia的 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries\" target=\"_blank\" rel=\"noopener\">Comparison of regular expression engines</a></p>\n<p>nginx使用的是<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">PCRE</a></p>\n<p>截取nginx官方文档 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a></p>\n<blockquote>\n<p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p>\n</blockquote>\n<p>建议使用linux下的 <code>grep</code> 工具</p>\n<p>windows可以使用<a href=\"http://www.cygwin.com/\" target=\"_blank\" rel=\"noopener\">cygwin</a> 或者<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">git for windows</a>中的<code>git-bash.exe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ grep --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Regexp selection and interpretation:</span><br><span class=\"line\">  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)</span><br><span class=\"line\">  -F, --fixed-strings       PATTERN is a <span class=\"built_in\">set</span> of newline-separated strings</span><br><span class=\"line\">  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)</span><br><span class=\"line\">  -P, --perl-regexp         PATTERN is a Perl regular expression</span><br><span class=\"line\">  -e, --regexp=PATTERN      use PATTERN <span class=\"keyword\">for</span> matching</span><br><span class=\"line\">  -f, --file=FILE           obtain PATTERN from FILE</span><br><span class=\"line\">  -i, --ignore-case         ignore <span class=\"keyword\">case</span> distinctions</span><br><span class=\"line\">  -w, --word-regexp         force PATTERN to match only whole words</span><br><span class=\"line\">  -x, --line-regexp         force PATTERN to match only whole lines</span><br><span class=\"line\">  -z, --null-data           a data line ends <span class=\"keyword\">in</span> 0 byte, not newline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>grep -P</code>命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a.gif</span><br></pre></td></tr></table></figure>\n<p>如果只想输出匹配部分，则加上<code>-o</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P -o <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">.gif</span><br></pre></td></tr></table></figure>\n<p>具体 perl 正则表达式语法，可参考</p>\n<p><a href=\"http://perldoc.perl.org/perlre.html\" target=\"_blank\" rel=\"noopener\">Perl regular expressions man page</a></p>\n<p><a href=\"http://blog.csdn.net/sunshoupo211/article/details/31769837\" target=\"_blank\" rel=\"noopener\">汤姆的猫-Perl入门（四）Perl的正则表达式</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/29/nginx-regex-test-way/\">https://anjia.ml/2017/06/29/nginx-regex-test-way/</a><br>简书 <a href=\"http://www.jianshu.com/p/17eb0ba22ff6\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/17eb0ba22ff6</a><br>掘金 <a href=\"https://juejin.im/post/5954ad1b5188250d8f602bca\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5954ad1b5188250d8f602bca</a></p>\n","site":{"data":{}},"excerpt":"<p>之前在配置时都是本地起一个nginx服务，修改<code>location</code>规则,然后<code>nginx -s reload</code> 或则 <code>service nginx reload</code>不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. <a href=\"http://tool.oschina.net/regex/\" target=\"_blank\" rel=\"noopener\">在线工具</a>)又因为使用的库不同，多少存在差异。</p>","more":"<p>正则表达式有不同的规则引擎，具体参见 wikipedia的 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries\" target=\"_blank\" rel=\"noopener\">Comparison of regular expression engines</a></p>\n<p>nginx使用的是<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">PCRE</a></p>\n<p>截取nginx官方文档 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a></p>\n<blockquote>\n<p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p>\n</blockquote>\n<p>建议使用linux下的 <code>grep</code> 工具</p>\n<p>windows可以使用<a href=\"http://www.cygwin.com/\" target=\"_blank\" rel=\"noopener\">cygwin</a> 或者<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">git for windows</a>中的<code>git-bash.exe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ grep --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Regexp selection and interpretation:</span><br><span class=\"line\">  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)</span><br><span class=\"line\">  -F, --fixed-strings       PATTERN is a <span class=\"built_in\">set</span> of newline-separated strings</span><br><span class=\"line\">  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)</span><br><span class=\"line\">  -P, --perl-regexp         PATTERN is a Perl regular expression</span><br><span class=\"line\">  -e, --regexp=PATTERN      use PATTERN <span class=\"keyword\">for</span> matching</span><br><span class=\"line\">  -f, --file=FILE           obtain PATTERN from FILE</span><br><span class=\"line\">  -i, --ignore-case         ignore <span class=\"keyword\">case</span> distinctions</span><br><span class=\"line\">  -w, --word-regexp         force PATTERN to match only whole words</span><br><span class=\"line\">  -x, --line-regexp         force PATTERN to match only whole lines</span><br><span class=\"line\">  -z, --null-data           a data line ends <span class=\"keyword\">in</span> 0 byte, not newline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>grep -P</code>命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a.gif</span><br></pre></td></tr></table></figure>\n<p>如果只想输出匹配部分，则加上<code>-o</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P -o <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">.gif</span><br></pre></td></tr></table></figure>\n<p>具体 perl 正则表达式语法，可参考</p>\n<p><a href=\"http://perldoc.perl.org/perlre.html\" target=\"_blank\" rel=\"noopener\">Perl regular expressions man page</a></p>\n<p><a href=\"http://blog.csdn.net/sunshoupo211/article/details/31769837\" target=\"_blank\" rel=\"noopener\">汤姆的猫-Perl入门（四）Perl的正则表达式</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/29/nginx-regex-test-way/\">https://anjia.ml/2017/06/29/nginx-regex-test-way/</a><br>简书 <a href=\"http://www.jianshu.com/p/17eb0ba22ff6\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/17eb0ba22ff6</a><br>掘金 <a href=\"https://juejin.im/post/5954ad1b5188250d8f602bca\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5954ad1b5188250d8f602bca</a></p>"},{"title":"rancher安装Kubernetes","date":"2017-11-10T02:57:14.000Z","_content":"\n目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载`gcr.io` registry的镜像基本没戏。\n\n而rancher中国的两篇博文 [Rancher-k8s加速安装文档][] 和 [原生加速中国区Kubernetes安装][] 我是死活没成功。\n\n本文主要介绍，如何在国内，使用`rancher`加速`k8s`的安装，部分内容也适用于直接原生`k8s`加速\n\n<!--more-->\n\n** 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》**\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  | docker version | ranhcer version |\n|--------------|---------------|--------------------------------------|----------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.06.2-ce     | v1.6.10         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker-ce version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg)\n\n复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时`kubernetes-dashboard`是打不开的，提示 `Service unavailable`\n\n按照 群内 `@天阑-李小威` \n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg)\n\n给的命令，在`cli`执行 `kubectl --namespace=kube-system get pods`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg)\n\n发现容器一直卡住.\n\n打开`CLI` 运行\n```bash\nk8s=(\n    heapster\n    kube-dns\n    kubernetes-dashboard\n    monitoring-grafana\n    monitoring-influxdb\n    tiller-deploy\n)\nfor imageName in ${k8s[@]} ; do\n    for t in $(kubectl --namespace=kube-system describe deployment $imageName | grep gcr | awk '{print $2}') ; do\n        echo $t\n    done\ndone\n```\n输出类似\n```\ngcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\ngcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\ngcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\ngcr.io/google_containers/heapster-grafana-amd64:v4.0.2\ngcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\ngcr.io/kubernetes-helm/tiller:v2.3.0\n```\n\n找一台能翻墙的vps,`docker login` 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建`Dockerfile`，里面很简单 `FROM gcr.io/google_containers/.....` 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限\n\n```bash\n#!/usr/bin/env bash\n\nhubName=anjia0532\n\nimages=(\n    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\n    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\n    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\n    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2\n    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\n    gcr.io/kubernetes-helm/tiller:v2.3.0\n)\n\nfor imageName in ${images[@]} ; do\n    imgName=$(echo ${imageName} | cut -d\"/\" -f3)\n    docker pull $imageName\n    docker tag $imageName $hubName/$imgName\n    docker push $hubName/$imgName\ndone\n```\n\n将`k8s-cli`中输出的版本，替换到`images`中，并修改`hubName`为自己实际的`docker hub` 账号,运行。\n\n输出类似\n```\n$ docker images\nanjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB\nanjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB\nanjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB\nanjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB\nanjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB\nanjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB\nanjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB\nanjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB\n```\n\n\n修改`kube-system`的镜像地址,打开cli运行,注意将`anjia0532`替换成`docker hub`账号\n\n```bash\nkubectl --namespace=kube-system edit deployment  heapster\nkubectl --namespace=kube-system edit deployment  kube-dns\nkubectl --namespace=kube-system edit deployment  kubernetes-dashboard\nkubectl --namespace=kube-system edit deployment  monitoring-grafana\nkubectl --namespace=kube-system edit deployment  monitoring-influxdb\n#替换\n:%s#gcr.io/google_containers#anjia0532#g\n#保存\n:wq!\n\nkubectl --namespace=kube-system edit deployment  tiller-deploy\n#替换\n:%s#gcr.io/kubernetes-helm#anjia0532#g\n#保存\n:wq!\n```\n\n运行\n```bash\n\n$ kubectl --namespace=kube-system  get pods\nNAME                                    READY     STATUS              RESTARTS   AGE\nheapster-2407085140-hgddj               0/1       ContainerCreating   0          48m\nkube-dns-570853077-hcqzg                0/3       Pending             0          1h\nkube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h\nkubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m\nmonitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m\nmonitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m\ntiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m\n```\n\n查看状态，我这边一直`Pending` 手动囧一个,找到原因,后续补充.\n\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n","source":"_posts/rancher-k8s.md","raw":"---\ntitle: rancher安装Kubernetes\ndate: 2017-11-10 10:57:14\ntags: [k8s,kubernetes,rancher]\n---\n\n目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载`gcr.io` registry的镜像基本没戏。\n\n而rancher中国的两篇博文 [Rancher-k8s加速安装文档][] 和 [原生加速中国区Kubernetes安装][] 我是死活没成功。\n\n本文主要介绍，如何在国内，使用`rancher`加速`k8s`的安装，部分内容也适用于直接原生`k8s`加速\n\n<!--more-->\n\n** 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》**\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  | docker version | ranhcer version |\n|--------------|---------------|--------------------------------------|----------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.06.2-ce     | v1.6.10         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker-ce version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg)\n\n复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时`kubernetes-dashboard`是打不开的，提示 `Service unavailable`\n\n按照 群内 `@天阑-李小威` \n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg)\n\n给的命令，在`cli`执行 `kubectl --namespace=kube-system get pods`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg)\n\n发现容器一直卡住.\n\n打开`CLI` 运行\n```bash\nk8s=(\n    heapster\n    kube-dns\n    kubernetes-dashboard\n    monitoring-grafana\n    monitoring-influxdb\n    tiller-deploy\n)\nfor imageName in ${k8s[@]} ; do\n    for t in $(kubectl --namespace=kube-system describe deployment $imageName | grep gcr | awk '{print $2}') ; do\n        echo $t\n    done\ndone\n```\n输出类似\n```\ngcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\ngcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\ngcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\ngcr.io/google_containers/heapster-grafana-amd64:v4.0.2\ngcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\ngcr.io/kubernetes-helm/tiller:v2.3.0\n```\n\n找一台能翻墙的vps,`docker login` 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建`Dockerfile`，里面很简单 `FROM gcr.io/google_containers/.....` 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限\n\n```bash\n#!/usr/bin/env bash\n\nhubName=anjia0532\n\nimages=(\n    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\n    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\n    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\n    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2\n    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\n    gcr.io/kubernetes-helm/tiller:v2.3.0\n)\n\nfor imageName in ${images[@]} ; do\n    imgName=$(echo ${imageName} | cut -d\"/\" -f3)\n    docker pull $imageName\n    docker tag $imageName $hubName/$imgName\n    docker push $hubName/$imgName\ndone\n```\n\n将`k8s-cli`中输出的版本，替换到`images`中，并修改`hubName`为自己实际的`docker hub` 账号,运行。\n\n输出类似\n```\n$ docker images\nanjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB\nanjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB\nanjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB\nanjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB\nanjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB\nanjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB\nanjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB\nanjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB\n```\n\n\n修改`kube-system`的镜像地址,打开cli运行,注意将`anjia0532`替换成`docker hub`账号\n\n```bash\nkubectl --namespace=kube-system edit deployment  heapster\nkubectl --namespace=kube-system edit deployment  kube-dns\nkubectl --namespace=kube-system edit deployment  kubernetes-dashboard\nkubectl --namespace=kube-system edit deployment  monitoring-grafana\nkubectl --namespace=kube-system edit deployment  monitoring-influxdb\n#替换\n:%s#gcr.io/google_containers#anjia0532#g\n#保存\n:wq!\n\nkubectl --namespace=kube-system edit deployment  tiller-deploy\n#替换\n:%s#gcr.io/kubernetes-helm#anjia0532#g\n#保存\n:wq!\n```\n\n运行\n```bash\n\n$ kubectl --namespace=kube-system  get pods\nNAME                                    READY     STATUS              RESTARTS   AGE\nheapster-2407085140-hgddj               0/1       ContainerCreating   0          48m\nkube-dns-570853077-hcqzg                0/3       Pending             0          1h\nkube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h\nkubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m\nmonitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m\nmonitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m\ntiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m\n```\n\n查看状态，我这边一直`Pending` 手动囧一个,找到原因,后续补充.\n\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n","slug":"rancher-k8s","published":1,"updated":"2017-11-13T14:52:42.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5men000125gdo1xgqecpu","content":"<p>目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载<code>gcr.io</code> registry的镜像基本没戏。</p>\n<p>而rancher中国的两篇博文 <a href=\"https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\" target=\"_blank\" rel=\"noopener\">Rancher-k8s加速安装文档</a> 和 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">原生加速中国区Kubernetes安装</a> 我是死活没成功。</p>\n<p>本文主要介绍，如何在国内，使用<code>rancher</code>加速<code>k8s</code>的安装，部分内容也适用于直接原生<code>k8s</code>加速</p>\n<a id=\"more\"></a>\n<p><strong> 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》</strong></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.06.2-ce</td>\n<td>v1.6.10</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker-ce version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg\" alt=\"\"></p>\n<p>复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时<code>kubernetes-dashboard</code>是打不开的，提示 <code>Service unavailable</code></p>\n<p>按照 群内 <code>@天阑-李小威</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg\" alt=\"\"></p>\n<p>给的命令，在<code>cli</code>执行 <code>kubectl --namespace=kube-system get pods</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg\" alt=\"\"></p>\n<p>发现容器一直卡住.</p>\n<p>打开<code>CLI</code> 运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">k8s=(</span><br><span class=\"line\">    heapster</span><br><span class=\"line\">    kube-dns</span><br><span class=\"line\">    kubernetes-dashboard</span><br><span class=\"line\">    monitoring-grafana</span><br><span class=\"line\">    monitoring-influxdb</span><br><span class=\"line\">    tiller-deploy</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;k8s[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> $(kubectl --namespace=kube-system describe deployment <span class=\"variable\">$imageName</span> | grep gcr | awk <span class=\"string\">'&#123;print $2&#125;'</span>) ; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$t</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">gcr.io/kubernetes-helm/tiller:v2.3.0</span><br></pre></td></tr></table></figure></p>\n<p>找一台能翻墙的vps,<code>docker login</code> 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建<code>Dockerfile</code>，里面很简单 <code>FROM gcr.io/google_containers/.....</code> 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">hubName=anjia0532</span><br><span class=\"line\"></span><br><span class=\"line\">images=(</span><br><span class=\"line\">    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">    gcr.io/kubernetes-helm/tiller:v2.3.0</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    imgName=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;imageName&#125;</span> | cut -d<span class=\"string\">\"/\"</span> -f3)</span><br><span class=\"line\">    docker pull <span class=\"variable\">$imageName</span></span><br><span class=\"line\">    docker tag <span class=\"variable\">$imageName</span> <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\">    docker push <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>将<code>k8s-cli</code>中输出的版本，替换到<code>images</code>中，并修改<code>hubName</code>为自己实际的<code>docker hub</code> 账号,运行。</p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">anjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB</span><br><span class=\"line\">anjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB</span><br><span class=\"line\">anjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB</span><br><span class=\"line\">anjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB</span><br><span class=\"line\">anjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB</span><br><span class=\"line\">anjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB</span><br><span class=\"line\">anjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB</span><br><span class=\"line\">anjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>kube-system</code>的镜像地址,打开cli运行,注意将<code>anjia0532</code>替换成<code>docker hub</code>账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl --namespace=kube-system edit deployment  heapster</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kube-dns</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kubernetes-dashboard</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-grafana</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-influxdb</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/google_containers#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  tiller-deploy</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/kubernetes-helm#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br></pre></td></tr></table></figure>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                    READY     STATUS              RESTARTS   AGE</span><br><span class=\"line\">heapster-2407085140-hgddj               0/1       ContainerCreating   0          48m</span><br><span class=\"line\">kube-dns-570853077-hcqzg                0/3       Pending             0          1h</span><br><span class=\"line\">kube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h</span><br><span class=\"line\">kubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m</span><br><span class=\"line\">tiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m</span><br></pre></td></tr></table></figure></p>\n<p>查看状态，我这边一直<code>Pending</code> 手动囧一个,找到原因,后续补充.</p>\n","site":{"data":{}},"excerpt":"<p>目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载<code>gcr.io</code> registry的镜像基本没戏。</p>\n<p>而rancher中国的两篇博文 <a href=\"https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\" target=\"_blank\" rel=\"noopener\">Rancher-k8s加速安装文档</a> 和 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">原生加速中国区Kubernetes安装</a> 我是死活没成功。</p>\n<p>本文主要介绍，如何在国内，使用<code>rancher</code>加速<code>k8s</code>的安装，部分内容也适用于直接原生<code>k8s</code>加速</p>","more":"<p><strong> 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》</strong></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.06.2-ce</td>\n<td>v1.6.10</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker-ce version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg\" alt=\"\"></p>\n<p>复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时<code>kubernetes-dashboard</code>是打不开的，提示 <code>Service unavailable</code></p>\n<p>按照 群内 <code>@天阑-李小威</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg\" alt=\"\"></p>\n<p>给的命令，在<code>cli</code>执行 <code>kubectl --namespace=kube-system get pods</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg\" alt=\"\"></p>\n<p>发现容器一直卡住.</p>\n<p>打开<code>CLI</code> 运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">k8s=(</span><br><span class=\"line\">    heapster</span><br><span class=\"line\">    kube-dns</span><br><span class=\"line\">    kubernetes-dashboard</span><br><span class=\"line\">    monitoring-grafana</span><br><span class=\"line\">    monitoring-influxdb</span><br><span class=\"line\">    tiller-deploy</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;k8s[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> $(kubectl --namespace=kube-system describe deployment <span class=\"variable\">$imageName</span> | grep gcr | awk <span class=\"string\">'&#123;print $2&#125;'</span>) ; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$t</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">gcr.io/kubernetes-helm/tiller:v2.3.0</span><br></pre></td></tr></table></figure></p>\n<p>找一台能翻墙的vps,<code>docker login</code> 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建<code>Dockerfile</code>，里面很简单 <code>FROM gcr.io/google_containers/.....</code> 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">hubName=anjia0532</span><br><span class=\"line\"></span><br><span class=\"line\">images=(</span><br><span class=\"line\">    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">    gcr.io/kubernetes-helm/tiller:v2.3.0</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    imgName=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;imageName&#125;</span> | cut -d<span class=\"string\">\"/\"</span> -f3)</span><br><span class=\"line\">    docker pull <span class=\"variable\">$imageName</span></span><br><span class=\"line\">    docker tag <span class=\"variable\">$imageName</span> <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\">    docker push <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>将<code>k8s-cli</code>中输出的版本，替换到<code>images</code>中，并修改<code>hubName</code>为自己实际的<code>docker hub</code> 账号,运行。</p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">anjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB</span><br><span class=\"line\">anjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB</span><br><span class=\"line\">anjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB</span><br><span class=\"line\">anjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB</span><br><span class=\"line\">anjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB</span><br><span class=\"line\">anjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB</span><br><span class=\"line\">anjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB</span><br><span class=\"line\">anjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>kube-system</code>的镜像地址,打开cli运行,注意将<code>anjia0532</code>替换成<code>docker hub</code>账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl --namespace=kube-system edit deployment  heapster</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kube-dns</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kubernetes-dashboard</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-grafana</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-influxdb</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/google_containers#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  tiller-deploy</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/kubernetes-helm#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br></pre></td></tr></table></figure>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                    READY     STATUS              RESTARTS   AGE</span><br><span class=\"line\">heapster-2407085140-hgddj               0/1       ContainerCreating   0          48m</span><br><span class=\"line\">kube-dns-570853077-hcqzg                0/3       Pending             0          1h</span><br><span class=\"line\">kube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h</span><br><span class=\"line\">kubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m</span><br><span class=\"line\">tiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m</span><br></pre></td></tr></table></figure></p>\n<p>查看状态，我这边一直<code>Pending</code> 手动囧一个,找到原因,后续补充.</p>"},{"title":"openresty(nginx) redis 通用工具类","date":"2017-08-16T06:47:41.000Z","_content":"\n[openresty/lua-resty-redis][] 是章亦春开发的openresty中的操作redis的库。\n\n截取官方部分代码，进行说明\n\n```lua\n    local redis = require \"resty.redis\"\n    local red = redis:new()\n\n    red:set_timeout(1000) -- 1 sec --设置超时时间\n\n    local ok, err = red:connect(\"127.0.0.1\", 6379) --设置redis的host和port\n    if not ok then --判断生成连接是否失败\n        ngx.say(\"failed to connect: \", err)\n        return\n    end\n\n    ok, err = red:set(\"dog\", \"an animal\") --插入键值(类似 mysql insert)\n    if not ok then --判断操作是否成功\n        ngx.say(\"failed to set dog: \", err)\n        return\n    end\n\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n    -- put it into the connection pool of size 100,\n    -- with 10 seconds max idle time\n    local ok, err = red:set_keepalive(10000, 100) --将连接放入连接池,100个连接，最长10秒的闲置时间\n    if not ok then --判断放池结果\n        ngx.say(\"failed to set keepalive: \", err)\n        return\n    end\n    -- 如果不放池，用完就关闭的话，用下面的写法\n    -- or just close the connection right away:\n    -- local ok, err = red:close()\n    -- if not ok then\n    --     ngx.say(\"failed to close: \", err)\n    --     return\n    -- end\n```\n\n如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。\n\n同样的内容，使用我封装后的代码。\n\n```lua\n    -- 依赖库\n    local redis = require \"resty.redis-util\"\n    -- 初始化\n    local red = redis:new();\n    -- 插入键值\n    local ok,err = red:set(\"dog\",\"an animal\")\n    -- 判断结果\n    if not ok then\n      ngx.say(\"failed to set dog:\",err)\n      return\n    end\n    -- 页面打印结果\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n```\n\n详细使用方法，参见我的项目 [anjia0532/lua-resty-redis-util][]\n\n博客 [https://anjia.ml/2017/08/16/openresty-redis-common-utils/][blog]\n掘金 [https://juejin.im/post/5993fea8518825242d5f72fb][juejin]\n简书 [http://www.jianshu.com/p/54cca5f33d48][jianshu]\n\n[blog]: https://anjia.ml/2017/08/16/openresty-redis-common-utils/\n[juejin]: https://juejin.im/post/5993fea8518825242d5f72fb\n[jianshu]: http://www.jianshu.com/p/54cca5f33d48\n[openresty/lua-resty-redis]: https://github.com/openresty/lua-resty-redis\n[anjia0532/lua-resty-redis-util]: https://github.com/anjia0532/lua-resty-redis-util\n","source":"_posts/openresty-redis-common-utils.md","raw":"---\ntitle: openresty(nginx) redis 通用工具类\ndate: 2017-08-16 14:47:41\ntags: [nginx,redis,lua,openresty,lua-resty-redis]\n---\n\n[openresty/lua-resty-redis][] 是章亦春开发的openresty中的操作redis的库。\n\n截取官方部分代码，进行说明\n\n```lua\n    local redis = require \"resty.redis\"\n    local red = redis:new()\n\n    red:set_timeout(1000) -- 1 sec --设置超时时间\n\n    local ok, err = red:connect(\"127.0.0.1\", 6379) --设置redis的host和port\n    if not ok then --判断生成连接是否失败\n        ngx.say(\"failed to connect: \", err)\n        return\n    end\n\n    ok, err = red:set(\"dog\", \"an animal\") --插入键值(类似 mysql insert)\n    if not ok then --判断操作是否成功\n        ngx.say(\"failed to set dog: \", err)\n        return\n    end\n\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n    -- put it into the connection pool of size 100,\n    -- with 10 seconds max idle time\n    local ok, err = red:set_keepalive(10000, 100) --将连接放入连接池,100个连接，最长10秒的闲置时间\n    if not ok then --判断放池结果\n        ngx.say(\"failed to set keepalive: \", err)\n        return\n    end\n    -- 如果不放池，用完就关闭的话，用下面的写法\n    -- or just close the connection right away:\n    -- local ok, err = red:close()\n    -- if not ok then\n    --     ngx.say(\"failed to close: \", err)\n    --     return\n    -- end\n```\n\n如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。\n\n同样的内容，使用我封装后的代码。\n\n```lua\n    -- 依赖库\n    local redis = require \"resty.redis-util\"\n    -- 初始化\n    local red = redis:new();\n    -- 插入键值\n    local ok,err = red:set(\"dog\",\"an animal\")\n    -- 判断结果\n    if not ok then\n      ngx.say(\"failed to set dog:\",err)\n      return\n    end\n    -- 页面打印结果\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n```\n\n详细使用方法，参见我的项目 [anjia0532/lua-resty-redis-util][]\n\n博客 [https://anjia.ml/2017/08/16/openresty-redis-common-utils/][blog]\n掘金 [https://juejin.im/post/5993fea8518825242d5f72fb][juejin]\n简书 [http://www.jianshu.com/p/54cca5f33d48][jianshu]\n\n[blog]: https://anjia.ml/2017/08/16/openresty-redis-common-utils/\n[juejin]: https://juejin.im/post/5993fea8518825242d5f72fb\n[jianshu]: http://www.jianshu.com/p/54cca5f33d48\n[openresty/lua-resty-redis]: https://github.com/openresty/lua-resty-redis\n[anjia0532/lua-resty-redis-util]: https://github.com/anjia0532/lua-resty-redis-util\n","slug":"openresty-redis-common-utils","published":1,"updated":"2017-08-16T08:18:30.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5men100155gdowkjy0tki","content":"<p><a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"noopener\">openresty/lua-resty-redis</a> 是章亦春开发的openresty中的操作redis的库。</p>\n<p>截取官方部分代码，进行说明</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis\"</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new()</span><br><span class=\"line\"></span><br><span class=\"line\">red:set_timeout(<span class=\"number\">1000</span>) <span class=\"comment\">-- 1 sec --设置超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:connect(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">6379</span>) <span class=\"comment\">--设置redis的host和port</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断生成连接是否失败</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to connect: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ok, err = red:set(<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"an animal\"</span>) <span class=\"comment\">--插入键值(类似 mysql insert)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断操作是否成功</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set dog: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br><span class=\"line\"><span class=\"comment\">-- put it into the connection pool of size 100,</span></span><br><span class=\"line\"><span class=\"comment\">-- with 10 seconds max idle time</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:set_keepalive(<span class=\"number\">10000</span>, <span class=\"number\">100</span>) <span class=\"comment\">--将连接放入连接池,100个连接，最长10秒的闲置时间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断放池结果</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set keepalive: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果不放池，用完就关闭的话，用下面的写法</span></span><br><span class=\"line\"><span class=\"comment\">-- or just close the connection right away:</span></span><br><span class=\"line\"><span class=\"comment\">-- local ok, err = red:close()</span></span><br><span class=\"line\"><span class=\"comment\">-- if not ok then</span></span><br><span class=\"line\"><span class=\"comment\">--     ngx.say(\"failed to close: \", err)</span></span><br><span class=\"line\"><span class=\"comment\">--     return</span></span><br><span class=\"line\"><span class=\"comment\">-- end</span></span><br></pre></td></tr></table></figure>\n<p>如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。</p>\n<p>同样的内容，使用我封装后的代码。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 依赖库</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis-util\"</span></span><br><span class=\"line\"><span class=\"comment\">-- 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new();</span><br><span class=\"line\"><span class=\"comment\">-- 插入键值</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok,err = red:set(<span class=\"string\">\"dog\"</span>,<span class=\"string\">\"an animal\"</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 判断结果</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">  ngx.say(<span class=\"string\">\"failed to set dog:\"</span>,err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 页面打印结果</span></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br></pre></td></tr></table></figure>\n<p>详细使用方法，参见我的项目 <a href=\"https://github.com/anjia0532/lua-resty-redis-util\" target=\"_blank\" rel=\"noopener\">anjia0532/lua-resty-redis-util</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/16/openresty-redis-common-utils/\">https://anjia.ml/2017/08/16/openresty-redis-common-utils/</a><br>掘金 <a href=\"https://juejin.im/post/5993fea8518825242d5f72fb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5993fea8518825242d5f72fb</a><br>简书 <a href=\"http://www.jianshu.com/p/54cca5f33d48\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/54cca5f33d48</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"noopener\">openresty/lua-resty-redis</a> 是章亦春开发的openresty中的操作redis的库。</p>\n<p>截取官方部分代码，进行说明</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis\"</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new()</span><br><span class=\"line\"></span><br><span class=\"line\">red:set_timeout(<span class=\"number\">1000</span>) <span class=\"comment\">-- 1 sec --设置超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:connect(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">6379</span>) <span class=\"comment\">--设置redis的host和port</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断生成连接是否失败</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to connect: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ok, err = red:set(<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"an animal\"</span>) <span class=\"comment\">--插入键值(类似 mysql insert)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断操作是否成功</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set dog: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br><span class=\"line\"><span class=\"comment\">-- put it into the connection pool of size 100,</span></span><br><span class=\"line\"><span class=\"comment\">-- with 10 seconds max idle time</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:set_keepalive(<span class=\"number\">10000</span>, <span class=\"number\">100</span>) <span class=\"comment\">--将连接放入连接池,100个连接，最长10秒的闲置时间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断放池结果</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set keepalive: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果不放池，用完就关闭的话，用下面的写法</span></span><br><span class=\"line\"><span class=\"comment\">-- or just close the connection right away:</span></span><br><span class=\"line\"><span class=\"comment\">-- local ok, err = red:close()</span></span><br><span class=\"line\"><span class=\"comment\">-- if not ok then</span></span><br><span class=\"line\"><span class=\"comment\">--     ngx.say(\"failed to close: \", err)</span></span><br><span class=\"line\"><span class=\"comment\">--     return</span></span><br><span class=\"line\"><span class=\"comment\">-- end</span></span><br></pre></td></tr></table></figure>\n<p>如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。</p>\n<p>同样的内容，使用我封装后的代码。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 依赖库</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis-util\"</span></span><br><span class=\"line\"><span class=\"comment\">-- 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new();</span><br><span class=\"line\"><span class=\"comment\">-- 插入键值</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok,err = red:set(<span class=\"string\">\"dog\"</span>,<span class=\"string\">\"an animal\"</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 判断结果</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">  ngx.say(<span class=\"string\">\"failed to set dog:\"</span>,err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 页面打印结果</span></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br></pre></td></tr></table></figure>\n<p>详细使用方法，参见我的项目 <a href=\"https://github.com/anjia0532/lua-resty-redis-util\" target=\"_blank\" rel=\"noopener\">anjia0532/lua-resty-redis-util</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/16/openresty-redis-common-utils/\">https://anjia.ml/2017/08/16/openresty-redis-common-utils/</a><br>掘金 <a href=\"https://juejin.im/post/5993fea8518825242d5f72fb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5993fea8518825242d5f72fb</a><br>简书 <a href=\"http://www.jianshu.com/p/54cca5f33d48\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/54cca5f33d48</a></p>\n"},{"title":"自建私有云Owncloud+Nginx（支持16G大文件上传）","date":"2017-04-05T04:21:25.000Z","_content":"\n## [Owncloud官网](https://owncloud.org/)\n桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry\n\n## 环境\n- Ubuntu-16.04_64\n- Owncloud9.14-2.1\n- SQLite3\n- PHP7\n- Nginx 1.10.0\n\n## 最简单安装\n\n### 根据linux版本选择相应版本\n[owncloud-9.1](http://download.owncloud.org/download/repositories/9.1/owncloud/)\n\n### 安装\n以Ubuntu-16.04 安装owncloud-9.14-2.1为例\n\n#### 用root权限添加owncloud密钥\n\n```bash\nsu root\n\nwget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key\napt-key add - < Release.key\n```\n\n#### 用root权限添加owncloud软件源\n```bash\nsh -c \"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' > /etc/apt/sources.list.d/owncloud.list\"\napt  update -y && apt install owncloud -y\n```\n\n## 源码安装\n\n### 安装PHP7\n\n```bash\nsudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring\n```\n\n### 安装数据库\n```bash\n#mariadb\nsudo apt-get install -y mariadb-server php7.0-mysql\n\n#sqlite3\nsudo apt-get install -y sqlite3 php7.0-sqlite3\n```\n\n### 安装web容器\n```bash\n#apache2\nsudo apt-get install -y apache2 libapache2-mod-php7.0\n\n#nginx\nsudo apt-get install -y nginx php7.0-fpm \n```\n\n### 修改fpm配置文件(nginx)\n```bash\n$ vi /etc/php/7.0/fpm/pool.d/www.conf\n```\n\n修改`listen = /run/php/php7.0-fpm.sock`为`listen=127.0.0.1:9000`(大约36行)\n\n放开`env`的注释(大约384-388行)\n```\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\n```\n\n\n### 下载最新源码\n```bash\n$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  && sudo unzip /tmp/owncloud-latest.zip -d /var/www/ && rm -rf /tmp/owncloud-latest.zip\n```\n\n### 给www-data授权\n```bash\nsudo chown -R www-data:www-data /var/www/owncloud/\n```\n\n### 参考资料\n[官方nginx+https配置](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html)\n\n[支持大文件上传(16G)](https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB)\n\n### 我的nginx配置\n\n#### nginx\n```bash\n$ vi  /etc/nginx/sites-enabled/owncloud.conf\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 10010;\n    server_name 127.0.0.1;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /var/www/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 16400M;\n    fastcgi_buffers 64 4K;\n    fastcgi_read_timeout 600;\n    client_body_buffer_size 1048576k;\n    client_body_temp_path /tmp/owncloud;\n    \n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    #pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        #fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off; #Available since nginx 1.7.11\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n```\n#### php.ini\n```bash\n\n$ sudo vi /etc/php/7.0/fpm/php.ini\n\n##修改以下几个配置参数\n\n; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB\npost_max_size = 16400M\n\n; cannot be bigger than post_max_size\nupload_max_filesize = 16G\n\n; on online servers this could require bigger values (my server is at home)\nmax_input_time = 3600\n\n; from ownCloud documentation - not sure if is required\noutput_buffering = Off\n\n; not sure if it is required [3] but it seems like ownCloud needs time to move the file to it's\n; final place after upload and that can take quite some time for big files\nmax_execution_time = 1800\n\n; you may also want to point this to a folder having enough space for big files being uploaded\nupload_tmp_dir = /tmp/owncloud\n\n```\n\n\n### 启动服务\n```bash\n$ sudo service php7.0-fpm restart\n\n$ sudo service nginx restart\n```\n\n### 配置\n浏览器打开`http://127.0.0.1:10010`,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html 和https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\n\n![owncloud.png](https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png)\n\n### 配置域名\n详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\n```bash\nsudo vi /var/www/owncloud/config/config.php\n```\n修改\n```\n'trusted_domains' => \n  array (\n    0 => '127.0.0.1:10010',\n    1 => '域名',\n  ),\n```\n\n修改\n```\n'overwrite.cli.url' => 'http://域名',\n```\n\n### 创建用户\n\n浏览器访问`http://127.0.0.1:10010/settings/users`,用管理员用户名密码登陆\n\n### 下载客户端\n\n参见 https://owncloud.org/install/#install-clients","source":"_posts/owncloud.md","raw":"---\ntitle: 自建私有云Owncloud+Nginx（支持16G大文件上传）\ndate: 2017-04-05 12:21:25\ntags: [owncloud]\ncategories: [owncloud]\n---\n\n## [Owncloud官网](https://owncloud.org/)\n桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry\n\n## 环境\n- Ubuntu-16.04_64\n- Owncloud9.14-2.1\n- SQLite3\n- PHP7\n- Nginx 1.10.0\n\n## 最简单安装\n\n### 根据linux版本选择相应版本\n[owncloud-9.1](http://download.owncloud.org/download/repositories/9.1/owncloud/)\n\n### 安装\n以Ubuntu-16.04 安装owncloud-9.14-2.1为例\n\n#### 用root权限添加owncloud密钥\n\n```bash\nsu root\n\nwget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key\napt-key add - < Release.key\n```\n\n#### 用root权限添加owncloud软件源\n```bash\nsh -c \"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' > /etc/apt/sources.list.d/owncloud.list\"\napt  update -y && apt install owncloud -y\n```\n\n## 源码安装\n\n### 安装PHP7\n\n```bash\nsudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring\n```\n\n### 安装数据库\n```bash\n#mariadb\nsudo apt-get install -y mariadb-server php7.0-mysql\n\n#sqlite3\nsudo apt-get install -y sqlite3 php7.0-sqlite3\n```\n\n### 安装web容器\n```bash\n#apache2\nsudo apt-get install -y apache2 libapache2-mod-php7.0\n\n#nginx\nsudo apt-get install -y nginx php7.0-fpm \n```\n\n### 修改fpm配置文件(nginx)\n```bash\n$ vi /etc/php/7.0/fpm/pool.d/www.conf\n```\n\n修改`listen = /run/php/php7.0-fpm.sock`为`listen=127.0.0.1:9000`(大约36行)\n\n放开`env`的注释(大约384-388行)\n```\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\n```\n\n\n### 下载最新源码\n```bash\n$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  && sudo unzip /tmp/owncloud-latest.zip -d /var/www/ && rm -rf /tmp/owncloud-latest.zip\n```\n\n### 给www-data授权\n```bash\nsudo chown -R www-data:www-data /var/www/owncloud/\n```\n\n### 参考资料\n[官方nginx+https配置](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html)\n\n[支持大文件上传(16G)](https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB)\n\n### 我的nginx配置\n\n#### nginx\n```bash\n$ vi  /etc/nginx/sites-enabled/owncloud.conf\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 10010;\n    server_name 127.0.0.1;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /var/www/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 16400M;\n    fastcgi_buffers 64 4K;\n    fastcgi_read_timeout 600;\n    client_body_buffer_size 1048576k;\n    client_body_temp_path /tmp/owncloud;\n    \n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    #pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        #fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off; #Available since nginx 1.7.11\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n```\n#### php.ini\n```bash\n\n$ sudo vi /etc/php/7.0/fpm/php.ini\n\n##修改以下几个配置参数\n\n; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB\npost_max_size = 16400M\n\n; cannot be bigger than post_max_size\nupload_max_filesize = 16G\n\n; on online servers this could require bigger values (my server is at home)\nmax_input_time = 3600\n\n; from ownCloud documentation - not sure if is required\noutput_buffering = Off\n\n; not sure if it is required [3] but it seems like ownCloud needs time to move the file to it's\n; final place after upload and that can take quite some time for big files\nmax_execution_time = 1800\n\n; you may also want to point this to a folder having enough space for big files being uploaded\nupload_tmp_dir = /tmp/owncloud\n\n```\n\n\n### 启动服务\n```bash\n$ sudo service php7.0-fpm restart\n\n$ sudo service nginx restart\n```\n\n### 配置\n浏览器打开`http://127.0.0.1:10010`,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html 和https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\n\n![owncloud.png](https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png)\n\n### 配置域名\n详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\n```bash\nsudo vi /var/www/owncloud/config/config.php\n```\n修改\n```\n'trusted_domains' => \n  array (\n    0 => '127.0.0.1:10010',\n    1 => '域名',\n  ),\n```\n\n修改\n```\n'overwrite.cli.url' => 'http://域名',\n```\n\n### 创建用户\n\n浏览器访问`http://127.0.0.1:10010/settings/users`,用管理员用户名密码登陆\n\n### 下载客户端\n\n参见 https://owncloud.org/install/#install-clients","slug":"owncloud","published":1,"updated":"2017-04-10T16:02:41.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5men400195gdol52n2k1h","content":"<h2 id=\"Owncloud官网\"><a href=\"#Owncloud官网\" class=\"headerlink\" title=\"Owncloud官网\"></a><a href=\"https://owncloud.org/\" target=\"_blank\" rel=\"noopener\">Owncloud官网</a></h2><p>桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Ubuntu-16.04_64</li>\n<li>Owncloud9.14-2.1</li>\n<li>SQLite3</li>\n<li>PHP7</li>\n<li>Nginx 1.10.0</li>\n</ul>\n<h2 id=\"最简单安装\"><a href=\"#最简单安装\" class=\"headerlink\" title=\"最简单安装\"></a>最简单安装</h2><h3 id=\"根据linux版本选择相应版本\"><a href=\"#根据linux版本选择相应版本\" class=\"headerlink\" title=\"根据linux版本选择相应版本\"></a>根据linux版本选择相应版本</h3><p><a href=\"http://download.owncloud.org/download/repositories/9.1/owncloud/\" target=\"_blank\" rel=\"noopener\">owncloud-9.1</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>以Ubuntu-16.04 安装owncloud-9.14-2.1为例</p>\n<h4 id=\"用root权限添加owncloud密钥\"><a href=\"#用root权限添加owncloud密钥\" class=\"headerlink\" title=\"用root权限添加owncloud密钥\"></a>用root权限添加owncloud密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\"></span><br><span class=\"line\">wget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key</span><br><span class=\"line\">apt-key add - &lt; Release.key</span><br></pre></td></tr></table></figure>\n<h4 id=\"用root权限添加owncloud软件源\"><a href=\"#用root权限添加owncloud软件源\" class=\"headerlink\" title=\"用root权限添加owncloud软件源\"></a>用root权限添加owncloud软件源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' &gt; /etc/apt/sources.list.d/owncloud.list\"</span></span><br><span class=\"line\">apt  update -y &amp;&amp; apt install owncloud -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mariadb</span></span><br><span class=\"line\">sudo apt-get install -y mariadb-server php7.0-mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sqlite3</span></span><br><span class=\"line\">sudo apt-get install -y sqlite3 php7.0-sqlite3</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装web容器\"><a href=\"#安装web容器\" class=\"headerlink\" title=\"安装web容器\"></a>安装web容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#apache2</span></span><br><span class=\"line\">sudo apt-get install -y apache2 libapache2-mod-php7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx</span></span><br><span class=\"line\">sudo apt-get install -y nginx php7.0-fpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改fpm配置文件-nginx\"><a href=\"#修改fpm配置文件-nginx\" class=\"headerlink\" title=\"修改fpm配置文件(nginx)\"></a>修改fpm配置文件(nginx)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi /etc/php/7.0/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure>\n<p>修改<code>listen = /run/php/php7.0-fpm.sock</code>为<code>listen=127.0.0.1:9000</code>(大约36行)</p>\n<p>放开<code>env</code>的注释(大约384-388行)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">env[HOSTNAME] = $HOSTNAME</span><br><span class=\"line\">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class=\"line\">env[TMP] = /tmp</span><br><span class=\"line\">env[TMPDIR] = /tmp</span><br><span class=\"line\">env[TEMP] = /tmp</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载最新源码\"><a href=\"#下载最新源码\" class=\"headerlink\" title=\"下载最新源码\"></a>下载最新源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  &amp;&amp; sudo unzip /tmp/owncloud-latest.zip -d /var/www/ &amp;&amp; rm -rf /tmp/owncloud-latest.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"给www-data授权\"><a href=\"#给www-data授权\" class=\"headerlink\" title=\"给www-data授权\"></a>给www-data授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chown -R www-data:www-data /var/www/owncloud/</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html\" target=\"_blank\" rel=\"noopener\">官方nginx+https配置</a></p>\n<p><a href=\"https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB\" target=\"_blank\" rel=\"noopener\">支持大文件上传(16G)</a></p>\n<h3 id=\"我的nginx配置\"><a href=\"#我的nginx配置\" class=\"headerlink\" title=\"我的nginx配置\"></a>我的nginx配置</h3><h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi  /etc/nginx/sites-enabled/owncloud.conf</span><br><span class=\"line\"></span><br><span class=\"line\">upstream php-handler &#123;</span><br><span class=\"line\">    server 127.0.0.1:9000;</span><br><span class=\"line\">    <span class=\"comment\">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 10010;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Add headers to serve security related headers</span></span><br><span class=\"line\">    <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">    <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">    add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">    add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">    add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">    add_header X-Robots-Tag none;</span><br><span class=\"line\">    add_header X-Download-Options noopen;</span><br><span class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Path to the root of your installation</span></span><br><span class=\"line\">    root /var/www/owncloud/;</span><br><span class=\"line\"></span><br><span class=\"line\">    location = /robots.txt &#123;</span><br><span class=\"line\">        allow all;</span><br><span class=\"line\">        log_not_found off;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment it if you're planning to use this app.</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location = /.well-known/carddav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location = /.well-known/caldav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># set max upload size</span></span><br><span class=\"line\">    client_max_body_size 16400M;</span><br><span class=\"line\">    fastcgi_buffers 64 4K;</span><br><span class=\"line\">    fastcgi_read_timeout 600;</span><br><span class=\"line\">    client_body_buffer_size 1048576k;</span><br><span class=\"line\">    client_body_temp_path /tmp/owncloud;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Disable gzip to avoid the removal of the ETag header</span></span><br><span class=\"line\">    gzip off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class=\"line\">    <span class=\"comment\"># This module is currently not supported.</span></span><br><span class=\"line\">    <span class=\"comment\">#pagespeed off;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 403 /core/templates/403.php;</span><br><span class=\"line\">    error_page 404 /core/templates/404.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^ /index.php<span class=\"variable\">$uri</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</span><br><span class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        fastcgi_param PATH_INFO <span class=\"variable\">$fastcgi_path_info</span>;</span><br><span class=\"line\">        <span class=\"comment\">#fastcgi_param HTTPS on;</span></span><br><span class=\"line\">        fastcgi_param modHeadersAvailable <span class=\"literal\">true</span>; <span class=\"comment\">#Avoid sending the security headers twice</span></span><br><span class=\"line\">        fastcgi_param front_controller_active <span class=\"literal\">true</span>;</span><br><span class=\"line\">        fastcgi_pass php-handler;</span><br><span class=\"line\">        fastcgi_intercept_errors on;</span><br><span class=\"line\">        fastcgi_request_buffering off; <span class=\"comment\">#Available since nginx 1.7.11</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Adding the cache control header for js and css files</span></span><br><span class=\"line\">    <span class=\"comment\"># Make sure it is BELOW the PHP block</span></span><br><span class=\"line\">    location ~* \\.(?:css|js)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        add_header Cache-Control <span class=\"string\">\"public, max-age=7200\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</span></span><br><span class=\"line\">        <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">        <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">        add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">        add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">        add_header X-Robots-Tag none;</span><br><span class=\"line\">        add_header X-Download-Options noopen;</span><br><span class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to other assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"php-ini\"><a href=\"#php-ini\" class=\"headerlink\" title=\"php.ini\"></a>php.ini</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/php/7.0/fpm/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##修改以下几个配置参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB</span><br><span class=\"line\">post_max_size = 16400M</span><br><span class=\"line\"></span><br><span class=\"line\">; cannot be bigger than post_max_size</span><br><span class=\"line\">upload_max_filesize = 16G</span><br><span class=\"line\"></span><br><span class=\"line\">; on online servers this could require bigger values (my server is at home)</span><br><span class=\"line\">max_input_time = 3600</span><br><span class=\"line\"></span><br><span class=\"line\">; from ownCloud documentation - not sure <span class=\"keyword\">if</span> is required</span><br><span class=\"line\">output_buffering = Off</span><br><span class=\"line\"></span><br><span class=\"line\">; not sure <span class=\"keyword\">if</span> it is required [3] but it seems like ownCloud needs time to move the file to it<span class=\"string\">'s</span></span><br><span class=\"line\"><span class=\"string\">; final place after upload and that can take quite some time for big files</span></span><br><span class=\"line\"><span class=\"string\">max_execution_time = 1800</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">; you may also want to point this to a folder having enough space for big files being uploaded</span></span><br><span class=\"line\"><span class=\"string\">upload_tmp_dir = /tmp/owncloud</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service php7.0-fpm restart</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>浏览器打开<code>http://127.0.0.1:10010</code>,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html</a> 和<a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png\" alt=\"owncloud.png\"></p>\n<h3 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h3><p>详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /var/www/owncloud/config/config.php</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;trusted_domains&apos; =&gt; </span><br><span class=\"line\">  array (</span><br><span class=\"line\">    0 =&gt; &apos;127.0.0.1:10010&apos;,</span><br><span class=\"line\">    1 =&gt; &apos;域名&apos;,</span><br><span class=\"line\">  ),</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;overwrite.cli.url&apos; =&gt; &apos;http://域名&apos;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>浏览器访问<code>http://127.0.0.1:10010/settings/users</code>,用管理员用户名密码登陆</p>\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><p>参见 <a href=\"https://owncloud.org/install/#install-clients\" target=\"_blank\" rel=\"noopener\">https://owncloud.org/install/#install-clients</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Owncloud官网\"><a href=\"#Owncloud官网\" class=\"headerlink\" title=\"Owncloud官网\"></a><a href=\"https://owncloud.org/\" target=\"_blank\" rel=\"noopener\">Owncloud官网</a></h2><p>桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Ubuntu-16.04_64</li>\n<li>Owncloud9.14-2.1</li>\n<li>SQLite3</li>\n<li>PHP7</li>\n<li>Nginx 1.10.0</li>\n</ul>\n<h2 id=\"最简单安装\"><a href=\"#最简单安装\" class=\"headerlink\" title=\"最简单安装\"></a>最简单安装</h2><h3 id=\"根据linux版本选择相应版本\"><a href=\"#根据linux版本选择相应版本\" class=\"headerlink\" title=\"根据linux版本选择相应版本\"></a>根据linux版本选择相应版本</h3><p><a href=\"http://download.owncloud.org/download/repositories/9.1/owncloud/\" target=\"_blank\" rel=\"noopener\">owncloud-9.1</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>以Ubuntu-16.04 安装owncloud-9.14-2.1为例</p>\n<h4 id=\"用root权限添加owncloud密钥\"><a href=\"#用root权限添加owncloud密钥\" class=\"headerlink\" title=\"用root权限添加owncloud密钥\"></a>用root权限添加owncloud密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\"></span><br><span class=\"line\">wget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key</span><br><span class=\"line\">apt-key add - &lt; Release.key</span><br></pre></td></tr></table></figure>\n<h4 id=\"用root权限添加owncloud软件源\"><a href=\"#用root权限添加owncloud软件源\" class=\"headerlink\" title=\"用root权限添加owncloud软件源\"></a>用root权限添加owncloud软件源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' &gt; /etc/apt/sources.list.d/owncloud.list\"</span></span><br><span class=\"line\">apt  update -y &amp;&amp; apt install owncloud -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mariadb</span></span><br><span class=\"line\">sudo apt-get install -y mariadb-server php7.0-mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sqlite3</span></span><br><span class=\"line\">sudo apt-get install -y sqlite3 php7.0-sqlite3</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装web容器\"><a href=\"#安装web容器\" class=\"headerlink\" title=\"安装web容器\"></a>安装web容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#apache2</span></span><br><span class=\"line\">sudo apt-get install -y apache2 libapache2-mod-php7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx</span></span><br><span class=\"line\">sudo apt-get install -y nginx php7.0-fpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改fpm配置文件-nginx\"><a href=\"#修改fpm配置文件-nginx\" class=\"headerlink\" title=\"修改fpm配置文件(nginx)\"></a>修改fpm配置文件(nginx)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi /etc/php/7.0/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure>\n<p>修改<code>listen = /run/php/php7.0-fpm.sock</code>为<code>listen=127.0.0.1:9000</code>(大约36行)</p>\n<p>放开<code>env</code>的注释(大约384-388行)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">env[HOSTNAME] = $HOSTNAME</span><br><span class=\"line\">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class=\"line\">env[TMP] = /tmp</span><br><span class=\"line\">env[TMPDIR] = /tmp</span><br><span class=\"line\">env[TEMP] = /tmp</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载最新源码\"><a href=\"#下载最新源码\" class=\"headerlink\" title=\"下载最新源码\"></a>下载最新源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  &amp;&amp; sudo unzip /tmp/owncloud-latest.zip -d /var/www/ &amp;&amp; rm -rf /tmp/owncloud-latest.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"给www-data授权\"><a href=\"#给www-data授权\" class=\"headerlink\" title=\"给www-data授权\"></a>给www-data授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chown -R www-data:www-data /var/www/owncloud/</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html\" target=\"_blank\" rel=\"noopener\">官方nginx+https配置</a></p>\n<p><a href=\"https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB\" target=\"_blank\" rel=\"noopener\">支持大文件上传(16G)</a></p>\n<h3 id=\"我的nginx配置\"><a href=\"#我的nginx配置\" class=\"headerlink\" title=\"我的nginx配置\"></a>我的nginx配置</h3><h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi  /etc/nginx/sites-enabled/owncloud.conf</span><br><span class=\"line\"></span><br><span class=\"line\">upstream php-handler &#123;</span><br><span class=\"line\">    server 127.0.0.1:9000;</span><br><span class=\"line\">    <span class=\"comment\">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 10010;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Add headers to serve security related headers</span></span><br><span class=\"line\">    <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">    <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">    add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">    add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">    add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">    add_header X-Robots-Tag none;</span><br><span class=\"line\">    add_header X-Download-Options noopen;</span><br><span class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Path to the root of your installation</span></span><br><span class=\"line\">    root /var/www/owncloud/;</span><br><span class=\"line\"></span><br><span class=\"line\">    location = /robots.txt &#123;</span><br><span class=\"line\">        allow all;</span><br><span class=\"line\">        log_not_found off;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment it if you're planning to use this app.</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location = /.well-known/carddav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location = /.well-known/caldav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># set max upload size</span></span><br><span class=\"line\">    client_max_body_size 16400M;</span><br><span class=\"line\">    fastcgi_buffers 64 4K;</span><br><span class=\"line\">    fastcgi_read_timeout 600;</span><br><span class=\"line\">    client_body_buffer_size 1048576k;</span><br><span class=\"line\">    client_body_temp_path /tmp/owncloud;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Disable gzip to avoid the removal of the ETag header</span></span><br><span class=\"line\">    gzip off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class=\"line\">    <span class=\"comment\"># This module is currently not supported.</span></span><br><span class=\"line\">    <span class=\"comment\">#pagespeed off;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 403 /core/templates/403.php;</span><br><span class=\"line\">    error_page 404 /core/templates/404.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^ /index.php<span class=\"variable\">$uri</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</span><br><span class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        fastcgi_param PATH_INFO <span class=\"variable\">$fastcgi_path_info</span>;</span><br><span class=\"line\">        <span class=\"comment\">#fastcgi_param HTTPS on;</span></span><br><span class=\"line\">        fastcgi_param modHeadersAvailable <span class=\"literal\">true</span>; <span class=\"comment\">#Avoid sending the security headers twice</span></span><br><span class=\"line\">        fastcgi_param front_controller_active <span class=\"literal\">true</span>;</span><br><span class=\"line\">        fastcgi_pass php-handler;</span><br><span class=\"line\">        fastcgi_intercept_errors on;</span><br><span class=\"line\">        fastcgi_request_buffering off; <span class=\"comment\">#Available since nginx 1.7.11</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Adding the cache control header for js and css files</span></span><br><span class=\"line\">    <span class=\"comment\"># Make sure it is BELOW the PHP block</span></span><br><span class=\"line\">    location ~* \\.(?:css|js)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        add_header Cache-Control <span class=\"string\">\"public, max-age=7200\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</span></span><br><span class=\"line\">        <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">        <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">        add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">        add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">        add_header X-Robots-Tag none;</span><br><span class=\"line\">        add_header X-Download-Options noopen;</span><br><span class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to other assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"php-ini\"><a href=\"#php-ini\" class=\"headerlink\" title=\"php.ini\"></a>php.ini</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/php/7.0/fpm/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##修改以下几个配置参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB</span><br><span class=\"line\">post_max_size = 16400M</span><br><span class=\"line\"></span><br><span class=\"line\">; cannot be bigger than post_max_size</span><br><span class=\"line\">upload_max_filesize = 16G</span><br><span class=\"line\"></span><br><span class=\"line\">; on online servers this could require bigger values (my server is at home)</span><br><span class=\"line\">max_input_time = 3600</span><br><span class=\"line\"></span><br><span class=\"line\">; from ownCloud documentation - not sure <span class=\"keyword\">if</span> is required</span><br><span class=\"line\">output_buffering = Off</span><br><span class=\"line\"></span><br><span class=\"line\">; not sure <span class=\"keyword\">if</span> it is required [3] but it seems like ownCloud needs time to move the file to it<span class=\"string\">'s</span></span><br><span class=\"line\"><span class=\"string\">; final place after upload and that can take quite some time for big files</span></span><br><span class=\"line\"><span class=\"string\">max_execution_time = 1800</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">; you may also want to point this to a folder having enough space for big files being uploaded</span></span><br><span class=\"line\"><span class=\"string\">upload_tmp_dir = /tmp/owncloud</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service php7.0-fpm restart</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>浏览器打开<code>http://127.0.0.1:10010</code>,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html</a> 和<a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png\" alt=\"owncloud.png\"></p>\n<h3 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h3><p>详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /var/www/owncloud/config/config.php</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;trusted_domains&apos; =&gt; </span><br><span class=\"line\">  array (</span><br><span class=\"line\">    0 =&gt; &apos;127.0.0.1:10010&apos;,</span><br><span class=\"line\">    1 =&gt; &apos;域名&apos;,</span><br><span class=\"line\">  ),</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;overwrite.cli.url&apos; =&gt; &apos;http://域名&apos;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>浏览器访问<code>http://127.0.0.1:10010/settings/users</code>,用管理员用户名密码登陆</p>\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><p>参见 <a href=\"https://owncloud.org/install/#install-clients\" target=\"_blank\" rel=\"noopener\">https://owncloud.org/install/#install-clients</a></p>\n"},{"title":"OpenResty编译安装以及安全加固(WAF)","date":"2017-07-19T08:04:57.000Z","_content":"\n## [Nginx][] 还是[Tengine][Tengine]\n\nTengine是阿里巴巴的深度定制的nginx，目前最新版本[Tengine-2.2.0.tar.gz][] , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是`2016-12-02`截止到目前，已经半年多没更新了。https://github.com/alibaba/tengine 上已经有137条未关闭的issus和39条pull request\n\n下面是官网自述\n\n>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。\n\n但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架[dubbo][] 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了[dubbox][], 淘宝家的玉伯的[seajs][]\n\n补充 [alibaba/tengine/issues/921#Tengine future][linkAlibaba/tengine/issues/921#tengine] 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。\n\n而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。\n\nnginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和[security][]来考虑是否有必要升级\n\n如果不差钱，可以考虑一下 `nginx plus` ,价格很感人，[Pricing - Application Delivery for the Modern Web | NGINX][pricing]\n\n如果不差钱，其实可以考虑用 `openresty edge` ([openresty的商业版][]) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。\n<!--more-->\n## nginx\n\n**本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。**\n\nnginx本身提供编译好的二进制文件，linux的参见 [prebuilt][] ，windows的从 [download][] 下载`nginx/Windows-VERSION`相关`zip`包，建议生产环境使用 `stable`(稳定版本)\n\n如果是想从源码编译的话，从[download][] 下载`nginx-VERSION` 的`tar.gz`包，一般格式为`http://nginx.org/download/nginx-VERSION.tar.gz` 注意将`VERSION`替换成实际版本号，e.g. `1.12.1`\n\n\n### nginx编译参数\n\nubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`nginx -V`是查看构建参数，`nginx -v`是查看版本号\n```bash\n/usr/sbin/nginx -V\n\nnginx version: nginx/1.13.0\nbuilt by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) \nbuilt with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n--user=nginx  \\\n--group=nginx  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_dav_module  \\\n--with-http_flv_module  \\\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n--with-http_mp4_module  \\\n--with-http_random_index_module  \\\n--with-http_realip_module  \\\n--with-http_secure_link_module  \\\n--with-http_slice_module  \\\n--with-http_ssl_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-http_v2_module  \\\n--with-mail  \\\n--with-mail_ssl_module  \\\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n```\n\n具体参数含义可 参考官网 [Building nginx from Sources][linkBuildingNginxFromSources] 和 [梦想远航#nginx安装及编译参数详解][5225895], 如果要构建`nginx for windows`参见 [Building nginx on the Win32 platform with Visual C][linkBuildingNginxOnTheWin32Platform]\n\n### 编译nginx\n参考 官方文档 [INSTALLING NGINX OPEN SOURCE][linkInstallingNginxOpenSource]\n\n```bash\n# pcre 正则库 \n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz\n$ tar -zxf pcre-*.tar.gz\n$ cd pcre-*\n$ ./configure\n$ make && sudo make install\n\n# zlib gzip 库\n$ wget http://zlib.net/zlib-1.2.11.tar.gz\n$ tar -zxf zlib-1.2.11.tar.gz\n$ cd zlib-1.2.11\n$ ./configure\n$ make && sudo make install\n\n# openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 \n\n$ wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz\n$ tar -zxf openssl-*.tar.gz\n$ cd openssl-*\n$ ./config --prefix=/usr/local/openssl/\n$ make && sudo make install\n\n\n#主线和稳定二选一\n# 主线版本\n$ wget http://nginx.org/download/nginx-1.13.3.tar.gz\n\n#稳定版本\n$ wget http://nginx.org/download/nginx-1.12.1.tar.gz\n\n$ tar zxf nginx-*.tar.gz\n\n$ cd nginx-*\n\n$ ./configure --prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_realip_module  \\\n--with-http_slice_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n\n--with-http_v2_module  \\\n--with-http_ssl_module  \\\n\n--with-pcre=../pcre-8.41  \\\n--with-zlib=../zlib-1.2.11 \\\n\n--without-http_autoindex_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module\n\n$ make && sudo make install\n\n# 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块\n# 临时文件相关\n#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n\n# dav，媒体相关\n#--with-http_dav_module  \\\n#--with-http_flv_module  \\\n#--with-http_mp4_module  \\\n\n#随机首页，安全连接相关\n#--with-http_random_index_module  \\\n#--with-http_secure_link_module  \\\n\n#email相关\n#--with-mail  \\\n#--with-mail_ssl_module  \\\n\n#gcc相关\n#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n\n#组，用户相关\n#--user=nginx \n#--group=nginx \n#如果指定user和group 则通过此命令创建用户\n#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx\n\n#如果用不到https，可以把ssl和http2模块也禁掉\n\n#禁用未用模块，减少安全风险\n#--without-http_autoindex_module \\\n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module\n$ nginx -t && nginx\n\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n```\n\n至此nginx编译完成。可以通过`curl localhost`或者浏览器打开`localhost` 查看nginx默认页面\n\n### nginx init.d 脚本\n\n详见 [anjia0532/nginx][]\n\n## openresty\n\n学习资料 官网 [openresty][] ，开涛博客 [使用Nginx+Lua(OpenResty)开发高性能Web应用][] ，温铭的gitbook [OpenResty 最佳实践][linkOpenresty最佳实践] 温铭的stuq视频教程[OpenResty 系列课程][linkOpenresty系列课程]\n\n### 安装预编译包\n\n详见官方文档 [OpenResty® Linux 包][linkOpenresty®Linux包]\n[linkOpenresty®Linux包]: https://openresty.org/cn/linux-packages.html\n\n\n### openresty编译参数\nubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`resty -V`是查看构建参数，`resty -v`是查看版本号\n\n[openresty官方组件][] ,[nginx 模块][linkNginx模块]\n\n```bash\nnginx version: openresty/1.11.2.4\nbuilt with OpenSSL 1.0.2k  26 Jan 2017\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/usr/local/openresty/nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--add-module=../ngx_devel_kit-0.3.0 \\\n--add-module=../echo-nginx-module-0.60 \\\n--add-module=../xss-nginx-module-0.05 \\\n--add-module=../ngx_coolkit-0.2rc3 \\\n--add-module=../set-misc-nginx-module-0.31 \\\n--add-module=../form-input-nginx-module-0.12 \\\n--add-module=../encrypted-session-nginx-module-0.06 \\\n--add-module=../srcache-nginx-module-0.31 \\\n--add-module=../ngx_lua-0.10.8 \\\n--add-module=../ngx_lua_upstream-0.06 \\\n--add-module=../headers-more-nginx-module-0.32 \\\n--add-module=../array-var-nginx-module-0.05 \\\n--add-module=../memc-nginx-module-0.18 \\\n--add-module=../redis2-nginx-module-0.14 \\\n--add-module=../redis-nginx-module-0.3.7 \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-ipv6 \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_auth_request_module \\\n--with-http_secure_link_module \\\n--with-http_random_index_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-dtrace-probes \\\n--with-http_ssl_module\n```\n\n### 构建openresty\n\n参见 [构建openresty][]\n\n```bash\n$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial\n$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz\n$ tar zxf openresty-1.11.2.4.tar.gz\n\n# 或者直接从github clone 一份自行编译\n# git clone https://github.com/openresty/openresty \n# cd openresty \n# make -j4\n\n$ cd openresty-*\n\n# 查看所有编译参数\n$ ./configure --help \n\n#进行编译\n./configure --prefix=/etc/openresty \\\n--user=nginx \\\n--group=nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-dtrace-probes \\\n--with-pcre-opt=-g \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-http_ssl_module \\\n--with-http_auth_request_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_autoindex_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module \\\n--without-http_ssi_module \\\n--without-http_userid_module \\\n--without-http_browser_module \\\n--without-http_rds_json_module \\\n--without-http_rds_csv_module \\\n--without-http_memc_module \\\n--without-http_redis2_module \\\n--without-lua_resty_memcached \\\n--without-lua_resty_mysql \\\n-j4\n\n#禁用memcached模块\n#--without-http_memc_module \\\n#禁用redis模块(保留redis2模块)\n#--without-http_redis_module \\\n#禁用email相关模块\n#--without-mail_pop3_module \\\n#--without-mail_imap_module \\\n#--without-mail_smtp_module \\\n#禁用rds模块\n#--without-http_rds_json_module \\\n#--without-http_rds_csv_module  \\\n#禁用cgi \n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_autoindex_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module \\\n$ make -j4 && sudo make install\n\n#确保80端口没被占用\n$ lsof -i:80\n\n$ /opt/openresty/nginx/nginx/sbin/nginx -t && /opt/openresty/nginx/nginx/sbin/nginx\n\n$ curl localhost\n```\n\n### openresty init.d 脚本\n\n详见 [anjia0532/openresty][]\n\n```bash\n$ chmod +x /etc/init.d/openresty\n#$ systemctl mask openresty\n#$ systemctl unmask openresty\n```\n\n一般来说，只需要修改 `OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx` 为实际的应用目录即可(需要确保该有的目录都存在)\n```bash\nnginx/\n├── client_body_temp\n├── conf\n├── html\n├── logs\n└── proxy_temp\n```\n\n可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建\n\n\n\nwaf 部分暂时先搁置\n\n## WAF 基于[ModSecurity][]\n\n参考资料 [Ubuntu 15.04][linkUbuntu15.04]\n\n```bash\n$ git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1\n$ cd ModSecurity/\n$ git checkout -b v3/master origin/v3/master\n$ sh build.sh\n$ git submodule init\n$ git submodule update #[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]\n$ ./configure\n$ make\n$ sudo make install\n\n#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx\n\n$ export MODSECURITY_INC=\"/home/anjia/openresty/ModSecurity/headers\"\n$ export MODSECURITY_LIB=\"/home/anjia/openresty/ModSecurity/src/.libs\"\n$ git clone https://github.com/SpiderLabs/ModSecurity-nginx --depth=1\n$ git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1\n$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf \n$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf\n$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h\nttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping\n$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled\n#使用www-data用户\n$ sudo sed -i '1s/^/user www-data;\\n/' /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf\n#删除36-116行，即server{}段，可以在英文输入法状态按     :36,166d  然后 :wq\n#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo sed '$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; ' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n#嫌费事，也可以直接用下面的配置文件\nuser www-data;\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;\n}\n\n$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf\n\n#Load OWASP Config \nInclude crs-setup.conf \n#Load all other Rules \nInclude rules/*.conf \n#Disable rule by ID from error message \n#SecRuleRemoveById 920350\n\n$ sudo sed  s/\"SecRuleEngine DetectionOnly\"/\"SecRuleEngine On\"/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t && sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload\n$ curl \"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&searchsubmit=Buscar&page=nsp_search\"\n# 返回403 Forbidden\n```\n\n[Nginx]: http://nginx.org/\n[Tengine]: http://tengine.taobao.org/\n[Tengine-2.2.0.tar.gz]: http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\n[dubbo]: http://dubbo.io/\n[dubbox]: https://github.com/dangdangdotcom/dubbox\n[seajs]: https://github.com/seajs/seajs\n[change]: http://nginx.org/en/CHANGES\n[security]: http://nginx.org/en/security_advisories.html\n[prebuilt]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\n[download]: http://nginx.org/en/download.html\n[linkBuildingNginxFromSources]: http://nginx.org/en/docs/configure.html\n[pricing]: https://www.nginx.com/products/pricing/\n[5225895]: http://www.cnblogs.com/HKUI/p/5225895.html\n[linkBuildingNginxOnTheWin32Platform]: http://nginx.org/en/docs/howto_build_on_win32.html\n[linkInstallingNginxOpenSource]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n[openresty]: https://openresty.org/cn/\n[使用Nginx+Lua(OpenResty)开发高性能Web应用]: http://jinnianshilongnian.iteye.com/blog/2280928\n[linkOpenresty最佳实践]: https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\n[构建openresty]: https://openresty.org/cn/installation.html#-openresty\n[linkOpenresty系列课程]: http://www.stuq.org/course/1015\n[ModSecurity]: https://github.com/SpiderLabs/ModSecurity\n[linkUbuntu15.04]: https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\n[openresty官方组件]: https://openresty.org/en/components.html\n[anjia0532/openresty]: https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\n[anjia0532/nginx]: https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\n[linkAlibaba/tengine/issues/921#tengine]: https://github.com/alibaba/tengine/issues/921\n[openresty的商业版]: https://openresty.com/cn/\n[linkNginx模块]: https://www.nginx.com/resources/wiki/modules/","source":"_posts/openresty.md","raw":"---\ntitle: OpenResty编译安装以及安全加固(WAF)\ndate: 2017-07-19 16:04:57\ntags: [nginx,openresty,waf,firewall]\n---\n\n## [Nginx][] 还是[Tengine][Tengine]\n\nTengine是阿里巴巴的深度定制的nginx，目前最新版本[Tengine-2.2.0.tar.gz][] , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是`2016-12-02`截止到目前，已经半年多没更新了。https://github.com/alibaba/tengine 上已经有137条未关闭的issus和39条pull request\n\n下面是官网自述\n\n>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。\n\n但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架[dubbo][] 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了[dubbox][], 淘宝家的玉伯的[seajs][]\n\n补充 [alibaba/tengine/issues/921#Tengine future][linkAlibaba/tengine/issues/921#tengine] 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。\n\n而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。\n\nnginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和[security][]来考虑是否有必要升级\n\n如果不差钱，可以考虑一下 `nginx plus` ,价格很感人，[Pricing - Application Delivery for the Modern Web | NGINX][pricing]\n\n如果不差钱，其实可以考虑用 `openresty edge` ([openresty的商业版][]) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。\n<!--more-->\n## nginx\n\n**本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。**\n\nnginx本身提供编译好的二进制文件，linux的参见 [prebuilt][] ，windows的从 [download][] 下载`nginx/Windows-VERSION`相关`zip`包，建议生产环境使用 `stable`(稳定版本)\n\n如果是想从源码编译的话，从[download][] 下载`nginx-VERSION` 的`tar.gz`包，一般格式为`http://nginx.org/download/nginx-VERSION.tar.gz` 注意将`VERSION`替换成实际版本号，e.g. `1.12.1`\n\n\n### nginx编译参数\n\nubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`nginx -V`是查看构建参数，`nginx -v`是查看版本号\n```bash\n/usr/sbin/nginx -V\n\nnginx version: nginx/1.13.0\nbuilt by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) \nbuilt with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n--user=nginx  \\\n--group=nginx  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_dav_module  \\\n--with-http_flv_module  \\\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n--with-http_mp4_module  \\\n--with-http_random_index_module  \\\n--with-http_realip_module  \\\n--with-http_secure_link_module  \\\n--with-http_slice_module  \\\n--with-http_ssl_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-http_v2_module  \\\n--with-mail  \\\n--with-mail_ssl_module  \\\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n```\n\n具体参数含义可 参考官网 [Building nginx from Sources][linkBuildingNginxFromSources] 和 [梦想远航#nginx安装及编译参数详解][5225895], 如果要构建`nginx for windows`参见 [Building nginx on the Win32 platform with Visual C][linkBuildingNginxOnTheWin32Platform]\n\n### 编译nginx\n参考 官方文档 [INSTALLING NGINX OPEN SOURCE][linkInstallingNginxOpenSource]\n\n```bash\n# pcre 正则库 \n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz\n$ tar -zxf pcre-*.tar.gz\n$ cd pcre-*\n$ ./configure\n$ make && sudo make install\n\n# zlib gzip 库\n$ wget http://zlib.net/zlib-1.2.11.tar.gz\n$ tar -zxf zlib-1.2.11.tar.gz\n$ cd zlib-1.2.11\n$ ./configure\n$ make && sudo make install\n\n# openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 \n\n$ wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz\n$ tar -zxf openssl-*.tar.gz\n$ cd openssl-*\n$ ./config --prefix=/usr/local/openssl/\n$ make && sudo make install\n\n\n#主线和稳定二选一\n# 主线版本\n$ wget http://nginx.org/download/nginx-1.13.3.tar.gz\n\n#稳定版本\n$ wget http://nginx.org/download/nginx-1.12.1.tar.gz\n\n$ tar zxf nginx-*.tar.gz\n\n$ cd nginx-*\n\n$ ./configure --prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_realip_module  \\\n--with-http_slice_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n\n--with-http_v2_module  \\\n--with-http_ssl_module  \\\n\n--with-pcre=../pcre-8.41  \\\n--with-zlib=../zlib-1.2.11 \\\n\n--without-http_autoindex_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module\n\n$ make && sudo make install\n\n# 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块\n# 临时文件相关\n#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n\n# dav，媒体相关\n#--with-http_dav_module  \\\n#--with-http_flv_module  \\\n#--with-http_mp4_module  \\\n\n#随机首页，安全连接相关\n#--with-http_random_index_module  \\\n#--with-http_secure_link_module  \\\n\n#email相关\n#--with-mail  \\\n#--with-mail_ssl_module  \\\n\n#gcc相关\n#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n\n#组，用户相关\n#--user=nginx \n#--group=nginx \n#如果指定user和group 则通过此命令创建用户\n#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx\n\n#如果用不到https，可以把ssl和http2模块也禁掉\n\n#禁用未用模块，减少安全风险\n#--without-http_autoindex_module \\\n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module\n$ nginx -t && nginx\n\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n```\n\n至此nginx编译完成。可以通过`curl localhost`或者浏览器打开`localhost` 查看nginx默认页面\n\n### nginx init.d 脚本\n\n详见 [anjia0532/nginx][]\n\n## openresty\n\n学习资料 官网 [openresty][] ，开涛博客 [使用Nginx+Lua(OpenResty)开发高性能Web应用][] ，温铭的gitbook [OpenResty 最佳实践][linkOpenresty最佳实践] 温铭的stuq视频教程[OpenResty 系列课程][linkOpenresty系列课程]\n\n### 安装预编译包\n\n详见官方文档 [OpenResty® Linux 包][linkOpenresty®Linux包]\n[linkOpenresty®Linux包]: https://openresty.org/cn/linux-packages.html\n\n\n### openresty编译参数\nubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`resty -V`是查看构建参数，`resty -v`是查看版本号\n\n[openresty官方组件][] ,[nginx 模块][linkNginx模块]\n\n```bash\nnginx version: openresty/1.11.2.4\nbuilt with OpenSSL 1.0.2k  26 Jan 2017\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/usr/local/openresty/nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--add-module=../ngx_devel_kit-0.3.0 \\\n--add-module=../echo-nginx-module-0.60 \\\n--add-module=../xss-nginx-module-0.05 \\\n--add-module=../ngx_coolkit-0.2rc3 \\\n--add-module=../set-misc-nginx-module-0.31 \\\n--add-module=../form-input-nginx-module-0.12 \\\n--add-module=../encrypted-session-nginx-module-0.06 \\\n--add-module=../srcache-nginx-module-0.31 \\\n--add-module=../ngx_lua-0.10.8 \\\n--add-module=../ngx_lua_upstream-0.06 \\\n--add-module=../headers-more-nginx-module-0.32 \\\n--add-module=../array-var-nginx-module-0.05 \\\n--add-module=../memc-nginx-module-0.18 \\\n--add-module=../redis2-nginx-module-0.14 \\\n--add-module=../redis-nginx-module-0.3.7 \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-ipv6 \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_auth_request_module \\\n--with-http_secure_link_module \\\n--with-http_random_index_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-dtrace-probes \\\n--with-http_ssl_module\n```\n\n### 构建openresty\n\n参见 [构建openresty][]\n\n```bash\n$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial\n$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz\n$ tar zxf openresty-1.11.2.4.tar.gz\n\n# 或者直接从github clone 一份自行编译\n# git clone https://github.com/openresty/openresty \n# cd openresty \n# make -j4\n\n$ cd openresty-*\n\n# 查看所有编译参数\n$ ./configure --help \n\n#进行编译\n./configure --prefix=/etc/openresty \\\n--user=nginx \\\n--group=nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-dtrace-probes \\\n--with-pcre-opt=-g \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-http_ssl_module \\\n--with-http_auth_request_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_autoindex_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module \\\n--without-http_ssi_module \\\n--without-http_userid_module \\\n--without-http_browser_module \\\n--without-http_rds_json_module \\\n--without-http_rds_csv_module \\\n--without-http_memc_module \\\n--without-http_redis2_module \\\n--without-lua_resty_memcached \\\n--without-lua_resty_mysql \\\n-j4\n\n#禁用memcached模块\n#--without-http_memc_module \\\n#禁用redis模块(保留redis2模块)\n#--without-http_redis_module \\\n#禁用email相关模块\n#--without-mail_pop3_module \\\n#--without-mail_imap_module \\\n#--without-mail_smtp_module \\\n#禁用rds模块\n#--without-http_rds_json_module \\\n#--without-http_rds_csv_module  \\\n#禁用cgi \n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_autoindex_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module \\\n$ make -j4 && sudo make install\n\n#确保80端口没被占用\n$ lsof -i:80\n\n$ /opt/openresty/nginx/nginx/sbin/nginx -t && /opt/openresty/nginx/nginx/sbin/nginx\n\n$ curl localhost\n```\n\n### openresty init.d 脚本\n\n详见 [anjia0532/openresty][]\n\n```bash\n$ chmod +x /etc/init.d/openresty\n#$ systemctl mask openresty\n#$ systemctl unmask openresty\n```\n\n一般来说，只需要修改 `OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx` 为实际的应用目录即可(需要确保该有的目录都存在)\n```bash\nnginx/\n├── client_body_temp\n├── conf\n├── html\n├── logs\n└── proxy_temp\n```\n\n可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建\n\n\n\nwaf 部分暂时先搁置\n\n## WAF 基于[ModSecurity][]\n\n参考资料 [Ubuntu 15.04][linkUbuntu15.04]\n\n```bash\n$ git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1\n$ cd ModSecurity/\n$ git checkout -b v3/master origin/v3/master\n$ sh build.sh\n$ git submodule init\n$ git submodule update #[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]\n$ ./configure\n$ make\n$ sudo make install\n\n#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx\n\n$ export MODSECURITY_INC=\"/home/anjia/openresty/ModSecurity/headers\"\n$ export MODSECURITY_LIB=\"/home/anjia/openresty/ModSecurity/src/.libs\"\n$ git clone https://github.com/SpiderLabs/ModSecurity-nginx --depth=1\n$ git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1\n$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf \n$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf\n$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h\nttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping\n$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled\n#使用www-data用户\n$ sudo sed -i '1s/^/user www-data;\\n/' /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf\n#删除36-116行，即server{}段，可以在英文输入法状态按     :36,166d  然后 :wq\n#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo sed '$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; ' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n#嫌费事，也可以直接用下面的配置文件\nuser www-data;\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;\n}\n\n$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf\n\n#Load OWASP Config \nInclude crs-setup.conf \n#Load all other Rules \nInclude rules/*.conf \n#Disable rule by ID from error message \n#SecRuleRemoveById 920350\n\n$ sudo sed  s/\"SecRuleEngine DetectionOnly\"/\"SecRuleEngine On\"/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t && sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload\n$ curl \"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&searchsubmit=Buscar&page=nsp_search\"\n# 返回403 Forbidden\n```\n\n[Nginx]: http://nginx.org/\n[Tengine]: http://tengine.taobao.org/\n[Tengine-2.2.0.tar.gz]: http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\n[dubbo]: http://dubbo.io/\n[dubbox]: https://github.com/dangdangdotcom/dubbox\n[seajs]: https://github.com/seajs/seajs\n[change]: http://nginx.org/en/CHANGES\n[security]: http://nginx.org/en/security_advisories.html\n[prebuilt]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\n[download]: http://nginx.org/en/download.html\n[linkBuildingNginxFromSources]: http://nginx.org/en/docs/configure.html\n[pricing]: https://www.nginx.com/products/pricing/\n[5225895]: http://www.cnblogs.com/HKUI/p/5225895.html\n[linkBuildingNginxOnTheWin32Platform]: http://nginx.org/en/docs/howto_build_on_win32.html\n[linkInstallingNginxOpenSource]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n[openresty]: https://openresty.org/cn/\n[使用Nginx+Lua(OpenResty)开发高性能Web应用]: http://jinnianshilongnian.iteye.com/blog/2280928\n[linkOpenresty最佳实践]: https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\n[构建openresty]: https://openresty.org/cn/installation.html#-openresty\n[linkOpenresty系列课程]: http://www.stuq.org/course/1015\n[ModSecurity]: https://github.com/SpiderLabs/ModSecurity\n[linkUbuntu15.04]: https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\n[openresty官方组件]: https://openresty.org/en/components.html\n[anjia0532/openresty]: https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\n[anjia0532/nginx]: https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\n[linkAlibaba/tengine/issues/921#tengine]: https://github.com/alibaba/tengine/issues/921\n[openresty的商业版]: https://openresty.com/cn/\n[linkNginx模块]: https://www.nginx.com/resources/wiki/modules/","slug":"openresty","published":1,"updated":"2017-09-30T08:52:21.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5men5001b5gdos4s95rtj","content":"<h2 id=\"Nginx-还是Tengine\"><a href=\"#Nginx-还是Tengine\" class=\"headerlink\" title=\"Nginx 还是Tengine\"></a><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">Nginx</a> 还是<a href=\"http://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener\">Tengine</a></h2><p>Tengine是阿里巴巴的深度定制的nginx，目前最新版本<a href=\"http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\" target=\"_blank\" rel=\"noopener\">Tengine-2.2.0.tar.gz</a> , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是<code>2016-12-02</code>截止到目前，已经半年多没更新了。<a href=\"https://github.com/alibaba/tengine\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/tengine</a> 上已经有137条未关闭的issus和39条pull request</p>\n<p>下面是官网自述</p>\n<blockquote>\n<p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p>\n</blockquote>\n<p>但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架<a href=\"http://dubbo.io/\" target=\"_blank\" rel=\"noopener\">dubbo</a> 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">dubbox</a>, 淘宝家的玉伯的<a href=\"https://github.com/seajs/seajs\" target=\"_blank\" rel=\"noopener\">seajs</a></p>\n<p>补充 <a href=\"https://github.com/alibaba/tengine/issues/921\" target=\"_blank\" rel=\"noopener\">alibaba/tengine/issues/921#Tengine future</a> 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。</p>\n<p>而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。</p>\n<p>nginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和<a href=\"http://nginx.org/en/security_advisories.html\" target=\"_blank\" rel=\"noopener\">security</a>来考虑是否有必要升级</p>\n<p>如果不差钱，可以考虑一下 <code>nginx plus</code> ,价格很感人，<a href=\"https://www.nginx.com/products/pricing/\" target=\"_blank\" rel=\"noopener\">Pricing - Application Delivery for the Modern Web | NGINX</a></p>\n<p>如果不差钱，其实可以考虑用 <code>openresty edge</code> (<a href=\"https://openresty.com/cn/\" target=\"_blank\" rel=\"noopener\">openresty的商业版</a>) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。<br><a id=\"more\"></a></p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p><strong>本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。</strong></p>\n<p>nginx本身提供编译好的二进制文件，linux的参见 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\" target=\"_blank\" rel=\"noopener\">prebuilt</a> ，windows的从 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx/Windows-VERSION</code>相关<code>zip</code>包，建议生产环境使用 <code>stable</code>(稳定版本)</p>\n<p>如果是想从源码编译的话，从<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx-VERSION</code> 的<code>tar.gz</code>包，一般格式为<code>http://nginx.org/download/nginx-VERSION.tar.gz</code> 注意将<code>VERSION</code>替换成实际版本号，e.g. <code>1.12.1</code></p>\n<h3 id=\"nginx编译参数\"><a href=\"#nginx编译参数\" class=\"headerlink\" title=\"nginx编译参数\"></a>nginx编译参数</h3><p>ubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>nginx -V</code>是查看构建参数，<code>nginx -v</code>是查看版本号<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\">nginx version: nginx/1.13.0</span><br><span class=\"line\">built by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) </span><br><span class=\"line\">built with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span><br><span class=\"line\">--user=nginx  \\</span><br><span class=\"line\">--group=nginx  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_dav_module  \\</span><br><span class=\"line\">--with-http_flv_module  \\</span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\">--with-http_mp4_module  \\</span><br><span class=\"line\">--with-http_random_index_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_secure_link_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-mail  \\</span><br><span class=\"line\">--with-mail_ssl_module  \\</span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'</span>  \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br></pre></td></tr></table></figure></p>\n<p>具体参数含义可 参考官网 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a> 和 <a href=\"http://www.cnblogs.com/HKUI/p/5225895.html\" target=\"_blank\" rel=\"noopener\">梦想远航#nginx安装及编译参数详解</a>, 如果要构建<code>nginx for windows</code>参见 <a href=\"http://nginx.org/en/docs/howto_build_on_win32.html\" target=\"_blank\" rel=\"noopener\">Building nginx on the Win32 platform with Visual C</a></p>\n<h3 id=\"编译nginx\"><a href=\"#编译nginx\" class=\"headerlink\" title=\"编译nginx\"></a>编译nginx</h3><p>参考 官方文档 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"noopener\">INSTALLING NGINX OPEN SOURCE</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pcre 正则库 </span></span><br><span class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz</span><br><span class=\"line\">$ tar -zxf pcre-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> pcre-*</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zlib gzip 库</span></span><br><span class=\"line\">$ wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ tar -zxf zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.11</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$ wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2l.tar.gz</span><br><span class=\"line\">$ tar -zxf openssl-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openssl-*</span><br><span class=\"line\">$ ./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl/</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主线和稳定二选一</span></span><br><span class=\"line\"><span class=\"comment\"># 主线版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#稳定版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ tar zxf nginx-*.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-*</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-pcre=../pcre-8.41  \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module</span><br><span class=\"line\"></span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块</span></span><br><span class=\"line\"><span class=\"comment\"># 临时文件相关</span></span><br><span class=\"line\"><span class=\"comment\">#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dav，媒体相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_dav_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_flv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_mp4_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#随机首页，安全连接相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_random_index_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_secure_link_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#email相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail_ssl_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gcc相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#组，用户相关</span></span><br><span class=\"line\"><span class=\"comment\">#--user=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#--group=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#如果指定user和group 则通过此命令创建用户</span></span><br><span class=\"line\"><span class=\"comment\">#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果用不到https，可以把ssl和http2模块也禁掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用未用模块，减少安全风险</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module</span></span><br><span class=\"line\">$ nginx -t &amp;&amp; nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n<p>至此nginx编译完成。可以通过<code>curl localhost</code>或者浏览器打开<code>localhost</code> 查看nginx默认页面</p>\n<h3 id=\"nginx-init-d-脚本\"><a href=\"#nginx-init-d-脚本\" class=\"headerlink\" title=\"nginx init.d 脚本\"></a>nginx init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\" target=\"_blank\" rel=\"noopener\">anjia0532/nginx</a></p>\n<h2 id=\"openresty\"><a href=\"#openresty\" class=\"headerlink\" title=\"openresty\"></a>openresty</h2><p>学习资料 官网 <a href=\"https://openresty.org/cn/\" target=\"_blank\" rel=\"noopener\">openresty</a> ，开涛博客 <a href=\"http://jinnianshilongnian.iteye.com/blog/2280928\" target=\"_blank\" rel=\"noopener\">使用Nginx+Lua(OpenResty)开发高性能Web应用</a> ，温铭的gitbook <a href=\"https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\" target=\"_blank\" rel=\"noopener\">OpenResty 最佳实践</a> 温铭的stuq视频教程<a href=\"http://www.stuq.org/course/1015\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a></p>\n<h3 id=\"安装预编译包\"><a href=\"#安装预编译包\" class=\"headerlink\" title=\"安装预编译包\"></a>安装预编译包</h3><p>详见官方文档 <a href=\"https://openresty.org/cn/linux-packages.html\" target=\"_blank\" rel=\"noopener\">OpenResty® Linux 包</a></p>\n<h3 id=\"openresty编译参数\"><a href=\"#openresty编译参数\" class=\"headerlink\" title=\"openresty编译参数\"></a>openresty编译参数</h3><p>ubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>resty -V</code>是查看构建参数，<code>resty -v</code>是查看版本号</p>\n<p><a href=\"https://openresty.org/en/components.html\" target=\"_blank\" rel=\"noopener\">openresty官方组件</a> ,<a href=\"https://www.nginx.com/resources/wiki/modules/\" target=\"_blank\" rel=\"noopener\">nginx 模块</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx version: openresty/1.11.2.4</span><br><span class=\"line\">built with OpenSSL 1.0.2k  26 Jan 2017</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/openresty/nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--add-module=../ngx_devel_kit-0.3.0 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">echo</span>-nginx-module-0.60 \\</span><br><span class=\"line\">--add-module=../xss-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../ngx_coolkit-0.2rc3 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">set</span>-misc-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../form-input-nginx-module-0.12 \\</span><br><span class=\"line\">--add-module=../encrypted-session-nginx-module-0.06 \\</span><br><span class=\"line\">--add-module=../srcache-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../ngx_lua-0.10.8 \\</span><br><span class=\"line\">--add-module=../ngx_lua_upstream-0.06 \\</span><br><span class=\"line\">--add-module=../headers-more-nginx-module-0.32 \\</span><br><span class=\"line\">--add-module=../array-var-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../memc-nginx-module-0.18 \\</span><br><span class=\"line\">--add-module=../redis2-nginx-module-0.14 \\</span><br><span class=\"line\">--add-module=../redis-nginx-module-0.3.7 \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-ipv6 \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_addition_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_random_index_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_dav_module \\</span><br><span class=\"line\">--with-http_flv_module \\</span><br><span class=\"line\">--with-http_mp4_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-http_ssl_module</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建openresty\"><a href=\"#构建openresty\" class=\"headerlink\" title=\"构建openresty\"></a>构建openresty</h3><p>参见 <a href=\"https://openresty.org/cn/installation.html#-openresty\" target=\"_blank\" rel=\"noopener\">构建openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial</span><br><span class=\"line\">$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz</span><br><span class=\"line\">$ tar zxf openresty-1.11.2.4.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者直接从github clone 一份自行编译</span></span><br><span class=\"line\"><span class=\"comment\"># git clone https://github.com/openresty/openresty </span></span><br><span class=\"line\"><span class=\"comment\"># cd openresty </span></span><br><span class=\"line\"><span class=\"comment\"># make -j4</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openresty-*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有编译参数</span></span><br><span class=\"line\">$ ./configure --<span class=\"built_in\">help</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进行编译</span></span><br><span class=\"line\">./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-pcre-opt=-g \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module \\</span><br><span class=\"line\">--without-http_ssi_module \\</span><br><span class=\"line\">--without-http_userid_module \\</span><br><span class=\"line\">--without-http_browser_module \\</span><br><span class=\"line\">--without-http_rds_json_module \\</span><br><span class=\"line\">--without-http_rds_csv_module \\</span><br><span class=\"line\">--without-http_memc_module \\</span><br><span class=\"line\">--without-http_redis2_module \\</span><br><span class=\"line\">--without-lua_resty_memcached \\</span><br><span class=\"line\">--without-lua_resty_mysql \\</span><br><span class=\"line\">-j4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用memcached模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memc_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用redis模块(保留redis2模块)</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_redis_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用email相关模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_pop3_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_imap_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_smtp_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用rds模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_json_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_csv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用cgi </span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module \\</span></span><br><span class=\"line\">$ make -j4 &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保80端口没被占用</span></span><br><span class=\"line\">$ lsof -i:80</span><br><span class=\"line\"></span><br><span class=\"line\">$ /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; /opt/openresty/nginx/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl localhost</span><br></pre></td></tr></table></figure>\n<h3 id=\"openresty-init-d-脚本\"><a href=\"#openresty-init-d-脚本\" class=\"headerlink\" title=\"openresty init.d 脚本\"></a>openresty init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\" target=\"_blank\" rel=\"noopener\">anjia0532/openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ chmod +x /etc/init.d/openresty</span><br><span class=\"line\"><span class=\"comment\">#$ systemctl mask openresty</span></span><br><span class=\"line\"><span class=\"comment\">#$ systemctl unmask openresty</span></span><br></pre></td></tr></table></figure>\n<p>一般来说，只需要修改 <code>OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx</code> 为实际的应用目录即可(需要确保该有的目录都存在)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx/</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── proxy_temp</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建</p>\n<p>waf 部分暂时先搁置</p>\n<h2 id=\"WAF-基于ModSecurity\"><a href=\"#WAF-基于ModSecurity\" class=\"headerlink\" title=\"WAF 基于ModSecurity\"></a>WAF 基于<a href=\"https://github.com/SpiderLabs/ModSecurity\" target=\"_blank\" rel=\"noopener\">ModSecurity</a></h2><p>参考资料 <a href=\"https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\" target=\"_blank\" rel=\"noopener\">Ubuntu 15.04</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ModSecurity/</span><br><span class=\"line\">$ git checkout -b v3/master origin/v3/master</span><br><span class=\"line\">$ sh build.sh</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update <span class=\"comment\">#[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]</span></span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_INC=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/headers\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_LIB=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/src/.libs\"</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/ModSecurity-nginx --depth=1</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1</span><br><span class=\"line\">$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf </span><br><span class=\"line\">$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf</span><br><span class=\"line\">$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h</span><br><span class=\"line\">ttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping</span><br><span class=\"line\">$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled</span><br><span class=\"line\"><span class=\"comment\">#使用www-data用户</span></span><br><span class=\"line\">$ sudo sed -i <span class=\"string\">'1s/^/user www-data;\\n/'</span> /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\">$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#删除36-116行，即server&#123;&#125;段，可以在英文输入法状态按     :36,166d  然后 :wq</span></span><br><span class=\"line\"><span class=\"comment\">#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf</span></span><br><span class=\"line\">$ sudo sed <span class=\"string\">'$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; '</span> -i /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#嫌费事，也可以直接用下面的配置文件</span></span><br><span class=\"line\">user www-data;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Load OWASP Config </span></span><br><span class=\"line\">Include crs-setup.conf </span><br><span class=\"line\"><span class=\"comment\">#Load all other Rules </span></span><br><span class=\"line\">Include rules/*.conf </span><br><span class=\"line\"><span class=\"comment\">#Disable rule by ID from error message </span></span><br><span class=\"line\"><span class=\"comment\">#SecRuleRemoveById 920350</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo sed  s/<span class=\"string\">\"SecRuleEngine DetectionOnly\"</span>/<span class=\"string\">\"SecRuleEngine On\"</span>/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload</span><br><span class=\"line\">$ curl <span class=\"string\">\"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&amp;searchsubmit=Buscar&amp;page=nsp_search\"</span></span><br><span class=\"line\"><span class=\"comment\"># 返回403 Forbidden</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Nginx-还是Tengine\"><a href=\"#Nginx-还是Tengine\" class=\"headerlink\" title=\"Nginx 还是Tengine\"></a><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">Nginx</a> 还是<a href=\"http://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener\">Tengine</a></h2><p>Tengine是阿里巴巴的深度定制的nginx，目前最新版本<a href=\"http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\" target=\"_blank\" rel=\"noopener\">Tengine-2.2.0.tar.gz</a> , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是<code>2016-12-02</code>截止到目前，已经半年多没更新了。<a href=\"https://github.com/alibaba/tengine\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/tengine</a> 上已经有137条未关闭的issus和39条pull request</p>\n<p>下面是官网自述</p>\n<blockquote>\n<p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p>\n</blockquote>\n<p>但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架<a href=\"http://dubbo.io/\" target=\"_blank\" rel=\"noopener\">dubbo</a> 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">dubbox</a>, 淘宝家的玉伯的<a href=\"https://github.com/seajs/seajs\" target=\"_blank\" rel=\"noopener\">seajs</a></p>\n<p>补充 <a href=\"https://github.com/alibaba/tengine/issues/921\" target=\"_blank\" rel=\"noopener\">alibaba/tengine/issues/921#Tengine future</a> 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。</p>\n<p>而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。</p>\n<p>nginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和<a href=\"http://nginx.org/en/security_advisories.html\" target=\"_blank\" rel=\"noopener\">security</a>来考虑是否有必要升级</p>\n<p>如果不差钱，可以考虑一下 <code>nginx plus</code> ,价格很感人，<a href=\"https://www.nginx.com/products/pricing/\" target=\"_blank\" rel=\"noopener\">Pricing - Application Delivery for the Modern Web | NGINX</a></p>\n<p>如果不差钱，其实可以考虑用 <code>openresty edge</code> (<a href=\"https://openresty.com/cn/\" target=\"_blank\" rel=\"noopener\">openresty的商业版</a>) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。<br>","more":"</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p><strong>本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。</strong></p>\n<p>nginx本身提供编译好的二进制文件，linux的参见 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\" target=\"_blank\" rel=\"noopener\">prebuilt</a> ，windows的从 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx/Windows-VERSION</code>相关<code>zip</code>包，建议生产环境使用 <code>stable</code>(稳定版本)</p>\n<p>如果是想从源码编译的话，从<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx-VERSION</code> 的<code>tar.gz</code>包，一般格式为<code>http://nginx.org/download/nginx-VERSION.tar.gz</code> 注意将<code>VERSION</code>替换成实际版本号，e.g. <code>1.12.1</code></p>\n<h3 id=\"nginx编译参数\"><a href=\"#nginx编译参数\" class=\"headerlink\" title=\"nginx编译参数\"></a>nginx编译参数</h3><p>ubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>nginx -V</code>是查看构建参数，<code>nginx -v</code>是查看版本号<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\">nginx version: nginx/1.13.0</span><br><span class=\"line\">built by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) </span><br><span class=\"line\">built with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span><br><span class=\"line\">--user=nginx  \\</span><br><span class=\"line\">--group=nginx  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_dav_module  \\</span><br><span class=\"line\">--with-http_flv_module  \\</span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\">--with-http_mp4_module  \\</span><br><span class=\"line\">--with-http_random_index_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_secure_link_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-mail  \\</span><br><span class=\"line\">--with-mail_ssl_module  \\</span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'</span>  \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br></pre></td></tr></table></figure></p>\n<p>具体参数含义可 参考官网 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a> 和 <a href=\"http://www.cnblogs.com/HKUI/p/5225895.html\" target=\"_blank\" rel=\"noopener\">梦想远航#nginx安装及编译参数详解</a>, 如果要构建<code>nginx for windows</code>参见 <a href=\"http://nginx.org/en/docs/howto_build_on_win32.html\" target=\"_blank\" rel=\"noopener\">Building nginx on the Win32 platform with Visual C</a></p>\n<h3 id=\"编译nginx\"><a href=\"#编译nginx\" class=\"headerlink\" title=\"编译nginx\"></a>编译nginx</h3><p>参考 官方文档 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"noopener\">INSTALLING NGINX OPEN SOURCE</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pcre 正则库 </span></span><br><span class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz</span><br><span class=\"line\">$ tar -zxf pcre-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> pcre-*</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zlib gzip 库</span></span><br><span class=\"line\">$ wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ tar -zxf zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.11</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$ wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2l.tar.gz</span><br><span class=\"line\">$ tar -zxf openssl-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openssl-*</span><br><span class=\"line\">$ ./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl/</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主线和稳定二选一</span></span><br><span class=\"line\"><span class=\"comment\"># 主线版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#稳定版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ tar zxf nginx-*.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-*</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-pcre=../pcre-8.41  \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module</span><br><span class=\"line\"></span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块</span></span><br><span class=\"line\"><span class=\"comment\"># 临时文件相关</span></span><br><span class=\"line\"><span class=\"comment\">#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dav，媒体相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_dav_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_flv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_mp4_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#随机首页，安全连接相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_random_index_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_secure_link_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#email相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail_ssl_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gcc相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#组，用户相关</span></span><br><span class=\"line\"><span class=\"comment\">#--user=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#--group=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#如果指定user和group 则通过此命令创建用户</span></span><br><span class=\"line\"><span class=\"comment\">#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果用不到https，可以把ssl和http2模块也禁掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用未用模块，减少安全风险</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module</span></span><br><span class=\"line\">$ nginx -t &amp;&amp; nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n<p>至此nginx编译完成。可以通过<code>curl localhost</code>或者浏览器打开<code>localhost</code> 查看nginx默认页面</p>\n<h3 id=\"nginx-init-d-脚本\"><a href=\"#nginx-init-d-脚本\" class=\"headerlink\" title=\"nginx init.d 脚本\"></a>nginx init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\" target=\"_blank\" rel=\"noopener\">anjia0532/nginx</a></p>\n<h2 id=\"openresty\"><a href=\"#openresty\" class=\"headerlink\" title=\"openresty\"></a>openresty</h2><p>学习资料 官网 <a href=\"https://openresty.org/cn/\" target=\"_blank\" rel=\"noopener\">openresty</a> ，开涛博客 <a href=\"http://jinnianshilongnian.iteye.com/blog/2280928\" target=\"_blank\" rel=\"noopener\">使用Nginx+Lua(OpenResty)开发高性能Web应用</a> ，温铭的gitbook <a href=\"https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\" target=\"_blank\" rel=\"noopener\">OpenResty 最佳实践</a> 温铭的stuq视频教程<a href=\"http://www.stuq.org/course/1015\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a></p>\n<h3 id=\"安装预编译包\"><a href=\"#安装预编译包\" class=\"headerlink\" title=\"安装预编译包\"></a>安装预编译包</h3><p>详见官方文档 <a href=\"https://openresty.org/cn/linux-packages.html\" target=\"_blank\" rel=\"noopener\">OpenResty® Linux 包</a></p>\n<h3 id=\"openresty编译参数\"><a href=\"#openresty编译参数\" class=\"headerlink\" title=\"openresty编译参数\"></a>openresty编译参数</h3><p>ubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>resty -V</code>是查看构建参数，<code>resty -v</code>是查看版本号</p>\n<p><a href=\"https://openresty.org/en/components.html\" target=\"_blank\" rel=\"noopener\">openresty官方组件</a> ,<a href=\"https://www.nginx.com/resources/wiki/modules/\" target=\"_blank\" rel=\"noopener\">nginx 模块</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx version: openresty/1.11.2.4</span><br><span class=\"line\">built with OpenSSL 1.0.2k  26 Jan 2017</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/openresty/nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--add-module=../ngx_devel_kit-0.3.0 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">echo</span>-nginx-module-0.60 \\</span><br><span class=\"line\">--add-module=../xss-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../ngx_coolkit-0.2rc3 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">set</span>-misc-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../form-input-nginx-module-0.12 \\</span><br><span class=\"line\">--add-module=../encrypted-session-nginx-module-0.06 \\</span><br><span class=\"line\">--add-module=../srcache-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../ngx_lua-0.10.8 \\</span><br><span class=\"line\">--add-module=../ngx_lua_upstream-0.06 \\</span><br><span class=\"line\">--add-module=../headers-more-nginx-module-0.32 \\</span><br><span class=\"line\">--add-module=../array-var-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../memc-nginx-module-0.18 \\</span><br><span class=\"line\">--add-module=../redis2-nginx-module-0.14 \\</span><br><span class=\"line\">--add-module=../redis-nginx-module-0.3.7 \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-ipv6 \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_addition_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_random_index_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_dav_module \\</span><br><span class=\"line\">--with-http_flv_module \\</span><br><span class=\"line\">--with-http_mp4_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-http_ssl_module</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建openresty\"><a href=\"#构建openresty\" class=\"headerlink\" title=\"构建openresty\"></a>构建openresty</h3><p>参见 <a href=\"https://openresty.org/cn/installation.html#-openresty\" target=\"_blank\" rel=\"noopener\">构建openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial</span><br><span class=\"line\">$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz</span><br><span class=\"line\">$ tar zxf openresty-1.11.2.4.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者直接从github clone 一份自行编译</span></span><br><span class=\"line\"><span class=\"comment\"># git clone https://github.com/openresty/openresty </span></span><br><span class=\"line\"><span class=\"comment\"># cd openresty </span></span><br><span class=\"line\"><span class=\"comment\"># make -j4</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openresty-*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有编译参数</span></span><br><span class=\"line\">$ ./configure --<span class=\"built_in\">help</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进行编译</span></span><br><span class=\"line\">./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-pcre-opt=-g \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module \\</span><br><span class=\"line\">--without-http_ssi_module \\</span><br><span class=\"line\">--without-http_userid_module \\</span><br><span class=\"line\">--without-http_browser_module \\</span><br><span class=\"line\">--without-http_rds_json_module \\</span><br><span class=\"line\">--without-http_rds_csv_module \\</span><br><span class=\"line\">--without-http_memc_module \\</span><br><span class=\"line\">--without-http_redis2_module \\</span><br><span class=\"line\">--without-lua_resty_memcached \\</span><br><span class=\"line\">--without-lua_resty_mysql \\</span><br><span class=\"line\">-j4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用memcached模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memc_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用redis模块(保留redis2模块)</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_redis_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用email相关模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_pop3_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_imap_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_smtp_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用rds模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_json_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_csv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用cgi </span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module \\</span></span><br><span class=\"line\">$ make -j4 &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保80端口没被占用</span></span><br><span class=\"line\">$ lsof -i:80</span><br><span class=\"line\"></span><br><span class=\"line\">$ /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; /opt/openresty/nginx/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl localhost</span><br></pre></td></tr></table></figure>\n<h3 id=\"openresty-init-d-脚本\"><a href=\"#openresty-init-d-脚本\" class=\"headerlink\" title=\"openresty init.d 脚本\"></a>openresty init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\" target=\"_blank\" rel=\"noopener\">anjia0532/openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ chmod +x /etc/init.d/openresty</span><br><span class=\"line\"><span class=\"comment\">#$ systemctl mask openresty</span></span><br><span class=\"line\"><span class=\"comment\">#$ systemctl unmask openresty</span></span><br></pre></td></tr></table></figure>\n<p>一般来说，只需要修改 <code>OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx</code> 为实际的应用目录即可(需要确保该有的目录都存在)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx/</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── proxy_temp</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建</p>\n<p>waf 部分暂时先搁置</p>\n<h2 id=\"WAF-基于ModSecurity\"><a href=\"#WAF-基于ModSecurity\" class=\"headerlink\" title=\"WAF 基于ModSecurity\"></a>WAF 基于<a href=\"https://github.com/SpiderLabs/ModSecurity\" target=\"_blank\" rel=\"noopener\">ModSecurity</a></h2><p>参考资料 <a href=\"https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\" target=\"_blank\" rel=\"noopener\">Ubuntu 15.04</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ModSecurity/</span><br><span class=\"line\">$ git checkout -b v3/master origin/v3/master</span><br><span class=\"line\">$ sh build.sh</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update <span class=\"comment\">#[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]</span></span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_INC=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/headers\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_LIB=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/src/.libs\"</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/ModSecurity-nginx --depth=1</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1</span><br><span class=\"line\">$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf </span><br><span class=\"line\">$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf</span><br><span class=\"line\">$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h</span><br><span class=\"line\">ttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping</span><br><span class=\"line\">$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled</span><br><span class=\"line\"><span class=\"comment\">#使用www-data用户</span></span><br><span class=\"line\">$ sudo sed -i <span class=\"string\">'1s/^/user www-data;\\n/'</span> /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\">$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#删除36-116行，即server&#123;&#125;段，可以在英文输入法状态按     :36,166d  然后 :wq</span></span><br><span class=\"line\"><span class=\"comment\">#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf</span></span><br><span class=\"line\">$ sudo sed <span class=\"string\">'$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; '</span> -i /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#嫌费事，也可以直接用下面的配置文件</span></span><br><span class=\"line\">user www-data;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Load OWASP Config </span></span><br><span class=\"line\">Include crs-setup.conf </span><br><span class=\"line\"><span class=\"comment\">#Load all other Rules </span></span><br><span class=\"line\">Include rules/*.conf </span><br><span class=\"line\"><span class=\"comment\">#Disable rule by ID from error message </span></span><br><span class=\"line\"><span class=\"comment\">#SecRuleRemoveById 920350</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo sed  s/<span class=\"string\">\"SecRuleEngine DetectionOnly\"</span>/<span class=\"string\">\"SecRuleEngine On\"</span>/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload</span><br><span class=\"line\">$ curl <span class=\"string\">\"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&amp;searchsubmit=Buscar&amp;page=nsp_search\"</span></span><br><span class=\"line\"><span class=\"comment\"># 返回403 Forbidden</span></span><br></pre></td></tr></table></figure>"},{"title":"synergy 一套键鼠多台设备共享","date":"2017-02-08T09:44:28.000Z","_content":"Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n\n## 下载最新稳定版本[最新稳定版本](https://www.brahma.world/synergy-stable-builds/)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-v1.8.8-stable-Windows-x64.msi](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi) 和 [synergy-v1.8.8-stable-Linux-x86_64.deb](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb)\n\n## 获取序列号\n[Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)](http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html)\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","source":"_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","raw":"---\ntitle: synergy 一套键鼠多台设备共享\ndate: 2017-02-08 17:44:28\ntags: [synergy]\ncategories: [工具]\n---\nSynergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n\n## 下载最新稳定版本[最新稳定版本](https://www.brahma.world/synergy-stable-builds/)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-v1.8.8-stable-Windows-x64.msi](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi) 和 [synergy-v1.8.8-stable-Linux-x86_64.deb](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb)\n\n## 获取序列号\n[Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)](http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html)\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","slug":"share-mouse-and-keyboard-with-your-windows-linux-machines-md","published":1,"updated":"2017-10-30T02:56:42.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mena001g5gdoqmbey2nk","content":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>\n<a id=\"more\"></a>\n<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\" target=\"_blank\" rel=\"noopener\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\" target=\"_blank\" rel=\"noopener\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"下载最新稳定版本最新稳定版本\"><a href=\"#下载最新稳定版本最新稳定版本\" class=\"headerlink\" title=\"下载最新稳定版本最新稳定版本\"></a>下载最新稳定版本<a href=\"https://www.brahma.world/synergy-stable-builds/\" target=\"_blank\" rel=\"noopener\">最新稳定版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Windows-x64.msi</a> 和 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p><a href=\"http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html\" target=\"_blank\" rel=\"noopener\">Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)</a></p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\" target=\"_blank\" rel=\"noopener\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></span><br><span class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></span><br><span class=\"line\"><span class=\"comment\"># 所以手动下载</span></span><br><span class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></span><br><span class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">nohup synergy &amp;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>\n","site":{"data":{}},"excerpt":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>","more":"<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\" target=\"_blank\" rel=\"noopener\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\" target=\"_blank\" rel=\"noopener\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"下载最新稳定版本最新稳定版本\"><a href=\"#下载最新稳定版本最新稳定版本\" class=\"headerlink\" title=\"下载最新稳定版本最新稳定版本\"></a>下载最新稳定版本<a href=\"https://www.brahma.world/synergy-stable-builds/\" target=\"_blank\" rel=\"noopener\">最新稳定版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Windows-x64.msi</a> 和 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p><a href=\"http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html\" target=\"_blank\" rel=\"noopener\">Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)</a></p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\" target=\"_blank\" rel=\"noopener\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></span><br><span class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></span><br><span class=\"line\"><span class=\"comment\"># 所以手动下载</span></span><br><span class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></span><br><span class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">nohup synergy &amp;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>"},{"title":"微服务场景下性能问题排查神器之xrebel","date":"2017-11-21T06:57:14.000Z","_content":"\n对于java应用性能跟踪其实有很多种手段，本文只是针对`xrebel`的使用做一些简单讲解（`单体应用`和`微服务应用`）。分布式跟踪有很多，比如zipkin等，详见 [分布式跟踪系统（一）：Zipkin的背景和设计][]，但是太重了，不适合小规模团队，开发时期用。\n\n而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。\n\n示例：\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n<!--more-->\n\n## [下载xrebel][]\n\n目前最新版本 [xrebel-3.4.1.zip][]\n\n## [xrebel 支持的框架及场景][Xrebel支持的框架及场景]\n\n\n## [快速安装][]\n\nxrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。\n\n1. 下载xrebel.zip 并解压到本地，e.g. `D:\\xrebel`\n2. 在tomcat也好，idea,eclipse也好，修改vm 参数，添加 `-javaagent:[path/to/xrebel]/xrebel.jar`\n\n下面分别是idea,eclipse\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg)\n\n默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 [xrebel][] [jrebel][] [jrebel for android][JrebelForAndroid] 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 [https://my.jrebel.com/][]\n\n## web ui\n\n打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 `xrebel`的`toolbar`，(e.g. http://localhost:8080)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg)\n\n或者通过 访问`服务/xrebel` (e.g. http://localhost:8080/xrebel) 打开单独页面，适用于webservice,restful 等无页面场景\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg)\n\n如果不想注入到页面中，只想通过`服务/xrebel`访问，则可以添加 `-Dxrebel.injection=true|false` ，默认为`true`\n\n其余开关参数 参见  [XRebel launch parameters][XrebelLaunchParameters]\n\n\n## xrebel 简单使用教程\n\n参考 [Using XRebel][UsingXrebel]\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg)\n\n## 微服务\n\n参考 [Microservices][] 和 [XRebel 3.0: introducing microservices profiling][Xrebel3.0:IntroducingMicroservices] \n\n确保调用方，和被调用方，都开了xrebel，\n\n效果如下\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n\n## 启用xrebel调试\n\n参考 [Debugging with XRebel enabled][DebuggingWithXrebelEnabled]\n\n\n## 题外话 静态资源分离的必要性\n\n为嘛建议将静态文件分离？通过xrebel就可以清晰看出来\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg)\n\n\n博客 [https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/][blog]\n掘金 [https://juejin.im/post/5a13e3db6fb9a045186a5bfc][juejin]\n简书 [http://www.jianshu.com/p/0029c32dde4e][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\n[juejin]: https://juejin.im/post/5a13e3db6fb9a045186a5bfc\n[jianshu]: http://www.jianshu.com/p/0029c32dde4e\n[分布式跟踪系统（一）：Zipkin的背景和设计]: http://manzhizhen.iteye.com/blog/2348175\n[下载xrebel]: https://zeroturnaround.com/software/xrebel/download/\n[xrebel-3.4.1.zip]: https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\n[Xrebel支持的框架及场景]: http://manuals.zeroturnaround.com/xrebel/support/index.html#\n[快速安装]: https://zeroturnaround.com/software/xrebel/quick-start/\n[XrebelLaunchParameters]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\n[Microservices]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\n[Xrebel3.0:IntroducingMicroservices]: https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\n[UsingXrebel]: http://manuals.zeroturnaround.com/xrebel/use/index.html#\n[jrebel]: https://zeroturnaround.com/software/jrebel/\n[JrebelForAndroid]: https://zeroturnaround.com/software/jrebel-for-android/\n[xrebel]: https://zeroturnaround.com/software/xrebel/\n[https://my.jrebel.com/]: https://my.jrebel.com/\n[DebuggingWithXrebelEnabled]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\n","source":"_posts/xrebel-introducing-microservices-profiling.md","raw":"---\ntitle: 微服务场景下性能问题排查神器之xrebel\ndate: 2017-11-21 14:57:14\ntags: [jrebel,xrebel,micro-service,spring-cloud]\n---\n\n对于java应用性能跟踪其实有很多种手段，本文只是针对`xrebel`的使用做一些简单讲解（`单体应用`和`微服务应用`）。分布式跟踪有很多，比如zipkin等，详见 [分布式跟踪系统（一）：Zipkin的背景和设计][]，但是太重了，不适合小规模团队，开发时期用。\n\n而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。\n\n示例：\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n<!--more-->\n\n## [下载xrebel][]\n\n目前最新版本 [xrebel-3.4.1.zip][]\n\n## [xrebel 支持的框架及场景][Xrebel支持的框架及场景]\n\n\n## [快速安装][]\n\nxrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。\n\n1. 下载xrebel.zip 并解压到本地，e.g. `D:\\xrebel`\n2. 在tomcat也好，idea,eclipse也好，修改vm 参数，添加 `-javaagent:[path/to/xrebel]/xrebel.jar`\n\n下面分别是idea,eclipse\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg)\n\n默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 [xrebel][] [jrebel][] [jrebel for android][JrebelForAndroid] 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 [https://my.jrebel.com/][]\n\n## web ui\n\n打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 `xrebel`的`toolbar`，(e.g. http://localhost:8080)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg)\n\n或者通过 访问`服务/xrebel` (e.g. http://localhost:8080/xrebel) 打开单独页面，适用于webservice,restful 等无页面场景\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg)\n\n如果不想注入到页面中，只想通过`服务/xrebel`访问，则可以添加 `-Dxrebel.injection=true|false` ，默认为`true`\n\n其余开关参数 参见  [XRebel launch parameters][XrebelLaunchParameters]\n\n\n## xrebel 简单使用教程\n\n参考 [Using XRebel][UsingXrebel]\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg)\n\n## 微服务\n\n参考 [Microservices][] 和 [XRebel 3.0: introducing microservices profiling][Xrebel3.0:IntroducingMicroservices] \n\n确保调用方，和被调用方，都开了xrebel，\n\n效果如下\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n\n## 启用xrebel调试\n\n参考 [Debugging with XRebel enabled][DebuggingWithXrebelEnabled]\n\n\n## 题外话 静态资源分离的必要性\n\n为嘛建议将静态文件分离？通过xrebel就可以清晰看出来\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg)\n\n\n博客 [https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/][blog]\n掘金 [https://juejin.im/post/5a13e3db6fb9a045186a5bfc][juejin]\n简书 [http://www.jianshu.com/p/0029c32dde4e][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\n[juejin]: https://juejin.im/post/5a13e3db6fb9a045186a5bfc\n[jianshu]: http://www.jianshu.com/p/0029c32dde4e\n[分布式跟踪系统（一）：Zipkin的背景和设计]: http://manzhizhen.iteye.com/blog/2348175\n[下载xrebel]: https://zeroturnaround.com/software/xrebel/download/\n[xrebel-3.4.1.zip]: https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\n[Xrebel支持的框架及场景]: http://manuals.zeroturnaround.com/xrebel/support/index.html#\n[快速安装]: https://zeroturnaround.com/software/xrebel/quick-start/\n[XrebelLaunchParameters]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\n[Microservices]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\n[Xrebel3.0:IntroducingMicroservices]: https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\n[UsingXrebel]: http://manuals.zeroturnaround.com/xrebel/use/index.html#\n[jrebel]: https://zeroturnaround.com/software/jrebel/\n[JrebelForAndroid]: https://zeroturnaround.com/software/jrebel-for-android/\n[xrebel]: https://zeroturnaround.com/software/xrebel/\n[https://my.jrebel.com/]: https://my.jrebel.com/\n[DebuggingWithXrebelEnabled]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\n","slug":"xrebel-introducing-microservices-profiling","published":1,"updated":"2017-11-21T08:47:50.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5mend001h5gdo4v0gtbop","content":"<p>对于java应用性能跟踪其实有很多种手段，本文只是针对<code>xrebel</code>的使用做一些简单讲解（<code>单体应用</code>和<code>微服务应用</code>）。分布式跟踪有很多，比如zipkin等，详见 <a href=\"http://manzhizhen.iteye.com/blog/2348175\" target=\"_blank\" rel=\"noopener\">分布式跟踪系统（一）：Zipkin的背景和设计</a>，但是太重了，不适合小规模团队，开发时期用。</p>\n<p>而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。</p>\n<p>示例：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"下载xrebel\"><a href=\"#下载xrebel\" class=\"headerlink\" title=\"下载xrebel\"></a><a href=\"https://zeroturnaround.com/software/xrebel/download/\" target=\"_blank\" rel=\"noopener\">下载xrebel</a></h2><p>目前最新版本 <a href=\"https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\" target=\"_blank\" rel=\"noopener\">xrebel-3.4.1.zip</a></p>\n<h2 id=\"xrebel-支持的框架及场景\"><a href=\"#xrebel-支持的框架及场景\" class=\"headerlink\" title=\"xrebel 支持的框架及场景\"></a><a href=\"http://manuals.zeroturnaround.com/xrebel/support/index.html#\" target=\"_blank\" rel=\"noopener\">xrebel 支持的框架及场景</a></h2><h2 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a><a href=\"https://zeroturnaround.com/software/xrebel/quick-start/\" target=\"_blank\" rel=\"noopener\">快速安装</a></h2><p>xrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。</p>\n<ol>\n<li>下载xrebel.zip 并解压到本地，e.g. <code>D:\\xrebel</code></li>\n<li>在tomcat也好，idea,eclipse也好，修改vm 参数，添加 <code>-javaagent:[path/to/xrebel]/xrebel.jar</code></li>\n</ol>\n<p>下面分别是idea,eclipse</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg\" alt=\"\"></p>\n<p>默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 <a href=\"https://zeroturnaround.com/software/xrebel/\" target=\"_blank\" rel=\"noopener\">xrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">jrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel-for-android/\" target=\"_blank\" rel=\"noopener\">jrebel for android</a> 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 <a href=\"https://my.jrebel.com/\" target=\"_blank\" rel=\"noopener\">https://my.jrebel.com/</a></p>\n<h2 id=\"web-ui\"><a href=\"#web-ui\" class=\"headerlink\" title=\"web ui\"></a>web ui</h2><p>打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 <code>xrebel</code>的<code>toolbar</code>，(e.g. <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>)</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg\" alt=\"\"></p>\n<p>或者通过 访问<code>服务/xrebel</code> (e.g. <a href=\"http://localhost:8080/xrebel\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/xrebel</a>) 打开单独页面，适用于webservice,restful 等无页面场景</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg\" alt=\"\"></p>\n<p>如果不想注入到页面中，只想通过<code>服务/xrebel</code>访问，则可以添加 <code>-Dxrebel.injection=true|false</code> ，默认为<code>true</code></p>\n<p>其余开关参数 参见  <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\" target=\"_blank\" rel=\"noopener\">XRebel launch parameters</a></p>\n<h2 id=\"xrebel-简单使用教程\"><a href=\"#xrebel-简单使用教程\" class=\"headerlink\" title=\"xrebel 简单使用教程\"></a>xrebel 简单使用教程</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/index.html#\" target=\"_blank\" rel=\"noopener\">Using XRebel</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg\" alt=\"\"></p>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\" target=\"_blank\" rel=\"noopener\">Microservices</a> 和 <a href=\"https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\" target=\"_blank\" rel=\"noopener\">XRebel 3.0: introducing microservices profiling</a> </p>\n<p>确保调用方，和被调用方，都开了xrebel，</p>\n<p>效果如下</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>\n<h2 id=\"启用xrebel调试\"><a href=\"#启用xrebel调试\" class=\"headerlink\" title=\"启用xrebel调试\"></a>启用xrebel调试</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\" target=\"_blank\" rel=\"noopener\">Debugging with XRebel enabled</a></p>\n<h2 id=\"题外话-静态资源分离的必要性\"><a href=\"#题外话-静态资源分离的必要性\" class=\"headerlink\" title=\"题外话 静态资源分离的必要性\"></a>题外话 静态资源分离的必要性</h2><p>为嘛建议将静态文件分离？通过xrebel就可以清晰看出来</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg\" alt=\"\"></p>\n<p>博客 <a href=\"https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\">https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/</a><br>掘金 <a href=\"https://juejin.im/post/5a13e3db6fb9a045186a5bfc\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a13e3db6fb9a045186a5bfc</a><br>简书 <a href=\"http://www.jianshu.com/p/0029c32dde4e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/0029c32dde4e</a></p>\n","site":{"data":{}},"excerpt":"<p>对于java应用性能跟踪其实有很多种手段，本文只是针对<code>xrebel</code>的使用做一些简单讲解（<code>单体应用</code>和<code>微服务应用</code>）。分布式跟踪有很多，比如zipkin等，详见 <a href=\"http://manzhizhen.iteye.com/blog/2348175\" target=\"_blank\" rel=\"noopener\">分布式跟踪系统（一）：Zipkin的背景和设计</a>，但是太重了，不适合小规模团队，开发时期用。</p>\n<p>而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。</p>\n<p>示例：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>","more":"<h2 id=\"下载xrebel\"><a href=\"#下载xrebel\" class=\"headerlink\" title=\"下载xrebel\"></a><a href=\"https://zeroturnaround.com/software/xrebel/download/\" target=\"_blank\" rel=\"noopener\">下载xrebel</a></h2><p>目前最新版本 <a href=\"https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\" target=\"_blank\" rel=\"noopener\">xrebel-3.4.1.zip</a></p>\n<h2 id=\"xrebel-支持的框架及场景\"><a href=\"#xrebel-支持的框架及场景\" class=\"headerlink\" title=\"xrebel 支持的框架及场景\"></a><a href=\"http://manuals.zeroturnaround.com/xrebel/support/index.html#\" target=\"_blank\" rel=\"noopener\">xrebel 支持的框架及场景</a></h2><h2 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a><a href=\"https://zeroturnaround.com/software/xrebel/quick-start/\" target=\"_blank\" rel=\"noopener\">快速安装</a></h2><p>xrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。</p>\n<ol>\n<li>下载xrebel.zip 并解压到本地，e.g. <code>D:\\xrebel</code></li>\n<li>在tomcat也好，idea,eclipse也好，修改vm 参数，添加 <code>-javaagent:[path/to/xrebel]/xrebel.jar</code></li>\n</ol>\n<p>下面分别是idea,eclipse</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg\" alt=\"\"></p>\n<p>默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 <a href=\"https://zeroturnaround.com/software/xrebel/\" target=\"_blank\" rel=\"noopener\">xrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">jrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel-for-android/\" target=\"_blank\" rel=\"noopener\">jrebel for android</a> 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 <a href=\"https://my.jrebel.com/\" target=\"_blank\" rel=\"noopener\">https://my.jrebel.com/</a></p>\n<h2 id=\"web-ui\"><a href=\"#web-ui\" class=\"headerlink\" title=\"web ui\"></a>web ui</h2><p>打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 <code>xrebel</code>的<code>toolbar</code>，(e.g. <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>)</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg\" alt=\"\"></p>\n<p>或者通过 访问<code>服务/xrebel</code> (e.g. <a href=\"http://localhost:8080/xrebel\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/xrebel</a>) 打开单独页面，适用于webservice,restful 等无页面场景</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg\" alt=\"\"></p>\n<p>如果不想注入到页面中，只想通过<code>服务/xrebel</code>访问，则可以添加 <code>-Dxrebel.injection=true|false</code> ，默认为<code>true</code></p>\n<p>其余开关参数 参见  <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\" target=\"_blank\" rel=\"noopener\">XRebel launch parameters</a></p>\n<h2 id=\"xrebel-简单使用教程\"><a href=\"#xrebel-简单使用教程\" class=\"headerlink\" title=\"xrebel 简单使用教程\"></a>xrebel 简单使用教程</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/index.html#\" target=\"_blank\" rel=\"noopener\">Using XRebel</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg\" alt=\"\"></p>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\" target=\"_blank\" rel=\"noopener\">Microservices</a> 和 <a href=\"https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\" target=\"_blank\" rel=\"noopener\">XRebel 3.0: introducing microservices profiling</a> </p>\n<p>确保调用方，和被调用方，都开了xrebel，</p>\n<p>效果如下</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>\n<h2 id=\"启用xrebel调试\"><a href=\"#启用xrebel调试\" class=\"headerlink\" title=\"启用xrebel调试\"></a>启用xrebel调试</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\" target=\"_blank\" rel=\"noopener\">Debugging with XRebel enabled</a></p>\n<h2 id=\"题外话-静态资源分离的必要性\"><a href=\"#题外话-静态资源分离的必要性\" class=\"headerlink\" title=\"题外话 静态资源分离的必要性\"></a>题外话 静态资源分离的必要性</h2><p>为嘛建议将静态文件分离？通过xrebel就可以清晰看出来</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg\" alt=\"\"></p>\n<p>博客 <a href=\"https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\">https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/</a><br>掘金 <a href=\"https://juejin.im/post/5a13e3db6fb9a045186a5bfc\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a13e3db6fb9a045186a5bfc</a><br>简书 <a href=\"http://www.jianshu.com/p/0029c32dde4e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/0029c32dde4e</a></p>"},{"title":"Spring3.0 Log4j转logback","date":"2017-02-28T06:54:44.000Z","_content":"公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","source":"_posts/springmvc-log4j-to-logback.md","raw":"---\ntitle: Spring3.0 Log4j转logback\ndate: 2017-02-28 14:54:44\ntags: [springmvc,logback,log4j,log]\ncategories: [编程]\n---\n公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","slug":"springmvc-log4j-to-logback","published":1,"updated":"2017-03-01T06:02:05.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5menf001k5gdo10ej0ky3","content":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\" target=\"_blank\" rel=\"noopener\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jackson-annotations-2.8.0.jar</span><br><span class=\"line\">jackson-core-2.8.6.jar</span><br><span class=\"line\">jackson-databind-2.8.6.jar</span><br><span class=\"line\">jcl-over-slf4j-1.7.24.jar</span><br><span class=\"line\">log4j-over-slf4j-1.7.24.jar</span><br><span class=\"line\">logback-classic-1.2.1.jar</span><br><span class=\"line\">logback-core-1.2.1.jar</span><br><span class=\"line\">logback-ext-spring-0.1.4.jar</span><br><span class=\"line\">logstash-logback-encoder-4.8.jar</span><br><span class=\"line\">slf4j-api-1.7.24.jar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\" target=\"_blank\" rel=\"noopener\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\" target=\"_blank\" rel=\"noopener\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\" target=\"_blank\" rel=\"noopener\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</span><br><span class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</span><br><span class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</span><br><span class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</span><br><span class=\"line\">    .toString()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\" target=\"_blank\" rel=\"noopener\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jackson-annotations-2.8.0.jar</span><br><span class=\"line\">jackson-core-2.8.6.jar</span><br><span class=\"line\">jackson-databind-2.8.6.jar</span><br><span class=\"line\">jcl-over-slf4j-1.7.24.jar</span><br><span class=\"line\">log4j-over-slf4j-1.7.24.jar</span><br><span class=\"line\">logback-classic-1.2.1.jar</span><br><span class=\"line\">logback-core-1.2.1.jar</span><br><span class=\"line\">logback-ext-spring-0.1.4.jar</span><br><span class=\"line\">logstash-logback-encoder-4.8.jar</span><br><span class=\"line\">slf4j-api-1.7.24.jar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\" target=\"_blank\" rel=\"noopener\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\" target=\"_blank\" rel=\"noopener\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\" target=\"_blank\" rel=\"noopener\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</span><br><span class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</span><br><span class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</span><br><span class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</span><br><span class=\"line\">    .toString()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"openresty使用火焰图排查性能问题","date":"2017-09-12T08:31:40.000Z","_content":"\n本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图\n\n## 安装调试镜像\n\n```bash\n\n# 导入 GPG key\n# 16.04 and higher\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622\n\n#older distributions\n#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01 \n\n# 设置源\ncodename=$(lsb_release -c | awk  '{print $2}')\nsudo tee /etc/apt/sources.list.d/ddebs.list << EOF\ndeb http://ddebs.ubuntu.com/ ${codename}      main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ ${codename}-security main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ ${codename}-updates  main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ ${codename}-proposed main restricted universe multiverse\nEOF\n\n# 更新\nsudo apt-get update\n\n# 安装调试镜像\nsudo apt-get install -y linux-image-$(uname -r)-dbgsym\n\n```\n\n<!--more-->\n\n## 安装最新版 systemtap\n\n```\n$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext\n\n# https://sourceware.org/elfutils/ftp/?C=M;O=D\n$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2\n$ tar xf elfutils-0.170.tar.bz2\n\n# https://sourceware.org/systemtap/ftp/releases/?C=M;O=D\n$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz\n$ tar zxf systemtap-3.1.tar.gz\n\n$ cd systemtap-3.1\n\n$ ./configure --prefix=/opt/stap --disable-docs \\\n    --disable-publican --disable-refdocs CFLAGS=\"-g -O2\" \\\n    --with-elfutils=../elfutils-0.170\n\n$ make -j$(getconf _NPROCESSORS_ONLN) && sudo make install\n\n# export STAP_HOME=/opt/stap/\n# export PATH=$STAP_HOME:$PATH\n\n# stap -V\n\nSystemtap translator/driver (version 3.1/0.170, non-git sources)\nCopyright (C) 2005-2017 Red Hat, Inc. and others\nThis is free software; see the source for copying conditions.\ntested kernel versions: 2.6.18 ... 4.10-rc8\nenabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE\n\n```\n\n## 测试是否生效\n\n```\n# stap -v -e 'probe vfs.read {printf(\"read performed\\n\"); exit()}'\nPass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.\nPass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.\nPass 3: translated to C into \"/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c\" using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.\nPass 4: compiled C into \"stap_e1c4934460a3e749f6deefe95dd50015_2729.ko\" in 5260usr/420sys/7185real ms.\nPass 5: starting run.\nread performed\nPass 5: run completed in 0usr/20sys/486real ms.\n\n```\n\n## 绘制火焰图\n\n### 下载各工具包\n```\n# git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx\n# export STAP_PLUS_HOME=/opt/stapxx\n# export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH\n\n# stap++ -e 'probe begin { println(\"hello\") exit() }'\n\nhello\n\n\n# git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit\n\n# git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph\n```\n\n### 绘制火焰图\n```\n# /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk '/worker/  {print$2}'| shuf | head -n 1` > /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）\n# /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt > /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)\n# /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt > /tmp/flame.cbt\n# /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt > /tmp/flame.svg\n```\n\n为了突出效果，建议在运行`stap++`的时候，使用压测工具，以便采集足够的样本\n\n```\n# ab -n 10000 -c 100 -k http://localhost/\n```\n\n用浏览器打开 `/tmp/flame.svg` 尽量用 `chrome` `firefox`别用国产乱七八糟浏览器.\n\n## openresty/stapxx\n\n```\n## 使用 stap++ --args xx.sxx查看具体参数\n\n# stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx\n    --arg depth=VALUE (default: 30)\n    --arg detailed=VALUE (default: 0)\n    --arg limit=VALUE (default: 1000)\n    --arg min=VALUE (default: 2)\n    --arg nointerp=VALUE (default: )\n    --arg nojit=VALUE (default: )\n    --arg probe=VALUE (default: timer.profile)\n    --arg time=VALUE (default: )\n```\n\n具体脚本用法，参见 [openresty/stapxx#samples][]\n\n## openresty/openresty-systemtap-toolkit\n\n这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见[readme][].\n\n如果要使用`ngx-leaked-pools`需要用到`dtrace`\n```bash\n$ apt install systemtap-sdt-dev -y\n$ ./configure --prefix=/etc/openresty \\\n  --with-dtrace-probes\n```\n\n如果要用到`ngx-pcrejit`需要在编译openresty时增加`--with-pcre-opt=-g`\n\n重新编译并`make && make install` 后会将原有的二进制文件重命名为`${openresty_home}/nginx/sbin/nginx.old`，并创建一个`${openresty_home}/nginx/sbin/nginx`(新版)\n\n```bash\n$ kill -USR2 `cat /var/run/nginx.pid`\n```\n\n通过`ps -fC nginx`或者`ps -fC openresty`查看新版本是否成功启动\n\n如果成功启动，此时新旧版本同时接受请求\n\n通过\n```\n$ kill -QUIT `cat /var/run/nginx.pid.oldbin`\n```\n\n平滑杀掉旧版\n\n\n更多资料请自行谷歌、百度。或者参阅 下面的**参考连接**\n\n## 参考连接 \n\n- [白话火焰图-火丁笔记][]\n- [Build Systemtap-openresty官方文档][linkBuildSystemtap-openresty官方文档]\n- [火焰图-openresty最佳实践][]\n- [Systemtap - ubuntu wiki][Systemtap-UbuntuWiki]\n- [openresty/stapxx][]\n- [openresty/openresty-systemtap-toolkit][]\n- [brendangregg/FlameGraph][]\n- [虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级][虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]\n\n\n博客 [https://anjia.ml/2017/09/12/stap/][blog]\n掘金 [https://juejin.im/post/59ce27fef265da065b66d54b][juejin]\n简书 [http://www.jianshu.com/p/008fde8837f5][jianshu]\n\n[blog]: https://anjia.ml/2017/09/12/stap/\n[juejin]: https://juejin.im/post/59ce27fef265da065b66d54b\n[jianshu]: http://www.jianshu.com/p/008fde8837f5\n\n\n[白话火焰图-火丁笔记]: https://huoding.com/2016/08/18/531\n[linkBuildSystemtap-openresty官方文档]: http://openresty.org/en/build-systemtap.html\n[火焰图-openresty最佳实践]: https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\n[Systemtap-UbuntuWiki]: https://wiki.ubuntu.com/Kernel/Systemtap\n[openresty/stapxx]: https://github.com/openresty/stapxx/blob/master/README.markdown\n[openresty/openresty-systemtap-toolkit]: https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\n[brendangregg/FlameGraph]: https://github.com/brendangregg/FlameGraph/blob/master/README.md\n[openresty/stapxx#samples]: https://github.com/openresty/stapxx#samples\n[readme]: https://github.com/openresty/openresty-systemtap-toolkit/#tools\n[虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]: http://zachary-guo.iteye.com/blog/1358312\n","source":"_posts/stap.md","raw":"---\ntitle: openresty使用火焰图排查性能问题\ndate: 2017-09-12 16:31:40\ntags: [openresty,stap,systemtap,flame-graph]\n---\n\n本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图\n\n## 安装调试镜像\n\n```bash\n\n# 导入 GPG key\n# 16.04 and higher\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622\n\n#older distributions\n#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01 \n\n# 设置源\ncodename=$(lsb_release -c | awk  '{print $2}')\nsudo tee /etc/apt/sources.list.d/ddebs.list << EOF\ndeb http://ddebs.ubuntu.com/ ${codename}      main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ ${codename}-security main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ ${codename}-updates  main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ ${codename}-proposed main restricted universe multiverse\nEOF\n\n# 更新\nsudo apt-get update\n\n# 安装调试镜像\nsudo apt-get install -y linux-image-$(uname -r)-dbgsym\n\n```\n\n<!--more-->\n\n## 安装最新版 systemtap\n\n```\n$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext\n\n# https://sourceware.org/elfutils/ftp/?C=M;O=D\n$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2\n$ tar xf elfutils-0.170.tar.bz2\n\n# https://sourceware.org/systemtap/ftp/releases/?C=M;O=D\n$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz\n$ tar zxf systemtap-3.1.tar.gz\n\n$ cd systemtap-3.1\n\n$ ./configure --prefix=/opt/stap --disable-docs \\\n    --disable-publican --disable-refdocs CFLAGS=\"-g -O2\" \\\n    --with-elfutils=../elfutils-0.170\n\n$ make -j$(getconf _NPROCESSORS_ONLN) && sudo make install\n\n# export STAP_HOME=/opt/stap/\n# export PATH=$STAP_HOME:$PATH\n\n# stap -V\n\nSystemtap translator/driver (version 3.1/0.170, non-git sources)\nCopyright (C) 2005-2017 Red Hat, Inc. and others\nThis is free software; see the source for copying conditions.\ntested kernel versions: 2.6.18 ... 4.10-rc8\nenabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE\n\n```\n\n## 测试是否生效\n\n```\n# stap -v -e 'probe vfs.read {printf(\"read performed\\n\"); exit()}'\nPass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.\nPass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.\nPass 3: translated to C into \"/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c\" using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.\nPass 4: compiled C into \"stap_e1c4934460a3e749f6deefe95dd50015_2729.ko\" in 5260usr/420sys/7185real ms.\nPass 5: starting run.\nread performed\nPass 5: run completed in 0usr/20sys/486real ms.\n\n```\n\n## 绘制火焰图\n\n### 下载各工具包\n```\n# git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx\n# export STAP_PLUS_HOME=/opt/stapxx\n# export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH\n\n# stap++ -e 'probe begin { println(\"hello\") exit() }'\n\nhello\n\n\n# git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit\n\n# git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph\n```\n\n### 绘制火焰图\n```\n# /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk '/worker/  {print$2}'| shuf | head -n 1` > /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）\n# /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt > /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)\n# /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt > /tmp/flame.cbt\n# /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt > /tmp/flame.svg\n```\n\n为了突出效果，建议在运行`stap++`的时候，使用压测工具，以便采集足够的样本\n\n```\n# ab -n 10000 -c 100 -k http://localhost/\n```\n\n用浏览器打开 `/tmp/flame.svg` 尽量用 `chrome` `firefox`别用国产乱七八糟浏览器.\n\n## openresty/stapxx\n\n```\n## 使用 stap++ --args xx.sxx查看具体参数\n\n# stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx\n    --arg depth=VALUE (default: 30)\n    --arg detailed=VALUE (default: 0)\n    --arg limit=VALUE (default: 1000)\n    --arg min=VALUE (default: 2)\n    --arg nointerp=VALUE (default: )\n    --arg nojit=VALUE (default: )\n    --arg probe=VALUE (default: timer.profile)\n    --arg time=VALUE (default: )\n```\n\n具体脚本用法，参见 [openresty/stapxx#samples][]\n\n## openresty/openresty-systemtap-toolkit\n\n这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见[readme][].\n\n如果要使用`ngx-leaked-pools`需要用到`dtrace`\n```bash\n$ apt install systemtap-sdt-dev -y\n$ ./configure --prefix=/etc/openresty \\\n  --with-dtrace-probes\n```\n\n如果要用到`ngx-pcrejit`需要在编译openresty时增加`--with-pcre-opt=-g`\n\n重新编译并`make && make install` 后会将原有的二进制文件重命名为`${openresty_home}/nginx/sbin/nginx.old`，并创建一个`${openresty_home}/nginx/sbin/nginx`(新版)\n\n```bash\n$ kill -USR2 `cat /var/run/nginx.pid`\n```\n\n通过`ps -fC nginx`或者`ps -fC openresty`查看新版本是否成功启动\n\n如果成功启动，此时新旧版本同时接受请求\n\n通过\n```\n$ kill -QUIT `cat /var/run/nginx.pid.oldbin`\n```\n\n平滑杀掉旧版\n\n\n更多资料请自行谷歌、百度。或者参阅 下面的**参考连接**\n\n## 参考连接 \n\n- [白话火焰图-火丁笔记][]\n- [Build Systemtap-openresty官方文档][linkBuildSystemtap-openresty官方文档]\n- [火焰图-openresty最佳实践][]\n- [Systemtap - ubuntu wiki][Systemtap-UbuntuWiki]\n- [openresty/stapxx][]\n- [openresty/openresty-systemtap-toolkit][]\n- [brendangregg/FlameGraph][]\n- [虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级][虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]\n\n\n博客 [https://anjia.ml/2017/09/12/stap/][blog]\n掘金 [https://juejin.im/post/59ce27fef265da065b66d54b][juejin]\n简书 [http://www.jianshu.com/p/008fde8837f5][jianshu]\n\n[blog]: https://anjia.ml/2017/09/12/stap/\n[juejin]: https://juejin.im/post/59ce27fef265da065b66d54b\n[jianshu]: http://www.jianshu.com/p/008fde8837f5\n\n\n[白话火焰图-火丁笔记]: https://huoding.com/2016/08/18/531\n[linkBuildSystemtap-openresty官方文档]: http://openresty.org/en/build-systemtap.html\n[火焰图-openresty最佳实践]: https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\n[Systemtap-UbuntuWiki]: https://wiki.ubuntu.com/Kernel/Systemtap\n[openresty/stapxx]: https://github.com/openresty/stapxx/blob/master/README.markdown\n[openresty/openresty-systemtap-toolkit]: https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\n[brendangregg/FlameGraph]: https://github.com/brendangregg/FlameGraph/blob/master/README.md\n[openresty/stapxx#samples]: https://github.com/openresty/stapxx#samples\n[readme]: https://github.com/openresty/openresty-systemtap-toolkit/#tools\n[虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]: http://zachary-guo.iteye.com/blog/1358312\n","slug":"stap","published":1,"updated":"2017-09-30T06:49:20.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5menh001m5gdol3nisusy","content":"<p>本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图</p>\n<h2 id=\"安装调试镜像\"><a href=\"#安装调试镜像\" class=\"headerlink\" title=\"安装调试镜像\"></a>安装调试镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入 GPG key</span></span><br><span class=\"line\"><span class=\"comment\"># 16.04 and higher</span></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#older distributions</span></span><br><span class=\"line\"><span class=\"comment\">#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置源</span></span><br><span class=\"line\">codename=$(lsb_release -c | awk  <span class=\"string\">'&#123;print $2&#125;'</span>)</span><br><span class=\"line\">sudo tee /etc/apt/sources.list.d/ddebs.list &lt;&lt; EOF</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>      main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>-security main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>-updates  main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>-proposed main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装调试镜像</span></span><br><span class=\"line\">sudo apt-get install -y linux-image-$(uname -r)-dbgsym</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"安装最新版-systemtap\"><a href=\"#安装最新版-systemtap\" class=\"headerlink\" title=\"安装最新版 systemtap\"></a>安装最新版 systemtap</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/elfutils/ftp/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2</span><br><span class=\"line\">$ tar xf elfutils-0.170.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/systemtap/ftp/releases/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz</span><br><span class=\"line\">$ tar zxf systemtap-3.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd systemtap-3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/opt/stap --disable-docs \\</span><br><span class=\"line\">    --disable-publican --disable-refdocs CFLAGS=&quot;-g -O2&quot; \\</span><br><span class=\"line\">    --with-elfutils=../elfutils-0.170</span><br><span class=\"line\"></span><br><span class=\"line\">$ make -j$(getconf _NPROCESSORS_ONLN) &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"># export STAP_HOME=/opt/stap/</span><br><span class=\"line\"># export PATH=$STAP_HOME:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap -V</span><br><span class=\"line\"></span><br><span class=\"line\">Systemtap translator/driver (version 3.1/0.170, non-git sources)</span><br><span class=\"line\">Copyright (C) 2005-2017 Red Hat, Inc. and others</span><br><span class=\"line\">This is free software; see the source for copying conditions.</span><br><span class=\"line\">tested kernel versions: 2.6.18 ... 4.10-rc8</span><br><span class=\"line\">enabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试是否生效\"><a href=\"#测试是否生效\" class=\"headerlink\" title=\"测试是否生效\"></a>测试是否生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># stap -v -e &apos;probe vfs.read &#123;printf(&quot;read performed\\n&quot;); exit()&#125;&apos;</span><br><span class=\"line\">Pass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.</span><br><span class=\"line\">Pass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.</span><br><span class=\"line\">Pass 3: translated to C into &quot;/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c&quot; using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.</span><br><span class=\"line\">Pass 4: compiled C into &quot;stap_e1c4934460a3e749f6deefe95dd50015_2729.ko&quot; in 5260usr/420sys/7185real ms.</span><br><span class=\"line\">Pass 5: starting run.</span><br><span class=\"line\">read performed</span><br><span class=\"line\">Pass 5: run completed in 0usr/20sys/486real ms.</span><br></pre></td></tr></table></figure>\n<h2 id=\"绘制火焰图\"><a href=\"#绘制火焰图\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h2><h3 id=\"下载各工具包\"><a href=\"#下载各工具包\" class=\"headerlink\" title=\"下载各工具包\"></a>下载各工具包</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx</span><br><span class=\"line\"># export STAP_PLUS_HOME=/opt/stapxx</span><br><span class=\"line\"># export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ -e &apos;probe begin &#123; println(&quot;hello&quot;) exit() &#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit</span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制火焰图-1\"><a href=\"#绘制火焰图-1\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk &apos;/worker/  &#123;print$2&#125;&apos;| shuf | head -n 1` &gt; /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）</span><br><span class=\"line\"># /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt &gt; /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)</span><br><span class=\"line\"># /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt &gt; /tmp/flame.cbt</span><br><span class=\"line\"># /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt &gt; /tmp/flame.svg</span><br></pre></td></tr></table></figure>\n<p>为了突出效果，建议在运行<code>stap++</code>的时候，使用压测工具，以便采集足够的样本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># ab -n 10000 -c 100 -k http://localhost/</span><br></pre></td></tr></table></figure>\n<p>用浏览器打开 <code>/tmp/flame.svg</code> 尽量用 <code>chrome</code> <code>firefox</code>别用国产乱七八糟浏览器.</p>\n<h2 id=\"openresty-stapxx\"><a href=\"#openresty-stapxx\" class=\"headerlink\" title=\"openresty/stapxx\"></a>openresty/stapxx</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 使用 stap++ --args xx.sxx查看具体参数</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx</span><br><span class=\"line\">    --arg depth=VALUE (default: 30)</span><br><span class=\"line\">    --arg detailed=VALUE (default: 0)</span><br><span class=\"line\">    --arg limit=VALUE (default: 1000)</span><br><span class=\"line\">    --arg min=VALUE (default: 2)</span><br><span class=\"line\">    --arg nointerp=VALUE (default: )</span><br><span class=\"line\">    --arg nojit=VALUE (default: )</span><br><span class=\"line\">    --arg probe=VALUE (default: timer.profile)</span><br><span class=\"line\">    --arg time=VALUE (default: )</span><br></pre></td></tr></table></figure>\n<p>具体脚本用法，参见 <a href=\"https://github.com/openresty/stapxx#samples\" target=\"_blank\" rel=\"noopener\">openresty/stapxx#samples</a></p>\n<h2 id=\"openresty-openresty-systemtap-toolkit\"><a href=\"#openresty-openresty-systemtap-toolkit\" class=\"headerlink\" title=\"openresty/openresty-systemtap-toolkit\"></a>openresty/openresty-systemtap-toolkit</h2><p>这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见<a href=\"https://github.com/openresty/openresty-systemtap-toolkit/#tools\" target=\"_blank\" rel=\"noopener\">readme</a>.</p>\n<p>如果要使用<code>ngx-leaked-pools</code>需要用到<code>dtrace</code><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt install systemtap-sdt-dev -y</span><br><span class=\"line\">$ ./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">  --with-dtrace-probes</span><br></pre></td></tr></table></figure></p>\n<p>如果要用到<code>ngx-pcrejit</code>需要在编译openresty时增加<code>--with-pcre-opt=-g</code></p>\n<p>重新编译并<code>make &amp;&amp; make install</code> 后会将原有的二进制文件重命名为<code>${openresty_home}/nginx/sbin/nginx.old</code>，并创建一个<code>${openresty_home}/nginx/sbin/nginx</code>(新版)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -USR2 `cat /var/run/nginx.pid`</span><br></pre></td></tr></table></figure>\n<p>通过<code>ps -fC nginx</code>或者<code>ps -fC openresty</code>查看新版本是否成功启动</p>\n<p>如果成功启动，此时新旧版本同时接受请求</p>\n<p>通过<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kill -QUIT `cat /var/run/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure></p>\n<p>平滑杀掉旧版</p>\n<p>更多资料请自行谷歌、百度。或者参阅 下面的<strong>参考连接</strong></p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><ul>\n<li><a href=\"https://huoding.com/2016/08/18/531\" target=\"_blank\" rel=\"noopener\">白话火焰图-火丁笔记</a></li>\n<li><a href=\"http://openresty.org/en/build-systemtap.html\" target=\"_blank\" rel=\"noopener\">Build Systemtap-openresty官方文档</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\" target=\"_blank\" rel=\"noopener\">火焰图-openresty最佳实践</a></li>\n<li><a href=\"https://wiki.ubuntu.com/Kernel/Systemtap\" target=\"_blank\" rel=\"noopener\">Systemtap - ubuntu wiki</a></li>\n<li><a href=\"https://github.com/openresty/stapxx/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/stapxx</a></li>\n<li><a href=\"https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/openresty-systemtap-toolkit</a></li>\n<li><a href=\"https://github.com/brendangregg/FlameGraph/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">brendangregg/FlameGraph</a></li>\n<li><a href=\"http://zachary-guo.iteye.com/blog/1358312\" target=\"_blank\" rel=\"noopener\">虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级</a></li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/09/12/stap/\">https://anjia.ml/2017/09/12/stap/</a><br>掘金 <a href=\"https://juejin.im/post/59ce27fef265da065b66d54b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59ce27fef265da065b66d54b</a><br>简书 <a href=\"http://www.jianshu.com/p/008fde8837f5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/008fde8837f5</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图</p>\n<h2 id=\"安装调试镜像\"><a href=\"#安装调试镜像\" class=\"headerlink\" title=\"安装调试镜像\"></a>安装调试镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入 GPG key</span></span><br><span class=\"line\"><span class=\"comment\"># 16.04 and higher</span></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#older distributions</span></span><br><span class=\"line\"><span class=\"comment\">#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置源</span></span><br><span class=\"line\">codename=$(lsb_release -c | awk  <span class=\"string\">'&#123;print $2&#125;'</span>)</span><br><span class=\"line\">sudo tee /etc/apt/sources.list.d/ddebs.list &lt;&lt; EOF</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>      main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>-security main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>-updates  main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">$&#123;codename&#125;</span>-proposed main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装调试镜像</span></span><br><span class=\"line\">sudo apt-get install -y linux-image-$(uname -r)-dbgsym</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装最新版-systemtap\"><a href=\"#安装最新版-systemtap\" class=\"headerlink\" title=\"安装最新版 systemtap\"></a>安装最新版 systemtap</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/elfutils/ftp/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2</span><br><span class=\"line\">$ tar xf elfutils-0.170.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/systemtap/ftp/releases/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz</span><br><span class=\"line\">$ tar zxf systemtap-3.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd systemtap-3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/opt/stap --disable-docs \\</span><br><span class=\"line\">    --disable-publican --disable-refdocs CFLAGS=&quot;-g -O2&quot; \\</span><br><span class=\"line\">    --with-elfutils=../elfutils-0.170</span><br><span class=\"line\"></span><br><span class=\"line\">$ make -j$(getconf _NPROCESSORS_ONLN) &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"># export STAP_HOME=/opt/stap/</span><br><span class=\"line\"># export PATH=$STAP_HOME:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap -V</span><br><span class=\"line\"></span><br><span class=\"line\">Systemtap translator/driver (version 3.1/0.170, non-git sources)</span><br><span class=\"line\">Copyright (C) 2005-2017 Red Hat, Inc. and others</span><br><span class=\"line\">This is free software; see the source for copying conditions.</span><br><span class=\"line\">tested kernel versions: 2.6.18 ... 4.10-rc8</span><br><span class=\"line\">enabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试是否生效\"><a href=\"#测试是否生效\" class=\"headerlink\" title=\"测试是否生效\"></a>测试是否生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># stap -v -e &apos;probe vfs.read &#123;printf(&quot;read performed\\n&quot;); exit()&#125;&apos;</span><br><span class=\"line\">Pass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.</span><br><span class=\"line\">Pass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.</span><br><span class=\"line\">Pass 3: translated to C into &quot;/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c&quot; using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.</span><br><span class=\"line\">Pass 4: compiled C into &quot;stap_e1c4934460a3e749f6deefe95dd50015_2729.ko&quot; in 5260usr/420sys/7185real ms.</span><br><span class=\"line\">Pass 5: starting run.</span><br><span class=\"line\">read performed</span><br><span class=\"line\">Pass 5: run completed in 0usr/20sys/486real ms.</span><br></pre></td></tr></table></figure>\n<h2 id=\"绘制火焰图\"><a href=\"#绘制火焰图\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h2><h3 id=\"下载各工具包\"><a href=\"#下载各工具包\" class=\"headerlink\" title=\"下载各工具包\"></a>下载各工具包</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx</span><br><span class=\"line\"># export STAP_PLUS_HOME=/opt/stapxx</span><br><span class=\"line\"># export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ -e &apos;probe begin &#123; println(&quot;hello&quot;) exit() &#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit</span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制火焰图-1\"><a href=\"#绘制火焰图-1\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk &apos;/worker/  &#123;print$2&#125;&apos;| shuf | head -n 1` &gt; /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）</span><br><span class=\"line\"># /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt &gt; /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)</span><br><span class=\"line\"># /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt &gt; /tmp/flame.cbt</span><br><span class=\"line\"># /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt &gt; /tmp/flame.svg</span><br></pre></td></tr></table></figure>\n<p>为了突出效果，建议在运行<code>stap++</code>的时候，使用压测工具，以便采集足够的样本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># ab -n 10000 -c 100 -k http://localhost/</span><br></pre></td></tr></table></figure>\n<p>用浏览器打开 <code>/tmp/flame.svg</code> 尽量用 <code>chrome</code> <code>firefox</code>别用国产乱七八糟浏览器.</p>\n<h2 id=\"openresty-stapxx\"><a href=\"#openresty-stapxx\" class=\"headerlink\" title=\"openresty/stapxx\"></a>openresty/stapxx</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 使用 stap++ --args xx.sxx查看具体参数</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx</span><br><span class=\"line\">    --arg depth=VALUE (default: 30)</span><br><span class=\"line\">    --arg detailed=VALUE (default: 0)</span><br><span class=\"line\">    --arg limit=VALUE (default: 1000)</span><br><span class=\"line\">    --arg min=VALUE (default: 2)</span><br><span class=\"line\">    --arg nointerp=VALUE (default: )</span><br><span class=\"line\">    --arg nojit=VALUE (default: )</span><br><span class=\"line\">    --arg probe=VALUE (default: timer.profile)</span><br><span class=\"line\">    --arg time=VALUE (default: )</span><br></pre></td></tr></table></figure>\n<p>具体脚本用法，参见 <a href=\"https://github.com/openresty/stapxx#samples\" target=\"_blank\" rel=\"noopener\">openresty/stapxx#samples</a></p>\n<h2 id=\"openresty-openresty-systemtap-toolkit\"><a href=\"#openresty-openresty-systemtap-toolkit\" class=\"headerlink\" title=\"openresty/openresty-systemtap-toolkit\"></a>openresty/openresty-systemtap-toolkit</h2><p>这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见<a href=\"https://github.com/openresty/openresty-systemtap-toolkit/#tools\" target=\"_blank\" rel=\"noopener\">readme</a>.</p>\n<p>如果要使用<code>ngx-leaked-pools</code>需要用到<code>dtrace</code><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt install systemtap-sdt-dev -y</span><br><span class=\"line\">$ ./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">  --with-dtrace-probes</span><br></pre></td></tr></table></figure></p>\n<p>如果要用到<code>ngx-pcrejit</code>需要在编译openresty时增加<code>--with-pcre-opt=-g</code></p>\n<p>重新编译并<code>make &amp;&amp; make install</code> 后会将原有的二进制文件重命名为<code>${openresty_home}/nginx/sbin/nginx.old</code>，并创建一个<code>${openresty_home}/nginx/sbin/nginx</code>(新版)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -USR2 `cat /var/run/nginx.pid`</span><br></pre></td></tr></table></figure>\n<p>通过<code>ps -fC nginx</code>或者<code>ps -fC openresty</code>查看新版本是否成功启动</p>\n<p>如果成功启动，此时新旧版本同时接受请求</p>\n<p>通过<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kill -QUIT `cat /var/run/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure></p>\n<p>平滑杀掉旧版</p>\n<p>更多资料请自行谷歌、百度。或者参阅 下面的<strong>参考连接</strong></p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><ul>\n<li><a href=\"https://huoding.com/2016/08/18/531\" target=\"_blank\" rel=\"noopener\">白话火焰图-火丁笔记</a></li>\n<li><a href=\"http://openresty.org/en/build-systemtap.html\" target=\"_blank\" rel=\"noopener\">Build Systemtap-openresty官方文档</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\" target=\"_blank\" rel=\"noopener\">火焰图-openresty最佳实践</a></li>\n<li><a href=\"https://wiki.ubuntu.com/Kernel/Systemtap\" target=\"_blank\" rel=\"noopener\">Systemtap - ubuntu wiki</a></li>\n<li><a href=\"https://github.com/openresty/stapxx/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/stapxx</a></li>\n<li><a href=\"https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/openresty-systemtap-toolkit</a></li>\n<li><a href=\"https://github.com/brendangregg/FlameGraph/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">brendangregg/FlameGraph</a></li>\n<li><a href=\"http://zachary-guo.iteye.com/blog/1358312\" target=\"_blank\" rel=\"noopener\">虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级</a></li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/09/12/stap/\">https://anjia.ml/2017/09/12/stap/</a><br>掘金 <a href=\"https://juejin.im/post/59ce27fef265da065b66d54b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59ce27fef265da065b66d54b</a><br>简书 <a href=\"http://www.jianshu.com/p/008fde8837f5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/008fde8837f5</a></p>"},{"title":"windows 10 64bit下安装Tensorflow+Keras","date":"2017-07-03T08:40:58.000Z","_content":"\nwindows 10 下 pip,conda 换国内源，安装Tensorflow,Keras\n\n\n<!-- more -->\n\n### 修改pip源 参考 [Python pip 国内镜像大全及使用办法][linkPythonPip国内镜像大全及使用办法]\n\n官方文档 [Config file][linkConfigFile]\n\nwindows 全部用户需要在`%APPDATA%\\pip\\pip.ini`,当前用户在`%HOME%\\pip\\pip.ini`\n\n```\n[global]\nindex-url=http://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n\n### 安装Tensorflow\n\n参考 [Installing TensorFlow on Windows][linkInstallingTensorflowOnWindows] \n\n```\n# 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本\n\n#打开Anaconda Prompt\n(python35) C:\\Users\\xx> activate python35\n\n#因为电脑无独显，所以安装`CPU-only`版本\n(python35) C:\\Users\\xx> pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl \n\n(python35) C:\\Users\\xx>python\n```\n\n```python\n>>> import tensorflow as tf\n>>> hello = tf.constant('Hello, TensorFlow')\n>>> sess = tf.Session()\n2017-07-03 16:44:16.082952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085590: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086312: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087014: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\n>>> print(sess.run(hello))\nb'Hello, TensorFlow'\n```\n\n如果要去掉`4-12`的警告信息，需要自己编译。详见 [\"The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations\" in \"Hello, TensorFlow!\" program #7778](https://github.com/tensorflow/tensorflow/issues/7778)\n\n### 安装Keras\n\n参考 官方文档 [Installation][]  中文文档  [Keras安装和配置指南(Windows)][]\n\n```bash\n(python35) C:\\Users\\xx>pip install keras -U --pre\n```\n\n但是我安装一直报错，\n```bash\nRunning setup.py bdist_wheel for scipy ... error\n  Complete output from command {Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d {AppData}\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:\n  lapack_opt_info:\n  lapack_mkl_info:\n    libraries mkl_rt not found in ['{Anaconda3_home}\\\\envs\\\\python35\\\\lib', 'C:\\\\', '{Anaconda3_home}\\\\envs\\\\python35\\\\libs']\n    NOT AVAILABLE\n\n## ...\n\nCommand \"{Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record {AppData}\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in {AppData}\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\\n```\n\n网上有建议通过 `pip install git+git://github.com/Theano/Theano.git` 从github直接下最新代码安装的，但是也是安装失败\n\n我成功的方式\n\n```\n(python35) C:\\Users\\xx>conda install mingw libpython theano -y\n(python35) C:\\Users\\xx>pip install keras\n```\n\n天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源][清华镜像源]\n```\n(python35) C:\\Users\\xx>python\nPython 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import keras\nUsing TensorFlow backend.\n```\n安装成功，默认后端是TensorFlow\n\n\n\n\n博客 [https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/][blog]\n掘金 [https://juejin.im/post/595a24b15188250d8d14237a][juejin]\n简书 [http://www.jianshu.com/p/e0d9fa795116][jianshu]\n\n[blog]: https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\n[juejin]: https://juejin.im/post/595a24b15188250d8d14237a\n[jianshu]: http://www.jianshu.com/p/e0d9fa795116\n[linkPythonPip国内镜像大全及使用办法]: http://blog.csdn.net/testcs_dn/article/details/54374849\n[linkConfigFile]: https://pip.pypa.io/en/stable/user_guide/#config-file\n[linkInstallingTensorflowOnWindows]: https://www.tensorflow.org/install/install_windows\n[Installation]: https://keras.io/#installation\n[Keras安装和配置指南(Windows)]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[清华镜像源]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\n","source":"_posts/windows-install-tensorflow-keras.md","raw":"---\ntitle: windows 10 64bit下安装Tensorflow+Keras\ndate: 2017-07-03 16:40:58\ntags: [python,anaconda,AI,Tensorflow,Keras]\ncategories: [anaconda,python,AI,Tensorflow,Keras]\n---\n\nwindows 10 下 pip,conda 换国内源，安装Tensorflow,Keras\n\n\n<!-- more -->\n\n### 修改pip源 参考 [Python pip 国内镜像大全及使用办法][linkPythonPip国内镜像大全及使用办法]\n\n官方文档 [Config file][linkConfigFile]\n\nwindows 全部用户需要在`%APPDATA%\\pip\\pip.ini`,当前用户在`%HOME%\\pip\\pip.ini`\n\n```\n[global]\nindex-url=http://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n\n### 安装Tensorflow\n\n参考 [Installing TensorFlow on Windows][linkInstallingTensorflowOnWindows] \n\n```\n# 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本\n\n#打开Anaconda Prompt\n(python35) C:\\Users\\xx> activate python35\n\n#因为电脑无独显，所以安装`CPU-only`版本\n(python35) C:\\Users\\xx> pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl \n\n(python35) C:\\Users\\xx>python\n```\n\n```python\n>>> import tensorflow as tf\n>>> hello = tf.constant('Hello, TensorFlow')\n>>> sess = tf.Session()\n2017-07-03 16:44:16.082952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085590: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086312: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087014: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\n>>> print(sess.run(hello))\nb'Hello, TensorFlow'\n```\n\n如果要去掉`4-12`的警告信息，需要自己编译。详见 [\"The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations\" in \"Hello, TensorFlow!\" program #7778](https://github.com/tensorflow/tensorflow/issues/7778)\n\n### 安装Keras\n\n参考 官方文档 [Installation][]  中文文档  [Keras安装和配置指南(Windows)][]\n\n```bash\n(python35) C:\\Users\\xx>pip install keras -U --pre\n```\n\n但是我安装一直报错，\n```bash\nRunning setup.py bdist_wheel for scipy ... error\n  Complete output from command {Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d {AppData}\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:\n  lapack_opt_info:\n  lapack_mkl_info:\n    libraries mkl_rt not found in ['{Anaconda3_home}\\\\envs\\\\python35\\\\lib', 'C:\\\\', '{Anaconda3_home}\\\\envs\\\\python35\\\\libs']\n    NOT AVAILABLE\n\n## ...\n\nCommand \"{Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record {AppData}\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in {AppData}\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\\n```\n\n网上有建议通过 `pip install git+git://github.com/Theano/Theano.git` 从github直接下最新代码安装的，但是也是安装失败\n\n我成功的方式\n\n```\n(python35) C:\\Users\\xx>conda install mingw libpython theano -y\n(python35) C:\\Users\\xx>pip install keras\n```\n\n天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源][清华镜像源]\n```\n(python35) C:\\Users\\xx>python\nPython 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import keras\nUsing TensorFlow backend.\n```\n安装成功，默认后端是TensorFlow\n\n\n\n\n博客 [https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/][blog]\n掘金 [https://juejin.im/post/595a24b15188250d8d14237a][juejin]\n简书 [http://www.jianshu.com/p/e0d9fa795116][jianshu]\n\n[blog]: https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\n[juejin]: https://juejin.im/post/595a24b15188250d8d14237a\n[jianshu]: http://www.jianshu.com/p/e0d9fa795116\n[linkPythonPip国内镜像大全及使用办法]: http://blog.csdn.net/testcs_dn/article/details/54374849\n[linkConfigFile]: https://pip.pypa.io/en/stable/user_guide/#config-file\n[linkInstallingTensorflowOnWindows]: https://www.tensorflow.org/install/install_windows\n[Installation]: https://keras.io/#installation\n[Keras安装和配置指南(Windows)]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[清华镜像源]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\n","slug":"windows-install-tensorflow-keras","published":1,"updated":"2017-07-03T11:07:39.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5menj001n5gdowfqqfciq","content":"<p>windows 10 下 pip,conda 换国内源，安装Tensorflow,Keras</p>\n<a id=\"more\"></a>\n<h3 id=\"修改pip源-参考-Python-pip-国内镜像大全及使用办法\"><a href=\"#修改pip源-参考-Python-pip-国内镜像大全及使用办法\" class=\"headerlink\" title=\"修改pip源 参考 Python pip 国内镜像大全及使用办法\"></a>修改pip源 参考 <a href=\"http://blog.csdn.net/testcs_dn/article/details/54374849\" target=\"_blank\" rel=\"noopener\">Python pip 国内镜像大全及使用办法</a></h3><p>官方文档 <a href=\"https://pip.pypa.io/en/stable/user_guide/#config-file\" target=\"_blank\" rel=\"noopener\">Config file</a></p>\n<p>windows 全部用户需要在<code>%APPDATA%\\pip\\pip.ini</code>,当前用户在<code>%HOME%\\pip\\pip.ini</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Tensorflow\"><a href=\"#安装Tensorflow\" class=\"headerlink\" title=\"安装Tensorflow\"></a>安装Tensorflow</h3><p>参考 <a href=\"https://www.tensorflow.org/install/install_windows\" target=\"_blank\" rel=\"noopener\">Installing TensorFlow on Windows</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本</span><br><span class=\"line\"></span><br><span class=\"line\">#打开Anaconda Prompt</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; activate python35</span><br><span class=\"line\"></span><br><span class=\"line\">#因为电脑无独显，所以安装`CPU-only`版本</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl </span><br><span class=\"line\"></span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = tf.constant(<span class=\"string\">'Hello, TensorFlow'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sess = tf.Session()</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.082952</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE2 instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.085590</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE4<span class=\"number\">.1</span> instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.086312</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use AVX instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.087014</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use FMA instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sess.run(hello))</span><br><span class=\"line\"><span class=\"string\">b'Hello, TensorFlow'</span></span><br></pre></td></tr></table></figure>\n<p>如果要去掉<code>4-12</code>的警告信息，需要自己编译。详见 <a href=\"https://github.com/tensorflow/tensorflow/issues/7778\" target=\"_blank\" rel=\"noopener\">“The TensorFlow library wasn’t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations” in “Hello, TensorFlow!” program #7778</a></p>\n<h3 id=\"安装Keras\"><a href=\"#安装Keras\" class=\"headerlink\" title=\"安装Keras\"></a>安装Keras</h3><p>参考 官方文档 <a href=\"https://keras.io/#installation\" target=\"_blank\" rel=\"noopener\">Installation</a>  中文文档  <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras -U --pre</span><br></pre></td></tr></table></figure>\n<p>但是我安装一直报错，<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Running setup.py bdist_wheel <span class=\"keyword\">for</span> scipy ... error</span><br><span class=\"line\">  Complete output from <span class=\"built_in\">command</span> &#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c <span class=\"string\">\"import setuptools, tokenize;__file__='&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\"</span> bdist_wheel -d &#123;AppData&#125;\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:</span><br><span class=\"line\">  lapack_opt_info:</span><br><span class=\"line\">  lapack_mkl_info:</span><br><span class=\"line\">    libraries mkl_rt not found <span class=\"keyword\">in</span> [<span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\lib'</span>, <span class=\"string\">'C:\\\\'</span>, <span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\libs'</span>]</span><br><span class=\"line\">    NOT AVAILABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Command <span class=\"string\">\"&#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c \"</span>import setuptools, tokenize;__file__=<span class=\"string\">'&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py'</span>;f=getattr(tokenize, <span class=\"string\">'open'</span>, open)(__file__);code=f.read().replace(<span class=\"string\">'\\r\\n'</span>, <span class=\"string\">'\\n'</span>);f.close();<span class=\"built_in\">exec</span>(compile(code, __file__, <span class=\"string\">'exec'</span>))<span class=\"string\">\" install --record &#123;AppData&#125;\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\"</span> failed with error code 1 <span class=\"keyword\">in</span> &#123;AppData&#125;\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\</span><br></pre></td></tr></table></figure></p>\n<p>网上有建议通过 <code>pip install git+git://github.com/Theano/Theano.git</code> 从github直接下最新代码安装的，但是也是安装失败</p>\n<p>我成功的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;conda install mingw libpython theano -y</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras</span><br></pre></td></tr></table></figure>\n<p>天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br><span class=\"line\">Python 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import keras</span><br><span class=\"line\">Using TensorFlow backend.</span><br></pre></td></tr></table></figure></p>\n<p>安装成功，默认后端是TensorFlow</p>\n<p>博客 <a href=\"https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\">https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/</a><br>掘金 <a href=\"https://juejin.im/post/595a24b15188250d8d14237a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595a24b15188250d8d14237a</a><br>简书 <a href=\"http://www.jianshu.com/p/e0d9fa795116\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e0d9fa795116</a></p>\n","site":{"data":{}},"excerpt":"<p>windows 10 下 pip,conda 换国内源，安装Tensorflow,Keras</p>","more":"<h3 id=\"修改pip源-参考-Python-pip-国内镜像大全及使用办法\"><a href=\"#修改pip源-参考-Python-pip-国内镜像大全及使用办法\" class=\"headerlink\" title=\"修改pip源 参考 Python pip 国内镜像大全及使用办法\"></a>修改pip源 参考 <a href=\"http://blog.csdn.net/testcs_dn/article/details/54374849\" target=\"_blank\" rel=\"noopener\">Python pip 国内镜像大全及使用办法</a></h3><p>官方文档 <a href=\"https://pip.pypa.io/en/stable/user_guide/#config-file\" target=\"_blank\" rel=\"noopener\">Config file</a></p>\n<p>windows 全部用户需要在<code>%APPDATA%\\pip\\pip.ini</code>,当前用户在<code>%HOME%\\pip\\pip.ini</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Tensorflow\"><a href=\"#安装Tensorflow\" class=\"headerlink\" title=\"安装Tensorflow\"></a>安装Tensorflow</h3><p>参考 <a href=\"https://www.tensorflow.org/install/install_windows\" target=\"_blank\" rel=\"noopener\">Installing TensorFlow on Windows</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本</span><br><span class=\"line\"></span><br><span class=\"line\">#打开Anaconda Prompt</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; activate python35</span><br><span class=\"line\"></span><br><span class=\"line\">#因为电脑无独显，所以安装`CPU-only`版本</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl </span><br><span class=\"line\"></span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = tf.constant(<span class=\"string\">'Hello, TensorFlow'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sess = tf.Session()</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.082952</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE2 instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.085590</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE4<span class=\"number\">.1</span> instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.086312</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use AVX instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.087014</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use FMA instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sess.run(hello))</span><br><span class=\"line\"><span class=\"string\">b'Hello, TensorFlow'</span></span><br></pre></td></tr></table></figure>\n<p>如果要去掉<code>4-12</code>的警告信息，需要自己编译。详见 <a href=\"https://github.com/tensorflow/tensorflow/issues/7778\" target=\"_blank\" rel=\"noopener\">“The TensorFlow library wasn’t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations” in “Hello, TensorFlow!” program #7778</a></p>\n<h3 id=\"安装Keras\"><a href=\"#安装Keras\" class=\"headerlink\" title=\"安装Keras\"></a>安装Keras</h3><p>参考 官方文档 <a href=\"https://keras.io/#installation\" target=\"_blank\" rel=\"noopener\">Installation</a>  中文文档  <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras -U --pre</span><br></pre></td></tr></table></figure>\n<p>但是我安装一直报错，<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Running setup.py bdist_wheel <span class=\"keyword\">for</span> scipy ... error</span><br><span class=\"line\">  Complete output from <span class=\"built_in\">command</span> &#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c <span class=\"string\">\"import setuptools, tokenize;__file__='&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\"</span> bdist_wheel -d &#123;AppData&#125;\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:</span><br><span class=\"line\">  lapack_opt_info:</span><br><span class=\"line\">  lapack_mkl_info:</span><br><span class=\"line\">    libraries mkl_rt not found <span class=\"keyword\">in</span> [<span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\lib'</span>, <span class=\"string\">'C:\\\\'</span>, <span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\libs'</span>]</span><br><span class=\"line\">    NOT AVAILABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Command <span class=\"string\">\"&#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c \"</span>import setuptools, tokenize;__file__=<span class=\"string\">'&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py'</span>;f=getattr(tokenize, <span class=\"string\">'open'</span>, open)(__file__);code=f.read().replace(<span class=\"string\">'\\r\\n'</span>, <span class=\"string\">'\\n'</span>);f.close();<span class=\"built_in\">exec</span>(compile(code, __file__, <span class=\"string\">'exec'</span>))<span class=\"string\">\" install --record &#123;AppData&#125;\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\"</span> failed with error code 1 <span class=\"keyword\">in</span> &#123;AppData&#125;\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\</span><br></pre></td></tr></table></figure></p>\n<p>网上有建议通过 <code>pip install git+git://github.com/Theano/Theano.git</code> 从github直接下最新代码安装的，但是也是安装失败</p>\n<p>我成功的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;conda install mingw libpython theano -y</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras</span><br></pre></td></tr></table></figure>\n<p>天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br><span class=\"line\">Python 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import keras</span><br><span class=\"line\">Using TensorFlow backend.</span><br></pre></td></tr></table></figure></p>\n<p>安装成功，默认后端是TensorFlow</p>\n<p>博客 <a href=\"https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\">https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/</a><br>掘金 <a href=\"https://juejin.im/post/595a24b15188250d8d14237a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595a24b15188250d8d14237a</a><br>简书 <a href=\"http://www.jianshu.com/p/e0d9fa795116\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e0d9fa795116</a></p>"},{"title":"xshell 使用 Oh My ZSH home键 end键 小键盘区无效解决办法","date":"2017-09-10T08:38:41.000Z","_content":"\nzsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 [robbyrussell/oh-my-zsh][] 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k\n\n同样很优秀的有 [fisherman/fisherman][]\n\n此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。\n\n此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题\n\n<!--more-->\n\n参考连接 [Cannot using home/end key after install oh-my-zsh][linkCannotUsingHome/endKeyAfterInstall]\n\n第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成`linux`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg)\n\n但是注意 [@linlinlinlin ][] 所说，改用`linux`可能会导致shell的颜色比较奇怪。\n\n`linux`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg)\n\n`xterm`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg)\n\n\n结合 [@candrew34][] 和 [@linlinlinlin ][]的回复，得出第二种方案\n\n第二种方法，稍微复杂点\n\n```bash\ncat <<ENDOF >> ~/.zshrc\n# Home\nbindkey '\\e[1~' beginning-of-line\n# End\nbindkey '\\e[4~' end-of-line\n\n# Keypad\n# 0 . Enter\nbindkey -s \"^[Op\" \"0\"\nbindkey -s \"^[Ol\" \".\"\nbindkey -s \"^[OM\" \"^M\"\n# 1 2 3\nbindkey -s \"^[Oq\" \"1\"\nbindkey -s \"^[Or\" \"2\"\nbindkey -s \"^[Os\" \"3\"\n# 4 5 6\nbindkey -s \"^[Ot\" \"4\"\nbindkey -s \"^[Ou\" \"5\"\nbindkey -s \"^[Ov\" \"6\"\n# 7 8 9\nbindkey -s \"^[Ow\" \"7\"\nbindkey -s \"^[Ox\" \"8\"\nbindkey -s \"^[Oy\" \"9\"\n# + -  * /\nbindkey -s \"^[Ok\" \"+\"\nbindkey -s \"^[Om\" \"-\"\nbindkey -s \"^[Oj\" \"*\"\nbindkey -s \"^[Oo\" \"/\"\nENDOF\n\nsource ~/.zshrc\n```\n\n\n另附 [客户端putty, xshell连接linux中vim的小键盘问题][link客户端putty,Xshell连接linux中vim的小键盘问题]\n\n[robbyrussell/oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[fisherman/fisherman]: https://github.com/fisherman/fisherman\n[@linlinlinlin ]: https://github.com/linlinlinlin\n[@candrew34]: https://github.com/candrew34\n[linkCannotUsingHome/endKeyAfterInstall]: https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\n[link客户端putty,Xshell连接linux中vim的小键盘问题]: http://blog.csdn.net/jiedushi/article/details/6266944\n","source":"_posts/zsh-home-end-keypad-not-work.md","raw":"---\ntitle: xshell 使用 Oh My ZSH home键 end键 小键盘区无效解决办法\ndate: 2017-09-10 16:38:41\ntags: [zsh,xshell,oh-my-zsh]\n---\n\nzsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 [robbyrussell/oh-my-zsh][] 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k\n\n同样很优秀的有 [fisherman/fisherman][]\n\n此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。\n\n此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题\n\n<!--more-->\n\n参考连接 [Cannot using home/end key after install oh-my-zsh][linkCannotUsingHome/endKeyAfterInstall]\n\n第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成`linux`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg)\n\n但是注意 [@linlinlinlin ][] 所说，改用`linux`可能会导致shell的颜色比较奇怪。\n\n`linux`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg)\n\n`xterm`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg)\n\n\n结合 [@candrew34][] 和 [@linlinlinlin ][]的回复，得出第二种方案\n\n第二种方法，稍微复杂点\n\n```bash\ncat <<ENDOF >> ~/.zshrc\n# Home\nbindkey '\\e[1~' beginning-of-line\n# End\nbindkey '\\e[4~' end-of-line\n\n# Keypad\n# 0 . Enter\nbindkey -s \"^[Op\" \"0\"\nbindkey -s \"^[Ol\" \".\"\nbindkey -s \"^[OM\" \"^M\"\n# 1 2 3\nbindkey -s \"^[Oq\" \"1\"\nbindkey -s \"^[Or\" \"2\"\nbindkey -s \"^[Os\" \"3\"\n# 4 5 6\nbindkey -s \"^[Ot\" \"4\"\nbindkey -s \"^[Ou\" \"5\"\nbindkey -s \"^[Ov\" \"6\"\n# 7 8 9\nbindkey -s \"^[Ow\" \"7\"\nbindkey -s \"^[Ox\" \"8\"\nbindkey -s \"^[Oy\" \"9\"\n# + -  * /\nbindkey -s \"^[Ok\" \"+\"\nbindkey -s \"^[Om\" \"-\"\nbindkey -s \"^[Oj\" \"*\"\nbindkey -s \"^[Oo\" \"/\"\nENDOF\n\nsource ~/.zshrc\n```\n\n\n另附 [客户端putty, xshell连接linux中vim的小键盘问题][link客户端putty,Xshell连接linux中vim的小键盘问题]\n\n[robbyrussell/oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[fisherman/fisherman]: https://github.com/fisherman/fisherman\n[@linlinlinlin ]: https://github.com/linlinlinlin\n[@candrew34]: https://github.com/candrew34\n[linkCannotUsingHome/endKeyAfterInstall]: https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\n[link客户端putty,Xshell连接linux中vim的小键盘问题]: http://blog.csdn.net/jiedushi/article/details/6266944\n","slug":"zsh-home-end-keypad-not-work","published":1,"updated":"2017-09-10T09:25:03.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaq5menl001q5gdo4csytsbl","content":"<p>zsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">robbyrussell/oh-my-zsh</a> 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k</p>\n<p>同样很优秀的有 <a href=\"https://github.com/fisherman/fisherman\" target=\"_blank\" rel=\"noopener\">fisherman/fisherman</a></p>\n<p>此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。</p>\n<p>此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题</p>\n<a id=\"more\"></a>\n<p>参考连接 <a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\" target=\"_blank\" rel=\"noopener\">Cannot using home/end key after install oh-my-zsh</a></p>\n<p>第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成<code>linux</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg\" alt=\"\"></p>\n<p>但是注意 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a> 所说，改用<code>linux</code>可能会导致shell的颜色比较奇怪。</p>\n<p><code>linux</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg\" alt=\"\"></p>\n<p><code>xterm</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg\" alt=\"\"></p>\n<p>结合 <a href=\"https://github.com/candrew34\" target=\"_blank\" rel=\"noopener\">@candrew34</a> 和 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a>的回复，得出第二种方案</p>\n<p>第二种方法，稍微复杂点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;ENDOF &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># Home</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[1~'</span> beginning-of-line</span><br><span class=\"line\"><span class=\"comment\"># End</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[4~'</span> end-of-line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keypad</span></span><br><span class=\"line\"><span class=\"comment\"># 0 . Enter</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Op\"</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ol\"</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[OM\"</span> <span class=\"string\">\"^M\"</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oq\"</span> <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Or\"</span> <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Os\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"comment\"># 4 5 6</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ot\"</span> <span class=\"string\">\"4\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ou\"</span> <span class=\"string\">\"5\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ov\"</span> <span class=\"string\">\"6\"</span></span><br><span class=\"line\"><span class=\"comment\"># 7 8 9</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ow\"</span> <span class=\"string\">\"7\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ox\"</span> <span class=\"string\">\"8\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oy\"</span> <span class=\"string\">\"9\"</span></span><br><span class=\"line\"><span class=\"comment\"># + -  * /</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ok\"</span> <span class=\"string\">\"+\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Om\"</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oj\"</span> <span class=\"string\">\"*\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oo\"</span> <span class=\"string\">\"/\"</span></span><br><span class=\"line\">ENDOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>另附 <a href=\"http://blog.csdn.net/jiedushi/article/details/6266944\" target=\"_blank\" rel=\"noopener\">客户端putty, xshell连接linux中vim的小键盘问题</a></p>\n","site":{"data":{}},"excerpt":"<p>zsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">robbyrussell/oh-my-zsh</a> 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k</p>\n<p>同样很优秀的有 <a href=\"https://github.com/fisherman/fisherman\" target=\"_blank\" rel=\"noopener\">fisherman/fisherman</a></p>\n<p>此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。</p>\n<p>此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题</p>","more":"<p>参考连接 <a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\" target=\"_blank\" rel=\"noopener\">Cannot using home/end key after install oh-my-zsh</a></p>\n<p>第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成<code>linux</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg\" alt=\"\"></p>\n<p>但是注意 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a> 所说，改用<code>linux</code>可能会导致shell的颜色比较奇怪。</p>\n<p><code>linux</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg\" alt=\"\"></p>\n<p><code>xterm</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg\" alt=\"\"></p>\n<p>结合 <a href=\"https://github.com/candrew34\" target=\"_blank\" rel=\"noopener\">@candrew34</a> 和 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a>的回复，得出第二种方案</p>\n<p>第二种方法，稍微复杂点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;ENDOF &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># Home</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[1~'</span> beginning-of-line</span><br><span class=\"line\"><span class=\"comment\"># End</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[4~'</span> end-of-line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keypad</span></span><br><span class=\"line\"><span class=\"comment\"># 0 . Enter</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Op\"</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ol\"</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[OM\"</span> <span class=\"string\">\"^M\"</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oq\"</span> <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Or\"</span> <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Os\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"comment\"># 4 5 6</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ot\"</span> <span class=\"string\">\"4\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ou\"</span> <span class=\"string\">\"5\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ov\"</span> <span class=\"string\">\"6\"</span></span><br><span class=\"line\"><span class=\"comment\"># 7 8 9</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ow\"</span> <span class=\"string\">\"7\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ox\"</span> <span class=\"string\">\"8\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oy\"</span> <span class=\"string\">\"9\"</span></span><br><span class=\"line\"><span class=\"comment\"># + -  * /</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ok\"</span> <span class=\"string\">\"+\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Om\"</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oj\"</span> <span class=\"string\">\"*\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oo\"</span> <span class=\"string\">\"/\"</span></span><br><span class=\"line\">ENDOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>另附 <a href=\"http://blog.csdn.net/jiedushi/article/details/6266944\" target=\"_blank\" rel=\"noopener\">客户端putty, xshell连接linux中vim的小键盘问题</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjaq5melr00015gdo6jaa8al5","category_id":"cjaq5melw00045gdowj80dnlg","_id":"cjaq5mem8000d5gdo6sxhp6kp"},{"post_id":"cjaq5mem6000a5gdoepv948m8","category_id":"cjaq5melw00045gdowj80dnlg","_id":"cjaq5memh000i5gdo63seib0l"},{"post_id":"cjaq5mem7000c5gdols6g612o","category_id":"cjaq5melw00045gdowj80dnlg","_id":"cjaq5memj000l5gdone4egtba"},{"post_id":"cjaq5mema000e5gdofco9cgjv","category_id":"cjaq5melw00045gdowj80dnlg","_id":"cjaq5meml000p5gdoh3lqspqx"},{"post_id":"cjaq5memh000h5gdo19pxvn2l","category_id":"cjaq5melw00045gdowj80dnlg","_id":"cjaq5memo000t5gdocu0hab6z"},{"post_id":"cjaq5melw00055gdof881qoe2","category_id":"cjaq5mem500095gdoourk0fcm","_id":"cjaq5memp000v5gdotqakvldw"},{"post_id":"cjaq5melw00055gdof881qoe2","category_id":"cjaq5memf000f5gdoubwyzkx2","_id":"cjaq5memq000y5gdoybw74gay"},{"post_id":"cjaq5memj000k5gdozs6vtad4","category_id":"cjaq5memn000r5gdo32rna35t","_id":"cjaq5men000135gdofsw58lyi"},{"post_id":"cjaq5memp000u5gdothl8i3z1","category_id":"cjaq5memq000z5gdo1c4twnl3","_id":"cjaq5men7001c5gdoag3r7cja"},{"post_id":"cjaq5mems00105gdon10xi8si","category_id":"cjaq5memq000z5gdo1c4twnl3","_id":"cjaq5mene001i5gdoijf0obha"},{"post_id":"cjaq5men400195gdol52n2k1h","category_id":"cjaq5men9001f5gdofm121ufx","_id":"cjaq5menk001o5gdo465cfgv3"},{"post_id":"cjaq5menf001k5gdo10ej0ky3","category_id":"cjaq5memn000r5gdo32rna35t","_id":"cjaq5menl001r5gdo8p6w500e"},{"post_id":"cjaq5mena001g5gdoqmbey2nk","category_id":"cjaq5menh001l5gdo3vdc3vv1","_id":"cjaq5menn001t5gdofws3goh2"},{"post_id":"cjaq5menj001n5gdowfqqfciq","category_id":"cjaq5mem500095gdoourk0fcm","_id":"cjaq5menw002c5gdo24byz022"},{"post_id":"cjaq5menj001n5gdowfqqfciq","category_id":"cjaq5menl001s5gdo2wuajbaq","_id":"cjaq5menx002e5gdoquovjhlm"},{"post_id":"cjaq5menj001n5gdowfqqfciq","category_id":"cjaq5meno001z5gdo2zo9a281","_id":"cjaq5meny002h5gdoixexaofb"},{"post_id":"cjaq5menj001n5gdowfqqfciq","category_id":"cjaq5menp00225gdoibckttwb","_id":"cjaq5meny002j5gdoi7uqw5qf"},{"post_id":"cjaq5menj001n5gdowfqqfciq","category_id":"cjaq5menv00255gdocjasosk7","_id":"cjaq5meo0002l5gdotmb5anhc"}],"PostTag":[{"post_id":"cjaq5melm00005gdo5uls28ix","tag_id":"cjaq5melt00025gdoiv4gbzhj","_id":"cjaq5memi000j5gdo2okl7tam"},{"post_id":"cjaq5melm00005gdo5uls28ix","tag_id":"cjaq5mem300075gdovhru8x1p","_id":"cjaq5memk000m5gdoq1zysg5v"},{"post_id":"cjaq5melm00005gdo5uls28ix","tag_id":"cjaq5mem7000b5gdoxil0nauc","_id":"cjaq5memn000q5gdo41x43431"},{"post_id":"cjaq5melr00015gdo6jaa8al5","tag_id":"cjaq5memg000g5gdoreqi9q2i","_id":"cjaq5men000145gdo2r88rh43"},{"post_id":"cjaq5melr00015gdo6jaa8al5","tag_id":"cjaq5memk000n5gdo7l0kut4r","_id":"cjaq5men200175gdoilw7khrn"},{"post_id":"cjaq5melr00015gdo6jaa8al5","tag_id":"cjaq5memp000w5gdod4qh0to0","_id":"cjaq5men4001a5gdohx56htse"},{"post_id":"cjaq5melu00035gdonk3eb3tl","tag_id":"cjaq5melt00025gdoiv4gbzhj","_id":"cjaq5men8001d5gdoghbeijbv"},{"post_id":"cjaq5melw00055gdof881qoe2","tag_id":"cjaq5men400185gdom19ct592","_id":"cjaq5menn001v5gdotwcmamnr"},{"post_id":"cjaq5melw00055gdof881qoe2","tag_id":"cjaq5men8001e5gdou49wt9cz","_id":"cjaq5menn001w5gdo6hjwkntd"},{"post_id":"cjaq5melw00055gdof881qoe2","tag_id":"cjaq5menf001j5gdoioyignf9","_id":"cjaq5meno001y5gdojnf9jrgc"},{"post_id":"cjaq5melw00055gdof881qoe2","tag_id":"cjaq5menk001p5gdofyuvx1ti","_id":"cjaq5menp00205gdo4k48bvjj"},{"post_id":"cjaq5melz00065gdo410l0zfb","tag_id":"cjaq5menn001u5gdow5uoj6n2","_id":"cjaq5menv00265gdotkco98m2"},{"post_id":"cjaq5melz00065gdo410l0zfb","tag_id":"cjaq5meno001x5gdojw8xbzh6","_id":"cjaq5menv00275gdopem0jnjp"},{"post_id":"cjaq5melz00065gdo410l0zfb","tag_id":"cjaq5menp00215gdozfp5e62c","_id":"cjaq5menw00295gdokjoahoq6"},{"post_id":"cjaq5melz00065gdo410l0zfb","tag_id":"cjaq5ment00235gdop1vai3y2","_id":"cjaq5menw002a5gdob5f5gdye"},{"post_id":"cjaq5mem400085gdog9acbwc3","tag_id":"cjaq5menu00245gdo1rwior9z","_id":"cjaq5menx002d5gdog62220yr"},{"post_id":"cjaq5mem400085gdog9acbwc3","tag_id":"cjaq5melt00025gdoiv4gbzhj","_id":"cjaq5menx002f5gdohh6btrkh"},{"post_id":"cjaq5mem400085gdog9acbwc3","tag_id":"cjaq5menv00285gdo24lbxo7y","_id":"cjaq5meny002i5gdo2n1v0tb9"},{"post_id":"cjaq5mem6000a5gdoepv948m8","tag_id":"cjaq5memg000g5gdoreqi9q2i","_id":"cjaq5meo1002n5gdoo7w18gup"},{"post_id":"cjaq5mem6000a5gdoepv948m8","tag_id":"cjaq5memk000n5gdo7l0kut4r","_id":"cjaq5meo1002o5gdoxvgbesz4"},{"post_id":"cjaq5mem6000a5gdoepv948m8","tag_id":"cjaq5meny002k5gdodbhhbapf","_id":"cjaq5meo1002q5gdodz8elkqa"},{"post_id":"cjaq5mem7000c5gdols6g612o","tag_id":"cjaq5memg000g5gdoreqi9q2i","_id":"cjaq5meo3002t5gdoibg7u9ju"},{"post_id":"cjaq5mem7000c5gdols6g612o","tag_id":"cjaq5memk000n5gdo7l0kut4r","_id":"cjaq5meo4002u5gdov2h72l3u"},{"post_id":"cjaq5mem7000c5gdols6g612o","tag_id":"cjaq5memp000w5gdod4qh0to0","_id":"cjaq5meo4002w5gdo1o718qhr"},{"post_id":"cjaq5mema000e5gdofco9cgjv","tag_id":"cjaq5memg000g5gdoreqi9q2i","_id":"cjaq5meo7002z5gdozl9ti81x"},{"post_id":"cjaq5mema000e5gdofco9cgjv","tag_id":"cjaq5meo4002v5gdo9yz2oycj","_id":"cjaq5meo700305gdo4vca07fd"},{"post_id":"cjaq5mema000e5gdofco9cgjv","tag_id":"cjaq5meo5002x5gdopzsf49ih","_id":"cjaq5meo800325gdomxve0owp"},{"post_id":"cjaq5memh000h5gdo19pxvn2l","tag_id":"cjaq5memg000g5gdoreqi9q2i","_id":"cjaq5meo800345gdov0109b4g"},{"post_id":"cjaq5memh000h5gdo19pxvn2l","tag_id":"cjaq5memk000n5gdo7l0kut4r","_id":"cjaq5meo800355gdo3yj7t1qq"},{"post_id":"cjaq5memh000h5gdo19pxvn2l","tag_id":"cjaq5meo700315gdoizwpydzr","_id":"cjaq5meo900375gdoeyph7gs2"},{"post_id":"cjaq5memj000k5gdozs6vtad4","tag_id":"cjaq5meo800335gdoskq6x7wx","_id":"cjaq5meo900395gdoilm4tl8y"},{"post_id":"cjaq5memj000k5gdozs6vtad4","tag_id":"cjaq5meo900365gdotxtacdbl","_id":"cjaq5meo9003a5gdo8tevn2qe"},{"post_id":"cjaq5memk000o5gdo3a2n7y1s","tag_id":"cjaq5meo900385gdo0dzv31mv","_id":"cjaq5meoa003c5gdon5kkwyol"},{"post_id":"cjaq5memn000s5gdo60z1o7kf","tag_id":"cjaq5meo9003b5gdohtybffah","_id":"cjaq5meob003g5gdoliribwr6"},{"post_id":"cjaq5memn000s5gdo60z1o7kf","tag_id":"cjaq5menk001p5gdofyuvx1ti","_id":"cjaq5meob003h5gdobiskvxfz"},{"post_id":"cjaq5memn000s5gdo60z1o7kf","tag_id":"cjaq5menf001j5gdoioyignf9","_id":"cjaq5meoc003j5gdoc7ytg2c3"},{"post_id":"cjaq5memp000u5gdothl8i3z1","tag_id":"cjaq5meob003f5gdolpcyu032","_id":"cjaq5meod003m5gdow5svtpy7"},{"post_id":"cjaq5memp000u5gdothl8i3z1","tag_id":"cjaq5meoc003i5gdohftp6y6e","_id":"cjaq5meod003n5gdo7ytpt8ut"},{"post_id":"cjaq5memp000u5gdothl8i3z1","tag_id":"cjaq5memg000g5gdoreqi9q2i","_id":"cjaq5meoe003p5gdopu8wqrlq"},{"post_id":"cjaq5memp000u5gdothl8i3z1","tag_id":"cjaq5meo4002v5gdo9yz2oycj","_id":"cjaq5meoe003q5gdogd4ol3cc"},{"post_id":"cjaq5memp000x5gdopqxiuvt1","tag_id":"cjaq5menn001u5gdow5uoj6n2","_id":"cjaq5meof003u5gdo7sdc4oxn"},{"post_id":"cjaq5memp000x5gdopqxiuvt1","tag_id":"cjaq5meno001x5gdojw8xbzh6","_id":"cjaq5meog003v5gdo004sb0tg"},{"post_id":"cjaq5memp000x5gdopqxiuvt1","tag_id":"cjaq5menp00215gdozfp5e62c","_id":"cjaq5meog003x5gdojlnf1mm7"},{"post_id":"cjaq5memp000x5gdopqxiuvt1","tag_id":"cjaq5ment00235gdop1vai3y2","_id":"cjaq5meoi003y5gdoqi89gr13"},{"post_id":"cjaq5mems00105gdon10xi8si","tag_id":"cjaq5meob003f5gdolpcyu032","_id":"cjaq5meol00405gdohisso23i"},{"post_id":"cjaq5men000125gdo1xgqecpu","tag_id":"cjaq5menn001u5gdow5uoj6n2","_id":"cjaq5meon00435gdoio35zan8"},{"post_id":"cjaq5men000125gdo1xgqecpu","tag_id":"cjaq5meno001x5gdojw8xbzh6","_id":"cjaq5meop00445gdolre7cwh4"},{"post_id":"cjaq5men000125gdo1xgqecpu","tag_id":"cjaq5menp00215gdozfp5e62c","_id":"cjaq5meop00465gdozfm1cr4g"},{"post_id":"cjaq5men100155gdowkjy0tki","tag_id":"cjaq5meob003f5gdolpcyu032","_id":"cjaq5meop004b5gdot4c9c31m"},{"post_id":"cjaq5men100155gdowkjy0tki","tag_id":"cjaq5meop00455gdoziq09e0w","_id":"cjaq5meoq004c5gdoig0yh7w1"},{"post_id":"cjaq5men100155gdowkjy0tki","tag_id":"cjaq5meop00475gdozcmsx5cf","_id":"cjaq5meoq004e5gdo05lk5cl4"},{"post_id":"cjaq5men100155gdowkjy0tki","tag_id":"cjaq5meop00485gdoienyfhs9","_id":"cjaq5meoq004f5gdo15itlfpe"},{"post_id":"cjaq5men100155gdowkjy0tki","tag_id":"cjaq5meop00495gdo7zi0zthi","_id":"cjaq5meor004h5gdofv4xnxqk"},{"post_id":"cjaq5men400195gdol52n2k1h","tag_id":"cjaq5meop004a5gdo9t5t96te","_id":"cjaq5meor004i5gdo9i8jxnvg"},{"post_id":"cjaq5men5001b5gdos4s95rtj","tag_id":"cjaq5meob003f5gdolpcyu032","_id":"cjaq5meos004m5gdo8s3mcdff"},{"post_id":"cjaq5men5001b5gdos4s95rtj","tag_id":"cjaq5meop00485gdoienyfhs9","_id":"cjaq5meou004n5gdo6t25n6hb"},{"post_id":"cjaq5men5001b5gdos4s95rtj","tag_id":"cjaq5meor004j5gdo39h3e8dm","_id":"cjaq5meou004p5gdo7d0wtnqx"},{"post_id":"cjaq5men5001b5gdos4s95rtj","tag_id":"cjaq5meos004k5gdoq25366se","_id":"cjaq5meou004q5gdon3yzg02l"},{"post_id":"cjaq5mena001g5gdoqmbey2nk","tag_id":"cjaq5meos004l5gdoyd7vwmzi","_id":"cjaq5meov004s5gdo3d6v9ocw"},{"post_id":"cjaq5mend001h5gdo4v0gtbop","tag_id":"cjaq5meou004o5gdo4odkchmq","_id":"cjaq5meow004w5gdogwq4kqcn"},{"post_id":"cjaq5mend001h5gdo4v0gtbop","tag_id":"cjaq5meou004r5gdok3wfc0t5","_id":"cjaq5meow004x5gdoqyg5ojax"},{"post_id":"cjaq5mend001h5gdo4v0gtbop","tag_id":"cjaq5meov004t5gdow65o5l1f","_id":"cjaq5meow004z5gdo07pjamsm"},{"post_id":"cjaq5mend001h5gdo4v0gtbop","tag_id":"cjaq5meov004u5gdooudvjb8p","_id":"cjaq5meox00505gdoph87hv35"},{"post_id":"cjaq5menf001k5gdo10ej0ky3","tag_id":"cjaq5meov004v5gdo3k2l1p59","_id":"cjaq5meoy00545gdoj2d6xv5a"},{"post_id":"cjaq5menf001k5gdo10ej0ky3","tag_id":"cjaq5meow004y5gdosa755fjz","_id":"cjaq5meoy00555gdom85db95q"},{"post_id":"cjaq5menf001k5gdo10ej0ky3","tag_id":"cjaq5meox00515gdo6dgfxji6","_id":"cjaq5meoy00575gdo8u97p9gi"},{"post_id":"cjaq5menf001k5gdo10ej0ky3","tag_id":"cjaq5meox00525gdopqxq3fi3","_id":"cjaq5meoy00585gdowyfua3pu"},{"post_id":"cjaq5menh001m5gdol3nisusy","tag_id":"cjaq5meop00485gdoienyfhs9","_id":"cjaq5mep1005c5gdobiw3gu5x"},{"post_id":"cjaq5menh001m5gdol3nisusy","tag_id":"cjaq5meoy00565gdoozkl1v6a","_id":"cjaq5mep1005d5gdookxryn7p"},{"post_id":"cjaq5menh001m5gdol3nisusy","tag_id":"cjaq5meoy00595gdo2knrmsrx","_id":"cjaq5mep3005f5gdozh0jcavn"},{"post_id":"cjaq5menh001m5gdol3nisusy","tag_id":"cjaq5meoy005a5gdogalsmjee","_id":"cjaq5mep4005g5gdo0r7ppcql"},{"post_id":"cjaq5menj001n5gdowfqqfciq","tag_id":"cjaq5men400185gdom19ct592","_id":"cjaq5mep4005j5gdo6fgal1o1"},{"post_id":"cjaq5menj001n5gdowfqqfciq","tag_id":"cjaq5men8001e5gdou49wt9cz","_id":"cjaq5mep4005k5gdorrdwpkmk"},{"post_id":"cjaq5menj001n5gdowfqqfciq","tag_id":"cjaq5meoz005b5gdocz1p8v5f","_id":"cjaq5mep5005m5gdoxiv51ybc"},{"post_id":"cjaq5menj001n5gdowfqqfciq","tag_id":"cjaq5mep1005e5gdoeq6uos2i","_id":"cjaq5mep5005n5gdojtvta4ve"},{"post_id":"cjaq5menj001n5gdowfqqfciq","tag_id":"cjaq5mep4005h5gdorvev1hkv","_id":"cjaq5mep5005p5gdoi771days"},{"post_id":"cjaq5menl001q5gdo4csytsbl","tag_id":"cjaq5mep4005i5gdo0kss1z91","_id":"cjaq5mep6005q5gdo6bazd10n"},{"post_id":"cjaq5menl001q5gdo4csytsbl","tag_id":"cjaq5mep4005l5gdoj6oqsddk","_id":"cjaq5mep7005r5gdofwa9tmtu"},{"post_id":"cjaq5menl001q5gdo4csytsbl","tag_id":"cjaq5mep5005o5gdoezd22lao","_id":"cjaq5mep7005s5gdo9brkirom"}],"Tag":[{"name":"docker","_id":"cjaq5melt00025gdoiv4gbzhj"},{"name":"alpine","_id":"cjaq5mem300075gdovhru8x1p"},{"name":"alpine-mirror","_id":"cjaq5mem7000b5gdoxil0nauc"},{"name":"elk","_id":"cjaq5memg000g5gdoreqi9q2i"},{"name":"elkstasck","_id":"cjaq5memk000n5gdo7l0kut4r"},{"name":"ElastAlert","_id":"cjaq5memp000w5gdod4qh0to0"},{"name":"python","_id":"cjaq5men400185gdom19ct592"},{"name":"anaconda","_id":"cjaq5men8001e5gdou49wt9cz"},{"name":"jupyter","_id":"cjaq5menf001j5gdoioyignf9"},{"name":"ipython","_id":"cjaq5menk001p5gdofyuvx1ti"},{"name":"k8s","_id":"cjaq5menn001u5gdow5uoj6n2"},{"name":"kubernetes","_id":"cjaq5meno001x5gdojw8xbzh6"},{"name":"rancher","_id":"cjaq5menp00215gdozfp5e62c"},{"name":"gcr.io","_id":"cjaq5ment00235gdop1vai3y2"},{"name":"gitlab","_id":"cjaq5menu00245gdo1rwior9z"},{"name":"docker-compose","_id":"cjaq5menv00285gdo24lbxo7y"},{"name":"curator","_id":"cjaq5meny002k5gdodbhhbapf"},{"name":"elkstack","_id":"cjaq5meo4002v5gdo9yz2oycj"},{"name":"beats","_id":"cjaq5meo5002x5gdopzsf49ih"},{"name":"Heartbeat","_id":"cjaq5meo700315gdoizwpydzr"},{"name":"blog","_id":"cjaq5meo800335gdoskq6x7wx"},{"name":"hexo","_id":"cjaq5meo900365gdotxtacdbl"},{"name":"java","_id":"cjaq5meo900385gdo0dzv31mv"},{"name":"opencv","_id":"cjaq5meo9003b5gdohtybffah"},{"name":"nginx","_id":"cjaq5meob003f5gdolpcyu032"},{"name":"logstash","_id":"cjaq5meoc003i5gdohftp6y6e"},{"name":"redis","_id":"cjaq5meop00455gdoziq09e0w"},{"name":"lua","_id":"cjaq5meop00475gdozcmsx5cf"},{"name":"openresty","_id":"cjaq5meop00485gdoienyfhs9"},{"name":"lua-resty-redis","_id":"cjaq5meop00495gdo7zi0zthi"},{"name":"owncloud","_id":"cjaq5meop004a5gdo9t5t96te"},{"name":"waf","_id":"cjaq5meor004j5gdo39h3e8dm"},{"name":"firewall","_id":"cjaq5meos004k5gdoq25366se"},{"name":"synergy","_id":"cjaq5meos004l5gdoyd7vwmzi"},{"name":"jrebel","_id":"cjaq5meou004o5gdo4odkchmq"},{"name":"xrebel","_id":"cjaq5meou004r5gdok3wfc0t5"},{"name":"micro-service","_id":"cjaq5meov004t5gdow65o5l1f"},{"name":"spring-cloud","_id":"cjaq5meov004u5gdooudvjb8p"},{"name":"springmvc","_id":"cjaq5meov004v5gdo3k2l1p59"},{"name":"logback","_id":"cjaq5meow004y5gdosa755fjz"},{"name":"log4j","_id":"cjaq5meox00515gdo6dgfxji6"},{"name":"log","_id":"cjaq5meox00525gdopqxq3fi3"},{"name":"stap","_id":"cjaq5meoy00565gdoozkl1v6a"},{"name":"systemtap","_id":"cjaq5meoy00595gdo2knrmsrx"},{"name":"flame-graph","_id":"cjaq5meoy005a5gdogalsmjee"},{"name":"AI","_id":"cjaq5meoz005b5gdocz1p8v5f"},{"name":"Tensorflow","_id":"cjaq5mep1005e5gdoeq6uos2i"},{"name":"Keras","_id":"cjaq5mep4005h5gdorvev1hkv"},{"name":"zsh","_id":"cjaq5mep4005i5gdo0kss1z91"},{"name":"xshell","_id":"cjaq5mep4005l5gdoj6oqsddk"},{"name":"oh-my-zsh","_id":"cjaq5mep5005o5gdoezd22lao"}]}}