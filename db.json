{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1565934982095},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1565934982096},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1565934982096},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1565934982098},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1565934982098},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1565934982098},{"_id":"themes/yilia/README.md","hash":"a6aea7cf499638187bb5d005526d6c0fc213f697","modified":1565934982099},{"_id":"themes/yilia/_config.yml","hash":"9a952bb76e064da4cc8fbb7673cf7b1bdb7605c7","modified":1565934982099},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1565934982120},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1565934982158},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1565934982100},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1565934982100},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1565934982101},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1565934982101},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1565934982101},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1565934982102},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1565934982102},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1565934982117},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1565934982118},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1565934982118},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1565934982118},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1565934982119},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1565934982119},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1565934982119},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1565934982155},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1565934982158},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1565934982121},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1565934982148},{"_id":"source/_posts/ansible-2-7-windows.md","hash":"7e245fa46d5df86f9772db13dca13561b96c4993","modified":1565935875053},{"_id":"source/_posts/alpine-mirror-server.md","hash":"3a66474212255612e91c2c1cfba3ef8eea39642d","modified":1565934981879},{"_id":"source/_posts/anaconda-install-and-configurating-jupyter.md","hash":"b07e33369ab0accf349d45882fe4d185d2b69c99","modified":1565934981879},{"_id":"source/_posts/ansible-beats.md","hash":"c1551ae2070ac2c8233f38430e8c7f43ff906c35","modified":1565935875024},{"_id":"source/_posts/ansible.md","hash":"192216f45874598ca9b43cbd86a49a12a972fed6","modified":1565934981880},{"_id":"source/_posts/blog-template.md","hash":"c1f4f10efde05b2d3219486072e42d53b9588f50","modified":1565937558758},{"_id":"source/_posts/cdh-local-parcel-repo.md","hash":"2c7e65fb29b5e7785afed2b48b98ab0643ab6614","modified":1565935875019},{"_id":"source/_posts/cdh-6-2-x.md","hash":"04d7abe8dcb29a707044dcbc23901407e68bbab5","modified":1565935875021},{"_id":"source/_posts/cdh-streamsets.md","hash":"f3f70850f2fb233fd2c84247186b57efb0ebed74","modified":1565935875006},{"_id":"source/_posts/clean-csv.md","hash":"c90bf58fdb8e03f0f434744d4ac1d6eff26a6aee","modified":1565935874989},{"_id":"source/_posts/cloudboot-ros.md","hash":"cd5748d93a81f0c99e5e9ae74e21c440467a30ed","modified":1565935875036},{"_id":"source/_posts/cm6-cluster.md","hash":"ec51968152f6c2d05913ccc51e27234caf239eae","modified":1565935875014},{"_id":"source/_posts/cm6-kylin.md","hash":"f4ada06cc262c635e8616c3b2b17595283795660","modified":1565935875011},{"_id":"source/_posts/cobbler-win10-win-server-2019.md","hash":"d89a3f31d080aceab255207c5aee211b1aa05031","modified":1565935875040},{"_id":"source/_posts/cobbler.md","hash":"6f98f4ea43cf37323fab31429cef7263755d7a6b","modified":1565935875043},{"_id":"source/_posts/d7y-private-registry.md","hash":"5bedb7efa79cd2ddf9a28178dfe89b89712e9ddd","modified":1565935875027},{"_id":"source/_posts/debug-cloud-native.md","hash":"36ce38fbbc6e6311fa058dabf74b5ec755985fb9","modified":1565935875058},{"_id":"source/_posts/docker-dns.md","hash":"bac6b093fee2d97f1fa15ca3f22d16546c567fb9","modified":1565934981881},{"_id":"source/_posts/dragonfly.md","hash":"faecbaa87689ad2a2de5e2f3868d63a1e2129cb2","modified":1565935875029},{"_id":"source/_posts/elastalert-wechat-plugin.md","hash":"5c6d3fcc98de0b500a6a5adb8eb043723f987fa8","modified":1565934981881},{"_id":"source/_posts/elasticsearch-delete-indices-by-date.md","hash":"39946d54c43b4b14d497c9f25d59b87c2125e96a","modified":1565934981882},{"_id":"source/_posts/elk-stack-beats.md","hash":"5a4d07cc1ea441ecdf4ef2807745557e2b69e354","modified":1565934981886},{"_id":"source/_posts/elasticsearch-elastalert.md","hash":"a396567818faa47d1b096a3b1fb7e5045b3ae765","modified":1565934981886},{"_id":"source/_posts/es-forbidden-12.md","hash":"6dda44394c1f87d4217710321d8e635619a236a4","modified":1565935875044},{"_id":"source/_posts/es-oss-hot-warm-backup.md","hash":"40d05bf7b5652c58cfa7d033a390cde872273b77","modified":1565934981887},{"_id":"source/_posts/failed-to-install-oozie-share-lib.md","hash":"7da2c49c02f19f982e4ea0f182685043acb660bc","modified":1565935875001},{"_id":"source/_posts/fixed-sdc-mysql-binlog-master-purged.md","hash":"c7f0d0a91eb8077f777cc0095663264b159470f4","modified":1565935874988},{"_id":"source/_posts/git-maven-howto.md","hash":"20b2fdc137e479724253a29aaf2118b835a07b0f","modified":1565934981889},{"_id":"source/_posts/gcr-io-image-mirror.md","hash":"10103cc175895aab1c7845551eb09f4f5b1c0655","modified":1565934981888},{"_id":"source/_posts/gitlab-upgrade.md","hash":"e4a641a066091b50f80a05d2bc23be1d032a4bbd","modified":1565934981890},{"_id":"source/_posts/google-jib.md","hash":"62feb6cfcee65dd952779f514d6a12ceb20f8a8c","modified":1565935875055},{"_id":"source/_posts/hdfs-datanode-start-failed.md","hash":"d7d164e56560900dd1796415b430b7bb3912d4a6","modified":1565935875002},{"_id":"source/_posts/heartbeat.md","hash":"dcfd28a48322e3d542d41774c524ae6adb9e407b","modified":1565934981891},{"_id":"source/_posts/hexo-github-pages-blog.md","hash":"70bda6ff4456be5207b54e8d9e106b29a889039a","modified":1565934981892},{"_id":"source/_posts/hystrixcommand-dynamic-key.md","hash":"804b3b3e1d0c8fa6cf5c3535d2ff3ec02bb325c2","modified":1565934981893},{"_id":"source/_posts/hystrixcommand_dynamic_key.md","hash":"804b3b3e1d0c8fa6cf5c3535d2ff3ec02bb325c2","modified":1565934981893},{"_id":"source/_posts/ifttt-github-release.md","hash":"cbdf334e2cfd15b97495931ca6d466684969aa5b","modified":1565935875056},{"_id":"source/_posts/java-decompiler.md","hash":"97a862ce0fc8ec122b10f6ce56d01d04d74477e8","modified":1565935875023},{"_id":"source/_posts/jdk-zip.md","hash":"29f0288a65db890c3b3b29e16c7e66ae8da5703a","modified":1565934981894},{"_id":"source/_posts/jumpserver-vagrant-virtualbox.md","hash":"74a2e51f4dcdab7fa64e02fa97060f15dc9c25b2","modified":1565935874981},{"_id":"source/_posts/kettle-speed-on.md","hash":"898effbd396b14dc0764ceae897dc533fc316253","modified":1565935875004},{"_id":"source/_posts/kylin-excel.md","hash":"21646892225cdbcf4a6a8cd64fb4f9f68893f915","modified":1565935875010},{"_id":"source/_posts/lets-encrypt-acme-sh.md","hash":"26766b4f8ef7302abafb804ba5dd487ea08b0a2e","modified":1565935875047},{"_id":"source/_posts/linux-ncdu-no-space.md","hash":"fe9c5b1d6429f463fbb267055424bcbf5e400e3d","modified":1565935875052},{"_id":"source/_posts/mysql-to-clickhouse.md","hash":"7fc885b4283e809bdeb5f0a4592da88b09332f35","modified":1565935874991},{"_id":"source/_posts/nginx-logging-request-body-as-hexidecimal.md","hash":"6bc3a9f1811d64f3f58608c03582c3a6aff0dcd4","modified":1565934981895},{"_id":"source/_posts/nginx-regex-test-way.md","hash":"fbdbf717b0603f2b30114692ec71ec5ae44dfc19","modified":1565934981896},{"_id":"source/_posts/opencv-on-jupyter.md","hash":"3577b496d8444cd5add903e95125f0e145f61ce6","modified":1565934981897},{"_id":"source/_posts/openresty-maxminddb.md","hash":"743e8f573d3b4332159d4768d87efa0254972bf1","modified":1565935875033},{"_id":"source/_posts/openresty-redis-common-utils.md","hash":"d024bd17f8e88a30141ae2baa5e186dfa0f58304","modified":1565934981897},{"_id":"source/_posts/openresty.md","hash":"2ff2a1f8bca8a4de2703752058e37a337ef35bc8","modified":1565934981898},{"_id":"source/_posts/owncloud.md","hash":"8ad803964c8db8c5b32020e8a0913493a30ba49d","modified":1565934981898},{"_id":"source/_posts/rancher-k8s-china.md","hash":"4e689a177cd20bc8d0062cf7a19b214caccf49ab","modified":1565934981899},{"_id":"source/_posts/rancher-k8s.md","hash":"121c1c112e117bdbd76955d8189a30380b25612f","modified":1565934981899},{"_id":"source/_posts/rancher-wechat-18-01-10.md","hash":"cddb54dca8cf87e1bd9df1d415863d89a4ee2406","modified":1565934981900},{"_id":"source/_posts/rancher2-k8s-multi-cluster-app.md","hash":"3a32fab5ecaf7c3938fb8286d53aac576ed2345d","modified":1565935875050},{"_id":"source/_posts/redis-batch-changed-ttl.md","hash":"eeb6f1fbc6f3368e137a81dfd31d488a99e09321","modified":1565935875017},{"_id":"source/_posts/redash.md","hash":"33ab9668ad21b113212bc6d0f0dda4396796ab7f","modified":1565935874993},{"_id":"source/_posts/rke.md","hash":"d43804579b5456714233a7b8516023b1b120abd5","modified":1565934981901},{"_id":"source/_posts/scrapy-proxy.md","hash":"74e2aab3f3c18ff09f6c0be639a552433fd2cc04","modified":1565935875026},{"_id":"source/_posts/sdc-jdbc-full-mode.md","hash":"b293557446b4e84182062d8a5d12b3ed9db1cdcb","modified":1565935874983},{"_id":"source/_posts/sentinel-restful.md","hash":"6adf0ef94c362fe15e55c5424d5c62e35a033d14","modified":1565935875038},{"_id":"source/_posts/sentinel-timestamp.md","hash":"2b5b66b5a11d1d596a5f63c5e2b409f169b84510","modified":1565935875037},{"_id":"source/_posts/sentry-and-matomo-install.md","hash":"7a46128ba55bd71ec77be22db25f06d18c205122","modified":1565935874995},{"_id":"source/_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","hash":"de20aa773dc45bae6d63610cfb7277fb01db0690","modified":1565934981901},{"_id":"source/_posts/springmvc-log4j-to-logback.md","hash":"ddecc48e838432ee6438e941470cc29b732ad468","modified":1565934981902},{"_id":"source/_posts/sentry-qq-mail.md","hash":"5042af3cbd44d333c602e6a17018dcd5a7c62bf1","modified":1565935874996},{"_id":"source/_posts/stap.md","hash":"d6e109d1fd0dfbb4713ff8ef89fb6e48d44bb15e","modified":1565934981903},{"_id":"source/_posts/tidb-tikv-bad-regions.md","hash":"fad8915b6fff71d7fdeae80c00425e38becf3d5d","modified":1565935874978},{"_id":"source/_posts/ubuntu-preseed-base-installer-kernel.md","hash":"247841b7330ab9650625a9bdb7f24517c2debe28","modified":1565935874970},{"_id":"source/_posts/vagrant-startup-run-rsync.md","hash":"08d23c8d08f864c578760c28f26ea1e2146d07a3","modified":1565937491846},{"_id":"source/_posts/vmware-vsphere-6-7.md","hash":"41a595f634725be7e2db9b66d7764bfc2ae4bcb5","modified":1565935875008},{"_id":"source/_posts/windows-install-tensorflow-keras.md","hash":"4f566a871dd2e140453ac48327514846faed848c","modified":1565934981904},{"_id":"source/_posts/xshell5.md","hash":"bd54bf3d6e107b2c25e4e3e5e3294081043a14f7","modified":1565934981905},{"_id":"source/_posts/xrebel-introducing-microservices-profiling.md","hash":"f68ea9e4e989cc4bcb831b9428c64996125b1e87","modified":1565934981905},{"_id":"source/_posts/zsh-home-end-keypad-not-work.md","hash":"5c9a1a805b3b88dafabdaaf728032f684af37833","modified":1565934981906},{"_id":"source/_yuque/ansible-2-7-windows.md","hash":"7e245fa46d5df86f9772db13dca13561b96c4993","modified":1565942372705},{"_id":"source/_yuque/ansible-beats.md","hash":"c1551ae2070ac2c8233f38430e8c7f43ff906c35","modified":1565942372671},{"_id":"source/_yuque/blog-template.md","hash":"fc1904c7ab5942dcd253afcd54b65de9646c9fc0","modified":1565942372587},{"_id":"source/_yuque/cdh-6-2-x.md","hash":"04d7abe8dcb29a707044dcbc23901407e68bbab5","modified":1565942372665},{"_id":"source/_yuque/cdh-local-parcel-repo.md","hash":"2c7e65fb29b5e7785afed2b48b98ab0643ab6614","modified":1565942372663},{"_id":"source/_yuque/cdh-streamsets.md","hash":"f3f70850f2fb233fd2c84247186b57efb0ebed74","modified":1565942372648},{"_id":"source/_yuque/clean-csv.md","hash":"c90bf58fdb8e03f0f434744d4ac1d6eff26a6aee","modified":1565942372628},{"_id":"source/_yuque/cloudboot-ros.md","hash":"cd5748d93a81f0c99e5e9ae74e21c440467a30ed","modified":1565942372681},{"_id":"source/_yuque/cm6-cluster.md","hash":"ec51968152f6c2d05913ccc51e27234caf239eae","modified":1565942372658},{"_id":"source/_yuque/cm6-kylin.md","hash":"f4ada06cc262c635e8616c3b2b17595283795660","modified":1565942372654},{"_id":"source/_yuque/cobbler-win10-win-server-2019.md","hash":"d89a3f31d080aceab255207c5aee211b1aa05031","modified":1565942372688},{"_id":"source/_yuque/cobbler.md","hash":"6f98f4ea43cf37323fab31429cef7263755d7a6b","modified":1565942372692},{"_id":"source/_yuque/d7y-private-registry.md","hash":"5bedb7efa79cd2ddf9a28178dfe89b89712e9ddd","modified":1565942372675},{"_id":"source/_yuque/debug-cloud-native.md","hash":"36ce38fbbc6e6311fa058dabf74b5ec755985fb9","modified":1565942372711},{"_id":"source/_yuque/dragonfly.md","hash":"faecbaa87689ad2a2de5e2f3868d63a1e2129cb2","modified":1565942372677},{"_id":"source/_yuque/es-forbidden-12.md","hash":"6dda44394c1f87d4217710321d8e635619a236a4","modified":1565942372694},{"_id":"source/_yuque/fixed-sdc-mysql-binlog-master-purged.md","hash":"c7f0d0a91eb8077f777cc0095663264b159470f4","modified":1565942372602},{"_id":"source/_yuque/failed-to-install-oozie-share-lib.md","hash":"7da2c49c02f19f982e4ea0f182685043acb660bc","modified":1565942372637},{"_id":"source/_yuque/google-jib.md","hash":"62feb6cfcee65dd952779f514d6a12ceb20f8a8c","modified":1565942372707},{"_id":"source/_yuque/hdfs-datanode-start-failed.md","hash":"d7d164e56560900dd1796415b430b7bb3912d4a6","modified":1565942372644},{"_id":"source/_yuque/ifttt-github-release.md","hash":"cbdf334e2cfd15b97495931ca6d466684969aa5b","modified":1565942372709},{"_id":"source/_yuque/java-decompiler.md","hash":"97a862ce0fc8ec122b10f6ce56d01d04d74477e8","modified":1565942372668},{"_id":"source/_yuque/jumpserver-vagrant-virtualbox.md","hash":"74a2e51f4dcdab7fa64e02fa97060f15dc9c25b2","modified":1565942372598},{"_id":"source/_yuque/kettle-speed-on.md","hash":"898effbd396b14dc0764ceae897dc533fc316253","modified":1565942372646},{"_id":"source/_yuque/kylin-excel.md","hash":"21646892225cdbcf4a6a8cd64fb4f9f68893f915","modified":1565942372652},{"_id":"source/_yuque/linux-ncdu-no-space.md","hash":"fe9c5b1d6429f463fbb267055424bcbf5e400e3d","modified":1565942372701},{"_id":"source/_yuque/mysql-to-clickhouse.md","hash":"7fc885b4283e809bdeb5f0a4592da88b09332f35","modified":1565942372630},{"_id":"source/_yuque/lets-encrypt-acme-sh.md","hash":"26766b4f8ef7302abafb804ba5dd487ea08b0a2e","modified":1565942372696},{"_id":"source/_yuque/openresty-maxminddb.md","hash":"743e8f573d3b4332159d4768d87efa0254972bf1","modified":1565942372679},{"_id":"source/_yuque/rancher2-k8s-multi-cluster-app.md","hash":"3a32fab5ecaf7c3938fb8286d53aac576ed2345d","modified":1565942372698},{"_id":"source/_yuque/redash.md","hash":"33ab9668ad21b113212bc6d0f0dda4396796ab7f","modified":1565942372632},{"_id":"source/_yuque/redis-batch-changed-ttl.md","hash":"eeb6f1fbc6f3368e137a81dfd31d488a99e09321","modified":1565942372661},{"_id":"source/_yuque/scrapy-proxy.md","hash":"74e2aab3f3c18ff09f6c0be639a552433fd2cc04","modified":1565942372673},{"_id":"source/_yuque/sdc-jdbc-full-mode.md","hash":"b293557446b4e84182062d8a5d12b3ed9db1cdcb","modified":1565942372601},{"_id":"source/_yuque/sentinel-timestamp.md","hash":"2b5b66b5a11d1d596a5f63c5e2b409f169b84510","modified":1565942372683},{"_id":"source/_yuque/sentinel-restful.md","hash":"6adf0ef94c362fe15e55c5424d5c62e35a033d14","modified":1565942372686},{"_id":"source/_yuque/sentry-and-matomo-install.md","hash":"7a46128ba55bd71ec77be22db25f06d18c205122","modified":1565942372634},{"_id":"source/_yuque/sentry-qq-mail.md","hash":"5042af3cbd44d333c602e6a17018dcd5a7c62bf1","modified":1565942372636},{"_id":"source/_yuque/tidb-tikv-bad-regions.md","hash":"fad8915b6fff71d7fdeae80c00425e38becf3d5d","modified":1565942372589},{"_id":"source/_yuque/ubuntu-preseed-base-installer-kernel.md","hash":"247841b7330ab9650625a9bdb7f24517c2debe28","modified":1565942372586},{"_id":"source/_yuque/vmware-vsphere-6-7.md","hash":"41a595f634725be7e2db9b66d7764bfc2ae4bcb5","modified":1565942372650},{"_id":"source/_yuque/vagrant-startup-run-rsync.md","hash":"408a3cbbecc41f2922da4f2c587584bc118c1997","modified":1565942372596},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1565934982156},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1565934982157},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1565934982103},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1565934982104},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1565934982104},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1565934982104},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1565934982105},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1565934982105},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1565934982106},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1565934982107},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"efbaaa59f57ba5107815a3538ed4cd03607139a6","modified":1565934982107},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1565934982108},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1565934982109},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1565934982109},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1565934982110},{"_id":"themes/yilia/layout/_partial/sn-analytics.ejs","hash":"8f034bc11bc03136b7e6f93a47044c4eab693c97","modified":1565934982115},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1565934982116},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1565934982116},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1565934982149},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1565934982150},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1565934982150},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1565934982151},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1565934982151},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1565934982152},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1565934982153},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1565934982154},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1565934982154},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1565934982122},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1565934982123},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1565934982124},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1565934982124},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1565934982125},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1565934982125},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1565934982126},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1565934982126},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1565934982129},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1565934982132},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1565934982133},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1565934982133},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1565934982133},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1565934982135},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1565934982136},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1565934982137},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1565934982138},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1565934982139},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1565934982139},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1565934982140},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1565934982140},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1565934982141},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1565934982141},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1565934982142},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1565934982142},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1565934982142},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1565934982143},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1565934982144},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1565934982144},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1565934982145},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1565934982145},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1565934982145},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1565934982146},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1565934982146},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1565934982147},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1565934982147},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1565934982147},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1565934982115},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1565934982111},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1565934982111},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1565934982111},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1565934982112},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1565934982112},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1565934982113},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1565934982113},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1565934982114},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1565934982114},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1565934982127},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1565934982127},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1565934982128},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1565934982128},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1565934982129},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1565934982130},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1565934982131},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1565934982132},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1565934982134},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1565934982134},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1565934982135},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1565934982131}],"Category":[{"name":"大数据","_id":"cjzdtojch000524dozdt8za0y"},{"name":"k8s","_id":"cjzdtojcr000f24dohbt1cz38"},{"name":"运维","_id":"cjzdtojcx000n24doga26r4da"},{"name":"elkstasck","_id":"cjzdtojd0000u24dop25e3njo"},{"name":"编程","_id":"cjzdtojdi001m24do1x8k77sf"},{"name":"其他","_id":"cjzdtojdn001t24dol1xa79am"},{"name":"java","_id":"cjzdtojdr002024dorvu4bhjn"},{"name":"nginx","_id":"cjzdtojdu002824dooym9pr60"},{"name":"redis","_id":"cjzdtojea002u24dow3p7404p"},{"name":"爬虫","_id":"cjzdtojeg003124don11hq678"},{"name":"微服务","_id":"cjzdtojek003924doe0bd4p5q"},{"name":"工具","_id":"cjzdtojew003f24dou06ewao6"},{"name":"python","_id":"cjzdtojf0003l24doatmuwo90"},{"name":"云计算","_id":"cjzdtojf4003s24doxy7p79zo"},{"name":"anaconda","_id":"cjzdtojf5003v24doy9dw4gwf"},{"name":"python","parent":"cjzdtojf5003v24doy9dw4gwf","_id":"cjzdtojf6003z24doeuzuqdql"},{"name":"AI","parent":"cjzdtojf6003z24doeuzuqdql","_id":"cjzdtojf7004324do5bzauypi"},{"name":"Tensorflow","parent":"cjzdtojf7004324do5bzauypi","_id":"cjzdtojf9004924do9ldgft7u"},{"name":"Keras","parent":"cjzdtojf9004924do9ldgft7u","_id":"cjzdtojfb004d24doru1xhig4"},{"name":"jupyter","parent":"cjzdtojf5003v24doy9dw4gwf","_id":"cjzdtojih00cw24do3crvyzi3"},{"name":"运维,elasticsearch","_id":"cjzdtojil00d324do1e68rsaa"},{"name":"owncloud","_id":"cjzdtojja00dz24donp16t38v"},{"name":"数据库","_id":"cjzdtojkn00hi24dod5la434p"}],"Data":[],"Page":[],"Post":[{"title":"alpine-mirror-server","date":"2017-08-23T00:49:53.000Z","_content":"\nalpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积\n\n但是天朝网络很。。。。所以经常容易安装软件失败(`apk update && apk --no-cache add ...`)\n\n<!--more-->\n\n## 利用国内镜像源\n\n[清华镜像][]\n\n[中科大镜像][]\n\n[阿里云镜像][]\n\n三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。\n\n## 境外服务器做反代\n\n如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)\n\n## 自建镜像站\n\n截止 20170510  官方给出的全部镜像的磁盘使用量\n\n|  edge |  v2.4 |  v2.5 |  v2.6 |  v2.7 |  v3.0 |  v3.1 |  v3.2 |  v3.3 |  v3.4 |  v3.5 |  v3.6 | Total  |\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|--------|\n| 53.1G | 18.8G | 10.4G | 13.0G | 16.5G | 16.5G | 17.5G | 14.5G | 19.0G | 23.2G | 32.5G | 34.4G | 269.5G |\n\n一般自用的话，只会用有限几个版本，比如`v3.6` 的`x86_64` ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。\n\n核心命令是\n\nrsync.sh\n\n```bash\nsrc=rsync://rsync.alpinelinux.org/alpine/ \ndest=/usr/share/nginx/html\n\n/usr/bin/rsync -prua \\\n    --exclude-from /etc/rsync/exclude.txt \\\n    --delete \\\n    --timeout=600 \\\n    --delay-updates \\\n    --delete-after \\\n    \"$src\" \"$dest\"\n```\n/etc/rsync/exclude.txt\n```\nedge/\nv2.*/\nv3.0/\nv3.1/\nv3.2/\nv3.3/\nv3.4/\nv3.5/\naarch64/\narmhf/\nppc64le/\ns390x/\nx86/\n```\n\n解释一下,edge+v*.* 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位\n\n```bash\nlscpu | grep Architecture\n```\n\n根据实际情况，自行加减\n\n详细情况，详见项目 [anjia0532/alpine-package-mirror](https://github.com/anjia0532/alpine-package-mirror)\n\n博客 [https://anjia.ml/2017/08/23/alpine-mirror-server/][blog]\n掘金 [https://juejin.im/post/599b1b2a51882511264e7097][juejin]\n简书 [http://www.jianshu.com/p/36396a20ea4c][jianshu]\n\n[blog]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n[juejin]: https://juejin.im/post/599b1b2a51882511264e7097\n[jianshu]: http://www.jianshu.com/p/36396a20ea4c\n[阿里云镜像]: https://mirrors.aliyun.com/alpine/\n[中科大镜像]: https://mirrors.ustc.edu.cn/alpine/\n[清华镜像]: https://mirrors.tuna.tsinghua.edu.cn/alpine/\n","source":"_posts/alpine-mirror-server.md","raw":"---\ntitle: alpine-mirror-server\ndate: 2017-08-23 08:49:53\ntags: [docker,alpine,alpine-mirror]\n---\n\nalpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积\n\n但是天朝网络很。。。。所以经常容易安装软件失败(`apk update && apk --no-cache add ...`)\n\n<!--more-->\n\n## 利用国内镜像源\n\n[清华镜像][]\n\n[中科大镜像][]\n\n[阿里云镜像][]\n\n三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。\n\n## 境外服务器做反代\n\n如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)\n\n## 自建镜像站\n\n截止 20170510  官方给出的全部镜像的磁盘使用量\n\n|  edge |  v2.4 |  v2.5 |  v2.6 |  v2.7 |  v3.0 |  v3.1 |  v3.2 |  v3.3 |  v3.4 |  v3.5 |  v3.6 | Total  |\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|--------|\n| 53.1G | 18.8G | 10.4G | 13.0G | 16.5G | 16.5G | 17.5G | 14.5G | 19.0G | 23.2G | 32.5G | 34.4G | 269.5G |\n\n一般自用的话，只会用有限几个版本，比如`v3.6` 的`x86_64` ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。\n\n核心命令是\n\nrsync.sh\n\n```bash\nsrc=rsync://rsync.alpinelinux.org/alpine/ \ndest=/usr/share/nginx/html\n\n/usr/bin/rsync -prua \\\n    --exclude-from /etc/rsync/exclude.txt \\\n    --delete \\\n    --timeout=600 \\\n    --delay-updates \\\n    --delete-after \\\n    \"$src\" \"$dest\"\n```\n/etc/rsync/exclude.txt\n```\nedge/\nv2.*/\nv3.0/\nv3.1/\nv3.2/\nv3.3/\nv3.4/\nv3.5/\naarch64/\narmhf/\nppc64le/\ns390x/\nx86/\n```\n\n解释一下,edge+v*.* 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位\n\n```bash\nlscpu | grep Architecture\n```\n\n根据实际情况，自行加减\n\n详细情况，详见项目 [anjia0532/alpine-package-mirror](https://github.com/anjia0532/alpine-package-mirror)\n\n博客 [https://anjia.ml/2017/08/23/alpine-mirror-server/][blog]\n掘金 [https://juejin.im/post/599b1b2a51882511264e7097][juejin]\n简书 [http://www.jianshu.com/p/36396a20ea4c][jianshu]\n\n[blog]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n[juejin]: https://juejin.im/post/599b1b2a51882511264e7097\n[jianshu]: http://www.jianshu.com/p/36396a20ea4c\n[阿里云镜像]: https://mirrors.aliyun.com/alpine/\n[中科大镜像]: https://mirrors.ustc.edu.cn/alpine/\n[清华镜像]: https://mirrors.tuna.tsinghua.edu.cn/alpine/\n","slug":"alpine-mirror-server","published":1,"updated":"2019-08-16T05:56:21.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojbz000024dodonebdbi","content":"<p>alpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积</p>\n<p>但是天朝网络很。。。。所以经常容易安装软件失败(<code>apk update &amp;&amp; apk --no-cache add ...</code>)</p>\n<a id=\"more\"></a>\n<h2 id=\"利用国内镜像源\"><a href=\"#利用国内镜像源\" class=\"headerlink\" title=\"利用国内镜像源\"></a>利用国内镜像源</h2><p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">清华镜像</a></p>\n<p><a href=\"https://mirrors.ustc.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">中科大镜像</a></p>\n<p><a href=\"https://mirrors.aliyun.com/alpine/\" target=\"_blank\" rel=\"noopener\">阿里云镜像</a></p>\n<p>三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。</p>\n<h2 id=\"境外服务器做反代\"><a href=\"#境外服务器做反代\" class=\"headerlink\" title=\"境外服务器做反代\"></a>境外服务器做反代</h2><p>如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)</p>\n<h2 id=\"自建镜像站\"><a href=\"#自建镜像站\" class=\"headerlink\" title=\"自建镜像站\"></a>自建镜像站</h2><p>截止 20170510  官方给出的全部镜像的磁盘使用量</p>\n<table>\n<thead>\n<tr>\n<th>edge</th>\n<th>v2.4</th>\n<th>v2.5</th>\n<th>v2.6</th>\n<th>v2.7</th>\n<th>v3.0</th>\n<th>v3.1</th>\n<th>v3.2</th>\n<th>v3.3</th>\n<th>v3.4</th>\n<th>v3.5</th>\n<th>v3.6</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>53.1G</td>\n<td>18.8G</td>\n<td>10.4G</td>\n<td>13.0G</td>\n<td>16.5G</td>\n<td>16.5G</td>\n<td>17.5G</td>\n<td>14.5G</td>\n<td>19.0G</td>\n<td>23.2G</td>\n<td>32.5G</td>\n<td>34.4G</td>\n<td>269.5G</td>\n</tr>\n</tbody>\n</table>\n<p>一般自用的话，只会用有限几个版本，比如<code>v3.6</code> 的<code>x86_64</code> ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。</p>\n<p>核心命令是</p>\n<p>rsync.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">src=rsync://rsync.alpinelinux.org/alpine/ </span><br><span class=\"line\">dest=/usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/rsync -prua \\</span><br><span class=\"line\">    --exclude-from /etc/rsync/exclude.txt \\</span><br><span class=\"line\">    --delete \\</span><br><span class=\"line\">    --timeout=600 \\</span><br><span class=\"line\">    --delay-updates \\</span><br><span class=\"line\">    --delete-after \\</span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"variable\">$src</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$dest</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>/etc/rsync/exclude.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">edge/</span><br><span class=\"line\">v2.*/</span><br><span class=\"line\">v3.0/</span><br><span class=\"line\">v3.1/</span><br><span class=\"line\">v3.2/</span><br><span class=\"line\">v3.3/</span><br><span class=\"line\">v3.4/</span><br><span class=\"line\">v3.5/</span><br><span class=\"line\">aarch64/</span><br><span class=\"line\">armhf/</span><br><span class=\"line\">ppc64le/</span><br><span class=\"line\">s390x/</span><br><span class=\"line\">x86/</span><br></pre></td></tr></table></figure></p>\n<p>解释一下,edge+v<em>.</em> 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lscpu | grep Architecture</span><br></pre></td></tr></table></figure>\n<p>根据实际情况，自行加减</p>\n<p>详细情况，详见项目 <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/08/23/alpine-mirror-server/</a><br>掘金 <a href=\"https://juejin.im/post/599b1b2a51882511264e7097\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/599b1b2a51882511264e7097</a><br>简书 <a href=\"http://www.jianshu.com/p/36396a20ea4c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/36396a20ea4c</a></p>\n","site":{"data":{}},"excerpt":"<p>alpine linux是一个最小化linux系统，常用作docker基础镜像。可以有效减小镜像体积</p>\n<p>但是天朝网络很。。。。所以经常容易安装软件失败(<code>apk update &amp;&amp; apk --no-cache add ...</code>)</p>","more":"<h2 id=\"利用国内镜像源\"><a href=\"#利用国内镜像源\" class=\"headerlink\" title=\"利用国内镜像源\"></a>利用国内镜像源</h2><p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">清华镜像</a></p>\n<p><a href=\"https://mirrors.ustc.edu.cn/alpine/\" target=\"_blank\" rel=\"noopener\">中科大镜像</a></p>\n<p><a href=\"https://mirrors.aliyun.com/alpine/\" target=\"_blank\" rel=\"noopener\">阿里云镜像</a></p>\n<p>三个都用过，但是都会出现安装软件失败的情况(需要多次重新构建)，严重影响效率。</p>\n<h2 id=\"境外服务器做反代\"><a href=\"#境外服务器做反代\" class=\"headerlink\" title=\"境外服务器做反代\"></a>境外服务器做反代</h2><p>如果有幸有台境外(东京，香港等)服务器，又不想镜像站(全部镜像下载)，可以考虑使用nginx反代国外镜像(找一个近源高质量镜像，别三天两头老崩溃的那种)</p>\n<h2 id=\"自建镜像站\"><a href=\"#自建镜像站\" class=\"headerlink\" title=\"自建镜像站\"></a>自建镜像站</h2><p>截止 20170510  官方给出的全部镜像的磁盘使用量</p>\n<table>\n<thead>\n<tr>\n<th>edge</th>\n<th>v2.4</th>\n<th>v2.5</th>\n<th>v2.6</th>\n<th>v2.7</th>\n<th>v3.0</th>\n<th>v3.1</th>\n<th>v3.2</th>\n<th>v3.3</th>\n<th>v3.4</th>\n<th>v3.5</th>\n<th>v3.6</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>53.1G</td>\n<td>18.8G</td>\n<td>10.4G</td>\n<td>13.0G</td>\n<td>16.5G</td>\n<td>16.5G</td>\n<td>17.5G</td>\n<td>14.5G</td>\n<td>19.0G</td>\n<td>23.2G</td>\n<td>32.5G</td>\n<td>34.4G</td>\n<td>269.5G</td>\n</tr>\n</tbody>\n</table>\n<p>一般自用的话，只会用有限几个版本，比如<code>v3.6</code> 的<code>x86_64</code> ?那么其余的完全可以忽略，这么一来会小很多，大约11G左右。</p>\n<p>核心命令是</p>\n<p>rsync.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">src=rsync://rsync.alpinelinux.org/alpine/ </span><br><span class=\"line\">dest=/usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/rsync -prua \\</span><br><span class=\"line\">    --exclude-from /etc/rsync/exclude.txt \\</span><br><span class=\"line\">    --delete \\</span><br><span class=\"line\">    --timeout=600 \\</span><br><span class=\"line\">    --delay-updates \\</span><br><span class=\"line\">    --delete-after \\</span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"variable\">$src</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$dest</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>/etc/rsync/exclude.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">edge/</span><br><span class=\"line\">v2.*/</span><br><span class=\"line\">v3.0/</span><br><span class=\"line\">v3.1/</span><br><span class=\"line\">v3.2/</span><br><span class=\"line\">v3.3/</span><br><span class=\"line\">v3.4/</span><br><span class=\"line\">v3.5/</span><br><span class=\"line\">aarch64/</span><br><span class=\"line\">armhf/</span><br><span class=\"line\">ppc64le/</span><br><span class=\"line\">s390x/</span><br><span class=\"line\">x86/</span><br></pre></td></tr></table></figure></p>\n<p>解释一下,edge+v<em>.</em> 是版本号，其余的是不同cpu架构的不同版本。x86是intel 的32位</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lscpu | grep Architecture</span><br></pre></td></tr></table></figure>\n<p>根据实际情况，自行加减</p>\n<p>详细情况，详见项目 <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/08/23/alpine-mirror-server/</a><br>掘金 <a href=\"https://juejin.im/post/599b1b2a51882511264e7097\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/599b1b2a51882511264e7097</a><br>简书 <a href=\"http://www.jianshu.com/p/36396a20ea4c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/36396a20ea4c</a></p>"},{"title":"ansible","date":"2018-04-28T05:23:28.000Z","_content":"\n\n\n## 环境\n\n\n\n\n\n## 安装\n\n参考资料 [官方Installation Guide](http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id8)  [中文Installation](http://www.ansible.com.cn/docs/intro_installation.html#id9)\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install software-properties-common\n$ sudo apt-add-repository ppa:ansible/ansible -y\n$ sudo apt-get update\n$ sudo apt-get install ansible\n```\n\n查看安装结果\n\n```bash\n$ ansible --version\nansible 2.4.3.0\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/home/xxx/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/local/lib/python2.7/dist-packages/ansible\n  executable location = /usr/local/bin/ansible\n  python version = 2.7.12 (default, Dec  4 2017, 14:50:18) [GCC 5.4.0 20160609]\n```\n\n\n\n## \n\n\n\n\n\n\n\n参考 [Linux轻量级自动运维工具-Ansible浅析](http://blog.51cto.com/weiweidefeng/1895261)","source":"_posts/ansible.md","raw":"---\ntitle: ansible\ndate: 2018-04-28 13:23:28\ntags: [linux,ansible,运维,python]\n---\n\n\n\n## 环境\n\n\n\n\n\n## 安装\n\n参考资料 [官方Installation Guide](http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id8)  [中文Installation](http://www.ansible.com.cn/docs/intro_installation.html#id9)\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install software-properties-common\n$ sudo apt-add-repository ppa:ansible/ansible -y\n$ sudo apt-get update\n$ sudo apt-get install ansible\n```\n\n查看安装结果\n\n```bash\n$ ansible --version\nansible 2.4.3.0\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/home/xxx/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/local/lib/python2.7/dist-packages/ansible\n  executable location = /usr/local/bin/ansible\n  python version = 2.7.12 (default, Dec  4 2017, 14:50:18) [GCC 5.4.0 20160609]\n```\n\n\n\n## \n\n\n\n\n\n\n\n参考 [Linux轻量级自动运维工具-Ansible浅析](http://blog.51cto.com/weiweidefeng/1895261)","slug":"ansible","published":1,"updated":"2019-08-16T05:56:21.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojc9000124dolyex4569","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参考资料 <a href=\"http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id8\" target=\"_blank\" rel=\"noopener\">官方Installation Guide</a>  <a href=\"http://www.ansible.com.cn/docs/intro_installation.html#id9\" target=\"_blank\" rel=\"noopener\">中文Installation</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install software-properties-common</span><br><span class=\"line\">$ sudo apt-add-repository ppa:ansible/ansible -y</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install ansible</span><br></pre></td></tr></table></figure>\n<p>查看安装结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ansible --version</span><br><span class=\"line\">ansible 2.4.3.0</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u<span class=\"string\">'/home/xxx/.ansible/plugins/modules'</span>, u<span class=\"string\">'/usr/share/ansible/plugins/modules'</span>]</span><br><span class=\"line\">  ansible python module location = /usr/<span class=\"built_in\">local</span>/lib/python2.7/dist-packages/ansible</span><br><span class=\"line\">  executable location = /usr/<span class=\"built_in\">local</span>/bin/ansible</span><br><span class=\"line\">  python version = 2.7.12 (default, Dec  4 2017, 14:50:18) [GCC 5.4.0 20160609]</span><br></pre></td></tr></table></figure>\n<p>## </p>\n<p>参考 <a href=\"http://blog.51cto.com/weiweidefeng/1895261\" target=\"_blank\" rel=\"noopener\">Linux轻量级自动运维工具-Ansible浅析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参考资料 <a href=\"http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id8\" target=\"_blank\" rel=\"noopener\">官方Installation Guide</a>  <a href=\"http://www.ansible.com.cn/docs/intro_installation.html#id9\" target=\"_blank\" rel=\"noopener\">中文Installation</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install software-properties-common</span><br><span class=\"line\">$ sudo apt-add-repository ppa:ansible/ansible -y</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install ansible</span><br></pre></td></tr></table></figure>\n<p>查看安装结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ansible --version</span><br><span class=\"line\">ansible 2.4.3.0</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u<span class=\"string\">'/home/xxx/.ansible/plugins/modules'</span>, u<span class=\"string\">'/usr/share/ansible/plugins/modules'</span>]</span><br><span class=\"line\">  ansible python module location = /usr/<span class=\"built_in\">local</span>/lib/python2.7/dist-packages/ansible</span><br><span class=\"line\">  executable location = /usr/<span class=\"built_in\">local</span>/bin/ansible</span><br><span class=\"line\">  python version = 2.7.12 (default, Dec  4 2017, 14:50:18) [GCC 5.4.0 20160609]</span><br></pre></td></tr></table></figure>\n<p>## </p>\n<p>参考 <a href=\"http://blog.51cto.com/weiweidefeng/1895261\" target=\"_blank\" rel=\"noopener\">Linux轻量级自动运维工具-Ansible浅析</a></p>\n"},{"title":"018-CDH6.2构建本地源加速CDH安装","date":"2019-04-28T11:10:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第18篇，定个小目标999，每周最少2篇。\n\n\n目前国内还没有机构或者个人提供CDH的公共加速源，导致CDH安装时超慢，并且一旦失败后，还得不支持断点安装(linux机制)，配置CDH本地repo是学习cdh的第一步，否则单是安装就需要以小时为单位。\n\n<!-- more -->\n\n本文以centos7.6为例（其余发行版类似），介绍CDH 自定义 parcel和package 镜像源（parcel是cdh自定义格式）\n\n<a name=\"22xMQ\"></a>\n## 创建内网repo\n<a name=\"4pKfU\"></a>\n### 配置web服务器\n可以用apache2，也可以用nginx，任何提供http服务的都可以\n```bash\n$ sudo apt-get install -y httpd\n$ sudo systemctl start httpd\n$ sudo systemctl enable httpd\n```\n\n<a name=\"D9i4s\"></a>\n### 下载packages\n这是给centos安装cm6用的\n\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cm6/6.2.0/redhat7/ -P /var/www/html/cloudera-repos\n$ sudo wget https://archive.cloudera.com/cm6/6.2.0/allkeys.asc -P /var/www/html/cloudera-repos/cm6/6.2.0/\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cm6\n```\n\n<a name=\"POHSQ\"></a>\n### 下载和发布parcel repo\n\n1. 下载 `manifest.json` 和parcel 文件<br />**CDH6** \n\nCDH 6 parcel中包含 Apache Impala, Apache Kudu, Apache Spark 2, and Cloudera Search等组件，以6.2.0为例，在web服务器上运行下面指令，用来下载最新版的cdh 6.2，如果要换成cdh6.x的其他版本，只需要替换命令中的 `6.2.0` 即可。更多6.x版本信息参见 [CDH 6 Download Information](https://www.cloudera.com/documentation/enterprise/latest/topics/rg_cdh_6_download.html#cdh_download_info) 。\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh6\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras6\n```\n\n     **CDH5** <br />CDH 5 parcel中包含 Impala, Kudu, Spark 1, and Search 等组件，以5.14.4为例，在web服务器上运行以下指令，如果要换成cdh5.x的其他版本,需要替换命令中的 `5.14.4` 为指定版本号，更多5.x版本信息参见 [CDH Download Information](https://www.cloudera.com/documentation/enterprise/release-notes/topics/cdh_vd_cdh_download.html)\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh5/parcels/5.14.4/ -P /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras5/parcels/5.14.4/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh5\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras5\n```\n\n如果像本文实例一样，只需支持单一版本（centos7.6）cdh即可，为了节省时间，可以只下载具体版本。<br />以CDH6的为例，增加 `--accept-regex \"el7|manifest\"` ,代表只下载包含xenial和maifest的文件\n```bash\n# 官方命令\nsudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n# 改后命令\nsudo wget --recursive --no-parent --accept-regex \"el7|manifest\" --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n```\n\n如果想再快点，可以使用迅雷，axel，aria2等多线程工具快速下载后，上传到web服务器。<br />      **Apache Accumulo for CDH** <br />以下载Accumulo1.7.2为例,如果换成别的版本，替换命令中1.7.2即可\n\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/accumulo-c5/parcels/1.7.2/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/accumulo-c5\n```\n\n     **CDS Powered By Apache Spark 2 for CDH** <br />以下载CDS2.3.0.cloudera3为例,更多版本信息参见  [CDS Powered By Apache Spark Version Information](https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#versions)\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/spark2/parcels/2.3.0.cloudera3/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/spark2\n```\n\n     **Cloudera Navigator Key Trustee Server** <br /> Key Trustee KMS parcel中包含  Cloudera Navigator HSM KMS ，从 [download page](http://www.cloudera.com/content/www/en-us/downloads/navigator/key-trustee-kms.html) 下载Key Trustee KMS，选择指定Version，比如 `Navigator Key Trustee KMS 6.2.0` ,选择Package or Parcel,选择 `Parcel` ,选择 `DOWNLOAD NOW` ,将下载Key Trustee KMS parcels 和 manifest.json ，将下载的 `.tar.gz` 上传到web服务器上，并解压，以Key Trustee KMS 6.2.0为例\n\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos/keytrustee-kms\n$ sudo tar xvfz /path/to/keytrustee-kms-6.2.0-parcels.tar.gz -C /var/www/html/cloudera-repos/keytrustee-kms --strip-components=1\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/keytrustee-kms\n```\n\n     **Sqoop Connectors** <br />以下载最新版Sqoop为例\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories http://archive.cloudera.com/sqoop-connectors/parcels/latest/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/sqoop-connectors\n```\n\n\n2. 访问repo地址 `http://<Web_server>/cloudera-repos/` 确保你下载的文件能够正常访问。\n\n<a name=\"IlmKd\"></a>\n### 配置Cloudera Manager 使用Parcel repo\n\n1. 两种方法二选一，配置parcel\n  1. Navigation bar - 导航条\n    1. 点击navigation bar 的parcel图标或者点击 `Hosts` 然后点击 `Parcels` 标签\n    1. 点击 `Configuration` 按钮\n  2. Menu - 菜单\n    1. 选择 `Administration` (管理) -> `Settings` (设置)\n    1. 选择 `Category`  > `Parcels` \n2. 在 `Remote Pacel Respository URLs` 点击添加按钮，并添加。\n2. 填上parcel地址，比如  `http://<web_server>/cloudera-parcels/cdh6/6.2.0/` \n2. 填写 `Reason for change`  变更原因,点击 `Save Changes` 提交保存。\n\n<a name=\"4qw5J\"></a>\n## 国内镜像源\n本文写完后，发现中科大有一个CDH的反代，速度还挺快，可以按需使用。参考 [ustclug/mirrorrequest#56](https://github.com/ustclug/mirrorrequest/issues/56) ，经测试，特别不稳定，持续两天，访问不通。\n\n<a name=\"9OziU\"></a>\n## 参考资料\n\n- [Configuring a Local Package Repository](https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_package_repo.html?cdoc-os=ubuntu+1604+xenial#internal_package_repo)\n- [Configuring a Local Parcel Repository](https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_parcel_repo.html)\n\n","source":"_posts/cdh-local-parcel-repo.md","raw":"\n---\n\ntitle: 018-CDH6.2构建本地源加速CDH安装\n\ndate: 2019-04-28 19:10:00 +0800\n\ntags: [CDH,hadoop,大数据]\n\ncategories: 大数据\n\n---\n> 这是坚持技术写作计划（含翻译）的第18篇，定个小目标999，每周最少2篇。\n\n\n目前国内还没有机构或者个人提供CDH的公共加速源，导致CDH安装时超慢，并且一旦失败后，还得不支持断点安装(linux机制)，配置CDH本地repo是学习cdh的第一步，否则单是安装就需要以小时为单位。\n\n<!-- more -->\n\n本文以centos7.6为例（其余发行版类似），介绍CDH 自定义 parcel和package 镜像源（parcel是cdh自定义格式）\n\n<a name=\"22xMQ\"></a>\n## 创建内网repo\n<a name=\"4pKfU\"></a>\n### 配置web服务器\n可以用apache2，也可以用nginx，任何提供http服务的都可以\n```bash\n$ sudo apt-get install -y httpd\n$ sudo systemctl start httpd\n$ sudo systemctl enable httpd\n```\n\n<a name=\"D9i4s\"></a>\n### 下载packages\n这是给centos安装cm6用的\n\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cm6/6.2.0/redhat7/ -P /var/www/html/cloudera-repos\n$ sudo wget https://archive.cloudera.com/cm6/6.2.0/allkeys.asc -P /var/www/html/cloudera-repos/cm6/6.2.0/\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cm6\n```\n\n<a name=\"POHSQ\"></a>\n### 下载和发布parcel repo\n\n1. 下载 `manifest.json` 和parcel 文件<br />**CDH6** \n\nCDH 6 parcel中包含 Apache Impala, Apache Kudu, Apache Spark 2, and Cloudera Search等组件，以6.2.0为例，在web服务器上运行下面指令，用来下载最新版的cdh 6.2，如果要换成cdh6.x的其他版本，只需要替换命令中的 `6.2.0` 即可。更多6.x版本信息参见 [CDH 6 Download Information](https://www.cloudera.com/documentation/enterprise/latest/topics/rg_cdh_6_download.html#cdh_download_info) 。\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh6\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras6\n```\n\n     **CDH5** <br />CDH 5 parcel中包含 Impala, Kudu, Spark 1, and Search 等组件，以5.14.4为例，在web服务器上运行以下指令，如果要换成cdh5.x的其他版本,需要替换命令中的 `5.14.4` 为指定版本号，更多5.x版本信息参见 [CDH Download Information](https://www.cloudera.com/documentation/enterprise/release-notes/topics/cdh_vd_cdh_download.html)\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh5/parcels/5.14.4/ -P /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras5/parcels/5.14.4/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh5\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras5\n```\n\n如果像本文实例一样，只需支持单一版本（centos7.6）cdh即可，为了节省时间，可以只下载具体版本。<br />以CDH6的为例，增加 `--accept-regex \"el7|manifest\"` ,代表只下载包含xenial和maifest的文件\n```bash\n# 官方命令\nsudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n# 改后命令\nsudo wget --recursive --no-parent --accept-regex \"el7|manifest\" --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos\n```\n\n如果想再快点，可以使用迅雷，axel，aria2等多线程工具快速下载后，上传到web服务器。<br />      **Apache Accumulo for CDH** <br />以下载Accumulo1.7.2为例,如果换成别的版本，替换命令中1.7.2即可\n\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/accumulo-c5/parcels/1.7.2/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/accumulo-c5\n```\n\n     **CDS Powered By Apache Spark 2 for CDH** <br />以下载CDS2.3.0.cloudera3为例,更多版本信息参见  [CDS Powered By Apache Spark Version Information](https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#versions)\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/spark2/parcels/2.3.0.cloudera3/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/spark2\n```\n\n     **Cloudera Navigator Key Trustee Server** <br /> Key Trustee KMS parcel中包含  Cloudera Navigator HSM KMS ，从 [download page](http://www.cloudera.com/content/www/en-us/downloads/navigator/key-trustee-kms.html) 下载Key Trustee KMS，选择指定Version，比如 `Navigator Key Trustee KMS 6.2.0` ,选择Package or Parcel,选择 `Parcel` ,选择 `DOWNLOAD NOW` ,将下载Key Trustee KMS parcels 和 manifest.json ，将下载的 `.tar.gz` 上传到web服务器上，并解压，以Key Trustee KMS 6.2.0为例\n\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos/keytrustee-kms\n$ sudo tar xvfz /path/to/keytrustee-kms-6.2.0-parcels.tar.gz -C /var/www/html/cloudera-repos/keytrustee-kms --strip-components=1\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/keytrustee-kms\n```\n\n     **Sqoop Connectors** <br />以下载最新版Sqoop为例\n```bash\n$ sudo mkdir -p /var/www/html/cloudera-repos\n$ sudo wget --recursive --no-parent --no-host-directories http://archive.cloudera.com/sqoop-connectors/parcels/latest/ -P /var/www/html/cloudera-repos\n$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/sqoop-connectors\n```\n\n\n2. 访问repo地址 `http://<Web_server>/cloudera-repos/` 确保你下载的文件能够正常访问。\n\n<a name=\"IlmKd\"></a>\n### 配置Cloudera Manager 使用Parcel repo\n\n1. 两种方法二选一，配置parcel\n  1. Navigation bar - 导航条\n    1. 点击navigation bar 的parcel图标或者点击 `Hosts` 然后点击 `Parcels` 标签\n    1. 点击 `Configuration` 按钮\n  2. Menu - 菜单\n    1. 选择 `Administration` (管理) -> `Settings` (设置)\n    1. 选择 `Category`  > `Parcels` \n2. 在 `Remote Pacel Respository URLs` 点击添加按钮，并添加。\n2. 填上parcel地址，比如  `http://<web_server>/cloudera-parcels/cdh6/6.2.0/` \n2. 填写 `Reason for change`  变更原因,点击 `Save Changes` 提交保存。\n\n<a name=\"4qw5J\"></a>\n## 国内镜像源\n本文写完后，发现中科大有一个CDH的反代，速度还挺快，可以按需使用。参考 [ustclug/mirrorrequest#56](https://github.com/ustclug/mirrorrequest/issues/56) ，经测试，特别不稳定，持续两天，访问不通。\n\n<a name=\"9OziU\"></a>\n## 参考资料\n\n- [Configuring a Local Package Repository](https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_package_repo.html?cdoc-os=ubuntu+1604+xenial#internal_package_repo)\n- [Configuring a Local Parcel Repository](https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_parcel_repo.html)\n\n","slug":"cdh-local-parcel-repo","published":1,"updated":"2019-08-16T06:11:15.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojce000324dodf8n2304","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第18篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>目前国内还没有机构或者个人提供CDH的公共加速源，导致CDH安装时超慢，并且一旦失败后，还得不支持断点安装(linux机制)，配置CDH本地repo是学习cdh的第一步，否则单是安装就需要以小时为单位。</p>\n<a id=\"more\"></a>\n<p>本文以centos7.6为例（其余发行版类似），介绍CDH 自定义 parcel和package 镜像源（parcel是cdh自定义格式）</p>\n<p><a name=\"22xMQ\"></a></p>\n<h2 id=\"创建内网repo\"><a href=\"#创建内网repo\" class=\"headerlink\" title=\"创建内网repo\"></a>创建内网repo</h2><p><a name=\"4pKfU\"></a></p>\n<h3 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h3><p>可以用apache2，也可以用nginx，任何提供http服务的都可以<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y httpd</span><br><span class=\"line\">$ sudo systemctl start httpd</span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> httpd</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"D9i4s\"></a></p>\n<h3 id=\"下载packages\"><a href=\"#下载packages\" class=\"headerlink\" title=\"下载packages\"></a>下载packages</h3><p>这是给centos安装cm6用的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cm6/6.2.0/redhat7/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget https://archive.cloudera.com/cm6/6.2.0/allkeys.asc -P /var/www/html/cloudera-repos/cm6/6.2.0/</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cm6</span><br></pre></td></tr></table></figure>\n<p><a name=\"POHSQ\"></a></p>\n<h3 id=\"下载和发布parcel-repo\"><a href=\"#下载和发布parcel-repo\" class=\"headerlink\" title=\"下载和发布parcel repo\"></a>下载和发布parcel repo</h3><ol>\n<li>下载 <code>manifest.json</code> 和parcel 文件<br><strong>CDH6</strong> </li>\n</ol>\n<p>CDH 6 parcel中包含 Apache Impala, Apache Kudu, Apache Spark 2, and Cloudera Search等组件，以6.2.0为例，在web服务器上运行下面指令，用来下载最新版的cdh 6.2，如果要换成cdh6.x的其他版本，只需要替换命令中的 <code>6.2.0</code> 即可。更多6.x版本信息参见 <a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/rg_cdh_6_download.html#cdh_download_info\" target=\"_blank\" rel=\"noopener\">CDH 6 Download Information</a> 。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh6</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras6</span><br></pre></td></tr></table></figure></p>\n<pre><code>**CDH5** &lt;br /&gt;CDH 5 parcel中包含 Impala, Kudu, Spark 1, and Search 等组件，以5.14.4为例，在web服务器上运行以下指令，如果要换成cdh5.x的其他版本,需要替换命令中的 `5.14.4` 为指定版本号，更多5.x版本信息参见 [CDH Download Information](https://www.cloudera.com/documentation/enterprise/release-notes/topics/cdh_vd_cdh_download.html)\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh5/parcels/5.14.4/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras5/parcels/5.14.4/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh5</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras5</span><br></pre></td></tr></table></figure>\n<p>如果像本文实例一样，只需支持单一版本（centos7.6）cdh即可，为了节省时间，可以只下载具体版本。<br>以CDH6的为例，增加 <code>--accept-regex &quot;el7|manifest&quot;</code> ,代表只下载包含xenial和maifest的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方命令</span></span><br><span class=\"line\">sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\"><span class=\"comment\"># 改后命令</span></span><br><span class=\"line\">sudo wget --recursive --no-parent --accept-regex <span class=\"string\">\"el7|manifest\"</span> --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br></pre></td></tr></table></figure></p>\n<p>如果想再快点，可以使用迅雷，axel，aria2等多线程工具快速下载后，上传到web服务器。<br>      <strong>Apache Accumulo for CDH</strong> <br>以下载Accumulo1.7.2为例,如果换成别的版本，替换命令中1.7.2即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/accumulo-c5/parcels/1.7.2/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/accumulo-c5</span><br></pre></td></tr></table></figure>\n<pre><code>**CDS Powered By Apache Spark 2 for CDH** &lt;br /&gt;以下载CDS2.3.0.cloudera3为例,更多版本信息参见  [CDS Powered By Apache Spark Version Information](https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#versions)\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/spark2/parcels/2.3.0.cloudera3/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/spark2</span><br></pre></td></tr></table></figure>\n<pre><code>**Cloudera Navigator Key Trustee Server** &lt;br /&gt; Key Trustee KMS parcel中包含  Cloudera Navigator HSM KMS ，从 [download page](http://www.cloudera.com/content/www/en-us/downloads/navigator/key-trustee-kms.html) 下载Key Trustee KMS，选择指定Version，比如 `Navigator Key Trustee KMS 6.2.0` ,选择Package or Parcel,选择 `Parcel` ,选择 `DOWNLOAD NOW` ,将下载Key Trustee KMS parcels 和 manifest.json ，将下载的 `.tar.gz` 上传到web服务器上，并解压，以Key Trustee KMS 6.2.0为例\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos/keytrustee-kms</span><br><span class=\"line\">$ sudo tar xvfz /path/to/keytrustee-kms-6.2.0-parcels.tar.gz -C /var/www/html/cloudera-repos/keytrustee-kms --strip-components=1</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/keytrustee-kms</span><br></pre></td></tr></table></figure>\n<pre><code>**Sqoop Connectors** &lt;br /&gt;以下载最新版Sqoop为例\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories http://archive.cloudera.com/sqoop-connectors/parcels/latest/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/sqoop-connectors</span><br></pre></td></tr></table></figure>\n<ol>\n<li>访问repo地址 <code>http://&lt;Web_server&gt;/cloudera-repos/</code> 确保你下载的文件能够正常访问。</li>\n</ol>\n<p><a name=\"IlmKd\"></a></p>\n<h3 id=\"配置Cloudera-Manager-使用Parcel-repo\"><a href=\"#配置Cloudera-Manager-使用Parcel-repo\" class=\"headerlink\" title=\"配置Cloudera Manager 使用Parcel repo\"></a>配置Cloudera Manager 使用Parcel repo</h3><ol>\n<li>两种方法二选一，配置parcel<ol>\n<li>Navigation bar - 导航条<ol>\n<li>点击navigation bar 的parcel图标或者点击 <code>Hosts</code> 然后点击 <code>Parcels</code> 标签</li>\n<li>点击 <code>Configuration</code> 按钮</li>\n</ol>\n</li>\n<li>Menu - 菜单<ol>\n<li>选择 <code>Administration</code> (管理) -&gt; <code>Settings</code> (设置)</li>\n<li>选择 <code>Category</code>  &gt; <code>Parcels</code> </li>\n</ol>\n</li>\n</ol>\n</li>\n<li>在 <code>Remote Pacel Respository URLs</code> 点击添加按钮，并添加。</li>\n<li>填上parcel地址，比如  <code>http://&lt;web_server&gt;/cloudera-parcels/cdh6/6.2.0/</code> </li>\n<li>填写 <code>Reason for change</code>  变更原因,点击 <code>Save Changes</code> 提交保存。</li>\n</ol>\n<p><a name=\"4qw5J\"></a></p>\n<h2 id=\"国内镜像源\"><a href=\"#国内镜像源\" class=\"headerlink\" title=\"国内镜像源\"></a>国内镜像源</h2><p>本文写完后，发现中科大有一个CDH的反代，速度还挺快，可以按需使用。参考 <a href=\"https://github.com/ustclug/mirrorrequest/issues/56\" target=\"_blank\" rel=\"noopener\">ustclug/mirrorrequest#56</a> ，经测试，特别不稳定，持续两天，访问不通。</p>\n<p><a name=\"9OziU\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_package_repo.html?cdoc-os=ubuntu+1604+xenial#internal_package_repo\" target=\"_blank\" rel=\"noopener\">Configuring a Local Package Repository</a></li>\n<li><a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_parcel_repo.html\" target=\"_blank\" rel=\"noopener\">Configuring a Local Parcel Repository</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第18篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>目前国内还没有机构或者个人提供CDH的公共加速源，导致CDH安装时超慢，并且一旦失败后，还得不支持断点安装(linux机制)，配置CDH本地repo是学习cdh的第一步，否则单是安装就需要以小时为单位。</p>","more":"<p>本文以centos7.6为例（其余发行版类似），介绍CDH 自定义 parcel和package 镜像源（parcel是cdh自定义格式）</p>\n<p><a name=\"22xMQ\"></a></p>\n<h2 id=\"创建内网repo\"><a href=\"#创建内网repo\" class=\"headerlink\" title=\"创建内网repo\"></a>创建内网repo</h2><p><a name=\"4pKfU\"></a></p>\n<h3 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h3><p>可以用apache2，也可以用nginx，任何提供http服务的都可以<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y httpd</span><br><span class=\"line\">$ sudo systemctl start httpd</span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> httpd</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"D9i4s\"></a></p>\n<h3 id=\"下载packages\"><a href=\"#下载packages\" class=\"headerlink\" title=\"下载packages\"></a>下载packages</h3><p>这是给centos安装cm6用的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cm6/6.2.0/redhat7/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget https://archive.cloudera.com/cm6/6.2.0/allkeys.asc -P /var/www/html/cloudera-repos/cm6/6.2.0/</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cm6</span><br></pre></td></tr></table></figure>\n<p><a name=\"POHSQ\"></a></p>\n<h3 id=\"下载和发布parcel-repo\"><a href=\"#下载和发布parcel-repo\" class=\"headerlink\" title=\"下载和发布parcel repo\"></a>下载和发布parcel repo</h3><ol>\n<li>下载 <code>manifest.json</code> 和parcel 文件<br><strong>CDH6</strong> </li>\n</ol>\n<p>CDH 6 parcel中包含 Apache Impala, Apache Kudu, Apache Spark 2, and Cloudera Search等组件，以6.2.0为例，在web服务器上运行下面指令，用来下载最新版的cdh 6.2，如果要换成cdh6.x的其他版本，只需要替换命令中的 <code>6.2.0</code> 即可。更多6.x版本信息参见 <a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/rg_cdh_6_download.html#cdh_download_info\" target=\"_blank\" rel=\"noopener\">CDH 6 Download Information</a> 。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh6</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras6</span><br></pre></td></tr></table></figure></p>\n<pre><code>**CDH5** &lt;br /&gt;CDH 5 parcel中包含 Impala, Kudu, Spark 1, and Search 等组件，以5.14.4为例，在web服务器上运行以下指令，如果要换成cdh5.x的其他版本,需要替换命令中的 `5.14.4` 为指定版本号，更多5.x版本信息参见 [CDH Download Information](https://www.cloudera.com/documentation/enterprise/release-notes/topics/cdh_vd_cdh_download.html)\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh5/parcels/5.14.4/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/gplextras5/parcels/5.14.4/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/cdh5</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/gplextras5</span><br></pre></td></tr></table></figure>\n<p>如果像本文实例一样，只需支持单一版本（centos7.6）cdh即可，为了节省时间，可以只下载具体版本。<br>以CDH6的为例，增加 <code>--accept-regex &quot;el7|manifest&quot;</code> ,代表只下载包含xenial和maifest的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方命令</span></span><br><span class=\"line\">sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\"><span class=\"comment\"># 改后命令</span></span><br><span class=\"line\">sudo wget --recursive --no-parent --accept-regex <span class=\"string\">\"el7|manifest\"</span> --no-host-directories https://archive.cloudera.com/cdh6/6.2.0/parcels/ -P /var/www/html/cloudera-repos</span><br></pre></td></tr></table></figure></p>\n<p>如果想再快点，可以使用迅雷，axel，aria2等多线程工具快速下载后，上传到web服务器。<br>      <strong>Apache Accumulo for CDH</strong> <br>以下载Accumulo1.7.2为例,如果换成别的版本，替换命令中1.7.2即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/accumulo-c5/parcels/1.7.2/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/accumulo-c5</span><br></pre></td></tr></table></figure>\n<pre><code>**CDS Powered By Apache Spark 2 for CDH** &lt;br /&gt;以下载CDS2.3.0.cloudera3为例,更多版本信息参见  [CDS Powered By Apache Spark Version Information](https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#versions)\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories https://archive.cloudera.com/spark2/parcels/2.3.0.cloudera3/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/spark2</span><br></pre></td></tr></table></figure>\n<pre><code>**Cloudera Navigator Key Trustee Server** &lt;br /&gt; Key Trustee KMS parcel中包含  Cloudera Navigator HSM KMS ，从 [download page](http://www.cloudera.com/content/www/en-us/downloads/navigator/key-trustee-kms.html) 下载Key Trustee KMS，选择指定Version，比如 `Navigator Key Trustee KMS 6.2.0` ,选择Package or Parcel,选择 `Parcel` ,选择 `DOWNLOAD NOW` ,将下载Key Trustee KMS parcels 和 manifest.json ，将下载的 `.tar.gz` 上传到web服务器上，并解压，以Key Trustee KMS 6.2.0为例\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos/keytrustee-kms</span><br><span class=\"line\">$ sudo tar xvfz /path/to/keytrustee-kms-6.2.0-parcels.tar.gz -C /var/www/html/cloudera-repos/keytrustee-kms --strip-components=1</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/keytrustee-kms</span><br></pre></td></tr></table></figure>\n<pre><code>**Sqoop Connectors** &lt;br /&gt;以下载最新版Sqoop为例\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -p /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo wget --recursive --no-parent --no-host-directories http://archive.cloudera.com/sqoop-connectors/parcels/latest/ -P /var/www/html/cloudera-repos</span><br><span class=\"line\">$ sudo chmod -R ugo+rX /var/www/html/cloudera-repos/sqoop-connectors</span><br></pre></td></tr></table></figure>\n<ol>\n<li>访问repo地址 <code>http://&lt;Web_server&gt;/cloudera-repos/</code> 确保你下载的文件能够正常访问。</li>\n</ol>\n<p><a name=\"IlmKd\"></a></p>\n<h3 id=\"配置Cloudera-Manager-使用Parcel-repo\"><a href=\"#配置Cloudera-Manager-使用Parcel-repo\" class=\"headerlink\" title=\"配置Cloudera Manager 使用Parcel repo\"></a>配置Cloudera Manager 使用Parcel repo</h3><ol>\n<li>两种方法二选一，配置parcel<ol>\n<li>Navigation bar - 导航条<ol>\n<li>点击navigation bar 的parcel图标或者点击 <code>Hosts</code> 然后点击 <code>Parcels</code> 标签</li>\n<li>点击 <code>Configuration</code> 按钮</li>\n</ol>\n</li>\n<li>Menu - 菜单<ol>\n<li>选择 <code>Administration</code> (管理) -&gt; <code>Settings</code> (设置)</li>\n<li>选择 <code>Category</code>  &gt; <code>Parcels</code> </li>\n</ol>\n</li>\n</ol>\n</li>\n<li>在 <code>Remote Pacel Respository URLs</code> 点击添加按钮，并添加。</li>\n<li>填上parcel地址，比如  <code>http://&lt;web_server&gt;/cloudera-parcels/cdh6/6.2.0/</code> </li>\n<li>填写 <code>Reason for change</code>  变更原因,点击 <code>Save Changes</code> 提交保存。</li>\n</ol>\n<p><a name=\"4qw5J\"></a></p>\n<h2 id=\"国内镜像源\"><a href=\"#国内镜像源\" class=\"headerlink\" title=\"国内镜像源\"></a>国内镜像源</h2><p>本文写完后，发现中科大有一个CDH的反代，速度还挺快，可以按需使用。参考 <a href=\"https://github.com/ustclug/mirrorrequest/issues/56\" target=\"_blank\" rel=\"noopener\">ustclug/mirrorrequest#56</a> ，经测试，特别不稳定，持续两天，访问不通。</p>\n<p><a name=\"9OziU\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_package_repo.html?cdoc-os=ubuntu+1604+xenial#internal_package_repo\" target=\"_blank\" rel=\"noopener\">Configuring a Local Package Repository</a></li>\n<li><a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_create_local_parcel_repo.html\" target=\"_blank\" rel=\"noopener\">Configuring a Local Parcel Repository</a></li>\n</ul>"},{"title":"博客模板","date":"2010-08-01T11:35:21.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。\n\n\n本文\n\n<!-- more -->\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- 我的博客\n- 我的掘金\n\n","source":"_posts/blog-template.md","raw":"\n---\n\ntitle: 博客模板\n\ndate: 2010-08-01 19:35:21\n\ntags: []\n\ncategories: []\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。\n\n\n本文\n\n<!-- more -->\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- 我的博客\n- 我的掘金\n\n","slug":"blog-template","published":1,"updated":"2019-08-16T06:39:18.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojcg000424dos56whoht","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文</p>\n<a id=\"more\"></a>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>我的博客</li>\n<li>我的掘金</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文</p>","more":"<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>我的博客</li>\n<li>我的掘金</li>\n</ul>"},{"title":"032-csv文件容错处理","date":"2019-07-16T13:30:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第32篇，定个小目标999，每周最少2篇。\n\n\n如果数据库有特殊字符(换行符，转义符),会导致生成的csv无法正常导入。\n\n```\nval1,val2,val3\naa,bb,cc\na\na,bb,cc\naa\n,bb,cc\naa,\nbb,cc\na\\a,bb,cc\n```\n> 第一行header和第二行数据正常。\n> 第三行第一个列有换行符，此时导致第四行看着正常(3列),但是数据又是错误的。\n> 第五行跟第三行类似\n> 第七行实际是第二个单元格首字符换行，导致第八行缺失一列。\n> 第九行有转义符\n\n\n处理成\n\n```\nval1,val2,val3\naa,bb,cc\naa,bb,cc\naa,bb,cc\naa,bb,cc\naa,bb,cc\n```\n\n<!-- more -->\n\n利用空闲时间，用python写了个修补工具,原理是利用，csv是从上往下读的，如果前一行列数不够，一定可以从后一列补上。但是可能存在补完后超过指定列(比如列内包含分隔符，导致数据库3列，变成4列)，所以需要对其切片，只保留指定列数。\n\nclean_csv.py\n```python\n# -*- coding: utf-8 -*-\n# Author AnJia(anjia0532@gmail.com https://anjia0532.github.io)\nimport argparse\nimport sys, os\nimport io\n\nreload(sys)\nsys.setdefaultencoding('utf8')\nblack_dict={\"\\\\\":\"\",\"\\\"\":\"\"}\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cols', type=int, dest='cols', action='store', default=-1,help=\"count of columns,default first line's cells\")\n    parser.add_argument('--src', type=str, dest='src', action='store', default='',\n                        help='path to source csv file')\n    parser.add_argument('--dest', type=str, dest='dest', action='store', default='',\n                        help='path to dest csv file')\n    parser.add_argument('--encoding', type=str, dest='encoding', action='store', default='utf-8',\n                        help='file encoding,default utf-8')\n    parser.add_argument('--chunksize', type=int, dest='chunksize', action='store', default='10000',\n                        help='batch lines to write dest file,default 10000')\n    parser.add_argument('--delimiter', type=str, dest='delimiter', action='store', default=',',\n                        help='csv delimiter,default ,')\n\n    args = parser.parse_args()\n    cols = args.cols\n    src = args.src\n    dest = args.dest\n    encoding = args.encoding\n    chunksize = args.chunksize\n    delimiter = args.delimiter\n\n    if not (src and dest) or chunksize <= 0:\n      print(\"invaild args!\") \n      sys.exit(-1)\n\n    olds=[]\n    lines=[]\n    with io.open(src,encoding=encoding) as fp:\n      for line in fp.readlines():\n        line = line.strip()\n        for k,v in black_dict.items():\n          if k in line:\n            line=line.replace(k,v)\n        cells = line.split(delimiter)\n        if cols == -1:\n          cols=len(cells)\n\n        if(len(cells) < cols or (len(olds)>0 and len(olds) < cols)):\n          if not olds:\n            olds = cells\n          else:\n            cells[0]=olds[-1]+cells[0]\n            olds.pop()\n            olds.extend(cells)\n          \n        if len(olds) >= cols:\n          cells=olds\n          olds=[]\n        if not olds:\n          lines.append(delimiter.join(cells[0:cols])+\"\\n\")\n\n        if len(lines) % chunksize == 0:\n          write_to_file(dest=dest,lines=lines)\n          lines=[]\n                        \n      write_to_file(dest=dest,lines=lines)\n\ndef write_to_file(dest,lines=[],encoding='utf-8'):\n  p = os.path.split(dest)[0]\n  if not os.path.exists(p):\n    os.makedirs(p)\n  with io.open(file=dest,mode=\"a+\",encoding=encoding) as fp:\n    fp.writelines(lines)\n\nif __name__ == '__main__':\n    main()\n```\n\n使用方式<br />`python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,` \n\n<a name=\"iz1V1\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/16/clean-csv/)\n- [我的掘金](https://juejin.im/post/5d2ff38b51882526ae230186)\n- [anjia0532/clean_csv.py](https://gist.github.com/anjia0532/6db48b0886d91d9a663e5a9fd19f2aaa)\n\n","source":"_posts/clean-csv.md","raw":"\n---\n\ntitle: 032-csv文件容错处理\n\ndate: 2019-07-16 21:30:00 +0800\n\ntags: [python,csv,数据分析,数据处理]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第32篇，定个小目标999，每周最少2篇。\n\n\n如果数据库有特殊字符(换行符，转义符),会导致生成的csv无法正常导入。\n\n```\nval1,val2,val3\naa,bb,cc\na\na,bb,cc\naa\n,bb,cc\naa,\nbb,cc\na\\a,bb,cc\n```\n> 第一行header和第二行数据正常。\n> 第三行第一个列有换行符，此时导致第四行看着正常(3列),但是数据又是错误的。\n> 第五行跟第三行类似\n> 第七行实际是第二个单元格首字符换行，导致第八行缺失一列。\n> 第九行有转义符\n\n\n处理成\n\n```\nval1,val2,val3\naa,bb,cc\naa,bb,cc\naa,bb,cc\naa,bb,cc\naa,bb,cc\n```\n\n<!-- more -->\n\n利用空闲时间，用python写了个修补工具,原理是利用，csv是从上往下读的，如果前一行列数不够，一定可以从后一列补上。但是可能存在补完后超过指定列(比如列内包含分隔符，导致数据库3列，变成4列)，所以需要对其切片，只保留指定列数。\n\nclean_csv.py\n```python\n# -*- coding: utf-8 -*-\n# Author AnJia(anjia0532@gmail.com https://anjia0532.github.io)\nimport argparse\nimport sys, os\nimport io\n\nreload(sys)\nsys.setdefaultencoding('utf8')\nblack_dict={\"\\\\\":\"\",\"\\\"\":\"\"}\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cols', type=int, dest='cols', action='store', default=-1,help=\"count of columns,default first line's cells\")\n    parser.add_argument('--src', type=str, dest='src', action='store', default='',\n                        help='path to source csv file')\n    parser.add_argument('--dest', type=str, dest='dest', action='store', default='',\n                        help='path to dest csv file')\n    parser.add_argument('--encoding', type=str, dest='encoding', action='store', default='utf-8',\n                        help='file encoding,default utf-8')\n    parser.add_argument('--chunksize', type=int, dest='chunksize', action='store', default='10000',\n                        help='batch lines to write dest file,default 10000')\n    parser.add_argument('--delimiter', type=str, dest='delimiter', action='store', default=',',\n                        help='csv delimiter,default ,')\n\n    args = parser.parse_args()\n    cols = args.cols\n    src = args.src\n    dest = args.dest\n    encoding = args.encoding\n    chunksize = args.chunksize\n    delimiter = args.delimiter\n\n    if not (src and dest) or chunksize <= 0:\n      print(\"invaild args!\") \n      sys.exit(-1)\n\n    olds=[]\n    lines=[]\n    with io.open(src,encoding=encoding) as fp:\n      for line in fp.readlines():\n        line = line.strip()\n        for k,v in black_dict.items():\n          if k in line:\n            line=line.replace(k,v)\n        cells = line.split(delimiter)\n        if cols == -1:\n          cols=len(cells)\n\n        if(len(cells) < cols or (len(olds)>0 and len(olds) < cols)):\n          if not olds:\n            olds = cells\n          else:\n            cells[0]=olds[-1]+cells[0]\n            olds.pop()\n            olds.extend(cells)\n          \n        if len(olds) >= cols:\n          cells=olds\n          olds=[]\n        if not olds:\n          lines.append(delimiter.join(cells[0:cols])+\"\\n\")\n\n        if len(lines) % chunksize == 0:\n          write_to_file(dest=dest,lines=lines)\n          lines=[]\n                        \n      write_to_file(dest=dest,lines=lines)\n\ndef write_to_file(dest,lines=[],encoding='utf-8'):\n  p = os.path.split(dest)[0]\n  if not os.path.exists(p):\n    os.makedirs(p)\n  with io.open(file=dest,mode=\"a+\",encoding=encoding) as fp:\n    fp.writelines(lines)\n\nif __name__ == '__main__':\n    main()\n```\n\n使用方式<br />`python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,` \n\n<a name=\"iz1V1\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/16/clean-csv/)\n- [我的掘金](https://juejin.im/post/5d2ff38b51882526ae230186)\n- [anjia0532/clean_csv.py](https://gist.github.com/anjia0532/6db48b0886d91d9a663e5a9fd19f2aaa)\n\n","slug":"clean-csv","published":1,"updated":"2019-08-16T06:11:14.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojci000624dody4lysok","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第32篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>如果数据库有特殊字符(换行符，转义符),会导致生成的csv无法正常导入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">val1,val2,val3</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">a</span><br><span class=\"line\">a,bb,cc</span><br><span class=\"line\">aa</span><br><span class=\"line\">,bb,cc</span><br><span class=\"line\">aa,</span><br><span class=\"line\">bb,cc</span><br><span class=\"line\">a\\a,bb,cc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第一行header和第二行数据正常。<br>第三行第一个列有换行符，此时导致第四行看着正常(3列),但是数据又是错误的。<br>第五行跟第三行类似<br>第七行实际是第二个单元格首字符换行，导致第八行缺失一列。<br>第九行有转义符</p>\n</blockquote>\n<p>处理成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">val1,val2,val3</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>利用空闲时间，用python写了个修补工具,原理是利用，csv是从上往下读的，如果前一行列数不够，一定可以从后一列补上。但是可能存在补完后超过指定列(比如列内包含分隔符，导致数据库3列，变成4列)，所以需要对其切片，只保留指定列数。</p>\n<p>clean_csv.py<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author AnJia(anjia0532@gmail.com https://anjia0532.github.io)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\"><span class=\"keyword\">import</span> io</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">black_dict=&#123;<span class=\"string\">\"\\\\\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"\\\"\"</span>:<span class=\"string\">\"\"</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parser = argparse.ArgumentParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--cols'</span>, type=int, dest=<span class=\"string\">'cols'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"number\">-1</span>,help=<span class=\"string\">\"count of columns,default first line's cells\"</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--src'</span>, type=str, dest=<span class=\"string\">'src'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">''</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'path to source csv file'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--dest'</span>, type=str, dest=<span class=\"string\">'dest'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">''</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'path to dest csv file'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--encoding'</span>, type=str, dest=<span class=\"string\">'encoding'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'utf-8'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'file encoding,default utf-8'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--chunksize'</span>, type=int, dest=<span class=\"string\">'chunksize'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'10000'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'batch lines to write dest file,default 10000'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--delimiter'</span>, type=str, dest=<span class=\"string\">'delimiter'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">','</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'csv delimiter,default ,'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    cols = args.cols</span><br><span class=\"line\">    src = args.src</span><br><span class=\"line\">    dest = args.dest</span><br><span class=\"line\">    encoding = args.encoding</span><br><span class=\"line\">    chunksize = args.chunksize</span><br><span class=\"line\">    delimiter = args.delimiter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (src <span class=\"keyword\">and</span> dest) <span class=\"keyword\">or</span> chunksize &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">      print(<span class=\"string\">\"invaild args!\"</span>) </span><br><span class=\"line\">      sys.exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    olds=[]</span><br><span class=\"line\">    lines=[]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> io.open(src,encoding=encoding) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">      <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fp.readlines():</span><br><span class=\"line\">        line = line.strip()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> black_dict.items():</span><br><span class=\"line\">          <span class=\"keyword\">if</span> k <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">            line=line.replace(k,v)</span><br><span class=\"line\">        cells = line.split(delimiter)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cols == <span class=\"number\">-1</span>:</span><br><span class=\"line\">          cols=len(cells)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len(cells) &lt; cols <span class=\"keyword\">or</span> (len(olds)&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> len(olds) &lt; cols)):</span><br><span class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> olds:</span><br><span class=\"line\">            olds = cells</span><br><span class=\"line\">          <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cells[<span class=\"number\">0</span>]=olds[<span class=\"number\">-1</span>]+cells[<span class=\"number\">0</span>]</span><br><span class=\"line\">            olds.pop()</span><br><span class=\"line\">            olds.extend(cells)</span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(olds) &gt;= cols:</span><br><span class=\"line\">          cells=olds</span><br><span class=\"line\">          olds=[]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> olds:</span><br><span class=\"line\">          lines.append(delimiter.join(cells[<span class=\"number\">0</span>:cols])+<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(lines) % chunksize == <span class=\"number\">0</span>:</span><br><span class=\"line\">          write_to_file(dest=dest,lines=lines)</span><br><span class=\"line\">          lines=[]</span><br><span class=\"line\">                        </span><br><span class=\"line\">      write_to_file(dest=dest,lines=lines)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_to_file</span><span class=\"params\">(dest,lines=[],encoding=<span class=\"string\">'utf-8'</span>)</span>:</span></span><br><span class=\"line\">  p = os.path.split(dest)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(p):</span><br><span class=\"line\">    os.makedirs(p)</span><br><span class=\"line\">  <span class=\"keyword\">with</span> io.open(file=dest,mode=<span class=\"string\">\"a+\"</span>,encoding=encoding) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.writelines(lines)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>使用方式<br><code>python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,</code> </p>\n<p><a name=\"iz1V1\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/16/clean-csv/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d2ff38b51882526ae230186\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://gist.github.com/anjia0532/6db48b0886d91d9a663e5a9fd19f2aaa\" target=\"_blank\" rel=\"noopener\">anjia0532/clean_csv.py</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第32篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>如果数据库有特殊字符(换行符，转义符),会导致生成的csv无法正常导入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">val1,val2,val3</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">a</span><br><span class=\"line\">a,bb,cc</span><br><span class=\"line\">aa</span><br><span class=\"line\">,bb,cc</span><br><span class=\"line\">aa,</span><br><span class=\"line\">bb,cc</span><br><span class=\"line\">a\\a,bb,cc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第一行header和第二行数据正常。<br>第三行第一个列有换行符，此时导致第四行看着正常(3列),但是数据又是错误的。<br>第五行跟第三行类似<br>第七行实际是第二个单元格首字符换行，导致第八行缺失一列。<br>第九行有转义符</p>\n</blockquote>\n<p>处理成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">val1,val2,val3</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br><span class=\"line\">aa,bb,cc</span><br></pre></td></tr></table></figure>","more":"<p>利用空闲时间，用python写了个修补工具,原理是利用，csv是从上往下读的，如果前一行列数不够，一定可以从后一列补上。但是可能存在补完后超过指定列(比如列内包含分隔符，导致数据库3列，变成4列)，所以需要对其切片，只保留指定列数。</p>\n<p>clean_csv.py<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author AnJia(anjia0532@gmail.com https://anjia0532.github.io)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\"><span class=\"keyword\">import</span> io</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">black_dict=&#123;<span class=\"string\">\"\\\\\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"\\\"\"</span>:<span class=\"string\">\"\"</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parser = argparse.ArgumentParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--cols'</span>, type=int, dest=<span class=\"string\">'cols'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"number\">-1</span>,help=<span class=\"string\">\"count of columns,default first line's cells\"</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--src'</span>, type=str, dest=<span class=\"string\">'src'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">''</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'path to source csv file'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--dest'</span>, type=str, dest=<span class=\"string\">'dest'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">''</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'path to dest csv file'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--encoding'</span>, type=str, dest=<span class=\"string\">'encoding'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'utf-8'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'file encoding,default utf-8'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--chunksize'</span>, type=int, dest=<span class=\"string\">'chunksize'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'10000'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'batch lines to write dest file,default 10000'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--delimiter'</span>, type=str, dest=<span class=\"string\">'delimiter'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">','</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'csv delimiter,default ,'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    cols = args.cols</span><br><span class=\"line\">    src = args.src</span><br><span class=\"line\">    dest = args.dest</span><br><span class=\"line\">    encoding = args.encoding</span><br><span class=\"line\">    chunksize = args.chunksize</span><br><span class=\"line\">    delimiter = args.delimiter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (src <span class=\"keyword\">and</span> dest) <span class=\"keyword\">or</span> chunksize &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">      print(<span class=\"string\">\"invaild args!\"</span>) </span><br><span class=\"line\">      sys.exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    olds=[]</span><br><span class=\"line\">    lines=[]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> io.open(src,encoding=encoding) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">      <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fp.readlines():</span><br><span class=\"line\">        line = line.strip()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> black_dict.items():</span><br><span class=\"line\">          <span class=\"keyword\">if</span> k <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">            line=line.replace(k,v)</span><br><span class=\"line\">        cells = line.split(delimiter)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cols == <span class=\"number\">-1</span>:</span><br><span class=\"line\">          cols=len(cells)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len(cells) &lt; cols <span class=\"keyword\">or</span> (len(olds)&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> len(olds) &lt; cols)):</span><br><span class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> olds:</span><br><span class=\"line\">            olds = cells</span><br><span class=\"line\">          <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cells[<span class=\"number\">0</span>]=olds[<span class=\"number\">-1</span>]+cells[<span class=\"number\">0</span>]</span><br><span class=\"line\">            olds.pop()</span><br><span class=\"line\">            olds.extend(cells)</span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(olds) &gt;= cols:</span><br><span class=\"line\">          cells=olds</span><br><span class=\"line\">          olds=[]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> olds:</span><br><span class=\"line\">          lines.append(delimiter.join(cells[<span class=\"number\">0</span>:cols])+<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(lines) % chunksize == <span class=\"number\">0</span>:</span><br><span class=\"line\">          write_to_file(dest=dest,lines=lines)</span><br><span class=\"line\">          lines=[]</span><br><span class=\"line\">                        </span><br><span class=\"line\">      write_to_file(dest=dest,lines=lines)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_to_file</span><span class=\"params\">(dest,lines=[],encoding=<span class=\"string\">'utf-8'</span>)</span>:</span></span><br><span class=\"line\">  p = os.path.split(dest)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(p):</span><br><span class=\"line\">    os.makedirs(p)</span><br><span class=\"line\">  <span class=\"keyword\">with</span> io.open(file=dest,mode=<span class=\"string\">\"a+\"</span>,encoding=encoding) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.writelines(lines)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>使用方式<br><code>python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,</code> </p>\n<p><a name=\"iz1V1\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/16/clean-csv/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d2ff38b51882526ae230186\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://gist.github.com/anjia0532/6db48b0886d91d9a663e5a9fd19f2aaa\" target=\"_blank\" rel=\"noopener\">anjia0532/clean_csv.py</a></li>\n</ul>"},{"title":"020-CM配置集群","date":"2019-04-29T10:10:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第20篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍，如何配置CM集群。\n\n<!-- more -->\n\n<a name=\"GgGW9\"></a>\n### 提示\n\n- 安装完后，打开 [http://masterIP:7180/](http://masterip:7180/) 进行登录，用户名/密码 是 admin/admin\n\n- 安装过程中，如果出现\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474684611-ff6a7f1c-4d35-4041-b8c7-67748cafcb4e.png#align=left&display=inline&height=845&name=image.png&originHeight=845&originWidth=1456&size=26862&status=done&width=1456)和![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558168684154-4141c4e8-4592-40a3-8c07-11ec9d3e8ed9.png#align=left&display=inline&height=612&name=image.png&originHeight=612&originWidth=897&size=25849&status=done&width=897)<br />多按几次 Ctrl+Shift+R即可\n\n<a name=\"RQBFy\"></a>\n### 选择协议\n注意授权问题，建议选择Cloudera Express 版，防止使用试用版收费项目后，60天过期后停用掉导致的问题。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473083139-d59ce28b-5999-429d-9d51-db825bf714b7.png#align=left&display=inline&height=928&name=image.png&originHeight=928&originWidth=1764&size=122298&status=done&width=1764)\n<a name=\"Ei3Z4\"></a>\n### 配置集群\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473101214-998d7c3b-e202-4fe7-800f-b08da5dea3f1.png#align=left&display=inline&height=900&name=image.png&originHeight=900&originWidth=1434&size=69964&status=done&width=1434)<br />填上FQDN或者ip，多台用英文逗号隔开，然后点搜索。并选中需要安装的服务器，点击继续。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473272389-edb6fff0-2c54-4ffd-9495-ce76f709c196.png#align=left&display=inline&height=915&name=image.png&originHeight=915&originWidth=1450&size=109471&status=done&width=1450)<br />国内使用官方公开库，那等装完了，起码得以天为单位，此处使用自建repo，参考 [018-CDH6.2构建本地源加速CDH安装](https://juejin.im/post/5cc57a01f265da036c57929b) , 如果嫌麻烦，并且中科大的免费镜像能用的话，可以用中科大的，参考 [ustclug/mirrorrequest#56](https://github.com/ustclug/mirrorrequest/issues/56)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473386274-c92e6d15-465f-46ed-9989-d1e2aede4972.png#align=left&display=inline&height=886&name=image.png&originHeight=886&originWidth=1446&size=164237&status=done&width=1446)<br />选择更多选项，把乱七八糟的都删掉，只留一个即可。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473404683-1cdb865e-3ee0-4f07-bc3c-97138f76869d.png#align=left&display=inline&height=461&name=image.png&originHeight=461&originWidth=1701&size=46026&status=done&width=1701)\n\n如果已经安装了jdk 1.8 可以跳过。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473446912-ef5d1472-ec49-4cc3-a4b5-ab803b54aa20.png#align=left&display=inline&height=908&name=image.png&originHeight=908&originWidth=1444&size=288573&status=done&width=1444)<br />填主机密码或者ssh key<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473472053-b318c2b8-6611-456b-9962-85e0fbcf2c17.png#align=left&display=inline&height=899&name=image.png&originHeight=899&originWidth=1421&size=101355&status=done&width=1421)<br />点击继续，即会在对应主机执行安装操作。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473917009-483cee28-4940-4aab-be3a-d2ec921d2eeb.png#align=left&display=inline&height=889&name=image.png&originHeight=889&originWidth=1207&size=52000&status=done&width=1207)<br />点继续，进行健康检查，如果是Inspect Network 和Hosts都是绿色的，则继续，否则可以点击，显示检查结果，进行排查，排查，改正后，点击重新运行。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474626008-4d55b976-68d8-4af0-b02e-c9f8644ce89c.png#align=left&display=inline&height=914&name=image.png&originHeight=914&originWidth=1451&size=106906&status=done&width=1451)<br />选择需要安装的模块，点击继续<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474843163-6ad18e46-c3f1-4daa-8810-68d956649901.png#align=left&display=inline&height=840&name=image.png&originHeight=840&originWidth=1431&size=141716&status=done&width=1431)<br />配置角色（各个主机需要安装的组件）<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474977110-d9ba7095-a8eb-4c9d-b273-9750fb0596da.png#align=left&display=inline&height=397&name=image.png&originHeight=397&originWidth=1701&size=41273&status=done&width=1701)<br />配置元数据库信息，点击测试连接（如果提示找不到数据库驱动，需要参考之前的文章 [017-Centos7.6+CDH 6.2 安装和使用](https://juejin.im/post/5cd4c949f265da03a158463a)，安装驱动）<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557475069567-67acf641-1d6a-4d7d-a3a6-45a7845eb337.png#align=left&display=inline&height=805&name=image.png&originHeight=805&originWidth=1443&size=138020&status=done&width=1443)<br />点击继续后，会显示安装进度。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557475628886-18547c11-a4b2-4f26-9132-29ad74f282aa.png#align=left&display=inline&height=906&name=image.png&originHeight=906&originWidth=1440&size=139785&status=done&width=1440)<br />点击继续，则安装结束。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557475636171-04c27f36-723a-4eff-b461-f9407e2faef4.png#align=left&display=inline&height=322&name=image.png&originHeight=322&originWidth=1213&size=12755&status=done&width=1213)\n\n<a name=\"FeVsY\"></a>\n### 参考资料\n\n- [018-CDH6.2构建本地源加速CDH安装](https://juejin.im/post/5cc57a01f265da036c57929b)\n- [ustclug/mirrorrequest#56](https://github.com/ustclug/mirrorrequest/issues/56)\n- [017-Centos7.6+CDH 6.2 安装和使用](https://juejin.im/post/5cd4c949f265da03a158463a)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","source":"_posts/cm6-cluster.md","raw":"\n---\n\ntitle: 020-CM配置集群\n\ndate: 2019-04-29 18:10:00 +0800\n\ntags: [CDH,hadoop,大数据]\n\ncategories: 大数据\n\n---\n> 这是坚持技术写作计划（含翻译）的第20篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍，如何配置CM集群。\n\n<!-- more -->\n\n<a name=\"GgGW9\"></a>\n### 提示\n\n- 安装完后，打开 [http://masterIP:7180/](http://masterip:7180/) 进行登录，用户名/密码 是 admin/admin\n\n- 安装过程中，如果出现\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474684611-ff6a7f1c-4d35-4041-b8c7-67748cafcb4e.png#align=left&display=inline&height=845&name=image.png&originHeight=845&originWidth=1456&size=26862&status=done&width=1456)和![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558168684154-4141c4e8-4592-40a3-8c07-11ec9d3e8ed9.png#align=left&display=inline&height=612&name=image.png&originHeight=612&originWidth=897&size=25849&status=done&width=897)<br />多按几次 Ctrl+Shift+R即可\n\n<a name=\"RQBFy\"></a>\n### 选择协议\n注意授权问题，建议选择Cloudera Express 版，防止使用试用版收费项目后，60天过期后停用掉导致的问题。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473083139-d59ce28b-5999-429d-9d51-db825bf714b7.png#align=left&display=inline&height=928&name=image.png&originHeight=928&originWidth=1764&size=122298&status=done&width=1764)\n<a name=\"Ei3Z4\"></a>\n### 配置集群\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473101214-998d7c3b-e202-4fe7-800f-b08da5dea3f1.png#align=left&display=inline&height=900&name=image.png&originHeight=900&originWidth=1434&size=69964&status=done&width=1434)<br />填上FQDN或者ip，多台用英文逗号隔开，然后点搜索。并选中需要安装的服务器，点击继续。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473272389-edb6fff0-2c54-4ffd-9495-ce76f709c196.png#align=left&display=inline&height=915&name=image.png&originHeight=915&originWidth=1450&size=109471&status=done&width=1450)<br />国内使用官方公开库，那等装完了，起码得以天为单位，此处使用自建repo，参考 [018-CDH6.2构建本地源加速CDH安装](https://juejin.im/post/5cc57a01f265da036c57929b) , 如果嫌麻烦，并且中科大的免费镜像能用的话，可以用中科大的，参考 [ustclug/mirrorrequest#56](https://github.com/ustclug/mirrorrequest/issues/56)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473386274-c92e6d15-465f-46ed-9989-d1e2aede4972.png#align=left&display=inline&height=886&name=image.png&originHeight=886&originWidth=1446&size=164237&status=done&width=1446)<br />选择更多选项，把乱七八糟的都删掉，只留一个即可。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473404683-1cdb865e-3ee0-4f07-bc3c-97138f76869d.png#align=left&display=inline&height=461&name=image.png&originHeight=461&originWidth=1701&size=46026&status=done&width=1701)\n\n如果已经安装了jdk 1.8 可以跳过。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473446912-ef5d1472-ec49-4cc3-a4b5-ab803b54aa20.png#align=left&display=inline&height=908&name=image.png&originHeight=908&originWidth=1444&size=288573&status=done&width=1444)<br />填主机密码或者ssh key<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473472053-b318c2b8-6611-456b-9962-85e0fbcf2c17.png#align=left&display=inline&height=899&name=image.png&originHeight=899&originWidth=1421&size=101355&status=done&width=1421)<br />点击继续，即会在对应主机执行安装操作。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557473917009-483cee28-4940-4aab-be3a-d2ec921d2eeb.png#align=left&display=inline&height=889&name=image.png&originHeight=889&originWidth=1207&size=52000&status=done&width=1207)<br />点继续，进行健康检查，如果是Inspect Network 和Hosts都是绿色的，则继续，否则可以点击，显示检查结果，进行排查，排查，改正后，点击重新运行。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474626008-4d55b976-68d8-4af0-b02e-c9f8644ce89c.png#align=left&display=inline&height=914&name=image.png&originHeight=914&originWidth=1451&size=106906&status=done&width=1451)<br />选择需要安装的模块，点击继续<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474843163-6ad18e46-c3f1-4daa-8810-68d956649901.png#align=left&display=inline&height=840&name=image.png&originHeight=840&originWidth=1431&size=141716&status=done&width=1431)<br />配置角色（各个主机需要安装的组件）<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557474977110-d9ba7095-a8eb-4c9d-b273-9750fb0596da.png#align=left&display=inline&height=397&name=image.png&originHeight=397&originWidth=1701&size=41273&status=done&width=1701)<br />配置元数据库信息，点击测试连接（如果提示找不到数据库驱动，需要参考之前的文章 [017-Centos7.6+CDH 6.2 安装和使用](https://juejin.im/post/5cd4c949f265da03a158463a)，安装驱动）<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557475069567-67acf641-1d6a-4d7d-a3a6-45a7845eb337.png#align=left&display=inline&height=805&name=image.png&originHeight=805&originWidth=1443&size=138020&status=done&width=1443)<br />点击继续后，会显示安装进度。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557475628886-18547c11-a4b2-4f26-9132-29ad74f282aa.png#align=left&display=inline&height=906&name=image.png&originHeight=906&originWidth=1440&size=139785&status=done&width=1440)<br />点击继续，则安装结束。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557475636171-04c27f36-723a-4eff-b461-f9407e2faef4.png#align=left&display=inline&height=322&name=image.png&originHeight=322&originWidth=1213&size=12755&status=done&width=1213)\n\n<a name=\"FeVsY\"></a>\n### 参考资料\n\n- [018-CDH6.2构建本地源加速CDH安装](https://juejin.im/post/5cc57a01f265da036c57929b)\n- [ustclug/mirrorrequest#56](https://github.com/ustclug/mirrorrequest/issues/56)\n- [017-Centos7.6+CDH 6.2 安装和使用](https://juejin.im/post/5cd4c949f265da03a158463a)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","slug":"cm6-cluster","published":1,"updated":"2019-08-16T06:11:15.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojcj000824do7dmg0m5e","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第20篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍，如何配置CM集群。</p>\n<a id=\"more\"></a>\n<p><a name=\"GgGW9\"></a></p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><ul>\n<li><p>安装完后，打开 <a href=\"http://masterip:7180/\" target=\"_blank\" rel=\"noopener\">http://masterIP:7180/</a> 进行登录，用户名/密码 是 admin/admin</p>\n</li>\n<li><p>安装过程中，如果出现</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474684611-ff6a7f1c-4d35-4041-b8c7-67748cafcb4e.png#align=left&amp;display=inline&amp;height=845&amp;name=image.png&amp;originHeight=845&amp;originWidth=1456&amp;size=26862&amp;status=done&amp;width=1456\" alt=\"image.png\">和<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558168684154-4141c4e8-4592-40a3-8c07-11ec9d3e8ed9.png#align=left&amp;display=inline&amp;height=612&amp;name=image.png&amp;originHeight=612&amp;originWidth=897&amp;size=25849&amp;status=done&amp;width=897\" alt=\"image.png\"><br>多按几次 Ctrl+Shift+R即可</p>\n<p><a name=\"RQBFy\"></a></p>\n<h3 id=\"选择协议\"><a href=\"#选择协议\" class=\"headerlink\" title=\"选择协议\"></a>选择协议</h3><p>注意授权问题，建议选择Cloudera Express 版，防止使用试用版收费项目后，60天过期后停用掉导致的问题。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473083139-d59ce28b-5999-429d-9d51-db825bf714b7.png#align=left&amp;display=inline&amp;height=928&amp;name=image.png&amp;originHeight=928&amp;originWidth=1764&amp;size=122298&amp;status=done&amp;width=1764\" alt=\"image.png\"><br><a name=\"Ei3Z4\"></a></p>\n<h3 id=\"配置集群\"><a href=\"#配置集群\" class=\"headerlink\" title=\"配置集群\"></a>配置集群</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473101214-998d7c3b-e202-4fe7-800f-b08da5dea3f1.png#align=left&amp;display=inline&amp;height=900&amp;name=image.png&amp;originHeight=900&amp;originWidth=1434&amp;size=69964&amp;status=done&amp;width=1434\" alt=\"image.png\"><br>填上FQDN或者ip，多台用英文逗号隔开，然后点搜索。并选中需要安装的服务器，点击继续。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473272389-edb6fff0-2c54-4ffd-9495-ce76f709c196.png#align=left&amp;display=inline&amp;height=915&amp;name=image.png&amp;originHeight=915&amp;originWidth=1450&amp;size=109471&amp;status=done&amp;width=1450\" alt=\"image.png\"><br>国内使用官方公开库，那等装完了，起码得以天为单位，此处使用自建repo，参考 <a href=\"https://juejin.im/post/5cc57a01f265da036c57929b\" target=\"_blank\" rel=\"noopener\">018-CDH6.2构建本地源加速CDH安装</a> , 如果嫌麻烦，并且中科大的免费镜像能用的话，可以用中科大的，参考 <a href=\"https://github.com/ustclug/mirrorrequest/issues/56\" target=\"_blank\" rel=\"noopener\">ustclug/mirrorrequest#56</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473386274-c92e6d15-465f-46ed-9989-d1e2aede4972.png#align=left&amp;display=inline&amp;height=886&amp;name=image.png&amp;originHeight=886&amp;originWidth=1446&amp;size=164237&amp;status=done&amp;width=1446\" alt=\"image.png\"><br>选择更多选项，把乱七八糟的都删掉，只留一个即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473404683-1cdb865e-3ee0-4f07-bc3c-97138f76869d.png#align=left&amp;display=inline&amp;height=461&amp;name=image.png&amp;originHeight=461&amp;originWidth=1701&amp;size=46026&amp;status=done&amp;width=1701\" alt=\"image.png\"></p>\n<p>如果已经安装了jdk 1.8 可以跳过。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473446912-ef5d1472-ec49-4cc3-a4b5-ab803b54aa20.png#align=left&amp;display=inline&amp;height=908&amp;name=image.png&amp;originHeight=908&amp;originWidth=1444&amp;size=288573&amp;status=done&amp;width=1444\" alt=\"image.png\"><br>填主机密码或者ssh key<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473472053-b318c2b8-6611-456b-9962-85e0fbcf2c17.png#align=left&amp;display=inline&amp;height=899&amp;name=image.png&amp;originHeight=899&amp;originWidth=1421&amp;size=101355&amp;status=done&amp;width=1421\" alt=\"image.png\"><br>点击继续，即会在对应主机执行安装操作。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473917009-483cee28-4940-4aab-be3a-d2ec921d2eeb.png#align=left&amp;display=inline&amp;height=889&amp;name=image.png&amp;originHeight=889&amp;originWidth=1207&amp;size=52000&amp;status=done&amp;width=1207\" alt=\"image.png\"><br>点继续，进行健康检查，如果是Inspect Network 和Hosts都是绿色的，则继续，否则可以点击，显示检查结果，进行排查，排查，改正后，点击重新运行。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474626008-4d55b976-68d8-4af0-b02e-c9f8644ce89c.png#align=left&amp;display=inline&amp;height=914&amp;name=image.png&amp;originHeight=914&amp;originWidth=1451&amp;size=106906&amp;status=done&amp;width=1451\" alt=\"image.png\"><br>选择需要安装的模块，点击继续<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474843163-6ad18e46-c3f1-4daa-8810-68d956649901.png#align=left&amp;display=inline&amp;height=840&amp;name=image.png&amp;originHeight=840&amp;originWidth=1431&amp;size=141716&amp;status=done&amp;width=1431\" alt=\"image.png\"><br>配置角色（各个主机需要安装的组件）<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474977110-d9ba7095-a8eb-4c9d-b273-9750fb0596da.png#align=left&amp;display=inline&amp;height=397&amp;name=image.png&amp;originHeight=397&amp;originWidth=1701&amp;size=41273&amp;status=done&amp;width=1701\" alt=\"image.png\"><br>配置元数据库信息，点击测试连接（如果提示找不到数据库驱动，需要参考之前的文章 <a href=\"https://juejin.im/post/5cd4c949f265da03a158463a\" target=\"_blank\" rel=\"noopener\">017-Centos7.6+CDH 6.2 安装和使用</a>，安装驱动）<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557475069567-67acf641-1d6a-4d7d-a3a6-45a7845eb337.png#align=left&amp;display=inline&amp;height=805&amp;name=image.png&amp;originHeight=805&amp;originWidth=1443&amp;size=138020&amp;status=done&amp;width=1443\" alt=\"image.png\"><br>点击继续后，会显示安装进度。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557475628886-18547c11-a4b2-4f26-9132-29ad74f282aa.png#align=left&amp;display=inline&amp;height=906&amp;name=image.png&amp;originHeight=906&amp;originWidth=1440&amp;size=139785&amp;status=done&amp;width=1440\" alt=\"image.png\"><br>点击继续，则安装结束。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557475636171-04c27f36-723a-4eff-b461-f9407e2faef4.png#align=left&amp;display=inline&amp;height=322&amp;name=image.png&amp;originHeight=322&amp;originWidth=1213&amp;size=12755&amp;status=done&amp;width=1213\" alt=\"image.png\"></p>\n<p><a name=\"FeVsY\"></a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://juejin.im/post/5cc57a01f265da036c57929b\" target=\"_blank\" rel=\"noopener\">018-CDH6.2构建本地源加速CDH安装</a></li>\n<li><a href=\"https://github.com/ustclug/mirrorrequest/issues/56\" target=\"_blank\" rel=\"noopener\">ustclug/mirrorrequest#56</a></li>\n<li><a href=\"https://juejin.im/post/5cd4c949f265da03a158463a\" target=\"_blank\" rel=\"noopener\">017-Centos7.6+CDH 6.2 安装和使用</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第20篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍，如何配置CM集群。</p>","more":"<p><a name=\"GgGW9\"></a></p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><ul>\n<li><p>安装完后，打开 <a href=\"http://masterip:7180/\" target=\"_blank\" rel=\"noopener\">http://masterIP:7180/</a> 进行登录，用户名/密码 是 admin/admin</p>\n</li>\n<li><p>安装过程中，如果出现</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474684611-ff6a7f1c-4d35-4041-b8c7-67748cafcb4e.png#align=left&amp;display=inline&amp;height=845&amp;name=image.png&amp;originHeight=845&amp;originWidth=1456&amp;size=26862&amp;status=done&amp;width=1456\" alt=\"image.png\">和<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558168684154-4141c4e8-4592-40a3-8c07-11ec9d3e8ed9.png#align=left&amp;display=inline&amp;height=612&amp;name=image.png&amp;originHeight=612&amp;originWidth=897&amp;size=25849&amp;status=done&amp;width=897\" alt=\"image.png\"><br>多按几次 Ctrl+Shift+R即可</p>\n<p><a name=\"RQBFy\"></a></p>\n<h3 id=\"选择协议\"><a href=\"#选择协议\" class=\"headerlink\" title=\"选择协议\"></a>选择协议</h3><p>注意授权问题，建议选择Cloudera Express 版，防止使用试用版收费项目后，60天过期后停用掉导致的问题。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473083139-d59ce28b-5999-429d-9d51-db825bf714b7.png#align=left&amp;display=inline&amp;height=928&amp;name=image.png&amp;originHeight=928&amp;originWidth=1764&amp;size=122298&amp;status=done&amp;width=1764\" alt=\"image.png\"><br><a name=\"Ei3Z4\"></a></p>\n<h3 id=\"配置集群\"><a href=\"#配置集群\" class=\"headerlink\" title=\"配置集群\"></a>配置集群</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473101214-998d7c3b-e202-4fe7-800f-b08da5dea3f1.png#align=left&amp;display=inline&amp;height=900&amp;name=image.png&amp;originHeight=900&amp;originWidth=1434&amp;size=69964&amp;status=done&amp;width=1434\" alt=\"image.png\"><br>填上FQDN或者ip，多台用英文逗号隔开，然后点搜索。并选中需要安装的服务器，点击继续。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473272389-edb6fff0-2c54-4ffd-9495-ce76f709c196.png#align=left&amp;display=inline&amp;height=915&amp;name=image.png&amp;originHeight=915&amp;originWidth=1450&amp;size=109471&amp;status=done&amp;width=1450\" alt=\"image.png\"><br>国内使用官方公开库，那等装完了，起码得以天为单位，此处使用自建repo，参考 <a href=\"https://juejin.im/post/5cc57a01f265da036c57929b\" target=\"_blank\" rel=\"noopener\">018-CDH6.2构建本地源加速CDH安装</a> , 如果嫌麻烦，并且中科大的免费镜像能用的话，可以用中科大的，参考 <a href=\"https://github.com/ustclug/mirrorrequest/issues/56\" target=\"_blank\" rel=\"noopener\">ustclug/mirrorrequest#56</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473386274-c92e6d15-465f-46ed-9989-d1e2aede4972.png#align=left&amp;display=inline&amp;height=886&amp;name=image.png&amp;originHeight=886&amp;originWidth=1446&amp;size=164237&amp;status=done&amp;width=1446\" alt=\"image.png\"><br>选择更多选项，把乱七八糟的都删掉，只留一个即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473404683-1cdb865e-3ee0-4f07-bc3c-97138f76869d.png#align=left&amp;display=inline&amp;height=461&amp;name=image.png&amp;originHeight=461&amp;originWidth=1701&amp;size=46026&amp;status=done&amp;width=1701\" alt=\"image.png\"></p>\n<p>如果已经安装了jdk 1.8 可以跳过。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473446912-ef5d1472-ec49-4cc3-a4b5-ab803b54aa20.png#align=left&amp;display=inline&amp;height=908&amp;name=image.png&amp;originHeight=908&amp;originWidth=1444&amp;size=288573&amp;status=done&amp;width=1444\" alt=\"image.png\"><br>填主机密码或者ssh key<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473472053-b318c2b8-6611-456b-9962-85e0fbcf2c17.png#align=left&amp;display=inline&amp;height=899&amp;name=image.png&amp;originHeight=899&amp;originWidth=1421&amp;size=101355&amp;status=done&amp;width=1421\" alt=\"image.png\"><br>点击继续，即会在对应主机执行安装操作。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557473917009-483cee28-4940-4aab-be3a-d2ec921d2eeb.png#align=left&amp;display=inline&amp;height=889&amp;name=image.png&amp;originHeight=889&amp;originWidth=1207&amp;size=52000&amp;status=done&amp;width=1207\" alt=\"image.png\"><br>点继续，进行健康检查，如果是Inspect Network 和Hosts都是绿色的，则继续，否则可以点击，显示检查结果，进行排查，排查，改正后，点击重新运行。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474626008-4d55b976-68d8-4af0-b02e-c9f8644ce89c.png#align=left&amp;display=inline&amp;height=914&amp;name=image.png&amp;originHeight=914&amp;originWidth=1451&amp;size=106906&amp;status=done&amp;width=1451\" alt=\"image.png\"><br>选择需要安装的模块，点击继续<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474843163-6ad18e46-c3f1-4daa-8810-68d956649901.png#align=left&amp;display=inline&amp;height=840&amp;name=image.png&amp;originHeight=840&amp;originWidth=1431&amp;size=141716&amp;status=done&amp;width=1431\" alt=\"image.png\"><br>配置角色（各个主机需要安装的组件）<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557474977110-d9ba7095-a8eb-4c9d-b273-9750fb0596da.png#align=left&amp;display=inline&amp;height=397&amp;name=image.png&amp;originHeight=397&amp;originWidth=1701&amp;size=41273&amp;status=done&amp;width=1701\" alt=\"image.png\"><br>配置元数据库信息，点击测试连接（如果提示找不到数据库驱动，需要参考之前的文章 <a href=\"https://juejin.im/post/5cd4c949f265da03a158463a\" target=\"_blank\" rel=\"noopener\">017-Centos7.6+CDH 6.2 安装和使用</a>，安装驱动）<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557475069567-67acf641-1d6a-4d7d-a3a6-45a7845eb337.png#align=left&amp;display=inline&amp;height=805&amp;name=image.png&amp;originHeight=805&amp;originWidth=1443&amp;size=138020&amp;status=done&amp;width=1443\" alt=\"image.png\"><br>点击继续后，会显示安装进度。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557475628886-18547c11-a4b2-4f26-9132-29ad74f282aa.png#align=left&amp;display=inline&amp;height=906&amp;name=image.png&amp;originHeight=906&amp;originWidth=1440&amp;size=139785&amp;status=done&amp;width=1440\" alt=\"image.png\"><br>点击继续，则安装结束。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557475636171-04c27f36-723a-4eff-b461-f9407e2faef4.png#align=left&amp;display=inline&amp;height=322&amp;name=image.png&amp;originHeight=322&amp;originWidth=1213&amp;size=12755&amp;status=done&amp;width=1213\" alt=\"image.png\"></p>\n<p><a name=\"FeVsY\"></a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://juejin.im/post/5cc57a01f265da036c57929b\" target=\"_blank\" rel=\"noopener\">018-CDH6.2构建本地源加速CDH安装</a></li>\n<li><a href=\"https://github.com/ustclug/mirrorrequest/issues/56\" target=\"_blank\" rel=\"noopener\">ustclug/mirrorrequest#56</a></li>\n<li><a href=\"https://juejin.im/post/5cd4c949f265da03a158463a\" target=\"_blank\" rel=\"noopener\">017-Centos7.6+CDH 6.2 安装和使用</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"云原生时代如何方便的进行本地调试","date":"2019-01-21T04:00:00.000Z","_content":"\n云原生的四要素：持续交付、DevOps、微服务、容器，虽然极大的解放了生产力，但是不可避免的也带来了诸多问题，本文不做延伸，感兴趣的，可以自行百度。<br />本文只为解决微服务(本文以Spring Cloud为例)+Kubernetes开发调试低效问题。\n\n![07e15debbba7479aabef8f861f3ef5f4.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/226273/1548032278508-325e41b8-29f1-46de-b1a0-5a97e3de41e8.jpeg#align=left&display=inline&height=486&name=07e15debbba7479aabef8f861f3ef5f4.jpg&originHeight=704&originWidth=1080&size=72220&width=746)<br /><!-- more -->\n\n<a name=\"telepresence\"></a>\n## [telepresence](https://www.telepresence.io/)\n如果团队内成员都有k8s基础，并且都用win10或者linux,macos，那建议直接用telepresence,简单直接。详见 [Fast development workflow with Docker and Kubernetes](https://www.telepresence.io/tutorials/docker)，[A development workflow for Kubernetes services](https://articles.microservices.com/a-development-workflow-for-kubernetes-services-10ee017d752a)\n\n\n<a name=\"3e942e04\"></a>\n## Service映射\n如果团队内k8s基础弱，或者硬件条件不满足，可以使用Service映射方案，在k8s集群里创建一个Service和Endpoint，然后进行绑定。但是适用于单向的，比如，k8s访问外部mysql，如果要逆向访问，不好意思，不支持。\n\n<a name=\"93820fd3\"></a>\n## 静态路由\n[https://github.com/jkwong888/k8s-add-static-routes](https://github.com/jkwong888/k8s-add-static-routes)\n\n<a name=\"TDD\"></a>\n## TDD\n如果团队对于单院测试和Mock掌握的比较好，可以直接开启TDD模式，省事省心\n\n<a name=\"93f45b87\"></a>\n## 远程调试\nk8s集群暴露远程调试接口。[Remote debugging Spring Boot on Kubernetes](https://itnext.io/remote-debugging-spring-boot-on-kubernetes-a5f96a40e5c0)\n\n<a name=\"a7f0ffc1\"></a>\n## 开发机纳入集群\n应用发到本地pod里，省的走cicd那么费劲了\n\n<a name=\"86ad854d\"></a>\n## 热部署\n开发机纳入集群后，把target\\class挂载到本地卷，并且配置上rebel.xml，idea build后生成class，然后pod里触发jrebel的热部署。 参考 [https://www.telepresence.io/tutorials/java#hot-code-replace](https://www.telepresence.io/tutorials/java#hot-code-replace)\n\n","source":"_posts/debug-cloud-native.md","raw":"\n---\n\ntitle: 云原生时代如何方便的进行本地调试\n\ndate: 2019-01-21 12:00:00 +0800\n\ntags: [k8s,云原生,devops,微服务,容器,jrebel,telepresence]\n\ncategories: k8s\n\n---\n\n云原生的四要素：持续交付、DevOps、微服务、容器，虽然极大的解放了生产力，但是不可避免的也带来了诸多问题，本文不做延伸，感兴趣的，可以自行百度。<br />本文只为解决微服务(本文以Spring Cloud为例)+Kubernetes开发调试低效问题。\n\n![07e15debbba7479aabef8f861f3ef5f4.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/226273/1548032278508-325e41b8-29f1-46de-b1a0-5a97e3de41e8.jpeg#align=left&display=inline&height=486&name=07e15debbba7479aabef8f861f3ef5f4.jpg&originHeight=704&originWidth=1080&size=72220&width=746)<br /><!-- more -->\n\n<a name=\"telepresence\"></a>\n## [telepresence](https://www.telepresence.io/)\n如果团队内成员都有k8s基础，并且都用win10或者linux,macos，那建议直接用telepresence,简单直接。详见 [Fast development workflow with Docker and Kubernetes](https://www.telepresence.io/tutorials/docker)，[A development workflow for Kubernetes services](https://articles.microservices.com/a-development-workflow-for-kubernetes-services-10ee017d752a)\n\n\n<a name=\"3e942e04\"></a>\n## Service映射\n如果团队内k8s基础弱，或者硬件条件不满足，可以使用Service映射方案，在k8s集群里创建一个Service和Endpoint，然后进行绑定。但是适用于单向的，比如，k8s访问外部mysql，如果要逆向访问，不好意思，不支持。\n\n<a name=\"93820fd3\"></a>\n## 静态路由\n[https://github.com/jkwong888/k8s-add-static-routes](https://github.com/jkwong888/k8s-add-static-routes)\n\n<a name=\"TDD\"></a>\n## TDD\n如果团队对于单院测试和Mock掌握的比较好，可以直接开启TDD模式，省事省心\n\n<a name=\"93f45b87\"></a>\n## 远程调试\nk8s集群暴露远程调试接口。[Remote debugging Spring Boot on Kubernetes](https://itnext.io/remote-debugging-spring-boot-on-kubernetes-a5f96a40e5c0)\n\n<a name=\"a7f0ffc1\"></a>\n## 开发机纳入集群\n应用发到本地pod里，省的走cicd那么费劲了\n\n<a name=\"86ad854d\"></a>\n## 热部署\n开发机纳入集群后，把target\\class挂载到本地卷，并且配置上rebel.xml，idea build后生成class，然后pod里触发jrebel的热部署。 参考 [https://www.telepresence.io/tutorials/java#hot-code-replace](https://www.telepresence.io/tutorials/java#hot-code-replace)\n\n","slug":"debug-cloud-native","published":1,"updated":"2019-08-16T06:11:15.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojck000924dobnc4x5rq","content":"<p>云原生的四要素：持续交付、DevOps、微服务、容器，虽然极大的解放了生产力，但是不可避免的也带来了诸多问题，本文不做延伸，感兴趣的，可以自行百度。<br>本文只为解决微服务(本文以Spring Cloud为例)+Kubernetes开发调试低效问题。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/226273/1548032278508-325e41b8-29f1-46de-b1a0-5a97e3de41e8.jpeg#align=left&amp;display=inline&amp;height=486&amp;name=07e15debbba7479aabef8f861f3ef5f4.jpg&amp;originHeight=704&amp;originWidth=1080&amp;size=72220&amp;width=746\" alt=\"07e15debbba7479aabef8f861f3ef5f4.jpg\"><br><a id=\"more\"></a></p>\n<p><a name=\"telepresence\"></a></p>\n<h2 id=\"telepresence\"><a href=\"#telepresence\" class=\"headerlink\" title=\"telepresence\"></a><a href=\"https://www.telepresence.io/\" target=\"_blank\" rel=\"noopener\">telepresence</a></h2><p>如果团队内成员都有k8s基础，并且都用win10或者linux,macos，那建议直接用telepresence,简单直接。详见 <a href=\"https://www.telepresence.io/tutorials/docker\" target=\"_blank\" rel=\"noopener\">Fast development workflow with Docker and Kubernetes</a>，<a href=\"https://articles.microservices.com/a-development-workflow-for-kubernetes-services-10ee017d752a\" target=\"_blank\" rel=\"noopener\">A development workflow for Kubernetes services</a></p>\n<p><a name=\"3e942e04\"></a></p>\n<h2 id=\"Service映射\"><a href=\"#Service映射\" class=\"headerlink\" title=\"Service映射\"></a>Service映射</h2><p>如果团队内k8s基础弱，或者硬件条件不满足，可以使用Service映射方案，在k8s集群里创建一个Service和Endpoint，然后进行绑定。但是适用于单向的，比如，k8s访问外部mysql，如果要逆向访问，不好意思，不支持。</p>\n<p><a name=\"93820fd3\"></a></p>\n<h2 id=\"静态路由\"><a href=\"#静态路由\" class=\"headerlink\" title=\"静态路由\"></a>静态路由</h2><p><a href=\"https://github.com/jkwong888/k8s-add-static-routes\" target=\"_blank\" rel=\"noopener\">https://github.com/jkwong888/k8s-add-static-routes</a></p>\n<p><a name=\"TDD\"></a></p>\n<h2 id=\"TDD\"><a href=\"#TDD\" class=\"headerlink\" title=\"TDD\"></a>TDD</h2><p>如果团队对于单院测试和Mock掌握的比较好，可以直接开启TDD模式，省事省心</p>\n<p><a name=\"93f45b87\"></a></p>\n<h2 id=\"远程调试\"><a href=\"#远程调试\" class=\"headerlink\" title=\"远程调试\"></a>远程调试</h2><p>k8s集群暴露远程调试接口。<a href=\"https://itnext.io/remote-debugging-spring-boot-on-kubernetes-a5f96a40e5c0\" target=\"_blank\" rel=\"noopener\">Remote debugging Spring Boot on Kubernetes</a></p>\n<p><a name=\"a7f0ffc1\"></a></p>\n<h2 id=\"开发机纳入集群\"><a href=\"#开发机纳入集群\" class=\"headerlink\" title=\"开发机纳入集群\"></a>开发机纳入集群</h2><p>应用发到本地pod里，省的走cicd那么费劲了</p>\n<p><a name=\"86ad854d\"></a></p>\n<h2 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h2><p>开发机纳入集群后，把target\\class挂载到本地卷，并且配置上rebel.xml，idea build后生成class，然后pod里触发jrebel的热部署。 参考 <a href=\"https://www.telepresence.io/tutorials/java#hot-code-replace\" target=\"_blank\" rel=\"noopener\">https://www.telepresence.io/tutorials/java#hot-code-replace</a></p>\n","site":{"data":{}},"excerpt":"<p>云原生的四要素：持续交付、DevOps、微服务、容器，虽然极大的解放了生产力，但是不可避免的也带来了诸多问题，本文不做延伸，感兴趣的，可以自行百度。<br>本文只为解决微服务(本文以Spring Cloud为例)+Kubernetes开发调试低效问题。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/226273/1548032278508-325e41b8-29f1-46de-b1a0-5a97e3de41e8.jpeg#align=left&amp;display=inline&amp;height=486&amp;name=07e15debbba7479aabef8f861f3ef5f4.jpg&amp;originHeight=704&amp;originWidth=1080&amp;size=72220&amp;width=746\" alt=\"07e15debbba7479aabef8f861f3ef5f4.jpg\"><br>","more":"</p>\n<p><a name=\"telepresence\"></a></p>\n<h2 id=\"telepresence\"><a href=\"#telepresence\" class=\"headerlink\" title=\"telepresence\"></a><a href=\"https://www.telepresence.io/\" target=\"_blank\" rel=\"noopener\">telepresence</a></h2><p>如果团队内成员都有k8s基础，并且都用win10或者linux,macos，那建议直接用telepresence,简单直接。详见 <a href=\"https://www.telepresence.io/tutorials/docker\" target=\"_blank\" rel=\"noopener\">Fast development workflow with Docker and Kubernetes</a>，<a href=\"https://articles.microservices.com/a-development-workflow-for-kubernetes-services-10ee017d752a\" target=\"_blank\" rel=\"noopener\">A development workflow for Kubernetes services</a></p>\n<p><a name=\"3e942e04\"></a></p>\n<h2 id=\"Service映射\"><a href=\"#Service映射\" class=\"headerlink\" title=\"Service映射\"></a>Service映射</h2><p>如果团队内k8s基础弱，或者硬件条件不满足，可以使用Service映射方案，在k8s集群里创建一个Service和Endpoint，然后进行绑定。但是适用于单向的，比如，k8s访问外部mysql，如果要逆向访问，不好意思，不支持。</p>\n<p><a name=\"93820fd3\"></a></p>\n<h2 id=\"静态路由\"><a href=\"#静态路由\" class=\"headerlink\" title=\"静态路由\"></a>静态路由</h2><p><a href=\"https://github.com/jkwong888/k8s-add-static-routes\" target=\"_blank\" rel=\"noopener\">https://github.com/jkwong888/k8s-add-static-routes</a></p>\n<p><a name=\"TDD\"></a></p>\n<h2 id=\"TDD\"><a href=\"#TDD\" class=\"headerlink\" title=\"TDD\"></a>TDD</h2><p>如果团队对于单院测试和Mock掌握的比较好，可以直接开启TDD模式，省事省心</p>\n<p><a name=\"93f45b87\"></a></p>\n<h2 id=\"远程调试\"><a href=\"#远程调试\" class=\"headerlink\" title=\"远程调试\"></a>远程调试</h2><p>k8s集群暴露远程调试接口。<a href=\"https://itnext.io/remote-debugging-spring-boot-on-kubernetes-a5f96a40e5c0\" target=\"_blank\" rel=\"noopener\">Remote debugging Spring Boot on Kubernetes</a></p>\n<p><a name=\"a7f0ffc1\"></a></p>\n<h2 id=\"开发机纳入集群\"><a href=\"#开发机纳入集群\" class=\"headerlink\" title=\"开发机纳入集群\"></a>开发机纳入集群</h2><p>应用发到本地pod里，省的走cicd那么费劲了</p>\n<p><a name=\"86ad854d\"></a></p>\n<h2 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h2><p>开发机纳入集群后，把target\\class挂载到本地卷，并且配置上rebel.xml，idea build后生成class，然后pod里触发jrebel的热部署。 参考 <a href=\"https://www.telepresence.io/tutorials/java#hot-code-replace\" target=\"_blank\" rel=\"noopener\">https://www.telepresence.io/tutorials/java#hot-code-replace</a></p>"},{"title":"彻底解决docker build时安装软件失败问题","date":"2017-09-01T03:35:31.000Z","_content":"\n最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例\n\n失败日志如下\n\n```bash\nStep 4/6 : RUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories &&     apk update &&     apk add tzdata &&     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &&     echo \"Asia/Shanghai\" >  /etc/timezone &&     rm -rf /var/cache/apk/*\n ---> Running in bd5d1dfd3ff4\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz\nv3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]\nv3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]\nOK: 8440 distinct packages available\n(1/1) Installing tzdata (2017a-r0)\nERROR: tzdata-2017a-r0: temporary error (try again later)\n```\n\n\n为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区\n\n为了加速构建，替换为中科大的镜像地址\n\nDockerfile\n\n```Dockerfile\nFROM alpine\nRUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories && \\\n    apk update &&\\\n    apk --no-cache add tzdata && \\\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    echo \"Asia/Shanghai\" >  /etc/timezone\n```\n\n<!-- more -->\n\n其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo [anjia0532/alpine-package-mirror][] , [三种方法解决docker构建失败(alpine)][],但是都是时好时坏，严重影响效率。\n\n后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 `tcpdump` 进行进一步排查\n\n**note**\n\n为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)\n\n```bash\nsudo tcpdump -i docker0\n\n....\n\n10:47:43.038404 IP6 :: > ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28\n10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n10:47:43.114750 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114775 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114827 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.114833 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.209679 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)\n10:47:43.229261 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18687 0/1/0 (106)\n\n....\n```\n\n发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）\n\n>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).\n\n原文见官方文档 [Embedded DNS server in user-defined networks][linkEmbeddedDnsServerInUser-defined]\n\n两种方案，\n\n1. 修改宿主机的`hosts`文件，写死ip\n2. 修改Docker的`daemon.json`文件\n\n推荐用第二种，参考一下官方文档 [DAEMON CONFIGURATION FILE#On Linux][linkDaemonConfigurationFile#onLinux]\n\n更合理的方案是修改docker的daemon.json `sudo vi /etc/docker/daemon.json`\n\n比如改成dnspod dns\n\n增加 `\"dns\": [\"119.29.29.29\"]`\n\n然后`sudo systemctl daemon-reload`\n\n```bash\n11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n11:14:17.586581 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)\n11:14:17.586604 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)\n11:14:17.777921 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53868 0/1/0 (106)\n11:14:17.843875 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)\n11:14:17.844028 IP 172.17.0.2.36810 > 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0\n```\n\n整个过程可参见我在中科大 github的issues [alpine 镜像频繁异常][linkAlpine镜像频繁异常]\n\n博客 [https://anjia.ml/2017/09/01/docker-dns/][blog]\n掘金 [https://juejin.im/post/59a8f9e0f265da24797b7da0][juejin]\n简书 [http://www.jianshu.com/p/1f4e62dff251][jianshu]\n\n[blog]: https://anjia.ml/2017/09/01/docker-dns/\n[juejin]: https://juejin.im/post/59a8f9e0f265da24797b7da0\n[jianshu]: http://www.jianshu.com/p/1f4e62dff251\n[anjia0532/alpine-package-mirror]: https://github.com/anjia0532/alpine-package-mirror\n[linkDaemonConfigurationFile#onLinux]: https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\n[linkEmbeddedDnsServerInUser-defined]: https://docs.docker.com/engine/userguide/networking/configure-dns/\n[linkAlpine镜像频繁异常]: https://github.com/ustclug/discussions/issues/166\n[三种方法解决docker构建失败(alpine)]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n","source":"_posts/docker-dns.md","raw":"---\ntitle: 彻底解决docker build时安装软件失败问题\ndate: 2017-09-01 11:35:31\ntags: [docker]\n---\n\n最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例\n\n失败日志如下\n\n```bash\nStep 4/6 : RUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories &&     apk update &&     apk add tzdata &&     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &&     echo \"Asia/Shanghai\" >  /etc/timezone &&     rm -rf /var/cache/apk/*\n ---> Running in bd5d1dfd3ff4\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz\nfetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz\nv3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]\nv3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]\nOK: 8440 distinct packages available\n(1/1) Installing tzdata (2017a-r0)\nERROR: tzdata-2017a-r0: temporary error (try again later)\n```\n\n\n为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区\n\n为了加速构建，替换为中科大的镜像地址\n\nDockerfile\n\n```Dockerfile\nFROM alpine\nRUN echo -e \"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\" > /etc/apk/repositories && \\\n    apk update &&\\\n    apk --no-cache add tzdata && \\\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    echo \"Asia/Shanghai\" >  /etc/timezone\n```\n\n<!-- more -->\n\n其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo [anjia0532/alpine-package-mirror][] , [三种方法解决docker构建失败(alpine)][],但是都是时好时坏，严重影响效率。\n\n后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 `tcpdump` 进行进一步排查\n\n**note**\n\n为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)\n\n```bash\nsudo tcpdump -i docker0\n\n....\n\n10:47:43.038404 IP6 :: > ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28\n10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n10:47:43.114750 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114775 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)\n10:47:43.114827 IP 172.17.0.2.48223 > google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.114833 IP 172.17.0.2.48223 > google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)\n10:47:43.209679 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)\n10:47:43.229261 IP google-public-dns-a.google.com.domain > 172.17.0.2.48223: 18687 0/1/0 (106)\n\n....\n```\n\n发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）\n\n>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).\n\n原文见官方文档 [Embedded DNS server in user-defined networks][linkEmbeddedDnsServerInUser-defined]\n\n两种方案，\n\n1. 修改宿主机的`hosts`文件，写死ip\n2. 修改Docker的`daemon.json`文件\n\n推荐用第二种，参考一下官方文档 [DAEMON CONFIGURATION FILE#On Linux][linkDaemonConfigurationFile#onLinux]\n\n更合理的方案是修改docker的daemon.json `sudo vi /etc/docker/daemon.json`\n\n比如改成dnspod dns\n\n增加 `\"dns\": [\"119.29.29.29\"]`\n\n然后`sudo systemctl daemon-reload`\n\n```bash\n11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28\n11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28\n11:14:17.586581 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)\n11:14:17.586604 IP 172.17.0.2.43273 > pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)\n11:14:17.777921 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53868 0/1/0 (106)\n11:14:17.843875 IP pdns.dnspod.cn.domain > 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)\n11:14:17.844028 IP 172.17.0.2.36810 > 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0\n```\n\n整个过程可参见我在中科大 github的issues [alpine 镜像频繁异常][linkAlpine镜像频繁异常]\n\n博客 [https://anjia.ml/2017/09/01/docker-dns/][blog]\n掘金 [https://juejin.im/post/59a8f9e0f265da24797b7da0][juejin]\n简书 [http://www.jianshu.com/p/1f4e62dff251][jianshu]\n\n[blog]: https://anjia.ml/2017/09/01/docker-dns/\n[juejin]: https://juejin.im/post/59a8f9e0f265da24797b7da0\n[jianshu]: http://www.jianshu.com/p/1f4e62dff251\n[anjia0532/alpine-package-mirror]: https://github.com/anjia0532/alpine-package-mirror\n[linkDaemonConfigurationFile#onLinux]: https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\n[linkEmbeddedDnsServerInUser-defined]: https://docs.docker.com/engine/userguide/networking/configure-dns/\n[linkAlpine镜像频繁异常]: https://github.com/ustclug/discussions/issues/166\n[三种方法解决docker构建失败(alpine)]: https://anjia.ml/2017/08/23/alpine-mirror-server/\n","slug":"docker-dns","published":1,"updated":"2019-08-16T05:56:21.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojco000c24doikxidgv2","content":"<p>最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例</p>\n<p>失败日志如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Step 4/6 : RUN <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp;     apk update &amp;&amp;     apk add tzdata &amp;&amp;     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone &amp;&amp;     rm -rf /var/cache/apk/*</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd5d1dfd3ff4</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">v3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]</span><br><span class=\"line\">v3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]</span><br><span class=\"line\">OK: 8440 distinct packages available</span><br><span class=\"line\">(1/1) Installing tzdata (2017a-r0)</span><br><span class=\"line\">ERROR: tzdata-2017a-r0: temporary error (try again later)</span><br></pre></td></tr></table></figure>\n<p>为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区</p>\n<p>为了加速构建，替换为中科大的镜像地址</p>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    apk update &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    apk --no-cache add tzdata &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a> , <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\" target=\"_blank\" rel=\"noopener\">三种方法解决docker构建失败(alpine)</a>,但是都是时好时坏，严重影响效率。</p>\n<p>后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 <code>tcpdump</code> 进行进一步排查</p>\n<p><strong>note</strong></p>\n<p>为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -i docker0</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">10:47:43.038404 IP6 :: &gt; ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28</span><br><span class=\"line\">10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">10:47:43.114750 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114775 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114827 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114833 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.209679 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">10:47:43.229261 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18687 0/1/0 (106)</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）</p>\n<blockquote>\n<p>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).</p>\n</blockquote>\n<p>原文见官方文档 <a href=\"https://docs.docker.com/engine/userguide/networking/configure-dns/\" target=\"_blank\" rel=\"noopener\">Embedded DNS server in user-defined networks</a></p>\n<p>两种方案，</p>\n<ol>\n<li>修改宿主机的<code>hosts</code>文件，写死ip</li>\n<li>修改Docker的<code>daemon.json</code>文件</li>\n</ol>\n<p>推荐用第二种，参考一下官方文档 <a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\" target=\"_blank\" rel=\"noopener\">DAEMON CONFIGURATION FILE#On Linux</a></p>\n<p>更合理的方案是修改docker的daemon.json <code>sudo vi /etc/docker/daemon.json</code></p>\n<p>比如改成dnspod dns</p>\n<p>增加 <code>&quot;dns&quot;: [&quot;119.29.29.29&quot;]</code></p>\n<p>然后<code>sudo systemctl daemon-reload</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">11:14:17.586581 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.586604 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.777921 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53868 0/1/0 (106)</span><br><span class=\"line\">11:14:17.843875 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">11:14:17.844028 IP 172.17.0.2.36810 &gt; 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0</span><br></pre></td></tr></table></figure>\n<p>整个过程可参见我在中科大 github的issues <a href=\"https://github.com/ustclug/discussions/issues/166\" target=\"_blank\" rel=\"noopener\">alpine 镜像频繁异常</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/09/01/docker-dns/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/09/01/docker-dns/</a><br>掘金 <a href=\"https://juejin.im/post/59a8f9e0f265da24797b7da0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59a8f9e0f265da24797b7da0</a><br>简书 <a href=\"http://www.jianshu.com/p/1f4e62dff251\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1f4e62dff251</a></p>\n","site":{"data":{}},"excerpt":"<p>最近遇到一个问题，构建Dockerfile镜像时，如果安装软件，有一定概率失败(2%-10%)。以alpine为例</p>\n<p>失败日志如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Step 4/6 : RUN <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp;     apk update &amp;&amp;     apk add tzdata &amp;&amp;     cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone &amp;&amp;     rm -rf /var/cache/apk/*</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd5d1dfd3ff4</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://mirrors.ustc.edu.cn/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">v3.6.2-83-g1079181bed [https://mirrors.ustc.edu.cn/alpine/latest-stable/main]</span><br><span class=\"line\">v3.6.2-84-g6ee501e465 [https://mirrors.ustc.edu.cn/alpine/latest-stable/community]</span><br><span class=\"line\">OK: 8440 distinct packages available</span><br><span class=\"line\">(1/1) Installing tzdata (2017a-r0)</span><br><span class=\"line\">ERROR: tzdata-2017a-r0: temporary error (try again later)</span><br></pre></td></tr></table></figure>\n<p>为了重现该问题，简单的构建一个Docker 镜像，基于alpine，安装tzdata，并设置北京时区</p>\n<p>为了加速构建，替换为中科大的镜像地址</p>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community\"</span> &gt; /etc/apk/repositories &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    apk update &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    apk --no-cache add tzdata &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Asia/Shanghai\"</span> &gt;  /etc/timezone</span></span><br></pre></td></tr></table></figure>","more":"<p>其实一开始没有用国内源，用的官方，但是经常失败，以为是墙的问题，辗转换过阿里云镜像，清华镜像，中科大镜像，甚至后来自建镜像 github repo <a href=\"https://github.com/anjia0532/alpine-package-mirror\" target=\"_blank\" rel=\"noopener\">anjia0532/alpine-package-mirror</a> , <a href=\"https://anjia.ml/2017/08/23/alpine-mirror-server/\" target=\"_blank\" rel=\"noopener\">三种方法解决docker构建失败(alpine)</a>,但是都是时好时坏，严重影响效率。</p>\n<p>后来在观察nginx访问日志的时候，报错的时候nginx没有产生访问日志，遂怀疑是构建镜像时没有发出网络请求，祭出神器 <code>tcpdump</code> 进行进一步排查</p>\n<p><strong>note</strong></p>\n<p>为了减少干扰，实验机器中，没有其他docker服务在跑(否则tcp请求太多)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -i docker0</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">10:47:43.038404 IP6 :: &gt; ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28</span><br><span class=\"line\">10:47:43.114734 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">10:47:43.114746 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">10:47:43.114750 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114775 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18503+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114827 IP 172.17.0.2.48223 &gt; google-public-dns-a.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.114833 IP 172.17.0.2.48223 &gt; google-public-dns-b.google.com.domain: 18687+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">10:47:43.209679 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18503 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">10:47:43.229261 IP google-public-dns-a.google.com.domain &gt; 172.17.0.2.48223: 18687 0/1/0 (106)</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>发现在构建的时候，是走的google的dns进行解析的，因为众多不可描述的问题，google在国内基本是瘫痪状态（google翻译例外）</p>\n<blockquote>\n<p>Filtering is necessary because all localhost addresses on the host are unreachable from the container’s network. After this filtering, if there are no more nameserver entries left in the container’s /etc/resolv.conf file, the daemon adds public Google DNS nameservers (8.8.8.8 and 8.8.4.4) to the container’s DNS configuration. If IPv6 is enabled on the daemon, the public IPv6 Google DNS nameservers will also be added (2001:4860:4860::8888 and 2001:4860:4860::8844).</p>\n</blockquote>\n<p>原文见官方文档 <a href=\"https://docs.docker.com/engine/userguide/networking/configure-dns/\" target=\"_blank\" rel=\"noopener\">Embedded DNS server in user-defined networks</a></p>\n<p>两种方案，</p>\n<ol>\n<li>修改宿主机的<code>hosts</code>文件，写死ip</li>\n<li>修改Docker的<code>daemon.json</code>文件</li>\n</ol>\n<p>推荐用第二种，参考一下官方文档 <a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux\" target=\"_blank\" rel=\"noopener\">DAEMON CONFIGURATION FILE#On Linux</a></p>\n<p>更合理的方案是修改docker的daemon.json <code>sudo vi /etc/docker/daemon.json</code></p>\n<p>比如改成dnspod dns</p>\n<p>增加 <code>&quot;dns&quot;: [&quot;119.29.29.29&quot;]</code></p>\n<p>然后<code>sudo systemctl daemon-reload</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:14:17.586559 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28</span><br><span class=\"line\">11:14:17.586577 ARP, Reply 172.17.0.1 is-at 02:42:30:19:53:45 (oui Unknown), length 28</span><br><span class=\"line\">11:14:17.586581 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53616+ A? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.586604 IP 172.17.0.2.43273 &gt; pdns.dnspod.cn.domain: 53868+ AAAA? alpine.xxx.com. (39)</span><br><span class=\"line\">11:14:17.777921 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53868 0/1/0 (106)</span><br><span class=\"line\">11:14:17.843875 IP pdns.dnspod.cn.domain &gt; 172.17.0.2.43273: 53616 1/0/0 A 172.60.20.6 (55)</span><br><span class=\"line\">11:14:17.844028 IP 172.17.0.2.36810 &gt; 172.60.20.6.http: Flags [S], seq 4032628285, win 42340, options [mss 1460,sackOK,TS val 1959807306 ecr 0,nop,wscale 11], length 0</span><br></pre></td></tr></table></figure>\n<p>整个过程可参见我在中科大 github的issues <a href=\"https://github.com/ustclug/discussions/issues/166\" target=\"_blank\" rel=\"noopener\">alpine 镜像频繁异常</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/09/01/docker-dns/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/09/01/docker-dns/</a><br>掘金 <a href=\"https://juejin.im/post/59a8f9e0f265da24797b7da0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59a8f9e0f265da24797b7da0</a><br>简书 <a href=\"http://www.jianshu.com/p/1f4e62dff251\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1f4e62dff251</a></p>"},{"title":"012-P2P加速Docker镜像分发(阿里Dragonfly)","date":"2019-03-25T08:58:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第12篇，定个小目标999，每周最少2篇。\n\n\n吐槽一下，最近有点懒，居然欠了4篇，后续会慢慢补上。\n\n<a name=\"61a3ec66\"></a>\n## 介绍\n如果说，微服务和容器是最佳拍档，那么模块多实例是肯定少不了。<br />假如没有使用类似 [Google jib](https://github.com/GoogleContainerTools/jib) 等手段进行镜像分层（利用镜像缓存），势必会造成\n\n- 带宽浪费：尤其是公网带宽，如果是自建harbor，那么会容易导致单节点网卡被打满，如果用了harbor联邦，又会导致数据同步等运维问题。\n- 集群拉起慢：镜像下载慢，必然会导致服务拉起慢。\n\n关于Google jib可以参见我另外一篇 [加速和简化构建Docker(基于Google jib)](https://juejin.im/post/5c60c021f265da2dd37bf85b) ，本文只介绍 Dragonfly + dfdaemon \n\nDragonfly是阿里巴巴自研并开源的一款基于P2P协议的文件分发系统。除了使用 dfget 进行文件下载外，还支持dfdaemon 进行docker镜像下载。\n\n关于Dragonfly的镜像分发的原理性说明，可参见 [直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”](https://yq.aliyun.com/articles/244897) ，文中介绍很详细，此处不多说明。\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n### 实验环境\n\n| 类型 | 系统 | ip | docker version |\n| --- | --- | --- | --- |\n| supernode | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.44 | 17.06.2~ce-0~ubuntu |\n| clinet1 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.40 | 17.06.2~ce-0~ubuntu |\n| clinet2 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.45 | 17.06.2~ce-0~ubuntu |\n\n\n**注意：** <br />如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费\n\n安装\n\n吐槽一下Dragonfly的文档，简直让人不知所以。结合issues + 钉钉群内请教，遂整理出最简使用文档。\n<a name=\"supernode\"></a>\n### supernode\n可选：给supernode增加docker加速器，可以参考 https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors ，如果不需要，可以去掉。\n```bash\n$ cat <<EOD >/etc/docker/daemon.json\n{\n\"registry-mirrors\": [\"https://xxxx.mirror.aliyuncs.com\"] \n}\nEOD\n$ systemctl restart docker \n```\n\n```bash\n$ docker run --name dragonfly-supernode --restart=always -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=192.168.0.44\n```\n\n**说明：**\n\n- --restart=always 在容器退出时，自动重启容器，防止异常kill或者oom导致的异常退出\n- registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 dragonfly的supernode目前没有docker hub镜像，只能用阿里云的\n- -v /data/dragonfly/supernode:/home/admin/supernode 将supernode的data dir挂载到宿主机上\n- -Dsupernode.advertiseIp=192.168.0.44 设置clinet可以访问的supernode ip,这是一个大坑。如果不设置，有可能会导致client无法连接supernode，届时，docker pull会走clinet的网络，从真实的registry直接下载镜像\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553506862485-080cc522-2d28-47b9-8d6b-3db34db173f3.png#align=left&display=inline&height=624&name=image.png&originHeight=624&originWidth=725&size=90024&status=done&width=725)\n<a name=\"752efc6a\"></a>\n### dfdaemon \n\n```bash\n$ cat <<EOD >/etc/dragonfly.conf\n[node]\naddress=192.168.0.44\nEOD\n$ docker run --name dragonfly-dfclient --restart=always -d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 --registry=https://xxx.mirror.aliyuncs.com  --ratelimit 100M\n$ cat <<EOD >/etc/docker/daemon.json\n{\n\"registry-mirrors\": [\"http://127.0.0.1:65001\"]\n}\nEOD\n$ systemctl restart docker \n```\n\n**说明：** \n\n- 在 /etc/dragonfly.conf 中配置client可以访问的supernode的ip地址，但是，目前官方没有做HA，supernode没法组集群，撑死算是联邦，不能共享文件信息，而且最坑的是，快速开始里，中英文均未提供需要配置此文件，而是在 [Downloading Files with Dragonfly](https://d7y.io/en-us/docs/userguide/download_files.html) 等有所提及（我都是被坑完后，用关键词在d7y的org里搜索，类似知道答案后，找出处 手动[捂脸]）\n- -v /root/.small-dragonfly:/root/.small-dragonfly ,将容器中的关键目录挂载到宿主机上，防止重启或者镜像升级时，数据丢失\n- --registry=https://xxx.mirror.aliyuncs.com 从何处下载镜像，可以写harbor地址，也可以写加速器地址。默认是 [https://index.docker.io](https://index.docker.io) ，但是，因为国内网络原因，会导致大概率性失败。很灵异。而官方文档是写的 `--registry https://xxx.xx.x` 不能算是坑，但是，对于docker不熟悉的，往往会不知能不能用加速器。\n- --ratelimit 100M 是限速，默认是20M ,这肯定不算坑哈，这是正常特性，在  [dfdaemon#Options](https://d7y.io/zh-cn/docs/quickstart.html) 有说明，但是，文档是有误的 `-ratelimit` 而实际是 `--ratelimit` ,如果不改此参数，会发现，下载很慢。\n- 修改/etc/docker/daemon.json 是为了让docker engine走 dfdaemon\n- systemctl restart docker 是为了让daemon生效\n\n<a name=\"db06c78d\"></a>\n## 测试\n<a name=\"4a76b96e\"></a>\n### 大文件测试\n\n```bash\n$ docker pull anjia0532/kubeflow-images-public.tensorflow-1.6.0-notebook-gpu:v20180604-b3733835\n```\n可以通过 `iftop` 等软件，查看带宽使用情况判断是否生效，也可以通过查看日志来判断。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553508378817-cde03b19-e0e2-4d03-a233-b9090cc0db2f.png#align=left&display=inline&height=821&name=image.png&originHeight=821&originWidth=1911&size=46951&status=done&width=1911)<br />但是会经常性的出现 `error pulling image configuration: received unexpected HTTP status: 502 Bad Gateway` \n\n<a name=\"9415a826\"></a>\n## 最后\n需要结合实际情况，配置相关参数，比如，文件失效时间，用来平衡文件有效期及磁盘使用量。\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”](https://yq.aliyun.com/articles/244897)\n- [深度解读阿里巴巴云原生镜像分发系统 Dragonfly](https://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==∣=2247484045&idx=1&sn=2e4586171930b8d3080eadd55be09723)\n- [Dragonfly Quick Start](https://d7y.io/en-us/docs/quickstart.html)\n- [加速和简化构建Docker(基于Google jib)](https://juejin.im/post/5c60c021f265da2dd37bf85b)\n- [浙江移动容器云基于 Dragonfly 的统一文件分发平台生产实践](https://d7y.io/zh-cn/blog/china-mobile-practice.html)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/dragonfly.md","raw":"\n---\n\ntitle: 012-P2P加速Docker镜像分发(阿里Dragonfly)\n\ndate: 2019-03-25 16:58:00 +0800\n\ntags: [docker,k8s,kubernetes,alibaba,Dragonfly]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第12篇，定个小目标999，每周最少2篇。\n\n\n吐槽一下，最近有点懒，居然欠了4篇，后续会慢慢补上。\n\n<a name=\"61a3ec66\"></a>\n## 介绍\n如果说，微服务和容器是最佳拍档，那么模块多实例是肯定少不了。<br />假如没有使用类似 [Google jib](https://github.com/GoogleContainerTools/jib) 等手段进行镜像分层（利用镜像缓存），势必会造成\n\n- 带宽浪费：尤其是公网带宽，如果是自建harbor，那么会容易导致单节点网卡被打满，如果用了harbor联邦，又会导致数据同步等运维问题。\n- 集群拉起慢：镜像下载慢，必然会导致服务拉起慢。\n\n关于Google jib可以参见我另外一篇 [加速和简化构建Docker(基于Google jib)](https://juejin.im/post/5c60c021f265da2dd37bf85b) ，本文只介绍 Dragonfly + dfdaemon \n\nDragonfly是阿里巴巴自研并开源的一款基于P2P协议的文件分发系统。除了使用 dfget 进行文件下载外，还支持dfdaemon 进行docker镜像下载。\n\n关于Dragonfly的镜像分发的原理性说明，可参见 [直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”](https://yq.aliyun.com/articles/244897) ，文中介绍很详细，此处不多说明。\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n### 实验环境\n\n| 类型 | 系统 | ip | docker version |\n| --- | --- | --- | --- |\n| supernode | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.44 | 17.06.2~ce-0~ubuntu |\n| clinet1 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.40 | 17.06.2~ce-0~ubuntu |\n| clinet2 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.45 | 17.06.2~ce-0~ubuntu |\n\n\n**注意：** <br />如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费\n\n安装\n\n吐槽一下Dragonfly的文档，简直让人不知所以。结合issues + 钉钉群内请教，遂整理出最简使用文档。\n<a name=\"supernode\"></a>\n### supernode\n可选：给supernode增加docker加速器，可以参考 https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors ，如果不需要，可以去掉。\n```bash\n$ cat <<EOD >/etc/docker/daemon.json\n{\n\"registry-mirrors\": [\"https://xxxx.mirror.aliyuncs.com\"] \n}\nEOD\n$ systemctl restart docker \n```\n\n```bash\n$ docker run --name dragonfly-supernode --restart=always -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=192.168.0.44\n```\n\n**说明：**\n\n- --restart=always 在容器退出时，自动重启容器，防止异常kill或者oom导致的异常退出\n- registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 dragonfly的supernode目前没有docker hub镜像，只能用阿里云的\n- -v /data/dragonfly/supernode:/home/admin/supernode 将supernode的data dir挂载到宿主机上\n- -Dsupernode.advertiseIp=192.168.0.44 设置clinet可以访问的supernode ip,这是一个大坑。如果不设置，有可能会导致client无法连接supernode，届时，docker pull会走clinet的网络，从真实的registry直接下载镜像\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553506862485-080cc522-2d28-47b9-8d6b-3db34db173f3.png#align=left&display=inline&height=624&name=image.png&originHeight=624&originWidth=725&size=90024&status=done&width=725)\n<a name=\"752efc6a\"></a>\n### dfdaemon \n\n```bash\n$ cat <<EOD >/etc/dragonfly.conf\n[node]\naddress=192.168.0.44\nEOD\n$ docker run --name dragonfly-dfclient --restart=always -d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 --registry=https://xxx.mirror.aliyuncs.com  --ratelimit 100M\n$ cat <<EOD >/etc/docker/daemon.json\n{\n\"registry-mirrors\": [\"http://127.0.0.1:65001\"]\n}\nEOD\n$ systemctl restart docker \n```\n\n**说明：** \n\n- 在 /etc/dragonfly.conf 中配置client可以访问的supernode的ip地址，但是，目前官方没有做HA，supernode没法组集群，撑死算是联邦，不能共享文件信息，而且最坑的是，快速开始里，中英文均未提供需要配置此文件，而是在 [Downloading Files with Dragonfly](https://d7y.io/en-us/docs/userguide/download_files.html) 等有所提及（我都是被坑完后，用关键词在d7y的org里搜索，类似知道答案后，找出处 手动[捂脸]）\n- -v /root/.small-dragonfly:/root/.small-dragonfly ,将容器中的关键目录挂载到宿主机上，防止重启或者镜像升级时，数据丢失\n- --registry=https://xxx.mirror.aliyuncs.com 从何处下载镜像，可以写harbor地址，也可以写加速器地址。默认是 [https://index.docker.io](https://index.docker.io) ，但是，因为国内网络原因，会导致大概率性失败。很灵异。而官方文档是写的 `--registry https://xxx.xx.x` 不能算是坑，但是，对于docker不熟悉的，往往会不知能不能用加速器。\n- --ratelimit 100M 是限速，默认是20M ,这肯定不算坑哈，这是正常特性，在  [dfdaemon#Options](https://d7y.io/zh-cn/docs/quickstart.html) 有说明，但是，文档是有误的 `-ratelimit` 而实际是 `--ratelimit` ,如果不改此参数，会发现，下载很慢。\n- 修改/etc/docker/daemon.json 是为了让docker engine走 dfdaemon\n- systemctl restart docker 是为了让daemon生效\n\n<a name=\"db06c78d\"></a>\n## 测试\n<a name=\"4a76b96e\"></a>\n### 大文件测试\n\n```bash\n$ docker pull anjia0532/kubeflow-images-public.tensorflow-1.6.0-notebook-gpu:v20180604-b3733835\n```\n可以通过 `iftop` 等软件，查看带宽使用情况判断是否生效，也可以通过查看日志来判断。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553508378817-cde03b19-e0e2-4d03-a233-b9090cc0db2f.png#align=left&display=inline&height=821&name=image.png&originHeight=821&originWidth=1911&size=46951&status=done&width=1911)<br />但是会经常性的出现 `error pulling image configuration: received unexpected HTTP status: 502 Bad Gateway` \n\n<a name=\"9415a826\"></a>\n## 最后\n需要结合实际情况，配置相关参数，比如，文件失效时间，用来平衡文件有效期及磁盘使用量。\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”](https://yq.aliyun.com/articles/244897)\n- [深度解读阿里巴巴云原生镜像分发系统 Dragonfly](https://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==∣=2247484045&idx=1&sn=2e4586171930b8d3080eadd55be09723)\n- [Dragonfly Quick Start](https://d7y.io/en-us/docs/quickstart.html)\n- [加速和简化构建Docker(基于Google jib)](https://juejin.im/post/5c60c021f265da2dd37bf85b)\n- [浙江移动容器云基于 Dragonfly 的统一文件分发平台生产实践](https://d7y.io/zh-cn/blog/china-mobile-practice.html)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"dragonfly","published":1,"updated":"2019-08-16T06:11:15.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojcq000d24do3fky3nvu","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第12篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>吐槽一下，最近有点懒，居然欠了4篇，后续会慢慢补上。</p>\n<p><a name=\"61a3ec66\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果说，微服务和容器是最佳拍档，那么模块多实例是肯定少不了。<br>假如没有使用类似 <a href=\"https://github.com/GoogleContainerTools/jib\" target=\"_blank\" rel=\"noopener\">Google jib</a> 等手段进行镜像分层（利用镜像缓存），势必会造成</p>\n<ul>\n<li>带宽浪费：尤其是公网带宽，如果是自建harbor，那么会容易导致单节点网卡被打满，如果用了harbor联邦，又会导致数据同步等运维问题。</li>\n<li>集群拉起慢：镜像下载慢，必然会导致服务拉起慢。</li>\n</ul>\n<p>关于Google jib可以参见我另外一篇 <a href=\"https://juejin.im/post/5c60c021f265da2dd37bf85b\" target=\"_blank\" rel=\"noopener\">加速和简化构建Docker(基于Google jib)</a> ，本文只介绍 Dragonfly + dfdaemon </p>\n<p>Dragonfly是阿里巴巴自研并开源的一款基于P2P协议的文件分发系统。除了使用 dfget 进行文件下载外，还支持dfdaemon 进行docker镜像下载。</p>\n<p>关于Dragonfly的镜像分发的原理性说明，可参见 <a href=\"https://yq.aliyun.com/articles/244897\" target=\"_blank\" rel=\"noopener\">直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”</a> ，文中介绍很详细，此处不多说明。</p>\n<a id=\"more\"></a>\n<p><a name=\"12267079\"></a></p>\n<h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>系统</th>\n<th>ip</th>\n<th>docker version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>supernode</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.44</td>\n<td>17.06.2~ce-0~ubuntu</td>\n</tr>\n<tr>\n<td>clinet1</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.40</td>\n<td>17.06.2~ce-0~ubuntu</td>\n</tr>\n<tr>\n<td>clinet2</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.45</td>\n<td>17.06.2~ce-0~ubuntu</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong> <br>如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费</p>\n<p>安装</p>\n<p>吐槽一下Dragonfly的文档，简直让人不知所以。结合issues + 钉钉群内请教，遂整理出最简使用文档。<br><a name=\"supernode\"></a></p>\n<h3 id=\"supernode\"><a href=\"#supernode\" class=\"headerlink\" title=\"supernode\"></a>supernode</h3><p>可选：给supernode增加docker加速器，可以参考 <a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a> ，如果不需要，可以去掉。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOD &gt;/etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://xxxx.mirror.aliyuncs.com\"</span>] </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run --name dragonfly-supernode --restart=always -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=192.168.0.44</span><br></pre></td></tr></table></figure>\n<p><strong>说明：</strong></p>\n<ul>\n<li>–restart=always 在容器退出时，自动重启容器，防止异常kill或者oom导致的异常退出</li>\n<li>registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 dragonfly的supernode目前没有docker hub镜像，只能用阿里云的</li>\n<li>-v /data/dragonfly/supernode:/home/admin/supernode 将supernode的data dir挂载到宿主机上</li>\n<li>-Dsupernode.advertiseIp=192.168.0.44 设置clinet可以访问的supernode ip,这是一个大坑。如果不设置，有可能会导致client无法连接supernode，届时，docker pull会走clinet的网络，从真实的registry直接下载镜像</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553506862485-080cc522-2d28-47b9-8d6b-3db34db173f3.png#align=left&amp;display=inline&amp;height=624&amp;name=image.png&amp;originHeight=624&amp;originWidth=725&amp;size=90024&amp;status=done&amp;width=725\" alt=\"image.png\"><br><a name=\"752efc6a\"></a></p>\n<h3 id=\"dfdaemon\"><a href=\"#dfdaemon\" class=\"headerlink\" title=\"dfdaemon\"></a>dfdaemon</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOD &gt;/etc/dragonfly.conf</span><br><span class=\"line\">[node]</span><br><span class=\"line\">address=192.168.0.44</span><br><span class=\"line\">EOD</span><br><span class=\"line\">$ docker run --name dragonfly-dfclient --restart=always -d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 --registry=https://xxx.mirror.aliyuncs.com  --ratelimit 100M</span><br><span class=\"line\">$ cat &lt;&lt;EOD &gt;/etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://127.0.0.1:65001\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p><strong>说明：</strong> </p>\n<ul>\n<li>在 /etc/dragonfly.conf 中配置client可以访问的supernode的ip地址，但是，目前官方没有做HA，supernode没法组集群，撑死算是联邦，不能共享文件信息，而且最坑的是，快速开始里，中英文均未提供需要配置此文件，而是在 <a href=\"https://d7y.io/en-us/docs/userguide/download_files.html\" target=\"_blank\" rel=\"noopener\">Downloading Files with Dragonfly</a> 等有所提及（我都是被坑完后，用关键词在d7y的org里搜索，类似知道答案后，找出处 手动[捂脸]）</li>\n<li>-v /root/.small-dragonfly:/root/.small-dragonfly ,将容器中的关键目录挂载到宿主机上，防止重启或者镜像升级时，数据丢失</li>\n<li>–registry=<a href=\"https://xxx.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://xxx.mirror.aliyuncs.com</a> 从何处下载镜像，可以写harbor地址，也可以写加速器地址。默认是 <a href=\"https://index.docker.io\" target=\"_blank\" rel=\"noopener\">https://index.docker.io</a> ，但是，因为国内网络原因，会导致大概率性失败。很灵异。而官方文档是写的 <code>--registry https://xxx.xx.x</code> 不能算是坑，但是，对于docker不熟悉的，往往会不知能不能用加速器。</li>\n<li>–ratelimit 100M 是限速，默认是20M ,这肯定不算坑哈，这是正常特性，在  <a href=\"https://d7y.io/zh-cn/docs/quickstart.html\" target=\"_blank\" rel=\"noopener\">dfdaemon#Options</a> 有说明，但是，文档是有误的 <code>-ratelimit</code> 而实际是 <code>--ratelimit</code> ,如果不改此参数，会发现，下载很慢。</li>\n<li>修改/etc/docker/daemon.json 是为了让docker engine走 dfdaemon</li>\n<li>systemctl restart docker 是为了让daemon生效</li>\n</ul>\n<p><a name=\"db06c78d\"></a></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><a name=\"4a76b96e\"></a></p>\n<h3 id=\"大文件测试\"><a href=\"#大文件测试\" class=\"headerlink\" title=\"大文件测试\"></a>大文件测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker pull anjia0532/kubeflow-images-public.tensorflow-1.6.0-notebook-gpu:v20180604-b3733835</span><br></pre></td></tr></table></figure>\n<p>可以通过 <code>iftop</code> 等软件，查看带宽使用情况判断是否生效，也可以通过查看日志来判断。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553508378817-cde03b19-e0e2-4d03-a233-b9090cc0db2f.png#align=left&amp;display=inline&amp;height=821&amp;name=image.png&amp;originHeight=821&amp;originWidth=1911&amp;size=46951&amp;status=done&amp;width=1911\" alt=\"image.png\"><br>但是会经常性的出现 <code>error pulling image configuration: received unexpected HTTP status: 502 Bad Gateway</code> </p>\n<p><a name=\"9415a826\"></a></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>需要结合实际情况，配置相关参数，比如，文件失效时间，用来平衡文件有效期及磁盘使用量。<br><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://yq.aliyun.com/articles/244897\" target=\"_blank\" rel=\"noopener\">直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==∣=2247484045&amp;idx=1&amp;sn=2e4586171930b8d3080eadd55be09723\" target=\"_blank\" rel=\"noopener\">深度解读阿里巴巴云原生镜像分发系统 Dragonfly</a></li>\n<li><a href=\"https://d7y.io/en-us/docs/quickstart.html\" target=\"_blank\" rel=\"noopener\">Dragonfly Quick Start</a></li>\n<li><a href=\"https://juejin.im/post/5c60c021f265da2dd37bf85b\" target=\"_blank\" rel=\"noopener\">加速和简化构建Docker(基于Google jib)</a></li>\n<li><a href=\"https://d7y.io/zh-cn/blog/china-mobile-practice.html\" target=\"_blank\" rel=\"noopener\">浙江移动容器云基于 Dragonfly 的统一文件分发平台生产实践</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第12篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>吐槽一下，最近有点懒，居然欠了4篇，后续会慢慢补上。</p>\n<p><a name=\"61a3ec66\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果说，微服务和容器是最佳拍档，那么模块多实例是肯定少不了。<br>假如没有使用类似 <a href=\"https://github.com/GoogleContainerTools/jib\" target=\"_blank\" rel=\"noopener\">Google jib</a> 等手段进行镜像分层（利用镜像缓存），势必会造成</p>\n<ul>\n<li>带宽浪费：尤其是公网带宽，如果是自建harbor，那么会容易导致单节点网卡被打满，如果用了harbor联邦，又会导致数据同步等运维问题。</li>\n<li>集群拉起慢：镜像下载慢，必然会导致服务拉起慢。</li>\n</ul>\n<p>关于Google jib可以参见我另外一篇 <a href=\"https://juejin.im/post/5c60c021f265da2dd37bf85b\" target=\"_blank\" rel=\"noopener\">加速和简化构建Docker(基于Google jib)</a> ，本文只介绍 Dragonfly + dfdaemon </p>\n<p>Dragonfly是阿里巴巴自研并开源的一款基于P2P协议的文件分发系统。除了使用 dfget 进行文件下载外，还支持dfdaemon 进行docker镜像下载。</p>\n<p>关于Dragonfly的镜像分发的原理性说明，可参见 <a href=\"https://yq.aliyun.com/articles/244897\" target=\"_blank\" rel=\"noopener\">直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”</a> ，文中介绍很详细，此处不多说明。</p>","more":"<p><a name=\"12267079\"></a></p>\n<h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>系统</th>\n<th>ip</th>\n<th>docker version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>supernode</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.44</td>\n<td>17.06.2~ce-0~ubuntu</td>\n</tr>\n<tr>\n<td>clinet1</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.40</td>\n<td>17.06.2~ce-0~ubuntu</td>\n</tr>\n<tr>\n<td>clinet2</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.45</td>\n<td>17.06.2~ce-0~ubuntu</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong> <br>如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费</p>\n<p>安装</p>\n<p>吐槽一下Dragonfly的文档，简直让人不知所以。结合issues + 钉钉群内请教，遂整理出最简使用文档。<br><a name=\"supernode\"></a></p>\n<h3 id=\"supernode\"><a href=\"#supernode\" class=\"headerlink\" title=\"supernode\"></a>supernode</h3><p>可选：给supernode增加docker加速器，可以参考 <a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a> ，如果不需要，可以去掉。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOD &gt;/etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://xxxx.mirror.aliyuncs.com\"</span>] </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run --name dragonfly-supernode --restart=always -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=192.168.0.44</span><br></pre></td></tr></table></figure>\n<p><strong>说明：</strong></p>\n<ul>\n<li>–restart=always 在容器退出时，自动重启容器，防止异常kill或者oom导致的异常退出</li>\n<li>registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 dragonfly的supernode目前没有docker hub镜像，只能用阿里云的</li>\n<li>-v /data/dragonfly/supernode:/home/admin/supernode 将supernode的data dir挂载到宿主机上</li>\n<li>-Dsupernode.advertiseIp=192.168.0.44 设置clinet可以访问的supernode ip,这是一个大坑。如果不设置，有可能会导致client无法连接supernode，届时，docker pull会走clinet的网络，从真实的registry直接下载镜像</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553506862485-080cc522-2d28-47b9-8d6b-3db34db173f3.png#align=left&amp;display=inline&amp;height=624&amp;name=image.png&amp;originHeight=624&amp;originWidth=725&amp;size=90024&amp;status=done&amp;width=725\" alt=\"image.png\"><br><a name=\"752efc6a\"></a></p>\n<h3 id=\"dfdaemon\"><a href=\"#dfdaemon\" class=\"headerlink\" title=\"dfdaemon\"></a>dfdaemon</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOD &gt;/etc/dragonfly.conf</span><br><span class=\"line\">[node]</span><br><span class=\"line\">address=192.168.0.44</span><br><span class=\"line\">EOD</span><br><span class=\"line\">$ docker run --name dragonfly-dfclient --restart=always -d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 --registry=https://xxx.mirror.aliyuncs.com  --ratelimit 100M</span><br><span class=\"line\">$ cat &lt;&lt;EOD &gt;/etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://127.0.0.1:65001\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p><strong>说明：</strong> </p>\n<ul>\n<li>在 /etc/dragonfly.conf 中配置client可以访问的supernode的ip地址，但是，目前官方没有做HA，supernode没法组集群，撑死算是联邦，不能共享文件信息，而且最坑的是，快速开始里，中英文均未提供需要配置此文件，而是在 <a href=\"https://d7y.io/en-us/docs/userguide/download_files.html\" target=\"_blank\" rel=\"noopener\">Downloading Files with Dragonfly</a> 等有所提及（我都是被坑完后，用关键词在d7y的org里搜索，类似知道答案后，找出处 手动[捂脸]）</li>\n<li>-v /root/.small-dragonfly:/root/.small-dragonfly ,将容器中的关键目录挂载到宿主机上，防止重启或者镜像升级时，数据丢失</li>\n<li>–registry=<a href=\"https://xxx.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://xxx.mirror.aliyuncs.com</a> 从何处下载镜像，可以写harbor地址，也可以写加速器地址。默认是 <a href=\"https://index.docker.io\" target=\"_blank\" rel=\"noopener\">https://index.docker.io</a> ，但是，因为国内网络原因，会导致大概率性失败。很灵异。而官方文档是写的 <code>--registry https://xxx.xx.x</code> 不能算是坑，但是，对于docker不熟悉的，往往会不知能不能用加速器。</li>\n<li>–ratelimit 100M 是限速，默认是20M ,这肯定不算坑哈，这是正常特性，在  <a href=\"https://d7y.io/zh-cn/docs/quickstart.html\" target=\"_blank\" rel=\"noopener\">dfdaemon#Options</a> 有说明，但是，文档是有误的 <code>-ratelimit</code> 而实际是 <code>--ratelimit</code> ,如果不改此参数，会发现，下载很慢。</li>\n<li>修改/etc/docker/daemon.json 是为了让docker engine走 dfdaemon</li>\n<li>systemctl restart docker 是为了让daemon生效</li>\n</ul>\n<p><a name=\"db06c78d\"></a></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><a name=\"4a76b96e\"></a></p>\n<h3 id=\"大文件测试\"><a href=\"#大文件测试\" class=\"headerlink\" title=\"大文件测试\"></a>大文件测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker pull anjia0532/kubeflow-images-public.tensorflow-1.6.0-notebook-gpu:v20180604-b3733835</span><br></pre></td></tr></table></figure>\n<p>可以通过 <code>iftop</code> 等软件，查看带宽使用情况判断是否生效，也可以通过查看日志来判断。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553508378817-cde03b19-e0e2-4d03-a233-b9090cc0db2f.png#align=left&amp;display=inline&amp;height=821&amp;name=image.png&amp;originHeight=821&amp;originWidth=1911&amp;size=46951&amp;status=done&amp;width=1911\" alt=\"image.png\"><br>但是会经常性的出现 <code>error pulling image configuration: received unexpected HTTP status: 502 Bad Gateway</code> </p>\n<p><a name=\"9415a826\"></a></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>需要结合实际情况，配置相关参数，比如，文件失效时间，用来平衡文件有效期及磁盘使用量。<br><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://yq.aliyun.com/articles/244897\" target=\"_blank\" rel=\"noopener\">直击阿里双11神秘技术：PB级大规模文件分发系统“蜻蜓”</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==∣=2247484045&amp;idx=1&amp;sn=2e4586171930b8d3080eadd55be09723\" target=\"_blank\" rel=\"noopener\">深度解读阿里巴巴云原生镜像分发系统 Dragonfly</a></li>\n<li><a href=\"https://d7y.io/en-us/docs/quickstart.html\" target=\"_blank\" rel=\"noopener\">Dragonfly Quick Start</a></li>\n<li><a href=\"https://juejin.im/post/5c60c021f265da2dd37bf85b\" target=\"_blank\" rel=\"noopener\">加速和简化构建Docker(基于Google jib)</a></li>\n<li><a href=\"https://d7y.io/zh-cn/blog/china-mobile-practice.html\" target=\"_blank\" rel=\"noopener\">浙江移动容器云基于 Dragonfly 的统一文件分发平台生产实践</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"elastalert微信报警","date":"2017-02-16T08:27:53.000Z","_content":"\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST 'http://127.0.0.1:9200/logstash-'$(date +%Y.%m.%d)'/test' -d '{\"@timestamp\": \"'$(date +%Y-%m-%d'T'%T%z)'\",\"field\": \"value\"}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","source":"_posts/elastalert-wechat-plugin.md","raw":"---\ntitle: elastalert微信报警\ndate: 2017-02-16 16:27:53\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST 'http://127.0.0.1:9200/logstash-'$(date +%Y.%m.%d)'/test' -d '{\"@timestamp\": \"'$(date +%Y-%m-%d'T'%T%z)'\",\"field\": \"value\"}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","slug":"elastalert-wechat-plugin","published":1,"updated":"2019-08-16T05:56:21.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojct000i24domosl5k2p","content":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\" target=\"_blank\" rel=\"noopener\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\" target=\"_blank\" rel=\"noopener\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</span><br><span class=\"line\"></span><br><span class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ cp  config.yaml.example config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#部门id</span></span><br><span class=\"line\"><span class=\"attr\">party_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#用户微信号</span></span><br><span class=\"line\"><span class=\"attr\">user_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\"># 标签id</span></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -X POST <span class=\"string\">'http://127.0.0.1:9200/logstash-'</span>$(date +%Y.%m.%d)<span class=\"string\">'/test'</span> -d <span class=\"string\">'&#123;\"@timestamp\": \"'</span>$(date +%Y-%m-%d<span class=\"string\">'T'</span>%T%z)<span class=\"string\">'\",\"field\": \"value\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</span><br><span class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</span><br><span class=\"line\">INFO:elastalert:发送消息给 xxx</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\" target=\"_blank\" rel=\"noopener\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\" target=\"_blank\" rel=\"noopener\">anjia0532/weixin-qiye-alert</a></p>\n","site":{"data":{}},"excerpt":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\" target=\"_blank\" rel=\"noopener\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\" target=\"_blank\" rel=\"noopener\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</span><br><span class=\"line\"></span><br><span class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ wget https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/elastalert_modules/wechat_qiye_alert.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</span><br><span class=\"line\"></span><br><span class=\"line\">$ cp  config.yaml.example config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#部门id</span></span><br><span class=\"line\"><span class=\"attr\">party_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\">#用户微信号</span></span><br><span class=\"line\"><span class=\"attr\">user_id:</span> <span class=\"string\">xx</span></span><br><span class=\"line\"><span class=\"comment\"># 标签id</span></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -X POST <span class=\"string\">'http://127.0.0.1:9200/logstash-'</span>$(date +%Y.%m.%d)<span class=\"string\">'/test'</span> -d <span class=\"string\">'&#123;\"@timestamp\": \"'</span>$(date +%Y-%m-%d<span class=\"string\">'T'</span>%T%z)<span class=\"string\">'\",\"field\": \"value\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</span><br><span class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</span><br><span class=\"line\">INFO:elastalert:发送消息给 xxx</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\" target=\"_blank\" rel=\"noopener\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\" target=\"_blank\" rel=\"noopener\">anjia0532/weixin-qiye-alert</a></p>"},{"title":"elasticsearch按照日期定时删除索引","date":"2017-04-06T06:10:47.000Z","_content":"\n使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。\n\n<!-- more -->\n\n### 使用官网_delete_by_query进行删除\n[官网文档--Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html)\n\n```bash\ncurl -u 用户名:密码  -H'Content-Type:application/json' -d'{\n    \"query\": {\n        \"range\": {\n            \"@timestamp\": {\n                \"lt\": \"now-7d\",\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"\n```\n\n**解释**\n\n`-u`是格式为`userName:password`，使用`Basic Auth`进行登录。如果`elasticsearch`没有使用类似`x-pack`进行安全登录，则不需要加`-u参数`\n\n`-H`是指定文档类型是json格式\n\n`-XPOST`是指定用`POST`方式请求\n\n`-d`是指定`body`内容\n\n```javascript\n{\n    \"query\": {\n        \"range\": { //范围\n            \"@timestamp\": {//时间字段\n                \"lt\": \"now-7d\",//lt是小于(<)，lte是小于等于(<=),gt是大于(>),gte是大于等于(>=),now-7d是当前时间减7天\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n```\n\n定时删除\n```bash\n$ crontab -e\n\n* 0 * * * /usr/bin/curl -u username:password  -H'Content-Type:application/json' -d'{\"query\":{\"range\":{\"@timestamp\":{\"lt\":\"now-7d\",\"format\":\"epoch_millis\"}}}}' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\" > /tmp/elk_clean.txt\n```\n\n每天0点删除超过7天的无效索引\n\n优点：\n\n- 不依赖第三方插件或者代码\n\n- 简单易理解\n\n- 不需要指定索引名称可用`*`通配符删除\n\n缺点：\n- 效率低\n\n### 使用sh脚本删除\n在stackoverflow看到一个帖子 [Removing old indices in elasticsearch#answer-39746705](http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705)\n```bash\n#!/bin/bash\nsearchIndex=logstash-monitor\nelastic_url=logging.core.k94.kvk.nl\nelastic_port=9200\n\ndate2stamp () {\n    date --utc --date \"$1\" +%s\n}\n\ndateDiff (){\n    case $1 in\n        -s)   sec=1;      shift;;\n        -m)   sec=60;     shift;;\n        -h)   sec=3600;   shift;;\n        -d)   sec=86400;  shift;;\n        *)    sec=86400;;\n    esac\n    dte1=$(date2stamp $1)\n    dte2=$(date2stamp $2)\n    diffSec=$((dte2-dte1))\n    if ((diffSec < 0)); then abs=-1; else abs=1; fi\n    echo $((diffSec/sec*abs))\n}\n\nfor index in $(curl -s \"${elastic_url}:${elastic_port}/_cat/indices?v\" |     grep -E \" ${searchIndex}-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\" | awk '{     print $3 }'); do\n  date=$(echo ${index: -10} | sed 's/\\./-/g')\n  cond=$(date +%Y-%m-%d)\n  diff=$(dateDiff -d $date $cond)\n  echo -n \"${index} (${diff})\"\n  if [ $diff -gt 1 ]; then\n    echo \" / DELETE\"\n    # curl -XDELETE \"${elastic_url}:${elastic_port}/${index}?pretty\"\n  else\n    echo \"\"\n  fi\ndone    \n```\n使用了 `_cat/indices`api。\n\n### 使用 curator\n\n支持windows[zip](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html),[msi](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html),和linux[apt](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html),[yum](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html)\n\n[Curator Reference](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html) [github-curator](https://github.com/elastic/curator)\n\n#### 安装\n[安装](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html)\n\n#### 配置\n\n参考 http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\n\n1.config文件\n\n```yaml\n---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    * 127.0.0.1\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth: username:password\n  timeout:\n  master_only: True\n\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  #blacklist: ['elasticsearch', 'urllib3']\n```\n\n2.action文件\n\n```yaml\n---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 7 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    * filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    * filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7\n      exclude:\n```\n\n这里是用`index-'%Y.%m.%d'`进行匹配，如果是按照索引创建日期来删除，`source: creation_date` 参见 https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\n\n3.运行\n\n```\ncurator --config /path/config_file.yml /path/action_file.yml\n```\n\n别忘了加定时任务`crontab -e`","source":"_posts/elasticsearch-delete-indices-by-date.md","raw":"---\ntitle: elasticsearch按照日期定时删除索引\ndate: 2017-04-06 14:10:47\ntags: [elk,elkstasck,curator]\ncategories: [elkstasck]\n---\n\n使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。\n\n<!-- more -->\n\n### 使用官网_delete_by_query进行删除\n[官网文档--Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html)\n\n```bash\ncurl -u 用户名:密码  -H'Content-Type:application/json' -d'{\n    \"query\": {\n        \"range\": {\n            \"@timestamp\": {\n                \"lt\": \"now-7d\",\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"\n```\n\n**解释**\n\n`-u`是格式为`userName:password`，使用`Basic Auth`进行登录。如果`elasticsearch`没有使用类似`x-pack`进行安全登录，则不需要加`-u参数`\n\n`-H`是指定文档类型是json格式\n\n`-XPOST`是指定用`POST`方式请求\n\n`-d`是指定`body`内容\n\n```javascript\n{\n    \"query\": {\n        \"range\": { //范围\n            \"@timestamp\": {//时间字段\n                \"lt\": \"now-7d\",//lt是小于(<)，lte是小于等于(<=),gt是大于(>),gte是大于等于(>=),now-7d是当前时间减7天\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n```\n\n定时删除\n```bash\n$ crontab -e\n\n* 0 * * * /usr/bin/curl -u username:password  -H'Content-Type:application/json' -d'{\"query\":{\"range\":{\"@timestamp\":{\"lt\":\"now-7d\",\"format\":\"epoch_millis\"}}}}' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\" > /tmp/elk_clean.txt\n```\n\n每天0点删除超过7天的无效索引\n\n优点：\n\n- 不依赖第三方插件或者代码\n\n- 简单易理解\n\n- 不需要指定索引名称可用`*`通配符删除\n\n缺点：\n- 效率低\n\n### 使用sh脚本删除\n在stackoverflow看到一个帖子 [Removing old indices in elasticsearch#answer-39746705](http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705)\n```bash\n#!/bin/bash\nsearchIndex=logstash-monitor\nelastic_url=logging.core.k94.kvk.nl\nelastic_port=9200\n\ndate2stamp () {\n    date --utc --date \"$1\" +%s\n}\n\ndateDiff (){\n    case $1 in\n        -s)   sec=1;      shift;;\n        -m)   sec=60;     shift;;\n        -h)   sec=3600;   shift;;\n        -d)   sec=86400;  shift;;\n        *)    sec=86400;;\n    esac\n    dte1=$(date2stamp $1)\n    dte2=$(date2stamp $2)\n    diffSec=$((dte2-dte1))\n    if ((diffSec < 0)); then abs=-1; else abs=1; fi\n    echo $((diffSec/sec*abs))\n}\n\nfor index in $(curl -s \"${elastic_url}:${elastic_port}/_cat/indices?v\" |     grep -E \" ${searchIndex}-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\" | awk '{     print $3 }'); do\n  date=$(echo ${index: -10} | sed 's/\\./-/g')\n  cond=$(date +%Y-%m-%d)\n  diff=$(dateDiff -d $date $cond)\n  echo -n \"${index} (${diff})\"\n  if [ $diff -gt 1 ]; then\n    echo \" / DELETE\"\n    # curl -XDELETE \"${elastic_url}:${elastic_port}/${index}?pretty\"\n  else\n    echo \"\"\n  fi\ndone    \n```\n使用了 `_cat/indices`api。\n\n### 使用 curator\n\n支持windows[zip](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html),[msi](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html),和linux[apt](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html),[yum](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html)\n\n[Curator Reference](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html) [github-curator](https://github.com/elastic/curator)\n\n#### 安装\n[安装](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html)\n\n#### 配置\n\n参考 http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\n\n1.config文件\n\n```yaml\n---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    * 127.0.0.1\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth: username:password\n  timeout:\n  master_only: True\n\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  #blacklist: ['elasticsearch', 'urllib3']\n```\n\n2.action文件\n\n```yaml\n---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 7 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    * filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    * filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7\n      exclude:\n```\n\n这里是用`index-'%Y.%m.%d'`进行匹配，如果是按照索引创建日期来删除，`source: creation_date` 参见 https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\n\n3.运行\n\n```\ncurator --config /path/config_file.yml /path/action_file.yml\n```\n\n别忘了加定时任务`crontab -e`","slug":"elasticsearch-delete-indices-by-date","published":1,"updated":"2019-08-16T05:56:21.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojcw000l24dorupphwoq","content":"<p>使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。</p>\n<a id=\"more\"></a>\n<h3 id=\"使用官网-delete-by-query进行删除\"><a href=\"#使用官网-delete-by-query进行删除\" class=\"headerlink\" title=\"使用官网_delete_by_query进行删除\"></a>使用官网_delete_by_query进行删除</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html\" target=\"_blank\" rel=\"noopener\">官网文档–Delete By Query API</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -u 用户名:密码  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"query\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"range\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">            \"@timestamp\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">                \"lt\": \"now-7d\",</span></span><br><span class=\"line\"><span class=\"string\">                \"format\": \"epoch_millis\"</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>解释</strong></p>\n<p><code>-u</code>是格式为<code>userName:password</code>，使用<code>Basic Auth</code>进行登录。如果<code>elasticsearch</code>没有使用类似<code>x-pack</code>进行安全登录，则不需要加<code>-u参数</code></p>\n<p><code>-H</code>是指定文档类型是json格式</p>\n<p><code>-XPOST</code>是指定用<code>POST</code>方式请求</p>\n<p><code>-d</code>是指定<code>body</code>内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"range\"</span>: &#123; <span class=\"comment\">//范围</span></span><br><span class=\"line\">            <span class=\"string\">\"@timestamp\"</span>: &#123;<span class=\"comment\">//时间字段</span></span><br><span class=\"line\">                <span class=\"string\">\"lt\"</span>: <span class=\"string\">\"now-7d\"</span>,<span class=\"comment\">//lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</span></span><br><span class=\"line\">                <span class=\"string\">\"format\"</span>: <span class=\"string\">\"epoch_millis\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时删除<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">* 0 * * * /usr/bin/curl -u username:password  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;\"query\":&#123;\"range\":&#123;\"@timestamp\":&#123;\"lt\":\"now-7d\",\"format\":\"epoch_millis\"&#125;&#125;&#125;&#125;'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span> &gt; /tmp/elk_clean.txt</span><br></pre></td></tr></table></figure></p>\n<p>每天0点删除超过7天的无效索引</p>\n<p>优点：</p>\n<ul>\n<li><p>不依赖第三方插件或者代码</p>\n</li>\n<li><p>简单易理解</p>\n</li>\n<li><p>不需要指定索引名称可用<code>*</code>通配符删除</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效率低</li>\n</ul>\n<h3 id=\"使用sh脚本删除\"><a href=\"#使用sh脚本删除\" class=\"headerlink\" title=\"使用sh脚本删除\"></a>使用sh脚本删除</h3><p>在stackoverflow看到一个帖子 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705\" target=\"_blank\" rel=\"noopener\">Removing old indices in elasticsearch#answer-39746705</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">searchIndex=logstash-monitor</span><br><span class=\"line\">elastic_url=logging.core.k94.kvk.nl</span><br><span class=\"line\">elastic_port=9200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">date2stamp</span></span> () &#123;</span><br><span class=\"line\">    date --utc --date <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> +%s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">dateDiff</span></span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        -s)   sec=1;      <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -m)   sec=60;     <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -h)   sec=3600;   <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -d)   sec=86400;  <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        *)    sec=86400;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    dte1=$(date2stamp <span class=\"variable\">$1</span>)</span><br><span class=\"line\">    dte2=$(date2stamp <span class=\"variable\">$2</span>)</span><br><span class=\"line\">    diffSec=$((dte2-dte1))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((diffSec &lt; 0)); <span class=\"keyword\">then</span> abs=-1; <span class=\"keyword\">else</span> abs=1; <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $((diffSec/sec*abs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> $(curl -s <span class=\"string\">\"<span class=\"variable\">$&#123;elastic_url&#125;</span>:<span class=\"variable\">$&#123;elastic_port&#125;</span>/_cat/indices?v\"</span> |     grep -E <span class=\"string\">\" <span class=\"variable\">$&#123;searchIndex&#125;</span>-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\"</span> | awk <span class=\"string\">'&#123;     print $3 &#125;'</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">  date=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;index: -10&#125;</span> | sed <span class=\"string\">'s/\\./-/g'</span>)</span><br><span class=\"line\">  cond=$(date +%Y-%m-%d)</span><br><span class=\"line\">  diff=$(dateDiff -d <span class=\"variable\">$date</span> <span class=\"variable\">$cond</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$&#123;index&#125;</span> (<span class=\"variable\">$&#123;diff&#125;</span>)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$diff</span> -gt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\" / DELETE\"</span></span><br><span class=\"line\">    <span class=\"comment\"># curl -XDELETE \"$&#123;elastic_url&#125;:$&#123;elastic_port&#125;/$&#123;index&#125;?pretty\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>使用了 <code>_cat/indices</code>api。</p>\n<h3 id=\"使用-curator\"><a href=\"#使用-curator\" class=\"headerlink\" title=\"使用 curator\"></a>使用 curator</h3><p>支持windows<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html\" target=\"_blank\" rel=\"noopener\">zip</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html\" target=\"_blank\" rel=\"noopener\">msi</a>,和linux<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html\" target=\"_blank\" rel=\"noopener\">apt</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html\" target=\"_blank\" rel=\"noopener\">yum</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html\" target=\"_blank\" rel=\"noopener\">Curator Reference</a> <a href=\"https://github.com/elastic/curator\" target=\"_blank\" rel=\"noopener\">github-curator</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html\" target=\"_blank\" rel=\"noopener\">安装</a></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>参考 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400</a></p>\n<p>1.config文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Remember, leave a key empty if there is no value.  None will be a string,</span></span><br><span class=\"line\"><span class=\"comment\"># not a Python \"NoneType\"</span></span><br><span class=\"line\"><span class=\"attr\">client:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">  url_prefix:</span></span><br><span class=\"line\"><span class=\"attr\">  use_ssl:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  certificate:</span></span><br><span class=\"line\"><span class=\"attr\">  client_cert:</span></span><br><span class=\"line\"><span class=\"attr\">  client_key:</span></span><br><span class=\"line\"><span class=\"attr\">  ssl_no_validate:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  http_auth:</span> <span class=\"attr\">username:password</span></span><br><span class=\"line\"><span class=\"attr\">  timeout:</span></span><br><span class=\"line\"><span class=\"attr\">  master_only:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\"><span class=\"attr\">  loglevel:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\"><span class=\"attr\">  logfile:</span></span><br><span class=\"line\"><span class=\"attr\">  logformat:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"comment\">#blacklist: ['elasticsearch', 'urllib3']</span></span><br></pre></td></tr></table></figure>\n<p>2.action文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">delete_indices</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">Delete</span> <span class=\"string\">indices</span> <span class=\"string\">older</span> <span class=\"string\">than</span> <span class=\"number\">7</span> <span class=\"string\">days</span> <span class=\"string\">(based</span> <span class=\"string\">on</span> <span class=\"string\">index</span> <span class=\"string\">name),</span> <span class=\"string\">for</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\">      <span class=\"string\">prefixed</span> <span class=\"string\">indices.</span> <span class=\"string\">Ignore</span> <span class=\"string\">the</span> <span class=\"string\">error</span> <span class=\"string\">if</span> <span class=\"string\">the</span> <span class=\"string\">filter</span> <span class=\"string\">does</span> <span class=\"string\">not</span> <span class=\"string\">result</span> <span class=\"string\">in</span> <span class=\"string\">an</span></span><br><span class=\"line\">      <span class=\"string\">actionable</span> <span class=\"string\">list</span> <span class=\"string\">of</span> <span class=\"string\">indices</span> <span class=\"string\">(ignore_empty_list)</span> <span class=\"string\">and</span> <span class=\"string\">exit</span> <span class=\"string\">cleanly.</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      ignore_empty_list:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">name</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br></pre></td></tr></table></figure>\n<p>这里是用<code>index-&#39;%Y.%m.%d&#39;</code>进行匹配，如果是按照索引创建日期来删除，<code>source: creation_date</code> 参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date</a></p>\n<p>3.运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curator --config /path/config_file.yml /path/action_file.yml</span><br></pre></td></tr></table></figure>\n<p>别忘了加定时任务<code>crontab -e</code></p>\n","site":{"data":{}},"excerpt":"<p>使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。</p>","more":"<h3 id=\"使用官网-delete-by-query进行删除\"><a href=\"#使用官网-delete-by-query进行删除\" class=\"headerlink\" title=\"使用官网_delete_by_query进行删除\"></a>使用官网_delete_by_query进行删除</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html\" target=\"_blank\" rel=\"noopener\">官网文档–Delete By Query API</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -u 用户名:密码  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"query\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"range\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">            \"@timestamp\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">                \"lt\": \"now-7d\",</span></span><br><span class=\"line\"><span class=\"string\">                \"format\": \"epoch_millis\"</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>解释</strong></p>\n<p><code>-u</code>是格式为<code>userName:password</code>，使用<code>Basic Auth</code>进行登录。如果<code>elasticsearch</code>没有使用类似<code>x-pack</code>进行安全登录，则不需要加<code>-u参数</code></p>\n<p><code>-H</code>是指定文档类型是json格式</p>\n<p><code>-XPOST</code>是指定用<code>POST</code>方式请求</p>\n<p><code>-d</code>是指定<code>body</code>内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"range\"</span>: &#123; <span class=\"comment\">//范围</span></span><br><span class=\"line\">            <span class=\"string\">\"@timestamp\"</span>: &#123;<span class=\"comment\">//时间字段</span></span><br><span class=\"line\">                <span class=\"string\">\"lt\"</span>: <span class=\"string\">\"now-7d\"</span>,<span class=\"comment\">//lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</span></span><br><span class=\"line\">                <span class=\"string\">\"format\"</span>: <span class=\"string\">\"epoch_millis\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时删除<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">* 0 * * * /usr/bin/curl -u username:password  -H<span class=\"string\">'Content-Type:application/json'</span> -d<span class=\"string\">'&#123;\"query\":&#123;\"range\":&#123;\"@timestamp\":&#123;\"lt\":\"now-7d\",\"format\":\"epoch_millis\"&#125;&#125;&#125;&#125;'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span> &gt; /tmp/elk_clean.txt</span><br></pre></td></tr></table></figure></p>\n<p>每天0点删除超过7天的无效索引</p>\n<p>优点：</p>\n<ul>\n<li><p>不依赖第三方插件或者代码</p>\n</li>\n<li><p>简单易理解</p>\n</li>\n<li><p>不需要指定索引名称可用<code>*</code>通配符删除</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效率低</li>\n</ul>\n<h3 id=\"使用sh脚本删除\"><a href=\"#使用sh脚本删除\" class=\"headerlink\" title=\"使用sh脚本删除\"></a>使用sh脚本删除</h3><p>在stackoverflow看到一个帖子 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705\" target=\"_blank\" rel=\"noopener\">Removing old indices in elasticsearch#answer-39746705</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">searchIndex=logstash-monitor</span><br><span class=\"line\">elastic_url=logging.core.k94.kvk.nl</span><br><span class=\"line\">elastic_port=9200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">date2stamp</span></span> () &#123;</span><br><span class=\"line\">    date --utc --date <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> +%s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">dateDiff</span></span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        -s)   sec=1;      <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -m)   sec=60;     <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -h)   sec=3600;   <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        -d)   sec=86400;  <span class=\"built_in\">shift</span>;;</span><br><span class=\"line\">        *)    sec=86400;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    dte1=$(date2stamp <span class=\"variable\">$1</span>)</span><br><span class=\"line\">    dte2=$(date2stamp <span class=\"variable\">$2</span>)</span><br><span class=\"line\">    diffSec=$((dte2-dte1))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((diffSec &lt; 0)); <span class=\"keyword\">then</span> abs=-1; <span class=\"keyword\">else</span> abs=1; <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $((diffSec/sec*abs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> $(curl -s <span class=\"string\">\"<span class=\"variable\">$&#123;elastic_url&#125;</span>:<span class=\"variable\">$&#123;elastic_port&#125;</span>/_cat/indices?v\"</span> |     grep -E <span class=\"string\">\" <span class=\"variable\">$&#123;searchIndex&#125;</span>-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\"</span> | awk <span class=\"string\">'&#123;     print $3 &#125;'</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">  date=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;index: -10&#125;</span> | sed <span class=\"string\">'s/\\./-/g'</span>)</span><br><span class=\"line\">  cond=$(date +%Y-%m-%d)</span><br><span class=\"line\">  diff=$(dateDiff -d <span class=\"variable\">$date</span> <span class=\"variable\">$cond</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$&#123;index&#125;</span> (<span class=\"variable\">$&#123;diff&#125;</span>)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$diff</span> -gt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\" / DELETE\"</span></span><br><span class=\"line\">    <span class=\"comment\"># curl -XDELETE \"$&#123;elastic_url&#125;:$&#123;elastic_port&#125;/$&#123;index&#125;?pretty\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>使用了 <code>_cat/indices</code>api。</p>\n<h3 id=\"使用-curator\"><a href=\"#使用-curator\" class=\"headerlink\" title=\"使用 curator\"></a>使用 curator</h3><p>支持windows<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html\" target=\"_blank\" rel=\"noopener\">zip</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html\" target=\"_blank\" rel=\"noopener\">msi</a>,和linux<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html\" target=\"_blank\" rel=\"noopener\">apt</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html\" target=\"_blank\" rel=\"noopener\">yum</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html\" target=\"_blank\" rel=\"noopener\">Curator Reference</a> <a href=\"https://github.com/elastic/curator\" target=\"_blank\" rel=\"noopener\">github-curator</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html\" target=\"_blank\" rel=\"noopener\">安装</a></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>参考 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400</a></p>\n<p>1.config文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Remember, leave a key empty if there is no value.  None will be a string,</span></span><br><span class=\"line\"><span class=\"comment\"># not a Python \"NoneType\"</span></span><br><span class=\"line\"><span class=\"attr\">client:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">  url_prefix:</span></span><br><span class=\"line\"><span class=\"attr\">  use_ssl:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  certificate:</span></span><br><span class=\"line\"><span class=\"attr\">  client_cert:</span></span><br><span class=\"line\"><span class=\"attr\">  client_key:</span></span><br><span class=\"line\"><span class=\"attr\">  ssl_no_validate:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">  http_auth:</span> <span class=\"attr\">username:password</span></span><br><span class=\"line\"><span class=\"attr\">  timeout:</span></span><br><span class=\"line\"><span class=\"attr\">  master_only:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\"><span class=\"attr\">  loglevel:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\"><span class=\"attr\">  logfile:</span></span><br><span class=\"line\"><span class=\"attr\">  logformat:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"comment\">#blacklist: ['elasticsearch', 'urllib3']</span></span><br></pre></td></tr></table></figure>\n<p>2.action文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">delete_indices</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">Delete</span> <span class=\"string\">indices</span> <span class=\"string\">older</span> <span class=\"string\">than</span> <span class=\"number\">7</span> <span class=\"string\">days</span> <span class=\"string\">(based</span> <span class=\"string\">on</span> <span class=\"string\">index</span> <span class=\"string\">name),</span> <span class=\"string\">for</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\">      <span class=\"string\">prefixed</span> <span class=\"string\">indices.</span> <span class=\"string\">Ignore</span> <span class=\"string\">the</span> <span class=\"string\">error</span> <span class=\"string\">if</span> <span class=\"string\">the</span> <span class=\"string\">filter</span> <span class=\"string\">does</span> <span class=\"string\">not</span> <span class=\"string\">result</span> <span class=\"string\">in</span> <span class=\"string\">an</span></span><br><span class=\"line\">      <span class=\"string\">actionable</span> <span class=\"string\">list</span> <span class=\"string\">of</span> <span class=\"string\">indices</span> <span class=\"string\">(ignore_empty_list)</span> <span class=\"string\">and</span> <span class=\"string\">exit</span> <span class=\"string\">cleanly.</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      ignore_empty_list:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\">    <span class=\"string\">*</span> <span class=\"attr\">filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">name</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br></pre></td></tr></table></figure>\n<p>这里是用<code>index-&#39;%Y.%m.%d&#39;</code>进行匹配，如果是按照索引创建日期来删除，<code>source: creation_date</code> 参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date</a></p>\n<p>3.运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curator --config /path/config_file.yml /path/action_file.yml</span><br></pre></td></tr></table></figure>\n<p>别忘了加定时任务<code>crontab -e</code></p>"},{"title":"ELK Stack之Beats简介","date":"2017-03-02T10:55:39.000Z","_content":"\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","source":"_posts/elk-stack-beats.md","raw":"---\ntitle: ELK Stack之Beats简介\ndate: 2017-03-02 18:55:39\ntags: [elk,elkstack,beats]\ncategories: [elkstasck]\n---\n\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","slug":"elk-stack-beats","published":1,"updated":"2019-08-16T05:56:21.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojcy000q24doc7qb93po","content":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br><a id=\"more\"></a></p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n","site":{"data":{}},"excerpt":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br>","more":"</p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>"},{"title":"ElastAlert 基于Elasticsearch的监控告警","date":"2017-02-14T00:27:47.000Z","_content":"\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","source":"_posts/elasticsearch-elastalert.md","raw":"---\ntitle: ElastAlert 基于Elasticsearch的监控告警\ndate: 2017-02-14 08:27:47\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","slug":"elasticsearch-elastalert","published":1,"updated":"2019-08-16T05:56:21.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojcz000s24doqyy6izok","content":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"noopener\">https://github.com/Yelp/elastalert</a></p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\" target=\"_blank\" rel=\"noopener\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\"></span><br><span class=\"line\">Python 2.7.12+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></span><br><span class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></span><br></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</span><br><span class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</span><br><span class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</span><br><span class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</span><br><span class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\" target=\"_blank\" rel=\"noopener\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ elastalert-create-index</span><br><span class=\"line\">New index name (Default elastalert_status)</span><br><span class=\"line\">Name of existing index to copy (Default None)</span><br><span class=\"line\">New index elastalert_status created</span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\" target=\"_blank\" rel=\"noopener\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi ~/elastalert/config.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></span><br><span class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></span><br><span class=\"line\"><span class=\"attr\">rules_folder:</span> <span class=\"string\">example_rules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></span><br><span class=\"line\"><span class=\"attr\">run_every:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></span><br><span class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></span><br><span class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></span><br><span class=\"line\"><span class=\"comment\">#verify_certs: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></span><br><span class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></span><br><span class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></span><br><span class=\"line\"><span class=\"comment\"># for details</span></span><br><span class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></span><br><span class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></span><br><span class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></span><br><span class=\"line\"><span class=\"attr\">writeback_index:</span> <span class=\"string\">elastalert_status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></span><br><span class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></span><br><span class=\"line\"><span class=\"attr\">alert_time_limit:</span></span><br><span class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></span><br><span class=\"line\"><span class=\"attr\">user:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\" target=\"_blank\" rel=\"noopener\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间刻度</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\">    <span class=\"comment\">#1分钟</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- query:</span></span><br><span class=\"line\"><span class=\"attr\">    query_string:</span></span><br><span class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></span><br><span class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></span><br><span class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></span><br><span class=\"line\"><span class=\"attr\">smtp_host:</span> <span class=\"string\">smtp.163.com</span></span><br><span class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></span><br><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\"><span class=\"attr\">smtp_auth_file:</span> <span class=\"string\">/home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></span><br><span class=\"line\"><span class=\"attr\">email_reply_to:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></span><br><span class=\"line\"><span class=\"attr\">from_addr:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (required, email specific)</span></span><br><span class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></span><br><span class=\"line\"><span class=\"attr\">email:</span></span><br><span class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\" target=\"_blank\" rel=\"noopener\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"noopener\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</span><br><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  -d <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</span></span><br><span class=\"line\"><span class=\"string\">\"field\": \"value\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</span><br><span class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</span><br><span class=\"line\">INFO:elastalert:Example rule</span><br><span class=\"line\"></span><br><span class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</span><br><span class=\"line\"></span><br><span class=\"line\">@timestamp: 2017-02-14T03:10:46Z</span><br><span class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</span><br><span class=\"line\">_index: logstash-2017.02.14</span><br><span class=\"line\">_type: <span class=\"built_in\">test</span></span><br><span class=\"line\">field: value</span><br><span class=\"line\">num_hits: 2</span><br><span class=\"line\">num_matches: 1</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>\n","site":{"data":{}},"excerpt":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"noopener\">https://github.com/Yelp/elastalert</a></p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\" target=\"_blank\" rel=\"noopener\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\"></span><br><span class=\"line\">Python 2.7.12+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></span><br><span class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></span><br></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</span><br><span class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</span><br><span class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</span><br><span class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</span><br><span class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\" target=\"_blank\" rel=\"noopener\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ elastalert-create-index</span><br><span class=\"line\">New index name (Default elastalert_status)</span><br><span class=\"line\">Name of existing index to copy (Default None)</span><br><span class=\"line\">New index elastalert_status created</span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\" target=\"_blank\" rel=\"noopener\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi ~/elastalert/config.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></span><br><span class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></span><br><span class=\"line\"><span class=\"attr\">rules_folder:</span> <span class=\"string\">example_rules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></span><br><span class=\"line\"><span class=\"attr\">run_every:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></span><br><span class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></span><br><span class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></span><br><span class=\"line\"><span class=\"comment\">#verify_certs: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></span><br><span class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></span><br><span class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></span><br><span class=\"line\"><span class=\"comment\"># for details</span></span><br><span class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></span><br><span class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></span><br><span class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></span><br><span class=\"line\"><span class=\"attr\">writeback_index:</span> <span class=\"string\">elastalert_status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></span><br><span class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></span><br><span class=\"line\"><span class=\"attr\">alert_time_limit:</span></span><br><span class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></span><br><span class=\"line\"><span class=\"attr\">user:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\" target=\"_blank\" rel=\"noopener\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></span><br><span class=\"line\"><span class=\"comment\">#es_port: 14900</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">rule</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">frequency</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">logstash-*</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#限定时间刻度</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\">    <span class=\"comment\">#1分钟</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- query:</span></span><br><span class=\"line\"><span class=\"attr\">    query_string:</span></span><br><span class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></span><br><span class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></span><br><span class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></span><br><span class=\"line\"><span class=\"attr\">smtp_host:</span> <span class=\"string\">smtp.163.com</span></span><br><span class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></span><br><span class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></span><br><span class=\"line\"><span class=\"attr\">smtp_auth_file:</span> <span class=\"string\">/home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></span><br><span class=\"line\"><span class=\"attr\">email_reply_to:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></span><br><span class=\"line\"><span class=\"attr\">from_addr:</span> <span class=\"string\">xxx@163.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (required, email specific)</span></span><br><span class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></span><br><span class=\"line\"><span class=\"attr\">email:</span></span><br><span class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\" target=\"_blank\" rel=\"noopener\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</span><br></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"noopener\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</span><br><span class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Starting up</span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  -d <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</span></span><br><span class=\"line\"><span class=\"string\">\"field\": \"value\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</span><br><span class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</span><br><span class=\"line\">INFO:elastalert:Example rule</span><br><span class=\"line\"></span><br><span class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</span><br><span class=\"line\"></span><br><span class=\"line\">@timestamp: 2017-02-14T03:10:46Z</span><br><span class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</span><br><span class=\"line\">_index: logstash-2017.02.14</span><br><span class=\"line\">_type: <span class=\"built_in\">test</span></span><br><span class=\"line\">field: value</span><br><span class=\"line\">num_hits: 2</span><br><span class=\"line\">num_matches: 1</span><br><span class=\"line\"></span><br><span class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</span><br><span class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</span><br><span class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>"},{"title":"005-blocked by：[FORBIDDEN/12/index read-only / allow delete (api)]","date":"2019-02-19T00:31:34.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第5篇，定个小目标999，每周最少2篇。\n\n\n吐槽一下，最近有点招bug，前两天磁盘异常爆满，今天es又挂了。\n\n<a name=\"11e8ce1c\"></a>\n## Logstash ClusterBlockException\n\nlogstash 日志中周期性出现 `FORBIDDEN/12/index read-only / allow delete (api)]` ，并且es中无法写入新数据。<br />原因是 ES 主动保护功能，防止es集群状态变成红色(RED)或者黄色(YELLOW)<br />原因有两个:\n\n- 内存不足：JVMMemoryPressure 超过92%并持续30分钟时，ES触发保护机制，并且阻止写入操作，以防止集群达到红色状态，启用写保护后，写入操作将失败，并且抛出 `ClusterBlockException` ，无法创建新索引，并且抛出 `IndexCreateBlockException` ,当五分钟内恢复到88%以下时，将禁用写保护\n- 磁盘空间不足：es的默认磁盘水位警戒线是85%，一旦磁盘使用率超过85%，es不会再为该节点分配分片，es还有一个磁盘水位警戒线是90%，超过后，将尝试将分片重定位到其他节点。\n\n<a name=\"de842a6c\"></a>\n## 解决方案\n\n- 磁盘扩容\n- 删除无用索引\n- 将旧索引的副本数调小\n- 增加数据节点\n- 手动将 `index.blocks.read_only_allow_delete` 改成false\n\n<a name=\"4d13249a\"></a>\n## 另\n还有一种报错是 `blocked by: [FORBIDDEN/8/index write (api)];` 后续再补充\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [AWS elastic-search. FORBIDDEN/8/index write (api). Unable to write to index](https://stackoverflow.com/questions/44383601/aws-elastic-search-forbidden-8-index-write-api-unable-to-write-to-index)\n- [Dynamic Index Settings](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#dynamic-index-settings)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/es-forbidden-12.md","raw":"\n---\n\ntitle: 005-blocked by：[FORBIDDEN/12/index read-only / allow delete (api)]\n\ndate: 2019-02-19 08:31:34 +0800\n\ntags: [es,elasticsearch,运维]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第5篇，定个小目标999，每周最少2篇。\n\n\n吐槽一下，最近有点招bug，前两天磁盘异常爆满，今天es又挂了。\n\n<a name=\"11e8ce1c\"></a>\n## Logstash ClusterBlockException\n\nlogstash 日志中周期性出现 `FORBIDDEN/12/index read-only / allow delete (api)]` ，并且es中无法写入新数据。<br />原因是 ES 主动保护功能，防止es集群状态变成红色(RED)或者黄色(YELLOW)<br />原因有两个:\n\n- 内存不足：JVMMemoryPressure 超过92%并持续30分钟时，ES触发保护机制，并且阻止写入操作，以防止集群达到红色状态，启用写保护后，写入操作将失败，并且抛出 `ClusterBlockException` ，无法创建新索引，并且抛出 `IndexCreateBlockException` ,当五分钟内恢复到88%以下时，将禁用写保护\n- 磁盘空间不足：es的默认磁盘水位警戒线是85%，一旦磁盘使用率超过85%，es不会再为该节点分配分片，es还有一个磁盘水位警戒线是90%，超过后，将尝试将分片重定位到其他节点。\n\n<a name=\"de842a6c\"></a>\n## 解决方案\n\n- 磁盘扩容\n- 删除无用索引\n- 将旧索引的副本数调小\n- 增加数据节点\n- 手动将 `index.blocks.read_only_allow_delete` 改成false\n\n<a name=\"4d13249a\"></a>\n## 另\n还有一种报错是 `blocked by: [FORBIDDEN/8/index write (api)];` 后续再补充\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [AWS elastic-search. FORBIDDEN/8/index write (api). Unable to write to index](https://stackoverflow.com/questions/44383601/aws-elastic-search-forbidden-8-index-write-api-unable-to-write-to-index)\n- [Dynamic Index Settings](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#dynamic-index-settings)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"es-forbidden-12","published":1,"updated":"2019-08-16T06:11:15.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojd1000v24dox4ax7x5f","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第5篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>吐槽一下，最近有点招bug，前两天磁盘异常爆满，今天es又挂了。</p>\n<p><a name=\"11e8ce1c\"></a></p>\n<h2 id=\"Logstash-ClusterBlockException\"><a href=\"#Logstash-ClusterBlockException\" class=\"headerlink\" title=\"Logstash ClusterBlockException\"></a>Logstash ClusterBlockException</h2><p>logstash 日志中周期性出现 <code>FORBIDDEN/12/index read-only / allow delete (api)]</code> ，并且es中无法写入新数据。<br>原因是 ES 主动保护功能，防止es集群状态变成红色(RED)或者黄色(YELLOW)<br>原因有两个:</p>\n<ul>\n<li>内存不足：JVMMemoryPressure 超过92%并持续30分钟时，ES触发保护机制，并且阻止写入操作，以防止集群达到红色状态，启用写保护后，写入操作将失败，并且抛出 <code>ClusterBlockException</code> ，无法创建新索引，并且抛出 <code>IndexCreateBlockException</code> ,当五分钟内恢复到88%以下时，将禁用写保护</li>\n<li>磁盘空间不足：es的默认磁盘水位警戒线是85%，一旦磁盘使用率超过85%，es不会再为该节点分配分片，es还有一个磁盘水位警戒线是90%，超过后，将尝试将分片重定位到其他节点。</li>\n</ul>\n<p><a name=\"de842a6c\"></a></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>磁盘扩容</li>\n<li>删除无用索引</li>\n<li>将旧索引的副本数调小</li>\n<li>增加数据节点</li>\n<li>手动将 <code>index.blocks.read_only_allow_delete</code> 改成false</li>\n</ul>\n<p><a name=\"4d13249a\"></a></p>\n<h2 id=\"另\"><a href=\"#另\" class=\"headerlink\" title=\"另\"></a>另</h2><p>还有一种报错是 <code>blocked by: [FORBIDDEN/8/index write (api)];</code> 后续再补充</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/44383601/aws-elastic-search-forbidden-8-index-write-api-unable-to-write-to-index\" target=\"_blank\" rel=\"noopener\">AWS elastic-search. FORBIDDEN/8/index write (api). Unable to write to index</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#dynamic-index-settings\" target=\"_blank\" rel=\"noopener\">Dynamic Index Settings</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第5篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>吐槽一下，最近有点招bug，前两天磁盘异常爆满，今天es又挂了。</p>\n<p><a name=\"11e8ce1c\"></a></p>\n<h2 id=\"Logstash-ClusterBlockException\"><a href=\"#Logstash-ClusterBlockException\" class=\"headerlink\" title=\"Logstash ClusterBlockException\"></a>Logstash ClusterBlockException</h2><p>logstash 日志中周期性出现 <code>FORBIDDEN/12/index read-only / allow delete (api)]</code> ，并且es中无法写入新数据。<br>原因是 ES 主动保护功能，防止es集群状态变成红色(RED)或者黄色(YELLOW)<br>原因有两个:</p>\n<ul>\n<li>内存不足：JVMMemoryPressure 超过92%并持续30分钟时，ES触发保护机制，并且阻止写入操作，以防止集群达到红色状态，启用写保护后，写入操作将失败，并且抛出 <code>ClusterBlockException</code> ，无法创建新索引，并且抛出 <code>IndexCreateBlockException</code> ,当五分钟内恢复到88%以下时，将禁用写保护</li>\n<li>磁盘空间不足：es的默认磁盘水位警戒线是85%，一旦磁盘使用率超过85%，es不会再为该节点分配分片，es还有一个磁盘水位警戒线是90%，超过后，将尝试将分片重定位到其他节点。</li>\n</ul>\n<p><a name=\"de842a6c\"></a></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>磁盘扩容</li>\n<li>删除无用索引</li>\n<li>将旧索引的副本数调小</li>\n<li>增加数据节点</li>\n<li>手动将 <code>index.blocks.read_only_allow_delete</code> 改成false</li>\n</ul>\n<p><a name=\"4d13249a\"></a></p>\n<h2 id=\"另\"><a href=\"#另\" class=\"headerlink\" title=\"另\"></a>另</h2><p>还有一种报错是 <code>blocked by: [FORBIDDEN/8/index write (api)];</code> 后续再补充</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/44383601/aws-elastic-search-forbidden-8-index-write-api-unable-to-write-to-index\" target=\"_blank\" rel=\"noopener\">AWS elastic-search. FORBIDDEN/8/index write (api). Unable to write to index</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#dynamic-index-settings\" target=\"_blank\" rel=\"noopener\">Dynamic Index Settings</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"028-解决cdh6.2 报 Failed to install Oozie ShareLib","date":"2019-06-12T04:30:53.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第28篇，定个小目标999，每周最少2篇。\n\n\n本文主要参考 [0590-6.1.0-C6升级过程中Oozie共享库的问题分析](https://cloud.tencent.com/developer/article/1419295) ，这个问题是，cdh6.2的通病，只要安装oozie就会出现(无论是升级，还是新装)。<br />\n\n1. 纠正解决方案里的软连接问题\n\n```bash\ncd /opt/cloudera/parcels/CDH/lib/oozie/libtools\nln -s ../../../jars/logredactor-2.0.7.jar logredactor-2.0.7.jar \n```\n\n2. 此方案需要在部署oozie的主机上执行(我一开始执行错节点了)，执行完后重启oozie。\n\n","source":"_posts/failed-to-install-oozie-share-lib.md","raw":"\n---\n\ntitle: 028-解决cdh6.2 报 Failed to install Oozie ShareLib\n\ndate: 2019-06-12 12:30:53 +0800\n\ntags: [CDH,hadoop,oozie]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第28篇，定个小目标999，每周最少2篇。\n\n\n本文主要参考 [0590-6.1.0-C6升级过程中Oozie共享库的问题分析](https://cloud.tencent.com/developer/article/1419295) ，这个问题是，cdh6.2的通病，只要安装oozie就会出现(无论是升级，还是新装)。<br />\n\n1. 纠正解决方案里的软连接问题\n\n```bash\ncd /opt/cloudera/parcels/CDH/lib/oozie/libtools\nln -s ../../../jars/logredactor-2.0.7.jar logredactor-2.0.7.jar \n```\n\n2. 此方案需要在部署oozie的主机上执行(我一开始执行错节点了)，执行完后重启oozie。\n\n","slug":"failed-to-install-oozie-share-lib","published":1,"updated":"2019-08-16T06:11:15.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojd2000x24don5d9hlgy","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第28篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要参考 <a href=\"https://cloud.tencent.com/developer/article/1419295\" target=\"_blank\" rel=\"noopener\">0590-6.1.0-C6升级过程中Oozie共享库的问题分析</a> ，这个问题是，cdh6.2的通病，只要安装oozie就会出现(无论是升级，还是新装)。<br></p>\n<ol>\n<li>纠正解决方案里的软连接问题</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/cloudera/parcels/CDH/lib/oozie/libtools</span><br><span class=\"line\">ln -s ../../../jars/logredactor-2.0.7.jar logredactor-2.0.7.jar</span><br></pre></td></tr></table></figure>\n<ol>\n<li>此方案需要在部署oozie的主机上执行(我一开始执行错节点了)，执行完后重启oozie。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第28篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要参考 <a href=\"https://cloud.tencent.com/developer/article/1419295\" target=\"_blank\" rel=\"noopener\">0590-6.1.0-C6升级过程中Oozie共享库的问题分析</a> ，这个问题是，cdh6.2的通病，只要安装oozie就会出现(无论是升级，还是新装)。<br></p>\n<ol>\n<li>纠正解决方案里的软连接问题</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/cloudera/parcels/CDH/lib/oozie/libtools</span><br><span class=\"line\">ln -s ../../../jars/logredactor-2.0.7.jar logredactor-2.0.7.jar</span><br></pre></td></tr></table></figure>\n<ol>\n<li>此方案需要在部署oozie的主机上执行(我一开始执行错节点了)，执行完后重启oozie。</li>\n</ol>\n"},{"title":"034-解决streamsets订阅过期binlog导致无法启动问题","date":"2019-07-22T12:00:52.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第34篇，定个小目标999，每周最少2篇。\n\n\nstreamsets停机时间过长，mysql master设置了自动清除binlog，服务启动时报  `ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.` \n\n<!-- more -->\n\n```\n2019-07-20 11:14:19,713 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\ncom.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)\n\tat java.lang.Thread.run(Thread.java:748)\n2019-07-20 11:14:19,717 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR ProductionPipelineRunner - Pipeline execution failed\ncom.streamsets.pipeline.api.StageException: MYSQL_006 - MySql server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\n\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.handleErrors(MysqlSource.java:389)\n\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.produce(MysqlSource.java:225)\n\tat com.streamsets.datacollector.runner.StageRuntime.lambda$execute$2(StageRuntime.java:295)\n\tat com.streamsets.pipeline.api.impl.CreateByRef.call(CreateByRef.java:40)\n\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:243)\n\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:310)\n\tat com.streamsets.datacollector.runner.StagePipe.process(StagePipe.java:219)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.processPipe(ProductionPipelineRunner.java:817)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.runPollSource(ProductionPipelineRunner.java:561)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.run(ProductionPipelineRunner.java:385)\n\tat com.streamsets.datacollector.runner.Pipeline.run(Pipeline.java:529)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipeline.run(ProductionPipeline.java:110)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunnable.run(ProductionPipelineRunnable.java:75)\n\tat com.streamsets.datacollector.execution.runner.standalone.StandaloneRunner.start(StandaloneRunner.java:701)\n\tat com.streamsets.datacollector.execution.runner.common.AsyncRunner.lambda$start$3(AsyncRunner.java:151)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)\n\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)\n\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat com.streamsets.datacollector.metrics.MetricSafeScheduledExecutorService$MetricsTask.run(MetricSafeScheduledExecutorService.java:100)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)\n\t... 1 more\n```\n\n尝试了手动设置偏移量无果。(参考资料 [MySQL Binary Log#Initial Offset](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html#ariaid-title5) ）<br />通过查看运行日志，![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761388749-2ef53ec1-40d5-479b-852e-7dfb7261cd67.png#align=left&display=inline&height=101&name=image.png&originHeight=101&originWidth=304&size=5193&status=done&width=304) <br />发现后台还有在运行之前的offset，突然想起在官方文档.\n> **Note:** If you change the GTID mode on the database server after you have run a pipeline with the MySQL Binary Log origin, you must reset the origin and change the format of the initial offset value. Otherwise, the origin cannot correctly read the offset.\n> When the pipeline stops, the MySQL Binary Log origin notes the offset where it stops reading. When the pipeline starts again, the origin continues processing from the last saved offset. You can reset the origin to process all requested objects.\n\n\n以及<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761746217-5afefc26-937d-44b7-b4c1-ba114e64a154.png#align=left&display=inline&height=139&name=image.png&originHeight=139&originWidth=397&size=14704&status=done&width=397)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761793852-caf1a2f7-1c81-4b3c-b046-19d2d1dda76e.png#align=left&display=inline&height=240&name=image.png&originHeight=240&originWidth=387&size=24451&status=done&width=387)<br />解决办法就简单了，直接在启动时，Reset Origin即可。会从server的当前binlog进行订阅。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761663744-640cf864-f48f-4ffa-9a7a-811ce396caa3.png#align=left&display=inline&height=152&name=image.png&originHeight=152&originWidth=349&size=11373&status=done&width=349)\n\n**总结:** <br />多看官方文档，仔细看，另外，尽量别用翻译工具，否则类似该案例中的origin会被翻译成原点，起源等，会无法联想到sdc的一些概念用词。\n<a name=\"qheIM\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/16/fixed-sdc-mysql-binlog-master-purged/)\n- [我的掘金](https://juejin.im/post/5d3652f96fb9a07eda0355aa)\n- [sdc官方文档>MySQL Binary Log](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html)\n- [MySQL · 答疑解惑 · GTID不一致分析](http://mysql.taobao.org/monthly/2016/01/08/)\n- [Mysql binlog 查看方法](http://soft.dog/2016/06/13/dig-mysql-binlog/)\n- [Mysql之binlog日志说明及利用binlog日志恢复数据操作记录](https://www.cnblogs.com/kevingrace/p/5907254.html)\n- [MySQL的binlog日志](https://www.cnblogs.com/martinzhang/p/3454358.html)\n\n\n","source":"_posts/fixed-sdc-mysql-binlog-master-purged.md","raw":"\n---\n\ntitle: 034-解决streamsets订阅过期binlog导致无法启动问题\n\ndate: 2019-07-22 20:00:52 +0800\n\ntags: [streamsets,sdc,mysql,binlog,etl,数据分析,数据处理]\n\ncategories: 大数据\n\n---\n> 这是坚持技术写作计划（含翻译）的第34篇，定个小目标999，每周最少2篇。\n\n\nstreamsets停机时间过长，mysql master设置了自动清除binlog，服务启动时报  `ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.` \n\n<!-- more -->\n\n```\n2019-07-20 11:14:19,713 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\ncom.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)\n\tat java.lang.Thread.run(Thread.java:748)\n2019-07-20 11:14:19,717 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR ProductionPipelineRunner - Pipeline execution failed\ncom.streamsets.pipeline.api.StageException: MYSQL_006 - MySql server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\n\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.handleErrors(MysqlSource.java:389)\n\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.produce(MysqlSource.java:225)\n\tat com.streamsets.datacollector.runner.StageRuntime.lambda$execute$2(StageRuntime.java:295)\n\tat com.streamsets.pipeline.api.impl.CreateByRef.call(CreateByRef.java:40)\n\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:243)\n\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:310)\n\tat com.streamsets.datacollector.runner.StagePipe.process(StagePipe.java:219)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.processPipe(ProductionPipelineRunner.java:817)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.runPollSource(ProductionPipelineRunner.java:561)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.run(ProductionPipelineRunner.java:385)\n\tat com.streamsets.datacollector.runner.Pipeline.run(Pipeline.java:529)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipeline.run(ProductionPipeline.java:110)\n\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunnable.run(ProductionPipelineRunnable.java:75)\n\tat com.streamsets.datacollector.execution.runner.standalone.StandaloneRunner.start(StandaloneRunner.java:701)\n\tat com.streamsets.datacollector.execution.runner.common.AsyncRunner.lambda$start$3(AsyncRunner.java:151)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)\n\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)\n\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)\n\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat com.streamsets.datacollector.metrics.MetricSafeScheduledExecutorService$MetricsTask.run(MetricSafeScheduledExecutorService.java:100)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)\n\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)\n\t... 1 more\n```\n\n尝试了手动设置偏移量无果。(参考资料 [MySQL Binary Log#Initial Offset](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html#ariaid-title5) ）<br />通过查看运行日志，![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761388749-2ef53ec1-40d5-479b-852e-7dfb7261cd67.png#align=left&display=inline&height=101&name=image.png&originHeight=101&originWidth=304&size=5193&status=done&width=304) <br />发现后台还有在运行之前的offset，突然想起在官方文档.\n> **Note:** If you change the GTID mode on the database server after you have run a pipeline with the MySQL Binary Log origin, you must reset the origin and change the format of the initial offset value. Otherwise, the origin cannot correctly read the offset.\n> When the pipeline stops, the MySQL Binary Log origin notes the offset where it stops reading. When the pipeline starts again, the origin continues processing from the last saved offset. You can reset the origin to process all requested objects.\n\n\n以及<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761746217-5afefc26-937d-44b7-b4c1-ba114e64a154.png#align=left&display=inline&height=139&name=image.png&originHeight=139&originWidth=397&size=14704&status=done&width=397)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761793852-caf1a2f7-1c81-4b3c-b046-19d2d1dda76e.png#align=left&display=inline&height=240&name=image.png&originHeight=240&originWidth=387&size=24451&status=done&width=387)<br />解决办法就简单了，直接在启动时，Reset Origin即可。会从server的当前binlog进行订阅。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563761663744-640cf864-f48f-4ffa-9a7a-811ce396caa3.png#align=left&display=inline&height=152&name=image.png&originHeight=152&originWidth=349&size=11373&status=done&width=349)\n\n**总结:** <br />多看官方文档，仔细看，另外，尽量别用翻译工具，否则类似该案例中的origin会被翻译成原点，起源等，会无法联想到sdc的一些概念用词。\n<a name=\"qheIM\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/16/fixed-sdc-mysql-binlog-master-purged/)\n- [我的掘金](https://juejin.im/post/5d3652f96fb9a07eda0355aa)\n- [sdc官方文档>MySQL Binary Log](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html)\n- [MySQL · 答疑解惑 · GTID不一致分析](http://mysql.taobao.org/monthly/2016/01/08/)\n- [Mysql binlog 查看方法](http://soft.dog/2016/06/13/dig-mysql-binlog/)\n- [Mysql之binlog日志说明及利用binlog日志恢复数据操作记录](https://www.cnblogs.com/kevingrace/p/5907254.html)\n- [MySQL的binlog日志](https://www.cnblogs.com/martinzhang/p/3454358.html)\n\n\n","slug":"fixed-sdc-mysql-binlog-master-purged","published":1,"updated":"2019-08-16T06:11:14.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojd5001024dozo0fznj4","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第34篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>streamsets停机时间过长，mysql master设置了自动清除binlog，服务启动时报  <code>ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</code> </p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2019-07-20 11:14:19,713 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">com.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">2019-07-20 11:14:19,717 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR ProductionPipelineRunner - Pipeline execution failed</span><br><span class=\"line\">com.streamsets.pipeline.api.StageException: MYSQL_006 - MySql server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.handleErrors(MysqlSource.java:389)</span><br><span class=\"line\">\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.produce(MysqlSource.java:225)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StageRuntime.lambda$execute$2(StageRuntime.java:295)</span><br><span class=\"line\">\tat com.streamsets.pipeline.api.impl.CreateByRef.call(CreateByRef.java:40)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:243)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:310)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StagePipe.process(StagePipe.java:219)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.processPipe(ProductionPipelineRunner.java:817)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.runPollSource(ProductionPipelineRunner.java:561)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.run(ProductionPipelineRunner.java:385)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.Pipeline.run(Pipeline.java:529)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipeline.run(ProductionPipeline.java:110)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunnable.run(ProductionPipelineRunnable.java:75)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.standalone.StandaloneRunner.start(StandaloneRunner.java:701)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.AsyncRunner.lambda$start$3(AsyncRunner.java:151)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)</span><br><span class=\"line\">\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)</span><br><span class=\"line\">\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)</span><br><span class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class=\"line\">\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)</span><br><span class=\"line\">\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)</span><br><span class=\"line\">\tat com.streamsets.datacollector.metrics.MetricSafeScheduledExecutorService$MetricsTask.run(MetricSafeScheduledExecutorService.java:100)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">Caused by: com.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)</span><br><span class=\"line\">\t... 1 more</span><br></pre></td></tr></table></figure>\n<p>尝试了手动设置偏移量无果。(参考资料 <a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html#ariaid-title5\" target=\"_blank\" rel=\"noopener\">MySQL Binary Log#Initial Offset</a> ）<br>通过查看运行日志，<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761388749-2ef53ec1-40d5-479b-852e-7dfb7261cd67.png#align=left&amp;display=inline&amp;height=101&amp;name=image.png&amp;originHeight=101&amp;originWidth=304&amp;size=5193&amp;status=done&amp;width=304\" alt=\"image.png\"> <br>发现后台还有在运行之前的offset，突然想起在官方文档.</p>\n<blockquote>\n<p><strong>Note:</strong> If you change the GTID mode on the database server after you have run a pipeline with the MySQL Binary Log origin, you must reset the origin and change the format of the initial offset value. Otherwise, the origin cannot correctly read the offset.<br>When the pipeline stops, the MySQL Binary Log origin notes the offset where it stops reading. When the pipeline starts again, the origin continues processing from the last saved offset. You can reset the origin to process all requested objects.</p>\n</blockquote>\n<p>以及<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761746217-5afefc26-937d-44b7-b4c1-ba114e64a154.png#align=left&amp;display=inline&amp;height=139&amp;name=image.png&amp;originHeight=139&amp;originWidth=397&amp;size=14704&amp;status=done&amp;width=397\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761793852-caf1a2f7-1c81-4b3c-b046-19d2d1dda76e.png#align=left&amp;display=inline&amp;height=240&amp;name=image.png&amp;originHeight=240&amp;originWidth=387&amp;size=24451&amp;status=done&amp;width=387\" alt=\"image.png\"><br>解决办法就简单了，直接在启动时，Reset Origin即可。会从server的当前binlog进行订阅。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761663744-640cf864-f48f-4ffa-9a7a-811ce396caa3.png#align=left&amp;display=inline&amp;height=152&amp;name=image.png&amp;originHeight=152&amp;originWidth=349&amp;size=11373&amp;status=done&amp;width=349\" alt=\"image.png\"></p>\n<p><strong>总结:</strong> <br>多看官方文档，仔细看，另外，尽量别用翻译工具，否则类似该案例中的origin会被翻译成原点，起源等，会无法联想到sdc的一些概念用词。<br><a name=\"qheIM\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/16/fixed-sdc-mysql-binlog-master-purged/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3652f96fb9a07eda0355aa\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html\" target=\"_blank\" rel=\"noopener\">sdc官方文档&gt;MySQL Binary Log</a></li>\n<li><a href=\"http://mysql.taobao.org/monthly/2016/01/08/\" target=\"_blank\" rel=\"noopener\">MySQL · 答疑解惑 · GTID不一致分析</a></li>\n<li><a href=\"http://soft.dog/2016/06/13/dig-mysql-binlog/\" target=\"_blank\" rel=\"noopener\">Mysql binlog 查看方法</a></li>\n<li><a href=\"https://www.cnblogs.com/kevingrace/p/5907254.html\" target=\"_blank\" rel=\"noopener\">Mysql之binlog日志说明及利用binlog日志恢复数据操作记录</a></li>\n<li><a href=\"https://www.cnblogs.com/martinzhang/p/3454358.html\" target=\"_blank\" rel=\"noopener\">MySQL的binlog日志</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第34篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>streamsets停机时间过长，mysql master设置了自动清除binlog，服务启动时报  <code>ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</code> </p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2019-07-20 11:14:19,713 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR MysqlSource - BinaryLogClient server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">com.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">2019-07-20 11:14:19,717 [user:*admin] [pipeline:demo/demo-e2cf-4f6d-b2dc-ce7fc5aeb041] [runner:] [thread:ProductionPipelineRunnable-demo-e2cf-4f6d-b2dc-ce7fc5aeb041-demo] ERROR ProductionPipelineRunner - Pipeline execution failed</span><br><span class=\"line\">com.streamsets.pipeline.api.StageException: MYSQL_006 - MySql server error: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.handleErrors(MysqlSource.java:389)</span><br><span class=\"line\">\tat com.streamsets.pipeline.stage.origin.mysql.MysqlSource.produce(MysqlSource.java:225)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StageRuntime.lambda$execute$2(StageRuntime.java:295)</span><br><span class=\"line\">\tat com.streamsets.pipeline.api.impl.CreateByRef.call(CreateByRef.java:40)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:243)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StageRuntime.execute(StageRuntime.java:310)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.StagePipe.process(StagePipe.java:219)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.processPipe(ProductionPipelineRunner.java:817)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.runPollSource(ProductionPipelineRunner.java:561)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunner.run(ProductionPipelineRunner.java:385)</span><br><span class=\"line\">\tat com.streamsets.datacollector.runner.Pipeline.run(Pipeline.java:529)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipeline.run(ProductionPipeline.java:110)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunnable.run(ProductionPipelineRunnable.java:75)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.standalone.StandaloneRunner.start(StandaloneRunner.java:701)</span><br><span class=\"line\">\tat com.streamsets.datacollector.execution.runner.common.AsyncRunner.lambda$start$3(AsyncRunner.java:151)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)</span><br><span class=\"line\">\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.lambda$call$0(SafeScheduledExecutorService.java:226)</span><br><span class=\"line\">\tat com.streamsets.datacollector.security.GroupsInScope.execute(GroupsInScope.java:33)</span><br><span class=\"line\">\tat com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:222)</span><br><span class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class=\"line\">\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)</span><br><span class=\"line\">\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)</span><br><span class=\"line\">\tat com.streamsets.datacollector.metrics.MetricSafeScheduledExecutorService$MetricsTask.run(MetricSafeScheduledExecutorService.java:100)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">Caused by: com.github.shyiko.mysql.binlog.network.ServerException: The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.listenForEventPackets(BinaryLogClient.java:882)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:559)</span><br><span class=\"line\">\tat com.github.shyiko.mysql.binlog.BinaryLogClient$7.run(BinaryLogClient.java:793)</span><br><span class=\"line\">\t... 1 more</span><br></pre></td></tr></table></figure>\n<p>尝试了手动设置偏移量无果。(参考资料 <a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html#ariaid-title5\" target=\"_blank\" rel=\"noopener\">MySQL Binary Log#Initial Offset</a> ）<br>通过查看运行日志，<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761388749-2ef53ec1-40d5-479b-852e-7dfb7261cd67.png#align=left&amp;display=inline&amp;height=101&amp;name=image.png&amp;originHeight=101&amp;originWidth=304&amp;size=5193&amp;status=done&amp;width=304\" alt=\"image.png\"> <br>发现后台还有在运行之前的offset，突然想起在官方文档.</p>\n<blockquote>\n<p><strong>Note:</strong> If you change the GTID mode on the database server after you have run a pipeline with the MySQL Binary Log origin, you must reset the origin and change the format of the initial offset value. Otherwise, the origin cannot correctly read the offset.<br>When the pipeline stops, the MySQL Binary Log origin notes the offset where it stops reading. When the pipeline starts again, the origin continues processing from the last saved offset. You can reset the origin to process all requested objects.</p>\n</blockquote>\n<p>以及<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761746217-5afefc26-937d-44b7-b4c1-ba114e64a154.png#align=left&amp;display=inline&amp;height=139&amp;name=image.png&amp;originHeight=139&amp;originWidth=397&amp;size=14704&amp;status=done&amp;width=397\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761793852-caf1a2f7-1c81-4b3c-b046-19d2d1dda76e.png#align=left&amp;display=inline&amp;height=240&amp;name=image.png&amp;originHeight=240&amp;originWidth=387&amp;size=24451&amp;status=done&amp;width=387\" alt=\"image.png\"><br>解决办法就简单了，直接在启动时，Reset Origin即可。会从server的当前binlog进行订阅。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563761663744-640cf864-f48f-4ffa-9a7a-811ce396caa3.png#align=left&amp;display=inline&amp;height=152&amp;name=image.png&amp;originHeight=152&amp;originWidth=349&amp;size=11373&amp;status=done&amp;width=349\" alt=\"image.png\"></p>\n<p><strong>总结:</strong> <br>多看官方文档，仔细看，另外，尽量别用翻译工具，否则类似该案例中的origin会被翻译成原点，起源等，会无法联想到sdc的一些概念用词。<br><a name=\"qheIM\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/16/fixed-sdc-mysql-binlog-master-purged/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3652f96fb9a07eda0355aa\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html\" target=\"_blank\" rel=\"noopener\">sdc官方文档&gt;MySQL Binary Log</a></li>\n<li><a href=\"http://mysql.taobao.org/monthly/2016/01/08/\" target=\"_blank\" rel=\"noopener\">MySQL · 答疑解惑 · GTID不一致分析</a></li>\n<li><a href=\"http://soft.dog/2016/06/13/dig-mysql-binlog/\" target=\"_blank\" rel=\"noopener\">Mysql binlog 查看方法</a></li>\n<li><a href=\"https://www.cnblogs.com/kevingrace/p/5907254.html\" target=\"_blank\" rel=\"noopener\">Mysql之binlog日志说明及利用binlog日志恢复数据操作记录</a></li>\n<li><a href=\"https://www.cnblogs.com/martinzhang/p/3454358.html\" target=\"_blank\" rel=\"noopener\">MySQL的binlog日志</a></li>\n</ul>"},{"title":"使用github搭建自己的maven库","date":"2018-10-11T02:24:40.000Z","_content":"\n\n\n建议使用maven中央仓库进行发布，不过我嫌步骤太繁琐了，还需要审核，所以才用github来做。发布中央仓库的可以参考[Maven 发布自己的项目到 Maven 中央仓库](https://www.cnblogs.com/binarylei/p/8628245.html)\n\n\n\n使用github分两种，一种是mvn install 或者deploy到本地路径，然后git add && commit && push ，一种是[maven-plugins](https://github.com/github/maven-plugins#readme)\n\n\n\n<!--more-->\n\n\n\n两种方案都需要在github创建相应的repo，具体创建步骤不多说，自行百度。\n\n\n\n## 1. maven-plugins\n\n参考 https://stackoverflow.com/a/14013645\n\n1.修改 `~/.m2/settings.xml`\n\n```xml\n<!-- NOTE: MAKE SURE THAT settings.xml IS NOT WORLD READABLE! -->\n<settings>\n  <servers>\n    <server>\n      <id>github</id>\n      <username>YOUR-USERNAME</username>\n      <password>YOUR-PASSWORD</password>\n    </server>\n  </servers>\n</settings>\n```\n\n2.修改pom.xml\n\n```xml\n<properties>\n    <!-- github server corresponds to entry in ~/.m2/settings.xml -->\n    <github.global.server>github</github.global.server>\n</properties>\n\n<distributionManagement>\n    <repository>\n        <id>internal.repo</id>\n        <name>Temporary Staging Repository</name>\n        <url>file://${project.build.directory}/mvn-repo</url>\n    </repository>\n</distributionManagement>\n\n\t<build>\n\t\t<plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <version>2.8.2</version>\n                <configuration>\n                    <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>\n                </configuration>\n            </plugin>\n\t\t</plugins>\n\t</build>\n```\n\n3.修改pom.xml，配置maven-plugins\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.github.github</groupId>\n            <artifactId>site-maven-plugin</artifactId>\n            <version>0.12</version>\n            <configuration>\n                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->\n                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->\n                <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->\n                <branch>refs/heads/master</branch>                       <!-- remote branch name -->\n                <includes><include>**/*</include></includes>\n                <repositoryName>YOUR-REPOSITORY-NAME</repositoryName>      <!-- github repo name -->\n                <repositoryOwner>YOUR-GITHUB-USERNAME</repositoryOwner>    <!-- github username  -->\n                <force>false</force> <!-- force commit or no -->\n                <merge>true</merge> <!-- merge or no -->\n            </configuration>\n            <executions>\n              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->\n              <execution>\n                <goals>\n                  <goal>site</goal>\n                </goals>\n                <phase>deploy</phase>\n              </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n4.提交到github\n\n```bash\nmvn clean deploy\n```\n\n\n## 2. mvn deploy && git add && commit && push\n\n参考 https://blog.csdn.net/u010442302/article/details/74639357\n\n1.clone github repo\n\n```bash\ngit clone https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME /home/my/code/maven-repo/\n```\n\n2.命令行执行mvn deploy\n\n```bash\nmvn deploy -DaltDeploymentRepository=my-mvn-repo::default::file:/home/my/code/maven-repo/\n```\n\n3.push到github\n\n```bash\ncd /home/my/code/maven-repo/\ngit add .\ngit commit -m 'Maven artifacts for 0.0.1'\ngit push -u origin master\n```\n\n\n\n## 3. 在项目中使用github repo\n\n```xml\n<repositories>\n    <repository>\n        <id>YOUR-PROJECT-NAME-mvn-repo</id>\n        <url>https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-PROJECT-NAME/master/</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n    </repository>\n</repositories>\n```\n\n\n\n## 总结\n\n如果可以修改pom建议用maven-plugins，如果不能修改pom，则使用命令行`mvn deploy&&git add&&commit&&push`","source":"_posts/git-maven-howto.md","raw":"---\ntitle: 使用github搭建自己的maven库\ndate: 2018-10-11 10:24:40\ntags: [github,maven,central,mvn-deploy]\n---\n\n\n\n建议使用maven中央仓库进行发布，不过我嫌步骤太繁琐了，还需要审核，所以才用github来做。发布中央仓库的可以参考[Maven 发布自己的项目到 Maven 中央仓库](https://www.cnblogs.com/binarylei/p/8628245.html)\n\n\n\n使用github分两种，一种是mvn install 或者deploy到本地路径，然后git add && commit && push ，一种是[maven-plugins](https://github.com/github/maven-plugins#readme)\n\n\n\n<!--more-->\n\n\n\n两种方案都需要在github创建相应的repo，具体创建步骤不多说，自行百度。\n\n\n\n## 1. maven-plugins\n\n参考 https://stackoverflow.com/a/14013645\n\n1.修改 `~/.m2/settings.xml`\n\n```xml\n<!-- NOTE: MAKE SURE THAT settings.xml IS NOT WORLD READABLE! -->\n<settings>\n  <servers>\n    <server>\n      <id>github</id>\n      <username>YOUR-USERNAME</username>\n      <password>YOUR-PASSWORD</password>\n    </server>\n  </servers>\n</settings>\n```\n\n2.修改pom.xml\n\n```xml\n<properties>\n    <!-- github server corresponds to entry in ~/.m2/settings.xml -->\n    <github.global.server>github</github.global.server>\n</properties>\n\n<distributionManagement>\n    <repository>\n        <id>internal.repo</id>\n        <name>Temporary Staging Repository</name>\n        <url>file://${project.build.directory}/mvn-repo</url>\n    </repository>\n</distributionManagement>\n\n\t<build>\n\t\t<plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <version>2.8.2</version>\n                <configuration>\n                    <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>\n                </configuration>\n            </plugin>\n\t\t</plugins>\n\t</build>\n```\n\n3.修改pom.xml，配置maven-plugins\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.github.github</groupId>\n            <artifactId>site-maven-plugin</artifactId>\n            <version>0.12</version>\n            <configuration>\n                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->\n                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->\n                <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->\n                <branch>refs/heads/master</branch>                       <!-- remote branch name -->\n                <includes><include>**/*</include></includes>\n                <repositoryName>YOUR-REPOSITORY-NAME</repositoryName>      <!-- github repo name -->\n                <repositoryOwner>YOUR-GITHUB-USERNAME</repositoryOwner>    <!-- github username  -->\n                <force>false</force> <!-- force commit or no -->\n                <merge>true</merge> <!-- merge or no -->\n            </configuration>\n            <executions>\n              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->\n              <execution>\n                <goals>\n                  <goal>site</goal>\n                </goals>\n                <phase>deploy</phase>\n              </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n4.提交到github\n\n```bash\nmvn clean deploy\n```\n\n\n## 2. mvn deploy && git add && commit && push\n\n参考 https://blog.csdn.net/u010442302/article/details/74639357\n\n1.clone github repo\n\n```bash\ngit clone https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME /home/my/code/maven-repo/\n```\n\n2.命令行执行mvn deploy\n\n```bash\nmvn deploy -DaltDeploymentRepository=my-mvn-repo::default::file:/home/my/code/maven-repo/\n```\n\n3.push到github\n\n```bash\ncd /home/my/code/maven-repo/\ngit add .\ngit commit -m 'Maven artifacts for 0.0.1'\ngit push -u origin master\n```\n\n\n\n## 3. 在项目中使用github repo\n\n```xml\n<repositories>\n    <repository>\n        <id>YOUR-PROJECT-NAME-mvn-repo</id>\n        <url>https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-PROJECT-NAME/master/</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n    </repository>\n</repositories>\n```\n\n\n\n## 总结\n\n如果可以修改pom建议用maven-plugins，如果不能修改pom，则使用命令行`mvn deploy&&git add&&commit&&push`","slug":"git-maven-howto","published":1,"updated":"2019-08-16T05:56:21.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojd7001224do0azsms9v","content":"<p>建议使用maven中央仓库进行发布，不过我嫌步骤太繁琐了，还需要审核，所以才用github来做。发布中央仓库的可以参考<a href=\"https://www.cnblogs.com/binarylei/p/8628245.html\" target=\"_blank\" rel=\"noopener\">Maven 发布自己的项目到 Maven 中央仓库</a></p>\n<p>使用github分两种，一种是mvn install 或者deploy到本地路径，然后git add &amp;&amp; commit &amp;&amp; push ，一种是<a href=\"https://github.com/github/maven-plugins#readme\" target=\"_blank\" rel=\"noopener\">maven-plugins</a></p>\n<a id=\"more\"></a>\n<p>两种方案都需要在github创建相应的repo，具体创建步骤不多说，自行百度。</p>\n<h2 id=\"1-maven-plugins\"><a href=\"#1-maven-plugins\" class=\"headerlink\" title=\"1. maven-plugins\"></a>1. maven-plugins</h2><p>参考 <a href=\"https://stackoverflow.com/a/14013645\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/14013645</a></p>\n<p>1.修改 <code>~/.m2/settings.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- <span class=\"doctag\">NOTE:</span> MAKE SURE THAT settings.xml IS NOT WORLD READABLE! --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>github<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>YOUR-USERNAME<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>YOUR-PASSWORD<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.修改pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- github server corresponds to entry in ~/.m2/settings.xml --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">github.global.server</span>&gt;</span>github<span class=\"tag\">&lt;/<span class=\"name\">github.global.server</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>internal.repo<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Temporary Staging Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>file://$&#123;project.build.directory&#125;/mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">altDeploymentRepository</span>&gt;</span>internal.repo::default::file://$&#123;project.build.directory&#125;/mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">altDeploymentRepository</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3.修改pom.xml，配置maven-plugins</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.github<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>site-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>Maven artifacts for $&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span>  <span class=\"comment\">&lt;!-- git commit message --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">noJekyll</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">noJekyll</span>&gt;</span>                                  <span class=\"comment\">&lt;!-- disable webpage processing --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span> <span class=\"comment\">&lt;!-- matches distribution management repository url above --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">branch</span>&gt;</span>refs/heads/master<span class=\"tag\">&lt;/<span class=\"name\">branch</span>&gt;</span>                       <span class=\"comment\">&lt;!-- remote branch name --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repositoryName</span>&gt;</span>YOUR-REPOSITORY-NAME<span class=\"tag\">&lt;/<span class=\"name\">repositoryName</span>&gt;</span>      <span class=\"comment\">&lt;!-- github repo name --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repositoryOwner</span>&gt;</span>YOUR-GITHUB-USERNAME<span class=\"tag\">&lt;/<span class=\"name\">repositoryOwner</span>&gt;</span>    <span class=\"comment\">&lt;!-- github username  --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">force</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">force</span>&gt;</span> <span class=\"comment\">&lt;!-- force commit or no --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">merge</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span> <span class=\"comment\">&lt;!-- merge or no --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>site<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>deploy<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.提交到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean deploy</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-mvn-deploy-amp-amp-git-add-amp-amp-commit-amp-amp-push\"><a href=\"#2-mvn-deploy-amp-amp-git-add-amp-amp-commit-amp-amp-push\" class=\"headerlink\" title=\"2. mvn deploy &amp;&amp; git add &amp;&amp; commit &amp;&amp; push\"></a>2. mvn deploy &amp;&amp; git add &amp;&amp; commit &amp;&amp; push</h2><p>参考 <a href=\"https://blog.csdn.net/u010442302/article/details/74639357\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010442302/article/details/74639357</a></p>\n<p>1.clone github repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME /home/my/code/maven-repo/</span><br></pre></td></tr></table></figure>\n<p>2.命令行执行mvn deploy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn deploy -DaltDeploymentRepository=my-mvn-repo::default::file:/home/my/code/maven-repo/</span><br></pre></td></tr></table></figure>\n<p>3.push到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/my/code/maven-repo/</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'Maven artifacts for 0.0.1'</span></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-在项目中使用github-repo\"><a href=\"#3-在项目中使用github-repo\" class=\"headerlink\" title=\"3. 在项目中使用github repo\"></a>3. 在项目中使用github repo</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>YOUR-PROJECT-NAME-mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-PROJECT-NAME/master/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">updatePolicy</span>&gt;</span>always<span class=\"tag\">&lt;/<span class=\"name\">updatePolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果可以修改pom建议用maven-plugins，如果不能修改pom，则使用命令行<code>mvn deploy&amp;&amp;git add&amp;&amp;commit&amp;&amp;push</code></p>\n","site":{"data":{}},"excerpt":"<p>建议使用maven中央仓库进行发布，不过我嫌步骤太繁琐了，还需要审核，所以才用github来做。发布中央仓库的可以参考<a href=\"https://www.cnblogs.com/binarylei/p/8628245.html\" target=\"_blank\" rel=\"noopener\">Maven 发布自己的项目到 Maven 中央仓库</a></p>\n<p>使用github分两种，一种是mvn install 或者deploy到本地路径，然后git add &amp;&amp; commit &amp;&amp; push ，一种是<a href=\"https://github.com/github/maven-plugins#readme\" target=\"_blank\" rel=\"noopener\">maven-plugins</a></p>","more":"<p>两种方案都需要在github创建相应的repo，具体创建步骤不多说，自行百度。</p>\n<h2 id=\"1-maven-plugins\"><a href=\"#1-maven-plugins\" class=\"headerlink\" title=\"1. maven-plugins\"></a>1. maven-plugins</h2><p>参考 <a href=\"https://stackoverflow.com/a/14013645\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/14013645</a></p>\n<p>1.修改 <code>~/.m2/settings.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- <span class=\"doctag\">NOTE:</span> MAKE SURE THAT settings.xml IS NOT WORLD READABLE! --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>github<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>YOUR-USERNAME<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>YOUR-PASSWORD<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.修改pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- github server corresponds to entry in ~/.m2/settings.xml --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">github.global.server</span>&gt;</span>github<span class=\"tag\">&lt;/<span class=\"name\">github.global.server</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>internal.repo<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Temporary Staging Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>file://$&#123;project.build.directory&#125;/mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">altDeploymentRepository</span>&gt;</span>internal.repo::default::file://$&#123;project.build.directory&#125;/mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">altDeploymentRepository</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3.修改pom.xml，配置maven-plugins</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.github<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>site-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>Maven artifacts for $&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span>  <span class=\"comment\">&lt;!-- git commit message --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">noJekyll</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">noJekyll</span>&gt;</span>                                  <span class=\"comment\">&lt;!-- disable webpage processing --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span> <span class=\"comment\">&lt;!-- matches distribution management repository url above --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">branch</span>&gt;</span>refs/heads/master<span class=\"tag\">&lt;/<span class=\"name\">branch</span>&gt;</span>                       <span class=\"comment\">&lt;!-- remote branch name --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repositoryName</span>&gt;</span>YOUR-REPOSITORY-NAME<span class=\"tag\">&lt;/<span class=\"name\">repositoryName</span>&gt;</span>      <span class=\"comment\">&lt;!-- github repo name --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repositoryOwner</span>&gt;</span>YOUR-GITHUB-USERNAME<span class=\"tag\">&lt;/<span class=\"name\">repositoryOwner</span>&gt;</span>    <span class=\"comment\">&lt;!-- github username  --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">force</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">force</span>&gt;</span> <span class=\"comment\">&lt;!-- force commit or no --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">merge</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span> <span class=\"comment\">&lt;!-- merge or no --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>site<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>deploy<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.提交到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean deploy</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-mvn-deploy-amp-amp-git-add-amp-amp-commit-amp-amp-push\"><a href=\"#2-mvn-deploy-amp-amp-git-add-amp-amp-commit-amp-amp-push\" class=\"headerlink\" title=\"2. mvn deploy &amp;&amp; git add &amp;&amp; commit &amp;&amp; push\"></a>2. mvn deploy &amp;&amp; git add &amp;&amp; commit &amp;&amp; push</h2><p>参考 <a href=\"https://blog.csdn.net/u010442302/article/details/74639357\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010442302/article/details/74639357</a></p>\n<p>1.clone github repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME /home/my/code/maven-repo/</span><br></pre></td></tr></table></figure>\n<p>2.命令行执行mvn deploy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn deploy -DaltDeploymentRepository=my-mvn-repo::default::file:/home/my/code/maven-repo/</span><br></pre></td></tr></table></figure>\n<p>3.push到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/my/code/maven-repo/</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'Maven artifacts for 0.0.1'</span></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-在项目中使用github-repo\"><a href=\"#3-在项目中使用github-repo\" class=\"headerlink\" title=\"3. 在项目中使用github repo\"></a>3. 在项目中使用github repo</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>YOUR-PROJECT-NAME-mvn-repo<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-PROJECT-NAME/master/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">updatePolicy</span>&gt;</span>always<span class=\"tag\">&lt;/<span class=\"name\">updatePolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果可以修改pom建议用maven-plugins，如果不能修改pom，则使用命令行<code>mvn deploy&amp;&amp;git add&amp;&amp;commit&amp;&amp;push</code></p>"},{"title":"Google Container Registry(gcr.io) 中国可用镜像(长期维护)","date":"2017-11-15T04:04:14.000Z","_content":"\ngoogle镜像库Google Container Registry([gcr.io][]) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 [Docker 中国官方镜像加速][Docker中国官方镜像加速] ,[加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台]速度还是很快的\n\n<!--more-->\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg)\n\n## 何时同步\n\n使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 [https://github.com/anjia0532/gcr.io_mirror][] , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可\n\n## 如何使用\n\n将 `gcr.io/google-containers` 替换为 `anjia0532` 即可.\n\n## 缺少镜像\n\n如果本项目中缺少 `gcr.io` 的镜像,[请提issues][]\n\n\n\n[gcr.io]: https://cloud.google.com/container-registry/\n[Docker中国官方镜像加速]: https://www.docker-cn.com/registry-mirror\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[https://github.com/anjia0532/gcr.io_mirror]: https://github.com/anjia0532/gcr.io_mirror\n[请提issues]: https://github.com/anjia0532/gcr.io_mirror/issues/new\n","source":"_posts/gcr-io-image-mirror.md","raw":"---\ntitle: Google Container Registry(gcr.io) 中国可用镜像(长期维护)\ndate: 2017-11-15 12:04:14\ntags: [k8s,kubernetes,rancher,gcr.io]\n---\n\ngoogle镜像库Google Container Registry([gcr.io][]) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 [Docker 中国官方镜像加速][Docker中国官方镜像加速] ,[加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台]速度还是很快的\n\n<!--more-->\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg)\n\n## 何时同步\n\n使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 [https://github.com/anjia0532/gcr.io_mirror][] , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可\n\n## 如何使用\n\n将 `gcr.io/google-containers` 替换为 `anjia0532` 即可.\n\n## 缺少镜像\n\n如果本项目中缺少 `gcr.io` 的镜像,[请提issues][]\n\n\n\n[gcr.io]: https://cloud.google.com/container-registry/\n[Docker中国官方镜像加速]: https://www.docker-cn.com/registry-mirror\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[https://github.com/anjia0532/gcr.io_mirror]: https://github.com/anjia0532/gcr.io_mirror\n[请提issues]: https://github.com/anjia0532/gcr.io_mirror/issues/new\n","slug":"gcr-io-image-mirror","published":1,"updated":"2019-08-16T05:56:21.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojd8001524do0lhfetch","content":"<p>google镜像库Google Container Registry(<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"noopener\">gcr.io</a>) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 <a href=\"https://www.docker-cn.com/registry-mirror\" target=\"_blank\" rel=\"noopener\">Docker 中国官方镜像加速</a> ,<a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a>速度还是很快的</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg\" alt=\"\"></p>\n<h2 id=\"何时同步\"><a href=\"#何时同步\" class=\"headerlink\" title=\"何时同步\"></a>何时同步</h2><p>使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 <a href=\"https://github.com/anjia0532/gcr.io_mirror\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/gcr.io_mirror</a> , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>将 <code>gcr.io/google-containers</code> 替换为 <code>anjia0532</code> 即可.</p>\n<h2 id=\"缺少镜像\"><a href=\"#缺少镜像\" class=\"headerlink\" title=\"缺少镜像\"></a>缺少镜像</h2><p>如果本项目中缺少 <code>gcr.io</code> 的镜像,<a href=\"https://github.com/anjia0532/gcr.io_mirror/issues/new\" target=\"_blank\" rel=\"noopener\">请提issues</a></p>\n","site":{"data":{}},"excerpt":"<p>google镜像库Google Container Registry(<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"noopener\">gcr.io</a>) 被gfw墙了。花了点时间用github + travis ci + docker hub成功将gcr.io的全部镜像同步到docker hub了。配合 国内各种加速器 <a href=\"https://www.docker-cn.com/registry-mirror\" target=\"_blank\" rel=\"noopener\">Docker 中国官方镜像加速</a> ,<a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a>速度还是很快的</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fliqwie5huj20qh0dit9y.jpg\" alt=\"\"></p>\n<h2 id=\"何时同步\"><a href=\"#何时同步\" class=\"headerlink\" title=\"何时同步\"></a>何时同步</h2><p>使用了 travis ci 的定时构建功能，每天同步一次，同步成功后，会将结果更新到 <a href=\"https://github.com/anjia0532/gcr.io_mirror\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/gcr.io_mirror</a> , 注意，同步时间为 UTC 时间，换成北京时间+8小时即可</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>将 <code>gcr.io/google-containers</code> 替换为 <code>anjia0532</code> 即可.</p>\n<h2 id=\"缺少镜像\"><a href=\"#缺少镜像\" class=\"headerlink\" title=\"缺少镜像\"></a>缺少镜像</h2><p>如果本项目中缺少 <code>gcr.io</code> 的镜像,<a href=\"https://github.com/anjia0532/gcr.io_mirror/issues/new\" target=\"_blank\" rel=\"noopener\">请提issues</a></p>"},{"title":"gitlab迁移到docker并升级大版本到10.1.1和汉化","date":"2017-11-07T02:38:37.000Z","_content":"\n本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式\n\n<!--more-->\n\n## gitlab备份\n\n### 查看现有版本\n```bash\nsudo gitlab-rake gitlab:env:info\n\n...\nGitLab information\nVersion:    9.2.5\n...\n```\n\n### 备份\n在原服务器运行\n```\nsudo gitlab-rake gitlab:backup:create RAILS_ENV=production\n\nsudo sh -c 'umask 0077; tar -cf /var/opt/gitlab/backups/$(date \"+etc-gitlab-%s_%Y_%m_%d.tar\") -C / etc/gitlab'\n```\n\n通过`sudo ls -lah /var/opt/gitlab/backups | grep $(date \"+%Y_%m_%d\" )` 查看\n\n```\n-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar\n-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar\n```\n\n### 移动到目标服务器\n\n使用`scp`将备份文件复制到目标主机\n\n`username`是用户名\n`ip`是来源主机ip\n\n登陆目标主机，\n\n```bash\nsudo mkdir -p /data/gitlab/data/backups\n\nscp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar\nscp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/\n\n# 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传\n```\n\n## gitlab恢复\n\n### docker-compose\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'gitlab/gitlab-ce:x.x.x-ce.0' # 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n`docker-compose up -d`\n\n### 恢复数据\n\n```bash\ndocker exec -it gitlab_gitlab_1 /bin/bash\n\ngitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 # 1510024070_gitlab_backup.tar 的前段\ntar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /\n\n```\n\n访问以下http://ip/如果正常，则执行`docker-compose down`\n\n## gitlab升级和汉化\n\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'anjia0532/gitlab-ce-zh:10.1.1-ce.0' # 汉化的10.1.1版本\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n参考连接:\n\n- [gitlab服务器迁移--深山鬼怪][]\n\n- [Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 -- baowei][GitlabCe8.9升级/迁移到gitlabCe9.3.4--]\n\n- [Backups -- gitlab-ce-doc][Backups--Gitlab-ce-doc]\n\n博客 [https://anjia.ml/2017/11/07/gitlab-upgrade/][blog]\n掘金 [https://juejin.im/post/5a0170a9f265da430702aea5][juejin]\n简书 [http://www.jianshu.com/p/3ac4bd8372e0][jianshu]\n\n[blog]: https://anjia.ml/2017/11/07/gitlab-upgrade/\n[juejin]: https://juejin.im/post/5a0170a9f265da430702aea5\n[jianshu]: http://www.jianshu.com/p/3ac4bd8372e0\n[gitlab服务器迁移--深山鬼怪]: http://www.cnblogs.com/wenwei-blog/p/6362829.html\n[GitlabCe8.9升级/迁移到gitlabCe9.3.4--]: http://www.jianshu.com/p/79447d5bf99e\n[Backups--Gitlab-ce-doc]: https://docs.gitlab.com/omnibus/settings/backups.html\n","source":"_posts/gitlab-upgrade.md","raw":"---\ntitle: gitlab迁移到docker并升级大版本到10.1.1和汉化\ndate: 2017-11-07 10:38:37\ntags: [gitlab,docker,docker-compose]\n---\n\n本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式\n\n<!--more-->\n\n## gitlab备份\n\n### 查看现有版本\n```bash\nsudo gitlab-rake gitlab:env:info\n\n...\nGitLab information\nVersion:    9.2.5\n...\n```\n\n### 备份\n在原服务器运行\n```\nsudo gitlab-rake gitlab:backup:create RAILS_ENV=production\n\nsudo sh -c 'umask 0077; tar -cf /var/opt/gitlab/backups/$(date \"+etc-gitlab-%s_%Y_%m_%d.tar\") -C / etc/gitlab'\n```\n\n通过`sudo ls -lah /var/opt/gitlab/backups | grep $(date \"+%Y_%m_%d\" )` 查看\n\n```\n-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar\n-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar\n```\n\n### 移动到目标服务器\n\n使用`scp`将备份文件复制到目标主机\n\n`username`是用户名\n`ip`是来源主机ip\n\n登陆目标主机，\n\n```bash\nsudo mkdir -p /data/gitlab/data/backups\n\nscp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar\nscp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/\n\n# 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传\n```\n\n## gitlab恢复\n\n### docker-compose\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'gitlab/gitlab-ce:x.x.x-ce.0' # 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n`docker-compose up -d`\n\n### 恢复数据\n\n```bash\ndocker exec -it gitlab_gitlab_1 /bin/bash\n\ngitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 # 1510024070_gitlab_backup.tar 的前段\ntar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /\n\n```\n\n访问以下http://ip/如果正常，则执行`docker-compose down`\n\n## gitlab升级和汉化\n\n```yaml\nversion: '2'\nservices:\n    gitlab:\n      image: 'anjia0532/gitlab-ce-zh:10.1.1-ce.0' # 汉化的10.1.1版本\n      restart: unless-stopped\n      ports:\n        - '80:80'\n        - '443:443'\n        - '22:22'\n      volumes:\n        - config:/etc/gitlab\n        - data:/var/opt/gitlab\n        - logs:/var/log/gitlab\nvolumes:\n    config:/data/gitlab/config\n    data:/data/gitlab/data\n    logs:/data/gitlab/log\n```\n\n参考连接:\n\n- [gitlab服务器迁移--深山鬼怪][]\n\n- [Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 -- baowei][GitlabCe8.9升级/迁移到gitlabCe9.3.4--]\n\n- [Backups -- gitlab-ce-doc][Backups--Gitlab-ce-doc]\n\n博客 [https://anjia.ml/2017/11/07/gitlab-upgrade/][blog]\n掘金 [https://juejin.im/post/5a0170a9f265da430702aea5][juejin]\n简书 [http://www.jianshu.com/p/3ac4bd8372e0][jianshu]\n\n[blog]: https://anjia.ml/2017/11/07/gitlab-upgrade/\n[juejin]: https://juejin.im/post/5a0170a9f265da430702aea5\n[jianshu]: http://www.jianshu.com/p/3ac4bd8372e0\n[gitlab服务器迁移--深山鬼怪]: http://www.cnblogs.com/wenwei-blog/p/6362829.html\n[GitlabCe8.9升级/迁移到gitlabCe9.3.4--]: http://www.jianshu.com/p/79447d5bf99e\n[Backups--Gitlab-ce-doc]: https://docs.gitlab.com/omnibus/settings/backups.html\n","slug":"gitlab-upgrade","published":1,"updated":"2019-08-16T05:56:21.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdb001824do4d3bnmlx","content":"<p>本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式</p>\n<a id=\"more\"></a>\n<h2 id=\"gitlab备份\"><a href=\"#gitlab备份\" class=\"headerlink\" title=\"gitlab备份\"></a>gitlab备份</h2><h3 id=\"查看现有版本\"><a href=\"#查看现有版本\" class=\"headerlink\" title=\"查看现有版本\"></a>查看现有版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:env:info</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">GitLab information</span><br><span class=\"line\">Version:    9.2.5</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>在原服务器运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sh -c &apos;umask 0077; tar -cf /var/opt/gitlab/backups/$(date &quot;+etc-gitlab-%s_%Y_%m_%d.tar&quot;) -C / etc/gitlab&apos;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>sudo ls -lah /var/opt/gitlab/backups | grep $(date &quot;+%Y_%m_%d&quot; )</code> 查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar</span><br><span class=\"line\">-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动到目标服务器\"><a href=\"#移动到目标服务器\" class=\"headerlink\" title=\"移动到目标服务器\"></a>移动到目标服务器</h3><p>使用<code>scp</code>将备份文件复制到目标主机</p>\n<p><code>username</code>是用户名<br><code>ip</code>是来源主机ip</p>\n<p>登陆目标主机，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /data/gitlab/data/backups</span><br><span class=\"line\"></span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar</span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gitlab恢复\"><a href=\"#gitlab恢复\" class=\"headerlink\" title=\"gitlab恢复\"></a>gitlab恢复</h2><h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'gitlab/gitlab-ce:x.x.x-ce.0'</span> <span class=\"comment\"># 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p><code>docker-compose up -d</code></p>\n<h3 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it gitlab_gitlab_1 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 <span class=\"comment\"># 1510024070_gitlab_backup.tar 的前段</span></span><br><span class=\"line\">tar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /</span><br></pre></td></tr></table></figure>\n<p>访问以下<a href=\"http://ip/如果正常，则执行`docker-compose\" target=\"_blank\" rel=\"noopener\">http://ip/如果正常，则执行`docker-compose</a> down`</p>\n<h2 id=\"gitlab升级和汉化\"><a href=\"#gitlab升级和汉化\" class=\"headerlink\" title=\"gitlab升级和汉化\"></a>gitlab升级和汉化</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'anjia0532/gitlab-ce-zh:10.1.1-ce.0'</span> <span class=\"comment\"># 汉化的10.1.1版本</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p>参考连接:</p>\n<ul>\n<li><p><a href=\"http://www.cnblogs.com/wenwei-blog/p/6362829.html\" target=\"_blank\" rel=\"noopener\">gitlab服务器迁移–深山鬼怪</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/79447d5bf99e\" target=\"_blank\" rel=\"noopener\">Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 – baowei</a></p>\n</li>\n<li><p><a href=\"https://docs.gitlab.com/omnibus/settings/backups.html\" target=\"_blank\" rel=\"noopener\">Backups – gitlab-ce-doc</a></p>\n</li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/11/07/gitlab-upgrade/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/11/07/gitlab-upgrade/</a><br>掘金 <a href=\"https://juejin.im/post/5a0170a9f265da430702aea5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a0170a9f265da430702aea5</a><br>简书 <a href=\"http://www.jianshu.com/p/3ac4bd8372e0\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ac4bd8372e0</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲 gitlab切换为docker版本，并且升级大版本(9.x-10.x)的较为快捷的方式</p>","more":"<h2 id=\"gitlab备份\"><a href=\"#gitlab备份\" class=\"headerlink\" title=\"gitlab备份\"></a>gitlab备份</h2><h3 id=\"查看现有版本\"><a href=\"#查看现有版本\" class=\"headerlink\" title=\"查看现有版本\"></a>查看现有版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:env:info</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">GitLab information</span><br><span class=\"line\">Version:    9.2.5</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>在原服务器运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sh -c &apos;umask 0077; tar -cf /var/opt/gitlab/backups/$(date &quot;+etc-gitlab-%s_%Y_%m_%d.tar&quot;) -C / etc/gitlab&apos;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>sudo ls -lah /var/opt/gitlab/backups | grep $(date &quot;+%Y_%m_%d&quot; )</code> 查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-rw-------  1 git  git  172M 11月  7 11:07 1510024070_2017_11_07_x.x.x_gitlab_backup.tar</span><br><span class=\"line\">-rw-------  1 root root 150K 11月  7 11:28 etc-gitlab-1510025309_2017_11_07.tar</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动到目标服务器\"><a href=\"#移动到目标服务器\" class=\"headerlink\" title=\"移动到目标服务器\"></a>移动到目标服务器</h3><p>使用<code>scp</code>将备份文件复制到目标主机</p>\n<p><code>username</code>是用户名<br><code>ip</code>是来源主机ip</p>\n<p>登陆目标主机，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /data/gitlab/data/backups</span><br><span class=\"line\"></span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/1510024070_2017_11_07_x.x.x_gitlab_backup.tar /data/gitlab/data/backups/1510024070_gitlab_backup.tar</span><br><span class=\"line\">scp username@ip:/var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar /data/gitlab/data/backups/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要注意ssh的权限问题，如果无权限，要么改配置，要么就用winscp,ftp等进行上传</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gitlab恢复\"><a href=\"#gitlab恢复\" class=\"headerlink\" title=\"gitlab恢复\"></a>gitlab恢复</h2><h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'gitlab/gitlab-ce:x.x.x-ce.0'</span> <span class=\"comment\"># 将x.x.x-ce.0改成之前gitlab版本,否则无法恢复备份</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p><code>docker-compose up -d</code></p>\n<h3 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it gitlab_gitlab_1 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1510024070 <span class=\"comment\"># 1510024070_gitlab_backup.tar 的前段</span></span><br><span class=\"line\">tar -xf /var/opt/gitlab/backups/etc-gitlab-1510025309_2017_11_07.tar -C /</span><br></pre></td></tr></table></figure>\n<p>访问以下<a href=\"http://ip/如果正常，则执行`docker-compose\" target=\"_blank\" rel=\"noopener\">http://ip/如果正常，则执行`docker-compose</a> down`</p>\n<h2 id=\"gitlab升级和汉化\"><a href=\"#gitlab升级和汉化\" class=\"headerlink\" title=\"gitlab升级和汉化\"></a>gitlab升级和汉化</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">'anjia0532/gitlab-ce-zh:10.1.1-ce.0'</span> <span class=\"comment\"># 汉化的10.1.1版本</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'80:80'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'443:443'</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">'22:22'</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - config:</span><span class=\"string\">/etc/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - data:</span><span class=\"string\">/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">        - logs:</span><span class=\"string\">/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span><span class=\"string\">/data/gitlab/config</span></span><br><span class=\"line\"><span class=\"attr\">    data:</span><span class=\"string\">/data/gitlab/data</span></span><br><span class=\"line\"><span class=\"attr\">    logs:</span><span class=\"string\">/data/gitlab/log</span></span><br></pre></td></tr></table></figure>\n<p>参考连接:</p>\n<ul>\n<li><p><a href=\"http://www.cnblogs.com/wenwei-blog/p/6362829.html\" target=\"_blank\" rel=\"noopener\">gitlab服务器迁移–深山鬼怪</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/79447d5bf99e\" target=\"_blank\" rel=\"noopener\">Gitlab CE 8.9 升级/迁移到GitLab CE 9.3.4 – baowei</a></p>\n</li>\n<li><p><a href=\"https://docs.gitlab.com/omnibus/settings/backups.html\" target=\"_blank\" rel=\"noopener\">Backups – gitlab-ce-doc</a></p>\n</li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/11/07/gitlab-upgrade/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/11/07/gitlab-upgrade/</a><br>掘金 <a href=\"https://juejin.im/post/5a0170a9f265da430702aea5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a0170a9f265da430702aea5</a><br>简书 <a href=\"http://www.jianshu.com/p/3ac4bd8372e0\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ac4bd8372e0</a></p>"},{"title":"027-解决cdh6.2中datanode无法启动问题","date":"2019-06-10T13:00:01.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第27篇，定个小目标999，每周最少2篇。\n\n\n今天安装cdh时遇到hdfs启动失败问题，解决起来倒是不麻烦，简单记录下。\n\n<!-- more -->\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560907215000-3fe2af8a-139e-4fc6-ae67-1abb7d5e19e7.png#align=left&display=inline&height=767&name=image.png&originHeight=767&originWidth=1596&size=260810&status=done&width=1596)<br />关键信息 `java.io.IOException: Incompatible clusterIDs in /dfs/dn: namenode clusterID = cluster74; datanode clusterID = cluster14` <br />关键信息，namenode的 clusterID和datanode的不一致。\n\n原因：执行hdfs namenode -format后，current目录会删除并重新生成，其中VERSION文件中的clusterID也会随之变化，而datanode的VERSION文件中的clusterID保持不变，造成两个clusterID不一致。\n\n方案：\n\n1. 如果是新建的集群，则直接主机目录 `/dfs/dn` （cdh->hdfs->配置-> `dfs.datanode.data.dir` ）下的current目录下的文件删除 `rm -rf /dfs/dn/current/*` \n1. 如果集群内有数据，则只改 /dfs/dn/current/VERSION 中的 `clusterID=clusterXX`  XX为正确的namenode的clusterID\n\n重启datanode即可\n\n","source":"_posts/hdfs-datanode-start-failed.md","raw":"\n---\n\ntitle: 027-解决cdh6.2中datanode无法启动问题\n\ndate: 2019-06-10 21:00:01 +0800\n\ntags: [CDH,hadoop,大数据,hdfs,datanode]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第27篇，定个小目标999，每周最少2篇。\n\n\n今天安装cdh时遇到hdfs启动失败问题，解决起来倒是不麻烦，简单记录下。\n\n<!-- more -->\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560907215000-3fe2af8a-139e-4fc6-ae67-1abb7d5e19e7.png#align=left&display=inline&height=767&name=image.png&originHeight=767&originWidth=1596&size=260810&status=done&width=1596)<br />关键信息 `java.io.IOException: Incompatible clusterIDs in /dfs/dn: namenode clusterID = cluster74; datanode clusterID = cluster14` <br />关键信息，namenode的 clusterID和datanode的不一致。\n\n原因：执行hdfs namenode -format后，current目录会删除并重新生成，其中VERSION文件中的clusterID也会随之变化，而datanode的VERSION文件中的clusterID保持不变，造成两个clusterID不一致。\n\n方案：\n\n1. 如果是新建的集群，则直接主机目录 `/dfs/dn` （cdh->hdfs->配置-> `dfs.datanode.data.dir` ）下的current目录下的文件删除 `rm -rf /dfs/dn/current/*` \n1. 如果集群内有数据，则只改 /dfs/dn/current/VERSION 中的 `clusterID=clusterXX`  XX为正确的namenode的clusterID\n\n重启datanode即可\n\n","slug":"hdfs-datanode-start-failed","published":1,"updated":"2019-08-16T06:11:15.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdd001c24domn9pmdzj","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第27篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>今天安装cdh时遇到hdfs启动失败问题，解决起来倒是不麻烦，简单记录下。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560907215000-3fe2af8a-139e-4fc6-ae67-1abb7d5e19e7.png#align=left&amp;display=inline&amp;height=767&amp;name=image.png&amp;originHeight=767&amp;originWidth=1596&amp;size=260810&amp;status=done&amp;width=1596\" alt=\"image.png\"><br>关键信息 <code>java.io.IOException: Incompatible clusterIDs in /dfs/dn: namenode clusterID = cluster74; datanode clusterID = cluster14</code> <br>关键信息，namenode的 clusterID和datanode的不一致。</p>\n<p>原因：执行hdfs namenode -format后，current目录会删除并重新生成，其中VERSION文件中的clusterID也会随之变化，而datanode的VERSION文件中的clusterID保持不变，造成两个clusterID不一致。</p>\n<p>方案：</p>\n<ol>\n<li>如果是新建的集群，则直接主机目录 <code>/dfs/dn</code> （cdh-&gt;hdfs-&gt;配置-&gt; <code>dfs.datanode.data.dir</code> ）下的current目录下的文件删除 <code>rm -rf /dfs/dn/current/*</code> </li>\n<li>如果集群内有数据，则只改 /dfs/dn/current/VERSION 中的 <code>clusterID=clusterXX</code>  XX为正确的namenode的clusterID</li>\n</ol>\n<p>重启datanode即可</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第27篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>今天安装cdh时遇到hdfs启动失败问题，解决起来倒是不麻烦，简单记录下。</p>","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560907215000-3fe2af8a-139e-4fc6-ae67-1abb7d5e19e7.png#align=left&amp;display=inline&amp;height=767&amp;name=image.png&amp;originHeight=767&amp;originWidth=1596&amp;size=260810&amp;status=done&amp;width=1596\" alt=\"image.png\"><br>关键信息 <code>java.io.IOException: Incompatible clusterIDs in /dfs/dn: namenode clusterID = cluster74; datanode clusterID = cluster14</code> <br>关键信息，namenode的 clusterID和datanode的不一致。</p>\n<p>原因：执行hdfs namenode -format后，current目录会删除并重新生成，其中VERSION文件中的clusterID也会随之变化，而datanode的VERSION文件中的clusterID保持不变，造成两个clusterID不一致。</p>\n<p>方案：</p>\n<ol>\n<li>如果是新建的集群，则直接主机目录 <code>/dfs/dn</code> （cdh-&gt;hdfs-&gt;配置-&gt; <code>dfs.datanode.data.dir</code> ）下的current目录下的文件删除 <code>rm -rf /dfs/dn/current/*</code> </li>\n<li>如果集群内有数据，则只改 /dfs/dn/current/VERSION 中的 <code>clusterID=clusterXX</code>  XX为正确的namenode的clusterID</li>\n</ol>\n<p>重启datanode即可</p>"},{"title":"hexo搭建博客","date":"2017-02-03T08:07:16.000Z","_content":"本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","source":"_posts/hexo-github-pages-blog.md","raw":"title: hexo搭建博客\ndate: 2017-02-03 16:07:16\ntags: [blog,hexo]\ncategories: [编程]\n---\n本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","slug":"hexo-github-pages-blog","published":1,"updated":"2019-08-16T05:56:21.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdf001g24dokei6lrs0","content":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>\n<a id=\"more\"></a>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">; cli configs</span><br><span class=\"line\">long = <span class=\"literal\">true</span></span><br><span class=\"line\">scope = <span class=\"string\">\"\"</span></span><br><span class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</span><br><span class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</span><br><span class=\"line\">cache-lock-retries = 10</span><br><span class=\"line\">cache-lock-stale = 60000</span><br><span class=\"line\">cache-lock-wait = 10000</span><br><span class=\"line\">cache-max = null</span><br></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令缩写</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d == hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令组合</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></span><br></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入编译代码</span></span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></span><br><span class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-rsa</span><br><span class=\"line\"></span><br><span class=\"line\">xxxx 具体的key xxxxxx  userName@email</span><br></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add . <span class=\"comment\"># 添加文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-helper-qrcode</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-feed</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">$MY_DOMAIN</span> <span class=\"string\">];</span> <span class=\"string\">then</span> <span class=\"string\">echo</span> <span class=\"string\">$&#123;MY_DOMAIN&#125;</span> <span class=\"string\">&gt; CNAME; fi</span></span><br><span class=\"line\"><span class=\"string\">  - git init</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.name \"$&#123;userName&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.email \"$&#123;email&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git add .</span></span><br><span class=\"line\"><span class=\"string\">  - git commit -m \"Update docs\"</span></span><br><span class=\"line\"><span class=\"string\">  - git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">blog-source</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\"> global:</span></span><br><span class=\"line\"><span class=\"attr\">   - GH_REF:</span> <span class=\"string\">github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</span></span><br><span class=\"line\">   <span class=\"comment\"># 自定义域名</span></span><br><span class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> <span class=\"string\">anjia.ml</span></span><br></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"noopener\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\" target=\"_blank\" rel=\"noopener\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>","more":"<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">; cli configs</span><br><span class=\"line\">long = <span class=\"literal\">true</span></span><br><span class=\"line\">scope = <span class=\"string\">\"\"</span></span><br><span class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</span><br><span class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</span><br><span class=\"line\">cache-lock-retries = 10</span><br><span class=\"line\">cache-lock-stale = 60000</span><br><span class=\"line\">cache-lock-wait = 10000</span><br><span class=\"line\">cache-max = null</span><br></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令缩写</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d == hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令组合</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></span><br></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入编译代码</span></span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></span><br><span class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-rsa</span><br><span class=\"line\"></span><br><span class=\"line\">xxxx 具体的key xxxxxx  userName@email</span><br></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add . <span class=\"comment\"># 添加文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-helper-qrcode</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-feed</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">$MY_DOMAIN</span> <span class=\"string\">];</span> <span class=\"string\">then</span> <span class=\"string\">echo</span> <span class=\"string\">$&#123;MY_DOMAIN&#125;</span> <span class=\"string\">&gt; CNAME; fi</span></span><br><span class=\"line\"><span class=\"string\">  - git init</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.name \"$&#123;userName&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git config user.email \"$&#123;email&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">  - git add .</span></span><br><span class=\"line\"><span class=\"string\">  - git commit -m \"Update docs\"</span></span><br><span class=\"line\"><span class=\"string\">  - git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">blog-source</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\"> global:</span></span><br><span class=\"line\"><span class=\"attr\">   - GH_REF:</span> <span class=\"string\">github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</span></span><br><span class=\"line\">   <span class=\"comment\"># 自定义域名</span></span><br><span class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> <span class=\"string\">anjia.ml</span></span><br></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"noopener\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\" target=\"_blank\" rel=\"noopener\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>"},{"title":"订阅github release","date":"2019-01-29T04:32:00.000Z","_content":"\n关注的github repo项目多了后，往往不能及时获取最新的release信息。本文整理了两种（官方自带+IFTTT）易于使用的订阅方式\n\n<!-- more -->\n<a name=\"9d119ccd\"></a>\n## 官方自带release提醒\ngithub于2018-11-28日推出仅订阅release功能，喜大普奔啊，之前都是IFTTT或者自己写脚本轮或者订阅rss\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1548733703278-4e1950fb-7799-49eb-8a83-9a0e03619544.png#align=left&display=inline&height=375&name=image.png&originHeight=375&originWidth=1023&size=78024&width=1023)\n\n一旦有新的release，就会发到github绑定的邮箱里了\n\n详见 [Watching and unwatching releases for a repository](https://help.github.com/articles/watching-and-unwatching-releases-for-a-repository/)\n\n\n<a name=\"IFTTT\"></a>\n## IFTTT\n[IFTTT](https://ifttt.com) 是 `If This Then That`  ，简单来说就是如果(IF)发生了某事(This)那么就做啥(That).<br />用在此处就是如果关注的github repo 发布了release，那么就通知我(email或者weibo)\n\n<a name=\"cdcd6e69\"></a>\n### 注册IFTTT账号\n打开 [https://ifttt.com/join](https://ifttt.com/join)  填写邮箱和密码进行注册\n\n<a name=\"085b4fb1\"></a>\n### 创建IFTTT小程序\n打开 [https://ifttt.com/create/](https://ifttt.com/create/) 选择 +this<br />选择 `RSS Feed` -> `New feed item` <br />**Feed URL** 输入 `https://github.com/用户名/repo名/releases.atom` 比如我的一个repo的地址是 [https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom](https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom) <br />点 `Create Trigger` 点 蓝色的 +that 部分<br />选择 `Email` -> `Send me an email` <br />点击 `Create action` \n\n一旦发布releases 就会收到 email<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1548736026081-37c127af-53cf-4dec-8db3-df8706117d14.png#align=left&display=inline&height=546&name=image.png&originHeight=546&originWidth=783&size=60687&width=783)<br />可以通过 [https://ifttt.com/activity](https://ifttt.com/activity) 查看小程序运行情况\n\n<a name=\"bcd92bce\"></a>\n## Q&A\n**Q: **有了github的watch了，为嘛还要折腾IFTTT？<br />**A: **因为在github出来之前就用了IFTTT了，再一个，IFTTT不光可以发email，还可以发微博和twitter，让你分分钟成为一个技术潮人。新鲜资讯早知道啊.\n\n","source":"_posts/ifttt-github-release.md","raw":"\n---\n\ntitle: 订阅github release\n\ndate: 2019-01-29 12:32:00 +0800\n\ntags: [github,ifttt]\n\ncategories: 其他\n\n---\n\n关注的github repo项目多了后，往往不能及时获取最新的release信息。本文整理了两种（官方自带+IFTTT）易于使用的订阅方式\n\n<!-- more -->\n<a name=\"9d119ccd\"></a>\n## 官方自带release提醒\ngithub于2018-11-28日推出仅订阅release功能，喜大普奔啊，之前都是IFTTT或者自己写脚本轮或者订阅rss\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1548733703278-4e1950fb-7799-49eb-8a83-9a0e03619544.png#align=left&display=inline&height=375&name=image.png&originHeight=375&originWidth=1023&size=78024&width=1023)\n\n一旦有新的release，就会发到github绑定的邮箱里了\n\n详见 [Watching and unwatching releases for a repository](https://help.github.com/articles/watching-and-unwatching-releases-for-a-repository/)\n\n\n<a name=\"IFTTT\"></a>\n## IFTTT\n[IFTTT](https://ifttt.com) 是 `If This Then That`  ，简单来说就是如果(IF)发生了某事(This)那么就做啥(That).<br />用在此处就是如果关注的github repo 发布了release，那么就通知我(email或者weibo)\n\n<a name=\"cdcd6e69\"></a>\n### 注册IFTTT账号\n打开 [https://ifttt.com/join](https://ifttt.com/join)  填写邮箱和密码进行注册\n\n<a name=\"085b4fb1\"></a>\n### 创建IFTTT小程序\n打开 [https://ifttt.com/create/](https://ifttt.com/create/) 选择 +this<br />选择 `RSS Feed` -> `New feed item` <br />**Feed URL** 输入 `https://github.com/用户名/repo名/releases.atom` 比如我的一个repo的地址是 [https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom](https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom) <br />点 `Create Trigger` 点 蓝色的 +that 部分<br />选择 `Email` -> `Send me an email` <br />点击 `Create action` \n\n一旦发布releases 就会收到 email<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1548736026081-37c127af-53cf-4dec-8db3-df8706117d14.png#align=left&display=inline&height=546&name=image.png&originHeight=546&originWidth=783&size=60687&width=783)<br />可以通过 [https://ifttt.com/activity](https://ifttt.com/activity) 查看小程序运行情况\n\n<a name=\"bcd92bce\"></a>\n## Q&A\n**Q: **有了github的watch了，为嘛还要折腾IFTTT？<br />**A: **因为在github出来之前就用了IFTTT了，再一个，IFTTT不光可以发email，还可以发微博和twitter，让你分分钟成为一个技术潮人。新鲜资讯早知道啊.\n\n","slug":"ifttt-github-release","published":1,"updated":"2019-08-16T06:11:15.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdg001j24doozp75k2b","content":"<p>关注的github repo项目多了后，往往不能及时获取最新的release信息。本文整理了两种（官方自带+IFTTT）易于使用的订阅方式</p>\n<a id=\"more\"></a>\n<p><a name=\"9d119ccd\"></a></p>\n<h2 id=\"官方自带release提醒\"><a href=\"#官方自带release提醒\" class=\"headerlink\" title=\"官方自带release提醒\"></a>官方自带release提醒</h2><p>github于2018-11-28日推出仅订阅release功能，喜大普奔啊，之前都是IFTTT或者自己写脚本轮或者订阅rss</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1548733703278-4e1950fb-7799-49eb-8a83-9a0e03619544.png#align=left&amp;display=inline&amp;height=375&amp;name=image.png&amp;originHeight=375&amp;originWidth=1023&amp;size=78024&amp;width=1023\" alt=\"image.png\"></p>\n<p>一旦有新的release，就会发到github绑定的邮箱里了</p>\n<p>详见 <a href=\"https://help.github.com/articles/watching-and-unwatching-releases-for-a-repository/\" target=\"_blank\" rel=\"noopener\">Watching and unwatching releases for a repository</a></p>\n<p><a name=\"IFTTT\"></a></p>\n<h2 id=\"IFTTT\"><a href=\"#IFTTT\" class=\"headerlink\" title=\"IFTTT\"></a>IFTTT</h2><p><a href=\"https://ifttt.com\" target=\"_blank\" rel=\"noopener\">IFTTT</a> 是 <code>If This Then That</code>  ，简单来说就是如果(IF)发生了某事(This)那么就做啥(That).<br>用在此处就是如果关注的github repo 发布了release，那么就通知我(email或者weibo)</p>\n<p><a name=\"cdcd6e69\"></a></p>\n<h3 id=\"注册IFTTT账号\"><a href=\"#注册IFTTT账号\" class=\"headerlink\" title=\"注册IFTTT账号\"></a>注册IFTTT账号</h3><p>打开 <a href=\"https://ifttt.com/join\" target=\"_blank\" rel=\"noopener\">https://ifttt.com/join</a>  填写邮箱和密码进行注册</p>\n<p><a name=\"085b4fb1\"></a></p>\n<h3 id=\"创建IFTTT小程序\"><a href=\"#创建IFTTT小程序\" class=\"headerlink\" title=\"创建IFTTT小程序\"></a>创建IFTTT小程序</h3><p>打开 <a href=\"https://ifttt.com/create/\" target=\"_blank\" rel=\"noopener\">https://ifttt.com/create/</a> 选择 +this<br>选择 <code>RSS Feed</code> -&gt; <code>New feed item</code> <br><strong>Feed URL</strong> 输入 <code>https://github.com/用户名/repo名/releases.atom</code> 比如我的一个repo的地址是 <a href=\"https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom</a> <br>点 <code>Create Trigger</code> 点 蓝色的 +that 部分<br>选择 <code>Email</code> -&gt; <code>Send me an email</code> <br>点击 <code>Create action</code> </p>\n<p>一旦发布releases 就会收到 email<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1548736026081-37c127af-53cf-4dec-8db3-df8706117d14.png#align=left&amp;display=inline&amp;height=546&amp;name=image.png&amp;originHeight=546&amp;originWidth=783&amp;size=60687&amp;width=783\" alt=\"image.png\"><br>可以通过 <a href=\"https://ifttt.com/activity\" target=\"_blank\" rel=\"noopener\">https://ifttt.com/activity</a> 查看小程序运行情况</p>\n<p><a name=\"bcd92bce\"></a></p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p><strong>Q: </strong>有了github的watch了，为嘛还要折腾IFTTT？<br><strong>A: </strong>因为在github出来之前就用了IFTTT了，再一个，IFTTT不光可以发email，还可以发微博和twitter，让你分分钟成为一个技术潮人。新鲜资讯早知道啊.</p>\n","site":{"data":{}},"excerpt":"<p>关注的github repo项目多了后，往往不能及时获取最新的release信息。本文整理了两种（官方自带+IFTTT）易于使用的订阅方式</p>","more":"<p><a name=\"9d119ccd\"></a></p>\n<h2 id=\"官方自带release提醒\"><a href=\"#官方自带release提醒\" class=\"headerlink\" title=\"官方自带release提醒\"></a>官方自带release提醒</h2><p>github于2018-11-28日推出仅订阅release功能，喜大普奔啊，之前都是IFTTT或者自己写脚本轮或者订阅rss</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1548733703278-4e1950fb-7799-49eb-8a83-9a0e03619544.png#align=left&amp;display=inline&amp;height=375&amp;name=image.png&amp;originHeight=375&amp;originWidth=1023&amp;size=78024&amp;width=1023\" alt=\"image.png\"></p>\n<p>一旦有新的release，就会发到github绑定的邮箱里了</p>\n<p>详见 <a href=\"https://help.github.com/articles/watching-and-unwatching-releases-for-a-repository/\" target=\"_blank\" rel=\"noopener\">Watching and unwatching releases for a repository</a></p>\n<p><a name=\"IFTTT\"></a></p>\n<h2 id=\"IFTTT\"><a href=\"#IFTTT\" class=\"headerlink\" title=\"IFTTT\"></a>IFTTT</h2><p><a href=\"https://ifttt.com\" target=\"_blank\" rel=\"noopener\">IFTTT</a> 是 <code>If This Then That</code>  ，简单来说就是如果(IF)发生了某事(This)那么就做啥(That).<br>用在此处就是如果关注的github repo 发布了release，那么就通知我(email或者weibo)</p>\n<p><a name=\"cdcd6e69\"></a></p>\n<h3 id=\"注册IFTTT账号\"><a href=\"#注册IFTTT账号\" class=\"headerlink\" title=\"注册IFTTT账号\"></a>注册IFTTT账号</h3><p>打开 <a href=\"https://ifttt.com/join\" target=\"_blank\" rel=\"noopener\">https://ifttt.com/join</a>  填写邮箱和密码进行注册</p>\n<p><a name=\"085b4fb1\"></a></p>\n<h3 id=\"创建IFTTT小程序\"><a href=\"#创建IFTTT小程序\" class=\"headerlink\" title=\"创建IFTTT小程序\"></a>创建IFTTT小程序</h3><p>打开 <a href=\"https://ifttt.com/create/\" target=\"_blank\" rel=\"noopener\">https://ifttt.com/create/</a> 选择 +this<br>选择 <code>RSS Feed</code> -&gt; <code>New feed item</code> <br><strong>Feed URL</strong> 输入 <code>https://github.com/用户名/repo名/releases.atom</code> 比如我的一个repo的地址是 <a href=\"https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/elastalert-wechat-plugin/releases.atom</a> <br>点 <code>Create Trigger</code> 点 蓝色的 +that 部分<br>选择 <code>Email</code> -&gt; <code>Send me an email</code> <br>点击 <code>Create action</code> </p>\n<p>一旦发布releases 就会收到 email<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1548736026081-37c127af-53cf-4dec-8db3-df8706117d14.png#align=left&amp;display=inline&amp;height=546&amp;name=image.png&amp;originHeight=546&amp;originWidth=783&amp;size=60687&amp;width=783\" alt=\"image.png\"><br>可以通过 <a href=\"https://ifttt.com/activity\" target=\"_blank\" rel=\"noopener\">https://ifttt.com/activity</a> 查看小程序运行情况</p>\n<p><a name=\"bcd92bce\"></a></p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p><strong>Q: </strong>有了github的watch了，为嘛还要折腾IFTTT？<br><strong>A: </strong>因为在github出来之前就用了IFTTT了，再一个，IFTTT不光可以发email，还可以发微博和twitter，让你分分钟成为一个技术潮人。新鲜资讯早知道啊.</p>"},{"title":"016-JDK8+可用的反编译工具(JD_GUI+Procyon)","date":"2019-04-18T04:10:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第16篇，定个小目标999，每周最少2篇。\n\n\n本文是源于一次逆向android app，辛苦脱壳后得到 `classes_dumped_29-dex2jar.jar` ，要得到源码，但是又不想降级jdk到1.7来迁就jd_gui。花了一分钟，找到jd_gui 在1.8下的用法,至于 基于procyon的UI luyten 纯是凑数。\n\n<!-- more -->\n\n<a name=\"JD_GUI\"></a>\n## JD_GUI\n打开 [http://java-decompiler.github.io/](http://java-decompiler.github.io/)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555556972336-dbd69397-f0ee-454a-b39c-779eca71dd63.png#align=left&display=inline&height=678&name=image.png&originHeight=678&originWidth=1219&size=90920&status=done&width=1219)<br />其实官网已经很明显了，大家之所以以讹传讹，认为JD_GUI不支持1.8，大多是被度娘或者CSDN荼毒。<br />1.4.0 及以前的jd_gui，在1.8打开一般是<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557122787-0a3fac4f-3f1f-4da0-a48c-d7547ab217fa.png#align=left&display=inline&height=151&name=image.png&originHeight=151&originWidth=357&size=5587&status=done&width=357)\n\n下载并解压预览版，然后 `java -jar jd-gui-1.4.1.jar` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557322830-cb8915d1-e7bd-4e98-921c-ede3571d0a02.png#align=left&display=inline&height=505&name=image.png&originHeight=505&originWidth=1094&size=76642&status=done&width=1094)<br />熟悉的界面，熟悉的配方。\n\n<a name=\"ddbfde32\"></a>\n### 官方截图\n![LocalMethodClasses.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557366601-a7591bd1-09c5-4287-833c-fc0324d02ee4.png#align=left&display=inline&height=425&name=LocalMethodClasses.png&originHeight=665&originWidth=1168&size=88222&status=done&width=746)![TryWithResources.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367229-70fe5c9d-b2be-421a-83df-0d90e890899c.png#align=left&display=inline&height=426&name=TryWithResources.png&originHeight=665&originWidth=1165&size=96487&status=done&width=746)![DefaultMethodsInInterface.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367292-f0ef5b46-5a2f-4576-9182-203baae7a0ff.png#align=left&display=inline&height=426&name=DefaultMethodsInInterface.png&originHeight=665&originWidth=1165&size=88222&status=done&width=746)![Lambda.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367324-1e872a6b-a4e2-4ce7-a852-305362ae113f.png#align=left&display=inline&height=426&name=Lambda.png&originHeight=665&originWidth=1165&size=82190&status=done&width=746)\n\n<a name=\"1df6ea45\"></a>\n## procyon + luyten\n\n下载最新版的 [luyten.jar](https://github.com/deathmarine/Luyten/releases) ,然后   `java -jar luyten-0.5.4.jar` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557560115-d10ea3a0-3d78-46e7-a6ab-13047ae1f347.png#align=left&display=inline&height=516&name=image.png&originHeight=516&originWidth=942&size=68141&status=done&width=942)<br />只是轻度使用的话，两个差不多，建议用jd_gui,起码搜索速度能甩luyten 10条街啊。\n<a name=\"433531fd\"></a>\n## 结语\n是不是以为会有类似lambda反编译比对一类的评测文？答案是，你想多了。这些工具只要有数就行，一个不好用，换另一个就行。\n\n其实，一般情况下，使用独立反编译工具的可能性很小,一般是IDE的插件居多，比如，[cnfree/Eclipse-Class-Decompiler](https://github.com/cnfree/Eclipse-Class-Decompiler) ,而idea默认有简易版的反编译插件。足以应付日常工作中零星的反编译用途。\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/java-decompiler.md","raw":"\n---\n\ntitle: 016-JDK8+可用的反编译工具(JD_GUI+Procyon)\n\ndate: 2019-04-18 12:10:00 +0800\n\ntags: [java,jdk8,反编译]\n\ncategories: java\n\n---\n> 这是坚持技术写作计划（含翻译）的第16篇，定个小目标999，每周最少2篇。\n\n\n本文是源于一次逆向android app，辛苦脱壳后得到 `classes_dumped_29-dex2jar.jar` ，要得到源码，但是又不想降级jdk到1.7来迁就jd_gui。花了一分钟，找到jd_gui 在1.8下的用法,至于 基于procyon的UI luyten 纯是凑数。\n\n<!-- more -->\n\n<a name=\"JD_GUI\"></a>\n## JD_GUI\n打开 [http://java-decompiler.github.io/](http://java-decompiler.github.io/)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555556972336-dbd69397-f0ee-454a-b39c-779eca71dd63.png#align=left&display=inline&height=678&name=image.png&originHeight=678&originWidth=1219&size=90920&status=done&width=1219)<br />其实官网已经很明显了，大家之所以以讹传讹，认为JD_GUI不支持1.8，大多是被度娘或者CSDN荼毒。<br />1.4.0 及以前的jd_gui，在1.8打开一般是<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557122787-0a3fac4f-3f1f-4da0-a48c-d7547ab217fa.png#align=left&display=inline&height=151&name=image.png&originHeight=151&originWidth=357&size=5587&status=done&width=357)\n\n下载并解压预览版，然后 `java -jar jd-gui-1.4.1.jar` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557322830-cb8915d1-e7bd-4e98-921c-ede3571d0a02.png#align=left&display=inline&height=505&name=image.png&originHeight=505&originWidth=1094&size=76642&status=done&width=1094)<br />熟悉的界面，熟悉的配方。\n\n<a name=\"ddbfde32\"></a>\n### 官方截图\n![LocalMethodClasses.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557366601-a7591bd1-09c5-4287-833c-fc0324d02ee4.png#align=left&display=inline&height=425&name=LocalMethodClasses.png&originHeight=665&originWidth=1168&size=88222&status=done&width=746)![TryWithResources.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367229-70fe5c9d-b2be-421a-83df-0d90e890899c.png#align=left&display=inline&height=426&name=TryWithResources.png&originHeight=665&originWidth=1165&size=96487&status=done&width=746)![DefaultMethodsInInterface.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367292-f0ef5b46-5a2f-4576-9182-203baae7a0ff.png#align=left&display=inline&height=426&name=DefaultMethodsInInterface.png&originHeight=665&originWidth=1165&size=88222&status=done&width=746)![Lambda.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367324-1e872a6b-a4e2-4ce7-a852-305362ae113f.png#align=left&display=inline&height=426&name=Lambda.png&originHeight=665&originWidth=1165&size=82190&status=done&width=746)\n\n<a name=\"1df6ea45\"></a>\n## procyon + luyten\n\n下载最新版的 [luyten.jar](https://github.com/deathmarine/Luyten/releases) ,然后   `java -jar luyten-0.5.4.jar` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1555557560115-d10ea3a0-3d78-46e7-a6ab-13047ae1f347.png#align=left&display=inline&height=516&name=image.png&originHeight=516&originWidth=942&size=68141&status=done&width=942)<br />只是轻度使用的话，两个差不多，建议用jd_gui,起码搜索速度能甩luyten 10条街啊。\n<a name=\"433531fd\"></a>\n## 结语\n是不是以为会有类似lambda反编译比对一类的评测文？答案是，你想多了。这些工具只要有数就行，一个不好用，换另一个就行。\n\n其实，一般情况下，使用独立反编译工具的可能性很小,一般是IDE的插件居多，比如，[cnfree/Eclipse-Class-Decompiler](https://github.com/cnfree/Eclipse-Class-Decompiler) ,而idea默认有简易版的反编译插件。足以应付日常工作中零星的反编译用途。\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"java-decompiler","published":1,"updated":"2019-08-16T06:11:15.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdj001n24dovubtsuwu","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第16篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文是源于一次逆向android app，辛苦脱壳后得到 <code>classes_dumped_29-dex2jar.jar</code> ，要得到源码，但是又不想降级jdk到1.7来迁就jd_gui。花了一分钟，找到jd_gui 在1.8下的用法,至于 基于procyon的UI luyten 纯是凑数。</p>\n<a id=\"more\"></a>\n<p><a name=\"JD_GUI\"></a></p>\n<h2 id=\"JD-GUI\"><a href=\"#JD-GUI\" class=\"headerlink\" title=\"JD_GUI\"></a>JD_GUI</h2><p>打开 <a href=\"http://java-decompiler.github.io/\" target=\"_blank\" rel=\"noopener\">http://java-decompiler.github.io/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555556972336-dbd69397-f0ee-454a-b39c-779eca71dd63.png#align=left&amp;display=inline&amp;height=678&amp;name=image.png&amp;originHeight=678&amp;originWidth=1219&amp;size=90920&amp;status=done&amp;width=1219\" alt=\"image.png\"><br>其实官网已经很明显了，大家之所以以讹传讹，认为JD_GUI不支持1.8，大多是被度娘或者CSDN荼毒。<br>1.4.0 及以前的jd_gui，在1.8打开一般是<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557122787-0a3fac4f-3f1f-4da0-a48c-d7547ab217fa.png#align=left&amp;display=inline&amp;height=151&amp;name=image.png&amp;originHeight=151&amp;originWidth=357&amp;size=5587&amp;status=done&amp;width=357\" alt=\"image.png\"></p>\n<p>下载并解压预览版，然后 <code>java -jar jd-gui-1.4.1.jar</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557322830-cb8915d1-e7bd-4e98-921c-ede3571d0a02.png#align=left&amp;display=inline&amp;height=505&amp;name=image.png&amp;originHeight=505&amp;originWidth=1094&amp;size=76642&amp;status=done&amp;width=1094\" alt=\"image.png\"><br>熟悉的界面，熟悉的配方。</p>\n<p><a name=\"ddbfde32\"></a></p>\n<h3 id=\"官方截图\"><a href=\"#官方截图\" class=\"headerlink\" title=\"官方截图\"></a>官方截图</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557366601-a7591bd1-09c5-4287-833c-fc0324d02ee4.png#align=left&amp;display=inline&amp;height=425&amp;name=LocalMethodClasses.png&amp;originHeight=665&amp;originWidth=1168&amp;size=88222&amp;status=done&amp;width=746\" alt=\"LocalMethodClasses.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367229-70fe5c9d-b2be-421a-83df-0d90e890899c.png#align=left&amp;display=inline&amp;height=426&amp;name=TryWithResources.png&amp;originHeight=665&amp;originWidth=1165&amp;size=96487&amp;status=done&amp;width=746\" alt=\"TryWithResources.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367292-f0ef5b46-5a2f-4576-9182-203baae7a0ff.png#align=left&amp;display=inline&amp;height=426&amp;name=DefaultMethodsInInterface.png&amp;originHeight=665&amp;originWidth=1165&amp;size=88222&amp;status=done&amp;width=746\" alt=\"DefaultMethodsInInterface.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367324-1e872a6b-a4e2-4ce7-a852-305362ae113f.png#align=left&amp;display=inline&amp;height=426&amp;name=Lambda.png&amp;originHeight=665&amp;originWidth=1165&amp;size=82190&amp;status=done&amp;width=746\" alt=\"Lambda.png\"></p>\n<p><a name=\"1df6ea45\"></a></p>\n<h2 id=\"procyon-luyten\"><a href=\"#procyon-luyten\" class=\"headerlink\" title=\"procyon + luyten\"></a>procyon + luyten</h2><p>下载最新版的 <a href=\"https://github.com/deathmarine/Luyten/releases\" target=\"_blank\" rel=\"noopener\">luyten.jar</a> ,然后   <code>java -jar luyten-0.5.4.jar</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557560115-d10ea3a0-3d78-46e7-a6ab-13047ae1f347.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=516&amp;originWidth=942&amp;size=68141&amp;status=done&amp;width=942\" alt=\"image.png\"><br>只是轻度使用的话，两个差不多，建议用jd_gui,起码搜索速度能甩luyten 10条街啊。<br><a name=\"433531fd\"></a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>是不是以为会有类似lambda反编译比对一类的评测文？答案是，你想多了。这些工具只要有数就行，一个不好用，换另一个就行。</p>\n<p>其实，一般情况下，使用独立反编译工具的可能性很小,一般是IDE的插件居多，比如，<a href=\"https://github.com/cnfree/Eclipse-Class-Decompiler\" target=\"_blank\" rel=\"noopener\">cnfree/Eclipse-Class-Decompiler</a> ,而idea默认有简易版的反编译插件。足以应付日常工作中零星的反编译用途。</p>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第16篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文是源于一次逆向android app，辛苦脱壳后得到 <code>classes_dumped_29-dex2jar.jar</code> ，要得到源码，但是又不想降级jdk到1.7来迁就jd_gui。花了一分钟，找到jd_gui 在1.8下的用法,至于 基于procyon的UI luyten 纯是凑数。</p>","more":"<p><a name=\"JD_GUI\"></a></p>\n<h2 id=\"JD-GUI\"><a href=\"#JD-GUI\" class=\"headerlink\" title=\"JD_GUI\"></a>JD_GUI</h2><p>打开 <a href=\"http://java-decompiler.github.io/\" target=\"_blank\" rel=\"noopener\">http://java-decompiler.github.io/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555556972336-dbd69397-f0ee-454a-b39c-779eca71dd63.png#align=left&amp;display=inline&amp;height=678&amp;name=image.png&amp;originHeight=678&amp;originWidth=1219&amp;size=90920&amp;status=done&amp;width=1219\" alt=\"image.png\"><br>其实官网已经很明显了，大家之所以以讹传讹，认为JD_GUI不支持1.8，大多是被度娘或者CSDN荼毒。<br>1.4.0 及以前的jd_gui，在1.8打开一般是<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557122787-0a3fac4f-3f1f-4da0-a48c-d7547ab217fa.png#align=left&amp;display=inline&amp;height=151&amp;name=image.png&amp;originHeight=151&amp;originWidth=357&amp;size=5587&amp;status=done&amp;width=357\" alt=\"image.png\"></p>\n<p>下载并解压预览版，然后 <code>java -jar jd-gui-1.4.1.jar</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557322830-cb8915d1-e7bd-4e98-921c-ede3571d0a02.png#align=left&amp;display=inline&amp;height=505&amp;name=image.png&amp;originHeight=505&amp;originWidth=1094&amp;size=76642&amp;status=done&amp;width=1094\" alt=\"image.png\"><br>熟悉的界面，熟悉的配方。</p>\n<p><a name=\"ddbfde32\"></a></p>\n<h3 id=\"官方截图\"><a href=\"#官方截图\" class=\"headerlink\" title=\"官方截图\"></a>官方截图</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557366601-a7591bd1-09c5-4287-833c-fc0324d02ee4.png#align=left&amp;display=inline&amp;height=425&amp;name=LocalMethodClasses.png&amp;originHeight=665&amp;originWidth=1168&amp;size=88222&amp;status=done&amp;width=746\" alt=\"LocalMethodClasses.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367229-70fe5c9d-b2be-421a-83df-0d90e890899c.png#align=left&amp;display=inline&amp;height=426&amp;name=TryWithResources.png&amp;originHeight=665&amp;originWidth=1165&amp;size=96487&amp;status=done&amp;width=746\" alt=\"TryWithResources.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367292-f0ef5b46-5a2f-4576-9182-203baae7a0ff.png#align=left&amp;display=inline&amp;height=426&amp;name=DefaultMethodsInInterface.png&amp;originHeight=665&amp;originWidth=1165&amp;size=88222&amp;status=done&amp;width=746\" alt=\"DefaultMethodsInInterface.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557367324-1e872a6b-a4e2-4ce7-a852-305362ae113f.png#align=left&amp;display=inline&amp;height=426&amp;name=Lambda.png&amp;originHeight=665&amp;originWidth=1165&amp;size=82190&amp;status=done&amp;width=746\" alt=\"Lambda.png\"></p>\n<p><a name=\"1df6ea45\"></a></p>\n<h2 id=\"procyon-luyten\"><a href=\"#procyon-luyten\" class=\"headerlink\" title=\"procyon + luyten\"></a>procyon + luyten</h2><p>下载最新版的 <a href=\"https://github.com/deathmarine/Luyten/releases\" target=\"_blank\" rel=\"noopener\">luyten.jar</a> ,然后   <code>java -jar luyten-0.5.4.jar</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1555557560115-d10ea3a0-3d78-46e7-a6ab-13047ae1f347.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=516&amp;originWidth=942&amp;size=68141&amp;status=done&amp;width=942\" alt=\"image.png\"><br>只是轻度使用的话，两个差不多，建议用jd_gui,起码搜索速度能甩luyten 10条街啊。<br><a name=\"433531fd\"></a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>是不是以为会有类似lambda反编译比对一类的评测文？答案是，你想多了。这些工具只要有数就行，一个不好用，换另一个就行。</p>\n<p>其实，一般情况下，使用独立反编译工具的可能性很小,一般是IDE的插件居多，比如，<a href=\"https://github.com/cnfree/Eclipse-Class-Decompiler\" target=\"_blank\" rel=\"noopener\">cnfree/Eclipse-Class-Decompiler</a> ,而idea默认有简易版的反编译插件。足以应付日常工作中零星的反编译用途。</p>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"jdk绿色免安装","date":"2017-05-17T04:39:16.000Z","_content":"\n## windows 免安装\n\njava自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。\n\nwindows安装版有一下坏处\n1. 会写注册表\n2. 会将java.exe,javaw.exe 等解压到`C:\\Windows\\System32`或者`C:\\Windows\\SysWOW64` \n3. 会将定期更新程序设置开机自启动，发现新版本弹窗提示\n4. 会在`PATH`中写一个oracle的javapath,还会加上`jre\\bin`\n\n好处就是安装方便\n\n\n今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的`%JAVA_HOME%\\bin;`又配了一个`%JAVA_HOME%\\jre\\bin;`导致出了一个很诡异的错误。\n\n\n下面说一下，如何免安装\n\n从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载最新的jdk windows安装版\ne.g.\n`jdk-8u131-windows-x64.exe`\n\n用解压缩软件解压到`E:\\jdk-8u131-windows-x64\\` `Win+R`->`cmd`打开命令行\n\n```\ncd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\nextrac32.exe 111\n\n:: 此时解压出 tools.zip 文件\n:: 打开当前文件夹\nexplorer.exe .\n:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`\n\n:: 将 .pack文件改成.jar文件\n\ncd tools\nfor /r %x in (*.pack) do .\\bin\\unpack200 -r \"%x\" \"%~dx%~px%~nx.jar\"\n\n:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步\n\ncd ..\\..\\JAVA_CAB9\nextrac32 110\n\n:: 将src.zip移动到tools文件夹\n\nmove src.zip ..\\JAVA_CAB10\\tools\\\n\n:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk\n\nxcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk\n\n:: 删除 E:\\jdk-8u131-windows-x64 文件夹\ncd / && rd /s /q E:\\jdk-8u131-windows-x64\n```\n\n设置环境变量 \n增加 `JAVA_HOME` `d:\\jdk`\n\n修改`PATH`\n\n追加 `;%JAVA_HOME%\\bin;`\n\n增加 `CLASSPATH`\n\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n设置环境变量后，需要重新打开`cmd`\n\n```\njava -version && javac -version\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)\njavac 1.8.0_131\n```\n\n\n## linux 免安装\n```bash\n\n# 下载文件\n$ wget -P ~/downloads --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz\n\n# 解压\n$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/local/\n\n#创建软连接\n$ sudo ln -sf /usr/local/jdk1.8.0_121 /usr/local/jdk\n\n$ sudo vi /etc/profile\n\n#设置java环境\nexport JAVA_HOME=/usr/local/jdk\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar;:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$PATH\n\n#保存并退出\n\n#使配置生效\n$ source /etc/profile\n```\n\n本人原创\n\n博客 https://anjia.ml/2017/05/17/jdk-zip/\n简书 http://www.jianshu.com/p/5dc20d5d4f5c\n掘金 https://juejin.im/post/591bdb222f301e006bcde36b","source":"_posts/jdk-zip.md","raw":"---\ntitle: jdk绿色免安装\ndate: 2017-05-17 12:39:16\ntags: java\n---\n\n## windows 免安装\n\njava自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。\n\nwindows安装版有一下坏处\n1. 会写注册表\n2. 会将java.exe,javaw.exe 等解压到`C:\\Windows\\System32`或者`C:\\Windows\\SysWOW64` \n3. 会将定期更新程序设置开机自启动，发现新版本弹窗提示\n4. 会在`PATH`中写一个oracle的javapath,还会加上`jre\\bin`\n\n好处就是安装方便\n\n\n今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的`%JAVA_HOME%\\bin;`又配了一个`%JAVA_HOME%\\jre\\bin;`导致出了一个很诡异的错误。\n\n\n下面说一下，如何免安装\n\n从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载最新的jdk windows安装版\ne.g.\n`jdk-8u131-windows-x64.exe`\n\n用解压缩软件解压到`E:\\jdk-8u131-windows-x64\\` `Win+R`->`cmd`打开命令行\n\n```\ncd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\nextrac32.exe 111\n\n:: 此时解压出 tools.zip 文件\n:: 打开当前文件夹\nexplorer.exe .\n:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`\n\n:: 将 .pack文件改成.jar文件\n\ncd tools\nfor /r %x in (*.pack) do .\\bin\\unpack200 -r \"%x\" \"%~dx%~px%~nx.jar\"\n\n:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步\n\ncd ..\\..\\JAVA_CAB9\nextrac32 110\n\n:: 将src.zip移动到tools文件夹\n\nmove src.zip ..\\JAVA_CAB10\\tools\\\n\n:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk\n\nxcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk\n\n:: 删除 E:\\jdk-8u131-windows-x64 文件夹\ncd / && rd /s /q E:\\jdk-8u131-windows-x64\n```\n\n设置环境变量 \n增加 `JAVA_HOME` `d:\\jdk`\n\n修改`PATH`\n\n追加 `;%JAVA_HOME%\\bin;`\n\n增加 `CLASSPATH`\n\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n设置环境变量后，需要重新打开`cmd`\n\n```\njava -version && javac -version\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)\njavac 1.8.0_131\n```\n\n\n## linux 免安装\n```bash\n\n# 下载文件\n$ wget -P ~/downloads --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz\n\n# 解压\n$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/local/\n\n#创建软连接\n$ sudo ln -sf /usr/local/jdk1.8.0_121 /usr/local/jdk\n\n$ sudo vi /etc/profile\n\n#设置java环境\nexport JAVA_HOME=/usr/local/jdk\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar;:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$PATH\n\n#保存并退出\n\n#使配置生效\n$ source /etc/profile\n```\n\n本人原创\n\n博客 https://anjia.ml/2017/05/17/jdk-zip/\n简书 http://www.jianshu.com/p/5dc20d5d4f5c\n掘金 https://juejin.im/post/591bdb222f301e006bcde36b","slug":"jdk-zip","published":1,"updated":"2019-08-16T05:56:21.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdk001q24dodbyxv4wl","content":"<h2 id=\"windows-免安装\"><a href=\"#windows-免安装\" class=\"headerlink\" title=\"windows 免安装\"></a>windows 免安装</h2><p>java自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。</p>\n<p>windows安装版有一下坏处</p>\n<ol>\n<li>会写注册表</li>\n<li>会将java.exe,javaw.exe 等解压到<code>C:\\Windows\\System32</code>或者<code>C:\\Windows\\SysWOW64</code> </li>\n<li>会将定期更新程序设置开机自启动，发现新版本弹窗提示</li>\n<li>会在<code>PATH</code>中写一个oracle的javapath,还会加上<code>jre\\bin</code></li>\n</ol>\n<p>好处就是安装方便</p>\n<p>今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的<code>%JAVA_HOME%\\bin;</code>又配了一个<code>%JAVA_HOME%\\jre\\bin;</code>导致出了一个很诡异的错误。</p>\n<p>下面说一下，如何免安装</p>\n<p>从 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载最新的jdk windows安装版<br>e.g.<br><code>jdk-8u131-windows-x64.exe</code></p>\n<p>用解压缩软件解压到<code>E:\\jdk-8u131-windows-x64\\</code> <code>Win+R</code>-&gt;<code>cmd</code>打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10</span><br><span class=\"line\">extrac32.exe 111</span><br><span class=\"line\"></span><br><span class=\"line\">:: 此时解压出 tools.zip 文件</span><br><span class=\"line\">:: 打开当前文件夹</span><br><span class=\"line\">explorer.exe .</span><br><span class=\"line\">:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将 .pack文件改成.jar文件</span><br><span class=\"line\"></span><br><span class=\"line\">cd tools</span><br><span class=\"line\">for /r %x in (*.pack) do .\\bin\\unpack200 -r &quot;%x&quot; &quot;%~dx%~px%~nx.jar&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步</span><br><span class=\"line\"></span><br><span class=\"line\">cd ..\\..\\JAVA_CAB9</span><br><span class=\"line\">extrac32 110</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将src.zip移动到tools文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">move src.zip ..\\JAVA_CAB10\\tools\\</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">xcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">:: 删除 E:\\jdk-8u131-windows-x64 文件夹</span><br><span class=\"line\">cd / &amp;&amp; rd /s /q E:\\jdk-8u131-windows-x64</span><br></pre></td></tr></table></figure>\n<p>设置环境变量<br>增加 <code>JAVA_HOME</code> <code>d:\\jdk</code></p>\n<p>修改<code>PATH</code></p>\n<p>追加 <code>;%JAVA_HOME%\\bin;</code></p>\n<p>增加 <code>CLASSPATH</code></p>\n<p><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p>设置环境变量后，需要重新打开<code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version &amp;&amp; javac -version</span><br><span class=\"line\">java version &quot;1.8.0_131&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)</span><br><span class=\"line\">javac 1.8.0_131</span><br></pre></td></tr></table></figure>\n<h2 id=\"linux-免安装\"><a href=\"#linux-免安装\" class=\"headerlink\" title=\"linux 免安装\"></a>linux 免安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">$ wget -P ~/downloads --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建软连接</span></span><br><span class=\"line\">$ sudo ln -sf /usr/<span class=\"built_in\">local</span>/jdk1.8.0_121 /usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar;:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存并退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使配置生效</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>本人原创</p>\n<p>博客 <a href=\"https://anjia.ml/2017/05/17/jdk-zip/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/05/17/jdk-zip/</a><br>简书 <a href=\"http://www.jianshu.com/p/5dc20d5d4f5c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/5dc20d5d4f5c</a><br>掘金 <a href=\"https://juejin.im/post/591bdb222f301e006bcde36b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/591bdb222f301e006bcde36b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"windows-免安装\"><a href=\"#windows-免安装\" class=\"headerlink\" title=\"windows 免安装\"></a>windows 免安装</h2><p>java自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。</p>\n<p>windows安装版有一下坏处</p>\n<ol>\n<li>会写注册表</li>\n<li>会将java.exe,javaw.exe 等解压到<code>C:\\Windows\\System32</code>或者<code>C:\\Windows\\SysWOW64</code> </li>\n<li>会将定期更新程序设置开机自启动，发现新版本弹窗提示</li>\n<li>会在<code>PATH</code>中写一个oracle的javapath,还会加上<code>jre\\bin</code></li>\n</ol>\n<p>好处就是安装方便</p>\n<p>今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的<code>%JAVA_HOME%\\bin;</code>又配了一个<code>%JAVA_HOME%\\jre\\bin;</code>导致出了一个很诡异的错误。</p>\n<p>下面说一下，如何免安装</p>\n<p>从 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载最新的jdk windows安装版<br>e.g.<br><code>jdk-8u131-windows-x64.exe</code></p>\n<p>用解压缩软件解压到<code>E:\\jdk-8u131-windows-x64\\</code> <code>Win+R</code>-&gt;<code>cmd</code>打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10</span><br><span class=\"line\">extrac32.exe 111</span><br><span class=\"line\"></span><br><span class=\"line\">:: 此时解压出 tools.zip 文件</span><br><span class=\"line\">:: 打开当前文件夹</span><br><span class=\"line\">explorer.exe .</span><br><span class=\"line\">:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将 .pack文件改成.jar文件</span><br><span class=\"line\"></span><br><span class=\"line\">cd tools</span><br><span class=\"line\">for /r %x in (*.pack) do .\\bin\\unpack200 -r &quot;%x&quot; &quot;%~dx%~px%~nx.jar&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步</span><br><span class=\"line\"></span><br><span class=\"line\">cd ..\\..\\JAVA_CAB9</span><br><span class=\"line\">extrac32 110</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将src.zip移动到tools文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">move src.zip ..\\JAVA_CAB10\\tools\\</span><br><span class=\"line\"></span><br><span class=\"line\">:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">xcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\">:: 删除 E:\\jdk-8u131-windows-x64 文件夹</span><br><span class=\"line\">cd / &amp;&amp; rd /s /q E:\\jdk-8u131-windows-x64</span><br></pre></td></tr></table></figure>\n<p>设置环境变量<br>增加 <code>JAVA_HOME</code> <code>d:\\jdk</code></p>\n<p>修改<code>PATH</code></p>\n<p>追加 <code>;%JAVA_HOME%\\bin;</code></p>\n<p>增加 <code>CLASSPATH</code></p>\n<p><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p>设置环境变量后，需要重新打开<code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version &amp;&amp; javac -version</span><br><span class=\"line\">java version &quot;1.8.0_131&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)</span><br><span class=\"line\">javac 1.8.0_131</span><br></pre></td></tr></table></figure>\n<h2 id=\"linux-免安装\"><a href=\"#linux-免安装\" class=\"headerlink\" title=\"linux 免安装\"></a>linux 免安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">$ wget -P ~/downloads --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建软连接</span></span><br><span class=\"line\">$ sudo ln -sf /usr/<span class=\"built_in\">local</span>/jdk1.8.0_121 /usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar;:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存并退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使配置生效</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>本人原创</p>\n<p>博客 <a href=\"https://anjia.ml/2017/05/17/jdk-zip/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/05/17/jdk-zip/</a><br>简书 <a href=\"http://www.jianshu.com/p/5dc20d5d4f5c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/5dc20d5d4f5c</a><br>掘金 <a href=\"https://juejin.im/post/591bdb222f301e006bcde36b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/591bdb222f301e006bcde36b</a></p>\n"},{"title":"026-Kettle表输入表输出提升50倍的秘诀","date":"2019-06-12T04:30:53.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第26篇，定个小目标999，每周最少2篇。\n\n\n最近工作需要，需要从Oracle导数据到Mysql，并且需要进行适当的清洗，转换。<br />数据量在5亿条左右，硬件环境为Winserver 2008R2 64位 ，64G，48核，1T hdd，kettle是8.2，从Oracle（11G,linux服务器，局域网连接）抽到mysql(5.7,本机，win server)。<br />优化前的速度是读1000r/s(Oracle)左右，写1000r/s左右。<br />优化后的速度是读8Wr/s(Oracle)左右，写4Wr/s左右。<br />因为表的字段大小和类型以及是否有索引都有关系，所以总体来说，提升了20-50倍左右。\n\n<!-- more -->\n\n<a name=\"HII81\"></a>\n## mysql 优化\nmysql此处只是为了迁移数据用，实际上用csv，或者clickhouse也行。但是担心csv在处理日期时可能有问题，而clickhouse不能在win下跑，而条件所限，没有多余的linux资源，而mysql第三方开源框架(不管是导入hdfs)，还是作为clickhouse的外表，还是数据展示(supserset,metabase等)，还是迁移到tidb，都很方便。所以最终决定用mysql。\n\n> Note:此处的mysql只做临时数据迁移用，所以可以随便重启跟修改mysqld参数。如果是跟业务混用时，需要咨询dba，确保不会影响其他业务。\n\n\n<a name=\"kYnwx\"></a>\n### mysql 安装及配置优化\n\n- 从 [https://dev.mysql.com/downloads/mysql/5.7.html#downloads](https://dev.mysql.com/downloads/mysql/5.7.html#downloads) 下载64位 zip mysql\n- 解压 mysql-5.7.26-winx64.zip 到目录，比如 D:\\mysql-5.7.26-winx64\n- 创建D:\\mysql-5.7.26-winx64\\my.ini\n```\n[mysqld]\nport=3306\nbasedir=D:\\mysql-5.7.26-winx64\\\ndatadir=D:\\mysql-5.7.26-winx64\\data\nnet_buffer_length=5242880\nmax_allowed_packet=104857600\nbulk_insert_buffer_size=104857600\nmax_connections = 1000\ninnodb_flush_log_at_trx_commit = 2\n# 本场景下测试MyISAM比InnoDB 提升1倍左右\ndefault-storage-engine=MyISAM\ngeneral_log = 1\ngeneral_log_file=D:\\mysql-5.7.26-winx64\\logs\\mysql.log\ninnodb_buffer_pool_size = 36G\ninnodb_log_files_in_group=2\ninnodb_log_file_size = 500M\ninnodb_log_buffer_size = 50M\nsync_binlog=1\ninnodb_lock_wait_timeout = 50\ninnodb_thread_concurrency = 16\nkey_buffer_size=82M\nread_buffer_size=64K\nread_rnd_buffer_size=256K\nsort_buffer_size=256K\nmyisam_max_sort_file_size=100G\nmyisam_sort_buffer_size=100M\ntransaction_isolation=READ-COMMITTED\n```\n\n- 参考 [2.3.5 Installing MySQL on Microsoft Windows Using a noinstall ZIP Archive](https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html) 进行安装\n- 启动mysql服务\n\n<a name=\"NrnAs\"></a>\n## Kettle优化\n\n<a name=\"p9t6p\"></a>\n### 启动参数优化\n本机内存较大，为了防止OOM，所以调大内存参数，创建环境变量 `PENTAHO_DI_JAVA_OPTIONS` = `-Xms20480m -Xmx30720m -XX:MaxPermSize=1024m` 起始20G，最大30G\n\n<a name=\"LDDFl\"></a>\n### 表输入和表输出开启多线程\n表输入如果开启多线程的话，会导致数据重复。比如 `select * from test` ,起3个线程，就会查3遍，最后的数据就是3份。肯定不行，没达到优化的目的。<br />因为source是oracle，利用oracle的特性： `rownum` 和函数： `mod` ,以及kettle的参数: `Internal.Step.Unique.Count,Internal.Step.Unique.Number` \n```sql\nselect * from (SELECT test.*,rownum rn FROM test ) where mod(rn,${Internal.Step.Unique.Count}) = ${Internal.Step.Unique.Number}\n```\n解释一下\n\n- rownum 是oracle系统顺序分配为从查询返回的行的编号,返回的第一行分配的是1,第二行是2，意味着，如果排序字段或者数据有变化的话，rownum也会变（也就是跟物理数据没有对应关系,如果要对应关系的话，应该用rowid,但是rowid不是数字，而是类似 AAAR3sAAEAAAACXAAA  的编码），所以需要对rownum进行固化，所以将 `SELECT test.*,rownum rn FROM test` 作为子查询\n- mod 是oracle的取模运算函数，比如， `mod(5,3)`  意即 `5%3=2` ，就是 `5/3=1...2` 中的2,也就是如果能获取到总线程数，以及当前线程数，取模，就可以对结果集进行拆分了。 `mod(行号,总线程数)=当前线程序号` \n- kettle 内置函数 `${Internal.Step.Unique.Count}` 和 `${Internal.Step.Unique.Number}` 分别代表线程总数和当前线程序号\n\n而表输出就无所谓了，开多少线程，kettle都会求总数然后平摊的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560314746879-dda9ca2b-4796-4a40-bef3-445afc7bfa39.png#align=left&display=inline&height=200&name=image.png&originHeight=200&originWidth=383&size=15147&status=done&width=383)<br />右键选择表输入或者表输出，选择 `改变开始复制的数量...` 注意，不是一味的调大就一定能提升效率，要进行测试的。<br />表输入时，注意勾选替换变量<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560314826857-199c854f-e240-4094-b112-c0b0c9a8bc8a.png#align=left&display=inline&height=261&name=image.png&originHeight=261&originWidth=744&size=12391&status=done&width=744)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560314887846-35838541-cab9-484c-859a-968d3566241c.png#align=left&display=inline&height=732&name=image.png&originHeight=732&originWidth=505&size=28983&status=done&width=505)\n\n- 修改提交数量(默认100，但是不是越大越好)\n- 去掉裁剪表，因为是多线程，你肯定不希望，A线程刚插入的，B给删掉。\n- 必须要指定数据库字段，因为表输入的时候，会多一个行号字段。会导致插入失败。当然如果你在创建表时，多加了行号字段，当做自增id的话，那就不需要这一步了。\n- 开启批量插入\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315449676-93873a23-b85d-4446-98be-589792105ec1.png#align=left&display=inline&height=538&name=image.png&originHeight=538&originWidth=529&size=33262&status=done&width=529)\n\n> Note: 通过开启多线程，速度能提升5倍以上。\n\n\n<a name=\"UL8Sb\"></a>\n### 开启线程池及优化jdbc参数\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315569302-4a129a71-4921-4c32-96c8-80a423811f46.png#align=left&display=inline&height=338&name=image.png&originHeight=338&originWidth=440&size=17388&status=done&width=440)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315593202-4f39a1a4-6340-4dc1-8915-70428c1c1a34.png#align=left&display=inline&height=408&name=image.png&originHeight=408&originWidth=1005&size=19781&status=done&width=1005)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315610579-7ce37a68-6bc9-4041-b67d-a3d5c6162291.png#align=left&display=inline&height=253&name=image.png&originHeight=253&originWidth=1015&size=14437&status=done&width=1015)\n\n<a name=\"01roX\"></a>\n## 运行观察结果\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315664223-5d94f858-ef86-42a3-ae31-86b83d189490.png#align=left&display=inline&height=399&name=image.png&originHeight=399&originWidth=708&size=34982&status=done&width=708)<br />注意调整不同的参数(线程数，提交数),观察速度。\n\n<a name=\"Dgs07\"></a>\n## 其余提升空间\n\n1. 换ssd\n1. 继续优化mysql参数\n1. 换引擎，比如，tokudb\n1. 换抽取工具，比如streamsets,datax\n1. 换数据库，比如 clickhouse,tidb,Cassandra\n1. kettle集群\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","source":"_posts/kettle-speed-on.md","raw":"\n---\n\ntitle: 026-Kettle表输入表输出提升50倍的秘诀\n\ndate: 2019-06-12 12:30:53 +0800\n\ntags: [Kettle,ETL,PDI,pentaho]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第26篇，定个小目标999，每周最少2篇。\n\n\n最近工作需要，需要从Oracle导数据到Mysql，并且需要进行适当的清洗，转换。<br />数据量在5亿条左右，硬件环境为Winserver 2008R2 64位 ，64G，48核，1T hdd，kettle是8.2，从Oracle（11G,linux服务器，局域网连接）抽到mysql(5.7,本机，win server)。<br />优化前的速度是读1000r/s(Oracle)左右，写1000r/s左右。<br />优化后的速度是读8Wr/s(Oracle)左右，写4Wr/s左右。<br />因为表的字段大小和类型以及是否有索引都有关系，所以总体来说，提升了20-50倍左右。\n\n<!-- more -->\n\n<a name=\"HII81\"></a>\n## mysql 优化\nmysql此处只是为了迁移数据用，实际上用csv，或者clickhouse也行。但是担心csv在处理日期时可能有问题，而clickhouse不能在win下跑，而条件所限，没有多余的linux资源，而mysql第三方开源框架(不管是导入hdfs)，还是作为clickhouse的外表，还是数据展示(supserset,metabase等)，还是迁移到tidb，都很方便。所以最终决定用mysql。\n\n> Note:此处的mysql只做临时数据迁移用，所以可以随便重启跟修改mysqld参数。如果是跟业务混用时，需要咨询dba，确保不会影响其他业务。\n\n\n<a name=\"kYnwx\"></a>\n### mysql 安装及配置优化\n\n- 从 [https://dev.mysql.com/downloads/mysql/5.7.html#downloads](https://dev.mysql.com/downloads/mysql/5.7.html#downloads) 下载64位 zip mysql\n- 解压 mysql-5.7.26-winx64.zip 到目录，比如 D:\\mysql-5.7.26-winx64\n- 创建D:\\mysql-5.7.26-winx64\\my.ini\n```\n[mysqld]\nport=3306\nbasedir=D:\\mysql-5.7.26-winx64\\\ndatadir=D:\\mysql-5.7.26-winx64\\data\nnet_buffer_length=5242880\nmax_allowed_packet=104857600\nbulk_insert_buffer_size=104857600\nmax_connections = 1000\ninnodb_flush_log_at_trx_commit = 2\n# 本场景下测试MyISAM比InnoDB 提升1倍左右\ndefault-storage-engine=MyISAM\ngeneral_log = 1\ngeneral_log_file=D:\\mysql-5.7.26-winx64\\logs\\mysql.log\ninnodb_buffer_pool_size = 36G\ninnodb_log_files_in_group=2\ninnodb_log_file_size = 500M\ninnodb_log_buffer_size = 50M\nsync_binlog=1\ninnodb_lock_wait_timeout = 50\ninnodb_thread_concurrency = 16\nkey_buffer_size=82M\nread_buffer_size=64K\nread_rnd_buffer_size=256K\nsort_buffer_size=256K\nmyisam_max_sort_file_size=100G\nmyisam_sort_buffer_size=100M\ntransaction_isolation=READ-COMMITTED\n```\n\n- 参考 [2.3.5 Installing MySQL on Microsoft Windows Using a noinstall ZIP Archive](https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html) 进行安装\n- 启动mysql服务\n\n<a name=\"NrnAs\"></a>\n## Kettle优化\n\n<a name=\"p9t6p\"></a>\n### 启动参数优化\n本机内存较大，为了防止OOM，所以调大内存参数，创建环境变量 `PENTAHO_DI_JAVA_OPTIONS` = `-Xms20480m -Xmx30720m -XX:MaxPermSize=1024m` 起始20G，最大30G\n\n<a name=\"LDDFl\"></a>\n### 表输入和表输出开启多线程\n表输入如果开启多线程的话，会导致数据重复。比如 `select * from test` ,起3个线程，就会查3遍，最后的数据就是3份。肯定不行，没达到优化的目的。<br />因为source是oracle，利用oracle的特性： `rownum` 和函数： `mod` ,以及kettle的参数: `Internal.Step.Unique.Count,Internal.Step.Unique.Number` \n```sql\nselect * from (SELECT test.*,rownum rn FROM test ) where mod(rn,${Internal.Step.Unique.Count}) = ${Internal.Step.Unique.Number}\n```\n解释一下\n\n- rownum 是oracle系统顺序分配为从查询返回的行的编号,返回的第一行分配的是1,第二行是2，意味着，如果排序字段或者数据有变化的话，rownum也会变（也就是跟物理数据没有对应关系,如果要对应关系的话，应该用rowid,但是rowid不是数字，而是类似 AAAR3sAAEAAAACXAAA  的编码），所以需要对rownum进行固化，所以将 `SELECT test.*,rownum rn FROM test` 作为子查询\n- mod 是oracle的取模运算函数，比如， `mod(5,3)`  意即 `5%3=2` ，就是 `5/3=1...2` 中的2,也就是如果能获取到总线程数，以及当前线程数，取模，就可以对结果集进行拆分了。 `mod(行号,总线程数)=当前线程序号` \n- kettle 内置函数 `${Internal.Step.Unique.Count}` 和 `${Internal.Step.Unique.Number}` 分别代表线程总数和当前线程序号\n\n而表输出就无所谓了，开多少线程，kettle都会求总数然后平摊的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560314746879-dda9ca2b-4796-4a40-bef3-445afc7bfa39.png#align=left&display=inline&height=200&name=image.png&originHeight=200&originWidth=383&size=15147&status=done&width=383)<br />右键选择表输入或者表输出，选择 `改变开始复制的数量...` 注意，不是一味的调大就一定能提升效率，要进行测试的。<br />表输入时，注意勾选替换变量<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560314826857-199c854f-e240-4094-b112-c0b0c9a8bc8a.png#align=left&display=inline&height=261&name=image.png&originHeight=261&originWidth=744&size=12391&status=done&width=744)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560314887846-35838541-cab9-484c-859a-968d3566241c.png#align=left&display=inline&height=732&name=image.png&originHeight=732&originWidth=505&size=28983&status=done&width=505)\n\n- 修改提交数量(默认100，但是不是越大越好)\n- 去掉裁剪表，因为是多线程，你肯定不希望，A线程刚插入的，B给删掉。\n- 必须要指定数据库字段，因为表输入的时候，会多一个行号字段。会导致插入失败。当然如果你在创建表时，多加了行号字段，当做自增id的话，那就不需要这一步了。\n- 开启批量插入\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315449676-93873a23-b85d-4446-98be-589792105ec1.png#align=left&display=inline&height=538&name=image.png&originHeight=538&originWidth=529&size=33262&status=done&width=529)\n\n> Note: 通过开启多线程，速度能提升5倍以上。\n\n\n<a name=\"UL8Sb\"></a>\n### 开启线程池及优化jdbc参数\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315569302-4a129a71-4921-4c32-96c8-80a423811f46.png#align=left&display=inline&height=338&name=image.png&originHeight=338&originWidth=440&size=17388&status=done&width=440)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315593202-4f39a1a4-6340-4dc1-8915-70428c1c1a34.png#align=left&display=inline&height=408&name=image.png&originHeight=408&originWidth=1005&size=19781&status=done&width=1005)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315610579-7ce37a68-6bc9-4041-b67d-a3d5c6162291.png#align=left&display=inline&height=253&name=image.png&originHeight=253&originWidth=1015&size=14437&status=done&width=1015)\n\n<a name=\"01roX\"></a>\n## 运行观察结果\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560315664223-5d94f858-ef86-42a3-ae31-86b83d189490.png#align=left&display=inline&height=399&name=image.png&originHeight=399&originWidth=708&size=34982&status=done&width=708)<br />注意调整不同的参数(线程数，提交数),观察速度。\n\n<a name=\"Dgs07\"></a>\n## 其余提升空间\n\n1. 换ssd\n1. 继续优化mysql参数\n1. 换引擎，比如，tokudb\n1. 换抽取工具，比如streamsets,datax\n1. 换数据库，比如 clickhouse,tidb,Cassandra\n1. kettle集群\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","slug":"kettle-speed-on","published":1,"updated":"2019-08-16T06:11:15.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdm001s24do4k3vvaso","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第26篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>最近工作需要，需要从Oracle导数据到Mysql，并且需要进行适当的清洗，转换。<br>数据量在5亿条左右，硬件环境为Winserver 2008R2 64位 ，64G，48核，1T hdd，kettle是8.2，从Oracle（11G,linux服务器，局域网连接）抽到mysql(5.7,本机，win server)。<br>优化前的速度是读1000r/s(Oracle)左右，写1000r/s左右。<br>优化后的速度是读8Wr/s(Oracle)左右，写4Wr/s左右。<br>因为表的字段大小和类型以及是否有索引都有关系，所以总体来说，提升了20-50倍左右。</p>\n<a id=\"more\"></a>\n<p><a name=\"HII81\"></a></p>\n<h2 id=\"mysql-优化\"><a href=\"#mysql-优化\" class=\"headerlink\" title=\"mysql 优化\"></a>mysql 优化</h2><p>mysql此处只是为了迁移数据用，实际上用csv，或者clickhouse也行。但是担心csv在处理日期时可能有问题，而clickhouse不能在win下跑，而条件所限，没有多余的linux资源，而mysql第三方开源框架(不管是导入hdfs)，还是作为clickhouse的外表，还是数据展示(supserset,metabase等)，还是迁移到tidb，都很方便。所以最终决定用mysql。</p>\n<blockquote>\n<p>Note:此处的mysql只做临时数据迁移用，所以可以随便重启跟修改mysqld参数。如果是跟业务混用时，需要咨询dba，确保不会影响其他业务。</p>\n</blockquote>\n<p><a name=\"kYnwx\"></a></p>\n<h3 id=\"mysql-安装及配置优化\"><a href=\"#mysql-安装及配置优化\" class=\"headerlink\" title=\"mysql 安装及配置优化\"></a>mysql 安装及配置优化</h3><ul>\n<li>从 <a href=\"https://dev.mysql.com/downloads/mysql/5.7.html#downloads\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a> 下载64位 zip mysql</li>\n<li>解压 mysql-5.7.26-winx64.zip 到目录，比如 D:\\mysql-5.7.26-winx64</li>\n<li><p>创建D:\\mysql-5.7.26-winx64\\my.ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">basedir=D:\\mysql-5.7.26-winx64\\</span><br><span class=\"line\">datadir=D:\\mysql-5.7.26-winx64\\data</span><br><span class=\"line\">net_buffer_length=5242880</span><br><span class=\"line\">max_allowed_packet=104857600</span><br><span class=\"line\">bulk_insert_buffer_size=104857600</span><br><span class=\"line\">max_connections = 1000</span><br><span class=\"line\">innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\"># 本场景下测试MyISAM比InnoDB 提升1倍左右</span><br><span class=\"line\">default-storage-engine=MyISAM</span><br><span class=\"line\">general_log = 1</span><br><span class=\"line\">general_log_file=D:\\mysql-5.7.26-winx64\\logs\\mysql.log</span><br><span class=\"line\">innodb_buffer_pool_size = 36G</span><br><span class=\"line\">innodb_log_files_in_group=2</span><br><span class=\"line\">innodb_log_file_size = 500M</span><br><span class=\"line\">innodb_log_buffer_size = 50M</span><br><span class=\"line\">sync_binlog=1</span><br><span class=\"line\">innodb_lock_wait_timeout = 50</span><br><span class=\"line\">innodb_thread_concurrency = 16</span><br><span class=\"line\">key_buffer_size=82M</span><br><span class=\"line\">read_buffer_size=64K</span><br><span class=\"line\">read_rnd_buffer_size=256K</span><br><span class=\"line\">sort_buffer_size=256K</span><br><span class=\"line\">myisam_max_sort_file_size=100G</span><br><span class=\"line\">myisam_sort_buffer_size=100M</span><br><span class=\"line\">transaction_isolation=READ-COMMITTED</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参考 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html\" target=\"_blank\" rel=\"noopener\">2.3.5 Installing MySQL on Microsoft Windows Using a noinstall ZIP Archive</a> 进行安装</p>\n</li>\n<li>启动mysql服务</li>\n</ul>\n<p><a name=\"NrnAs\"></a></p>\n<h2 id=\"Kettle优化\"><a href=\"#Kettle优化\" class=\"headerlink\" title=\"Kettle优化\"></a>Kettle优化</h2><p><a name=\"p9t6p\"></a></p>\n<h3 id=\"启动参数优化\"><a href=\"#启动参数优化\" class=\"headerlink\" title=\"启动参数优化\"></a>启动参数优化</h3><p>本机内存较大，为了防止OOM，所以调大内存参数，创建环境变量 <code>PENTAHO_DI_JAVA_OPTIONS</code> = <code>-Xms20480m -Xmx30720m -XX:MaxPermSize=1024m</code> 起始20G，最大30G</p>\n<p><a name=\"LDDFl\"></a></p>\n<h3 id=\"表输入和表输出开启多线程\"><a href=\"#表输入和表输出开启多线程\" class=\"headerlink\" title=\"表输入和表输出开启多线程\"></a>表输入和表输出开启多线程</h3><p>表输入如果开启多线程的话，会导致数据重复。比如 <code>select * from test</code> ,起3个线程，就会查3遍，最后的数据就是3份。肯定不行，没达到优化的目的。<br>因为source是oracle，利用oracle的特性： <code>rownum</code> 和函数： <code>mod</code> ,以及kettle的参数: <code>Internal.Step.Unique.Count,Internal.Step.Unique.Number</code><br><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">SELECT</span> test.*,<span class=\"keyword\">rownum</span> rn <span class=\"keyword\">FROM</span> <span class=\"keyword\">test</span> ) <span class=\"keyword\">where</span> <span class=\"keyword\">mod</span>(rn,$&#123;Internal.Step.Unique.Count&#125;) = $&#123;Internal.Step.Unique.Number&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解释一下</p>\n<ul>\n<li>rownum 是oracle系统顺序分配为从查询返回的行的编号,返回的第一行分配的是1,第二行是2，意味着，如果排序字段或者数据有变化的话，rownum也会变（也就是跟物理数据没有对应关系,如果要对应关系的话，应该用rowid,但是rowid不是数字，而是类似 AAAR3sAAEAAAACXAAA  的编码），所以需要对rownum进行固化，所以将 <code>SELECT test.*,rownum rn FROM test</code> 作为子查询</li>\n<li>mod 是oracle的取模运算函数，比如， <code>mod(5,3)</code>  意即 <code>5%3=2</code> ，就是 <code>5/3=1...2</code> 中的2,也就是如果能获取到总线程数，以及当前线程数，取模，就可以对结果集进行拆分了。 <code>mod(行号,总线程数)=当前线程序号</code> </li>\n<li>kettle 内置函数 <code>${Internal.Step.Unique.Count}</code> 和 <code>${Internal.Step.Unique.Number}</code> 分别代表线程总数和当前线程序号</li>\n</ul>\n<p>而表输出就无所谓了，开多少线程，kettle都会求总数然后平摊的。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560314746879-dda9ca2b-4796-4a40-bef3-445afc7bfa39.png#align=left&amp;display=inline&amp;height=200&amp;name=image.png&amp;originHeight=200&amp;originWidth=383&amp;size=15147&amp;status=done&amp;width=383\" alt=\"image.png\"><br>右键选择表输入或者表输出，选择 <code>改变开始复制的数量...</code> 注意，不是一味的调大就一定能提升效率，要进行测试的。<br>表输入时，注意勾选替换变量<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560314826857-199c854f-e240-4094-b112-c0b0c9a8bc8a.png#align=left&amp;display=inline&amp;height=261&amp;name=image.png&amp;originHeight=261&amp;originWidth=744&amp;size=12391&amp;status=done&amp;width=744\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560314887846-35838541-cab9-484c-859a-968d3566241c.png#align=left&amp;display=inline&amp;height=732&amp;name=image.png&amp;originHeight=732&amp;originWidth=505&amp;size=28983&amp;status=done&amp;width=505\" alt=\"image.png\"></p>\n<ul>\n<li>修改提交数量(默认100，但是不是越大越好)</li>\n<li>去掉裁剪表，因为是多线程，你肯定不希望，A线程刚插入的，B给删掉。</li>\n<li>必须要指定数据库字段，因为表输入的时候，会多一个行号字段。会导致插入失败。当然如果你在创建表时，多加了行号字段，当做自增id的话，那就不需要这一步了。</li>\n<li>开启批量插入</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315449676-93873a23-b85d-4446-98be-589792105ec1.png#align=left&amp;display=inline&amp;height=538&amp;name=image.png&amp;originHeight=538&amp;originWidth=529&amp;size=33262&amp;status=done&amp;width=529\" alt=\"image.png\"></p>\n<blockquote>\n<p>Note: 通过开启多线程，速度能提升5倍以上。</p>\n</blockquote>\n<p><a name=\"UL8Sb\"></a></p>\n<h3 id=\"开启线程池及优化jdbc参数\"><a href=\"#开启线程池及优化jdbc参数\" class=\"headerlink\" title=\"开启线程池及优化jdbc参数\"></a>开启线程池及优化jdbc参数</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315569302-4a129a71-4921-4c32-96c8-80a423811f46.png#align=left&amp;display=inline&amp;height=338&amp;name=image.png&amp;originHeight=338&amp;originWidth=440&amp;size=17388&amp;status=done&amp;width=440\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315593202-4f39a1a4-6340-4dc1-8915-70428c1c1a34.png#align=left&amp;display=inline&amp;height=408&amp;name=image.png&amp;originHeight=408&amp;originWidth=1005&amp;size=19781&amp;status=done&amp;width=1005\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315610579-7ce37a68-6bc9-4041-b67d-a3d5c6162291.png#align=left&amp;display=inline&amp;height=253&amp;name=image.png&amp;originHeight=253&amp;originWidth=1015&amp;size=14437&amp;status=done&amp;width=1015\" alt=\"image.png\"></p>\n<p><a name=\"01roX\"></a></p>\n<h2 id=\"运行观察结果\"><a href=\"#运行观察结果\" class=\"headerlink\" title=\"运行观察结果\"></a>运行观察结果</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315664223-5d94f858-ef86-42a3-ae31-86b83d189490.png#align=left&amp;display=inline&amp;height=399&amp;name=image.png&amp;originHeight=399&amp;originWidth=708&amp;size=34982&amp;status=done&amp;width=708\" alt=\"image.png\"><br>注意调整不同的参数(线程数，提交数),观察速度。</p>\n<p><a name=\"Dgs07\"></a></p>\n<h2 id=\"其余提升空间\"><a href=\"#其余提升空间\" class=\"headerlink\" title=\"其余提升空间\"></a>其余提升空间</h2><ol>\n<li>换ssd</li>\n<li>继续优化mysql参数</li>\n<li>换引擎，比如，tokudb</li>\n<li>换抽取工具，比如streamsets,datax</li>\n<li>换数据库，比如 clickhouse,tidb,Cassandra</li>\n<li>kettle集群</li>\n</ol>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第26篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>最近工作需要，需要从Oracle导数据到Mysql，并且需要进行适当的清洗，转换。<br>数据量在5亿条左右，硬件环境为Winserver 2008R2 64位 ，64G，48核，1T hdd，kettle是8.2，从Oracle（11G,linux服务器，局域网连接）抽到mysql(5.7,本机，win server)。<br>优化前的速度是读1000r/s(Oracle)左右，写1000r/s左右。<br>优化后的速度是读8Wr/s(Oracle)左右，写4Wr/s左右。<br>因为表的字段大小和类型以及是否有索引都有关系，所以总体来说，提升了20-50倍左右。</p>","more":"<p><a name=\"HII81\"></a></p>\n<h2 id=\"mysql-优化\"><a href=\"#mysql-优化\" class=\"headerlink\" title=\"mysql 优化\"></a>mysql 优化</h2><p>mysql此处只是为了迁移数据用，实际上用csv，或者clickhouse也行。但是担心csv在处理日期时可能有问题，而clickhouse不能在win下跑，而条件所限，没有多余的linux资源，而mysql第三方开源框架(不管是导入hdfs)，还是作为clickhouse的外表，还是数据展示(supserset,metabase等)，还是迁移到tidb，都很方便。所以最终决定用mysql。</p>\n<blockquote>\n<p>Note:此处的mysql只做临时数据迁移用，所以可以随便重启跟修改mysqld参数。如果是跟业务混用时，需要咨询dba，确保不会影响其他业务。</p>\n</blockquote>\n<p><a name=\"kYnwx\"></a></p>\n<h3 id=\"mysql-安装及配置优化\"><a href=\"#mysql-安装及配置优化\" class=\"headerlink\" title=\"mysql 安装及配置优化\"></a>mysql 安装及配置优化</h3><ul>\n<li>从 <a href=\"https://dev.mysql.com/downloads/mysql/5.7.html#downloads\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a> 下载64位 zip mysql</li>\n<li>解压 mysql-5.7.26-winx64.zip 到目录，比如 D:\\mysql-5.7.26-winx64</li>\n<li><p>创建D:\\mysql-5.7.26-winx64\\my.ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">basedir=D:\\mysql-5.7.26-winx64\\</span><br><span class=\"line\">datadir=D:\\mysql-5.7.26-winx64\\data</span><br><span class=\"line\">net_buffer_length=5242880</span><br><span class=\"line\">max_allowed_packet=104857600</span><br><span class=\"line\">bulk_insert_buffer_size=104857600</span><br><span class=\"line\">max_connections = 1000</span><br><span class=\"line\">innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\"># 本场景下测试MyISAM比InnoDB 提升1倍左右</span><br><span class=\"line\">default-storage-engine=MyISAM</span><br><span class=\"line\">general_log = 1</span><br><span class=\"line\">general_log_file=D:\\mysql-5.7.26-winx64\\logs\\mysql.log</span><br><span class=\"line\">innodb_buffer_pool_size = 36G</span><br><span class=\"line\">innodb_log_files_in_group=2</span><br><span class=\"line\">innodb_log_file_size = 500M</span><br><span class=\"line\">innodb_log_buffer_size = 50M</span><br><span class=\"line\">sync_binlog=1</span><br><span class=\"line\">innodb_lock_wait_timeout = 50</span><br><span class=\"line\">innodb_thread_concurrency = 16</span><br><span class=\"line\">key_buffer_size=82M</span><br><span class=\"line\">read_buffer_size=64K</span><br><span class=\"line\">read_rnd_buffer_size=256K</span><br><span class=\"line\">sort_buffer_size=256K</span><br><span class=\"line\">myisam_max_sort_file_size=100G</span><br><span class=\"line\">myisam_sort_buffer_size=100M</span><br><span class=\"line\">transaction_isolation=READ-COMMITTED</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参考 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html\" target=\"_blank\" rel=\"noopener\">2.3.5 Installing MySQL on Microsoft Windows Using a noinstall ZIP Archive</a> 进行安装</p>\n</li>\n<li>启动mysql服务</li>\n</ul>\n<p><a name=\"NrnAs\"></a></p>\n<h2 id=\"Kettle优化\"><a href=\"#Kettle优化\" class=\"headerlink\" title=\"Kettle优化\"></a>Kettle优化</h2><p><a name=\"p9t6p\"></a></p>\n<h3 id=\"启动参数优化\"><a href=\"#启动参数优化\" class=\"headerlink\" title=\"启动参数优化\"></a>启动参数优化</h3><p>本机内存较大，为了防止OOM，所以调大内存参数，创建环境变量 <code>PENTAHO_DI_JAVA_OPTIONS</code> = <code>-Xms20480m -Xmx30720m -XX:MaxPermSize=1024m</code> 起始20G，最大30G</p>\n<p><a name=\"LDDFl\"></a></p>\n<h3 id=\"表输入和表输出开启多线程\"><a href=\"#表输入和表输出开启多线程\" class=\"headerlink\" title=\"表输入和表输出开启多线程\"></a>表输入和表输出开启多线程</h3><p>表输入如果开启多线程的话，会导致数据重复。比如 <code>select * from test</code> ,起3个线程，就会查3遍，最后的数据就是3份。肯定不行，没达到优化的目的。<br>因为source是oracle，利用oracle的特性： <code>rownum</code> 和函数： <code>mod</code> ,以及kettle的参数: <code>Internal.Step.Unique.Count,Internal.Step.Unique.Number</code><br><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">SELECT</span> test.*,<span class=\"keyword\">rownum</span> rn <span class=\"keyword\">FROM</span> <span class=\"keyword\">test</span> ) <span class=\"keyword\">where</span> <span class=\"keyword\">mod</span>(rn,$&#123;Internal.Step.Unique.Count&#125;) = $&#123;Internal.Step.Unique.Number&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解释一下</p>\n<ul>\n<li>rownum 是oracle系统顺序分配为从查询返回的行的编号,返回的第一行分配的是1,第二行是2，意味着，如果排序字段或者数据有变化的话，rownum也会变（也就是跟物理数据没有对应关系,如果要对应关系的话，应该用rowid,但是rowid不是数字，而是类似 AAAR3sAAEAAAACXAAA  的编码），所以需要对rownum进行固化，所以将 <code>SELECT test.*,rownum rn FROM test</code> 作为子查询</li>\n<li>mod 是oracle的取模运算函数，比如， <code>mod(5,3)</code>  意即 <code>5%3=2</code> ，就是 <code>5/3=1...2</code> 中的2,也就是如果能获取到总线程数，以及当前线程数，取模，就可以对结果集进行拆分了。 <code>mod(行号,总线程数)=当前线程序号</code> </li>\n<li>kettle 内置函数 <code>${Internal.Step.Unique.Count}</code> 和 <code>${Internal.Step.Unique.Number}</code> 分别代表线程总数和当前线程序号</li>\n</ul>\n<p>而表输出就无所谓了，开多少线程，kettle都会求总数然后平摊的。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560314746879-dda9ca2b-4796-4a40-bef3-445afc7bfa39.png#align=left&amp;display=inline&amp;height=200&amp;name=image.png&amp;originHeight=200&amp;originWidth=383&amp;size=15147&amp;status=done&amp;width=383\" alt=\"image.png\"><br>右键选择表输入或者表输出，选择 <code>改变开始复制的数量...</code> 注意，不是一味的调大就一定能提升效率，要进行测试的。<br>表输入时，注意勾选替换变量<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560314826857-199c854f-e240-4094-b112-c0b0c9a8bc8a.png#align=left&amp;display=inline&amp;height=261&amp;name=image.png&amp;originHeight=261&amp;originWidth=744&amp;size=12391&amp;status=done&amp;width=744\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560314887846-35838541-cab9-484c-859a-968d3566241c.png#align=left&amp;display=inline&amp;height=732&amp;name=image.png&amp;originHeight=732&amp;originWidth=505&amp;size=28983&amp;status=done&amp;width=505\" alt=\"image.png\"></p>\n<ul>\n<li>修改提交数量(默认100，但是不是越大越好)</li>\n<li>去掉裁剪表，因为是多线程，你肯定不希望，A线程刚插入的，B给删掉。</li>\n<li>必须要指定数据库字段，因为表输入的时候，会多一个行号字段。会导致插入失败。当然如果你在创建表时，多加了行号字段，当做自增id的话，那就不需要这一步了。</li>\n<li>开启批量插入</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315449676-93873a23-b85d-4446-98be-589792105ec1.png#align=left&amp;display=inline&amp;height=538&amp;name=image.png&amp;originHeight=538&amp;originWidth=529&amp;size=33262&amp;status=done&amp;width=529\" alt=\"image.png\"></p>\n<blockquote>\n<p>Note: 通过开启多线程，速度能提升5倍以上。</p>\n</blockquote>\n<p><a name=\"UL8Sb\"></a></p>\n<h3 id=\"开启线程池及优化jdbc参数\"><a href=\"#开启线程池及优化jdbc参数\" class=\"headerlink\" title=\"开启线程池及优化jdbc参数\"></a>开启线程池及优化jdbc参数</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315569302-4a129a71-4921-4c32-96c8-80a423811f46.png#align=left&amp;display=inline&amp;height=338&amp;name=image.png&amp;originHeight=338&amp;originWidth=440&amp;size=17388&amp;status=done&amp;width=440\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315593202-4f39a1a4-6340-4dc1-8915-70428c1c1a34.png#align=left&amp;display=inline&amp;height=408&amp;name=image.png&amp;originHeight=408&amp;originWidth=1005&amp;size=19781&amp;status=done&amp;width=1005\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315610579-7ce37a68-6bc9-4041-b67d-a3d5c6162291.png#align=left&amp;display=inline&amp;height=253&amp;name=image.png&amp;originHeight=253&amp;originWidth=1015&amp;size=14437&amp;status=done&amp;width=1015\" alt=\"image.png\"></p>\n<p><a name=\"01roX\"></a></p>\n<h2 id=\"运行观察结果\"><a href=\"#运行观察结果\" class=\"headerlink\" title=\"运行观察结果\"></a>运行观察结果</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560315664223-5d94f858-ef86-42a3-ae31-86b83d189490.png#align=left&amp;display=inline&amp;height=399&amp;name=image.png&amp;originHeight=399&amp;originWidth=708&amp;size=34982&amp;status=done&amp;width=708\" alt=\"image.png\"><br>注意调整不同的参数(线程数，提交数),观察速度。</p>\n<p><a name=\"Dgs07\"></a></p>\n<h2 id=\"其余提升空间\"><a href=\"#其余提升空间\" class=\"headerlink\" title=\"其余提升空间\"></a>其余提升空间</h2><ol>\n<li>换ssd</li>\n<li>继续优化mysql参数</li>\n<li>换引擎，比如，tokudb</li>\n<li>换抽取工具，比如streamsets,datax</li>\n<li>换数据库，比如 clickhouse,tidb,Cassandra</li>\n<li>kettle集群</li>\n</ol>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"022-会Excel就会数据分析(Kylin2.6.1+Excel+Power BI)","date":"2019-05-04T11:30:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第22篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍如何使用excel/power BI 连接kylin2.6.1\n\n<!-- more -->\n\n<a name=\"Sfko7\"></a>\n## 前提准备\n<a name=\"VpJrp\"></a>\n### 下载kylin odbc\napache官网已经停止提供odbc驱动了，只能从csdn等下载别人上传的，安全性毫无保证。后来转念一想，kylin的商业公司[https://kyligence.io](https://kyligence.io/)，应该会提供吧，一番打探，果然有。\n\n下载地址：[Download Kyligence ODBC Driver for Apache Kylin](https://kyligence.io/resources/kyligence-odbc-driver-for-apache-kylin-2/)\n\n需要填写邮箱进行下载\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557487637088-183279e0-8761-48b5-81d2-8fd69bce8e36.png#align=left&display=inline&height=381&name=image.png&originHeight=381&originWidth=500&size=30999&status=done&width=500)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557487684886-c42c67f8-5dee-4af2-a47d-2bdce29db157.png#align=left&display=inline&height=381&name=image.png&originHeight=381&originWidth=500&size=47222&status=done&width=500)\n\n<a name=\"H3kat\"></a>\n### 配置odbc数据源\n\nWin+R-> Control -> 管理工具 -> ODBC 数据源(64 位)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557487993106-7a08b90d-f53d-40f0-a3c9-8fdbff8611c8.png#align=left&display=inline&height=635&name=image.png&originHeight=635&originWidth=694&size=79547&status=done&width=694)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488108032-bddd3f2f-fbfc-4e1d-a803-5c3f7a56f8f4.png#align=left&display=inline&height=425&name=image.png&originHeight=425&originWidth=400&size=17622&status=done&width=400)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488114771-0324f0b0-c3a7-46fa-beea-170dff5e4b2d.png#align=left&display=inline&height=537&name=image.png&originHeight=537&originWidth=691&size=37086&status=done&width=691)\n\n<a name=\"FmCqE\"></a>\n### 下载powerQuery\nExcel 2016及以后版本，自带PowerQuery<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488219530-ad5c7194-e6ea-4601-b243-fe8cc45a99ab.png#align=left&display=inline&height=169&originHeight=169&originWidth=368&status=done&width=368)\n\n之前版本需要自行下载 PowerQuery [https://www.microsoft.com/zh-CN/download/details.aspx?id=39379](https://www.microsoft.com/zh-CN/download/details.aspx?id=39379)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488170637-adb0b9c1-ee8f-4be4-a9b3-ad31bda9b8db.png#align=left&display=inline&height=530&name=image.png&originHeight=530&originWidth=841&size=43855&status=done&width=841)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488185981-9b81bcfa-3ddc-4695-9b3f-7d899748c779.png#align=left&display=inline&height=584&name=image.png&originHeight=584&originWidth=1268&size=44789&status=done&width=1268)\n\n<a name=\"Xd680\"></a>\n## Excel连接Kylin\n<a name=\"hUPDJ\"></a>\n### Excel 配置Kylin ODBC数据源\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488301678-c1039340-d621-4384-a12e-a0b2ba8fab3f.png#align=left&display=inline&height=804&name=image.png&originHeight=804&originWidth=531&size=81563&status=done&width=531)\n\n选择刚刚配置的KylinDSN\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488319201-dbb80bdd-e95e-4d10-8bd0-5d13ffd14837.png#align=left&display=inline&height=215&name=image.png&originHeight=215&originWidth=698&size=13399&status=done&width=698)<br />填入用户名密码\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488426650-7fd3f229-c5d3-4daa-a495-787e6c946a08.png#align=left&display=inline&height=323&name=image.png&originHeight=323&originWidth=698&size=23403&status=done&width=698)\n\n可以选择表进行预览<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488441858-b8aabe15-7ac5-43c9-a7d1-154fbe70eafb.png#align=left&display=inline&height=698&name=image.png&originHeight=698&originWidth=878&size=76847&status=done&width=878)<br />点击加载按钮进行加载<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488523780-b064229f-f003-4e0f-b125-08c8779b9eef.png#align=left&display=inline&height=640&name=image.png&originHeight=640&originWidth=1889&size=150632&status=done&width=1889)\n\n<a name=\"ioP6f\"></a>\n## PowerBI连接Kylin\n\n<a name=\"yCfu7\"></a>\n### 下载并安装PowerBI\n下载地址 [https://www.microsoft.com/zh-CN/download/details.aspx?id=45331](https://www.microsoft.com/zh-CN/download/details.aspx?id=45331)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174065280-896bf454-a7cf-4ef0-af43-3053909c9b2e.png#align=left&display=inline&height=578&name=image.png&originHeight=578&originWidth=1098&size=82713&status=done&width=1098)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174108812-155f3b80-e2ad-4e9d-90b6-07ebe2a55c43.png#align=left&display=inline&height=663&name=image.png&originHeight=663&originWidth=610&size=47135&status=done&width=610)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174120855-4ec58da8-296b-446d-a2aa-45845dd377d9.png#align=left&display=inline&height=221&name=image.png&originHeight=221&originWidth=700&size=11194&status=done&width=700)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174179132-030a7763-fc1a-48fa-bb1a-8de1b5ff060e.png#align=left&display=inline&height=699&name=image.png&originHeight=699&originWidth=879&size=53708&status=done&width=879)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558175521076-b79af7e2-3efb-48b5-9768-36d6d38102ca.png#align=left&display=inline&height=729&name=image.png&originHeight=729&originWidth=1850&size=101592&status=done&width=1850)\n\n<a name=\"QzhkV\"></a>\n## 参考资料\n\n- [Excel 及 Power BI 教程](http://kylin.apache.org/cn/docs/tutorial/powerbi.html)\n- [Power BI Desktop 入门](https://docs.microsoft.com/zh-cn/power-bi/guided-learning/gettingdata?tutorial-step=2)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","source":"_posts/kylin-excel.md","raw":"\n---\n\ntitle: 022-会Excel就会数据分析(Kylin2.6.1+Excel+Power BI)\n\ndate: 2019-05-04 19:30:00 +0800\n\ntags: [CDH,hadoop,大数据,KYLIN,OLAP,麒麟,Excel,PowerBI]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第22篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍如何使用excel/power BI 连接kylin2.6.1\n\n<!-- more -->\n\n<a name=\"Sfko7\"></a>\n## 前提准备\n<a name=\"VpJrp\"></a>\n### 下载kylin odbc\napache官网已经停止提供odbc驱动了，只能从csdn等下载别人上传的，安全性毫无保证。后来转念一想，kylin的商业公司[https://kyligence.io](https://kyligence.io/)，应该会提供吧，一番打探，果然有。\n\n下载地址：[Download Kyligence ODBC Driver for Apache Kylin](https://kyligence.io/resources/kyligence-odbc-driver-for-apache-kylin-2/)\n\n需要填写邮箱进行下载\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557487637088-183279e0-8761-48b5-81d2-8fd69bce8e36.png#align=left&display=inline&height=381&name=image.png&originHeight=381&originWidth=500&size=30999&status=done&width=500)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557487684886-c42c67f8-5dee-4af2-a47d-2bdce29db157.png#align=left&display=inline&height=381&name=image.png&originHeight=381&originWidth=500&size=47222&status=done&width=500)\n\n<a name=\"H3kat\"></a>\n### 配置odbc数据源\n\nWin+R-> Control -> 管理工具 -> ODBC 数据源(64 位)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557487993106-7a08b90d-f53d-40f0-a3c9-8fdbff8611c8.png#align=left&display=inline&height=635&name=image.png&originHeight=635&originWidth=694&size=79547&status=done&width=694)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488108032-bddd3f2f-fbfc-4e1d-a803-5c3f7a56f8f4.png#align=left&display=inline&height=425&name=image.png&originHeight=425&originWidth=400&size=17622&status=done&width=400)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488114771-0324f0b0-c3a7-46fa-beea-170dff5e4b2d.png#align=left&display=inline&height=537&name=image.png&originHeight=537&originWidth=691&size=37086&status=done&width=691)\n\n<a name=\"FmCqE\"></a>\n### 下载powerQuery\nExcel 2016及以后版本，自带PowerQuery<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488219530-ad5c7194-e6ea-4601-b243-fe8cc45a99ab.png#align=left&display=inline&height=169&originHeight=169&originWidth=368&status=done&width=368)\n\n之前版本需要自行下载 PowerQuery [https://www.microsoft.com/zh-CN/download/details.aspx?id=39379](https://www.microsoft.com/zh-CN/download/details.aspx?id=39379)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488170637-adb0b9c1-ee8f-4be4-a9b3-ad31bda9b8db.png#align=left&display=inline&height=530&name=image.png&originHeight=530&originWidth=841&size=43855&status=done&width=841)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488185981-9b81bcfa-3ddc-4695-9b3f-7d899748c779.png#align=left&display=inline&height=584&name=image.png&originHeight=584&originWidth=1268&size=44789&status=done&width=1268)\n\n<a name=\"Xd680\"></a>\n## Excel连接Kylin\n<a name=\"hUPDJ\"></a>\n### Excel 配置Kylin ODBC数据源\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488301678-c1039340-d621-4384-a12e-a0b2ba8fab3f.png#align=left&display=inline&height=804&name=image.png&originHeight=804&originWidth=531&size=81563&status=done&width=531)\n\n选择刚刚配置的KylinDSN\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488319201-dbb80bdd-e95e-4d10-8bd0-5d13ffd14837.png#align=left&display=inline&height=215&name=image.png&originHeight=215&originWidth=698&size=13399&status=done&width=698)<br />填入用户名密码\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488426650-7fd3f229-c5d3-4daa-a495-787e6c946a08.png#align=left&display=inline&height=323&name=image.png&originHeight=323&originWidth=698&size=23403&status=done&width=698)\n\n可以选择表进行预览<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488441858-b8aabe15-7ac5-43c9-a7d1-154fbe70eafb.png#align=left&display=inline&height=698&name=image.png&originHeight=698&originWidth=878&size=76847&status=done&width=878)<br />点击加载按钮进行加载<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557488523780-b064229f-f003-4e0f-b125-08c8779b9eef.png#align=left&display=inline&height=640&name=image.png&originHeight=640&originWidth=1889&size=150632&status=done&width=1889)\n\n<a name=\"ioP6f\"></a>\n## PowerBI连接Kylin\n\n<a name=\"yCfu7\"></a>\n### 下载并安装PowerBI\n下载地址 [https://www.microsoft.com/zh-CN/download/details.aspx?id=45331](https://www.microsoft.com/zh-CN/download/details.aspx?id=45331)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174065280-896bf454-a7cf-4ef0-af43-3053909c9b2e.png#align=left&display=inline&height=578&name=image.png&originHeight=578&originWidth=1098&size=82713&status=done&width=1098)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174108812-155f3b80-e2ad-4e9d-90b6-07ebe2a55c43.png#align=left&display=inline&height=663&name=image.png&originHeight=663&originWidth=610&size=47135&status=done&width=610)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174120855-4ec58da8-296b-446d-a2aa-45845dd377d9.png#align=left&display=inline&height=221&name=image.png&originHeight=221&originWidth=700&size=11194&status=done&width=700)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558174179132-030a7763-fc1a-48fa-bb1a-8de1b5ff060e.png#align=left&display=inline&height=699&name=image.png&originHeight=699&originWidth=879&size=53708&status=done&width=879)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558175521076-b79af7e2-3efb-48b5-9768-36d6d38102ca.png#align=left&display=inline&height=729&name=image.png&originHeight=729&originWidth=1850&size=101592&status=done&width=1850)\n\n<a name=\"QzhkV\"></a>\n## 参考资料\n\n- [Excel 及 Power BI 教程](http://kylin.apache.org/cn/docs/tutorial/powerbi.html)\n- [Power BI Desktop 入门](https://docs.microsoft.com/zh-cn/power-bi/guided-learning/gettingdata?tutorial-step=2)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","slug":"kylin-excel","published":1,"updated":"2019-08-16T06:11:15.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdo001v24dontv3ss7b","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第22篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍如何使用excel/power BI 连接kylin2.6.1</p>\n<a id=\"more\"></a>\n<p><a name=\"Sfko7\"></a></p>\n<h2 id=\"前提准备\"><a href=\"#前提准备\" class=\"headerlink\" title=\"前提准备\"></a>前提准备</h2><p><a name=\"VpJrp\"></a></p>\n<h3 id=\"下载kylin-odbc\"><a href=\"#下载kylin-odbc\" class=\"headerlink\" title=\"下载kylin odbc\"></a>下载kylin odbc</h3><p>apache官网已经停止提供odbc驱动了，只能从csdn等下载别人上传的，安全性毫无保证。后来转念一想，kylin的商业公司<a href=\"https://kyligence.io/\" target=\"_blank\" rel=\"noopener\">https://kyligence.io</a>，应该会提供吧，一番打探，果然有。</p>\n<p>下载地址：<a href=\"https://kyligence.io/resources/kyligence-odbc-driver-for-apache-kylin-2/\" target=\"_blank\" rel=\"noopener\">Download Kyligence ODBC Driver for Apache Kylin</a></p>\n<p>需要填写邮箱进行下载</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557487637088-183279e0-8761-48b5-81d2-8fd69bce8e36.png#align=left&amp;display=inline&amp;height=381&amp;name=image.png&amp;originHeight=381&amp;originWidth=500&amp;size=30999&amp;status=done&amp;width=500\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557487684886-c42c67f8-5dee-4af2-a47d-2bdce29db157.png#align=left&amp;display=inline&amp;height=381&amp;name=image.png&amp;originHeight=381&amp;originWidth=500&amp;size=47222&amp;status=done&amp;width=500\" alt=\"image.png\"></p>\n<p><a name=\"H3kat\"></a></p>\n<h3 id=\"配置odbc数据源\"><a href=\"#配置odbc数据源\" class=\"headerlink\" title=\"配置odbc数据源\"></a>配置odbc数据源</h3><p>Win+R-&gt; Control -&gt; 管理工具 -&gt; ODBC 数据源(64 位)<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557487993106-7a08b90d-f53d-40f0-a3c9-8fdbff8611c8.png#align=left&amp;display=inline&amp;height=635&amp;name=image.png&amp;originHeight=635&amp;originWidth=694&amp;size=79547&amp;status=done&amp;width=694\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488108032-bddd3f2f-fbfc-4e1d-a803-5c3f7a56f8f4.png#align=left&amp;display=inline&amp;height=425&amp;name=image.png&amp;originHeight=425&amp;originWidth=400&amp;size=17622&amp;status=done&amp;width=400\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488114771-0324f0b0-c3a7-46fa-beea-170dff5e4b2d.png#align=left&amp;display=inline&amp;height=537&amp;name=image.png&amp;originHeight=537&amp;originWidth=691&amp;size=37086&amp;status=done&amp;width=691\" alt=\"image.png\"></p>\n<p><a name=\"FmCqE\"></a></p>\n<h3 id=\"下载powerQuery\"><a href=\"#下载powerQuery\" class=\"headerlink\" title=\"下载powerQuery\"></a>下载powerQuery</h3><p>Excel 2016及以后版本，自带PowerQuery<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488219530-ad5c7194-e6ea-4601-b243-fe8cc45a99ab.png#align=left&amp;display=inline&amp;height=169&amp;originHeight=169&amp;originWidth=368&amp;status=done&amp;width=368\" alt=\"\"></p>\n<p>之前版本需要自行下载 PowerQuery <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=39379\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-CN/download/details.aspx?id=39379</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488170637-adb0b9c1-ee8f-4be4-a9b3-ad31bda9b8db.png#align=left&amp;display=inline&amp;height=530&amp;name=image.png&amp;originHeight=530&amp;originWidth=841&amp;size=43855&amp;status=done&amp;width=841\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488185981-9b81bcfa-3ddc-4695-9b3f-7d899748c779.png#align=left&amp;display=inline&amp;height=584&amp;name=image.png&amp;originHeight=584&amp;originWidth=1268&amp;size=44789&amp;status=done&amp;width=1268\" alt=\"image.png\"></p>\n<p><a name=\"Xd680\"></a></p>\n<h2 id=\"Excel连接Kylin\"><a href=\"#Excel连接Kylin\" class=\"headerlink\" title=\"Excel连接Kylin\"></a>Excel连接Kylin</h2><p><a name=\"hUPDJ\"></a></p>\n<h3 id=\"Excel-配置Kylin-ODBC数据源\"><a href=\"#Excel-配置Kylin-ODBC数据源\" class=\"headerlink\" title=\"Excel 配置Kylin ODBC数据源\"></a>Excel 配置Kylin ODBC数据源</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488301678-c1039340-d621-4384-a12e-a0b2ba8fab3f.png#align=left&amp;display=inline&amp;height=804&amp;name=image.png&amp;originHeight=804&amp;originWidth=531&amp;size=81563&amp;status=done&amp;width=531\" alt=\"image.png\"></p>\n<p>选择刚刚配置的KylinDSN</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488319201-dbb80bdd-e95e-4d10-8bd0-5d13ffd14837.png#align=left&amp;display=inline&amp;height=215&amp;name=image.png&amp;originHeight=215&amp;originWidth=698&amp;size=13399&amp;status=done&amp;width=698\" alt=\"image.png\"><br>填入用户名密码</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488426650-7fd3f229-c5d3-4daa-a495-787e6c946a08.png#align=left&amp;display=inline&amp;height=323&amp;name=image.png&amp;originHeight=323&amp;originWidth=698&amp;size=23403&amp;status=done&amp;width=698\" alt=\"image.png\"></p>\n<p>可以选择表进行预览<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488441858-b8aabe15-7ac5-43c9-a7d1-154fbe70eafb.png#align=left&amp;display=inline&amp;height=698&amp;name=image.png&amp;originHeight=698&amp;originWidth=878&amp;size=76847&amp;status=done&amp;width=878\" alt=\"image.png\"><br>点击加载按钮进行加载<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488523780-b064229f-f003-4e0f-b125-08c8779b9eef.png#align=left&amp;display=inline&amp;height=640&amp;name=image.png&amp;originHeight=640&amp;originWidth=1889&amp;size=150632&amp;status=done&amp;width=1889\" alt=\"image.png\"></p>\n<p><a name=\"ioP6f\"></a></p>\n<h2 id=\"PowerBI连接Kylin\"><a href=\"#PowerBI连接Kylin\" class=\"headerlink\" title=\"PowerBI连接Kylin\"></a>PowerBI连接Kylin</h2><p><a name=\"yCfu7\"></a></p>\n<h3 id=\"下载并安装PowerBI\"><a href=\"#下载并安装PowerBI\" class=\"headerlink\" title=\"下载并安装PowerBI\"></a>下载并安装PowerBI</h3><p>下载地址 <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=45331\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-CN/download/details.aspx?id=45331</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174065280-896bf454-a7cf-4ef0-af43-3053909c9b2e.png#align=left&amp;display=inline&amp;height=578&amp;name=image.png&amp;originHeight=578&amp;originWidth=1098&amp;size=82713&amp;status=done&amp;width=1098\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174108812-155f3b80-e2ad-4e9d-90b6-07ebe2a55c43.png#align=left&amp;display=inline&amp;height=663&amp;name=image.png&amp;originHeight=663&amp;originWidth=610&amp;size=47135&amp;status=done&amp;width=610\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174120855-4ec58da8-296b-446d-a2aa-45845dd377d9.png#align=left&amp;display=inline&amp;height=221&amp;name=image.png&amp;originHeight=221&amp;originWidth=700&amp;size=11194&amp;status=done&amp;width=700\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174179132-030a7763-fc1a-48fa-bb1a-8de1b5ff060e.png#align=left&amp;display=inline&amp;height=699&amp;name=image.png&amp;originHeight=699&amp;originWidth=879&amp;size=53708&amp;status=done&amp;width=879\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558175521076-b79af7e2-3efb-48b5-9768-36d6d38102ca.png#align=left&amp;display=inline&amp;height=729&amp;name=image.png&amp;originHeight=729&amp;originWidth=1850&amp;size=101592&amp;status=done&amp;width=1850\" alt=\"image.png\"></p>\n<p><a name=\"QzhkV\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://kylin.apache.org/cn/docs/tutorial/powerbi.html\" target=\"_blank\" rel=\"noopener\">Excel 及 Power BI 教程</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/power-bi/guided-learning/gettingdata?tutorial-step=2\" target=\"_blank\" rel=\"noopener\">Power BI Desktop 入门</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第22篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍如何使用excel/power BI 连接kylin2.6.1</p>","more":"<p><a name=\"Sfko7\"></a></p>\n<h2 id=\"前提准备\"><a href=\"#前提准备\" class=\"headerlink\" title=\"前提准备\"></a>前提准备</h2><p><a name=\"VpJrp\"></a></p>\n<h3 id=\"下载kylin-odbc\"><a href=\"#下载kylin-odbc\" class=\"headerlink\" title=\"下载kylin odbc\"></a>下载kylin odbc</h3><p>apache官网已经停止提供odbc驱动了，只能从csdn等下载别人上传的，安全性毫无保证。后来转念一想，kylin的商业公司<a href=\"https://kyligence.io/\" target=\"_blank\" rel=\"noopener\">https://kyligence.io</a>，应该会提供吧，一番打探，果然有。</p>\n<p>下载地址：<a href=\"https://kyligence.io/resources/kyligence-odbc-driver-for-apache-kylin-2/\" target=\"_blank\" rel=\"noopener\">Download Kyligence ODBC Driver for Apache Kylin</a></p>\n<p>需要填写邮箱进行下载</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557487637088-183279e0-8761-48b5-81d2-8fd69bce8e36.png#align=left&amp;display=inline&amp;height=381&amp;name=image.png&amp;originHeight=381&amp;originWidth=500&amp;size=30999&amp;status=done&amp;width=500\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557487684886-c42c67f8-5dee-4af2-a47d-2bdce29db157.png#align=left&amp;display=inline&amp;height=381&amp;name=image.png&amp;originHeight=381&amp;originWidth=500&amp;size=47222&amp;status=done&amp;width=500\" alt=\"image.png\"></p>\n<p><a name=\"H3kat\"></a></p>\n<h3 id=\"配置odbc数据源\"><a href=\"#配置odbc数据源\" class=\"headerlink\" title=\"配置odbc数据源\"></a>配置odbc数据源</h3><p>Win+R-&gt; Control -&gt; 管理工具 -&gt; ODBC 数据源(64 位)<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557487993106-7a08b90d-f53d-40f0-a3c9-8fdbff8611c8.png#align=left&amp;display=inline&amp;height=635&amp;name=image.png&amp;originHeight=635&amp;originWidth=694&amp;size=79547&amp;status=done&amp;width=694\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488108032-bddd3f2f-fbfc-4e1d-a803-5c3f7a56f8f4.png#align=left&amp;display=inline&amp;height=425&amp;name=image.png&amp;originHeight=425&amp;originWidth=400&amp;size=17622&amp;status=done&amp;width=400\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488114771-0324f0b0-c3a7-46fa-beea-170dff5e4b2d.png#align=left&amp;display=inline&amp;height=537&amp;name=image.png&amp;originHeight=537&amp;originWidth=691&amp;size=37086&amp;status=done&amp;width=691\" alt=\"image.png\"></p>\n<p><a name=\"FmCqE\"></a></p>\n<h3 id=\"下载powerQuery\"><a href=\"#下载powerQuery\" class=\"headerlink\" title=\"下载powerQuery\"></a>下载powerQuery</h3><p>Excel 2016及以后版本，自带PowerQuery<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488219530-ad5c7194-e6ea-4601-b243-fe8cc45a99ab.png#align=left&amp;display=inline&amp;height=169&amp;originHeight=169&amp;originWidth=368&amp;status=done&amp;width=368\" alt=\"\"></p>\n<p>之前版本需要自行下载 PowerQuery <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=39379\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-CN/download/details.aspx?id=39379</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488170637-adb0b9c1-ee8f-4be4-a9b3-ad31bda9b8db.png#align=left&amp;display=inline&amp;height=530&amp;name=image.png&amp;originHeight=530&amp;originWidth=841&amp;size=43855&amp;status=done&amp;width=841\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488185981-9b81bcfa-3ddc-4695-9b3f-7d899748c779.png#align=left&amp;display=inline&amp;height=584&amp;name=image.png&amp;originHeight=584&amp;originWidth=1268&amp;size=44789&amp;status=done&amp;width=1268\" alt=\"image.png\"></p>\n<p><a name=\"Xd680\"></a></p>\n<h2 id=\"Excel连接Kylin\"><a href=\"#Excel连接Kylin\" class=\"headerlink\" title=\"Excel连接Kylin\"></a>Excel连接Kylin</h2><p><a name=\"hUPDJ\"></a></p>\n<h3 id=\"Excel-配置Kylin-ODBC数据源\"><a href=\"#Excel-配置Kylin-ODBC数据源\" class=\"headerlink\" title=\"Excel 配置Kylin ODBC数据源\"></a>Excel 配置Kylin ODBC数据源</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488301678-c1039340-d621-4384-a12e-a0b2ba8fab3f.png#align=left&amp;display=inline&amp;height=804&amp;name=image.png&amp;originHeight=804&amp;originWidth=531&amp;size=81563&amp;status=done&amp;width=531\" alt=\"image.png\"></p>\n<p>选择刚刚配置的KylinDSN</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488319201-dbb80bdd-e95e-4d10-8bd0-5d13ffd14837.png#align=left&amp;display=inline&amp;height=215&amp;name=image.png&amp;originHeight=215&amp;originWidth=698&amp;size=13399&amp;status=done&amp;width=698\" alt=\"image.png\"><br>填入用户名密码</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488426650-7fd3f229-c5d3-4daa-a495-787e6c946a08.png#align=left&amp;display=inline&amp;height=323&amp;name=image.png&amp;originHeight=323&amp;originWidth=698&amp;size=23403&amp;status=done&amp;width=698\" alt=\"image.png\"></p>\n<p>可以选择表进行预览<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488441858-b8aabe15-7ac5-43c9-a7d1-154fbe70eafb.png#align=left&amp;display=inline&amp;height=698&amp;name=image.png&amp;originHeight=698&amp;originWidth=878&amp;size=76847&amp;status=done&amp;width=878\" alt=\"image.png\"><br>点击加载按钮进行加载<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557488523780-b064229f-f003-4e0f-b125-08c8779b9eef.png#align=left&amp;display=inline&amp;height=640&amp;name=image.png&amp;originHeight=640&amp;originWidth=1889&amp;size=150632&amp;status=done&amp;width=1889\" alt=\"image.png\"></p>\n<p><a name=\"ioP6f\"></a></p>\n<h2 id=\"PowerBI连接Kylin\"><a href=\"#PowerBI连接Kylin\" class=\"headerlink\" title=\"PowerBI连接Kylin\"></a>PowerBI连接Kylin</h2><p><a name=\"yCfu7\"></a></p>\n<h3 id=\"下载并安装PowerBI\"><a href=\"#下载并安装PowerBI\" class=\"headerlink\" title=\"下载并安装PowerBI\"></a>下载并安装PowerBI</h3><p>下载地址 <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=45331\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-CN/download/details.aspx?id=45331</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174065280-896bf454-a7cf-4ef0-af43-3053909c9b2e.png#align=left&amp;display=inline&amp;height=578&amp;name=image.png&amp;originHeight=578&amp;originWidth=1098&amp;size=82713&amp;status=done&amp;width=1098\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174108812-155f3b80-e2ad-4e9d-90b6-07ebe2a55c43.png#align=left&amp;display=inline&amp;height=663&amp;name=image.png&amp;originHeight=663&amp;originWidth=610&amp;size=47135&amp;status=done&amp;width=610\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174120855-4ec58da8-296b-446d-a2aa-45845dd377d9.png#align=left&amp;display=inline&amp;height=221&amp;name=image.png&amp;originHeight=221&amp;originWidth=700&amp;size=11194&amp;status=done&amp;width=700\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558174179132-030a7763-fc1a-48fa-bb1a-8de1b5ff060e.png#align=left&amp;display=inline&amp;height=699&amp;name=image.png&amp;originHeight=699&amp;originWidth=879&amp;size=53708&amp;status=done&amp;width=879\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558175521076-b79af7e2-3efb-48b5-9768-36d6d38102ca.png#align=left&amp;display=inline&amp;height=729&amp;name=image.png&amp;originHeight=729&amp;originWidth=1850&amp;size=101592&amp;status=done&amp;width=1850\" alt=\"image.png\"></p>\n<p><a name=\"QzhkV\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://kylin.apache.org/cn/docs/tutorial/powerbi.html\" target=\"_blank\" rel=\"noopener\">Excel 及 Power BI 教程</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/power-bi/guided-learning/gettingdata?tutorial-step=2\" target=\"_blank\" rel=\"noopener\">Power BI Desktop 入门</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"Linux磁盘空间占满问题快速排雷","date":"2019-02-14T06:36:00.000Z","_content":"\n情人节一大早就接到报警，一台测试服务器磁盘满了，这很程序员。\n\n<!-- more -->\n\n<a name=\"8cb08486\"></a>\n## 磁盘排雷三连\n反手一个 `df` 先看是否是真满了(参考 [df(1) - Linux man page](https://linux.die.net/man/1/df) )<br />需要注意，如果磁盘空间未满，但是仍然报 `No space left on device` ,需要执行 `df -i`  排查inode\n\n```bash\n$ df -h\n文件系统        容量  已用  可用 已用% 挂载点\nudev             47G     0   47G    0% /dev\ntmpfs           9.4G  620M  8.8G    7% /run\n/dev/sda2       1.1T  1.1T    0G    100% /\ntmpfs            47G  8.7M   47G    1% /dev/shm\ntmpfs           5.0M  4.0K  5.0M    1% /run/lock\ntmpfs            47G     0   47G    0% /sys/fs/cgroup\n/dev/sda1       511M  1.2M  510M    1% /boot/efi\ntmpfs           9.4G  108K  9.4G    1% /run/user/1000\ntmpfs           9.4G   40K  9.4G    1% /run/user/0\n\n$ df -i\n文件系统          Inode 已用(I)  可用(I) 已用(I)% 挂载点\nudev           12277823     525 12277298       1% /dev\ntmpfs          12285255    1368 12283887       1% /run\n/dev/sda2      71041024 2250210 68790814       4% /\ntmpfs          12285255      83 12285172       1% /dev/shm\ntmpfs          12285255       5 12285250       1% /run/lock\ntmpfs          12285255      17 12285238       1% /sys/fs/cgroup\n/dev/sda1             0       0        0        - /boot/efi\ntmpfs          12285255      44 12285211       1% /run/user/1000\ntmpfs          12285255      15 12285240       1% /run/user/0\n\n```\n\n通过 `df -h` 只能看出磁盘满了，但是看不出每个文件夹的大小，所以需要使用 `du -ahd1` ,如果文件不是很多，很大，一般速度还能接受，但是今天执行相当慢，所以 `Ctrl+C`  中止。<br />此处简单说明一下 `-ahd1` 的意思(可以通过 `man du` 或者 `du --help` 自行查阅帮助文档,参考 [du(1) - Linux man page](https://linux.die.net/man/1/du))\n\n```\n$ du --help\n用法：du [选项]... [文件]...\n　或：du [选项]... --files0-from=F\n\n  -a, --all             write counts for all files, not just directories (所有文件，不止目录)\n\n  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G) (易读单位，会损失精度)\n\n  -d, --max-depth=N     print the total for a directory (or file, with --all) (只扫描一层目录)\n                          only if it is N or fewer levels below the command\n                          line argument;  --max-depth=0 is the same as\n                          --summarize\n\n```\n\n```bash\n$ du -ahd1 /\n1.6M\t/dev\n4.0K\t/mnt\n4.0K\t/lib64\n455M\t/boot\n0\t/sys\n0\t/vmlinuz.old\n689G\t/data\n370M\t/tmp\n15M\t/etc\n8.0K\t/media\ndu: 无法访问'/proc/24390/task/24390/fd/4': 没有那个文件或目录\ndu: 无法访问'/proc/24390/task/24390/fdinfo/4': 没有那个文件或目录\ndu: 无法访问'/proc/24390/fd/3': 没有那个文件或目录\ndu: 无法访问'/proc/24390/fdinfo/3': 没有那个文件或目录\n^C\n# 慢的要死，Ctrl+C 终止\n```\n\n如果被删除的文件 `df -h` 快满了，而 `du -ahd1` 却很小，往往是文件被删除，而文件句柄没释放导致的,祭出 `lsof | grep deleted ` ，解决办法，要么kill掉pid，释放句柄(治本)，要么就 ` > /path/to/deleted/file` 把内容覆盖掉(治标)。当然还有别的玩法，比如，不小心 `rm -rf /` 了，先别着急跑路，万一 `lsof | grep deleted` 还存在的，都还有救，约等于windows下的回收站的作用。 参考[ lsof(8) - Linux man page](https://linux.die.net/man/8/lsof)\n\n```bash\n$ lsof -i | grep deleted\n# 当然也不快\n```\n\n<a name=\"ncdu\"></a>\n## [ncdu](https://dev.yorhel.nl/ncdu)\n\n针对 `du -d1` 大文件场景下的龟速表现，有人开发了ncdu,以ubuntu为例\n\n```\n# 从APT安装(版本较旧目前是v1.11)\n$ sudo apt-get update\n$ sudo apt-get install -y ncdu\n\n# 从源码编译安装(此处是1.14版本)\n$ sudo apt-get install -y libncurses5-dev # 如果不安装会报 configure: error: required header file not found\n$ wget https://dev.yorhel.nl/download/ncdu-1.14.tar.gz\n$ tar zxf ncdu-1.14.tar.gz\n$ cd ncdu-1.14\n$ ./configure --prefix=/usr\n$ make && make install\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550123205304-ae5bfcbc-8c91-4f91-ab15-843953ed6701.png#align=left&display=inline&height=397&name=image.png&originHeight=397&originWidth=779&size=37521&width=779)\n\n参考官方文档 [Ncdu Manual](https://dev.yorhel.nl/ncdu/man)\n\n<a name=\"e5d9f3cf\"></a>\n## 额外\n\n通过man查询命令时，手册中会带有数字(例如 `du(1)` , `lsof(8)` )，这代表的是手册的不同部分，可以通过 `man man` 或者 [Linux man pages](https://linux.die.net/man/) 来查看\n\n```\nMANUAL SECTIONS\n    The standard sections of the manual include:\n\n    1      User Commands\n    2      System Calls\n    3      C Library Functions\n    4      Devices and Special Files\n    5      File Formats and Conventions\n    6      Games et. al.\n    7      Miscellanea\n    8      System Administration tools and Daemons\n\n    Distributions customize the manual section to their specifics,\n    which often include additional sections.\n```\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [What do the numbers in a man page mean?](https://unix.stackexchange.com/a/3587)\n- [df(1) - Linux man page](https://linux.die.net/man/1/df)\n- [du(1) - Linux man page](https://linux.die.net/man/1/du)\n- [lsof(8) - Linux man page](https://linux.die.net/man/8/lsof)\n- [Ncdu Manual](https://dev.yorhel.nl/ncdu/man)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师。\n\n\n","source":"_posts/linux-ncdu-no-space.md","raw":"\n---\n\ntitle: Linux磁盘空间占满问题快速排雷\n\ndate: 2019-02-14 14:36:00 +0800\n\ntags: [linux,运维,devops,排雷,磁盘,ncdu]\n\ncategories: 运维\n\n---\n\n情人节一大早就接到报警，一台测试服务器磁盘满了，这很程序员。\n\n<!-- more -->\n\n<a name=\"8cb08486\"></a>\n## 磁盘排雷三连\n反手一个 `df` 先看是否是真满了(参考 [df(1) - Linux man page](https://linux.die.net/man/1/df) )<br />需要注意，如果磁盘空间未满，但是仍然报 `No space left on device` ,需要执行 `df -i`  排查inode\n\n```bash\n$ df -h\n文件系统        容量  已用  可用 已用% 挂载点\nudev             47G     0   47G    0% /dev\ntmpfs           9.4G  620M  8.8G    7% /run\n/dev/sda2       1.1T  1.1T    0G    100% /\ntmpfs            47G  8.7M   47G    1% /dev/shm\ntmpfs           5.0M  4.0K  5.0M    1% /run/lock\ntmpfs            47G     0   47G    0% /sys/fs/cgroup\n/dev/sda1       511M  1.2M  510M    1% /boot/efi\ntmpfs           9.4G  108K  9.4G    1% /run/user/1000\ntmpfs           9.4G   40K  9.4G    1% /run/user/0\n\n$ df -i\n文件系统          Inode 已用(I)  可用(I) 已用(I)% 挂载点\nudev           12277823     525 12277298       1% /dev\ntmpfs          12285255    1368 12283887       1% /run\n/dev/sda2      71041024 2250210 68790814       4% /\ntmpfs          12285255      83 12285172       1% /dev/shm\ntmpfs          12285255       5 12285250       1% /run/lock\ntmpfs          12285255      17 12285238       1% /sys/fs/cgroup\n/dev/sda1             0       0        0        - /boot/efi\ntmpfs          12285255      44 12285211       1% /run/user/1000\ntmpfs          12285255      15 12285240       1% /run/user/0\n\n```\n\n通过 `df -h` 只能看出磁盘满了，但是看不出每个文件夹的大小，所以需要使用 `du -ahd1` ,如果文件不是很多，很大，一般速度还能接受，但是今天执行相当慢，所以 `Ctrl+C`  中止。<br />此处简单说明一下 `-ahd1` 的意思(可以通过 `man du` 或者 `du --help` 自行查阅帮助文档,参考 [du(1) - Linux man page](https://linux.die.net/man/1/du))\n\n```\n$ du --help\n用法：du [选项]... [文件]...\n　或：du [选项]... --files0-from=F\n\n  -a, --all             write counts for all files, not just directories (所有文件，不止目录)\n\n  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G) (易读单位，会损失精度)\n\n  -d, --max-depth=N     print the total for a directory (or file, with --all) (只扫描一层目录)\n                          only if it is N or fewer levels below the command\n                          line argument;  --max-depth=0 is the same as\n                          --summarize\n\n```\n\n```bash\n$ du -ahd1 /\n1.6M\t/dev\n4.0K\t/mnt\n4.0K\t/lib64\n455M\t/boot\n0\t/sys\n0\t/vmlinuz.old\n689G\t/data\n370M\t/tmp\n15M\t/etc\n8.0K\t/media\ndu: 无法访问'/proc/24390/task/24390/fd/4': 没有那个文件或目录\ndu: 无法访问'/proc/24390/task/24390/fdinfo/4': 没有那个文件或目录\ndu: 无法访问'/proc/24390/fd/3': 没有那个文件或目录\ndu: 无法访问'/proc/24390/fdinfo/3': 没有那个文件或目录\n^C\n# 慢的要死，Ctrl+C 终止\n```\n\n如果被删除的文件 `df -h` 快满了，而 `du -ahd1` 却很小，往往是文件被删除，而文件句柄没释放导致的,祭出 `lsof | grep deleted ` ，解决办法，要么kill掉pid，释放句柄(治本)，要么就 ` > /path/to/deleted/file` 把内容覆盖掉(治标)。当然还有别的玩法，比如，不小心 `rm -rf /` 了，先别着急跑路，万一 `lsof | grep deleted` 还存在的，都还有救，约等于windows下的回收站的作用。 参考[ lsof(8) - Linux man page](https://linux.die.net/man/8/lsof)\n\n```bash\n$ lsof -i | grep deleted\n# 当然也不快\n```\n\n<a name=\"ncdu\"></a>\n## [ncdu](https://dev.yorhel.nl/ncdu)\n\n针对 `du -d1` 大文件场景下的龟速表现，有人开发了ncdu,以ubuntu为例\n\n```\n# 从APT安装(版本较旧目前是v1.11)\n$ sudo apt-get update\n$ sudo apt-get install -y ncdu\n\n# 从源码编译安装(此处是1.14版本)\n$ sudo apt-get install -y libncurses5-dev # 如果不安装会报 configure: error: required header file not found\n$ wget https://dev.yorhel.nl/download/ncdu-1.14.tar.gz\n$ tar zxf ncdu-1.14.tar.gz\n$ cd ncdu-1.14\n$ ./configure --prefix=/usr\n$ make && make install\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550123205304-ae5bfcbc-8c91-4f91-ab15-843953ed6701.png#align=left&display=inline&height=397&name=image.png&originHeight=397&originWidth=779&size=37521&width=779)\n\n参考官方文档 [Ncdu Manual](https://dev.yorhel.nl/ncdu/man)\n\n<a name=\"e5d9f3cf\"></a>\n## 额外\n\n通过man查询命令时，手册中会带有数字(例如 `du(1)` , `lsof(8)` )，这代表的是手册的不同部分，可以通过 `man man` 或者 [Linux man pages](https://linux.die.net/man/) 来查看\n\n```\nMANUAL SECTIONS\n    The standard sections of the manual include:\n\n    1      User Commands\n    2      System Calls\n    3      C Library Functions\n    4      Devices and Special Files\n    5      File Formats and Conventions\n    6      Games et. al.\n    7      Miscellanea\n    8      System Administration tools and Daemons\n\n    Distributions customize the manual section to their specifics,\n    which often include additional sections.\n```\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [What do the numbers in a man page mean?](https://unix.stackexchange.com/a/3587)\n- [df(1) - Linux man page](https://linux.die.net/man/1/df)\n- [du(1) - Linux man page](https://linux.die.net/man/1/du)\n- [lsof(8) - Linux man page](https://linux.die.net/man/8/lsof)\n- [Ncdu Manual](https://dev.yorhel.nl/ncdu/man)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师。\n\n\n","slug":"linux-ncdu-no-space","published":1,"updated":"2019-08-16T06:11:15.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdp001x24dov67987ww","content":"<p>情人节一大早就接到报警，一台测试服务器磁盘满了，这很程序员。</p>\n<a id=\"more\"></a>\n<p><a name=\"8cb08486\"></a></p>\n<h2 id=\"磁盘排雷三连\"><a href=\"#磁盘排雷三连\" class=\"headerlink\" title=\"磁盘排雷三连\"></a>磁盘排雷三连</h2><p>反手一个 <code>df</code> 先看是否是真满了(参考 <a href=\"https://linux.die.net/man/1/df\" target=\"_blank\" rel=\"noopener\">df(1) - Linux man page</a> )<br>需要注意，如果磁盘空间未满，但是仍然报 <code>No space left on device</code> ,需要执行 <code>df -i</code>  排查inode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ df -h</span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">udev             47G     0   47G    0% /dev</span><br><span class=\"line\">tmpfs           9.4G  620M  8.8G    7% /run</span><br><span class=\"line\">/dev/sda2       1.1T  1.1T    0G    100% /</span><br><span class=\"line\">tmpfs            47G  8.7M   47G    1% /dev/shm</span><br><span class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class=\"line\">tmpfs            47G     0   47G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1       511M  1.2M  510M    1% /boot/efi</span><br><span class=\"line\">tmpfs           9.4G  108K  9.4G    1% /run/user/1000</span><br><span class=\"line\">tmpfs           9.4G   40K  9.4G    1% /run/user/0</span><br><span class=\"line\"></span><br><span class=\"line\">$ df -i</span><br><span class=\"line\">文件系统          Inode 已用(I)  可用(I) 已用(I)% 挂载点</span><br><span class=\"line\">udev           12277823     525 12277298       1% /dev</span><br><span class=\"line\">tmpfs          12285255    1368 12283887       1% /run</span><br><span class=\"line\">/dev/sda2      71041024 2250210 68790814       4% /</span><br><span class=\"line\">tmpfs          12285255      83 12285172       1% /dev/shm</span><br><span class=\"line\">tmpfs          12285255       5 12285250       1% /run/lock</span><br><span class=\"line\">tmpfs          12285255      17 12285238       1% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1             0       0        0        - /boot/efi</span><br><span class=\"line\">tmpfs          12285255      44 12285211       1% /run/user/1000</span><br><span class=\"line\">tmpfs          12285255      15 12285240       1% /run/user/0</span><br></pre></td></tr></table></figure>\n<p>通过 <code>df -h</code> 只能看出磁盘满了，但是看不出每个文件夹的大小，所以需要使用 <code>du -ahd1</code> ,如果文件不是很多，很大，一般速度还能接受，但是今天执行相当慢，所以 <code>Ctrl+C</code>  中止。<br>此处简单说明一下 <code>-ahd1</code> 的意思(可以通过 <code>man du</code> 或者 <code>du --help</code> 自行查阅帮助文档,参考 <a href=\"https://linux.die.net/man/1/du\" target=\"_blank\" rel=\"noopener\">du(1) - Linux man page</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ du --help</span><br><span class=\"line\">用法：du [选项]... [文件]...</span><br><span class=\"line\">　或：du [选项]... --files0-from=F</span><br><span class=\"line\"></span><br><span class=\"line\">  -a, --all             write counts for all files, not just directories (所有文件，不止目录)</span><br><span class=\"line\"></span><br><span class=\"line\">  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G) (易读单位，会损失精度)</span><br><span class=\"line\"></span><br><span class=\"line\">  -d, --max-depth=N     print the total for a directory (or file, with --all) (只扫描一层目录)</span><br><span class=\"line\">                          only if it is N or fewer levels below the command</span><br><span class=\"line\">                          line argument;  --max-depth=0 is the same as</span><br><span class=\"line\">                          --summarize</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ du -ahd1 /</span><br><span class=\"line\">1.6M\t/dev</span><br><span class=\"line\">4.0K\t/mnt</span><br><span class=\"line\">4.0K\t/lib64</span><br><span class=\"line\">455M\t/boot</span><br><span class=\"line\">0\t/sys</span><br><span class=\"line\">0\t/vmlinuz.old</span><br><span class=\"line\">689G\t/data</span><br><span class=\"line\">370M\t/tmp</span><br><span class=\"line\">15M\t/etc</span><br><span class=\"line\">8.0K\t/media</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/task/24390/fd/4'</span>: 没有那个文件或目录</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/task/24390/fdinfo/4'</span>: 没有那个文件或目录</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/fd/3'</span>: 没有那个文件或目录</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/fdinfo/3'</span>: 没有那个文件或目录</span><br><span class=\"line\">^C</span><br><span class=\"line\"><span class=\"comment\"># 慢的要死，Ctrl+C 终止</span></span><br></pre></td></tr></table></figure>\n<p>如果被删除的文件 <code>df -h</code> 快满了，而 <code>du -ahd1</code> 却很小，往往是文件被删除，而文件句柄没释放导致的,祭出 <code>lsof | grep deleted</code> ，解决办法，要么kill掉pid，释放句柄(治本)，要么就 <code>&gt; /path/to/deleted/file</code> 把内容覆盖掉(治标)。当然还有别的玩法，比如，不小心 <code>rm -rf /</code> 了，先别着急跑路，万一 <code>lsof | grep deleted</code> 还存在的，都还有救，约等于windows下的回收站的作用。 参考<a href=\"https://linux.die.net/man/8/lsof\" target=\"_blank\" rel=\"noopener\"> lsof(8) - Linux man page</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsof -i | grep deleted</span><br><span class=\"line\"><span class=\"comment\"># 当然也不快</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"ncdu\"></a></p>\n<h2 id=\"ncdu\"><a href=\"#ncdu\" class=\"headerlink\" title=\"ncdu\"></a><a href=\"https://dev.yorhel.nl/ncdu\" target=\"_blank\" rel=\"noopener\">ncdu</a></h2><p>针对 <code>du -d1</code> 大文件场景下的龟速表现，有人开发了ncdu,以ubuntu为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 从APT安装(版本较旧目前是v1.11)</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install -y ncdu</span><br><span class=\"line\"></span><br><span class=\"line\"># 从源码编译安装(此处是1.14版本)</span><br><span class=\"line\">$ sudo apt-get install -y libncurses5-dev # 如果不安装会报 configure: error: required header file not found</span><br><span class=\"line\">$ wget https://dev.yorhel.nl/download/ncdu-1.14.tar.gz</span><br><span class=\"line\">$ tar zxf ncdu-1.14.tar.gz</span><br><span class=\"line\">$ cd ncdu-1.14</span><br><span class=\"line\">$ ./configure --prefix=/usr</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550123205304-ae5bfcbc-8c91-4f91-ab15-843953ed6701.png#align=left&amp;display=inline&amp;height=397&amp;name=image.png&amp;originHeight=397&amp;originWidth=779&amp;size=37521&amp;width=779\" alt=\"image.png\"></p>\n<p>参考官方文档 <a href=\"https://dev.yorhel.nl/ncdu/man\" target=\"_blank\" rel=\"noopener\">Ncdu Manual</a></p>\n<p><a name=\"e5d9f3cf\"></a></p>\n<h2 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h2><p>通过man查询命令时，手册中会带有数字(例如 <code>du(1)</code> , <code>lsof(8)</code> )，这代表的是手册的不同部分，可以通过 <code>man man</code> 或者 <a href=\"https://linux.die.net/man/\" target=\"_blank\" rel=\"noopener\">Linux man pages</a> 来查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MANUAL SECTIONS</span><br><span class=\"line\">    The standard sections of the manual include:</span><br><span class=\"line\"></span><br><span class=\"line\">    1      User Commands</span><br><span class=\"line\">    2      System Calls</span><br><span class=\"line\">    3      C Library Functions</span><br><span class=\"line\">    4      Devices and Special Files</span><br><span class=\"line\">    5      File Formats and Conventions</span><br><span class=\"line\">    6      Games et. al.</span><br><span class=\"line\">    7      Miscellanea</span><br><span class=\"line\">    8      System Administration tools and Daemons</span><br><span class=\"line\"></span><br><span class=\"line\">    Distributions customize the manual section to their specifics,</span><br><span class=\"line\">    which often include additional sections.</span><br></pre></td></tr></table></figure>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://unix.stackexchange.com/a/3587\" target=\"_blank\" rel=\"noopener\">What do the numbers in a man page mean?</a></li>\n<li><a href=\"https://linux.die.net/man/1/df\" target=\"_blank\" rel=\"noopener\">df(1) - Linux man page</a></li>\n<li><a href=\"https://linux.die.net/man/1/du\" target=\"_blank\" rel=\"noopener\">du(1) - Linux man page</a></li>\n<li><a href=\"https://linux.die.net/man/8/lsof\" target=\"_blank\" rel=\"noopener\">lsof(8) - Linux man page</a></li>\n<li><a href=\"https://dev.yorhel.nl/ncdu/man\" target=\"_blank\" rel=\"noopener\">Ncdu Manual</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师。</p>\n","site":{"data":{}},"excerpt":"<p>情人节一大早就接到报警，一台测试服务器磁盘满了，这很程序员。</p>","more":"<p><a name=\"8cb08486\"></a></p>\n<h2 id=\"磁盘排雷三连\"><a href=\"#磁盘排雷三连\" class=\"headerlink\" title=\"磁盘排雷三连\"></a>磁盘排雷三连</h2><p>反手一个 <code>df</code> 先看是否是真满了(参考 <a href=\"https://linux.die.net/man/1/df\" target=\"_blank\" rel=\"noopener\">df(1) - Linux man page</a> )<br>需要注意，如果磁盘空间未满，但是仍然报 <code>No space left on device</code> ,需要执行 <code>df -i</code>  排查inode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ df -h</span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">udev             47G     0   47G    0% /dev</span><br><span class=\"line\">tmpfs           9.4G  620M  8.8G    7% /run</span><br><span class=\"line\">/dev/sda2       1.1T  1.1T    0G    100% /</span><br><span class=\"line\">tmpfs            47G  8.7M   47G    1% /dev/shm</span><br><span class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class=\"line\">tmpfs            47G     0   47G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1       511M  1.2M  510M    1% /boot/efi</span><br><span class=\"line\">tmpfs           9.4G  108K  9.4G    1% /run/user/1000</span><br><span class=\"line\">tmpfs           9.4G   40K  9.4G    1% /run/user/0</span><br><span class=\"line\"></span><br><span class=\"line\">$ df -i</span><br><span class=\"line\">文件系统          Inode 已用(I)  可用(I) 已用(I)% 挂载点</span><br><span class=\"line\">udev           12277823     525 12277298       1% /dev</span><br><span class=\"line\">tmpfs          12285255    1368 12283887       1% /run</span><br><span class=\"line\">/dev/sda2      71041024 2250210 68790814       4% /</span><br><span class=\"line\">tmpfs          12285255      83 12285172       1% /dev/shm</span><br><span class=\"line\">tmpfs          12285255       5 12285250       1% /run/lock</span><br><span class=\"line\">tmpfs          12285255      17 12285238       1% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1             0       0        0        - /boot/efi</span><br><span class=\"line\">tmpfs          12285255      44 12285211       1% /run/user/1000</span><br><span class=\"line\">tmpfs          12285255      15 12285240       1% /run/user/0</span><br></pre></td></tr></table></figure>\n<p>通过 <code>df -h</code> 只能看出磁盘满了，但是看不出每个文件夹的大小，所以需要使用 <code>du -ahd1</code> ,如果文件不是很多，很大，一般速度还能接受，但是今天执行相当慢，所以 <code>Ctrl+C</code>  中止。<br>此处简单说明一下 <code>-ahd1</code> 的意思(可以通过 <code>man du</code> 或者 <code>du --help</code> 自行查阅帮助文档,参考 <a href=\"https://linux.die.net/man/1/du\" target=\"_blank\" rel=\"noopener\">du(1) - Linux man page</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ du --help</span><br><span class=\"line\">用法：du [选项]... [文件]...</span><br><span class=\"line\">　或：du [选项]... --files0-from=F</span><br><span class=\"line\"></span><br><span class=\"line\">  -a, --all             write counts for all files, not just directories (所有文件，不止目录)</span><br><span class=\"line\"></span><br><span class=\"line\">  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G) (易读单位，会损失精度)</span><br><span class=\"line\"></span><br><span class=\"line\">  -d, --max-depth=N     print the total for a directory (or file, with --all) (只扫描一层目录)</span><br><span class=\"line\">                          only if it is N or fewer levels below the command</span><br><span class=\"line\">                          line argument;  --max-depth=0 is the same as</span><br><span class=\"line\">                          --summarize</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ du -ahd1 /</span><br><span class=\"line\">1.6M\t/dev</span><br><span class=\"line\">4.0K\t/mnt</span><br><span class=\"line\">4.0K\t/lib64</span><br><span class=\"line\">455M\t/boot</span><br><span class=\"line\">0\t/sys</span><br><span class=\"line\">0\t/vmlinuz.old</span><br><span class=\"line\">689G\t/data</span><br><span class=\"line\">370M\t/tmp</span><br><span class=\"line\">15M\t/etc</span><br><span class=\"line\">8.0K\t/media</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/task/24390/fd/4'</span>: 没有那个文件或目录</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/task/24390/fdinfo/4'</span>: 没有那个文件或目录</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/fd/3'</span>: 没有那个文件或目录</span><br><span class=\"line\">du: 无法访问<span class=\"string\">'/proc/24390/fdinfo/3'</span>: 没有那个文件或目录</span><br><span class=\"line\">^C</span><br><span class=\"line\"><span class=\"comment\"># 慢的要死，Ctrl+C 终止</span></span><br></pre></td></tr></table></figure>\n<p>如果被删除的文件 <code>df -h</code> 快满了，而 <code>du -ahd1</code> 却很小，往往是文件被删除，而文件句柄没释放导致的,祭出 <code>lsof | grep deleted</code> ，解决办法，要么kill掉pid，释放句柄(治本)，要么就 <code>&gt; /path/to/deleted/file</code> 把内容覆盖掉(治标)。当然还有别的玩法，比如，不小心 <code>rm -rf /</code> 了，先别着急跑路，万一 <code>lsof | grep deleted</code> 还存在的，都还有救，约等于windows下的回收站的作用。 参考<a href=\"https://linux.die.net/man/8/lsof\" target=\"_blank\" rel=\"noopener\"> lsof(8) - Linux man page</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsof -i | grep deleted</span><br><span class=\"line\"><span class=\"comment\"># 当然也不快</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"ncdu\"></a></p>\n<h2 id=\"ncdu\"><a href=\"#ncdu\" class=\"headerlink\" title=\"ncdu\"></a><a href=\"https://dev.yorhel.nl/ncdu\" target=\"_blank\" rel=\"noopener\">ncdu</a></h2><p>针对 <code>du -d1</code> 大文件场景下的龟速表现，有人开发了ncdu,以ubuntu为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 从APT安装(版本较旧目前是v1.11)</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install -y ncdu</span><br><span class=\"line\"></span><br><span class=\"line\"># 从源码编译安装(此处是1.14版本)</span><br><span class=\"line\">$ sudo apt-get install -y libncurses5-dev # 如果不安装会报 configure: error: required header file not found</span><br><span class=\"line\">$ wget https://dev.yorhel.nl/download/ncdu-1.14.tar.gz</span><br><span class=\"line\">$ tar zxf ncdu-1.14.tar.gz</span><br><span class=\"line\">$ cd ncdu-1.14</span><br><span class=\"line\">$ ./configure --prefix=/usr</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550123205304-ae5bfcbc-8c91-4f91-ab15-843953ed6701.png#align=left&amp;display=inline&amp;height=397&amp;name=image.png&amp;originHeight=397&amp;originWidth=779&amp;size=37521&amp;width=779\" alt=\"image.png\"></p>\n<p>参考官方文档 <a href=\"https://dev.yorhel.nl/ncdu/man\" target=\"_blank\" rel=\"noopener\">Ncdu Manual</a></p>\n<p><a name=\"e5d9f3cf\"></a></p>\n<h2 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h2><p>通过man查询命令时，手册中会带有数字(例如 <code>du(1)</code> , <code>lsof(8)</code> )，这代表的是手册的不同部分，可以通过 <code>man man</code> 或者 <a href=\"https://linux.die.net/man/\" target=\"_blank\" rel=\"noopener\">Linux man pages</a> 来查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MANUAL SECTIONS</span><br><span class=\"line\">    The standard sections of the manual include:</span><br><span class=\"line\"></span><br><span class=\"line\">    1      User Commands</span><br><span class=\"line\">    2      System Calls</span><br><span class=\"line\">    3      C Library Functions</span><br><span class=\"line\">    4      Devices and Special Files</span><br><span class=\"line\">    5      File Formats and Conventions</span><br><span class=\"line\">    6      Games et. al.</span><br><span class=\"line\">    7      Miscellanea</span><br><span class=\"line\">    8      System Administration tools and Daemons</span><br><span class=\"line\"></span><br><span class=\"line\">    Distributions customize the manual section to their specifics,</span><br><span class=\"line\">    which often include additional sections.</span><br></pre></td></tr></table></figure>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://unix.stackexchange.com/a/3587\" target=\"_blank\" rel=\"noopener\">What do the numbers in a man page mean?</a></li>\n<li><a href=\"https://linux.die.net/man/1/df\" target=\"_blank\" rel=\"noopener\">df(1) - Linux man page</a></li>\n<li><a href=\"https://linux.die.net/man/1/du\" target=\"_blank\" rel=\"noopener\">du(1) - Linux man page</a></li>\n<li><a href=\"https://linux.die.net/man/8/lsof\" target=\"_blank\" rel=\"noopener\">lsof(8) - Linux man page</a></li>\n<li><a href=\"https://dev.yorhel.nl/ncdu/man\" target=\"_blank\" rel=\"noopener\">Ncdu Manual</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师。</p>"},{"title":"nginx日志中$request_body 十六进制字符(\\x22\\x9B\\x5C\\x09\\x08...)完美解决方案","date":"2017-06-21T02:11:46.000Z","_content":"在使用nginx记录访问日志时，发现在含有`request_body`的 `PUT`,`POST` 请求时，日志中会含有 `\\x22` `\\x9B` `\\x5C` `\\x09` `\\x08` 字符，不利于阅读和处理。\n\n<!-- more -->\n\n具体 支持`request_body`的http method参见 [http1.1定义 9 Method Definitions][link9MethodDefinitions] 和 [Payloads of HTTP Request Methods][linkPayloadsOfHttpRequestMethods]\n\n\n`nginx.conf` 默认access_log 配置\n```\n    log_format  main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n                      '$http_host $upstream_status $upstream_addr $request_time $upstream_response_time'; \n```\n\n改成\n```\n    log_format json_log escape=json '{\"realip\":\"$remote_addr\",\"@timestamp\":\"$time_iso8601\",\"host\":\"$http_host\",\"request\":\"$request\",\"req_body\":\"$request_body\",\"status\":\"$status\",\"size\":$body_bytes_sent,\"ua\":\"$http_user_agent\",\"cookie\":\"$http_cookie\",\"req_time\":\"$request_time\",\"uri\":\"$uri\",\"referer\":\"$http_referer\",\"xff\":\"$http_x_forwarded_for\",\"ups_status\":\"$upstream_status\",\"ups_addr\":\"$upstream_addr\",\"ups_time\":\"$upstream_response_time\"}';\n```\n\n参考 [How to generate a JSON log from nginx?][linkHowToGenerateAJsonLogFromNginx?]\n\n[官方文档ngx_http_log_module.html#log_format][ngx_http_log_module] 注意，`escape`是从*1.11.8*后新增的参数。\n\n如果是老版本的，linux可以考虑使用`shell`命令替换，`logstash`可以考虑使用`ruby`处理 ，参考 [Optionally support handling of \\x escape codes][linkOptionallySupportHandlingOf\\xEscape]\n\n博客 [https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/][blog]\n简书 [http://www.jianshu.com/p/8409f28f32e9][jianshu]\n掘金 [https://juejin.im/post/5949e0f7128fe1006a627cc0][juejin]\n\n\n[link9MethodDefinitions]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[linkPayloadsOfHttpRequestMethods]: https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\n[linkHowToGenerateAJsonLogFromNginx?]: https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\n[ngx_http_log_module]: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n[linkOptionallySupportHandlingOf\\xEscape]: https://github.com/logstash-plugins/logstash-codec-json/issues/2\n[jianshu]: http://www.jianshu.com/p/8409f28f32e9\n[juejin]: https://juejin.im/post/5949e0f7128fe1006a627cc0\n[blog]: https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\n","source":"_posts/nginx-logging-request-body-as-hexidecimal.md","raw":"---\ntitle: nginx日志中$request_body 十六进制字符(\\x22\\x9B\\x5C\\x09\\x08...)完美解决方案\ndate: 2017-06-21 10:11:46\ntags: [nginx,logstash,elk,elkstack]\ncategories: [nginx]\n---\n在使用nginx记录访问日志时，发现在含有`request_body`的 `PUT`,`POST` 请求时，日志中会含有 `\\x22` `\\x9B` `\\x5C` `\\x09` `\\x08` 字符，不利于阅读和处理。\n\n<!-- more -->\n\n具体 支持`request_body`的http method参见 [http1.1定义 9 Method Definitions][link9MethodDefinitions] 和 [Payloads of HTTP Request Methods][linkPayloadsOfHttpRequestMethods]\n\n\n`nginx.conf` 默认access_log 配置\n```\n    log_format  main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n                      '$http_host $upstream_status $upstream_addr $request_time $upstream_response_time'; \n```\n\n改成\n```\n    log_format json_log escape=json '{\"realip\":\"$remote_addr\",\"@timestamp\":\"$time_iso8601\",\"host\":\"$http_host\",\"request\":\"$request\",\"req_body\":\"$request_body\",\"status\":\"$status\",\"size\":$body_bytes_sent,\"ua\":\"$http_user_agent\",\"cookie\":\"$http_cookie\",\"req_time\":\"$request_time\",\"uri\":\"$uri\",\"referer\":\"$http_referer\",\"xff\":\"$http_x_forwarded_for\",\"ups_status\":\"$upstream_status\",\"ups_addr\":\"$upstream_addr\",\"ups_time\":\"$upstream_response_time\"}';\n```\n\n参考 [How to generate a JSON log from nginx?][linkHowToGenerateAJsonLogFromNginx?]\n\n[官方文档ngx_http_log_module.html#log_format][ngx_http_log_module] 注意，`escape`是从*1.11.8*后新增的参数。\n\n如果是老版本的，linux可以考虑使用`shell`命令替换，`logstash`可以考虑使用`ruby`处理 ，参考 [Optionally support handling of \\x escape codes][linkOptionallySupportHandlingOf\\xEscape]\n\n博客 [https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/][blog]\n简书 [http://www.jianshu.com/p/8409f28f32e9][jianshu]\n掘金 [https://juejin.im/post/5949e0f7128fe1006a627cc0][juejin]\n\n\n[link9MethodDefinitions]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[linkPayloadsOfHttpRequestMethods]: https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\n[linkHowToGenerateAJsonLogFromNginx?]: https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\n[ngx_http_log_module]: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n[linkOptionallySupportHandlingOf\\xEscape]: https://github.com/logstash-plugins/logstash-codec-json/issues/2\n[jianshu]: http://www.jianshu.com/p/8409f28f32e9\n[juejin]: https://juejin.im/post/5949e0f7128fe1006a627cc0\n[blog]: https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\n","slug":"nginx-logging-request-body-as-hexidecimal","published":1,"updated":"2019-08-16T05:56:21.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdr002224dojot1ygoz","content":"<p>在使用nginx记录访问日志时，发现在含有<code>request_body</code>的 <code>PUT</code>,<code>POST</code> 请求时，日志中会含有 <code>\\x22</code> <code>\\x9B</code> <code>\\x5C</code> <code>\\x09</code> <code>\\x08</code> 字符，不利于阅读和处理。</p>\n<a id=\"more\"></a>\n<p>具体 支持<code>request_body</code>的http method参见 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" target=\"_blank\" rel=\"noopener\">http1.1定义 9 Method Definitions</a> 和 <a href=\"https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\" target=\"_blank\" rel=\"noopener\">Payloads of HTTP Request Methods</a></p>\n<p><code>nginx.conf</code> 默认access_log 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class=\"line\">                  &apos;$http_host $upstream_status $upstream_addr $request_time $upstream_response_time&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format json_log escape=json &apos;&#123;&quot;realip&quot;:&quot;$remote_addr&quot;,&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;host&quot;:&quot;$http_host&quot;,&quot;request&quot;:&quot;$request&quot;,&quot;req_body&quot;:&quot;$request_body&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;size&quot;:$body_bytes_sent,&quot;ua&quot;:&quot;$http_user_agent&quot;,&quot;cookie&quot;:&quot;$http_cookie&quot;,&quot;req_time&quot;:&quot;$request_time&quot;,&quot;uri&quot;:&quot;$uri&quot;,&quot;referer&quot;:&quot;$http_referer&quot;,&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&quot;ups_status&quot;:&quot;$upstream_status&quot;,&quot;ups_addr&quot;:&quot;$upstream_addr&quot;,&quot;ups_time&quot;:&quot;$upstream_response_time&quot;&#125;&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\" target=\"_blank\" rel=\"noopener\">How to generate a JSON log from nginx?</a></p>\n<p><a href=\"http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\" target=\"_blank\" rel=\"noopener\">官方文档ngx_http_log_module.html#log_format</a> 注意，<code>escape</code>是从<em>1.11.8</em>后新增的参数。</p>\n<p>如果是老版本的，linux可以考虑使用<code>shell</code>命令替换，<code>logstash</code>可以考虑使用<code>ruby</code>处理 ，参考 <a href=\"https://github.com/logstash-plugins/logstash-codec-json/issues/2\" target=\"_blank\" rel=\"noopener\">Optionally support handling of \\x escape codes</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/</a><br>简书 <a href=\"http://www.jianshu.com/p/8409f28f32e9\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/8409f28f32e9</a><br>掘金 <a href=\"https://juejin.im/post/5949e0f7128fe1006a627cc0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5949e0f7128fe1006a627cc0</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用nginx记录访问日志时，发现在含有<code>request_body</code>的 <code>PUT</code>,<code>POST</code> 请求时，日志中会含有 <code>\\x22</code> <code>\\x9B</code> <code>\\x5C</code> <code>\\x09</code> <code>\\x08</code> 字符，不利于阅读和处理。</p>","more":"<p>具体 支持<code>request_body</code>的http method参见 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" target=\"_blank\" rel=\"noopener\">http1.1定义 9 Method Definitions</a> 和 <a href=\"https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\" target=\"_blank\" rel=\"noopener\">Payloads of HTTP Request Methods</a></p>\n<p><code>nginx.conf</code> 默认access_log 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class=\"line\">                  &apos;$http_host $upstream_status $upstream_addr $request_time $upstream_response_time&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format json_log escape=json &apos;&#123;&quot;realip&quot;:&quot;$remote_addr&quot;,&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;host&quot;:&quot;$http_host&quot;,&quot;request&quot;:&quot;$request&quot;,&quot;req_body&quot;:&quot;$request_body&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;size&quot;:$body_bytes_sent,&quot;ua&quot;:&quot;$http_user_agent&quot;,&quot;cookie&quot;:&quot;$http_cookie&quot;,&quot;req_time&quot;:&quot;$request_time&quot;,&quot;uri&quot;:&quot;$uri&quot;,&quot;referer&quot;:&quot;$http_referer&quot;,&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&quot;ups_status&quot;:&quot;$upstream_status&quot;,&quot;ups_addr&quot;:&quot;$upstream_addr&quot;,&quot;ups_time&quot;:&quot;$upstream_response_time&quot;&#125;&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\" target=\"_blank\" rel=\"noopener\">How to generate a JSON log from nginx?</a></p>\n<p><a href=\"http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\" target=\"_blank\" rel=\"noopener\">官方文档ngx_http_log_module.html#log_format</a> 注意，<code>escape</code>是从<em>1.11.8</em>后新增的参数。</p>\n<p>如果是老版本的，linux可以考虑使用<code>shell</code>命令替换，<code>logstash</code>可以考虑使用<code>ruby</code>处理 ，参考 <a href=\"https://github.com/logstash-plugins/logstash-codec-json/issues/2\" target=\"_blank\" rel=\"noopener\">Optionally support handling of \\x escape codes</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/</a><br>简书 <a href=\"http://www.jianshu.com/p/8409f28f32e9\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/8409f28f32e9</a><br>掘金 <a href=\"https://juejin.im/post/5949e0f7128fe1006a627cc0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5949e0f7128fe1006a627cc0</a></p>"},{"title":"nginx正则表达式快捷测试方法","date":"2017-06-29T08:03:19.000Z","_content":"之前在配置时都是本地起一个nginx服务，修改`location`规则,然后`nginx -s reload` 或则 `service nginx reload`不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. [在线工具](http://tool.oschina.net/regex/))又因为使用的库不同，多少存在差异。\n\n<!-- more -->\n\n正则表达式有不同的规则引擎，具体参见 wikipedia的 [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries)\n\nnginx使用的是[PCRE](http://www.pcre.org/)\n\n截取nginx官方文档 [Building nginx from Sources](http://nginx.org/en/docs/configure.html)\n> --with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.\n\n建议使用linux下的 `grep` 工具\n\nwindows可以使用[cygwin](http://www.cygwin.com/) 或者[git for windows](https://git-for-windows.github.io/)中的`git-bash.exe`\n\n```bash\n$ grep --help\n\n# ...\n\nRegexp selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n\n# ...\n```\n\n使用 `grep -P`命令即可\n\n```bash\n$ echo 'a.gif' | grep -P '\\.(jp?g|gif|bmp|png)'\n\n#输出\na.gif\n\n```\n\n如果只想输出匹配部分，则加上`-o`参数\n\n```bash\n$ echo 'a.gif' | grep -P -o '\\.(jp?g|gif|bmp|png)'\n\n#输出\n.gif\n```\n\n具体 perl 正则表达式语法，可参考\n\n[Perl regular expressions man page](http://perldoc.perl.org/perlre.html)\n\n[汤姆的猫-Perl入门（四）Perl的正则表达式](http://blog.csdn.net/sunshoupo211/article/details/31769837)\n\n\n博客 [https://anjia.ml/2017/06/29/nginx-regex-test-way/][blog]\n简书 [http://www.jianshu.com/p/17eb0ba22ff6][jianshu]\n掘金 [https://juejin.im/post/5954ad1b5188250d8f602bca][juejin]\n\n[jianshu]: http://www.jianshu.com/p/17eb0ba22ff6\n[juejin]: https://juejin.im/post/5954ad1b5188250d8f602bca\n[blog]: https://anjia.ml/2017/06/29/nginx-regex-test-way/","source":"_posts/nginx-regex-test-way.md","raw":"---\ntitle: nginx正则表达式快捷测试方法\ndate: 2017-06-29 16:03:19\ntags: [nginx]\ncategories: [nginx]\n---\n之前在配置时都是本地起一个nginx服务，修改`location`规则,然后`nginx -s reload` 或则 `service nginx reload`不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. [在线工具](http://tool.oschina.net/regex/))又因为使用的库不同，多少存在差异。\n\n<!-- more -->\n\n正则表达式有不同的规则引擎，具体参见 wikipedia的 [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries)\n\nnginx使用的是[PCRE](http://www.pcre.org/)\n\n截取nginx官方文档 [Building nginx from Sources](http://nginx.org/en/docs/configure.html)\n> --with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.\n\n建议使用linux下的 `grep` 工具\n\nwindows可以使用[cygwin](http://www.cygwin.com/) 或者[git for windows](https://git-for-windows.github.io/)中的`git-bash.exe`\n\n```bash\n$ grep --help\n\n# ...\n\nRegexp selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n\n# ...\n```\n\n使用 `grep -P`命令即可\n\n```bash\n$ echo 'a.gif' | grep -P '\\.(jp?g|gif|bmp|png)'\n\n#输出\na.gif\n\n```\n\n如果只想输出匹配部分，则加上`-o`参数\n\n```bash\n$ echo 'a.gif' | grep -P -o '\\.(jp?g|gif|bmp|png)'\n\n#输出\n.gif\n```\n\n具体 perl 正则表达式语法，可参考\n\n[Perl regular expressions man page](http://perldoc.perl.org/perlre.html)\n\n[汤姆的猫-Perl入门（四）Perl的正则表达式](http://blog.csdn.net/sunshoupo211/article/details/31769837)\n\n\n博客 [https://anjia.ml/2017/06/29/nginx-regex-test-way/][blog]\n简书 [http://www.jianshu.com/p/17eb0ba22ff6][jianshu]\n掘金 [https://juejin.im/post/5954ad1b5188250d8f602bca][juejin]\n\n[jianshu]: http://www.jianshu.com/p/17eb0ba22ff6\n[juejin]: https://juejin.im/post/5954ad1b5188250d8f602bca\n[blog]: https://anjia.ml/2017/06/29/nginx-regex-test-way/","slug":"nginx-regex-test-way","published":1,"updated":"2019-08-16T05:56:21.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdt002524do9c1rhcqj","content":"<p>之前在配置时都是本地起一个nginx服务，修改<code>location</code>规则,然后<code>nginx -s reload</code> 或则 <code>service nginx reload</code>不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. <a href=\"http://tool.oschina.net/regex/\" target=\"_blank\" rel=\"noopener\">在线工具</a>)又因为使用的库不同，多少存在差异。</p>\n<a id=\"more\"></a>\n<p>正则表达式有不同的规则引擎，具体参见 wikipedia的 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries\" target=\"_blank\" rel=\"noopener\">Comparison of regular expression engines</a></p>\n<p>nginx使用的是<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">PCRE</a></p>\n<p>截取nginx官方文档 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a></p>\n<blockquote>\n<p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p>\n</blockquote>\n<p>建议使用linux下的 <code>grep</code> 工具</p>\n<p>windows可以使用<a href=\"http://www.cygwin.com/\" target=\"_blank\" rel=\"noopener\">cygwin</a> 或者<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">git for windows</a>中的<code>git-bash.exe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ grep --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Regexp selection and interpretation:</span><br><span class=\"line\">  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)</span><br><span class=\"line\">  -F, --fixed-strings       PATTERN is a <span class=\"built_in\">set</span> of newline-separated strings</span><br><span class=\"line\">  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)</span><br><span class=\"line\">  -P, --perl-regexp         PATTERN is a Perl regular expression</span><br><span class=\"line\">  -e, --regexp=PATTERN      use PATTERN <span class=\"keyword\">for</span> matching</span><br><span class=\"line\">  -f, --file=FILE           obtain PATTERN from FILE</span><br><span class=\"line\">  -i, --ignore-case         ignore <span class=\"keyword\">case</span> distinctions</span><br><span class=\"line\">  -w, --word-regexp         force PATTERN to match only whole words</span><br><span class=\"line\">  -x, --line-regexp         force PATTERN to match only whole lines</span><br><span class=\"line\">  -z, --null-data           a data line ends <span class=\"keyword\">in</span> 0 byte, not newline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>grep -P</code>命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a.gif</span><br></pre></td></tr></table></figure>\n<p>如果只想输出匹配部分，则加上<code>-o</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P -o <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">.gif</span><br></pre></td></tr></table></figure>\n<p>具体 perl 正则表达式语法，可参考</p>\n<p><a href=\"http://perldoc.perl.org/perlre.html\" target=\"_blank\" rel=\"noopener\">Perl regular expressions man page</a></p>\n<p><a href=\"http://blog.csdn.net/sunshoupo211/article/details/31769837\" target=\"_blank\" rel=\"noopener\">汤姆的猫-Perl入门（四）Perl的正则表达式</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/29/nginx-regex-test-way/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/06/29/nginx-regex-test-way/</a><br>简书 <a href=\"http://www.jianshu.com/p/17eb0ba22ff6\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/17eb0ba22ff6</a><br>掘金 <a href=\"https://juejin.im/post/5954ad1b5188250d8f602bca\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5954ad1b5188250d8f602bca</a></p>\n","site":{"data":{}},"excerpt":"<p>之前在配置时都是本地起一个nginx服务，修改<code>location</code>规则,然后<code>nginx -s reload</code> 或则 <code>service nginx reload</code>不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. <a href=\"http://tool.oschina.net/regex/\" target=\"_blank\" rel=\"noopener\">在线工具</a>)又因为使用的库不同，多少存在差异。</p>","more":"<p>正则表达式有不同的规则引擎，具体参见 wikipedia的 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries\" target=\"_blank\" rel=\"noopener\">Comparison of regular expression engines</a></p>\n<p>nginx使用的是<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">PCRE</a></p>\n<p>截取nginx官方文档 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a></p>\n<blockquote>\n<p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p>\n</blockquote>\n<p>建议使用linux下的 <code>grep</code> 工具</p>\n<p>windows可以使用<a href=\"http://www.cygwin.com/\" target=\"_blank\" rel=\"noopener\">cygwin</a> 或者<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">git for windows</a>中的<code>git-bash.exe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ grep --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Regexp selection and interpretation:</span><br><span class=\"line\">  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)</span><br><span class=\"line\">  -F, --fixed-strings       PATTERN is a <span class=\"built_in\">set</span> of newline-separated strings</span><br><span class=\"line\">  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)</span><br><span class=\"line\">  -P, --perl-regexp         PATTERN is a Perl regular expression</span><br><span class=\"line\">  -e, --regexp=PATTERN      use PATTERN <span class=\"keyword\">for</span> matching</span><br><span class=\"line\">  -f, --file=FILE           obtain PATTERN from FILE</span><br><span class=\"line\">  -i, --ignore-case         ignore <span class=\"keyword\">case</span> distinctions</span><br><span class=\"line\">  -w, --word-regexp         force PATTERN to match only whole words</span><br><span class=\"line\">  -x, --line-regexp         force PATTERN to match only whole lines</span><br><span class=\"line\">  -z, --null-data           a data line ends <span class=\"keyword\">in</span> 0 byte, not newline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>grep -P</code>命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a.gif</span><br></pre></td></tr></table></figure>\n<p>如果只想输出匹配部分，则加上<code>-o</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P -o <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">.gif</span><br></pre></td></tr></table></figure>\n<p>具体 perl 正则表达式语法，可参考</p>\n<p><a href=\"http://perldoc.perl.org/perlre.html\" target=\"_blank\" rel=\"noopener\">Perl regular expressions man page</a></p>\n<p><a href=\"http://blog.csdn.net/sunshoupo211/article/details/31769837\" target=\"_blank\" rel=\"noopener\">汤姆的猫-Perl入门（四）Perl的正则表达式</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/29/nginx-regex-test-way/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/06/29/nginx-regex-test-way/</a><br>简书 <a href=\"http://www.jianshu.com/p/17eb0ba22ff6\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/17eb0ba22ff6</a><br>掘金 <a href=\"https://juejin.im/post/5954ad1b5188250d8f602bca\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5954ad1b5188250d8f602bca</a></p>"},{"title":"使用jupyter(IPython)开发opencv","date":"2017-07-16T09:09:12.000Z","_content":"\n\nopencv 的默认使用highgui显示图片，\n用命令行运行，可以正常显示\n```\ncv.namedWindow(\"Image\")\ncv.imshow(\"Image\",img)\n```\n\n用jupyter则有无反应\n\n<!--more-->\n\n## 本文环境\n```python\nimport sys\nimport cv2\nprint(\"python版本:%s\"% sys.version)\nprint(\"opencv版本:%s\"% cv2.__version__)\n```\n\n输出\n```\npython版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]\nopencv版本:3.2.0\n```\n\n## 安装opencv\n如果使用Anaconda,则打开 `Anaconda Prompt`,`activate python35`切换到相应的python环境\n\n```bash\npip install --upgrade setuptools\npip install numpy Matplotlib\npip install opencv-python\n```\n\n参考 [Python环境搭建之OpenCV][],但是在jupyter中，运行该博文下一段demo代码，无反应\n\n经过一番google，已解决，现整理如下\n\n## jupyter显示opencv图片\n以[lenna][] 图为例\n\n```python\n\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lenna1.png')\n \nshow_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n\nplt.imshow(show_img)\nplt.show()\n```\n\n参考自 [Quickie: Mix up OpenCV and Jupyter (iPython Notebook)][linkQuickie:MixUpOpencvAndJupyter_ipython] 和官方 [Using Matplotlib][linkUsingMatplotlib]\n\n## opencv读取网络图片\n```python\n%matplotlib inline\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\nimport urllib.request as ul\n\ndata = None\n\ntry:\n    \n    data = ul.urlopen('http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png').read()\n    \nexcept Exception as e:\n    \n    print(\"Could not download the image: %s \" %( e.message))\n    \nelse:\n    data =  np.fromstring(data, np.uint8)\n    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )\n    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)\n    plt.imshow(img_data)\n    plt.show()\n```\n\n本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在`cv2.CV_LOAD_IMAGE_COLOR`,根据 [Python OpenCV load image from byte string][linkPythonOpencvLoadImageFromByteString] ，改成`cv2.IMREAD_COLOR`\n\n大部分代码 参考自 [Quickie: Grab an image from the web with urllib2 and OpenCV][linkQuickie:GrabAnImageFromTheWebWith]\n\n\n## [OpenCV入门教程][opencv-tutorial]\n\n\n博客 [https://anjia.ml/2017/07/16/opencv-on-jupyter/][blog]\n掘金 [https://juejin.im/post/596b3e50f265da6c2211b609][juejin]\n简书 [http://www.jianshu.com/p/69af8b1dce6d][jianshu]\n\n[blog]: https://anjia.ml/2017/07/16/opencv-on-jupyter/\n[juejin]: https://juejin.im/post/596b3e50f265da6c2211b609\n[jianshu]: http://www.jianshu.com/p/69af8b1dce6d\n[opencv-tutorial]: http://blog.csdn.net/column/details/opencv-tutorial.html\n[lenna]: https://en.wikipedia.org/wiki/Lenna\n[Python环境搭建之OpenCV]: http://www.cnblogs.com/lclblack/p/6377710.html\n[linkQuickie:MixUpOpencvAndJupyter_ipython]: https://giusedroid.blogspot.jp/2015/04/blog-post.html\n[linkQuickie:GrabAnImageFromTheWebWith]: https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\n[linkPythonOpencvLoadImageFromByteString]: https://stackoverflow.com/a/17170855/7001350\n[linkUsingMatplotlib]: http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\n","source":"_posts/opencv-on-jupyter.md","raw":"---\ntitle: 使用jupyter(IPython)开发opencv\ndate: 2017-07-16 17:09:12\ntags: [opencv,ipython,jupyter]\n---\n\n\nopencv 的默认使用highgui显示图片，\n用命令行运行，可以正常显示\n```\ncv.namedWindow(\"Image\")\ncv.imshow(\"Image\",img)\n```\n\n用jupyter则有无反应\n\n<!--more-->\n\n## 本文环境\n```python\nimport sys\nimport cv2\nprint(\"python版本:%s\"% sys.version)\nprint(\"opencv版本:%s\"% cv2.__version__)\n```\n\n输出\n```\npython版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]\nopencv版本:3.2.0\n```\n\n## 安装opencv\n如果使用Anaconda,则打开 `Anaconda Prompt`,`activate python35`切换到相应的python环境\n\n```bash\npip install --upgrade setuptools\npip install numpy Matplotlib\npip install opencv-python\n```\n\n参考 [Python环境搭建之OpenCV][],但是在jupyter中，运行该博文下一段demo代码，无反应\n\n经过一番google，已解决，现整理如下\n\n## jupyter显示opencv图片\n以[lenna][] 图为例\n\n```python\n\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lenna1.png')\n \nshow_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n\nplt.imshow(show_img)\nplt.show()\n```\n\n参考自 [Quickie: Mix up OpenCV and Jupyter (iPython Notebook)][linkQuickie:MixUpOpencvAndJupyter_ipython] 和官方 [Using Matplotlib][linkUsingMatplotlib]\n\n## opencv读取网络图片\n```python\n%matplotlib inline\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\nimport urllib.request as ul\n\ndata = None\n\ntry:\n    \n    data = ul.urlopen('http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png').read()\n    \nexcept Exception as e:\n    \n    print(\"Could not download the image: %s \" %( e.message))\n    \nelse:\n    data =  np.fromstring(data, np.uint8)\n    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )\n    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)\n    plt.imshow(img_data)\n    plt.show()\n```\n\n本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在`cv2.CV_LOAD_IMAGE_COLOR`,根据 [Python OpenCV load image from byte string][linkPythonOpencvLoadImageFromByteString] ，改成`cv2.IMREAD_COLOR`\n\n大部分代码 参考自 [Quickie: Grab an image from the web with urllib2 and OpenCV][linkQuickie:GrabAnImageFromTheWebWith]\n\n\n## [OpenCV入门教程][opencv-tutorial]\n\n\n博客 [https://anjia.ml/2017/07/16/opencv-on-jupyter/][blog]\n掘金 [https://juejin.im/post/596b3e50f265da6c2211b609][juejin]\n简书 [http://www.jianshu.com/p/69af8b1dce6d][jianshu]\n\n[blog]: https://anjia.ml/2017/07/16/opencv-on-jupyter/\n[juejin]: https://juejin.im/post/596b3e50f265da6c2211b609\n[jianshu]: http://www.jianshu.com/p/69af8b1dce6d\n[opencv-tutorial]: http://blog.csdn.net/column/details/opencv-tutorial.html\n[lenna]: https://en.wikipedia.org/wiki/Lenna\n[Python环境搭建之OpenCV]: http://www.cnblogs.com/lclblack/p/6377710.html\n[linkQuickie:MixUpOpencvAndJupyter_ipython]: https://giusedroid.blogspot.jp/2015/04/blog-post.html\n[linkQuickie:GrabAnImageFromTheWebWith]: https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\n[linkPythonOpencvLoadImageFromByteString]: https://stackoverflow.com/a/17170855/7001350\n[linkUsingMatplotlib]: http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\n","slug":"opencv-on-jupyter","published":1,"updated":"2019-08-16T05:56:21.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdv002924dow72t0ukd","content":"<p>opencv 的默认使用highgui显示图片，<br>用命令行运行，可以正常显示<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cv.namedWindow(&quot;Image&quot;)</span><br><span class=\"line\">cv.imshow(&quot;Image&quot;,img)</span><br></pre></td></tr></table></figure></p>\n<p>用jupyter则有无反应</p>\n<a id=\"more\"></a>\n<h2 id=\"本文环境\"><a href=\"#本文环境\" class=\"headerlink\" title=\"本文环境\"></a>本文环境</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">print(<span class=\"string\">\"python版本:%s\"</span>% sys.version)</span><br><span class=\"line\">print(<span class=\"string\">\"opencv版本:%s\"</span>% cv2.__version__)</span><br></pre></td></tr></table></figure>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">opencv版本:3.2.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装opencv\"><a href=\"#安装opencv\" class=\"headerlink\" title=\"安装opencv\"></a>安装opencv</h2><p>如果使用Anaconda,则打开 <code>Anaconda Prompt</code>,<code>activate python35</code>切换到相应的python环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install --upgrade setuptools</span><br><span class=\"line\">pip install numpy Matplotlib</span><br><span class=\"line\">pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://www.cnblogs.com/lclblack/p/6377710.html\" target=\"_blank\" rel=\"noopener\">Python环境搭建之OpenCV</a>,但是在jupyter中，运行该博文下一段demo代码，无反应</p>\n<p>经过一番google，已解决，现整理如下</p>\n<h2 id=\"jupyter显示opencv图片\"><a href=\"#jupyter显示opencv图片\" class=\"headerlink\" title=\"jupyter显示opencv图片\"></a>jupyter显示opencv图片</h2><p>以<a href=\"https://en.wikipedia.org/wiki/Lenna\" target=\"_blank\" rel=\"noopener\">lenna</a> 图为例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'lenna1.png'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">show_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) </span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(show_img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/blog-post.html\" target=\"_blank\" rel=\"noopener\">Quickie: Mix up OpenCV and Jupyter (iPython Notebook)</a> 和官方 <a href=\"http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\" target=\"_blank\" rel=\"noopener\">Using Matplotlib</a></p>\n<h2 id=\"opencv读取网络图片\"><a href=\"#opencv读取网络图片\" class=\"headerlink\" title=\"opencv读取网络图片\"></a>opencv读取网络图片</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request <span class=\"keyword\">as</span> ul</span><br><span class=\"line\"></span><br><span class=\"line\">data = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    data = ul.urlopen(<span class=\"string\">'http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png'</span>).read()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Could not download the image: %s \"</span> %( e.message))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    data =  np.fromstring(data, np.uint8)</span><br><span class=\"line\">    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )</span><br><span class=\"line\">    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    plt.imshow(img_data)</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n<p>本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在<code>cv2.CV_LOAD_IMAGE_COLOR</code>,根据 <a href=\"https://stackoverflow.com/a/17170855/7001350\" target=\"_blank\" rel=\"noopener\">Python OpenCV load image from byte string</a> ，改成<code>cv2.IMREAD_COLOR</code></p>\n<p>大部分代码 参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\" target=\"_blank\" rel=\"noopener\">Quickie: Grab an image from the web with urllib2 and OpenCV</a></p>\n<h2 id=\"OpenCV入门教程\"><a href=\"#OpenCV入门教程\" class=\"headerlink\" title=\"OpenCV入门教程\"></a><a href=\"http://blog.csdn.net/column/details/opencv-tutorial.html\" target=\"_blank\" rel=\"noopener\">OpenCV入门教程</a></h2><p>博客 <a href=\"https://anjia.ml/2017/07/16/opencv-on-jupyter/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/16/opencv-on-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/596b3e50f265da6c2211b609\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/596b3e50f265da6c2211b609</a><br>简书 <a href=\"http://www.jianshu.com/p/69af8b1dce6d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/69af8b1dce6d</a></p>\n","site":{"data":{}},"excerpt":"<p>opencv 的默认使用highgui显示图片，<br>用命令行运行，可以正常显示<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cv.namedWindow(&quot;Image&quot;)</span><br><span class=\"line\">cv.imshow(&quot;Image&quot;,img)</span><br></pre></td></tr></table></figure></p>\n<p>用jupyter则有无反应</p>","more":"<h2 id=\"本文环境\"><a href=\"#本文环境\" class=\"headerlink\" title=\"本文环境\"></a>本文环境</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">print(<span class=\"string\">\"python版本:%s\"</span>% sys.version)</span><br><span class=\"line\">print(<span class=\"string\">\"opencv版本:%s\"</span>% cv2.__version__)</span><br></pre></td></tr></table></figure>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python版本:3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">opencv版本:3.2.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装opencv\"><a href=\"#安装opencv\" class=\"headerlink\" title=\"安装opencv\"></a>安装opencv</h2><p>如果使用Anaconda,则打开 <code>Anaconda Prompt</code>,<code>activate python35</code>切换到相应的python环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install --upgrade setuptools</span><br><span class=\"line\">pip install numpy Matplotlib</span><br><span class=\"line\">pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://www.cnblogs.com/lclblack/p/6377710.html\" target=\"_blank\" rel=\"noopener\">Python环境搭建之OpenCV</a>,但是在jupyter中，运行该博文下一段demo代码，无反应</p>\n<p>经过一番google，已解决，现整理如下</p>\n<h2 id=\"jupyter显示opencv图片\"><a href=\"#jupyter显示opencv图片\" class=\"headerlink\" title=\"jupyter显示opencv图片\"></a>jupyter显示opencv图片</h2><p>以<a href=\"https://en.wikipedia.org/wiki/Lenna\" target=\"_blank\" rel=\"noopener\">lenna</a> 图为例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'lenna1.png'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">show_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) </span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(show_img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/blog-post.html\" target=\"_blank\" rel=\"noopener\">Quickie: Mix up OpenCV and Jupyter (iPython Notebook)</a> 和官方 <a href=\"http://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html\" target=\"_blank\" rel=\"noopener\">Using Matplotlib</a></p>\n<h2 id=\"opencv读取网络图片\"><a href=\"#opencv读取网络图片\" class=\"headerlink\" title=\"opencv读取网络图片\"></a>opencv读取网络图片</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request <span class=\"keyword\">as</span> ul</span><br><span class=\"line\"></span><br><span class=\"line\">data = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    data = ul.urlopen(<span class=\"string\">'http://www.mupin.it/wp-content/uploads/2012/06/lenna1.png'</span>).read()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Could not download the image: %s \"</span> %( e.message))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    data =  np.fromstring(data, np.uint8)</span><br><span class=\"line\">    img_data =  cv2.imdecode(data, cv2.IMREAD_COLOR )</span><br><span class=\"line\">    img_data = cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    plt.imshow(img_data)</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n<p>本示例用的环境是python:3.5.3 和 opencv:3.2.0，在opencv3.x中已经不存在<code>cv2.CV_LOAD_IMAGE_COLOR</code>,根据 <a href=\"https://stackoverflow.com/a/17170855/7001350\" target=\"_blank\" rel=\"noopener\">Python OpenCV load image from byte string</a> ，改成<code>cv2.IMREAD_COLOR</code></p>\n<p>大部分代码 参考自 <a href=\"https://giusedroid.blogspot.jp/2015/04/quickie-download-and-show-image-with.html\" target=\"_blank\" rel=\"noopener\">Quickie: Grab an image from the web with urllib2 and OpenCV</a></p>\n<h2 id=\"OpenCV入门教程\"><a href=\"#OpenCV入门教程\" class=\"headerlink\" title=\"OpenCV入门教程\"></a><a href=\"http://blog.csdn.net/column/details/opencv-tutorial.html\" target=\"_blank\" rel=\"noopener\">OpenCV入门教程</a></h2><p>博客 <a href=\"https://anjia.ml/2017/07/16/opencv-on-jupyter/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/16/opencv-on-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/596b3e50f265da6c2211b609\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/596b3e50f265da6c2211b609</a><br>简书 <a href=\"http://www.jianshu.com/p/69af8b1dce6d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/69af8b1dce6d</a></p>"},{"title":"011-openresty的maxminddb插件","date":"2019-03-14T15:26:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第11篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍我之前基于openresty写的maxminddb的解析插件 -- [anjia0532/lua-resty-maxminddb](https://github.com/anjia0532/lua-resty-maxminddb) (已开源)。主要用途是根据ip获取地理位置。国内精确度不如国内[ipip.net](https://www.ipip.net/) ，但是胜在免费。在精确度要求不高的场景，还是可以用的。\n\n如果要用ipip.net的lua库，可以参考官方的 [ipipdotnet/ipdb-luajit](https://github.com/ipipdotnet/ipdb-luajit)\n\n<a name=\"b0ff454a\"></a>\n## 前提条件\n<a name=\"OpenResty\"></a>\n### OpenResty\n```bash\n# import our GPG key:\nwget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n\n# for installing the add-apt-repository command\n# (you can remove this package and its dependencies later):\nsudo apt-get -y install software-properties-common\n\n# add the our official APT repository:\nsudo add-apt-repository -y \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\"\n\n# to update the APT index:\nsudo apt-get update\n\nsudo apt-get install openresty\n```\n\n<a name=\"62a25ba8\"></a>\n### maxmind/libmaxminddb && maxmind/geoipupdate\n```bash\nsudo add-apt-repository ppa:maxmind/ppa\nsudo apt update\nsudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin geoipupdate\n```\n\n<a name=\"a259fd57\"></a>\n### 配置 geoipupdate\n\n```bash\nsudo tee /etc/GeoIP.conf <<-'EOF'\n# The following AccountID and LicenseKey are required placeholders.\n# For geoipupdate versions earlier than 2.5.0, use UserId here instead of AccountID.\nAccountID 0\nLicenseKey 000000000000\n\n# Include one or more of the following edition IDs:\n# * GeoLite2-City - GeoLite 2 City\n# * GeoLite2-Country - GeoLite2 Country\n# For geoipupdate versions earlier than 2.5.0, use ProductIds here instead of EditionIDs.\nEditionIDs GeoLite2-City GeoLite2-Country\nEOF\n\nsudo /usr/local/bin/geoipupdate\n```\n\n\n<a name=\"68692f19\"></a>\n## 安装和使用 lua-resty-maxminddb\n\n<a name=\"e655a410\"></a>\n### 安装\n```bash\nopm get anjia0532/lua-resty-maxminddb\n```\n\n<a name=\"2651f0d5\"></a>\n### 配置openresty\n\n```bash\n  local cjson = require 'cjson'\n  local geo = require 'resty.maxminddb'\n  if not geo.initted() then\n      geo.init(\"/path/to/GeoLite2-City.mmdb\")\n  end\n  local res,err = geo.lookup(ngx.var.arg_ip or ngx.var.remote_addr) --support ipv6 e.g. 2001:4860:0:1001::3004:ef68\n\n  if not res then\n      ngx.log(ngx.ERR,'failed to lookup by ip ,reason:',err)\n  end\n\n  ngx.say(\"full :\",cjson.encode(res))\n  if ngx.var.arg_node then\n     ngx.say(\"node name:\",ngx.var.arg_node,\" ,value:\", cjson.encode(res[ngx.var.arg_node] or {}))\n  end\n```\n\n<a name=\"db06c78d\"></a>\n### 测试\n\n```bash\n#ipv4\ncurl localhost/ip=114.114.114.114&node=city\n#ipv6\n#curl localhost/ip=2001:4860:0:1001::3004:ef68&node=country\nfull :{\"city\":{\"geoname_id\":1799962,\"names\":{\"en\":\"Nanjing\",\"ru\":\"Нанкин\",\"fr\":\"Nankin\",\"pt-BR\":\"Nanquim\",\"zh-CN\":\"南京\",\"es\":\"Nankín\",\"de\":\"Nanjing\",\"ja\":\"南京市\"}},\"subdivisions\":[{\"geoname_id\":1806260,\"names\":{\"en\":\"Jiangsu\",\"fr\":\"Province de Jiangsu\",\"zh-CN\":\"江苏省\"},\"iso_code\":\"32\"}],\"country\":{\"geoname_id\":1814991,\"names\":{\"en\":\"China\",\"ru\":\"Китай\",\"fr\":\"Chine\",\"pt-BR\":\"China\",\"zh-CN\":\"中国\",\"es\":\"China\",\"de\":\"China\",\"ja\":\"中国\"},\"iso_code\":\"CN\"},\"registered_country\":{\"geoname_id\":1814991,\"names\":{\"en\":\"China\",\"ru\":\"Китай\",\"fr\":\"Chine\",\"pt-BR\":\"China\",\"zh-CN\":\"中国\",\"es\":\"China\",\"de\":\"China\",\"ja\":\"中国\"},\"iso_code\":\"CN\"},\"location\":{\"time_zone\":\"Asia\\/Shanghai\",\"longitude\":118.7778,\"accuracy_radius\":50,\"latitude\":32.0617},\"continent\":{\"geoname_id\":6255147,\"names\":{\"en\":\"Asia\",\"ru\":\"Азия\",\"fr\":\"Asie\",\"pt-BR\":\"Ásia\",\"zh-CN\":\"亚洲\",\"es\":\"Asia\",\"de\":\"Asien\",\"ja\":\"アジア\"},\"code\":\"AS\"}}\nnode name:city ,value:{\"geoname_id\":1799962,\"names\":{\"en\":\"Nanjing\",\"ru\":\"Нанкин\",\"fr\":\"Nankin\",\"pt-BR\":\"Nanquim\",\"zh-CN\":\"南京\",\"es\":\"Nankín\",\"de\":\"Nanjing\",\"ja\":\"南京市\"}}\n```\n\n格式化一下\n\n```javascript\nfull: {\n    \"city\": {\n        \"geoname_id\": 1799962,\n        \"names\": {\n            \"en\": \"Nanjing\",\n            \"ru\": \"Нанкин\",\n            \"fr\": \"Nankin\",\n            \"pt-BR\": \"Nanquim\",\n            \"zh-CN\": \"南京\",\n            \"es\": \"Nankín\",\n            \"de\": \"Nanjing\",\n            \"ja\": \"南京市\"\n        }\n    },\n    \"subdivisions\": [{\n            \"geoname_id\": 1806260,\n            \"names\": {\n                \"en\": \"Jiangsu\",\n                \"fr\": \"Province de Jiangsu\",\n                \"zh-CN\": \"江苏省\"\n            },\n            \"iso_code\": \"32\"\n        }\n    ],\n    \"country\": {\n        \"geoname_id\": 1814991,\n        \"names\": {\n            \"en\": \"China\",\n            \"ru\": \"Китай\",\n            \"fr\": \"Chine\",\n            \"pt-BR\": \"China\",\n            \"zh-CN\": \"中国\",\n            \"es\": \"China\",\n            \"de\": \"China\",\n            \"ja\": \"中国\"\n        },\n        \"iso_code\": \"CN\"\n    },\n    \"registered_country\": {\n        \"geoname_id\": 1814991,\n        \"names\": {\n            \"en\": \"China\",\n            \"ru\": \"Китай\",\n            \"fr\": \"Chine\",\n            \"pt-BR\": \"China\",\n            \"zh-CN\": \"中国\",\n            \"es\": \"China\",\n            \"de\": \"China\",\n            \"ja\": \"中国\"\n        },\n        \"iso_code\": \"CN\"\n    },\n    \"location\": {\n        \"time_zone\": \"Asia\\/Shanghai\",\n        \"longitude\": 118.7778,\n        \"accuracy_radius\": 50,\n        \"latitude\": 32.0617\n    },\n    \"continent\": {\n        \"geoname_id\": 6255147,\n        \"names\": {\n            \"en\": \"Asia\",\n            \"ru\": \"Азия\",\n            \"fr\": \"Asie\",\n            \"pt-BR\": \"Ásia\",\n            \"zh-CN\": \"亚洲\",\n            \"es\": \"Asia\",\n            \"de\": \"Asien\",\n            \"ja\": \"アジア\"\n        },\n        \"code\": \"AS\"\n    }\n}\nnode name: city, value: {\n    \"geoname_id\": 1799962,\n    \"names\": {\n        \"en\": \"Nanjing\",\n        \"ru\": \"Нанкин\",\n        \"fr\": \"Nankin\",\n        \"pt-BR\": \"Nanquim\",\n        \"zh-CN\": \"南京\",\n        \"es\": \"Nankín\",\n        \"de\": \"Nanjing\",\n        \"ja\": \"南京市\"\n    }\n}\n```\n\n<a name=\"97caa17e\"></a>\n## 压测 & 性能\n事先安装好 [wrk](https://github.com/wg/wrk/wiki)\n```bash\nsudo tee /tmp/wrk.lua <<-'EOF'\nwrk.method = \"GET\";\nwrk.body = \"\";\n\nlogfile = io.open(\"wrk.log\", \"w\");\n\nrequest = function()\nip = tostring(math.random(1, 255))..\".\"..tostring(math.random(1, 255))..\".\"..tostring(math.random(1, 255))..\".\"..tostring(math.random(1, 255))\npath = \"/?ip=\" .. ip\nreturn wrk.format(nil, path)\nend\n\nresponse = function(status,header,body)\nlogfile:write(\"\\nbody:\" .. body .. \"\\n-----------------\");\nend\nEOF\n\nsudo wrk -t50 -c200 -d120s -s /tmp/wrk.lua --latency http://127.0.0.1\n```\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552578843226-04258e12-de95-4cad-89a2-5a4e8021de30.png#align=left&display=inline&height=157&originHeight=258&originWidth=1227&size=0&status=done&width=746)<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552578867709-755ce4c2-069f-4db9-b8ee-dfaa91331193.png#align=left&display=inline&height=209&originHeight=209&originWidth=635&size=0&status=done&width=635)\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [OpenResty® Linux Packages](https://openresty.org/en/linux-packages.html)\n- [Automatic Updates for GeoIP2 and GeoIP Legacy Databases](https://dev.maxmind.com/geoip/geoipupdate/)\n- [maxmind/libmaxminddb](https://github.com/maxmind/libmaxminddb)\n- [maxmind/geoipupdate](https://github.com/maxmind/geoipupdate)\n- [wg/wrk#wiki](https://github.com/wg/wrk/wiki)\n- [MMDB_free_entry_data_list (entry_data_list=0x23) at maxminddb.c:1860 #9](https://github.com/anjia0532/lua-resty-maxminddb/issues/9)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/openresty-maxminddb.md","raw":"\n---\n\ntitle: 011-openresty的maxminddb插件\n\ndate: 2019-03-14 23:26:00 +0800\n\ntags: [nginx,openresty,maxminddb,maxmind,ipip]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第11篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍我之前基于openresty写的maxminddb的解析插件 -- [anjia0532/lua-resty-maxminddb](https://github.com/anjia0532/lua-resty-maxminddb) (已开源)。主要用途是根据ip获取地理位置。国内精确度不如国内[ipip.net](https://www.ipip.net/) ，但是胜在免费。在精确度要求不高的场景，还是可以用的。\n\n如果要用ipip.net的lua库，可以参考官方的 [ipipdotnet/ipdb-luajit](https://github.com/ipipdotnet/ipdb-luajit)\n\n<a name=\"b0ff454a\"></a>\n## 前提条件\n<a name=\"OpenResty\"></a>\n### OpenResty\n```bash\n# import our GPG key:\nwget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n\n# for installing the add-apt-repository command\n# (you can remove this package and its dependencies later):\nsudo apt-get -y install software-properties-common\n\n# add the our official APT repository:\nsudo add-apt-repository -y \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\"\n\n# to update the APT index:\nsudo apt-get update\n\nsudo apt-get install openresty\n```\n\n<a name=\"62a25ba8\"></a>\n### maxmind/libmaxminddb && maxmind/geoipupdate\n```bash\nsudo add-apt-repository ppa:maxmind/ppa\nsudo apt update\nsudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin geoipupdate\n```\n\n<a name=\"a259fd57\"></a>\n### 配置 geoipupdate\n\n```bash\nsudo tee /etc/GeoIP.conf <<-'EOF'\n# The following AccountID and LicenseKey are required placeholders.\n# For geoipupdate versions earlier than 2.5.0, use UserId here instead of AccountID.\nAccountID 0\nLicenseKey 000000000000\n\n# Include one or more of the following edition IDs:\n# * GeoLite2-City - GeoLite 2 City\n# * GeoLite2-Country - GeoLite2 Country\n# For geoipupdate versions earlier than 2.5.0, use ProductIds here instead of EditionIDs.\nEditionIDs GeoLite2-City GeoLite2-Country\nEOF\n\nsudo /usr/local/bin/geoipupdate\n```\n\n\n<a name=\"68692f19\"></a>\n## 安装和使用 lua-resty-maxminddb\n\n<a name=\"e655a410\"></a>\n### 安装\n```bash\nopm get anjia0532/lua-resty-maxminddb\n```\n\n<a name=\"2651f0d5\"></a>\n### 配置openresty\n\n```bash\n  local cjson = require 'cjson'\n  local geo = require 'resty.maxminddb'\n  if not geo.initted() then\n      geo.init(\"/path/to/GeoLite2-City.mmdb\")\n  end\n  local res,err = geo.lookup(ngx.var.arg_ip or ngx.var.remote_addr) --support ipv6 e.g. 2001:4860:0:1001::3004:ef68\n\n  if not res then\n      ngx.log(ngx.ERR,'failed to lookup by ip ,reason:',err)\n  end\n\n  ngx.say(\"full :\",cjson.encode(res))\n  if ngx.var.arg_node then\n     ngx.say(\"node name:\",ngx.var.arg_node,\" ,value:\", cjson.encode(res[ngx.var.arg_node] or {}))\n  end\n```\n\n<a name=\"db06c78d\"></a>\n### 测试\n\n```bash\n#ipv4\ncurl localhost/ip=114.114.114.114&node=city\n#ipv6\n#curl localhost/ip=2001:4860:0:1001::3004:ef68&node=country\nfull :{\"city\":{\"geoname_id\":1799962,\"names\":{\"en\":\"Nanjing\",\"ru\":\"Нанкин\",\"fr\":\"Nankin\",\"pt-BR\":\"Nanquim\",\"zh-CN\":\"南京\",\"es\":\"Nankín\",\"de\":\"Nanjing\",\"ja\":\"南京市\"}},\"subdivisions\":[{\"geoname_id\":1806260,\"names\":{\"en\":\"Jiangsu\",\"fr\":\"Province de Jiangsu\",\"zh-CN\":\"江苏省\"},\"iso_code\":\"32\"}],\"country\":{\"geoname_id\":1814991,\"names\":{\"en\":\"China\",\"ru\":\"Китай\",\"fr\":\"Chine\",\"pt-BR\":\"China\",\"zh-CN\":\"中国\",\"es\":\"China\",\"de\":\"China\",\"ja\":\"中国\"},\"iso_code\":\"CN\"},\"registered_country\":{\"geoname_id\":1814991,\"names\":{\"en\":\"China\",\"ru\":\"Китай\",\"fr\":\"Chine\",\"pt-BR\":\"China\",\"zh-CN\":\"中国\",\"es\":\"China\",\"de\":\"China\",\"ja\":\"中国\"},\"iso_code\":\"CN\"},\"location\":{\"time_zone\":\"Asia\\/Shanghai\",\"longitude\":118.7778,\"accuracy_radius\":50,\"latitude\":32.0617},\"continent\":{\"geoname_id\":6255147,\"names\":{\"en\":\"Asia\",\"ru\":\"Азия\",\"fr\":\"Asie\",\"pt-BR\":\"Ásia\",\"zh-CN\":\"亚洲\",\"es\":\"Asia\",\"de\":\"Asien\",\"ja\":\"アジア\"},\"code\":\"AS\"}}\nnode name:city ,value:{\"geoname_id\":1799962,\"names\":{\"en\":\"Nanjing\",\"ru\":\"Нанкин\",\"fr\":\"Nankin\",\"pt-BR\":\"Nanquim\",\"zh-CN\":\"南京\",\"es\":\"Nankín\",\"de\":\"Nanjing\",\"ja\":\"南京市\"}}\n```\n\n格式化一下\n\n```javascript\nfull: {\n    \"city\": {\n        \"geoname_id\": 1799962,\n        \"names\": {\n            \"en\": \"Nanjing\",\n            \"ru\": \"Нанкин\",\n            \"fr\": \"Nankin\",\n            \"pt-BR\": \"Nanquim\",\n            \"zh-CN\": \"南京\",\n            \"es\": \"Nankín\",\n            \"de\": \"Nanjing\",\n            \"ja\": \"南京市\"\n        }\n    },\n    \"subdivisions\": [{\n            \"geoname_id\": 1806260,\n            \"names\": {\n                \"en\": \"Jiangsu\",\n                \"fr\": \"Province de Jiangsu\",\n                \"zh-CN\": \"江苏省\"\n            },\n            \"iso_code\": \"32\"\n        }\n    ],\n    \"country\": {\n        \"geoname_id\": 1814991,\n        \"names\": {\n            \"en\": \"China\",\n            \"ru\": \"Китай\",\n            \"fr\": \"Chine\",\n            \"pt-BR\": \"China\",\n            \"zh-CN\": \"中国\",\n            \"es\": \"China\",\n            \"de\": \"China\",\n            \"ja\": \"中国\"\n        },\n        \"iso_code\": \"CN\"\n    },\n    \"registered_country\": {\n        \"geoname_id\": 1814991,\n        \"names\": {\n            \"en\": \"China\",\n            \"ru\": \"Китай\",\n            \"fr\": \"Chine\",\n            \"pt-BR\": \"China\",\n            \"zh-CN\": \"中国\",\n            \"es\": \"China\",\n            \"de\": \"China\",\n            \"ja\": \"中国\"\n        },\n        \"iso_code\": \"CN\"\n    },\n    \"location\": {\n        \"time_zone\": \"Asia\\/Shanghai\",\n        \"longitude\": 118.7778,\n        \"accuracy_radius\": 50,\n        \"latitude\": 32.0617\n    },\n    \"continent\": {\n        \"geoname_id\": 6255147,\n        \"names\": {\n            \"en\": \"Asia\",\n            \"ru\": \"Азия\",\n            \"fr\": \"Asie\",\n            \"pt-BR\": \"Ásia\",\n            \"zh-CN\": \"亚洲\",\n            \"es\": \"Asia\",\n            \"de\": \"Asien\",\n            \"ja\": \"アジア\"\n        },\n        \"code\": \"AS\"\n    }\n}\nnode name: city, value: {\n    \"geoname_id\": 1799962,\n    \"names\": {\n        \"en\": \"Nanjing\",\n        \"ru\": \"Нанкин\",\n        \"fr\": \"Nankin\",\n        \"pt-BR\": \"Nanquim\",\n        \"zh-CN\": \"南京\",\n        \"es\": \"Nankín\",\n        \"de\": \"Nanjing\",\n        \"ja\": \"南京市\"\n    }\n}\n```\n\n<a name=\"97caa17e\"></a>\n## 压测 & 性能\n事先安装好 [wrk](https://github.com/wg/wrk/wiki)\n```bash\nsudo tee /tmp/wrk.lua <<-'EOF'\nwrk.method = \"GET\";\nwrk.body = \"\";\n\nlogfile = io.open(\"wrk.log\", \"w\");\n\nrequest = function()\nip = tostring(math.random(1, 255))..\".\"..tostring(math.random(1, 255))..\".\"..tostring(math.random(1, 255))..\".\"..tostring(math.random(1, 255))\npath = \"/?ip=\" .. ip\nreturn wrk.format(nil, path)\nend\n\nresponse = function(status,header,body)\nlogfile:write(\"\\nbody:\" .. body .. \"\\n-----------------\");\nend\nEOF\n\nsudo wrk -t50 -c200 -d120s -s /tmp/wrk.lua --latency http://127.0.0.1\n```\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552578843226-04258e12-de95-4cad-89a2-5a4e8021de30.png#align=left&display=inline&height=157&originHeight=258&originWidth=1227&size=0&status=done&width=746)<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552578867709-755ce4c2-069f-4db9-b8ee-dfaa91331193.png#align=left&display=inline&height=209&originHeight=209&originWidth=635&size=0&status=done&width=635)\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [OpenResty® Linux Packages](https://openresty.org/en/linux-packages.html)\n- [Automatic Updates for GeoIP2 and GeoIP Legacy Databases](https://dev.maxmind.com/geoip/geoipupdate/)\n- [maxmind/libmaxminddb](https://github.com/maxmind/libmaxminddb)\n- [maxmind/geoipupdate](https://github.com/maxmind/geoipupdate)\n- [wg/wrk#wiki](https://github.com/wg/wrk/wiki)\n- [MMDB_free_entry_data_list (entry_data_list=0x23) at maxminddb.c:1860 #9](https://github.com/anjia0532/lua-resty-maxminddb/issues/9)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"openresty-maxminddb","published":1,"updated":"2019-08-16T06:11:15.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdw002b24dou1qtvd5x","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第11篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍我之前基于openresty写的maxminddb的解析插件 – <a href=\"https://github.com/anjia0532/lua-resty-maxminddb\" target=\"_blank\" rel=\"noopener\">anjia0532/lua-resty-maxminddb</a> (已开源)。主要用途是根据ip获取地理位置。国内精确度不如国内<a href=\"https://www.ipip.net/\" target=\"_blank\" rel=\"noopener\">ipip.net</a> ，但是胜在免费。在精确度要求不高的场景，还是可以用的。</p>\n<p>如果要用ipip.net的lua库，可以参考官方的 <a href=\"https://github.com/ipipdotnet/ipdb-luajit\" target=\"_blank\" rel=\"noopener\">ipipdotnet/ipdb-luajit</a></p>\n<p><a name=\"b0ff454a\"></a></p>\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p><a name=\"OpenResty\"></a></p>\n<h3 id=\"OpenResty\"><a href=\"#OpenResty\" class=\"headerlink\" title=\"OpenResty\"></a>OpenResty</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># import our GPG key:</span></span><br><span class=\"line\">wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for installing the add-apt-repository command</span></span><br><span class=\"line\"><span class=\"comment\"># (you can remove this package and its dependencies later):</span></span><br><span class=\"line\">sudo apt-get -y install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the our official APT repository:</span></span><br><span class=\"line\">sudo add-apt-repository -y <span class=\"string\">\"deb http://openresty.org/package/ubuntu <span class=\"variable\">$(lsb_release -sc)</span> main\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># to update the APT index:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install openresty</span><br></pre></td></tr></table></figure>\n<p><a name=\"62a25ba8\"></a></p>\n<h3 id=\"maxmind-libmaxminddb-amp-amp-maxmind-geoipupdate\"><a href=\"#maxmind-libmaxminddb-amp-amp-maxmind-geoipupdate\" class=\"headerlink\" title=\"maxmind/libmaxminddb &amp;&amp; maxmind/geoipupdate\"></a>maxmind/libmaxminddb &amp;&amp; maxmind/geoipupdate</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:maxmind/ppa</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin geoipupdate</span><br></pre></td></tr></table></figure>\n<p><a name=\"a259fd57\"></a></p>\n<h3 id=\"配置-geoipupdate\"><a href=\"#配置-geoipupdate\" class=\"headerlink\" title=\"配置 geoipupdate\"></a>配置 geoipupdate</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tee /etc/GeoIP.conf &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"comment\"># The following AccountID and LicenseKey are required placeholders.</span></span><br><span class=\"line\"><span class=\"comment\"># For geoipupdate versions earlier than 2.5.0, use UserId here instead of AccountID.</span></span><br><span class=\"line\">AccountID 0</span><br><span class=\"line\">LicenseKey 000000000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Include one or more of the following edition IDs:</span></span><br><span class=\"line\"><span class=\"comment\"># * GeoLite2-City - GeoLite 2 City</span></span><br><span class=\"line\"><span class=\"comment\"># * GeoLite2-Country - GeoLite2 Country</span></span><br><span class=\"line\"><span class=\"comment\"># For geoipupdate versions earlier than 2.5.0, use ProductIds here instead of EditionIDs.</span></span><br><span class=\"line\">EditionIDs GeoLite2-City GeoLite2-Country</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo /usr/<span class=\"built_in\">local</span>/bin/geoipupdate</span><br></pre></td></tr></table></figure>\n<p><a name=\"68692f19\"></a></p>\n<h2 id=\"安装和使用-lua-resty-maxminddb\"><a href=\"#安装和使用-lua-resty-maxminddb\" class=\"headerlink\" title=\"安装和使用 lua-resty-maxminddb\"></a>安装和使用 lua-resty-maxminddb</h2><p><a name=\"e655a410\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opm get anjia0532/lua-resty-maxminddb</span><br></pre></td></tr></table></figure>\n<p><a name=\"2651f0d5\"></a></p>\n<h3 id=\"配置openresty\"><a href=\"#配置openresty\" class=\"headerlink\" title=\"配置openresty\"></a>配置openresty</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> cjson = require <span class=\"string\">'cjson'</span></span><br><span class=\"line\"><span class=\"built_in\">local</span> geo = require <span class=\"string\">'resty.maxminddb'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> not geo.initted() <span class=\"keyword\">then</span></span><br><span class=\"line\">    geo.init(<span class=\"string\">\"/path/to/GeoLite2-City.mmdb\"</span>)</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"built_in\">local</span> res,err = geo.lookup(ngx.var.arg_ip or ngx.var.remote_addr) --support ipv6 e.g. 2001:4860:0:1001::3004:ef68</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> not res <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.log(ngx.ERR,<span class=\"string\">'failed to lookup by ip ,reason:'</span>,err)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"full :\"</span>,cjson.encode(res))</span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.var.arg_node <span class=\"keyword\">then</span></span><br><span class=\"line\">   ngx.say(<span class=\"string\">\"node name:\"</span>,ngx.var.arg_node,<span class=\"string\">\" ,value:\"</span>, cjson.encode(res[ngx.var.arg_node] or &#123;&#125;))</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p><a name=\"db06c78d\"></a></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#ipv4</span></span><br><span class=\"line\">curl localhost/ip=114.114.114.114&amp;node=city</span><br><span class=\"line\"><span class=\"comment\">#ipv6</span></span><br><span class=\"line\"><span class=\"comment\">#curl localhost/ip=2001:4860:0:1001::3004:ef68&amp;node=country</span></span><br><span class=\"line\">full :&#123;<span class=\"string\">\"city\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:1799962,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Нанкин\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Nankin\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"Nanquim\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"南京\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"Nankín\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"南京市\"</span>&#125;&#125;,<span class=\"string\">\"subdivisions\"</span>:[&#123;<span class=\"string\">\"geoname_id\"</span>:1806260,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Jiangsu\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Province de Jiangsu\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"江苏省\"</span>&#125;,<span class=\"string\">\"iso_code\"</span>:<span class=\"string\">\"32\"</span>&#125;],<span class=\"string\">\"country\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:1814991,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Китай\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Chine\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"中国\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"中国\"</span>&#125;,<span class=\"string\">\"iso_code\"</span>:<span class=\"string\">\"CN\"</span>&#125;,<span class=\"string\">\"registered_country\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:1814991,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Китай\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Chine\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"中国\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"中国\"</span>&#125;,<span class=\"string\">\"iso_code\"</span>:<span class=\"string\">\"CN\"</span>&#125;,<span class=\"string\">\"location\"</span>:&#123;<span class=\"string\">\"time_zone\"</span>:<span class=\"string\">\"Asia\\/Shanghai\"</span>,<span class=\"string\">\"longitude\"</span>:118.7778,<span class=\"string\">\"accuracy_radius\"</span>:50,<span class=\"string\">\"latitude\"</span>:32.0617&#125;,<span class=\"string\">\"continent\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:6255147,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Asia\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Азия\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Asie\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"Ásia\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"亚洲\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"Asia\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"Asien\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"アジア\"</span>&#125;,<span class=\"string\">\"code\"</span>:<span class=\"string\">\"AS\"</span>&#125;&#125;</span><br><span class=\"line\">node name:city ,value:&#123;<span class=\"string\">\"geoname_id\"</span>:1799962,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Нанкин\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Nankin\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"Nanquim\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"南京\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"Nankín\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"南京市\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>格式化一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">full: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1799962</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Нанкин\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Nankin\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Nanquim\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"南京\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Nankín\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"南京市\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"subdivisions\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1806260</span>,</span><br><span class=\"line\">            <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Jiangsu\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Province de Jiangsu\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"江苏省\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"32\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1814991</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Китай\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Chine\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"CN\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"registered_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1814991</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Китай\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Chine\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"CN\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"location\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"time_zone\"</span>: <span class=\"string\">\"Asia\\/Shanghai\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"longitude\"</span>: <span class=\"number\">118.7778</span>,</span><br><span class=\"line\">        <span class=\"string\">\"accuracy_radius\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"string\">\"latitude\"</span>: <span class=\"number\">32.0617</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"continent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6255147</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Asia\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Азия\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Asie\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Ásia\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"亚洲\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Asia\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Asien\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アジア\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"AS\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">node name: city, <span class=\"attr\">value</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1799962</span>,</span><br><span class=\"line\">    <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Нанкин\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Nankin\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Nanquim\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"南京\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Nankín\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"南京市\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"97caa17e\"></a></p>\n<h2 id=\"压测-amp-性能\"><a href=\"#压测-amp-性能\" class=\"headerlink\" title=\"压测 &amp; 性能\"></a>压测 &amp; 性能</h2><p>事先安装好 <a href=\"https://github.com/wg/wrk/wiki\" target=\"_blank\" rel=\"noopener\">wrk</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tee /tmp/wrk.lua &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">wrk.method = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">wrk.body = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">logfile = io.open(<span class=\"string\">\"wrk.log\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">request = <span class=\"keyword\">function</span>()</span><br><span class=\"line\">ip = tostring(math.random(1, 255))..<span class=\"string\">\".\"</span>..tostring(math.random(1, 255))..<span class=\"string\">\".\"</span>..tostring(math.random(1, 255))..<span class=\"string\">\".\"</span>..tostring(math.random(1, 255))</span><br><span class=\"line\">path = <span class=\"string\">\"/?ip=\"</span> .. ip</span><br><span class=\"line\"><span class=\"built_in\">return</span> wrk.format(nil, path)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">response = <span class=\"keyword\">function</span>(status,header,body)</span><br><span class=\"line\">logfile:write(<span class=\"string\">\"\\nbody:\"</span> .. body .. <span class=\"string\">\"\\n-----------------\"</span>);</span><br><span class=\"line\">end</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo wrk -t50 -c200 -d120s -s /tmp/wrk.lua --latency http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552578843226-04258e12-de95-4cad-89a2-5a4e8021de30.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=258&amp;originWidth=1227&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552578867709-755ce4c2-069f-4db9-b8ee-dfaa91331193.png#align=left&amp;display=inline&amp;height=209&amp;originHeight=209&amp;originWidth=635&amp;size=0&amp;status=done&amp;width=635\" alt=\"\"></p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://openresty.org/en/linux-packages.html\" target=\"_blank\" rel=\"noopener\">OpenResty® Linux Packages</a></li>\n<li><a href=\"https://dev.maxmind.com/geoip/geoipupdate/\" target=\"_blank\" rel=\"noopener\">Automatic Updates for GeoIP2 and GeoIP Legacy Databases</a></li>\n<li><a href=\"https://github.com/maxmind/libmaxminddb\" target=\"_blank\" rel=\"noopener\">maxmind/libmaxminddb</a></li>\n<li><a href=\"https://github.com/maxmind/geoipupdate\" target=\"_blank\" rel=\"noopener\">maxmind/geoipupdate</a></li>\n<li><a href=\"https://github.com/wg/wrk/wiki\" target=\"_blank\" rel=\"noopener\">wg/wrk#wiki</a></li>\n<li><a href=\"https://github.com/anjia0532/lua-resty-maxminddb/issues/9\" target=\"_blank\" rel=\"noopener\">MMDB_free_entry_data_list (entry_data_list=0x23) at maxminddb.c:1860 #9</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第11篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍我之前基于openresty写的maxminddb的解析插件 – <a href=\"https://github.com/anjia0532/lua-resty-maxminddb\" target=\"_blank\" rel=\"noopener\">anjia0532/lua-resty-maxminddb</a> (已开源)。主要用途是根据ip获取地理位置。国内精确度不如国内<a href=\"https://www.ipip.net/\" target=\"_blank\" rel=\"noopener\">ipip.net</a> ，但是胜在免费。在精确度要求不高的场景，还是可以用的。</p>\n<p>如果要用ipip.net的lua库，可以参考官方的 <a href=\"https://github.com/ipipdotnet/ipdb-luajit\" target=\"_blank\" rel=\"noopener\">ipipdotnet/ipdb-luajit</a></p>\n<p><a name=\"b0ff454a\"></a></p>\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p><a name=\"OpenResty\"></a></p>\n<h3 id=\"OpenResty\"><a href=\"#OpenResty\" class=\"headerlink\" title=\"OpenResty\"></a>OpenResty</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># import our GPG key:</span></span><br><span class=\"line\">wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for installing the add-apt-repository command</span></span><br><span class=\"line\"><span class=\"comment\"># (you can remove this package and its dependencies later):</span></span><br><span class=\"line\">sudo apt-get -y install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the our official APT repository:</span></span><br><span class=\"line\">sudo add-apt-repository -y <span class=\"string\">\"deb http://openresty.org/package/ubuntu <span class=\"variable\">$(lsb_release -sc)</span> main\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># to update the APT index:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install openresty</span><br></pre></td></tr></table></figure>\n<p><a name=\"62a25ba8\"></a></p>\n<h3 id=\"maxmind-libmaxminddb-amp-amp-maxmind-geoipupdate\"><a href=\"#maxmind-libmaxminddb-amp-amp-maxmind-geoipupdate\" class=\"headerlink\" title=\"maxmind/libmaxminddb &amp;&amp; maxmind/geoipupdate\"></a>maxmind/libmaxminddb &amp;&amp; maxmind/geoipupdate</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:maxmind/ppa</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin geoipupdate</span><br></pre></td></tr></table></figure>\n<p><a name=\"a259fd57\"></a></p>\n<h3 id=\"配置-geoipupdate\"><a href=\"#配置-geoipupdate\" class=\"headerlink\" title=\"配置 geoipupdate\"></a>配置 geoipupdate</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tee /etc/GeoIP.conf &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"comment\"># The following AccountID and LicenseKey are required placeholders.</span></span><br><span class=\"line\"><span class=\"comment\"># For geoipupdate versions earlier than 2.5.0, use UserId here instead of AccountID.</span></span><br><span class=\"line\">AccountID 0</span><br><span class=\"line\">LicenseKey 000000000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Include one or more of the following edition IDs:</span></span><br><span class=\"line\"><span class=\"comment\"># * GeoLite2-City - GeoLite 2 City</span></span><br><span class=\"line\"><span class=\"comment\"># * GeoLite2-Country - GeoLite2 Country</span></span><br><span class=\"line\"><span class=\"comment\"># For geoipupdate versions earlier than 2.5.0, use ProductIds here instead of EditionIDs.</span></span><br><span class=\"line\">EditionIDs GeoLite2-City GeoLite2-Country</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo /usr/<span class=\"built_in\">local</span>/bin/geoipupdate</span><br></pre></td></tr></table></figure>\n<p><a name=\"68692f19\"></a></p>\n<h2 id=\"安装和使用-lua-resty-maxminddb\"><a href=\"#安装和使用-lua-resty-maxminddb\" class=\"headerlink\" title=\"安装和使用 lua-resty-maxminddb\"></a>安装和使用 lua-resty-maxminddb</h2><p><a name=\"e655a410\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opm get anjia0532/lua-resty-maxminddb</span><br></pre></td></tr></table></figure>\n<p><a name=\"2651f0d5\"></a></p>\n<h3 id=\"配置openresty\"><a href=\"#配置openresty\" class=\"headerlink\" title=\"配置openresty\"></a>配置openresty</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> cjson = require <span class=\"string\">'cjson'</span></span><br><span class=\"line\"><span class=\"built_in\">local</span> geo = require <span class=\"string\">'resty.maxminddb'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> not geo.initted() <span class=\"keyword\">then</span></span><br><span class=\"line\">    geo.init(<span class=\"string\">\"/path/to/GeoLite2-City.mmdb\"</span>)</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"built_in\">local</span> res,err = geo.lookup(ngx.var.arg_ip or ngx.var.remote_addr) --support ipv6 e.g. 2001:4860:0:1001::3004:ef68</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> not res <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.log(ngx.ERR,<span class=\"string\">'failed to lookup by ip ,reason:'</span>,err)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"full :\"</span>,cjson.encode(res))</span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.var.arg_node <span class=\"keyword\">then</span></span><br><span class=\"line\">   ngx.say(<span class=\"string\">\"node name:\"</span>,ngx.var.arg_node,<span class=\"string\">\" ,value:\"</span>, cjson.encode(res[ngx.var.arg_node] or &#123;&#125;))</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p><a name=\"db06c78d\"></a></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#ipv4</span></span><br><span class=\"line\">curl localhost/ip=114.114.114.114&amp;node=city</span><br><span class=\"line\"><span class=\"comment\">#ipv6</span></span><br><span class=\"line\"><span class=\"comment\">#curl localhost/ip=2001:4860:0:1001::3004:ef68&amp;node=country</span></span><br><span class=\"line\">full :&#123;<span class=\"string\">\"city\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:1799962,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Нанкин\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Nankin\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"Nanquim\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"南京\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"Nankín\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"南京市\"</span>&#125;&#125;,<span class=\"string\">\"subdivisions\"</span>:[&#123;<span class=\"string\">\"geoname_id\"</span>:1806260,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Jiangsu\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Province de Jiangsu\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"江苏省\"</span>&#125;,<span class=\"string\">\"iso_code\"</span>:<span class=\"string\">\"32\"</span>&#125;],<span class=\"string\">\"country\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:1814991,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Китай\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Chine\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"中国\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"中国\"</span>&#125;,<span class=\"string\">\"iso_code\"</span>:<span class=\"string\">\"CN\"</span>&#125;,<span class=\"string\">\"registered_country\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:1814991,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Китай\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Chine\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"中国\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"China\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"中国\"</span>&#125;,<span class=\"string\">\"iso_code\"</span>:<span class=\"string\">\"CN\"</span>&#125;,<span class=\"string\">\"location\"</span>:&#123;<span class=\"string\">\"time_zone\"</span>:<span class=\"string\">\"Asia\\/Shanghai\"</span>,<span class=\"string\">\"longitude\"</span>:118.7778,<span class=\"string\">\"accuracy_radius\"</span>:50,<span class=\"string\">\"latitude\"</span>:32.0617&#125;,<span class=\"string\">\"continent\"</span>:&#123;<span class=\"string\">\"geoname_id\"</span>:6255147,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Asia\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Азия\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Asie\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"Ásia\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"亚洲\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"Asia\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"Asien\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"アジア\"</span>&#125;,<span class=\"string\">\"code\"</span>:<span class=\"string\">\"AS\"</span>&#125;&#125;</span><br><span class=\"line\">node name:city ,value:&#123;<span class=\"string\">\"geoname_id\"</span>:1799962,<span class=\"string\">\"names\"</span>:&#123;<span class=\"string\">\"en\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ru\"</span>:<span class=\"string\">\"Нанкин\"</span>,<span class=\"string\">\"fr\"</span>:<span class=\"string\">\"Nankin\"</span>,<span class=\"string\">\"pt-BR\"</span>:<span class=\"string\">\"Nanquim\"</span>,<span class=\"string\">\"zh-CN\"</span>:<span class=\"string\">\"南京\"</span>,<span class=\"string\">\"es\"</span>:<span class=\"string\">\"Nankín\"</span>,<span class=\"string\">\"de\"</span>:<span class=\"string\">\"Nanjing\"</span>,<span class=\"string\">\"ja\"</span>:<span class=\"string\">\"南京市\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>格式化一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">full: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1799962</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Нанкин\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Nankin\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Nanquim\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"南京\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Nankín\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"南京市\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"subdivisions\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1806260</span>,</span><br><span class=\"line\">            <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Jiangsu\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Province de Jiangsu\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"江苏省\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"32\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1814991</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Китай\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Chine\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"CN\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"registered_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1814991</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Китай\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Chine\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"CN\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"location\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"time_zone\"</span>: <span class=\"string\">\"Asia\\/Shanghai\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"longitude\"</span>: <span class=\"number\">118.7778</span>,</span><br><span class=\"line\">        <span class=\"string\">\"accuracy_radius\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"string\">\"latitude\"</span>: <span class=\"number\">32.0617</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"continent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6255147</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Asia\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Азия\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Asie\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Ásia\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"亚洲\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Asia\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Asien\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アジア\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"AS\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">node name: city, <span class=\"attr\">value</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">1799962</span>,</span><br><span class=\"line\">    <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Нанкин\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Nankin\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Nanquim\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"南京\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Nankín\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nanjing\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"南京市\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"97caa17e\"></a></p>\n<h2 id=\"压测-amp-性能\"><a href=\"#压测-amp-性能\" class=\"headerlink\" title=\"压测 &amp; 性能\"></a>压测 &amp; 性能</h2><p>事先安装好 <a href=\"https://github.com/wg/wrk/wiki\" target=\"_blank\" rel=\"noopener\">wrk</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tee /tmp/wrk.lua &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">wrk.method = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">wrk.body = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">logfile = io.open(<span class=\"string\">\"wrk.log\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">request = <span class=\"keyword\">function</span>()</span><br><span class=\"line\">ip = tostring(math.random(1, 255))..<span class=\"string\">\".\"</span>..tostring(math.random(1, 255))..<span class=\"string\">\".\"</span>..tostring(math.random(1, 255))..<span class=\"string\">\".\"</span>..tostring(math.random(1, 255))</span><br><span class=\"line\">path = <span class=\"string\">\"/?ip=\"</span> .. ip</span><br><span class=\"line\"><span class=\"built_in\">return</span> wrk.format(nil, path)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">response = <span class=\"keyword\">function</span>(status,header,body)</span><br><span class=\"line\">logfile:write(<span class=\"string\">\"\\nbody:\"</span> .. body .. <span class=\"string\">\"\\n-----------------\"</span>);</span><br><span class=\"line\">end</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo wrk -t50 -c200 -d120s -s /tmp/wrk.lua --latency http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552578843226-04258e12-de95-4cad-89a2-5a4e8021de30.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=258&amp;originWidth=1227&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552578867709-755ce4c2-069f-4db9-b8ee-dfaa91331193.png#align=left&amp;display=inline&amp;height=209&amp;originHeight=209&amp;originWidth=635&amp;size=0&amp;status=done&amp;width=635\" alt=\"\"></p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://openresty.org/en/linux-packages.html\" target=\"_blank\" rel=\"noopener\">OpenResty® Linux Packages</a></li>\n<li><a href=\"https://dev.maxmind.com/geoip/geoipupdate/\" target=\"_blank\" rel=\"noopener\">Automatic Updates for GeoIP2 and GeoIP Legacy Databases</a></li>\n<li><a href=\"https://github.com/maxmind/libmaxminddb\" target=\"_blank\" rel=\"noopener\">maxmind/libmaxminddb</a></li>\n<li><a href=\"https://github.com/maxmind/geoipupdate\" target=\"_blank\" rel=\"noopener\">maxmind/geoipupdate</a></li>\n<li><a href=\"https://github.com/wg/wrk/wiki\" target=\"_blank\" rel=\"noopener\">wg/wrk#wiki</a></li>\n<li><a href=\"https://github.com/anjia0532/lua-resty-maxminddb/issues/9\" target=\"_blank\" rel=\"noopener\">MMDB_free_entry_data_list (entry_data_list=0x23) at maxminddb.c:1860 #9</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"openresty(nginx) redis 通用工具类","date":"2017-08-16T06:47:41.000Z","_content":"\n[openresty/lua-resty-redis][] 是章亦春开发的openresty中的操作redis的库。\n\n截取官方部分代码，进行说明\n\n```lua\n    local redis = require \"resty.redis\"\n    local red = redis:new()\n\n    red:set_timeout(1000) -- 1 sec --设置超时时间\n\n    local ok, err = red:connect(\"127.0.0.1\", 6379) --设置redis的host和port\n    if not ok then --判断生成连接是否失败\n        ngx.say(\"failed to connect: \", err)\n        return\n    end\n\n    ok, err = red:set(\"dog\", \"an animal\") --插入键值(类似 mysql insert)\n    if not ok then --判断操作是否成功\n        ngx.say(\"failed to set dog: \", err)\n        return\n    end\n\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n    -- put it into the connection pool of size 100,\n    -- with 10 seconds max idle time\n    local ok, err = red:set_keepalive(10000, 100) --将连接放入连接池,100个连接，最长10秒的闲置时间\n    if not ok then --判断放池结果\n        ngx.say(\"failed to set keepalive: \", err)\n        return\n    end\n    -- 如果不放池，用完就关闭的话，用下面的写法\n    -- or just close the connection right away:\n    -- local ok, err = red:close()\n    -- if not ok then\n    --     ngx.say(\"failed to close: \", err)\n    --     return\n    -- end\n```\n\n如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。\n\n同样的内容，使用我封装后的代码。\n\n```lua\n    -- 依赖库\n    local redis = require \"resty.redis-util\"\n    -- 初始化\n    local red = redis:new();\n    -- 插入键值\n    local ok,err = red:set(\"dog\",\"an animal\")\n    -- 判断结果\n    if not ok then\n      ngx.say(\"failed to set dog:\",err)\n      return\n    end\n    -- 页面打印结果\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n```\n\n详细使用方法，参见我的项目 [anjia0532/lua-resty-redis-util][]\n\n博客 [https://anjia.ml/2017/08/16/openresty-redis-common-utils/][blog]\n掘金 [https://juejin.im/post/5993fea8518825242d5f72fb][juejin]\n简书 [http://www.jianshu.com/p/54cca5f33d48][jianshu]\n\n[blog]: https://anjia.ml/2017/08/16/openresty-redis-common-utils/\n[juejin]: https://juejin.im/post/5993fea8518825242d5f72fb\n[jianshu]: http://www.jianshu.com/p/54cca5f33d48\n[openresty/lua-resty-redis]: https://github.com/openresty/lua-resty-redis\n[anjia0532/lua-resty-redis-util]: https://github.com/anjia0532/lua-resty-redis-util\n","source":"_posts/openresty-redis-common-utils.md","raw":"---\ntitle: openresty(nginx) redis 通用工具类\ndate: 2017-08-16 14:47:41\ntags: [nginx,redis,lua,openresty,lua-resty-redis]\n---\n\n[openresty/lua-resty-redis][] 是章亦春开发的openresty中的操作redis的库。\n\n截取官方部分代码，进行说明\n\n```lua\n    local redis = require \"resty.redis\"\n    local red = redis:new()\n\n    red:set_timeout(1000) -- 1 sec --设置超时时间\n\n    local ok, err = red:connect(\"127.0.0.1\", 6379) --设置redis的host和port\n    if not ok then --判断生成连接是否失败\n        ngx.say(\"failed to connect: \", err)\n        return\n    end\n\n    ok, err = red:set(\"dog\", \"an animal\") --插入键值(类似 mysql insert)\n    if not ok then --判断操作是否成功\n        ngx.say(\"failed to set dog: \", err)\n        return\n    end\n\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n    -- put it into the connection pool of size 100,\n    -- with 10 seconds max idle time\n    local ok, err = red:set_keepalive(10000, 100) --将连接放入连接池,100个连接，最长10秒的闲置时间\n    if not ok then --判断放池结果\n        ngx.say(\"failed to set keepalive: \", err)\n        return\n    end\n    -- 如果不放池，用完就关闭的话，用下面的写法\n    -- or just close the connection right away:\n    -- local ok, err = red:close()\n    -- if not ok then\n    --     ngx.say(\"failed to close: \", err)\n    --     return\n    -- end\n```\n\n如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。\n\n同样的内容，使用我封装后的代码。\n\n```lua\n    -- 依赖库\n    local redis = require \"resty.redis-util\"\n    -- 初始化\n    local red = redis:new();\n    -- 插入键值\n    local ok,err = red:set(\"dog\",\"an animal\")\n    -- 判断结果\n    if not ok then\n      ngx.say(\"failed to set dog:\",err)\n      return\n    end\n    -- 页面打印结果\n    ngx.say(\"set result: \", ok) -- 页面输出结果\n```\n\n详细使用方法，参见我的项目 [anjia0532/lua-resty-redis-util][]\n\n博客 [https://anjia.ml/2017/08/16/openresty-redis-common-utils/][blog]\n掘金 [https://juejin.im/post/5993fea8518825242d5f72fb][juejin]\n简书 [http://www.jianshu.com/p/54cca5f33d48][jianshu]\n\n[blog]: https://anjia.ml/2017/08/16/openresty-redis-common-utils/\n[juejin]: https://juejin.im/post/5993fea8518825242d5f72fb\n[jianshu]: http://www.jianshu.com/p/54cca5f33d48\n[openresty/lua-resty-redis]: https://github.com/openresty/lua-resty-redis\n[anjia0532/lua-resty-redis-util]: https://github.com/anjia0532/lua-resty-redis-util\n","slug":"openresty-redis-common-utils","published":1,"updated":"2019-08-16T05:56:21.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojdx002e24dobuxq35bl","content":"<p><a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"noopener\">openresty/lua-resty-redis</a> 是章亦春开发的openresty中的操作redis的库。</p>\n<p>截取官方部分代码，进行说明</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis\"</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new()</span><br><span class=\"line\"></span><br><span class=\"line\">red:set_timeout(<span class=\"number\">1000</span>) <span class=\"comment\">-- 1 sec --设置超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:connect(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">6379</span>) <span class=\"comment\">--设置redis的host和port</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断生成连接是否失败</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to connect: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ok, err = red:set(<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"an animal\"</span>) <span class=\"comment\">--插入键值(类似 mysql insert)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断操作是否成功</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set dog: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br><span class=\"line\"><span class=\"comment\">-- put it into the connection pool of size 100,</span></span><br><span class=\"line\"><span class=\"comment\">-- with 10 seconds max idle time</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:set_keepalive(<span class=\"number\">10000</span>, <span class=\"number\">100</span>) <span class=\"comment\">--将连接放入连接池,100个连接，最长10秒的闲置时间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断放池结果</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set keepalive: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果不放池，用完就关闭的话，用下面的写法</span></span><br><span class=\"line\"><span class=\"comment\">-- or just close the connection right away:</span></span><br><span class=\"line\"><span class=\"comment\">-- local ok, err = red:close()</span></span><br><span class=\"line\"><span class=\"comment\">-- if not ok then</span></span><br><span class=\"line\"><span class=\"comment\">--     ngx.say(\"failed to close: \", err)</span></span><br><span class=\"line\"><span class=\"comment\">--     return</span></span><br><span class=\"line\"><span class=\"comment\">-- end</span></span><br></pre></td></tr></table></figure>\n<p>如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。</p>\n<p>同样的内容，使用我封装后的代码。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 依赖库</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis-util\"</span></span><br><span class=\"line\"><span class=\"comment\">-- 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new();</span><br><span class=\"line\"><span class=\"comment\">-- 插入键值</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok,err = red:set(<span class=\"string\">\"dog\"</span>,<span class=\"string\">\"an animal\"</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 判断结果</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">  ngx.say(<span class=\"string\">\"failed to set dog:\"</span>,err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 页面打印结果</span></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br></pre></td></tr></table></figure>\n<p>详细使用方法，参见我的项目 <a href=\"https://github.com/anjia0532/lua-resty-redis-util\" target=\"_blank\" rel=\"noopener\">anjia0532/lua-resty-redis-util</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/16/openresty-redis-common-utils/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/08/16/openresty-redis-common-utils/</a><br>掘金 <a href=\"https://juejin.im/post/5993fea8518825242d5f72fb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5993fea8518825242d5f72fb</a><br>简书 <a href=\"http://www.jianshu.com/p/54cca5f33d48\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/54cca5f33d48</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"noopener\">openresty/lua-resty-redis</a> 是章亦春开发的openresty中的操作redis的库。</p>\n<p>截取官方部分代码，进行说明</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis\"</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new()</span><br><span class=\"line\"></span><br><span class=\"line\">red:set_timeout(<span class=\"number\">1000</span>) <span class=\"comment\">-- 1 sec --设置超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:connect(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">6379</span>) <span class=\"comment\">--设置redis的host和port</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断生成连接是否失败</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to connect: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ok, err = red:set(<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"an animal\"</span>) <span class=\"comment\">--插入键值(类似 mysql insert)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断操作是否成功</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set dog: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br><span class=\"line\"><span class=\"comment\">-- put it into the connection pool of size 100,</span></span><br><span class=\"line\"><span class=\"comment\">-- with 10 seconds max idle time</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:set_keepalive(<span class=\"number\">10000</span>, <span class=\"number\">100</span>) <span class=\"comment\">--将连接放入连接池,100个连接，最长10秒的闲置时间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span> <span class=\"comment\">--判断放池结果</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to set keepalive: \"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果不放池，用完就关闭的话，用下面的写法</span></span><br><span class=\"line\"><span class=\"comment\">-- or just close the connection right away:</span></span><br><span class=\"line\"><span class=\"comment\">-- local ok, err = red:close()</span></span><br><span class=\"line\"><span class=\"comment\">-- if not ok then</span></span><br><span class=\"line\"><span class=\"comment\">--     ngx.say(\"failed to close: \", err)</span></span><br><span class=\"line\"><span class=\"comment\">--     return</span></span><br><span class=\"line\"><span class=\"comment\">-- end</span></span><br></pre></td></tr></table></figure>\n<p>如果用过java，c#等面向对象的语言，就会觉得这么写太。。。。了，必须重构啊，暴露太多无关细节了，导致代码中有大量重复代码了。</p>\n<p>同样的内容，使用我封装后的代码。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 依赖库</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.redis-util\"</span></span><br><span class=\"line\"><span class=\"comment\">-- 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> red = redis:new();</span><br><span class=\"line\"><span class=\"comment\">-- 插入键值</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok,err = red:set(<span class=\"string\">\"dog\"</span>,<span class=\"string\">\"an animal\"</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 判断结果</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">  ngx.say(<span class=\"string\">\"failed to set dog:\"</span>,err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 页面打印结果</span></span><br><span class=\"line\">ngx.say(<span class=\"string\">\"set result: \"</span>, ok) <span class=\"comment\">-- 页面输出结果</span></span><br></pre></td></tr></table></figure>\n<p>详细使用方法，参见我的项目 <a href=\"https://github.com/anjia0532/lua-resty-redis-util\" target=\"_blank\" rel=\"noopener\">anjia0532/lua-resty-redis-util</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/08/16/openresty-redis-common-utils/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/08/16/openresty-redis-common-utils/</a><br>掘金 <a href=\"https://juejin.im/post/5993fea8518825242d5f72fb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5993fea8518825242d5f72fb</a><br>简书 <a href=\"http://www.jianshu.com/p/54cca5f33d48\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/54cca5f33d48</a></p>\n"},{"title":"rancher中国区加速安装Kubernetes","date":"2017-11-13T04:04:14.000Z","_content":"\n上篇 [《rancher安装Kubernetes》][] 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的`gcr.io`的镜像。\n\n本文是在群内`@天阑-李小威` `@洪晓露` `@logan` 等大神指导下,并根据 [《原生加速中国区Kubernetes安装》][]，最终搞定的方案\n\n<!--more-->\n\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  |     docker version    | ranhcer version |\n|--------------|---------------|--------------------------------------|-----------------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | Docker version 1.12.6 | v1.6.11         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n**一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard**\n\n如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 `docker 1.12.3+` 的版本\n\n```bash\ncurl https://releases.rancher.com/install-docker/1.12.sh | sh\n```\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为`google_containers`,建议v1.6.11+\n\n```bash\nsudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 && sudo docker logs -f rancher-server\n```\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n如果之前安装过docker和k8s，需要运行\n```\ndocker rm -f -v $(docker ps -aq) \ndocker volume rm $(docker volume ls)\nsudo rm -rf /var/etcd/\n```\n\n### 创建环境模板\n![创建环境模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg)\n\n### 修改k8s模板\n\n鉴于`gfw`屏蔽`gcr.io`的情况，花了点时间，将所有的`gcr.io`镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 [https://hub.docker.com/r/anjia0532/][] 并且每天定时更新，详情参见另外一篇文章 [Google Container Registry(gcr.io) 中国可用镜像(长期维护)][GoogleContainerRegistry(gcr.io)]\n\n`Private Registry for Add-Ons and Pod Infra Container Image` `index.docker.io`\n\n`Image namespace for  Add-Ons and Pod Infra Container Image` `anjia0532`\n\n`Image namespace for kubernetes-helm Image` `anjia0532`\n\n`Pod Infra Container Image` `anjia0532`\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg)\n\n\n### 创建k8s环境\n\n![创建k8s环境](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg)\n\n### 选择k8s环境并添加主机\n\n![选择k8s环境并添加主机](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg)\n\n### 查看k8s基础服务状态\n\n当基础服务都是绿色后，即可使用\n\n![查看k8s基础服务状态](http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg)\n\n### 查看k8s 仪表板 dashboard\n![查看k8s 仪表板 dashboard](http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg)\n\n## 异常排查\n\n如果打开dashboard 报 `503 ServiceUnavailable` , 非常感谢群内`@天阑-李小威` 耐心解答，同时 参考 [Kubernetes 部署失败的 10 个最普遍原因（Part 1）][Kubernetes部署失败的10个最普遍原因（part1）] 解决了好几个问题\n\n打开`Cli`\n\n```bash\n> kubectl --namespace=kube-system  get pods\nNAME                                   READY     STATUS             RESTARTS   AGE\nheapster-79684d56d6-8pjrd              1/1       Running            0          13m\nkube-dns-7f59fd996-nkvv5               3/3       Running            0          13m\nkubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m\nmonitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m\nmonitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m\ntiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m\n\n# 复\n> kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5\n# 我这是正常Running的日志,ImagePullBackOff的没截下来\n Events:\n  Type    Reason                 Age   From               Message\n  ----    ------                 ----  ----               -------\n  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s\n  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded for volume \"io-rancher-system-token-lb68r\"\n  Normal  Pulled                 16m   kubelet, k8s       Container image \"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\" already present on machine\n  Normal  Created                16m   kubelet, k8s       Created container\n  Normal  Started                16m   kubelet, k8s       Started container\n\n# 也可以根据 events 来辅助排查问题\n> kubectl --namespace=kube-system get events\n```\n\n博客 [https://anjia.ml/2017/11/13/rancher-k8s-china/][blog]\n掘金 [https://juejin.im/post/5a097599f265da430d578385][juejin]\n简书 [http://www.jianshu.com/p/2f906a7f4bfa][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/13/rancher-k8s-china/\n[juejin]: https://juejin.im/post/5a097599f265da430d578385\n[jianshu]: http://www.jianshu.com/p/2f906a7f4bfa\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n[《rancher安装Kubernetes》]: https://anjia.ml/2017/11/10/rancher-k8s/\n[《原生加速中国区Kubernetes安装》]: https://www.cnrancher.com/kubernetes-installation/\n[Kubernetes部署失败的10个最普遍原因（part1）]: http://dockone.io/article/2247\n[https://hub.docker.com/r/anjia0532/]: https://hub.docker.com/r/anjia0532/\n[GoogleContainerRegistry(gcr.io)]: https://anjia.ml/2017/11/15/gcr-io-image-mirror/\n","source":"_posts/rancher-k8s-china.md","raw":"---\ntitle: rancher中国区加速安装Kubernetes\ndate: 2017-11-13 12:04:14\ntags: [k8s,kubernetes,rancher,gcr.io]\n---\n\n上篇 [《rancher安装Kubernetes》][] 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的`gcr.io`的镜像。\n\n本文是在群内`@天阑-李小威` `@洪晓露` `@logan` 等大神指导下,并根据 [《原生加速中国区Kubernetes安装》][]，最终搞定的方案\n\n<!--more-->\n\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  |     docker version    | ranhcer version |\n|--------------|---------------|--------------------------------------|-----------------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | Docker version 1.12.6 | v1.6.11         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n**一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard**\n\n如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 `docker 1.12.3+` 的版本\n\n```bash\ncurl https://releases.rancher.com/install-docker/1.12.sh | sh\n```\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为`google_containers`,建议v1.6.11+\n\n```bash\nsudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 && sudo docker logs -f rancher-server\n```\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n如果之前安装过docker和k8s，需要运行\n```\ndocker rm -f -v $(docker ps -aq) \ndocker volume rm $(docker volume ls)\nsudo rm -rf /var/etcd/\n```\n\n### 创建环境模板\n![创建环境模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg)\n\n### 修改k8s模板\n\n鉴于`gfw`屏蔽`gcr.io`的情况，花了点时间，将所有的`gcr.io`镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 [https://hub.docker.com/r/anjia0532/][] 并且每天定时更新，详情参见另外一篇文章 [Google Container Registry(gcr.io) 中国可用镜像(长期维护)][GoogleContainerRegistry(gcr.io)]\n\n`Private Registry for Add-Ons and Pod Infra Container Image` `index.docker.io`\n\n`Image namespace for  Add-Ons and Pod Infra Container Image` `anjia0532`\n\n`Image namespace for kubernetes-helm Image` `anjia0532`\n\n`Pod Infra Container Image` `anjia0532`\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg)\n\n![修改k8s模板](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg)\n\n\n### 创建k8s环境\n\n![创建k8s环境](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg)\n\n### 选择k8s环境并添加主机\n\n![选择k8s环境并添加主机](http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg)\n\n### 查看k8s基础服务状态\n\n当基础服务都是绿色后，即可使用\n\n![查看k8s基础服务状态](http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg)\n\n### 查看k8s 仪表板 dashboard\n![查看k8s 仪表板 dashboard](http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg)\n\n## 异常排查\n\n如果打开dashboard 报 `503 ServiceUnavailable` , 非常感谢群内`@天阑-李小威` 耐心解答，同时 参考 [Kubernetes 部署失败的 10 个最普遍原因（Part 1）][Kubernetes部署失败的10个最普遍原因（part1）] 解决了好几个问题\n\n打开`Cli`\n\n```bash\n> kubectl --namespace=kube-system  get pods\nNAME                                   READY     STATUS             RESTARTS   AGE\nheapster-79684d56d6-8pjrd              1/1       Running            0          13m\nkube-dns-7f59fd996-nkvv5               3/3       Running            0          13m\nkubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m\nmonitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m\nmonitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m\ntiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m\n\n# 复\n> kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5\n# 我这是正常Running的日志,ImagePullBackOff的没截下来\n Events:\n  Type    Reason                 Age   From               Message\n  ----    ------                 ----  ----               -------\n  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s\n  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded for volume \"io-rancher-system-token-lb68r\"\n  Normal  Pulled                 16m   kubelet, k8s       Container image \"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\" already present on machine\n  Normal  Created                16m   kubelet, k8s       Created container\n  Normal  Started                16m   kubelet, k8s       Started container\n\n# 也可以根据 events 来辅助排查问题\n> kubectl --namespace=kube-system get events\n```\n\n博客 [https://anjia.ml/2017/11/13/rancher-k8s-china/][blog]\n掘金 [https://juejin.im/post/5a097599f265da430d578385][juejin]\n简书 [http://www.jianshu.com/p/2f906a7f4bfa][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/13/rancher-k8s-china/\n[juejin]: https://juejin.im/post/5a097599f265da430d578385\n[jianshu]: http://www.jianshu.com/p/2f906a7f4bfa\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n[《rancher安装Kubernetes》]: https://anjia.ml/2017/11/10/rancher-k8s/\n[《原生加速中国区Kubernetes安装》]: https://www.cnrancher.com/kubernetes-installation/\n[Kubernetes部署失败的10个最普遍原因（part1）]: http://dockone.io/article/2247\n[https://hub.docker.com/r/anjia0532/]: https://hub.docker.com/r/anjia0532/\n[GoogleContainerRegistry(gcr.io)]: https://anjia.ml/2017/11/15/gcr-io-image-mirror/\n","slug":"rancher-k8s-china","published":1,"updated":"2019-08-16T05:56:21.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtoje1002h24dofwg1mr1d","content":"<p>上篇 <a href=\"https://anjia.ml/2017/11/10/rancher-k8s/\" target=\"_blank\" rel=\"noopener\">《rancher安装Kubernetes》</a> 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的<code>gcr.io</code>的镜像。</p>\n<p>本文是在群内<code>@天阑-李小威</code> <code>@洪晓露</code> <code>@logan</code> 等大神指导下,并根据 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">《原生加速中国区Kubernetes安装》</a>，最终搞定的方案</p>\n<a id=\"more\"></a>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>Docker version 1.12.6</td>\n<td>v1.6.11</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<p><strong>一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard</strong></p>\n<p>如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 <code>docker 1.12.3+</code> 的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://releases.rancher.com/install-docker/1.12.sh | sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<p>如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为<code>google_containers</code>,建议v1.6.11+</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 &amp;&amp; sudo docker logs -f rancher-server</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p>如果之前安装过docker和k8s，需要运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f -v $(docker ps -aq) </span><br><span class=\"line\">docker volume rm $(docker volume ls)</span><br><span class=\"line\">sudo rm -rf /var/etcd/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建环境模板\"><a href=\"#创建环境模板\" class=\"headerlink\" title=\"创建环境模板\"></a>创建环境模板</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg\" alt=\"创建环境模板\"></p>\n<h3 id=\"修改k8s模板\"><a href=\"#修改k8s模板\" class=\"headerlink\" title=\"修改k8s模板\"></a>修改k8s模板</h3><p>鉴于<code>gfw</code>屏蔽<code>gcr.io</code>的情况，花了点时间，将所有的<code>gcr.io</code>镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 <a href=\"https://hub.docker.com/r/anjia0532/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/anjia0532/</a> 并且每天定时更新，详情参见另外一篇文章 <a href=\"https://anjia.ml/2017/11/15/gcr-io-image-mirror/\" target=\"_blank\" rel=\"noopener\">Google Container Registry(gcr.io) 中国可用镜像(长期维护)</a></p>\n<p><code>Private Registry for Add-Ons and Pod Infra Container Image</code> <code>index.docker.io</code></p>\n<p><code>Image namespace for  Add-Ons and Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><code>Image namespace for kubernetes-helm Image</code> <code>anjia0532</code></p>\n<p><code>Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg\" alt=\"修改k8s模板\"></p>\n<h3 id=\"创建k8s环境\"><a href=\"#创建k8s环境\" class=\"headerlink\" title=\"创建k8s环境\"></a>创建k8s环境</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg\" alt=\"创建k8s环境\"></p>\n<h3 id=\"选择k8s环境并添加主机\"><a href=\"#选择k8s环境并添加主机\" class=\"headerlink\" title=\"选择k8s环境并添加主机\"></a>选择k8s环境并添加主机</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg\" alt=\"选择k8s环境并添加主机\"></p>\n<h3 id=\"查看k8s基础服务状态\"><a href=\"#查看k8s基础服务状态\" class=\"headerlink\" title=\"查看k8s基础服务状态\"></a>查看k8s基础服务状态</h3><p>当基础服务都是绿色后，即可使用</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg\" alt=\"查看k8s基础服务状态\"></p>\n<h3 id=\"查看k8s-仪表板-dashboard\"><a href=\"#查看k8s-仪表板-dashboard\" class=\"headerlink\" title=\"查看k8s 仪表板 dashboard\"></a>查看k8s 仪表板 dashboard</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg\" alt=\"查看k8s 仪表板 dashboard\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg\" alt=\"\"></p>\n<h2 id=\"异常排查\"><a href=\"#异常排查\" class=\"headerlink\" title=\"异常排查\"></a>异常排查</h2><p>如果打开dashboard 报 <code>503 ServiceUnavailable</code> , 非常感谢群内<code>@天阑-李小威</code> 耐心解答，同时 参考 <a href=\"http://dockone.io/article/2247\" target=\"_blank\" rel=\"noopener\">Kubernetes 部署失败的 10 个最普遍原因（Part 1）</a> 解决了好几个问题</p>\n<p>打开<code>Cli</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                   READY     STATUS             RESTARTS   AGE</span><br><span class=\"line\">heapster-79684d56d6-8pjrd              1/1       Running            0          13m</span><br><span class=\"line\">kube-dns-7f59fd996-nkvv5               3/3       Running            0          13m</span><br><span class=\"line\">kubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m</span><br><span class=\"line\">monitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m</span><br><span class=\"line\">monitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m</span><br><span class=\"line\">tiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5</span><br><span class=\"line\"><span class=\"comment\"># 我这是正常Running的日志,ImagePullBackOff的没截下来</span></span><br><span class=\"line\"> Events:</span><br><span class=\"line\">  Type    Reason                 Age   From               Message</span><br><span class=\"line\">  ----    ------                 ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s</span><br><span class=\"line\">  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded <span class=\"keyword\">for</span> volume <span class=\"string\">\"io-rancher-system-token-lb68r\"</span></span><br><span class=\"line\">  Normal  Pulled                 16m   kubelet, k8s       Container image <span class=\"string\">\"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\"</span> already present on machine</span><br><span class=\"line\">  Normal  Created                16m   kubelet, k8s       Created container</span><br><span class=\"line\">  Normal  Started                16m   kubelet, k8s       Started container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以根据 events 来辅助排查问题</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system get events</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/11/13/rancher-k8s-china/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/11/13/rancher-k8s-china/</a><br>掘金 <a href=\"https://juejin.im/post/5a097599f265da430d578385\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a097599f265da430d578385</a><br>简书 <a href=\"http://www.jianshu.com/p/2f906a7f4bfa\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2f906a7f4bfa</a></p>\n","site":{"data":{}},"excerpt":"<p>上篇 <a href=\"https://anjia.ml/2017/11/10/rancher-k8s/\" target=\"_blank\" rel=\"noopener\">《rancher安装Kubernetes》</a> 最后的步骤是错误的，即使每次手动改了k8s的镜像，但是依然服务pull，而且每次重启docker或者k8s，又会重置回默认的<code>gcr.io</code>的镜像。</p>\n<p>本文是在群内<code>@天阑-李小威</code> <code>@洪晓露</code> <code>@logan</code> 等大神指导下,并根据 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">《原生加速中国区Kubernetes安装》</a>，最终搞定的方案</p>","more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>Docker version 1.12.6</td>\n<td>v1.6.11</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<p><strong>一定注意版本号，在群里处理过好几个因为docker版本不对导致的k8s无法打开dashboard</strong></p>\n<p>如果之前装有其他版本的，需要删除所有镜像和容器，并卸载docker重装,rancher k8s 目前只支持 <code>docker 1.12.3+</code> 的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://releases.rancher.com/install-docker/1.12.sh | sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<p>如果rancher/server是v1.6.10版本(低于v1.6.10版本未试过)，需要你修改私有registry，且将gcr.io的插件push到私有registry，且namespace必须为<code>google_containers</code>,建议v1.6.11+</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart=unless-stopped --name=rancher-server -p 8080:8080 rancher/server:v1.6.11 &amp;&amp; sudo docker logs -f rancher-server</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p>如果之前安装过docker和k8s，需要运行<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f -v $(docker ps -aq) </span><br><span class=\"line\">docker volume rm $(docker volume ls)</span><br><span class=\"line\">sudo rm -rf /var/etcd/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建环境模板\"><a href=\"#创建环境模板\" class=\"headerlink\" title=\"创建环境模板\"></a>创建环境模板</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhdy4yj20860oxmxy.jpg\" alt=\"创建环境模板\"></p>\n<h3 id=\"修改k8s模板\"><a href=\"#修改k8s模板\" class=\"headerlink\" title=\"修改k8s模板\"></a>修改k8s模板</h3><p>鉴于<code>gfw</code>屏蔽<code>gcr.io</code>的情况，花了点时间，将所有的<code>gcr.io</code>镜像(423个镜像，7547个版本)都同步到我的docker hub账号下 <a href=\"https://hub.docker.com/r/anjia0532/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/anjia0532/</a> 并且每天定时更新，详情参见另外一篇文章 <a href=\"https://anjia.ml/2017/11/15/gcr-io-image-mirror/\" target=\"_blank\" rel=\"noopener\">Google Container Registry(gcr.io) 中国可用镜像(长期维护)</a></p>\n<p><code>Private Registry for Add-Ons and Pod Infra Container Image</code> <code>index.docker.io</code></p>\n<p><code>Image namespace for  Add-Ons and Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><code>Image namespace for kubernetes-helm Image</code> <code>anjia0532</code></p>\n<p><code>Pod Infra Container Image</code> <code>anjia0532</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhebjoj20yt0fpgmd.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhfzobj216b0j6gno.jpg\" alt=\"修改k8s模板\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhogk9j20we0eujs2.jpg\" alt=\"修改k8s模板\"></p>\n<h3 id=\"创建k8s环境\"><a href=\"#创建k8s环境\" class=\"headerlink\" title=\"创建k8s环境\"></a>创建k8s环境</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhhf5sj215y0mljsn.jpg\" alt=\"创建k8s环境\"></p>\n<h3 id=\"选择k8s环境并添加主机\"><a href=\"#选择k8s环境并添加主机\" class=\"headerlink\" title=\"选择k8s环境并添加主机\"></a>选择k8s环境并添加主机</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flglqhp8dbj217d0q6jtx.jpg\" alt=\"选择k8s环境并添加主机\"></p>\n<h3 id=\"查看k8s基础服务状态\"><a href=\"#查看k8s基础服务状态\" class=\"headerlink\" title=\"查看k8s基础服务状态\"></a>查看k8s基础服务状态</h3><p>当基础服务都是绿色后，即可使用</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm2741vaj21h70eqdh4.jpg\" alt=\"查看k8s基础服务状态\"></p>\n<h3 id=\"查看k8s-仪表板-dashboard\"><a href=\"#查看k8s-仪表板-dashboard\" class=\"headerlink\" title=\"查看k8s 仪表板 dashboard\"></a>查看k8s 仪表板 dashboard</h3><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm274d0bj20s60ahq3d.jpg\" alt=\"查看k8s 仪表板 dashboard\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flgm275gqgj21gn0njact.jpg\" alt=\"\"></p>\n<h2 id=\"异常排查\"><a href=\"#异常排查\" class=\"headerlink\" title=\"异常排查\"></a>异常排查</h2><p>如果打开dashboard 报 <code>503 ServiceUnavailable</code> , 非常感谢群内<code>@天阑-李小威</code> 耐心解答，同时 参考 <a href=\"http://dockone.io/article/2247\" target=\"_blank\" rel=\"noopener\">Kubernetes 部署失败的 10 个最普遍原因（Part 1）</a> 解决了好几个问题</p>\n<p>打开<code>Cli</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                   READY     STATUS             RESTARTS   AGE</span><br><span class=\"line\">heapster-79684d56d6-8pjrd              1/1       Running            0          13m</span><br><span class=\"line\">kube-dns-7f59fd996-nkvv5               3/3       Running            0          13m</span><br><span class=\"line\">kubernetes-dashboard-86d9cc5b4-7lxj5   0/1       ImagePullBackOff   0          13m</span><br><span class=\"line\">monitoring-grafana-6dc7576774-8x79x    1/1       Running            0          13m</span><br><span class=\"line\">monitoring-influxdb-d78f84c6c-29wcp    1/1       Running            0          13m</span><br><span class=\"line\">tiller-deploy-c4598db7d-8wxpp          1/1       Running            0          13m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system  describe pod kubernetes-dashboard-86d9cc5b4-7lxj5</span><br><span class=\"line\"><span class=\"comment\"># 我这是正常Running的日志,ImagePullBackOff的没截下来</span></span><br><span class=\"line\"> Events:</span><br><span class=\"line\">  Type    Reason                 Age   From               Message</span><br><span class=\"line\">  ----    ------                 ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled              16m   default-scheduler  Successfully assigned kubernetes-dashboard-86d9cc5b4-7lxj5 to k8s</span><br><span class=\"line\">  Normal  SuccessfulMountVolume  16m   kubelet, k8s       MountVolume.SetUp succeeded <span class=\"keyword\">for</span> volume <span class=\"string\">\"io-rancher-system-token-lb68r\"</span></span><br><span class=\"line\">  Normal  Pulled                 16m   kubelet, k8s       Container image <span class=\"string\">\"index.docker.io/anjia0532/kubernetes-dashboard-amd64:v1.7.1\"</span> already present on machine</span><br><span class=\"line\">  Normal  Created                16m   kubelet, k8s       Created container</span><br><span class=\"line\">  Normal  Started                16m   kubelet, k8s       Started container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以根据 events 来辅助排查问题</span></span><br><span class=\"line\">&gt; kubectl --namespace=kube-system get events</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/11/13/rancher-k8s-china/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/11/13/rancher-k8s-china/</a><br>掘金 <a href=\"https://juejin.im/post/5a097599f265da430d578385\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a097599f265da430d578385</a><br>简书 <a href=\"http://www.jianshu.com/p/2f906a7f4bfa\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2f906a7f4bfa</a></p>"},{"title":"rancher安装Kubernetes","date":"2017-11-10T02:57:14.000Z","_content":"\n目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载`gcr.io` registry的镜像基本没戏。\n\n而rancher中国的两篇博文 [Rancher-k8s加速安装文档][] 和 [原生加速中国区Kubernetes安装][] 我是死活没成功。\n\n本文主要介绍，如何在国内，使用`rancher`加速`k8s`的安装，部分内容也适用于直接原生`k8s`加速\n\n<!--more-->\n\n** 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》**\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  | docker version | ranhcer version |\n|--------------|---------------|--------------------------------------|----------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.06.2-ce     | v1.6.10         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker-ce version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg)\n\n复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时`kubernetes-dashboard`是打不开的，提示 `Service unavailable`\n\n按照 群内 `@天阑-李小威` \n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg)\n\n给的命令，在`cli`执行 `kubectl --namespace=kube-system get pods`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg)\n\n发现容器一直卡住.\n\n打开`CLI` 运行\n```bash\nk8s=(\n    heapster\n    kube-dns\n    kubernetes-dashboard\n    monitoring-grafana\n    monitoring-influxdb\n    tiller-deploy\n)\nfor imageName in ${k8s[@]} ; do\n    for t in $(kubectl --namespace=kube-system describe deployment $imageName | grep gcr | awk '{print $2}') ; do\n        echo $t\n    done\ndone\n```\n输出类似\n```\ngcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\ngcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\ngcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\ngcr.io/google_containers/heapster-grafana-amd64:v4.0.2\ngcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\ngcr.io/kubernetes-helm/tiller:v2.3.0\n```\n\n找一台能翻墙的vps,`docker login` 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建`Dockerfile`，里面很简单 `FROM gcr.io/google_containers/.....` 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限\n\n```bash\n#!/usr/bin/env bash\n\nhubName=anjia0532\n\nimages=(\n    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\n    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\n    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\n    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2\n    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\n    gcr.io/kubernetes-helm/tiller:v2.3.0\n)\n\nfor imageName in ${images[@]} ; do\n    imgName=$(echo ${imageName} | cut -d\"/\" -f3)\n    docker pull $imageName\n    docker tag $imageName $hubName/$imgName\n    docker push $hubName/$imgName\ndone\n```\n\n将`k8s-cli`中输出的版本，替换到`images`中，并修改`hubName`为自己实际的`docker hub` 账号,运行。\n\n输出类似\n```\n$ docker images\nanjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB\nanjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB\nanjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB\nanjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB\nanjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB\nanjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB\nanjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB\nanjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB\n```\n\n\n修改`kube-system`的镜像地址,打开cli运行,注意将`anjia0532`替换成`docker hub`账号\n\n```bash\nkubectl --namespace=kube-system edit deployment  heapster\nkubectl --namespace=kube-system edit deployment  kube-dns\nkubectl --namespace=kube-system edit deployment  kubernetes-dashboard\nkubectl --namespace=kube-system edit deployment  monitoring-grafana\nkubectl --namespace=kube-system edit deployment  monitoring-influxdb\n#替换\n:%s#gcr.io/google_containers#anjia0532#g\n#保存\n:wq!\n\nkubectl --namespace=kube-system edit deployment  tiller-deploy\n#替换\n:%s#gcr.io/kubernetes-helm#anjia0532#g\n#保存\n:wq!\n```\n\n运行\n```bash\n\n$ kubectl --namespace=kube-system  get pods\nNAME                                    READY     STATUS              RESTARTS   AGE\nheapster-2407085140-hgddj               0/1       ContainerCreating   0          48m\nkube-dns-570853077-hcqzg                0/3       Pending             0          1h\nkube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h\nkubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m\nmonitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m\nmonitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m\ntiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m\n```\n\n查看状态，我这边一直`Pending` 手动囧一个,找到原因,后续补充.\n\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n","source":"_posts/rancher-k8s.md","raw":"---\ntitle: rancher安装Kubernetes\ndate: 2017-11-10 10:57:14\ntags: [k8s,kubernetes,rancher]\n---\n\n目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载`gcr.io` registry的镜像基本没戏。\n\n而rancher中国的两篇博文 [Rancher-k8s加速安装文档][] 和 [原生加速中国区Kubernetes安装][] 我是死活没成功。\n\n本文主要介绍，如何在国内，使用`rancher`加速`k8s`的安装，部分内容也适用于直接原生`k8s`加速\n\n<!--more-->\n\n** 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》**\n\n## 环境准备\n\n|    主机名    |     主机ip    |                  OS                  | docker version | ranhcer version |\n|--------------|---------------|--------------------------------------|----------------|-----------------|\n| anjia-ubuntu | 192.168.31.83 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.06.2-ce     | v1.6.10         |\n\n## 安装 docker\n\n按照 [Getting Started with Hosts#SUPPORTED DOCKER VERSIONS][GettingStartedWithHosts#supported] 安装受支持的`docker-ce version` (如果国内安装较慢，可以考虑使用[中科大docker镜像][] ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)\n\n## 安装rancher\n按照 [Installing Rancher Server][InstallingRancherServer] 根据实际情况，安装`rancher` ,建议使用 [加速器 DaoCloud - 业界领先的容器云平台][加速器Daocloud-业界领先的容器云平台] 或者 [阿里云docker加速器][]\n\n## 注册 [docker hub][DockerHub]\n\n## 安装k8s\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg)\n\n复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时`kubernetes-dashboard`是打不开的，提示 `Service unavailable`\n\n按照 群内 `@天阑-李小威` \n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg)\n\n给的命令，在`cli`执行 `kubectl --namespace=kube-system get pods`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg)\n\n发现容器一直卡住.\n\n打开`CLI` 运行\n```bash\nk8s=(\n    heapster\n    kube-dns\n    kubernetes-dashboard\n    monitoring-grafana\n    monitoring-influxdb\n    tiller-deploy\n)\nfor imageName in ${k8s[@]} ; do\n    for t in $(kubectl --namespace=kube-system describe deployment $imageName | grep gcr | awk '{print $2}') ; do\n        echo $t\n    done\ndone\n```\n输出类似\n```\ngcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\ngcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\ngcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\ngcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\ngcr.io/google_containers/heapster-grafana-amd64:v4.0.2\ngcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\ngcr.io/kubernetes-helm/tiller:v2.3.0\n```\n\n找一台能翻墙的vps,`docker login` 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建`Dockerfile`，里面很简单 `FROM gcr.io/google_containers/.....` 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限\n\n```bash\n#!/usr/bin/env bash\n\nhubName=anjia0532\n\nimages=(\n    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1\n    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5\n    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5\n    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1\n    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2\n    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3\n    gcr.io/kubernetes-helm/tiller:v2.3.0\n)\n\nfor imageName in ${images[@]} ; do\n    imgName=$(echo ${imageName} | cut -d\"/\" -f3)\n    docker pull $imageName\n    docker tag $imageName $hubName/$imgName\n    docker push $hubName/$imgName\ndone\n```\n\n将`k8s-cli`中输出的版本，替换到`images`中，并修改`hubName`为自己实际的`docker hub` 账号,运行。\n\n输出类似\n```\n$ docker images\nanjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB\nanjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB\nanjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB\nanjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB\nanjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB\nanjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB\nanjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB\nanjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB\n```\n\n\n修改`kube-system`的镜像地址,打开cli运行,注意将`anjia0532`替换成`docker hub`账号\n\n```bash\nkubectl --namespace=kube-system edit deployment  heapster\nkubectl --namespace=kube-system edit deployment  kube-dns\nkubectl --namespace=kube-system edit deployment  kubernetes-dashboard\nkubectl --namespace=kube-system edit deployment  monitoring-grafana\nkubectl --namespace=kube-system edit deployment  monitoring-influxdb\n#替换\n:%s#gcr.io/google_containers#anjia0532#g\n#保存\n:wq!\n\nkubectl --namespace=kube-system edit deployment  tiller-deploy\n#替换\n:%s#gcr.io/kubernetes-helm#anjia0532#g\n#保存\n:wq!\n```\n\n运行\n```bash\n\n$ kubectl --namespace=kube-system  get pods\nNAME                                    READY     STATUS              RESTARTS   AGE\nheapster-2407085140-hgddj               0/1       ContainerCreating   0          48m\nkube-dns-570853077-hcqzg                0/3       Pending             0          1h\nkube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h\nkubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m\nmonitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m\nmonitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m\ntiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m\n```\n\n查看状态，我这边一直`Pending` 手动囧一个,找到原因,后续补充.\n\n[GettingStartedWithHosts#supported]: http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\n[InstallingRancherServer]: http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\n[中科大docker镜像]: http://mirrors.ustc.edu.cn/help/docker-ce.html\n[加速器Daocloud-业界领先的容器云平台]: https://www.daocloud.io/mirror\n[阿里云docker加速器]: https://cr.console.aliyun.com/#/accelerator\n[DockerHub]: https://hub.docker.com/\n[Rancher-k8s加速安装文档]: https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\n[原生加速中国区Kubernetes安装]: https://www.cnrancher.com/kubernetes-installation/\n","slug":"rancher-k8s","published":1,"updated":"2019-08-16T05:56:21.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtoje2002i24dobclmkav1","content":"<p>目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载<code>gcr.io</code> registry的镜像基本没戏。</p>\n<p>而rancher中国的两篇博文 <a href=\"https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\" target=\"_blank\" rel=\"noopener\">Rancher-k8s加速安装文档</a> 和 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">原生加速中国区Kubernetes安装</a> 我是死活没成功。</p>\n<p>本文主要介绍，如何在国内，使用<code>rancher</code>加速<code>k8s</code>的安装，部分内容也适用于直接原生<code>k8s</code>加速</p>\n<a id=\"more\"></a>\n<p><strong> 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》</strong></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.06.2-ce</td>\n<td>v1.6.10</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker-ce version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg\" alt=\"\"></p>\n<p>复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时<code>kubernetes-dashboard</code>是打不开的，提示 <code>Service unavailable</code></p>\n<p>按照 群内 <code>@天阑-李小威</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg\" alt=\"\"></p>\n<p>给的命令，在<code>cli</code>执行 <code>kubectl --namespace=kube-system get pods</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg\" alt=\"\"></p>\n<p>发现容器一直卡住.</p>\n<p>打开<code>CLI</code> 运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">k8s=(</span><br><span class=\"line\">    heapster</span><br><span class=\"line\">    kube-dns</span><br><span class=\"line\">    kubernetes-dashboard</span><br><span class=\"line\">    monitoring-grafana</span><br><span class=\"line\">    monitoring-influxdb</span><br><span class=\"line\">    tiller-deploy</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;k8s[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> $(kubectl --namespace=kube-system describe deployment <span class=\"variable\">$imageName</span> | grep gcr | awk <span class=\"string\">'&#123;print $2&#125;'</span>) ; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$t</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">gcr.io/kubernetes-helm/tiller:v2.3.0</span><br></pre></td></tr></table></figure></p>\n<p>找一台能翻墙的vps,<code>docker login</code> 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建<code>Dockerfile</code>，里面很简单 <code>FROM gcr.io/google_containers/.....</code> 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">hubName=anjia0532</span><br><span class=\"line\"></span><br><span class=\"line\">images=(</span><br><span class=\"line\">    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">    gcr.io/kubernetes-helm/tiller:v2.3.0</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    imgName=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;imageName&#125;</span> | cut -d<span class=\"string\">\"/\"</span> -f3)</span><br><span class=\"line\">    docker pull <span class=\"variable\">$imageName</span></span><br><span class=\"line\">    docker tag <span class=\"variable\">$imageName</span> <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\">    docker push <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>将<code>k8s-cli</code>中输出的版本，替换到<code>images</code>中，并修改<code>hubName</code>为自己实际的<code>docker hub</code> 账号,运行。</p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">anjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB</span><br><span class=\"line\">anjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB</span><br><span class=\"line\">anjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB</span><br><span class=\"line\">anjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB</span><br><span class=\"line\">anjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB</span><br><span class=\"line\">anjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB</span><br><span class=\"line\">anjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB</span><br><span class=\"line\">anjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>kube-system</code>的镜像地址,打开cli运行,注意将<code>anjia0532</code>替换成<code>docker hub</code>账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl --namespace=kube-system edit deployment  heapster</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kube-dns</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kubernetes-dashboard</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-grafana</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-influxdb</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/google_containers#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  tiller-deploy</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/kubernetes-helm#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br></pre></td></tr></table></figure>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                    READY     STATUS              RESTARTS   AGE</span><br><span class=\"line\">heapster-2407085140-hgddj               0/1       ContainerCreating   0          48m</span><br><span class=\"line\">kube-dns-570853077-hcqzg                0/3       Pending             0          1h</span><br><span class=\"line\">kube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h</span><br><span class=\"line\">kubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m</span><br><span class=\"line\">tiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m</span><br></pre></td></tr></table></figure></p>\n<p>查看状态，我这边一直<code>Pending</code> 手动囧一个,找到原因,后续补充.</p>\n","site":{"data":{}},"excerpt":"<p>目前docker官方默认的编排容器改成k8s，已经让k8s成为事实标准，但是受限于天朝的gfw，导致下载<code>gcr.io</code> registry的镜像基本没戏。</p>\n<p>而rancher中国的两篇博文 <a href=\"https://www.cnrancher.com/rancher-k8s-accelerate-installation-document/\" target=\"_blank\" rel=\"noopener\">Rancher-k8s加速安装文档</a> 和 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">原生加速中国区Kubernetes安装</a> 我是死活没成功。</p>\n<p>本文主要介绍，如何在国内，使用<code>rancher</code>加速<code>k8s</code>的安装，部分内容也适用于直接原生<code>k8s</code>加速</p>","more":"<p><strong> 以下部分看看即可，最新方案，参考《rancher中国区加速安装Kubernetes》</strong></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n<th>ranhcer version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anjia-ubuntu</td>\n<td>192.168.31.83</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.06.2-ce</td>\n<td>v1.6.10</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions\" target=\"_blank\" rel=\"noopener\">Getting Started with Hosts#SUPPORTED DOCKER VERSIONS</a> 安装受支持的<code>docker-ce version</code> (如果国内安装较慢，可以考虑使用<a href=\"http://mirrors.ustc.edu.cn/help/docker-ce.html\" target=\"_blank\" rel=\"noopener\">中科大docker镜像</a> ,或者其他阿里云镜像，腾讯云镜像，清华镜像等)</p>\n<h2 id=\"安装rancher\"><a href=\"#安装rancher\" class=\"headerlink\" title=\"安装rancher\"></a>安装rancher</h2><p>按照 <a href=\"http://rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/\" target=\"_blank\" rel=\"noopener\">Installing Rancher Server</a> 根据实际情况，安装<code>rancher</code> ,建议使用 <a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">加速器 DaoCloud - 业界领先的容器云平台</a> 或者 <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">阿里云docker加速器</a></p>\n<h2 id=\"注册-docker-hub\"><a href=\"#注册-docker-hub\" class=\"headerlink\" title=\"注册 docker hub\"></a>注册 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker hub</a></h2><h2 id=\"安装k8s\"><a href=\"#安装k8s\" class=\"headerlink\" title=\"安装k8s\"></a>安装k8s</h2><p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8bzfdj210b0ms0u6.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuo8conrj217w0pc76q.jpg\" alt=\"\"></p>\n<p>复制出这串命令，在从机上运行，注册一个主机到k8s环境。稍等大约10分钟左右，基础设施全是绿色。此时<code>kubernetes-dashboard</code>是打不开的，提示 <code>Service unavailable</code></p>\n<p>按照 群内 <code>@天阑-李小威</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcus1lvxsj20xn0nf0vu.jpg\" alt=\"\"></p>\n<p>给的命令，在<code>cli</code>执行 <code>kubectl --namespace=kube-system get pods</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flcuujqzo1j20oi07874t.jpg\" alt=\"\"></p>\n<p>发现容器一直卡住.</p>\n<p>打开<code>CLI</code> 运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">k8s=(</span><br><span class=\"line\">    heapster</span><br><span class=\"line\">    kube-dns</span><br><span class=\"line\">    kubernetes-dashboard</span><br><span class=\"line\">    monitoring-grafana</span><br><span class=\"line\">    monitoring-influxdb</span><br><span class=\"line\">    tiller-deploy</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;k8s[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> $(kubectl --namespace=kube-system describe deployment <span class=\"variable\">$imageName</span> | grep gcr | awk <span class=\"string\">'&#123;print $2&#125;'</span>) ; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$t</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">gcr.io/kubernetes-helm/tiller:v2.3.0</span><br></pre></td></tr></table></figure></p>\n<p>找一台能翻墙的vps,<code>docker login</code> 登陆docker hub的账号,如果没有翻墙vps，稍微麻烦点，在github上创建repo，然后创建<code>Dockerfile</code>，里面很简单 <code>FROM gcr.io/google_containers/.....</code> 就行，用docker-hub 添加自动构建库，并在github上给dockerhub分配读权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">hubName=anjia0532</span><br><span class=\"line\"></span><br><span class=\"line\">images=(</span><br><span class=\"line\">    gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5</span><br><span class=\"line\">    gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class=\"line\">    gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class=\"line\">    gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3</span><br><span class=\"line\">    gcr.io/kubernetes-helm/tiller:v2.3.0</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    imgName=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;imageName&#125;</span> | cut -d<span class=\"string\">\"/\"</span> -f3)</span><br><span class=\"line\">    docker pull <span class=\"variable\">$imageName</span></span><br><span class=\"line\">    docker tag <span class=\"variable\">$imageName</span> <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\">    docker push <span class=\"variable\">$hubName</span>/<span class=\"variable\">$imgName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>将<code>k8s-cli</code>中输出的版本，替换到<code>images</code>中，并修改<code>hubName</code>为自己实际的<code>docker hub</code> 账号,运行。</p>\n<p>输出类似<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">anjia0532/k8s-dns-sidecar-amd64                        1.14.5              fed89e8b4248        6 weeks ago         41.8MB</span><br><span class=\"line\">anjia0532/k8s-dns-kube-dns-amd64                       1.14.5              512cd7425a73        6 weeks ago         49.4MB</span><br><span class=\"line\">anjia0532/k8s-dns-dnsmasq-nanny-amd64                  1.14.5              459944ce8cc4        6 weeks ago         41.4MB</span><br><span class=\"line\">anjia0532/heapster-influxdb-amd64                      v1.3.3              577260d221db        2 months ago        12.5MB</span><br><span class=\"line\">anjia0532/kubernetes-dashboard-amd64                   v1.6.1              71dfe833ce74        5 months ago        134MB</span><br><span class=\"line\">anjia0532/tiller                                       v2.3.0              24d2d8f25332        7 months ago        56MB</span><br><span class=\"line\">anjia0532/heapster-grafana-amd64                       v4.0.2              a1956d2a1a16        9 months ago        131MB</span><br><span class=\"line\">anjia0532/heapster-amd64                               v1.3.0-beta.1       4ff6ad0ca64c        9 months ago        101MB</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>kube-system</code>的镜像地址,打开cli运行,注意将<code>anjia0532</code>替换成<code>docker hub</code>账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl --namespace=kube-system edit deployment  heapster</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kube-dns</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  kubernetes-dashboard</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-grafana</span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  monitoring-influxdb</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/google_containers#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl --namespace=kube-system edit deployment  tiller-deploy</span><br><span class=\"line\"><span class=\"comment\">#替换</span></span><br><span class=\"line\">:%s<span class=\"comment\">#gcr.io/kubernetes-helm#anjia0532#g</span></span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">:wq!</span><br></pre></td></tr></table></figure>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl --namespace=kube-system  get pods</span><br><span class=\"line\">NAME                                    READY     STATUS              RESTARTS   AGE</span><br><span class=\"line\">heapster-2407085140-hgddj               0/1       ContainerCreating   0          48m</span><br><span class=\"line\">kube-dns-570853077-hcqzg                0/3       Pending             0          1h</span><br><span class=\"line\">kube-dns-638003847-8vps9                0/3       ContainerCreating   0          2h</span><br><span class=\"line\">kubernetes-dashboard-3888044391-wm3s3   0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-grafana-3847008717-06988     0/1       ContainerCreating   0          14m</span><br><span class=\"line\">monitoring-influxdb-3527312529-n3xxw    0/1       ContainerCreating   0          14m</span><br><span class=\"line\">tiller-deploy-402017509-jkw7n           0/1       ContainerCreating   0          13m</span><br></pre></td></tr></table></figure></p>\n<p>查看状态，我这边一直<code>Pending</code> 手动囧一个,找到原因,后续补充.</p>"},{"title":"【译】单应用跨多k8s集群的部署与管理","date":"2019-02-15T06:08:00.000Z","_content":"\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550147773034-220bf087-600f-47dd-9d24-65ac37f79d65.png#align=left&display=inline&height=371&name=image.png&originHeight=371&originWidth=746&size=38965&width=746)\n\n\n<a name=\"e4568847\"></a>\n## 引言\n近日(春节前后)，Rancher labs宣布，其旗下的开源企业级Kubernetes管理平台Rancher，发布了Rancher 2.2 Preview 2（预览版2），它包含了许多在k8s 集群操作的强大特性\n\n可以通过访问[发布页面](https://rancher.com/products/rancher/2.2/)和[发布说明](https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6)来了解所发布的新功能\n\n本文将介绍其中一个特性：多集群应用(multi-cluster applications)，下面将为您介绍，该特性将如何显著减少您的工作量，并提高多集群操作的可靠性。\n\n<a name=\"86385379\"></a>\n## 概览\n\n假如您有用过k8s，并且有两个及以上的集群运维经验，那么您遇到下面的情况\n\n- 当跨多个可用区部署(AZs)时，应用需要具有更高的容错性\n- 在具有数百个集群的边缘计算场景中，同一个应用需要在多个集群上运行。\n\n在高可靠性的情况下，运维操作人员通常通过将节点从多个可用区纳入到一个集群内来降低单个可用区不可用风险。但是这个方案的问题在于，虽然抵抗了可用区故障，但是防不住集群本身故障，集群故障的可能性高于可用区故障，而且一旦集群出故障后，可能会影响集群中在运行的程序。\n\n另外一种方法是，每个可用区中运行单独的集群，病症每个集群上运行应用程序的副本。相当于每个可用区都有一套k8s集群，但是每个集群手动维护应用程序成本高，又易错。\n\n边缘计算场景跟多可用区集群相同的问题：应用程序手动维护，既耗时，又容易出错，即使运维团队给力，创建了复杂的脚本来部署和升级，但是又多了一个故障点，而且这些脚本也需要升级和维护，并且要求负责的运维人员不仅要编写流程（升级发版流程），还要在脚本失败时能够转成人肉运维。\n\n从[Rancher 2.2 Preview 2](https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6) 开始，Rancher支持在任意数量的k8s集群中同时部署和升级同一应用程序的副本。\n\n同时也扩展了基于Helm软件包管理器的应用商店(Application Catalogs)，在此之前，应用商店仅适用于单个集群,我们在全局级别增加了一个附加功能，权限允许的情况下，可以将应用程序部署到Rancher管理的任意集群上。\n\n有关Rancher 2.2 Preview2的功能的完整演示，请加入 [Rancher2月份的在线MeetUp](https://rancher.com/events/2019/meetup-multi-cluster-apps/) ，届时将提供新功能的演示，并在Q&A环节进行答疑。\n\n下面将演示，在Rancher中如何便捷的管理多集群应用。\n\n<a name=\"0fbb09d3\"></a>\n## 功能快速入门\n\n- 登陆Rancher后，将看到纳管的所有集群的列表，同时在菜单栏新增了一个 `多集群应用(Multi-Cluster Apps)` 的按钮\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210384952-8bbbfcb0-e3d7-42f2-b55f-456323970275.png#align=left&display=inline&height=265&originHeight=568&originWidth=1600&size=0&width=746)\n\n- 单击 `多集群应用` 按钮后，将看到两个按钮，`管理Catalogs` 和 `启动` 。`管理Catalogs` 将跳到 `应用商店(Catalogs)` 的管理页，您开源在其中启用主要Helm repo或者添加其他第三方Helm repo。\n- 单击 `启动` 按钮以启动新应用程序。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210400369-8dd2c530-bffc-484b-8081-310fb69f06b7.png#align=left&display=inline&height=319&originHeight=685&originWidth=1600&size=0&width=746)\n\n- 从显示的可以部署的应用中，选择Grafana(用于演示)。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210419223-c687bf46-93e1-428d-82bc-754a460cdc4b.png#align=left&display=inline&height=298&originHeight=640&originWidth=1600&size=0&width=746)\n\n- 按照要求配置详细信息，使用表单或者直接用提供YAML进行配置，注意，在此处的设置将应用到部署此应用程序的集群中。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210430368-f065ea71-821c-4458-bd14-7457822473bb.png#align=left&display=inline&height=520&originHeight=1115&originWidth=1600&size=0&width=746)\n\n- 在 `配置选项` 下，在 `Target（目标）` 下拉框中选择目标集群的指定项目。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210444391-421fb9d3-d2a5-45ed-89e7-5e4accca5793.png#align=left&display=inline&height=392&originHeight=840&originWidth=1600&size=0&width=746)\n\n- 选择升级策略。此处为了演示，我们将选择 `滚动更新` 并提供每批1个，间隔20秒。此设置可以确保以后升级应用时，一次只更新一个集群，并且每个集群升级操作的间隔为20秒。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210458439-2fd561f6-6ea1-4fdb-bb69-83edb7de2f01.png#align=left&display=inline&height=370&originHeight=794&originWidth=1600&size=0&width=746)\n\n- 如果要调整集群间的差异，可以在 `Answer Overrides` 部分进行设置。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210474235-75246694-14bc-410b-badc-f4bbd81c492d.png#align=left&display=inline&height=270&originHeight=579&originWidth=1600&size=0&width=746)\n\n- 一切准备妥当，点击底部 `启动` ,然后将跳到结果页，显示刚刚已安装的多集群应用(此处是演示用的Grafana)。每个应用将显示当前状态和目标集群以及项目列表。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210490267-a0d665be-27f1-45f6-9988-a2e81c93a3c8.png#align=left&display=inline&height=140&originHeight=301&originWidth=1600&size=0&width=746)\n\n- 当应用程序可以升级时，应用状态将显示 `Upgrade Available` \n- 要启动升级，请单击应用上的菜单按钮（三个点的菜单），然后选择升级\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210508332-34b12a85-bcb1-4706-9795-2f839c8aa88d.png#align=left&display=inline&height=287&originHeight=615&originWidth=1600&size=0&width=746)\n\n- 验证是否已选择 `滚动更新` 选项\n- 更改一些设置，然后点击底部的 `升级` 按钮\n\n打开目标集群的 `工作负载` 选项卡，将看到其中一个状态更改为 `更新` ,此集群中的应用将被更新，然后Rancher将暂停20s（刚刚设置的间隔时间）,然后继续更新下一个集群的应用。\n\n<a name=\"25f9c7fa\"></a>\n## 总结\n多集群应用程序将减少运维团队的工作量，并使跨集群快速可靠的部署和升级应用成为可能。<br />要在实验室或者开发环境中测试这些功能，请安装[最新的Alpha版本](https://rancher.com/docs/rancher/v2.x/en/installation/server-tags/#helm-chart-repositories)，如果有任何反馈意见，请在[Github上提交Issues 或](https://github.com/rancher/rancher/issues)者加入[论坛](https://forums.rancher.com/) 或[Slack](https://slack.rancher.io/) 。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [rancher 博客原文--Introducing Multi-Cluster Applications in Rancher 2.2 Preview 2](https://rancher.com/blog/2019/introducing-multi-cluster-apps/)\n- [Rancher中国微信公众号--革命性新特性 | 单一应用跨多Kubernetes集群的部署与管理](https://mp.weixin.qq.com/s/yfE22D04D98r8e7BAlD3qg)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/rancher2-k8s-multi-cluster-app.md","raw":"\n---\n\ntitle: 【译】单应用跨多k8s集群的部署与管理\n\ndate: 2019-02-15 14:08:00 +0800\n\ntags: [k8s,rancher,rancher2,集群,运维,翻译]\n\ncategories: k8s\n\n---\n\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550147773034-220bf087-600f-47dd-9d24-65ac37f79d65.png#align=left&display=inline&height=371&name=image.png&originHeight=371&originWidth=746&size=38965&width=746)\n\n\n<a name=\"e4568847\"></a>\n## 引言\n近日(春节前后)，Rancher labs宣布，其旗下的开源企业级Kubernetes管理平台Rancher，发布了Rancher 2.2 Preview 2（预览版2），它包含了许多在k8s 集群操作的强大特性\n\n可以通过访问[发布页面](https://rancher.com/products/rancher/2.2/)和[发布说明](https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6)来了解所发布的新功能\n\n本文将介绍其中一个特性：多集群应用(multi-cluster applications)，下面将为您介绍，该特性将如何显著减少您的工作量，并提高多集群操作的可靠性。\n\n<a name=\"86385379\"></a>\n## 概览\n\n假如您有用过k8s，并且有两个及以上的集群运维经验，那么您遇到下面的情况\n\n- 当跨多个可用区部署(AZs)时，应用需要具有更高的容错性\n- 在具有数百个集群的边缘计算场景中，同一个应用需要在多个集群上运行。\n\n在高可靠性的情况下，运维操作人员通常通过将节点从多个可用区纳入到一个集群内来降低单个可用区不可用风险。但是这个方案的问题在于，虽然抵抗了可用区故障，但是防不住集群本身故障，集群故障的可能性高于可用区故障，而且一旦集群出故障后，可能会影响集群中在运行的程序。\n\n另外一种方法是，每个可用区中运行单独的集群，病症每个集群上运行应用程序的副本。相当于每个可用区都有一套k8s集群，但是每个集群手动维护应用程序成本高，又易错。\n\n边缘计算场景跟多可用区集群相同的问题：应用程序手动维护，既耗时，又容易出错，即使运维团队给力，创建了复杂的脚本来部署和升级，但是又多了一个故障点，而且这些脚本也需要升级和维护，并且要求负责的运维人员不仅要编写流程（升级发版流程），还要在脚本失败时能够转成人肉运维。\n\n从[Rancher 2.2 Preview 2](https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6) 开始，Rancher支持在任意数量的k8s集群中同时部署和升级同一应用程序的副本。\n\n同时也扩展了基于Helm软件包管理器的应用商店(Application Catalogs)，在此之前，应用商店仅适用于单个集群,我们在全局级别增加了一个附加功能，权限允许的情况下，可以将应用程序部署到Rancher管理的任意集群上。\n\n有关Rancher 2.2 Preview2的功能的完整演示，请加入 [Rancher2月份的在线MeetUp](https://rancher.com/events/2019/meetup-multi-cluster-apps/) ，届时将提供新功能的演示，并在Q&A环节进行答疑。\n\n下面将演示，在Rancher中如何便捷的管理多集群应用。\n\n<a name=\"0fbb09d3\"></a>\n## 功能快速入门\n\n- 登陆Rancher后，将看到纳管的所有集群的列表，同时在菜单栏新增了一个 `多集群应用(Multi-Cluster Apps)` 的按钮\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210384952-8bbbfcb0-e3d7-42f2-b55f-456323970275.png#align=left&display=inline&height=265&originHeight=568&originWidth=1600&size=0&width=746)\n\n- 单击 `多集群应用` 按钮后，将看到两个按钮，`管理Catalogs` 和 `启动` 。`管理Catalogs` 将跳到 `应用商店(Catalogs)` 的管理页，您开源在其中启用主要Helm repo或者添加其他第三方Helm repo。\n- 单击 `启动` 按钮以启动新应用程序。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210400369-8dd2c530-bffc-484b-8081-310fb69f06b7.png#align=left&display=inline&height=319&originHeight=685&originWidth=1600&size=0&width=746)\n\n- 从显示的可以部署的应用中，选择Grafana(用于演示)。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210419223-c687bf46-93e1-428d-82bc-754a460cdc4b.png#align=left&display=inline&height=298&originHeight=640&originWidth=1600&size=0&width=746)\n\n- 按照要求配置详细信息，使用表单或者直接用提供YAML进行配置，注意，在此处的设置将应用到部署此应用程序的集群中。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210430368-f065ea71-821c-4458-bd14-7457822473bb.png#align=left&display=inline&height=520&originHeight=1115&originWidth=1600&size=0&width=746)\n\n- 在 `配置选项` 下，在 `Target（目标）` 下拉框中选择目标集群的指定项目。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210444391-421fb9d3-d2a5-45ed-89e7-5e4accca5793.png#align=left&display=inline&height=392&originHeight=840&originWidth=1600&size=0&width=746)\n\n- 选择升级策略。此处为了演示，我们将选择 `滚动更新` 并提供每批1个，间隔20秒。此设置可以确保以后升级应用时，一次只更新一个集群，并且每个集群升级操作的间隔为20秒。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210458439-2fd561f6-6ea1-4fdb-bb69-83edb7de2f01.png#align=left&display=inline&height=370&originHeight=794&originWidth=1600&size=0&width=746)\n\n- 如果要调整集群间的差异，可以在 `Answer Overrides` 部分进行设置。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210474235-75246694-14bc-410b-badc-f4bbd81c492d.png#align=left&display=inline&height=270&originHeight=579&originWidth=1600&size=0&width=746)\n\n- 一切准备妥当，点击底部 `启动` ,然后将跳到结果页，显示刚刚已安装的多集群应用(此处是演示用的Grafana)。每个应用将显示当前状态和目标集群以及项目列表。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210490267-a0d665be-27f1-45f6-9988-a2e81c93a3c8.png#align=left&display=inline&height=140&originHeight=301&originWidth=1600&size=0&width=746)\n\n- 当应用程序可以升级时，应用状态将显示 `Upgrade Available` \n- 要启动升级，请单击应用上的菜单按钮（三个点的菜单），然后选择升级\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1550210508332-34b12a85-bcb1-4706-9795-2f839c8aa88d.png#align=left&display=inline&height=287&originHeight=615&originWidth=1600&size=0&width=746)\n\n- 验证是否已选择 `滚动更新` 选项\n- 更改一些设置，然后点击底部的 `升级` 按钮\n\n打开目标集群的 `工作负载` 选项卡，将看到其中一个状态更改为 `更新` ,此集群中的应用将被更新，然后Rancher将暂停20s（刚刚设置的间隔时间）,然后继续更新下一个集群的应用。\n\n<a name=\"25f9c7fa\"></a>\n## 总结\n多集群应用程序将减少运维团队的工作量，并使跨集群快速可靠的部署和升级应用成为可能。<br />要在实验室或者开发环境中测试这些功能，请安装[最新的Alpha版本](https://rancher.com/docs/rancher/v2.x/en/installation/server-tags/#helm-chart-repositories)，如果有任何反馈意见，请在[Github上提交Issues 或](https://github.com/rancher/rancher/issues)者加入[论坛](https://forums.rancher.com/) 或[Slack](https://slack.rancher.io/) 。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [rancher 博客原文--Introducing Multi-Cluster Applications in Rancher 2.2 Preview 2](https://rancher.com/blog/2019/introducing-multi-cluster-apps/)\n- [Rancher中国微信公众号--革命性新特性 | 单一应用跨多Kubernetes集群的部署与管理](https://mp.weixin.qq.com/s/yfE22D04D98r8e7BAlD3qg)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"rancher2-k8s-multi-cluster-app","published":1,"updated":"2019-08-16T06:11:15.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtoje5002m24do7br5s4ht","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550147773034-220bf087-600f-47dd-9d24-65ac37f79d65.png#align=left&amp;display=inline&amp;height=371&amp;name=image.png&amp;originHeight=371&amp;originWidth=746&amp;size=38965&amp;width=746\" alt=\"image.png\"></p>\n<p><a name=\"e4568847\"></a></p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>近日(春节前后)，Rancher labs宣布，其旗下的开源企业级Kubernetes管理平台Rancher，发布了Rancher 2.2 Preview 2（预览版2），它包含了许多在k8s 集群操作的强大特性</p>\n<p>可以通过访问<a href=\"https://rancher.com/products/rancher/2.2/\" target=\"_blank\" rel=\"noopener\">发布页面</a>和<a href=\"https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6\" target=\"_blank\" rel=\"noopener\">发布说明</a>来了解所发布的新功能</p>\n<p>本文将介绍其中一个特性：多集群应用(multi-cluster applications)，下面将为您介绍，该特性将如何显著减少您的工作量，并提高多集群操作的可靠性。</p>\n<p><a name=\"86385379\"></a></p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>假如您有用过k8s，并且有两个及以上的集群运维经验，那么您遇到下面的情况</p>\n<ul>\n<li>当跨多个可用区部署(AZs)时，应用需要具有更高的容错性</li>\n<li>在具有数百个集群的边缘计算场景中，同一个应用需要在多个集群上运行。</li>\n</ul>\n<p>在高可靠性的情况下，运维操作人员通常通过将节点从多个可用区纳入到一个集群内来降低单个可用区不可用风险。但是这个方案的问题在于，虽然抵抗了可用区故障，但是防不住集群本身故障，集群故障的可能性高于可用区故障，而且一旦集群出故障后，可能会影响集群中在运行的程序。</p>\n<p>另外一种方法是，每个可用区中运行单独的集群，病症每个集群上运行应用程序的副本。相当于每个可用区都有一套k8s集群，但是每个集群手动维护应用程序成本高，又易错。</p>\n<p>边缘计算场景跟多可用区集群相同的问题：应用程序手动维护，既耗时，又容易出错，即使运维团队给力，创建了复杂的脚本来部署和升级，但是又多了一个故障点，而且这些脚本也需要升级和维护，并且要求负责的运维人员不仅要编写流程（升级发版流程），还要在脚本失败时能够转成人肉运维。</p>\n<p>从<a href=\"https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6\" target=\"_blank\" rel=\"noopener\">Rancher 2.2 Preview 2</a> 开始，Rancher支持在任意数量的k8s集群中同时部署和升级同一应用程序的副本。</p>\n<p>同时也扩展了基于Helm软件包管理器的应用商店(Application Catalogs)，在此之前，应用商店仅适用于单个集群,我们在全局级别增加了一个附加功能，权限允许的情况下，可以将应用程序部署到Rancher管理的任意集群上。</p>\n<p>有关Rancher 2.2 Preview2的功能的完整演示，请加入 <a href=\"https://rancher.com/events/2019/meetup-multi-cluster-apps/\" target=\"_blank\" rel=\"noopener\">Rancher2月份的在线MeetUp</a> ，届时将提供新功能的演示，并在Q&amp;A环节进行答疑。</p>\n<p>下面将演示，在Rancher中如何便捷的管理多集群应用。</p>\n<p><a name=\"0fbb09d3\"></a></p>\n<h2 id=\"功能快速入门\"><a href=\"#功能快速入门\" class=\"headerlink\" title=\"功能快速入门\"></a>功能快速入门</h2><ul>\n<li>登陆Rancher后，将看到纳管的所有集群的列表，同时在菜单栏新增了一个 <code>多集群应用(Multi-Cluster Apps)</code> 的按钮</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210384952-8bbbfcb0-e3d7-42f2-b55f-456323970275.png#align=left&amp;display=inline&amp;height=265&amp;originHeight=568&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>单击 <code>多集群应用</code> 按钮后，将看到两个按钮，<code>管理Catalogs</code> 和 <code>启动</code> 。<code>管理Catalogs</code> 将跳到 <code>应用商店(Catalogs)</code> 的管理页，您开源在其中启用主要Helm repo或者添加其他第三方Helm repo。</li>\n<li>单击 <code>启动</code> 按钮以启动新应用程序。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210400369-8dd2c530-bffc-484b-8081-310fb69f06b7.png#align=left&amp;display=inline&amp;height=319&amp;originHeight=685&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>从显示的可以部署的应用中，选择Grafana(用于演示)。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210419223-c687bf46-93e1-428d-82bc-754a460cdc4b.png#align=left&amp;display=inline&amp;height=298&amp;originHeight=640&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>按照要求配置详细信息，使用表单或者直接用提供YAML进行配置，注意，在此处的设置将应用到部署此应用程序的集群中。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210430368-f065ea71-821c-4458-bd14-7457822473bb.png#align=left&amp;display=inline&amp;height=520&amp;originHeight=1115&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>在 <code>配置选项</code> 下，在 <code>Target（目标）</code> 下拉框中选择目标集群的指定项目。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210444391-421fb9d3-d2a5-45ed-89e7-5e4accca5793.png#align=left&amp;display=inline&amp;height=392&amp;originHeight=840&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>选择升级策略。此处为了演示，我们将选择 <code>滚动更新</code> 并提供每批1个，间隔20秒。此设置可以确保以后升级应用时，一次只更新一个集群，并且每个集群升级操作的间隔为20秒。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210458439-2fd561f6-6ea1-4fdb-bb69-83edb7de2f01.png#align=left&amp;display=inline&amp;height=370&amp;originHeight=794&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>如果要调整集群间的差异，可以在 <code>Answer Overrides</code> 部分进行设置。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210474235-75246694-14bc-410b-badc-f4bbd81c492d.png#align=left&amp;display=inline&amp;height=270&amp;originHeight=579&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>一切准备妥当，点击底部 <code>启动</code> ,然后将跳到结果页，显示刚刚已安装的多集群应用(此处是演示用的Grafana)。每个应用将显示当前状态和目标集群以及项目列表。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210490267-a0d665be-27f1-45f6-9988-a2e81c93a3c8.png#align=left&amp;display=inline&amp;height=140&amp;originHeight=301&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>当应用程序可以升级时，应用状态将显示 <code>Upgrade Available</code> </li>\n<li>要启动升级，请单击应用上的菜单按钮（三个点的菜单），然后选择升级</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210508332-34b12a85-bcb1-4706-9795-2f839c8aa88d.png#align=left&amp;display=inline&amp;height=287&amp;originHeight=615&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>验证是否已选择 <code>滚动更新</code> 选项</li>\n<li>更改一些设置，然后点击底部的 <code>升级</code> 按钮</li>\n</ul>\n<p>打开目标集群的 <code>工作负载</code> 选项卡，将看到其中一个状态更改为 <code>更新</code> ,此集群中的应用将被更新，然后Rancher将暂停20s（刚刚设置的间隔时间）,然后继续更新下一个集群的应用。</p>\n<p><a name=\"25f9c7fa\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>多集群应用程序将减少运维团队的工作量，并使跨集群快速可靠的部署和升级应用成为可能。<br>要在实验室或者开发环境中测试这些功能，请安装<a href=\"https://rancher.com/docs/rancher/v2.x/en/installation/server-tags/#helm-chart-repositories\" target=\"_blank\" rel=\"noopener\">最新的Alpha版本</a>，如果有任何反馈意见，请在<a href=\"https://github.com/rancher/rancher/issues\" target=\"_blank\" rel=\"noopener\">Github上提交Issues 或</a>者加入<a href=\"https://forums.rancher.com/\" target=\"_blank\" rel=\"noopener\">论坛</a> 或<a href=\"https://slack.rancher.io/\" target=\"_blank\" rel=\"noopener\">Slack</a> 。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://rancher.com/blog/2019/introducing-multi-cluster-apps/\" target=\"_blank\" rel=\"noopener\">rancher 博客原文–Introducing Multi-Cluster Applications in Rancher 2.2 Preview 2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/yfE22D04D98r8e7BAlD3qg\" target=\"_blank\" rel=\"noopener\">Rancher中国微信公众号–革命性新特性 | 单一应用跨多Kubernetes集群的部署与管理</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550147773034-220bf087-600f-47dd-9d24-65ac37f79d65.png#align=left&amp;display=inline&amp;height=371&amp;name=image.png&amp;originHeight=371&amp;originWidth=746&amp;size=38965&amp;width=746\" alt=\"image.png\"></p>\n<p><a name=\"e4568847\"></a></p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>近日(春节前后)，Rancher labs宣布，其旗下的开源企业级Kubernetes管理平台Rancher，发布了Rancher 2.2 Preview 2（预览版2），它包含了许多在k8s 集群操作的强大特性</p>\n<p>可以通过访问<a href=\"https://rancher.com/products/rancher/2.2/\" target=\"_blank\" rel=\"noopener\">发布页面</a>和<a href=\"https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6\" target=\"_blank\" rel=\"noopener\">发布说明</a>来了解所发布的新功能</p>\n<p>本文将介绍其中一个特性：多集群应用(multi-cluster applications)，下面将为您介绍，该特性将如何显著减少您的工作量，并提高多集群操作的可靠性。</p>\n<p><a name=\"86385379\"></a></p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>假如您有用过k8s，并且有两个及以上的集群运维经验，那么您遇到下面的情况</p>\n<ul>\n<li>当跨多个可用区部署(AZs)时，应用需要具有更高的容错性</li>\n<li>在具有数百个集群的边缘计算场景中，同一个应用需要在多个集群上运行。</li>\n</ul>\n<p>在高可靠性的情况下，运维操作人员通常通过将节点从多个可用区纳入到一个集群内来降低单个可用区不可用风险。但是这个方案的问题在于，虽然抵抗了可用区故障，但是防不住集群本身故障，集群故障的可能性高于可用区故障，而且一旦集群出故障后，可能会影响集群中在运行的程序。</p>\n<p>另外一种方法是，每个可用区中运行单独的集群，病症每个集群上运行应用程序的副本。相当于每个可用区都有一套k8s集群，但是每个集群手动维护应用程序成本高，又易错。</p>\n<p>边缘计算场景跟多可用区集群相同的问题：应用程序手动维护，既耗时，又容易出错，即使运维团队给力，创建了复杂的脚本来部署和升级，但是又多了一个故障点，而且这些脚本也需要升级和维护，并且要求负责的运维人员不仅要编写流程（升级发版流程），还要在脚本失败时能够转成人肉运维。</p>\n<p>从<a href=\"https://github.com/rancher/rancher/releases/tag/v2.2.0-alpha6\" target=\"_blank\" rel=\"noopener\">Rancher 2.2 Preview 2</a> 开始，Rancher支持在任意数量的k8s集群中同时部署和升级同一应用程序的副本。</p>\n<p>同时也扩展了基于Helm软件包管理器的应用商店(Application Catalogs)，在此之前，应用商店仅适用于单个集群,我们在全局级别增加了一个附加功能，权限允许的情况下，可以将应用程序部署到Rancher管理的任意集群上。</p>\n<p>有关Rancher 2.2 Preview2的功能的完整演示，请加入 <a href=\"https://rancher.com/events/2019/meetup-multi-cluster-apps/\" target=\"_blank\" rel=\"noopener\">Rancher2月份的在线MeetUp</a> ，届时将提供新功能的演示，并在Q&amp;A环节进行答疑。</p>\n<p>下面将演示，在Rancher中如何便捷的管理多集群应用。</p>\n<p><a name=\"0fbb09d3\"></a></p>\n<h2 id=\"功能快速入门\"><a href=\"#功能快速入门\" class=\"headerlink\" title=\"功能快速入门\"></a>功能快速入门</h2><ul>\n<li>登陆Rancher后，将看到纳管的所有集群的列表，同时在菜单栏新增了一个 <code>多集群应用(Multi-Cluster Apps)</code> 的按钮</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210384952-8bbbfcb0-e3d7-42f2-b55f-456323970275.png#align=left&amp;display=inline&amp;height=265&amp;originHeight=568&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>单击 <code>多集群应用</code> 按钮后，将看到两个按钮，<code>管理Catalogs</code> 和 <code>启动</code> 。<code>管理Catalogs</code> 将跳到 <code>应用商店(Catalogs)</code> 的管理页，您开源在其中启用主要Helm repo或者添加其他第三方Helm repo。</li>\n<li>单击 <code>启动</code> 按钮以启动新应用程序。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210400369-8dd2c530-bffc-484b-8081-310fb69f06b7.png#align=left&amp;display=inline&amp;height=319&amp;originHeight=685&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>从显示的可以部署的应用中，选择Grafana(用于演示)。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210419223-c687bf46-93e1-428d-82bc-754a460cdc4b.png#align=left&amp;display=inline&amp;height=298&amp;originHeight=640&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>按照要求配置详细信息，使用表单或者直接用提供YAML进行配置，注意，在此处的设置将应用到部署此应用程序的集群中。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210430368-f065ea71-821c-4458-bd14-7457822473bb.png#align=left&amp;display=inline&amp;height=520&amp;originHeight=1115&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>在 <code>配置选项</code> 下，在 <code>Target（目标）</code> 下拉框中选择目标集群的指定项目。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210444391-421fb9d3-d2a5-45ed-89e7-5e4accca5793.png#align=left&amp;display=inline&amp;height=392&amp;originHeight=840&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>选择升级策略。此处为了演示，我们将选择 <code>滚动更新</code> 并提供每批1个，间隔20秒。此设置可以确保以后升级应用时，一次只更新一个集群，并且每个集群升级操作的间隔为20秒。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210458439-2fd561f6-6ea1-4fdb-bb69-83edb7de2f01.png#align=left&amp;display=inline&amp;height=370&amp;originHeight=794&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>如果要调整集群间的差异，可以在 <code>Answer Overrides</code> 部分进行设置。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210474235-75246694-14bc-410b-badc-f4bbd81c492d.png#align=left&amp;display=inline&amp;height=270&amp;originHeight=579&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>一切准备妥当，点击底部 <code>启动</code> ,然后将跳到结果页，显示刚刚已安装的多集群应用(此处是演示用的Grafana)。每个应用将显示当前状态和目标集群以及项目列表。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210490267-a0d665be-27f1-45f6-9988-a2e81c93a3c8.png#align=left&amp;display=inline&amp;height=140&amp;originHeight=301&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>当应用程序可以升级时，应用状态将显示 <code>Upgrade Available</code> </li>\n<li>要启动升级，请单击应用上的菜单按钮（三个点的菜单），然后选择升级</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550210508332-34b12a85-bcb1-4706-9795-2f839c8aa88d.png#align=left&amp;display=inline&amp;height=287&amp;originHeight=615&amp;originWidth=1600&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>验证是否已选择 <code>滚动更新</code> 选项</li>\n<li>更改一些设置，然后点击底部的 <code>升级</code> 按钮</li>\n</ul>\n<p>打开目标集群的 <code>工作负载</code> 选项卡，将看到其中一个状态更改为 <code>更新</code> ,此集群中的应用将被更新，然后Rancher将暂停20s（刚刚设置的间隔时间）,然后继续更新下一个集群的应用。</p>\n<p><a name=\"25f9c7fa\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>多集群应用程序将减少运维团队的工作量，并使跨集群快速可靠的部署和升级应用成为可能。<br>要在实验室或者开发环境中测试这些功能，请安装<a href=\"https://rancher.com/docs/rancher/v2.x/en/installation/server-tags/#helm-chart-repositories\" target=\"_blank\" rel=\"noopener\">最新的Alpha版本</a>，如果有任何反馈意见，请在<a href=\"https://github.com/rancher/rancher/issues\" target=\"_blank\" rel=\"noopener\">Github上提交Issues 或</a>者加入<a href=\"https://forums.rancher.com/\" target=\"_blank\" rel=\"noopener\">论坛</a> 或<a href=\"https://slack.rancher.io/\" target=\"_blank\" rel=\"noopener\">Slack</a> 。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://rancher.com/blog/2019/introducing-multi-cluster-apps/\" target=\"_blank\" rel=\"noopener\">rancher 博客原文–Introducing Multi-Cluster Applications in Rancher 2.2 Preview 2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/yfE22D04D98r8e7BAlD3qg\" target=\"_blank\" rel=\"noopener\">Rancher中国微信公众号–革命性新特性 | 单一应用跨多Kubernetes集群的部署与管理</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"019-批量修改redis TTL和批量删除key","date":"2019-05-10T00:37:14.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第19篇，定个小目标999，每周最少2篇。\n\n\n如果因为历史原因，导致redis里存在无用且没有设置ttl的key，会造成浪费。本文主要讲如何在不阻塞redis的情况下批量修改redis的ttl和使用通配符删除key。\n\n<!-- more -->\n\n<a name=\"s9rs2\"></a>\n### 通配符删除key\n\n```\nredis-cli [-a password] [-h localhost] [-p 6379] --scan --pattern pattern* | xargs redis-cli [-a password] [-h localhost] [-p 6379] del\n```\n其中 `[]` 包裹的都是可选项\n\n- -p 端口\n- -h 是redis主机\n- -a 是密码\n- pattern* 是通配符\n> SCAN,SSCAN,HSCAN,ZSCAN四个命令都支持增量式迭代， 它们每次执行都只会返回少量元素， 所以这些命令可以用于生产环境， 而不会出现像 KEYS 命令、 SMEMBERS 命令带来的问题 —— 当 KEYS 命令被用于处理一个大的数据库时， 又或者 SMEMBERS 命令被用于处理一个大的集合键时， 它们可能会阻塞服务器达数秒之久。\n\n参考资料  [redis 命令 ](http://doc.redisfans.com/key/scan.html)[SCAN](http://doc.redisfans.com/key/scan.html) \n\n<a name=\"hG47Y\"></a>\n### 批量打印或者修改TTL\n使用方式\n\n```\n$ pip install redis\n$ python keys.py --help\n\nusage: keys.py [-h] [-p PORT] [-d DB_LIST] [--host HOST] [--password PASSWORD]\n               [--expire EXPIRE] [--random_upper RANDOM_UPPER]\n               [--max_ttl MAX_TTL]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PORT               port of redis\n  -d DB_LIST            ex : -d all / -d 1,2,3,4\n  --host HOST           ex : --host 127.0.0.1\n  --password PASSWORD   ex : --password password\n  --expire EXPIRE       unit: sec ,ex 1 days = 86400 sec: --expire 86400\n  --random_upper RANDOM_UPPER\n                        unit: sec ,ex 1 mins = 60 sec: --random_upper 60\n  --max_ttl MAX_TTL     unit: sec ,ex 1 mins = 60 sec: --max_ttl 60\n\n```\n\n```python\n# encoding: utf-8\n\"\"\"\nauthor: yangyi@youzan.com\ntime: 2018/4/26 下午4:34\nfunc: 获取数据库中没有设置ttl的 key\n\nauthor: anjia0532@gmail.com\ntime: 2019/05/10 上午8:19\ndesc: 增加cli选项，增加批量修改ttl功能\n\"\"\"\nimport redis\nimport argparse\nimport time\nimport sys, os\nimport random\n\nclass ShowProcess:\n    \n    \"\"\"\n    显示处理进度的类\n    调用该类相关函数即可实现处理进度的显示\n    \"\"\"\n    i = 0 # 当前的处理进度\n    max_steps = 0 # 总共需要处理的次数\n    max_arrow = 50 # 进度条的长度\n\n    # 初始化函数，需要知道总共的处理次数\n    def __init__(self, max_steps):\n        self.max_steps = max_steps\n        self.i = 0\n\n    # 显示函数，根据当前的处理进度i显示进度\n    # 效果为[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]100.00%\n    def show_process(self, i = None):\n        if i is not None:\n            self.i = i\n        else:\n            self.i += 1\n        num_arrow = int(self.i * self.max_arrow / self.max_steps) # 计算显示多少个'>'\n        num_line = self.max_arrow - num_arrow # 计算显示多少个'-'\n        percent = self.i * 100.0 / self.max_steps # 计算完成进度，格式为xx.xx%\n        process_bar = '[' + '>' * num_arrow + ' ' * num_line + ']'\\\n                      + '%.2f' % percent + '%' + '\\r' # 带输出的字符串，'\\r'表示不换行回到最左边\n        sys.stdout.write(process_bar) # 这两句打印字符到终端\n        sys.stdout.flush()\n\n    def close(self, words='done'):\n        print(words)\n        self.i = 0\n\n\ndef check_ttl(redis_conn, dbindex,max_ttl,random_upper,expire):\n    start_time = time.time()\n    changed_ttl_num = 0\n    keys_num = redis_conn.dbsize()\n    print( \"there are {num} keys in db {index} \".format(num=keys_num, index=dbindex))\n    process_bar = ShowProcess(keys_num)\n    for key in redis_conn.scan_iter(count=1000):\n        process_bar.show_process()\n        ttl = redis_conn.ttl(key)\n        if ttl > max_ttl or ttl == -1:\n            changed_ttl_num += 1\n            redis_conn.expire(key, expire + random.randint(0, random_upper))\n        else:\n            continue\n\n    process_bar.close()\n    print(\"cost time(s):\", time.time() - start_time)\n    print(\"changed ttl keys number:\", changed_ttl_num)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    \n    parser.add_argument('--port', type=int, dest='port', action='store', default=6379,help='port of redis ')\n    parser.add_argument('--db_list', type=str, dest='db_list', action='store', default='0',\n                        help='ex : -d all / -d 1,2,3,4 ')\n    parser.add_argument('--host', type=str, dest='host', action='store', default='127.0.0.1',\n                        help='ex : --host 127.0.0.1 ')\n    parser.add_argument('--password', type=str, dest='password', action='store', default='',\n                        help='ex : --password password ')\n    parser.add_argument('--expire', type=int, dest='expire', action='store', default='0',\n                        help='unit: sec ,ex 1 days = 86400 sec: --expire 86400 ')\n    parser.add_argument('--random_upper', type=int, dest='random_upper', action='store', default='60',\n                        help='unit: sec ,ex 1 mins = 60 sec: --random_upper 60 ')\n    parser.add_argument('--max_ttl', type=int, dest='max_ttl', action='store', default='60',\n                        help='unit: sec ,ex 1 mins = 60 sec: --max_ttl 60 ')\n    \n    args = parser.parse_args()\n    port = args.port\n    expire = args.expire\n    random_upper = args.random_upper\n    max_ttl = args.max_ttl\n    host = args.host\n    password = args.password\n    \n    if args.db_list == 'all':\n        db_list = [i for i in range(0, 16)]\n    else:\n        db_list = [int(i) for i in args.db_list.split(',')]\n    for index in db_list:\n        try:\n            pool = redis.ConnectionPool(host=host, port=port, db=index,password=password)\n            r = redis.StrictRedis(connection_pool=pool)\n        except redis.exceptions.ConnectionError as e:\n            print(e)\n        else:\n            check_ttl(r, index,max_ttl,random_upper,expire)\nif __name__ == '__main__':\n    main()\n\n```\n\n参考资料  [【Redis】获取没有设置ttl的key脚本](http://blog.itpub.net/22664653/viewspace-2153419/)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","source":"_posts/redis-batch-changed-ttl.md","raw":"\n---\n\ntitle: 019-批量修改redis TTL和批量删除key\n\ndate: 2019-05-10 08:37:14 +0800\n\ntags: [redis,python]\n\ncategories: redis\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第19篇，定个小目标999，每周最少2篇。\n\n\n如果因为历史原因，导致redis里存在无用且没有设置ttl的key，会造成浪费。本文主要讲如何在不阻塞redis的情况下批量修改redis的ttl和使用通配符删除key。\n\n<!-- more -->\n\n<a name=\"s9rs2\"></a>\n### 通配符删除key\n\n```\nredis-cli [-a password] [-h localhost] [-p 6379] --scan --pattern pattern* | xargs redis-cli [-a password] [-h localhost] [-p 6379] del\n```\n其中 `[]` 包裹的都是可选项\n\n- -p 端口\n- -h 是redis主机\n- -a 是密码\n- pattern* 是通配符\n> SCAN,SSCAN,HSCAN,ZSCAN四个命令都支持增量式迭代， 它们每次执行都只会返回少量元素， 所以这些命令可以用于生产环境， 而不会出现像 KEYS 命令、 SMEMBERS 命令带来的问题 —— 当 KEYS 命令被用于处理一个大的数据库时， 又或者 SMEMBERS 命令被用于处理一个大的集合键时， 它们可能会阻塞服务器达数秒之久。\n\n参考资料  [redis 命令 ](http://doc.redisfans.com/key/scan.html)[SCAN](http://doc.redisfans.com/key/scan.html) \n\n<a name=\"hG47Y\"></a>\n### 批量打印或者修改TTL\n使用方式\n\n```\n$ pip install redis\n$ python keys.py --help\n\nusage: keys.py [-h] [-p PORT] [-d DB_LIST] [--host HOST] [--password PASSWORD]\n               [--expire EXPIRE] [--random_upper RANDOM_UPPER]\n               [--max_ttl MAX_TTL]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PORT               port of redis\n  -d DB_LIST            ex : -d all / -d 1,2,3,4\n  --host HOST           ex : --host 127.0.0.1\n  --password PASSWORD   ex : --password password\n  --expire EXPIRE       unit: sec ,ex 1 days = 86400 sec: --expire 86400\n  --random_upper RANDOM_UPPER\n                        unit: sec ,ex 1 mins = 60 sec: --random_upper 60\n  --max_ttl MAX_TTL     unit: sec ,ex 1 mins = 60 sec: --max_ttl 60\n\n```\n\n```python\n# encoding: utf-8\n\"\"\"\nauthor: yangyi@youzan.com\ntime: 2018/4/26 下午4:34\nfunc: 获取数据库中没有设置ttl的 key\n\nauthor: anjia0532@gmail.com\ntime: 2019/05/10 上午8:19\ndesc: 增加cli选项，增加批量修改ttl功能\n\"\"\"\nimport redis\nimport argparse\nimport time\nimport sys, os\nimport random\n\nclass ShowProcess:\n    \n    \"\"\"\n    显示处理进度的类\n    调用该类相关函数即可实现处理进度的显示\n    \"\"\"\n    i = 0 # 当前的处理进度\n    max_steps = 0 # 总共需要处理的次数\n    max_arrow = 50 # 进度条的长度\n\n    # 初始化函数，需要知道总共的处理次数\n    def __init__(self, max_steps):\n        self.max_steps = max_steps\n        self.i = 0\n\n    # 显示函数，根据当前的处理进度i显示进度\n    # 效果为[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]100.00%\n    def show_process(self, i = None):\n        if i is not None:\n            self.i = i\n        else:\n            self.i += 1\n        num_arrow = int(self.i * self.max_arrow / self.max_steps) # 计算显示多少个'>'\n        num_line = self.max_arrow - num_arrow # 计算显示多少个'-'\n        percent = self.i * 100.0 / self.max_steps # 计算完成进度，格式为xx.xx%\n        process_bar = '[' + '>' * num_arrow + ' ' * num_line + ']'\\\n                      + '%.2f' % percent + '%' + '\\r' # 带输出的字符串，'\\r'表示不换行回到最左边\n        sys.stdout.write(process_bar) # 这两句打印字符到终端\n        sys.stdout.flush()\n\n    def close(self, words='done'):\n        print(words)\n        self.i = 0\n\n\ndef check_ttl(redis_conn, dbindex,max_ttl,random_upper,expire):\n    start_time = time.time()\n    changed_ttl_num = 0\n    keys_num = redis_conn.dbsize()\n    print( \"there are {num} keys in db {index} \".format(num=keys_num, index=dbindex))\n    process_bar = ShowProcess(keys_num)\n    for key in redis_conn.scan_iter(count=1000):\n        process_bar.show_process()\n        ttl = redis_conn.ttl(key)\n        if ttl > max_ttl or ttl == -1:\n            changed_ttl_num += 1\n            redis_conn.expire(key, expire + random.randint(0, random_upper))\n        else:\n            continue\n\n    process_bar.close()\n    print(\"cost time(s):\", time.time() - start_time)\n    print(\"changed ttl keys number:\", changed_ttl_num)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    \n    parser.add_argument('--port', type=int, dest='port', action='store', default=6379,help='port of redis ')\n    parser.add_argument('--db_list', type=str, dest='db_list', action='store', default='0',\n                        help='ex : -d all / -d 1,2,3,4 ')\n    parser.add_argument('--host', type=str, dest='host', action='store', default='127.0.0.1',\n                        help='ex : --host 127.0.0.1 ')\n    parser.add_argument('--password', type=str, dest='password', action='store', default='',\n                        help='ex : --password password ')\n    parser.add_argument('--expire', type=int, dest='expire', action='store', default='0',\n                        help='unit: sec ,ex 1 days = 86400 sec: --expire 86400 ')\n    parser.add_argument('--random_upper', type=int, dest='random_upper', action='store', default='60',\n                        help='unit: sec ,ex 1 mins = 60 sec: --random_upper 60 ')\n    parser.add_argument('--max_ttl', type=int, dest='max_ttl', action='store', default='60',\n                        help='unit: sec ,ex 1 mins = 60 sec: --max_ttl 60 ')\n    \n    args = parser.parse_args()\n    port = args.port\n    expire = args.expire\n    random_upper = args.random_upper\n    max_ttl = args.max_ttl\n    host = args.host\n    password = args.password\n    \n    if args.db_list == 'all':\n        db_list = [i for i in range(0, 16)]\n    else:\n        db_list = [int(i) for i in args.db_list.split(',')]\n    for index in db_list:\n        try:\n            pool = redis.ConnectionPool(host=host, port=port, db=index,password=password)\n            r = redis.StrictRedis(connection_pool=pool)\n        except redis.exceptions.ConnectionError as e:\n            print(e)\n        else:\n            check_ttl(r, index,max_ttl,random_upper,expire)\nif __name__ == '__main__':\n    main()\n\n```\n\n参考资料  [【Redis】获取没有设置ttl的key脚本](http://blog.itpub.net/22664653/viewspace-2153419/)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","slug":"redis-batch-changed-ttl","published":1,"updated":"2019-08-16T06:11:15.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtoje7002p24docdbqd1kv","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第19篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>如果因为历史原因，导致redis里存在无用且没有设置ttl的key，会造成浪费。本文主要讲如何在不阻塞redis的情况下批量修改redis的ttl和使用通配符删除key。</p>\n<a id=\"more\"></a>\n<p><a name=\"s9rs2\"></a></p>\n<h3 id=\"通配符删除key\"><a href=\"#通配符删除key\" class=\"headerlink\" title=\"通配符删除key\"></a>通配符删除key</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli [-a password] [-h localhost] [-p 6379] --scan --pattern pattern* | xargs redis-cli [-a password] [-h localhost] [-p 6379] del</span><br></pre></td></tr></table></figure>\n<p>其中 <code>[]</code> 包裹的都是可选项</p>\n<ul>\n<li>-p 端口</li>\n<li>-h 是redis主机</li>\n<li>-a 是密码</li>\n<li>pattern* 是通配符<blockquote>\n<p>SCAN,SSCAN,HSCAN,ZSCAN四个命令都支持增量式迭代， 它们每次执行都只会返回少量元素， 所以这些命令可以用于生产环境， 而不会出现像 KEYS 命令、 SMEMBERS 命令带来的问题 —— 当 KEYS 命令被用于处理一个大的数据库时， 又或者 SMEMBERS 命令被用于处理一个大的集合键时， 它们可能会阻塞服务器达数秒之久。</p>\n</blockquote>\n</li>\n</ul>\n<p>参考资料  <a href=\"http://doc.redisfans.com/key/scan.html\" target=\"_blank\" rel=\"noopener\">redis 命令 </a><a href=\"http://doc.redisfans.com/key/scan.html\" target=\"_blank\" rel=\"noopener\">SCAN</a> </p>\n<p><a name=\"hG47Y\"></a></p>\n<h3 id=\"批量打印或者修改TTL\"><a href=\"#批量打印或者修改TTL\" class=\"headerlink\" title=\"批量打印或者修改TTL\"></a>批量打印或者修改TTL</h3><p>使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip install redis</span><br><span class=\"line\">$ python keys.py --help</span><br><span class=\"line\"></span><br><span class=\"line\">usage: keys.py [-h] [-p PORT] [-d DB_LIST] [--host HOST] [--password PASSWORD]</span><br><span class=\"line\">               [--expire EXPIRE] [--random_upper RANDOM_UPPER]</span><br><span class=\"line\">               [--max_ttl MAX_TTL]</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  -p PORT               port of redis</span><br><span class=\"line\">  -d DB_LIST            ex : -d all / -d 1,2,3,4</span><br><span class=\"line\">  --host HOST           ex : --host 127.0.0.1</span><br><span class=\"line\">  --password PASSWORD   ex : --password password</span><br><span class=\"line\">  --expire EXPIRE       unit: sec ,ex 1 days = 86400 sec: --expire 86400</span><br><span class=\"line\">  --random_upper RANDOM_UPPER</span><br><span class=\"line\">                        unit: sec ,ex 1 mins = 60 sec: --random_upper 60</span><br><span class=\"line\">  --max_ttl MAX_TTL     unit: sec ,ex 1 mins = 60 sec: --max_ttl 60</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">author: yangyi@youzan.com</span></span><br><span class=\"line\"><span class=\"string\">time: 2018/4/26 下午4:34</span></span><br><span class=\"line\"><span class=\"string\">func: 获取数据库中没有设置ttl的 key</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">author: anjia0532@gmail.com</span></span><br><span class=\"line\"><span class=\"string\">time: 2019/05/10 上午8:19</span></span><br><span class=\"line\"><span class=\"string\">desc: 增加cli选项，增加批量修改ttl功能</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShowProcess</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    显示处理进度的类</span></span><br><span class=\"line\"><span class=\"string\">    调用该类相关函数即可实现处理进度的显示</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span> <span class=\"comment\"># 当前的处理进度</span></span><br><span class=\"line\">    max_steps = <span class=\"number\">0</span> <span class=\"comment\"># 总共需要处理的次数</span></span><br><span class=\"line\">    max_arrow = <span class=\"number\">50</span> <span class=\"comment\"># 进度条的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化函数，需要知道总共的处理次数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max_steps)</span>:</span></span><br><span class=\"line\">        self.max_steps = max_steps</span><br><span class=\"line\">        self.i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显示函数，根据当前的处理进度i显示进度</span></span><br><span class=\"line\">    <span class=\"comment\"># 效果为[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]100.00%</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_process</span><span class=\"params\">(self, i = None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.i = i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.i += <span class=\"number\">1</span></span><br><span class=\"line\">        num_arrow = int(self.i * self.max_arrow / self.max_steps) <span class=\"comment\"># 计算显示多少个'&gt;'</span></span><br><span class=\"line\">        num_line = self.max_arrow - num_arrow <span class=\"comment\"># 计算显示多少个'-'</span></span><br><span class=\"line\">        percent = self.i * <span class=\"number\">100.0</span> / self.max_steps <span class=\"comment\"># 计算完成进度，格式为xx.xx%</span></span><br><span class=\"line\">        process_bar = <span class=\"string\">'['</span> + <span class=\"string\">'&gt;'</span> * num_arrow + <span class=\"string\">' '</span> * num_line + <span class=\"string\">']'</span>\\</span><br><span class=\"line\">                      + <span class=\"string\">'%.2f'</span> % percent + <span class=\"string\">'%'</span> + <span class=\"string\">'\\r'</span> <span class=\"comment\"># 带输出的字符串，'\\r'表示不换行回到最左边</span></span><br><span class=\"line\">        sys.stdout.write(process_bar) <span class=\"comment\"># 这两句打印字符到终端</span></span><br><span class=\"line\">        sys.stdout.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self, words=<span class=\"string\">'done'</span>)</span>:</span></span><br><span class=\"line\">        print(words)</span><br><span class=\"line\">        self.i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_ttl</span><span class=\"params\">(redis_conn, dbindex,max_ttl,random_upper,expire)</span>:</span></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    changed_ttl_num = <span class=\"number\">0</span></span><br><span class=\"line\">    keys_num = redis_conn.dbsize()</span><br><span class=\"line\">    print( <span class=\"string\">\"there are &#123;num&#125; keys in db &#123;index&#125; \"</span>.format(num=keys_num, index=dbindex))</span><br><span class=\"line\">    process_bar = ShowProcess(keys_num)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> redis_conn.scan_iter(count=<span class=\"number\">1000</span>):</span><br><span class=\"line\">        process_bar.show_process()</span><br><span class=\"line\">        ttl = redis_conn.ttl(key)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ttl &gt; max_ttl <span class=\"keyword\">or</span> ttl == <span class=\"number\">-1</span>:</span><br><span class=\"line\">            changed_ttl_num += <span class=\"number\">1</span></span><br><span class=\"line\">            redis_conn.expire(key, expire + random.randint(<span class=\"number\">0</span>, random_upper))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    process_bar.close()</span><br><span class=\"line\">    print(<span class=\"string\">\"cost time(s):\"</span>, time.time() - start_time)</span><br><span class=\"line\">    print(<span class=\"string\">\"changed ttl keys number:\"</span>, changed_ttl_num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parser = argparse.ArgumentParser()</span><br><span class=\"line\">    </span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--port'</span>, type=int, dest=<span class=\"string\">'port'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"number\">6379</span>,help=<span class=\"string\">'port of redis '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--db_list'</span>, type=str, dest=<span class=\"string\">'db_list'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'0'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'ex : -d all / -d 1,2,3,4 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--host'</span>, type=str, dest=<span class=\"string\">'host'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'ex : --host 127.0.0.1 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--password'</span>, type=str, dest=<span class=\"string\">'password'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">''</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'ex : --password password '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--expire'</span>, type=int, dest=<span class=\"string\">'expire'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'0'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'unit: sec ,ex 1 days = 86400 sec: --expire 86400 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--random_upper'</span>, type=int, dest=<span class=\"string\">'random_upper'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'60'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'unit: sec ,ex 1 mins = 60 sec: --random_upper 60 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--max_ttl'</span>, type=int, dest=<span class=\"string\">'max_ttl'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'60'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'unit: sec ,ex 1 mins = 60 sec: --max_ttl 60 '</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    port = args.port</span><br><span class=\"line\">    expire = args.expire</span><br><span class=\"line\">    random_upper = args.random_upper</span><br><span class=\"line\">    max_ttl = args.max_ttl</span><br><span class=\"line\">    host = args.host</span><br><span class=\"line\">    password = args.password</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.db_list == <span class=\"string\">'all'</span>:</span><br><span class=\"line\">        db_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">16</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        db_list = [int(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> args.db_list.split(<span class=\"string\">','</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> db_list:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            pool = redis.ConnectionPool(host=host, port=port, db=index,password=password)</span><br><span class=\"line\">            r = redis.StrictRedis(connection_pool=pool)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> redis.exceptions.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            check_ttl(r, index,max_ttl,random_upper,expire)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>参考资料  <a href=\"http://blog.itpub.net/22664653/viewspace-2153419/\" target=\"_blank\" rel=\"noopener\">【Redis】获取没有设置ttl的key脚本</a></p>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第19篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>如果因为历史原因，导致redis里存在无用且没有设置ttl的key，会造成浪费。本文主要讲如何在不阻塞redis的情况下批量修改redis的ttl和使用通配符删除key。</p>","more":"<p><a name=\"s9rs2\"></a></p>\n<h3 id=\"通配符删除key\"><a href=\"#通配符删除key\" class=\"headerlink\" title=\"通配符删除key\"></a>通配符删除key</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli [-a password] [-h localhost] [-p 6379] --scan --pattern pattern* | xargs redis-cli [-a password] [-h localhost] [-p 6379] del</span><br></pre></td></tr></table></figure>\n<p>其中 <code>[]</code> 包裹的都是可选项</p>\n<ul>\n<li>-p 端口</li>\n<li>-h 是redis主机</li>\n<li>-a 是密码</li>\n<li>pattern* 是通配符<blockquote>\n<p>SCAN,SSCAN,HSCAN,ZSCAN四个命令都支持增量式迭代， 它们每次执行都只会返回少量元素， 所以这些命令可以用于生产环境， 而不会出现像 KEYS 命令、 SMEMBERS 命令带来的问题 —— 当 KEYS 命令被用于处理一个大的数据库时， 又或者 SMEMBERS 命令被用于处理一个大的集合键时， 它们可能会阻塞服务器达数秒之久。</p>\n</blockquote>\n</li>\n</ul>\n<p>参考资料  <a href=\"http://doc.redisfans.com/key/scan.html\" target=\"_blank\" rel=\"noopener\">redis 命令 </a><a href=\"http://doc.redisfans.com/key/scan.html\" target=\"_blank\" rel=\"noopener\">SCAN</a> </p>\n<p><a name=\"hG47Y\"></a></p>\n<h3 id=\"批量打印或者修改TTL\"><a href=\"#批量打印或者修改TTL\" class=\"headerlink\" title=\"批量打印或者修改TTL\"></a>批量打印或者修改TTL</h3><p>使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip install redis</span><br><span class=\"line\">$ python keys.py --help</span><br><span class=\"line\"></span><br><span class=\"line\">usage: keys.py [-h] [-p PORT] [-d DB_LIST] [--host HOST] [--password PASSWORD]</span><br><span class=\"line\">               [--expire EXPIRE] [--random_upper RANDOM_UPPER]</span><br><span class=\"line\">               [--max_ttl MAX_TTL]</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  -p PORT               port of redis</span><br><span class=\"line\">  -d DB_LIST            ex : -d all / -d 1,2,3,4</span><br><span class=\"line\">  --host HOST           ex : --host 127.0.0.1</span><br><span class=\"line\">  --password PASSWORD   ex : --password password</span><br><span class=\"line\">  --expire EXPIRE       unit: sec ,ex 1 days = 86400 sec: --expire 86400</span><br><span class=\"line\">  --random_upper RANDOM_UPPER</span><br><span class=\"line\">                        unit: sec ,ex 1 mins = 60 sec: --random_upper 60</span><br><span class=\"line\">  --max_ttl MAX_TTL     unit: sec ,ex 1 mins = 60 sec: --max_ttl 60</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">author: yangyi@youzan.com</span></span><br><span class=\"line\"><span class=\"string\">time: 2018/4/26 下午4:34</span></span><br><span class=\"line\"><span class=\"string\">func: 获取数据库中没有设置ttl的 key</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">author: anjia0532@gmail.com</span></span><br><span class=\"line\"><span class=\"string\">time: 2019/05/10 上午8:19</span></span><br><span class=\"line\"><span class=\"string\">desc: 增加cli选项，增加批量修改ttl功能</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShowProcess</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    显示处理进度的类</span></span><br><span class=\"line\"><span class=\"string\">    调用该类相关函数即可实现处理进度的显示</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span> <span class=\"comment\"># 当前的处理进度</span></span><br><span class=\"line\">    max_steps = <span class=\"number\">0</span> <span class=\"comment\"># 总共需要处理的次数</span></span><br><span class=\"line\">    max_arrow = <span class=\"number\">50</span> <span class=\"comment\"># 进度条的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化函数，需要知道总共的处理次数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max_steps)</span>:</span></span><br><span class=\"line\">        self.max_steps = max_steps</span><br><span class=\"line\">        self.i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显示函数，根据当前的处理进度i显示进度</span></span><br><span class=\"line\">    <span class=\"comment\"># 效果为[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]100.00%</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_process</span><span class=\"params\">(self, i = None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.i = i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.i += <span class=\"number\">1</span></span><br><span class=\"line\">        num_arrow = int(self.i * self.max_arrow / self.max_steps) <span class=\"comment\"># 计算显示多少个'&gt;'</span></span><br><span class=\"line\">        num_line = self.max_arrow - num_arrow <span class=\"comment\"># 计算显示多少个'-'</span></span><br><span class=\"line\">        percent = self.i * <span class=\"number\">100.0</span> / self.max_steps <span class=\"comment\"># 计算完成进度，格式为xx.xx%</span></span><br><span class=\"line\">        process_bar = <span class=\"string\">'['</span> + <span class=\"string\">'&gt;'</span> * num_arrow + <span class=\"string\">' '</span> * num_line + <span class=\"string\">']'</span>\\</span><br><span class=\"line\">                      + <span class=\"string\">'%.2f'</span> % percent + <span class=\"string\">'%'</span> + <span class=\"string\">'\\r'</span> <span class=\"comment\"># 带输出的字符串，'\\r'表示不换行回到最左边</span></span><br><span class=\"line\">        sys.stdout.write(process_bar) <span class=\"comment\"># 这两句打印字符到终端</span></span><br><span class=\"line\">        sys.stdout.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self, words=<span class=\"string\">'done'</span>)</span>:</span></span><br><span class=\"line\">        print(words)</span><br><span class=\"line\">        self.i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_ttl</span><span class=\"params\">(redis_conn, dbindex,max_ttl,random_upper,expire)</span>:</span></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    changed_ttl_num = <span class=\"number\">0</span></span><br><span class=\"line\">    keys_num = redis_conn.dbsize()</span><br><span class=\"line\">    print( <span class=\"string\">\"there are &#123;num&#125; keys in db &#123;index&#125; \"</span>.format(num=keys_num, index=dbindex))</span><br><span class=\"line\">    process_bar = ShowProcess(keys_num)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> redis_conn.scan_iter(count=<span class=\"number\">1000</span>):</span><br><span class=\"line\">        process_bar.show_process()</span><br><span class=\"line\">        ttl = redis_conn.ttl(key)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ttl &gt; max_ttl <span class=\"keyword\">or</span> ttl == <span class=\"number\">-1</span>:</span><br><span class=\"line\">            changed_ttl_num += <span class=\"number\">1</span></span><br><span class=\"line\">            redis_conn.expire(key, expire + random.randint(<span class=\"number\">0</span>, random_upper))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    process_bar.close()</span><br><span class=\"line\">    print(<span class=\"string\">\"cost time(s):\"</span>, time.time() - start_time)</span><br><span class=\"line\">    print(<span class=\"string\">\"changed ttl keys number:\"</span>, changed_ttl_num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parser = argparse.ArgumentParser()</span><br><span class=\"line\">    </span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--port'</span>, type=int, dest=<span class=\"string\">'port'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"number\">6379</span>,help=<span class=\"string\">'port of redis '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--db_list'</span>, type=str, dest=<span class=\"string\">'db_list'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'0'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'ex : -d all / -d 1,2,3,4 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--host'</span>, type=str, dest=<span class=\"string\">'host'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'ex : --host 127.0.0.1 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--password'</span>, type=str, dest=<span class=\"string\">'password'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">''</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'ex : --password password '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--expire'</span>, type=int, dest=<span class=\"string\">'expire'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'0'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'unit: sec ,ex 1 days = 86400 sec: --expire 86400 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--random_upper'</span>, type=int, dest=<span class=\"string\">'random_upper'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'60'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'unit: sec ,ex 1 mins = 60 sec: --random_upper 60 '</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--max_ttl'</span>, type=int, dest=<span class=\"string\">'max_ttl'</span>, action=<span class=\"string\">'store'</span>, default=<span class=\"string\">'60'</span>,</span><br><span class=\"line\">                        help=<span class=\"string\">'unit: sec ,ex 1 mins = 60 sec: --max_ttl 60 '</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    port = args.port</span><br><span class=\"line\">    expire = args.expire</span><br><span class=\"line\">    random_upper = args.random_upper</span><br><span class=\"line\">    max_ttl = args.max_ttl</span><br><span class=\"line\">    host = args.host</span><br><span class=\"line\">    password = args.password</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.db_list == <span class=\"string\">'all'</span>:</span><br><span class=\"line\">        db_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">16</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        db_list = [int(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> args.db_list.split(<span class=\"string\">','</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> db_list:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            pool = redis.ConnectionPool(host=host, port=port, db=index,password=password)</span><br><span class=\"line\">            r = redis.StrictRedis(connection_pool=pool)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> redis.exceptions.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            check_ttl(r, index,max_ttl,random_upper,expire)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>参考资料  <a href=\"http://blog.itpub.net/22664653/viewspace-2153419/\" target=\"_blank\" rel=\"noopener\">【Redis】获取没有设置ttl的key脚本</a></p>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"014-活该你爬虫被封之Scrapy Ip代理中间件","date":"2019-04-02T12:41:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第14篇，定个小目标999，每周最少2篇。\n\n\n背景: 房租到期了。<br />需求: 找到便宜，交通便利的房源，了解当前租房行情，便于砍价。\n\n在爬取58，赶集，链家，安居客的数据时，被封是常事，基于此，fork并修改了两个库。用于抓取免费代理ip，用于支持爬取租房数据。\n\n注意：租房网站的数据，大概率失真，仅做参考。\n\n<!-- more -->\n\n其中部分数据截图<br />\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1554210833561-38730012-a2d6-4d00-aed7-5576b112e7c5.png#align=left&display=inline&height=740&name=image.png&originHeight=740&originWidth=1868&size=451298&status=done&width=1868)\n\n本文只介绍Scrapy的ip代理中间件，不多讲如何爬取租房网站数据以及数据分析，后边可能会写。\n\n<a name=\"274ffdf6\"></a>\n## 获取代理ip\n如果有付费的代理ip更好，如果没有的话，可以用我构建的docker镜像\n\n```bash\ndocker run -p8765:8765 -d anjia0532/ipproxy-dockerfile\n```\n\n稍等2-5分钟，访问  http://${docker ip}:8765/ ,如果有值，则抓取代理ip成功。\n\n<a name=\"scrapy-proxies-tool\"></a>\n## scrapy-proxies-tool\n\n<a name=\"e655a410\"></a>\n### 安装\n\n```bash\npip install scrapy-proxies-tool\n```\n\n<a name=\"224e2ccd\"></a>\n### 配置\n修改 Scrapy settings.py，源[repo ](https://github.com/aivarsk/scrapy-proxies)只支持从文件读取代理ip\n\n```python\n# Retry many times since proxies often fail\nRETRY_TIMES = 10\n# Retry on most error codes since proxies fail for different reasons\nRETRY_HTTP_CODES = [500, 503, 504, 400, 403, 404, 408]\n\nDOWNLOADER_MIDDLEWARES = {\n  'scrapy.downloadermiddlewares.retry.RetryMiddleware': 90,\n  'scrapy_proxies.RandomProxy': 100,\n  'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware': 110,\n}\n\nPROXY_SETTINGS = {\n  # Proxy list containing entries like\n  # http://host1:port\n  # http://username:password@host2:port\n  # http://host3:port\n  # ...\n  # if PROXY_SETTINGS[from_proxies_server] = True , proxy_list is server address (ref https://github.com/qiyeboy/IPProxyPool and https://github.com/awolfly9/IPProxyTool )\n  # Only support http(ref https://github.com/qiyeboy/IPProxyPool#%E5%8F%82%E6%95%B0)\n  # list : ['http://localhost:8765?protocol=0'],\n  'list':['/path/to/proxy/list.txt'],\n\n  # disable proxy settings and  use real ip when all proxies are unusable\n  'use_real_when_empty':False,\n  'from_proxies_server':False,\n\n  # If proxy mode is 2 uncomment this sentence :\n  # 'custom_proxy': \"http://host1:port\",\n\n  # Proxy mode\n  # 0 = Every requests have different proxy\n  # 1 = Take only one proxy from the list and assign it to every requests\n  # 2 = Put a custom proxy to use in the settings\n  'mode':0\n}\n```\n\n可以通过爬取 [http://myip.ipip.net/](http://myip.ipip.net/) 来判断代理ip是否生效。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [https://github.com/anjia0532/IPProxyPool](https://github.com/anjia0532/IPProxyPool)\n- [https://hub.docker.com/r/anjia0532/ipproxy-dockerfile](https://hub.docker.com/r/anjia0532/ipproxy-dockerfile)\n- [https://github.com/aivarsk/scrapy-proxies](https://github.com/aivarsk/scrapy-proxies)\n- [https://github.com/anjia0532/scrapy-proxies](https://github.com/anjia0532/scrapy-proxies)\n\n","source":"_posts/scrapy-proxy.md","raw":"\n---\n\ntitle: 014-活该你爬虫被封之Scrapy Ip代理中间件\n\ndate: 2019-04-02 20:41:00 +0800\n\ntags: [python,scrapy,proxy]\n\ncategories: 爬虫\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第14篇，定个小目标999，每周最少2篇。\n\n\n背景: 房租到期了。<br />需求: 找到便宜，交通便利的房源，了解当前租房行情，便于砍价。\n\n在爬取58，赶集，链家，安居客的数据时，被封是常事，基于此，fork并修改了两个库。用于抓取免费代理ip，用于支持爬取租房数据。\n\n注意：租房网站的数据，大概率失真，仅做参考。\n\n<!-- more -->\n\n其中部分数据截图<br />\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1554210833561-38730012-a2d6-4d00-aed7-5576b112e7c5.png#align=left&display=inline&height=740&name=image.png&originHeight=740&originWidth=1868&size=451298&status=done&width=1868)\n\n本文只介绍Scrapy的ip代理中间件，不多讲如何爬取租房网站数据以及数据分析，后边可能会写。\n\n<a name=\"274ffdf6\"></a>\n## 获取代理ip\n如果有付费的代理ip更好，如果没有的话，可以用我构建的docker镜像\n\n```bash\ndocker run -p8765:8765 -d anjia0532/ipproxy-dockerfile\n```\n\n稍等2-5分钟，访问  http://${docker ip}:8765/ ,如果有值，则抓取代理ip成功。\n\n<a name=\"scrapy-proxies-tool\"></a>\n## scrapy-proxies-tool\n\n<a name=\"e655a410\"></a>\n### 安装\n\n```bash\npip install scrapy-proxies-tool\n```\n\n<a name=\"224e2ccd\"></a>\n### 配置\n修改 Scrapy settings.py，源[repo ](https://github.com/aivarsk/scrapy-proxies)只支持从文件读取代理ip\n\n```python\n# Retry many times since proxies often fail\nRETRY_TIMES = 10\n# Retry on most error codes since proxies fail for different reasons\nRETRY_HTTP_CODES = [500, 503, 504, 400, 403, 404, 408]\n\nDOWNLOADER_MIDDLEWARES = {\n  'scrapy.downloadermiddlewares.retry.RetryMiddleware': 90,\n  'scrapy_proxies.RandomProxy': 100,\n  'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware': 110,\n}\n\nPROXY_SETTINGS = {\n  # Proxy list containing entries like\n  # http://host1:port\n  # http://username:password@host2:port\n  # http://host3:port\n  # ...\n  # if PROXY_SETTINGS[from_proxies_server] = True , proxy_list is server address (ref https://github.com/qiyeboy/IPProxyPool and https://github.com/awolfly9/IPProxyTool )\n  # Only support http(ref https://github.com/qiyeboy/IPProxyPool#%E5%8F%82%E6%95%B0)\n  # list : ['http://localhost:8765?protocol=0'],\n  'list':['/path/to/proxy/list.txt'],\n\n  # disable proxy settings and  use real ip when all proxies are unusable\n  'use_real_when_empty':False,\n  'from_proxies_server':False,\n\n  # If proxy mode is 2 uncomment this sentence :\n  # 'custom_proxy': \"http://host1:port\",\n\n  # Proxy mode\n  # 0 = Every requests have different proxy\n  # 1 = Take only one proxy from the list and assign it to every requests\n  # 2 = Put a custom proxy to use in the settings\n  'mode':0\n}\n```\n\n可以通过爬取 [http://myip.ipip.net/](http://myip.ipip.net/) 来判断代理ip是否生效。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [https://github.com/anjia0532/IPProxyPool](https://github.com/anjia0532/IPProxyPool)\n- [https://hub.docker.com/r/anjia0532/ipproxy-dockerfile](https://hub.docker.com/r/anjia0532/ipproxy-dockerfile)\n- [https://github.com/aivarsk/scrapy-proxies](https://github.com/aivarsk/scrapy-proxies)\n- [https://github.com/anjia0532/scrapy-proxies](https://github.com/anjia0532/scrapy-proxies)\n\n","slug":"scrapy-proxy","published":1,"updated":"2019-08-16T06:11:15.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtoje9002t24dobyv7r9e1","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第14篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>背景: 房租到期了。<br>需求: 找到便宜，交通便利的房源，了解当前租房行情，便于砍价。</p>\n<p>在爬取58，赶集，链家，安居客的数据时，被封是常事，基于此，fork并修改了两个库。用于抓取免费代理ip，用于支持爬取租房数据。</p>\n<p>注意：租房网站的数据，大概率失真，仅做参考。</p>\n<a id=\"more\"></a>\n<p>其中部分数据截图<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1554210833561-38730012-a2d6-4d00-aed7-5576b112e7c5.png#align=left&amp;display=inline&amp;height=740&amp;name=image.png&amp;originHeight=740&amp;originWidth=1868&amp;size=451298&amp;status=done&amp;width=1868\" alt=\"image.png\"></p>\n<p>本文只介绍Scrapy的ip代理中间件，不多讲如何爬取租房网站数据以及数据分析，后边可能会写。</p>\n<p><a name=\"274ffdf6\"></a></p>\n<h2 id=\"获取代理ip\"><a href=\"#获取代理ip\" class=\"headerlink\" title=\"获取代理ip\"></a>获取代理ip</h2><p>如果有付费的代理ip更好，如果没有的话，可以用我构建的docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p8765:8765 -d anjia0532/ipproxy-dockerfile</span><br></pre></td></tr></table></figure>\n<p>稍等2-5分钟，访问  <a href=\"http://${docker\" target=\"_blank\" rel=\"noopener\">http://${docker</a> ip}:8765/ ,如果有值，则抓取代理ip成功。</p>\n<p><a name=\"scrapy-proxies-tool\"></a></p>\n<h2 id=\"scrapy-proxies-tool\"><a href=\"#scrapy-proxies-tool\" class=\"headerlink\" title=\"scrapy-proxies-tool\"></a>scrapy-proxies-tool</h2><p><a name=\"e655a410\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install scrapy-proxies-tool</span><br></pre></td></tr></table></figure>\n<p><a name=\"224e2ccd\"></a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改 Scrapy settings.py，源<a href=\"https://github.com/aivarsk/scrapy-proxies\" target=\"_blank\" rel=\"noopener\">repo </a>只支持从文件读取代理ip</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Retry many times since proxies often fail</span></span><br><span class=\"line\">RETRY_TIMES = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\"># Retry on most error codes since proxies fail for different reasons</span></span><br><span class=\"line\">RETRY_HTTP_CODES = [<span class=\"number\">500</span>, <span class=\"number\">503</span>, <span class=\"number\">504</span>, <span class=\"number\">400</span>, <span class=\"number\">403</span>, <span class=\"number\">404</span>, <span class=\"number\">408</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">  <span class=\"string\">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">  <span class=\"string\">'scrapy_proxies.RandomProxy'</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"string\">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PROXY_SETTINGS = &#123;</span><br><span class=\"line\">  <span class=\"comment\"># Proxy list containing entries like</span></span><br><span class=\"line\">  <span class=\"comment\"># http://host1:port</span></span><br><span class=\"line\">  <span class=\"comment\"># http://username:password@host2:port</span></span><br><span class=\"line\">  <span class=\"comment\"># http://host3:port</span></span><br><span class=\"line\">  <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"comment\"># if PROXY_SETTINGS[from_proxies_server] = True , proxy_list is server address (ref https://github.com/qiyeboy/IPProxyPool and https://github.com/awolfly9/IPProxyTool )</span></span><br><span class=\"line\">  <span class=\"comment\"># Only support http(ref https://github.com/qiyeboy/IPProxyPool#%E5%8F%82%E6%95%B0)</span></span><br><span class=\"line\">  <span class=\"comment\"># list : ['http://localhost:8765?protocol=0'],</span></span><br><span class=\"line\">  <span class=\"string\">'list'</span>:[<span class=\"string\">'/path/to/proxy/list.txt'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># disable proxy settings and  use real ip when all proxies are unusable</span></span><br><span class=\"line\">  <span class=\"string\">'use_real_when_empty'</span>:<span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'from_proxies_server'</span>:<span class=\"keyword\">False</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If proxy mode is 2 uncomment this sentence :</span></span><br><span class=\"line\">  <span class=\"comment\"># 'custom_proxy': \"http://host1:port\",</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Proxy mode</span></span><br><span class=\"line\">  <span class=\"comment\"># 0 = Every requests have different proxy</span></span><br><span class=\"line\">  <span class=\"comment\"># 1 = Take only one proxy from the list and assign it to every requests</span></span><br><span class=\"line\">  <span class=\"comment\"># 2 = Put a custom proxy to use in the settings</span></span><br><span class=\"line\">  <span class=\"string\">'mode'</span>:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过爬取 <a href=\"http://myip.ipip.net/\" target=\"_blank\" rel=\"noopener\">http://myip.ipip.net/</a> 来判断代理ip是否生效。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/anjia0532/IPProxyPool\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/IPProxyPool</a></li>\n<li><a href=\"https://hub.docker.com/r/anjia0532/ipproxy-dockerfile\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/anjia0532/ipproxy-dockerfile</a></li>\n<li><a href=\"https://github.com/aivarsk/scrapy-proxies\" target=\"_blank\" rel=\"noopener\">https://github.com/aivarsk/scrapy-proxies</a></li>\n<li><a href=\"https://github.com/anjia0532/scrapy-proxies\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/scrapy-proxies</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第14篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>背景: 房租到期了。<br>需求: 找到便宜，交通便利的房源，了解当前租房行情，便于砍价。</p>\n<p>在爬取58，赶集，链家，安居客的数据时，被封是常事，基于此，fork并修改了两个库。用于抓取免费代理ip，用于支持爬取租房数据。</p>\n<p>注意：租房网站的数据，大概率失真，仅做参考。</p>","more":"<p>其中部分数据截图<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1554210833561-38730012-a2d6-4d00-aed7-5576b112e7c5.png#align=left&amp;display=inline&amp;height=740&amp;name=image.png&amp;originHeight=740&amp;originWidth=1868&amp;size=451298&amp;status=done&amp;width=1868\" alt=\"image.png\"></p>\n<p>本文只介绍Scrapy的ip代理中间件，不多讲如何爬取租房网站数据以及数据分析，后边可能会写。</p>\n<p><a name=\"274ffdf6\"></a></p>\n<h2 id=\"获取代理ip\"><a href=\"#获取代理ip\" class=\"headerlink\" title=\"获取代理ip\"></a>获取代理ip</h2><p>如果有付费的代理ip更好，如果没有的话，可以用我构建的docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p8765:8765 -d anjia0532/ipproxy-dockerfile</span><br></pre></td></tr></table></figure>\n<p>稍等2-5分钟，访问  <a href=\"http://${docker\" target=\"_blank\" rel=\"noopener\">http://${docker</a> ip}:8765/ ,如果有值，则抓取代理ip成功。</p>\n<p><a name=\"scrapy-proxies-tool\"></a></p>\n<h2 id=\"scrapy-proxies-tool\"><a href=\"#scrapy-proxies-tool\" class=\"headerlink\" title=\"scrapy-proxies-tool\"></a>scrapy-proxies-tool</h2><p><a name=\"e655a410\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install scrapy-proxies-tool</span><br></pre></td></tr></table></figure>\n<p><a name=\"224e2ccd\"></a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改 Scrapy settings.py，源<a href=\"https://github.com/aivarsk/scrapy-proxies\" target=\"_blank\" rel=\"noopener\">repo </a>只支持从文件读取代理ip</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Retry many times since proxies often fail</span></span><br><span class=\"line\">RETRY_TIMES = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\"># Retry on most error codes since proxies fail for different reasons</span></span><br><span class=\"line\">RETRY_HTTP_CODES = [<span class=\"number\">500</span>, <span class=\"number\">503</span>, <span class=\"number\">504</span>, <span class=\"number\">400</span>, <span class=\"number\">403</span>, <span class=\"number\">404</span>, <span class=\"number\">408</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">  <span class=\"string\">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">  <span class=\"string\">'scrapy_proxies.RandomProxy'</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"string\">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PROXY_SETTINGS = &#123;</span><br><span class=\"line\">  <span class=\"comment\"># Proxy list containing entries like</span></span><br><span class=\"line\">  <span class=\"comment\"># http://host1:port</span></span><br><span class=\"line\">  <span class=\"comment\"># http://username:password@host2:port</span></span><br><span class=\"line\">  <span class=\"comment\"># http://host3:port</span></span><br><span class=\"line\">  <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"comment\"># if PROXY_SETTINGS[from_proxies_server] = True , proxy_list is server address (ref https://github.com/qiyeboy/IPProxyPool and https://github.com/awolfly9/IPProxyTool )</span></span><br><span class=\"line\">  <span class=\"comment\"># Only support http(ref https://github.com/qiyeboy/IPProxyPool#%E5%8F%82%E6%95%B0)</span></span><br><span class=\"line\">  <span class=\"comment\"># list : ['http://localhost:8765?protocol=0'],</span></span><br><span class=\"line\">  <span class=\"string\">'list'</span>:[<span class=\"string\">'/path/to/proxy/list.txt'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># disable proxy settings and  use real ip when all proxies are unusable</span></span><br><span class=\"line\">  <span class=\"string\">'use_real_when_empty'</span>:<span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'from_proxies_server'</span>:<span class=\"keyword\">False</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If proxy mode is 2 uncomment this sentence :</span></span><br><span class=\"line\">  <span class=\"comment\"># 'custom_proxy': \"http://host1:port\",</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Proxy mode</span></span><br><span class=\"line\">  <span class=\"comment\"># 0 = Every requests have different proxy</span></span><br><span class=\"line\">  <span class=\"comment\"># 1 = Take only one proxy from the list and assign it to every requests</span></span><br><span class=\"line\">  <span class=\"comment\"># 2 = Put a custom proxy to use in the settings</span></span><br><span class=\"line\">  <span class=\"string\">'mode'</span>:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过爬取 <a href=\"http://myip.ipip.net/\" target=\"_blank\" rel=\"noopener\">http://myip.ipip.net/</a> 来判断代理ip是否生效。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/anjia0532/IPProxyPool\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/IPProxyPool</a></li>\n<li><a href=\"https://hub.docker.com/r/anjia0532/ipproxy-dockerfile\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/anjia0532/ipproxy-dockerfile</a></li>\n<li><a href=\"https://github.com/aivarsk/scrapy-proxies\" target=\"_blank\" rel=\"noopener\">https://github.com/aivarsk/scrapy-proxies</a></li>\n<li><a href=\"https://github.com/anjia0532/scrapy-proxies\" target=\"_blank\" rel=\"noopener\">https://github.com/anjia0532/scrapy-proxies</a></li>\n</ul>"},{"title":"035-解决streamsets jdbc全量模式数据重复问题","date":"2019-07-22T13:00:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第35篇，定个小目标999，每周最少2篇。\n\n\n本文主要解决在使用streamsets的JDBC Query Consumer Origin组件消费时，使用全量模式(Full Mode)，数据重复问题。\n\n<!-- more -->\n\n在之前一篇《[033-史上最全-mysql迁移到clickhouse的5种办法](https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/#streamsets)》中，有介绍如何使用JDBC Query Consumer全量导出，但是有人反馈因为streamsets的管道(pipeline)一直在重复运行，导致最后数据是重复的。\n\n实际上在官方文档有讲 [Full and Incremental Mode](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563874566018-7fd172c4-91aa-4c76-a6af-cf7211443aca.png#align=left&display=inline&height=476&name=image.png&originHeight=476&originWidth=1187&size=73254&status=done&width=1187)\n\n主要看提示(Tip)部分，如果只想执行一次查询后就停止pipeline，应该配置origin的generate events 并且使用Pipeline Finisher来自动停止pipeline，更多信息参见 Event Generation.\n\n在jdbc origin勾选 Produce Events\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563875657778-70e75154-a57b-444d-bf73-4315d05e9fc4.png#align=left&display=inline&height=692&name=image.png&originHeight=692&originWidth=821&size=56065&status=done&width=821)<br />从组件选则Pipeline Finisher，并且配置 Preconditions 为 `${record:eventType() == 'no-more-data'}` 即可<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563875726527-ed22dd7a-cff4-4b10-ac57-2e29ce2f0075.png#align=left&display=inline&height=618&name=image.png&originHeight=618&originWidth=1351&size=70288&status=done&width=1351)\n\n\n\n\n<a name=\"5OqvA\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode)\n- [我的掘金](https://juejin.im/post/5d36dbca5188257b775d4b40)\n- [Full and Incremental Mode](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6)\n- [Event Generation](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#concept_o1c_kwr_kz)\n- [Case Study: Stop the Pipeline](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Event_Handling/EventFramework-Title.html#concept_kff_ykv_lz)\n\n","source":"_posts/sdc-jdbc-full-mode.md","raw":"\n---\n\ntitle: 035-解决streamsets jdbc全量模式数据重复问题\n\ndate: 2019-07-22 21:00:00 +0800\n\ntags: [streamsets,sdc,mysql,binlog,etl,数据分析,数据处理]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第35篇，定个小目标999，每周最少2篇。\n\n\n本文主要解决在使用streamsets的JDBC Query Consumer Origin组件消费时，使用全量模式(Full Mode)，数据重复问题。\n\n<!-- more -->\n\n在之前一篇《[033-史上最全-mysql迁移到clickhouse的5种办法](https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/#streamsets)》中，有介绍如何使用JDBC Query Consumer全量导出，但是有人反馈因为streamsets的管道(pipeline)一直在重复运行，导致最后数据是重复的。\n\n实际上在官方文档有讲 [Full and Incremental Mode](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563874566018-7fd172c4-91aa-4c76-a6af-cf7211443aca.png#align=left&display=inline&height=476&name=image.png&originHeight=476&originWidth=1187&size=73254&status=done&width=1187)\n\n主要看提示(Tip)部分，如果只想执行一次查询后就停止pipeline，应该配置origin的generate events 并且使用Pipeline Finisher来自动停止pipeline，更多信息参见 Event Generation.\n\n在jdbc origin勾选 Produce Events\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563875657778-70e75154-a57b-444d-bf73-4315d05e9fc4.png#align=left&display=inline&height=692&name=image.png&originHeight=692&originWidth=821&size=56065&status=done&width=821)<br />从组件选则Pipeline Finisher，并且配置 Preconditions 为 `${record:eventType() == 'no-more-data'}` 即可<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563875726527-ed22dd7a-cff4-4b10-ac57-2e29ce2f0075.png#align=left&display=inline&height=618&name=image.png&originHeight=618&originWidth=1351&size=70288&status=done&width=1351)\n\n\n\n\n<a name=\"5OqvA\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode)\n- [我的掘金](https://juejin.im/post/5d36dbca5188257b775d4b40)\n- [Full and Incremental Mode](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6)\n- [Event Generation](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#concept_o1c_kwr_kz)\n- [Case Study: Stop the Pipeline](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Event_Handling/EventFramework-Title.html#concept_kff_ykv_lz)\n\n","slug":"sdc-jdbc-full-mode","published":1,"updated":"2019-08-16T06:11:14.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojeb002w24do9xdoht0a","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第35篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要解决在使用streamsets的JDBC Query Consumer Origin组件消费时，使用全量模式(Full Mode)，数据重复问题。</p>\n<a id=\"more\"></a>\n<p>在之前一篇《<a href=\"https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/#streamsets\">033-史上最全-mysql迁移到clickhouse的5种办法</a>》中，有介绍如何使用JDBC Query Consumer全量导出，但是有人反馈因为streamsets的管道(pipeline)一直在重复运行，导致最后数据是重复的。</p>\n<p>实际上在官方文档有讲 <a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6\" target=\"_blank\" rel=\"noopener\">Full and Incremental Mode</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563874566018-7fd172c4-91aa-4c76-a6af-cf7211443aca.png#align=left&amp;display=inline&amp;height=476&amp;name=image.png&amp;originHeight=476&amp;originWidth=1187&amp;size=73254&amp;status=done&amp;width=1187\" alt=\"image.png\"></p>\n<p>主要看提示(Tip)部分，如果只想执行一次查询后就停止pipeline，应该配置origin的generate events 并且使用Pipeline Finisher来自动停止pipeline，更多信息参见 Event Generation.</p>\n<p>在jdbc origin勾选 Produce Events</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563875657778-70e75154-a57b-444d-bf73-4315d05e9fc4.png#align=left&amp;display=inline&amp;height=692&amp;name=image.png&amp;originHeight=692&amp;originWidth=821&amp;size=56065&amp;status=done&amp;width=821\" alt=\"image.png\"><br>从组件选则Pipeline Finisher，并且配置 Preconditions 为 <code>${record:eventType() == &#39;no-more-data&#39;}</code> 即可<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563875726527-ed22dd7a-cff4-4b10-ac57-2e29ce2f0075.png#align=left&amp;display=inline&amp;height=618&amp;name=image.png&amp;originHeight=618&amp;originWidth=1351&amp;size=70288&amp;status=done&amp;width=1351\" alt=\"image.png\"></p>\n<p><a name=\"5OqvA\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d36dbca5188257b775d4b40\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6\" target=\"_blank\" rel=\"noopener\">Full and Incremental Mode</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#concept_o1c_kwr_kz\" target=\"_blank\" rel=\"noopener\">Event Generation</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Event_Handling/EventFramework-Title.html#concept_kff_ykv_lz\" target=\"_blank\" rel=\"noopener\">Case Study: Stop the Pipeline</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第35篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要解决在使用streamsets的JDBC Query Consumer Origin组件消费时，使用全量模式(Full Mode)，数据重复问题。</p>","more":"<p>在之前一篇《<a href=\"https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/#streamsets\">033-史上最全-mysql迁移到clickhouse的5种办法</a>》中，有介绍如何使用JDBC Query Consumer全量导出，但是有人反馈因为streamsets的管道(pipeline)一直在重复运行，导致最后数据是重复的。</p>\n<p>实际上在官方文档有讲 <a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6\" target=\"_blank\" rel=\"noopener\">Full and Incremental Mode</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563874566018-7fd172c4-91aa-4c76-a6af-cf7211443aca.png#align=left&amp;display=inline&amp;height=476&amp;name=image.png&amp;originHeight=476&amp;originWidth=1187&amp;size=73254&amp;status=done&amp;width=1187\" alt=\"image.png\"></p>\n<p>主要看提示(Tip)部分，如果只想执行一次查询后就停止pipeline，应该配置origin的generate events 并且使用Pipeline Finisher来自动停止pipeline，更多信息参见 Event Generation.</p>\n<p>在jdbc origin勾选 Produce Events</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563875657778-70e75154-a57b-444d-bf73-4315d05e9fc4.png#align=left&amp;display=inline&amp;height=692&amp;name=image.png&amp;originHeight=692&amp;originWidth=821&amp;size=56065&amp;status=done&amp;width=821\" alt=\"image.png\"><br>从组件选则Pipeline Finisher，并且配置 Preconditions 为 <code>${record:eventType() == &#39;no-more-data&#39;}</code> 即可<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563875726527-ed22dd7a-cff4-4b10-ac57-2e29ce2f0075.png#align=left&amp;display=inline&amp;height=618&amp;name=image.png&amp;originHeight=618&amp;originWidth=1351&amp;size=70288&amp;status=done&amp;width=1351\" alt=\"image.png\"></p>\n<p><a name=\"5OqvA\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d36dbca5188257b775d4b40\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#ariaid-title6\" target=\"_blank\" rel=\"noopener\">Full and Incremental Mode</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html#concept_o1c_kwr_kz\" target=\"_blank\" rel=\"noopener\">Event Generation</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Event_Handling/EventFramework-Title.html#concept_kff_ykv_lz\" target=\"_blank\" rel=\"noopener\">Case Study: Stop the Pipeline</a></li>\n</ul>"},{"title":"009-时间不同步导致Sentinel监控异常","date":"2019-03-07T11:10:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第9篇，定个小目标999，每周最少2篇。\n\n\n<a name=\"d96ebbc8\"></a>\n## 背景描述\n\n在公司测试服务器调试[ahas](https://www.aliyun.com/product/ahas)（Sentinel商业版）时，发现频发性无规律的出现Ahas控制台【监控详情】不显示,甚至应用直接消失的问题。\n\n开始以为是非Spring boot应用的问题(因为另外一个产品线是spring boot的，测试没问题)，反复翻看开源[sentinel的wiki](https://github.com/alibaba/Sentinel/wiki)和[商业ahas的帮助文档](https://help.aliyun.com/product/87450.html) ,并且结合Sentinel的日志排查，毫无头绪。但是换成开源的Sentinel Dashboard没问题\n\n<a name=\"7f539a3d\"></a>\n## 解决步骤\n\n<a name=\"fa18035d\"></a>\n### 问题原因\n\n上文提到的，Spring boot 可以，是因为其部署在阿里云ecs上，而阿里云主机默认都有ntp同步\n\n而测试机连Sentinel 的Dashboard没问题，换成ahas就有问题，是因为 Sentinel的client和dashboard，部署在同一台服务器，不存在时间差问题。\n\n后来通过 [@乐有](#) 和 [@云寅](#) 的帮助，定位到时钟问题, 据 @乐有 介绍Sentinel允许的最大时间误差是30s，而实验中，测试机和北京时间误差超过55s。\n\n\n<a name=\"1b69cacb\"></a>\n### windows 自动同步时间及修改同步频率\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1551944444938-feeadc19-7e4d-4b5a-8783-b8758668e48e.png#align=left&display=inline&height=595&originHeight=595&originWidth=538&status=done&width=538)\n\n如果同步出错，可以重启一下 `Windows Time` 服务，再次同步。\n\n但是过了半天后，时钟又差1分钟，所以需要调整一下NTP同步频率<br />打开注册表，找到 `SpecialPollInterval` (<br />`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClien\\SpecialPollInterval` )\n\n发现默认值是十六进制 `93a80` ，换成10进制是 `604800` (7天*24小时*60分钟*60秒=604800)，间隔太长了 ,改成300(5分钟*60秒)即可。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [Sentinel#Wiki#FAQ](https://github.com/alibaba/Sentinel/wiki/FAQ#q-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%8D%E5%9C%A8%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%90%E5%8A%9F%E6%8E%A5%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%90%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%AE%9E%E6%97%B6%E7%9A%84%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%E4%BD%86%E7%B0%87%E7%82%B9%E9%93%BE%E8%B7%AF%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%AE%9E%E6%97%B6%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%BA-0)\n- [配置Windows实例NTP服务](https://help.aliyun.com/document_detail/51890.html?spm=a2c4g.11186623.6.664.6ab468b6AQsVAL)\n- [使用阿里云NTP服务器](https://help.aliyun.com/document_detail/92704.html?spm=a2c4g.11186623.6.663.284f49eaBjyUPf)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/sentinel-timestamp.md","raw":"\n---\n\ntitle: 009-时间不同步导致Sentinel监控异常\n\ndate: 2019-03-07 19:10:00 +0800\n\ntags: [spring boot,spring cloud,sentinel,hystrix,微服务,熔断]\n\ncategories: 微服务\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第9篇，定个小目标999，每周最少2篇。\n\n\n<a name=\"d96ebbc8\"></a>\n## 背景描述\n\n在公司测试服务器调试[ahas](https://www.aliyun.com/product/ahas)（Sentinel商业版）时，发现频发性无规律的出现Ahas控制台【监控详情】不显示,甚至应用直接消失的问题。\n\n开始以为是非Spring boot应用的问题(因为另外一个产品线是spring boot的，测试没问题)，反复翻看开源[sentinel的wiki](https://github.com/alibaba/Sentinel/wiki)和[商业ahas的帮助文档](https://help.aliyun.com/product/87450.html) ,并且结合Sentinel的日志排查，毫无头绪。但是换成开源的Sentinel Dashboard没问题\n\n<a name=\"7f539a3d\"></a>\n## 解决步骤\n\n<a name=\"fa18035d\"></a>\n### 问题原因\n\n上文提到的，Spring boot 可以，是因为其部署在阿里云ecs上，而阿里云主机默认都有ntp同步\n\n而测试机连Sentinel 的Dashboard没问题，换成ahas就有问题，是因为 Sentinel的client和dashboard，部署在同一台服务器，不存在时间差问题。\n\n后来通过 [@乐有](#) 和 [@云寅](#) 的帮助，定位到时钟问题, 据 @乐有 介绍Sentinel允许的最大时间误差是30s，而实验中，测试机和北京时间误差超过55s。\n\n\n<a name=\"1b69cacb\"></a>\n### windows 自动同步时间及修改同步频率\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1551944444938-feeadc19-7e4d-4b5a-8783-b8758668e48e.png#align=left&display=inline&height=595&originHeight=595&originWidth=538&status=done&width=538)\n\n如果同步出错，可以重启一下 `Windows Time` 服务，再次同步。\n\n但是过了半天后，时钟又差1分钟，所以需要调整一下NTP同步频率<br />打开注册表，找到 `SpecialPollInterval` (<br />`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClien\\SpecialPollInterval` )\n\n发现默认值是十六进制 `93a80` ，换成10进制是 `604800` (7天*24小时*60分钟*60秒=604800)，间隔太长了 ,改成300(5分钟*60秒)即可。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [Sentinel#Wiki#FAQ](https://github.com/alibaba/Sentinel/wiki/FAQ#q-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%8D%E5%9C%A8%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%90%E5%8A%9F%E6%8E%A5%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%90%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%AE%9E%E6%97%B6%E7%9A%84%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%E4%BD%86%E7%B0%87%E7%82%B9%E9%93%BE%E8%B7%AF%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%AE%9E%E6%97%B6%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%BA-0)\n- [配置Windows实例NTP服务](https://help.aliyun.com/document_detail/51890.html?spm=a2c4g.11186623.6.664.6ab468b6AQsVAL)\n- [使用阿里云NTP服务器](https://help.aliyun.com/document_detail/92704.html?spm=a2c4g.11186623.6.663.284f49eaBjyUPf)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"sentinel-timestamp","published":1,"updated":"2019-08-16T06:11:15.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojec002z24dojebpd84q","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第9篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p><a name=\"d96ebbc8\"></a></p>\n<h2 id=\"背景描述\"><a href=\"#背景描述\" class=\"headerlink\" title=\"背景描述\"></a>背景描述</h2><p>在公司测试服务器调试<a href=\"https://www.aliyun.com/product/ahas\" target=\"_blank\" rel=\"noopener\">ahas</a>（Sentinel商业版）时，发现频发性无规律的出现Ahas控制台【监控详情】不显示,甚至应用直接消失的问题。</p>\n<p>开始以为是非Spring boot应用的问题(因为另外一个产品线是spring boot的，测试没问题)，反复翻看开源<a href=\"https://github.com/alibaba/Sentinel/wiki\" target=\"_blank\" rel=\"noopener\">sentinel的wiki</a>和<a href=\"https://help.aliyun.com/product/87450.html\" target=\"_blank\" rel=\"noopener\">商业ahas的帮助文档</a> ,并且结合Sentinel的日志排查，毫无头绪。但是换成开源的Sentinel Dashboard没问题</p>\n<p><a name=\"7f539a3d\"></a></p>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><p><a name=\"fa18035d\"></a></p>\n<h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>上文提到的，Spring boot 可以，是因为其部署在阿里云ecs上，而阿里云主机默认都有ntp同步</p>\n<p>而测试机连Sentinel 的Dashboard没问题，换成ahas就有问题，是因为 Sentinel的client和dashboard，部署在同一台服务器，不存在时间差问题。</p>\n<p>后来通过 <a href=\"#\">@乐有</a> 和 <a href=\"#\">@云寅</a> 的帮助，定位到时钟问题, 据 @乐有 介绍Sentinel允许的最大时间误差是30s，而实验中，测试机和北京时间误差超过55s。</p>\n<p><a name=\"1b69cacb\"></a></p>\n<h3 id=\"windows-自动同步时间及修改同步频率\"><a href=\"#windows-自动同步时间及修改同步频率\" class=\"headerlink\" title=\"windows 自动同步时间及修改同步频率\"></a>windows 自动同步时间及修改同步频率</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551944444938-feeadc19-7e4d-4b5a-8783-b8758668e48e.png#align=left&amp;display=inline&amp;height=595&amp;originHeight=595&amp;originWidth=538&amp;status=done&amp;width=538\" alt=\"\"></p>\n<p>如果同步出错，可以重启一下 <code>Windows Time</code> 服务，再次同步。</p>\n<p>但是过了半天后，时钟又差1分钟，所以需要调整一下NTP同步频率<br>打开注册表，找到 <code>SpecialPollInterval</code> (<br><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClien\\SpecialPollInterval</code> )</p>\n<p>发现默认值是十六进制 <code>93a80</code> ，换成10进制是 <code>604800</code> (7天<em>24小时</em>60分钟<em>60秒=604800)，间隔太长了 ,改成300(5分钟</em>60秒)即可。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/alibaba/Sentinel/wiki/FAQ#q-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%8D%E5%9C%A8%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%90%E5%8A%9F%E6%8E%A5%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%90%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%AE%9E%E6%97%B6%E7%9A%84%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%E4%BD%86%E7%B0%87%E7%82%B9%E9%93%BE%E8%B7%AF%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%AE%9E%E6%97%B6%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%BA-0\" target=\"_blank\" rel=\"noopener\">Sentinel#Wiki#FAQ</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/51890.html?spm=a2c4g.11186623.6.664.6ab468b6AQsVAL\" target=\"_blank\" rel=\"noopener\">配置Windows实例NTP服务</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/92704.html?spm=a2c4g.11186623.6.663.284f49eaBjyUPf\" target=\"_blank\" rel=\"noopener\">使用阿里云NTP服务器</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第9篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p><a name=\"d96ebbc8\"></a></p>\n<h2 id=\"背景描述\"><a href=\"#背景描述\" class=\"headerlink\" title=\"背景描述\"></a>背景描述</h2><p>在公司测试服务器调试<a href=\"https://www.aliyun.com/product/ahas\" target=\"_blank\" rel=\"noopener\">ahas</a>（Sentinel商业版）时，发现频发性无规律的出现Ahas控制台【监控详情】不显示,甚至应用直接消失的问题。</p>\n<p>开始以为是非Spring boot应用的问题(因为另外一个产品线是spring boot的，测试没问题)，反复翻看开源<a href=\"https://github.com/alibaba/Sentinel/wiki\" target=\"_blank\" rel=\"noopener\">sentinel的wiki</a>和<a href=\"https://help.aliyun.com/product/87450.html\" target=\"_blank\" rel=\"noopener\">商业ahas的帮助文档</a> ,并且结合Sentinel的日志排查，毫无头绪。但是换成开源的Sentinel Dashboard没问题</p>\n<p><a name=\"7f539a3d\"></a></p>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><p><a name=\"fa18035d\"></a></p>\n<h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>上文提到的，Spring boot 可以，是因为其部署在阿里云ecs上，而阿里云主机默认都有ntp同步</p>\n<p>而测试机连Sentinel 的Dashboard没问题，换成ahas就有问题，是因为 Sentinel的client和dashboard，部署在同一台服务器，不存在时间差问题。</p>\n<p>后来通过 <a href=\"#\">@乐有</a> 和 <a href=\"#\">@云寅</a> 的帮助，定位到时钟问题, 据 @乐有 介绍Sentinel允许的最大时间误差是30s，而实验中，测试机和北京时间误差超过55s。</p>\n<p><a name=\"1b69cacb\"></a></p>\n<h3 id=\"windows-自动同步时间及修改同步频率\"><a href=\"#windows-自动同步时间及修改同步频率\" class=\"headerlink\" title=\"windows 自动同步时间及修改同步频率\"></a>windows 自动同步时间及修改同步频率</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551944444938-feeadc19-7e4d-4b5a-8783-b8758668e48e.png#align=left&amp;display=inline&amp;height=595&amp;originHeight=595&amp;originWidth=538&amp;status=done&amp;width=538\" alt=\"\"></p>\n<p>如果同步出错，可以重启一下 <code>Windows Time</code> 服务，再次同步。</p>\n<p>但是过了半天后，时钟又差1分钟，所以需要调整一下NTP同步频率<br>打开注册表，找到 <code>SpecialPollInterval</code> (<br><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClien\\SpecialPollInterval</code> )</p>\n<p>发现默认值是十六进制 <code>93a80</code> ，换成10进制是 <code>604800</code> (7天<em>24小时</em>60分钟<em>60秒=604800)，间隔太长了 ,改成300(5分钟</em>60秒)即可。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/alibaba/Sentinel/wiki/FAQ#q-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%8D%E5%9C%A8%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%90%E5%8A%9F%E6%8E%A5%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%90%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%AE%9E%E6%97%B6%E7%9A%84%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%E4%BD%86%E7%B0%87%E7%82%B9%E9%93%BE%E8%B7%AF%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%AE%9E%E6%97%B6%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%BA-0\" target=\"_blank\" rel=\"noopener\">Sentinel#Wiki#FAQ</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/51890.html?spm=a2c4g.11186623.6.664.6ab468b6AQsVAL\" target=\"_blank\" rel=\"noopener\">配置Windows实例NTP服务</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/92704.html?spm=a2c4g.11186623.6.663.284f49eaBjyUPf\" target=\"_blank\" rel=\"noopener\">使用阿里云NTP服务器</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"synergy 一套键鼠多台设备共享","date":"2017-02-08T09:44:28.000Z","_content":"Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n\n## 下载最新稳定版本[最新稳定版本](https://www.brahma.world/synergy-stable-builds/)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-v1.8.8-stable-Windows-x64.msi](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi) 和 [synergy-v1.8.8-stable-Linux-x86_64.deb](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb)\n\n## 获取序列号\n[Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)](http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html)\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","source":"_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","raw":"---\ntitle: synergy 一套键鼠多台设备共享\ndate: 2017-02-08 17:44:28\ntags: [synergy]\ncategories: [工具]\n---\nSynergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n\n## 下载最新稳定版本[最新稳定版本](https://www.brahma.world/synergy-stable-builds/)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-v1.8.8-stable-Windows-x64.msi](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi) 和 [synergy-v1.8.8-stable-Linux-x86_64.deb](https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb)\n\n## 获取序列号\n[Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)](http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html)\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","slug":"share-mouse-and-keyboard-with-your-windows-linux-machines-md","published":1,"updated":"2019-08-16T05:56:21.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojef003024do643s6wlt","content":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>\n<a id=\"more\"></a>\n<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\" target=\"_blank\" rel=\"noopener\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\" target=\"_blank\" rel=\"noopener\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"下载最新稳定版本最新稳定版本\"><a href=\"#下载最新稳定版本最新稳定版本\" class=\"headerlink\" title=\"下载最新稳定版本最新稳定版本\"></a>下载最新稳定版本<a href=\"https://www.brahma.world/synergy-stable-builds/\" target=\"_blank\" rel=\"noopener\">最新稳定版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Windows-x64.msi</a> 和 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p><a href=\"http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html\" target=\"_blank\" rel=\"noopener\">Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)</a></p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\" target=\"_blank\" rel=\"noopener\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></span><br><span class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></span><br><span class=\"line\"><span class=\"comment\"># 所以手动下载</span></span><br><span class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></span><br><span class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">nohup synergy &amp;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>\n","site":{"data":{}},"excerpt":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>","more":"<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\" target=\"_blank\" rel=\"noopener\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\" target=\"_blank\" rel=\"noopener\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"下载最新稳定版本最新稳定版本\"><a href=\"#下载最新稳定版本最新稳定版本\" class=\"headerlink\" title=\"下载最新稳定版本最新稳定版本\"></a>下载最新稳定版本<a href=\"https://www.brahma.world/synergy-stable-builds/\" target=\"_blank\" rel=\"noopener\">最新稳定版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Windows-x64.msi\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Windows-x64.msi</a> 和 <a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb\" target=\"_blank\" rel=\"noopener\">synergy-v1.8.8-stable-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p><a href=\"http://mrlithium.blogspot.com/2017/06/synergy-serial-number-activation-key.html\" target=\"_blank\" rel=\"noopener\">Synergy and Serial Number Activation Key for SSL security - Reverse Engineering the source code (easy)</a></p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\" target=\"_blank\" rel=\"noopener\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></span><br><span class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></span><br><span class=\"line\"><span class=\"comment\"># 所以手动下载</span></span><br><span class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/brahma-dev/synergy-stable-builds/releases/download/v1.8.8-stable/synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></span><br><span class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i synergy-v1.8.8-stable-Linux-x86_64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">nohup synergy &amp;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>"},{"title":"029-解决sentry禁用qq邮箱问题","date":"2019-07-01T12:00:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第29篇，定个小目标999，每周最少2篇。\n\n\nSentry是一款错误日志采集、聚合框架。有Saas版，也可以本地部署。部署可以参考官网或者我之前写的 [30-前端错误日志上报及网站统计(sentry+matomo)](https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/)\n\n本文主要讲解Sentry默认禁用qq邮箱的排查思路以及如何解决。\n\n添加和自行注册qq邮箱都报无效邮箱。<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1561966878110-16806fe5-58ff-4d1d-8287-933328fd8819.png#align=left&display=inline&height=240&originHeight=456&originWidth=1418&size=0&status=done&width=746)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561967139251-c939294d-9ed6-4301-8c4b-c51719989847.png#align=left&display=inline&height=382&name=image.png&originHeight=382&originWidth=633&size=27110&status=done&width=633)\n\n但是QQ邮箱，烂归烂，在国内存量还是挺大的。\n\n<!-- more -->\n\n<a name=\"DyCB3\"></a>\n## 排查思路\nF12大法，看到错误信息是从服务端返回的。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561967659211-59f1fb29-96aa-4625-bead-5d07788aa142.png#align=left&display=inline&height=525&name=image.png&originHeight=525&originWidth=1144&size=76127&status=done&width=1144)\n\n拿到 错误提示 `Enter a valid email address.` 去github搜，<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968321654-bdbf1381-1e9c-43aa-b7f8-0c612ce52933.png#align=left&display=inline&height=806&name=image.png&originHeight=806&originWidth=822&size=89255&status=done&width=822)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968360680-7a687c4f-93d4-4ea6-97c9-ecad24a46ed8.png#align=left&display=inline&height=159&name=image.png&originHeight=159&originWidth=426&size=16407&status=done&width=426)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968410999-fdcfeef4-7f04-461e-b3a6-a697a83ae7e2.png#align=left&display=inline&height=109&name=image.png&originHeight=109&originWidth=596&size=8716&status=done&width=596)<br />拿到 `INVALID_EMAIL_ADDRESS_PATTERN` 再次搜索<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968483952-2f2b929e-e20a-4cff-999c-8a8f877f1f5a.png#align=left&display=inline&height=514&name=image.png&originHeight=514&originWidth=1080&size=60182&status=done&width=1080)<br />居然是硬编码到代码里的。发现有两个相关的issues.\n\n通过 [getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541](https://github.com/getsentry/sentry/issues/13541) 了解到，官方发现，qq.com 是有很多滥用行为，所以直接硬编码拉黑 [捂脸] .\n\n<a name=\"0Izxl\"></a>\n## 解决\n解决的办法也简单，如果是本地运行的，修改 `/usr/local/lib/python2.7/site-packages/sentry/conf/server.py` ,如果是sass版的，换个邮箱。\n\n注意，如果是 docker 运行的， `docker exec -it sentry /bin/sh`  -> `sed -i \"s/qq/xx/g\" /usr/local/lib/python2.7/site-packages/sentry/conf/server.py` ,重新拉取镜像时，又会变回 `qq.com` \n\n可以 将  `/usr/local/lib/python2.7/site-packages/sentry/conf/server.py`  挂载到宿主机 `docker run -v /opt/sentry/server.py:/usr/local/lib/python2.7/site-packages/sentry/conf/server.py ....` \n\n<a name=\"oz04Q\"></a>\n## 参考资料\n\n- [我的个人博客](https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/)\n- [我的掘金](https://juejin.im/post/5d22029b6fb9a07ecd3d7f25)\n- [getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541](https://github.com/getsentry/sentry/issues/13541)\n\n","source":"_posts/sentry-qq-mail.md","raw":"\n---\n\ntitle: 029-解决sentry禁用qq邮箱问题\n\ndate: 2019-07-01 20:00:00 +0800\n\ntags: [sentry,运维,日志]\n\ncategories: 运维\n\n---\n> 这是坚持技术写作计划（含翻译）的第29篇，定个小目标999，每周最少2篇。\n\n\nSentry是一款错误日志采集、聚合框架。有Saas版，也可以本地部署。部署可以参考官网或者我之前写的 [30-前端错误日志上报及网站统计(sentry+matomo)](https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/)\n\n本文主要讲解Sentry默认禁用qq邮箱的排查思路以及如何解决。\n\n添加和自行注册qq邮箱都报无效邮箱。<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1561966878110-16806fe5-58ff-4d1d-8287-933328fd8819.png#align=left&display=inline&height=240&originHeight=456&originWidth=1418&size=0&status=done&width=746)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561967139251-c939294d-9ed6-4301-8c4b-c51719989847.png#align=left&display=inline&height=382&name=image.png&originHeight=382&originWidth=633&size=27110&status=done&width=633)\n\n但是QQ邮箱，烂归烂，在国内存量还是挺大的。\n\n<!-- more -->\n\n<a name=\"DyCB3\"></a>\n## 排查思路\nF12大法，看到错误信息是从服务端返回的。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561967659211-59f1fb29-96aa-4625-bead-5d07788aa142.png#align=left&display=inline&height=525&name=image.png&originHeight=525&originWidth=1144&size=76127&status=done&width=1144)\n\n拿到 错误提示 `Enter a valid email address.` 去github搜，<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968321654-bdbf1381-1e9c-43aa-b7f8-0c612ce52933.png#align=left&display=inline&height=806&name=image.png&originHeight=806&originWidth=822&size=89255&status=done&width=822)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968360680-7a687c4f-93d4-4ea6-97c9-ecad24a46ed8.png#align=left&display=inline&height=159&name=image.png&originHeight=159&originWidth=426&size=16407&status=done&width=426)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968410999-fdcfeef4-7f04-461e-b3a6-a697a83ae7e2.png#align=left&display=inline&height=109&name=image.png&originHeight=109&originWidth=596&size=8716&status=done&width=596)<br />拿到 `INVALID_EMAIL_ADDRESS_PATTERN` 再次搜索<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561968483952-2f2b929e-e20a-4cff-999c-8a8f877f1f5a.png#align=left&display=inline&height=514&name=image.png&originHeight=514&originWidth=1080&size=60182&status=done&width=1080)<br />居然是硬编码到代码里的。发现有两个相关的issues.\n\n通过 [getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541](https://github.com/getsentry/sentry/issues/13541) 了解到，官方发现，qq.com 是有很多滥用行为，所以直接硬编码拉黑 [捂脸] .\n\n<a name=\"0Izxl\"></a>\n## 解决\n解决的办法也简单，如果是本地运行的，修改 `/usr/local/lib/python2.7/site-packages/sentry/conf/server.py` ,如果是sass版的，换个邮箱。\n\n注意，如果是 docker 运行的， `docker exec -it sentry /bin/sh`  -> `sed -i \"s/qq/xx/g\" /usr/local/lib/python2.7/site-packages/sentry/conf/server.py` ,重新拉取镜像时，又会变回 `qq.com` \n\n可以 将  `/usr/local/lib/python2.7/site-packages/sentry/conf/server.py`  挂载到宿主机 `docker run -v /opt/sentry/server.py:/usr/local/lib/python2.7/site-packages/sentry/conf/server.py ....` \n\n<a name=\"oz04Q\"></a>\n## 参考资料\n\n- [我的个人博客](https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/)\n- [我的掘金](https://juejin.im/post/5d22029b6fb9a07ecd3d7f25)\n- [getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541](https://github.com/getsentry/sentry/issues/13541)\n\n","slug":"sentry-qq-mail","published":1,"updated":"2019-08-16T06:11:14.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojeh003424dopufw0fj6","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第29篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>Sentry是一款错误日志采集、聚合框架。有Saas版，也可以本地部署。部署可以参考官网或者我之前写的 <a href=\"https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/\">30-前端错误日志上报及网站统计(sentry+matomo)</a></p>\n<p>本文主要讲解Sentry默认禁用qq邮箱的排查思路以及如何解决。</p>\n<p>添加和自行注册qq邮箱都报无效邮箱。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561966878110-16806fe5-58ff-4d1d-8287-933328fd8819.png#align=left&amp;display=inline&amp;height=240&amp;originHeight=456&amp;originWidth=1418&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561967139251-c939294d-9ed6-4301-8c4b-c51719989847.png#align=left&amp;display=inline&amp;height=382&amp;name=image.png&amp;originHeight=382&amp;originWidth=633&amp;size=27110&amp;status=done&amp;width=633\" alt=\"image.png\"></p>\n<p>但是QQ邮箱，烂归烂，在国内存量还是挺大的。</p>\n<a id=\"more\"></a>\n<p><a name=\"DyCB3\"></a></p>\n<h2 id=\"排查思路\"><a href=\"#排查思路\" class=\"headerlink\" title=\"排查思路\"></a>排查思路</h2><p>F12大法，看到错误信息是从服务端返回的。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561967659211-59f1fb29-96aa-4625-bead-5d07788aa142.png#align=left&amp;display=inline&amp;height=525&amp;name=image.png&amp;originHeight=525&amp;originWidth=1144&amp;size=76127&amp;status=done&amp;width=1144\" alt=\"image.png\"></p>\n<p>拿到 错误提示 <code>Enter a valid email address.</code> 去github搜，<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968321654-bdbf1381-1e9c-43aa-b7f8-0c612ce52933.png#align=left&amp;display=inline&amp;height=806&amp;name=image.png&amp;originHeight=806&amp;originWidth=822&amp;size=89255&amp;status=done&amp;width=822\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968360680-7a687c4f-93d4-4ea6-97c9-ecad24a46ed8.png#align=left&amp;display=inline&amp;height=159&amp;name=image.png&amp;originHeight=159&amp;originWidth=426&amp;size=16407&amp;status=done&amp;width=426\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968410999-fdcfeef4-7f04-461e-b3a6-a697a83ae7e2.png#align=left&amp;display=inline&amp;height=109&amp;name=image.png&amp;originHeight=109&amp;originWidth=596&amp;size=8716&amp;status=done&amp;width=596\" alt=\"image.png\"><br>拿到 <code>INVALID_EMAIL_ADDRESS_PATTERN</code> 再次搜索<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968483952-2f2b929e-e20a-4cff-999c-8a8f877f1f5a.png#align=left&amp;display=inline&amp;height=514&amp;name=image.png&amp;originHeight=514&amp;originWidth=1080&amp;size=60182&amp;status=done&amp;width=1080\" alt=\"image.png\"><br>居然是硬编码到代码里的。发现有两个相关的issues.</p>\n<p>通过 <a href=\"https://github.com/getsentry/sentry/issues/13541\" target=\"_blank\" rel=\"noopener\">getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541</a> 了解到，官方发现，qq.com 是有很多滥用行为，所以直接硬编码拉黑 [捂脸] .</p>\n<p><a name=\"0Izxl\"></a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>解决的办法也简单，如果是本地运行的，修改 <code>/usr/local/lib/python2.7/site-packages/sentry/conf/server.py</code> ,如果是sass版的，换个邮箱。</p>\n<p>注意，如果是 docker 运行的， <code>docker exec -it sentry /bin/sh</code>  -&gt; <code>sed -i &quot;s/qq/xx/g&quot; /usr/local/lib/python2.7/site-packages/sentry/conf/server.py</code> ,重新拉取镜像时，又会变回 <code>qq.com</code> </p>\n<p>可以 将  <code>/usr/local/lib/python2.7/site-packages/sentry/conf/server.py</code>  挂载到宿主机 <code>docker run -v /opt/sentry/server.py:/usr/local/lib/python2.7/site-packages/sentry/conf/server.py ....</code> </p>\n<p><a name=\"oz04Q\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/\">我的个人博客</a></li>\n<li><a href=\"https://juejin.im/post/5d22029b6fb9a07ecd3d7f25\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://github.com/getsentry/sentry/issues/13541\" target=\"_blank\" rel=\"noopener\">getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第29篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>Sentry是一款错误日志采集、聚合框架。有Saas版，也可以本地部署。部署可以参考官网或者我之前写的 <a href=\"https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/\">30-前端错误日志上报及网站统计(sentry+matomo)</a></p>\n<p>本文主要讲解Sentry默认禁用qq邮箱的排查思路以及如何解决。</p>\n<p>添加和自行注册qq邮箱都报无效邮箱。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561966878110-16806fe5-58ff-4d1d-8287-933328fd8819.png#align=left&amp;display=inline&amp;height=240&amp;originHeight=456&amp;originWidth=1418&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561967139251-c939294d-9ed6-4301-8c4b-c51719989847.png#align=left&amp;display=inline&amp;height=382&amp;name=image.png&amp;originHeight=382&amp;originWidth=633&amp;size=27110&amp;status=done&amp;width=633\" alt=\"image.png\"></p>\n<p>但是QQ邮箱，烂归烂，在国内存量还是挺大的。</p>","more":"<p><a name=\"DyCB3\"></a></p>\n<h2 id=\"排查思路\"><a href=\"#排查思路\" class=\"headerlink\" title=\"排查思路\"></a>排查思路</h2><p>F12大法，看到错误信息是从服务端返回的。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561967659211-59f1fb29-96aa-4625-bead-5d07788aa142.png#align=left&amp;display=inline&amp;height=525&amp;name=image.png&amp;originHeight=525&amp;originWidth=1144&amp;size=76127&amp;status=done&amp;width=1144\" alt=\"image.png\"></p>\n<p>拿到 错误提示 <code>Enter a valid email address.</code> 去github搜，<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968321654-bdbf1381-1e9c-43aa-b7f8-0c612ce52933.png#align=left&amp;display=inline&amp;height=806&amp;name=image.png&amp;originHeight=806&amp;originWidth=822&amp;size=89255&amp;status=done&amp;width=822\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968360680-7a687c4f-93d4-4ea6-97c9-ecad24a46ed8.png#align=left&amp;display=inline&amp;height=159&amp;name=image.png&amp;originHeight=159&amp;originWidth=426&amp;size=16407&amp;status=done&amp;width=426\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968410999-fdcfeef4-7f04-461e-b3a6-a697a83ae7e2.png#align=left&amp;display=inline&amp;height=109&amp;name=image.png&amp;originHeight=109&amp;originWidth=596&amp;size=8716&amp;status=done&amp;width=596\" alt=\"image.png\"><br>拿到 <code>INVALID_EMAIL_ADDRESS_PATTERN</code> 再次搜索<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561968483952-2f2b929e-e20a-4cff-999c-8a8f877f1f5a.png#align=left&amp;display=inline&amp;height=514&amp;name=image.png&amp;originHeight=514&amp;originWidth=1080&amp;size=60182&amp;status=done&amp;width=1080\" alt=\"image.png\"><br>居然是硬编码到代码里的。发现有两个相关的issues.</p>\n<p>通过 <a href=\"https://github.com/getsentry/sentry/issues/13541\" target=\"_blank\" rel=\"noopener\">getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541</a> 了解到，官方发现，qq.com 是有很多滥用行为，所以直接硬编码拉黑 [捂脸] .</p>\n<p><a name=\"0Izxl\"></a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>解决的办法也简单，如果是本地运行的，修改 <code>/usr/local/lib/python2.7/site-packages/sentry/conf/server.py</code> ,如果是sass版的，换个邮箱。</p>\n<p>注意，如果是 docker 运行的， <code>docker exec -it sentry /bin/sh</code>  -&gt; <code>sed -i &quot;s/qq/xx/g&quot; /usr/local/lib/python2.7/site-packages/sentry/conf/server.py</code> ,重新拉取镜像时，又会变回 <code>qq.com</code> </p>\n<p>可以 将  <code>/usr/local/lib/python2.7/site-packages/sentry/conf/server.py</code>  挂载到宿主机 <code>docker run -v /opt/sentry/server.py:/usr/local/lib/python2.7/site-packages/sentry/conf/server.py ....</code> </p>\n<p><a name=\"oz04Q\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install/\">我的个人博客</a></li>\n<li><a href=\"https://juejin.im/post/5d22029b6fb9a07ecd3d7f25\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://github.com/getsentry/sentry/issues/13541\" target=\"_blank\" rel=\"noopener\">getsentry/sentry How to custom INVALID_EMAIL_ADDRESS_PATTERN? #13541</a></li>\n</ul>"},{"title":"openresty使用火焰图排查性能问题","date":"2017-09-12T08:31:40.000Z","_content":"\n本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图\n\n## 安装调试镜像\n\n```bash\n\n# 导入 GPG key\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 428D7C01 C8CAB6595FDFF622\n\necho \"deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse\ndeb http://ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiverse\ndeb http://ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse\" | \\\nsudo tee -a /etc/apt/sources.list.d/ddebs.list\n\n# 更新\nsudo apt-get update\n\n# 安装调试镜像\nsudo apt-get install -y linux-image-$(uname -r)-dbgsym\n\n```\n\n<!--more-->\n\n## 安装最新版 systemtap\n\n```\n$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext\n\n# https://sourceware.org/elfutils/ftp/?C=M;O=D\n$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2\n$ tar xf elfutils-0.170.tar.bz2\n\n# https://sourceware.org/systemtap/ftp/releases/?C=M;O=D\n$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz\n$ tar zxf systemtap-3.1.tar.gz\n\n$ cd systemtap-3.1\n\n$ ./configure --prefix=/opt/stap --disable-docs \\\n    --disable-publican --disable-refdocs CFLAGS=\"-g -O2\" \\\n    --with-elfutils=../elfutils-0.170\n\n$ make -j$(getconf _NPROCESSORS_ONLN) && sudo make install\n\n# export STAP_HOME=/opt/stap/\n# export PATH=$STAP_HOME:$PATH\n\n# stap -V\n\nSystemtap translator/driver (version 3.1/0.170, non-git sources)\nCopyright (C) 2005-2017 Red Hat, Inc. and others\nThis is free software; see the source for copying conditions.\ntested kernel versions: 2.6.18 ... 4.10-rc8\nenabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE\n\n```\n\n## 测试是否生效\n\n```\n# stap -v -e 'probe vfs.read {printf(\"read performed\\n\"); exit()}'\nPass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.\nPass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.\nPass 3: translated to C into \"/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c\" using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.\nPass 4: compiled C into \"stap_e1c4934460a3e749f6deefe95dd50015_2729.ko\" in 5260usr/420sys/7185real ms.\nPass 5: starting run.\nread performed\nPass 5: run completed in 0usr/20sys/486real ms.\n\n```\n\n## 绘制火焰图\n\n### 下载各工具包\n```\n# git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx\n# export STAP_PLUS_HOME=/opt/stapxx\n# export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH\n\n# stap++ -e 'probe begin { println(\"hello\") exit() }'\n\nhello\n\n\n# git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit\n\n# git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph\n```\n\n### 绘制火焰图\n```\n# /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk '/worker/  {print$2}'| shuf | head -n 1` > /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）\n# /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt > /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)\n# /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt > /tmp/flame.cbt\n# /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt > /tmp/flame.svg\n```\n\n为了突出效果，建议在运行`stap++`的时候，使用压测工具，以便采集足够的样本\n\n```\n# ab -n 10000 -c 100 -k http://localhost/\n```\n\n用浏览器打开 `/tmp/flame.svg` 尽量用 `chrome` `firefox`别用国产乱七八糟浏览器.\n\n## openresty/stapxx\n\n```\n## 使用 stap++ --args xx.sxx查看具体参数\n\n# stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx\n    --arg depth=VALUE (default: 30)\n    --arg detailed=VALUE (default: 0)\n    --arg limit=VALUE (default: 1000)\n    --arg min=VALUE (default: 2)\n    --arg nointerp=VALUE (default: )\n    --arg nojit=VALUE (default: )\n    --arg probe=VALUE (default: timer.profile)\n    --arg time=VALUE (default: )\n```\n\n具体脚本用法，参见 [openresty/stapxx#samples][]\n\n## openresty/openresty-systemtap-toolkit\n\n这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见[readme][].\n\n如果要使用`ngx-leaked-pools`需要用到`dtrace`\n```bash\n$ apt install systemtap-sdt-dev -y\n$ ./configure --prefix=/etc/openresty \\\n  --with-dtrace-probes\n```\n\n如果要用到`ngx-pcrejit`需要在编译openresty时增加`--with-pcre-opt=-g`\n\n重新编译并`make && make install` 后会将原有的二进制文件重命名为`${openresty_home}/nginx/sbin/nginx.old`，并创建一个`${openresty_home}/nginx/sbin/nginx`(新版)\n\n```bash\n$ kill -USR2 `cat /var/run/nginx.pid`\n```\n\n通过`ps -fC nginx`或者`ps -fC openresty`查看新版本是否成功启动\n\n如果成功启动，此时新旧版本同时接受请求\n\n通过\n```\n$ kill -QUIT `cat /var/run/nginx.pid.oldbin`\n```\n\n平滑杀掉旧版\n\n\n更多资料请自行谷歌、百度。或者参阅 下面的**参考连接**\n\n## 参考连接 \n\n- [白话火焰图-火丁笔记][]\n- [Build Systemtap-openresty官方文档][linkBuildSystemtap-openresty官方文档]\n- [火焰图-openresty最佳实践][]\n- [Systemtap - ubuntu wiki][Systemtap-UbuntuWiki]\n- [Debug Symbol Packages][Debug-Symbol-Packages]\n- [openresty/stapxx][]\n- [openresty/openresty-systemtap-toolkit][]\n- [brendangregg/FlameGraph][]\n- [虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级][虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]\n\n\n博客 [https://anjia.ml/2017/09/12/stap/][blog]\n掘金 [https://juejin.im/post/59ce27fef265da065b66d54b][juejin]\n简书 [http://www.jianshu.com/p/008fde8837f5][jianshu]\n\n[blog]: https://anjia.ml/2017/09/12/stap/\n[juejin]: https://juejin.im/post/59ce27fef265da065b66d54b\n[jianshu]: http://www.jianshu.com/p/008fde8837f5\n\n[Debug-Symbol-Packages](https://wiki.ubuntu.com/Debug%20Symbol%20Packages)\n[白话火焰图-火丁笔记]: https://huoding.com/2016/08/18/531\n[linkBuildSystemtap-openresty官方文档]: http://openresty.org/en/build-systemtap.html\n[火焰图-openresty最佳实践]: https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\n[Systemtap-UbuntuWiki]: https://wiki.ubuntu.com/Kernel/Systemtap\n[openresty/stapxx]: https://github.com/openresty/stapxx/blob/master/README.markdown\n[openresty/openresty-systemtap-toolkit]: https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\n[brendangregg/FlameGraph]: https://github.com/brendangregg/FlameGraph/blob/master/README.md\n[openresty/stapxx#samples]: https://github.com/openresty/stapxx#samples\n[readme]: https://github.com/openresty/openresty-systemtap-toolkit/#tools\n[虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]: http://zachary-guo.iteye.com/blog/1358312\n","source":"_posts/stap.md","raw":"---\ntitle: openresty使用火焰图排查性能问题\ndate: 2017-09-12 16:31:40\ntags: [openresty,stap,systemtap,flame-graph]\n---\n\n本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图\n\n## 安装调试镜像\n\n```bash\n\n# 导入 GPG key\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 428D7C01 C8CAB6595FDFF622\n\necho \"deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse\ndeb http://ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiverse\ndeb http://ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse\" | \\\nsudo tee -a /etc/apt/sources.list.d/ddebs.list\n\n# 更新\nsudo apt-get update\n\n# 安装调试镜像\nsudo apt-get install -y linux-image-$(uname -r)-dbgsym\n\n```\n\n<!--more-->\n\n## 安装最新版 systemtap\n\n```\n$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext\n\n# https://sourceware.org/elfutils/ftp/?C=M;O=D\n$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2\n$ tar xf elfutils-0.170.tar.bz2\n\n# https://sourceware.org/systemtap/ftp/releases/?C=M;O=D\n$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz\n$ tar zxf systemtap-3.1.tar.gz\n\n$ cd systemtap-3.1\n\n$ ./configure --prefix=/opt/stap --disable-docs \\\n    --disable-publican --disable-refdocs CFLAGS=\"-g -O2\" \\\n    --with-elfutils=../elfutils-0.170\n\n$ make -j$(getconf _NPROCESSORS_ONLN) && sudo make install\n\n# export STAP_HOME=/opt/stap/\n# export PATH=$STAP_HOME:$PATH\n\n# stap -V\n\nSystemtap translator/driver (version 3.1/0.170, non-git sources)\nCopyright (C) 2005-2017 Red Hat, Inc. and others\nThis is free software; see the source for copying conditions.\ntested kernel versions: 2.6.18 ... 4.10-rc8\nenabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE\n\n```\n\n## 测试是否生效\n\n```\n# stap -v -e 'probe vfs.read {printf(\"read performed\\n\"); exit()}'\nPass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.\nPass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.\nPass 3: translated to C into \"/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c\" using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.\nPass 4: compiled C into \"stap_e1c4934460a3e749f6deefe95dd50015_2729.ko\" in 5260usr/420sys/7185real ms.\nPass 5: starting run.\nread performed\nPass 5: run completed in 0usr/20sys/486real ms.\n\n```\n\n## 绘制火焰图\n\n### 下载各工具包\n```\n# git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx\n# export STAP_PLUS_HOME=/opt/stapxx\n# export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH\n\n# stap++ -e 'probe begin { println(\"hello\") exit() }'\n\nhello\n\n\n# git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit\n\n# git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph\n```\n\n### 绘制火焰图\n```\n# /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk '/worker/  {print$2}'| shuf | head -n 1` > /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）\n# /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt > /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)\n# /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt > /tmp/flame.cbt\n# /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt > /tmp/flame.svg\n```\n\n为了突出效果，建议在运行`stap++`的时候，使用压测工具，以便采集足够的样本\n\n```\n# ab -n 10000 -c 100 -k http://localhost/\n```\n\n用浏览器打开 `/tmp/flame.svg` 尽量用 `chrome` `firefox`别用国产乱七八糟浏览器.\n\n## openresty/stapxx\n\n```\n## 使用 stap++ --args xx.sxx查看具体参数\n\n# stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx\n    --arg depth=VALUE (default: 30)\n    --arg detailed=VALUE (default: 0)\n    --arg limit=VALUE (default: 1000)\n    --arg min=VALUE (default: 2)\n    --arg nointerp=VALUE (default: )\n    --arg nojit=VALUE (default: )\n    --arg probe=VALUE (default: timer.profile)\n    --arg time=VALUE (default: )\n```\n\n具体脚本用法，参见 [openresty/stapxx#samples][]\n\n## openresty/openresty-systemtap-toolkit\n\n这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见[readme][].\n\n如果要使用`ngx-leaked-pools`需要用到`dtrace`\n```bash\n$ apt install systemtap-sdt-dev -y\n$ ./configure --prefix=/etc/openresty \\\n  --with-dtrace-probes\n```\n\n如果要用到`ngx-pcrejit`需要在编译openresty时增加`--with-pcre-opt=-g`\n\n重新编译并`make && make install` 后会将原有的二进制文件重命名为`${openresty_home}/nginx/sbin/nginx.old`，并创建一个`${openresty_home}/nginx/sbin/nginx`(新版)\n\n```bash\n$ kill -USR2 `cat /var/run/nginx.pid`\n```\n\n通过`ps -fC nginx`或者`ps -fC openresty`查看新版本是否成功启动\n\n如果成功启动，此时新旧版本同时接受请求\n\n通过\n```\n$ kill -QUIT `cat /var/run/nginx.pid.oldbin`\n```\n\n平滑杀掉旧版\n\n\n更多资料请自行谷歌、百度。或者参阅 下面的**参考连接**\n\n## 参考连接 \n\n- [白话火焰图-火丁笔记][]\n- [Build Systemtap-openresty官方文档][linkBuildSystemtap-openresty官方文档]\n- [火焰图-openresty最佳实践][]\n- [Systemtap - ubuntu wiki][Systemtap-UbuntuWiki]\n- [Debug Symbol Packages][Debug-Symbol-Packages]\n- [openresty/stapxx][]\n- [openresty/openresty-systemtap-toolkit][]\n- [brendangregg/FlameGraph][]\n- [虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级][虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]\n\n\n博客 [https://anjia.ml/2017/09/12/stap/][blog]\n掘金 [https://juejin.im/post/59ce27fef265da065b66d54b][juejin]\n简书 [http://www.jianshu.com/p/008fde8837f5][jianshu]\n\n[blog]: https://anjia.ml/2017/09/12/stap/\n[juejin]: https://juejin.im/post/59ce27fef265da065b66d54b\n[jianshu]: http://www.jianshu.com/p/008fde8837f5\n\n[Debug-Symbol-Packages](https://wiki.ubuntu.com/Debug%20Symbol%20Packages)\n[白话火焰图-火丁笔记]: https://huoding.com/2016/08/18/531\n[linkBuildSystemtap-openresty官方文档]: http://openresty.org/en/build-systemtap.html\n[火焰图-openresty最佳实践]: https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\n[Systemtap-UbuntuWiki]: https://wiki.ubuntu.com/Kernel/Systemtap\n[openresty/stapxx]: https://github.com/openresty/stapxx/blob/master/README.markdown\n[openresty/openresty-systemtap-toolkit]: https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\n[brendangregg/FlameGraph]: https://github.com/brendangregg/FlameGraph/blob/master/README.md\n[openresty/stapxx#samples]: https://github.com/openresty/stapxx#samples\n[readme]: https://github.com/openresty/openresty-systemtap-toolkit/#tools\n[虢兆坤-Nginx的启动、停止、平滑重启、信号控制和平滑升级]: http://zachary-guo.iteye.com/blog/1358312\n","slug":"stap","published":1,"updated":"2019-08-16T05:56:21.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojej003724do7ot29vcd","content":"<p>本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图</p>\n<h2 id=\"安装调试镜像\"><a href=\"#安装调试镜像\" class=\"headerlink\" title=\"安装调试镜像\"></a>安装调试镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入 GPG key</span></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 428D7C01 C8CAB6595FDFF622</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://ddebs.ubuntu.com <span class=\"variable\">$(lsb_release -cs)</span> main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"string\">deb http://ddebs.ubuntu.com <span class=\"variable\">$(lsb_release -cs)</span>-updates main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"string\">deb http://ddebs.ubuntu.com <span class=\"variable\">$(lsb_release -cs)</span>-proposed main restricted universe multiverse\"</span> | \\</span><br><span class=\"line\">sudo tee -a /etc/apt/sources.list.d/ddebs.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装调试镜像</span></span><br><span class=\"line\">sudo apt-get install -y linux-image-$(uname -r)-dbgsym</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"安装最新版-systemtap\"><a href=\"#安装最新版-systemtap\" class=\"headerlink\" title=\"安装最新版 systemtap\"></a>安装最新版 systemtap</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/elfutils/ftp/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2</span><br><span class=\"line\">$ tar xf elfutils-0.170.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/systemtap/ftp/releases/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz</span><br><span class=\"line\">$ tar zxf systemtap-3.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd systemtap-3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/opt/stap --disable-docs \\</span><br><span class=\"line\">    --disable-publican --disable-refdocs CFLAGS=&quot;-g -O2&quot; \\</span><br><span class=\"line\">    --with-elfutils=../elfutils-0.170</span><br><span class=\"line\"></span><br><span class=\"line\">$ make -j$(getconf _NPROCESSORS_ONLN) &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"># export STAP_HOME=/opt/stap/</span><br><span class=\"line\"># export PATH=$STAP_HOME:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap -V</span><br><span class=\"line\"></span><br><span class=\"line\">Systemtap translator/driver (version 3.1/0.170, non-git sources)</span><br><span class=\"line\">Copyright (C) 2005-2017 Red Hat, Inc. and others</span><br><span class=\"line\">This is free software; see the source for copying conditions.</span><br><span class=\"line\">tested kernel versions: 2.6.18 ... 4.10-rc8</span><br><span class=\"line\">enabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试是否生效\"><a href=\"#测试是否生效\" class=\"headerlink\" title=\"测试是否生效\"></a>测试是否生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># stap -v -e &apos;probe vfs.read &#123;printf(&quot;read performed\\n&quot;); exit()&#125;&apos;</span><br><span class=\"line\">Pass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.</span><br><span class=\"line\">Pass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.</span><br><span class=\"line\">Pass 3: translated to C into &quot;/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c&quot; using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.</span><br><span class=\"line\">Pass 4: compiled C into &quot;stap_e1c4934460a3e749f6deefe95dd50015_2729.ko&quot; in 5260usr/420sys/7185real ms.</span><br><span class=\"line\">Pass 5: starting run.</span><br><span class=\"line\">read performed</span><br><span class=\"line\">Pass 5: run completed in 0usr/20sys/486real ms.</span><br></pre></td></tr></table></figure>\n<h2 id=\"绘制火焰图\"><a href=\"#绘制火焰图\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h2><h3 id=\"下载各工具包\"><a href=\"#下载各工具包\" class=\"headerlink\" title=\"下载各工具包\"></a>下载各工具包</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx</span><br><span class=\"line\"># export STAP_PLUS_HOME=/opt/stapxx</span><br><span class=\"line\"># export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ -e &apos;probe begin &#123; println(&quot;hello&quot;) exit() &#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit</span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制火焰图-1\"><a href=\"#绘制火焰图-1\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk &apos;/worker/  &#123;print$2&#125;&apos;| shuf | head -n 1` &gt; /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）</span><br><span class=\"line\"># /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt &gt; /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)</span><br><span class=\"line\"># /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt &gt; /tmp/flame.cbt</span><br><span class=\"line\"># /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt &gt; /tmp/flame.svg</span><br></pre></td></tr></table></figure>\n<p>为了突出效果，建议在运行<code>stap++</code>的时候，使用压测工具，以便采集足够的样本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># ab -n 10000 -c 100 -k http://localhost/</span><br></pre></td></tr></table></figure>\n<p>用浏览器打开 <code>/tmp/flame.svg</code> 尽量用 <code>chrome</code> <code>firefox</code>别用国产乱七八糟浏览器.</p>\n<h2 id=\"openresty-stapxx\"><a href=\"#openresty-stapxx\" class=\"headerlink\" title=\"openresty/stapxx\"></a>openresty/stapxx</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 使用 stap++ --args xx.sxx查看具体参数</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx</span><br><span class=\"line\">    --arg depth=VALUE (default: 30)</span><br><span class=\"line\">    --arg detailed=VALUE (default: 0)</span><br><span class=\"line\">    --arg limit=VALUE (default: 1000)</span><br><span class=\"line\">    --arg min=VALUE (default: 2)</span><br><span class=\"line\">    --arg nointerp=VALUE (default: )</span><br><span class=\"line\">    --arg nojit=VALUE (default: )</span><br><span class=\"line\">    --arg probe=VALUE (default: timer.profile)</span><br><span class=\"line\">    --arg time=VALUE (default: )</span><br></pre></td></tr></table></figure>\n<p>具体脚本用法，参见 <a href=\"https://github.com/openresty/stapxx#samples\" target=\"_blank\" rel=\"noopener\">openresty/stapxx#samples</a></p>\n<h2 id=\"openresty-openresty-systemtap-toolkit\"><a href=\"#openresty-openresty-systemtap-toolkit\" class=\"headerlink\" title=\"openresty/openresty-systemtap-toolkit\"></a>openresty/openresty-systemtap-toolkit</h2><p>这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见<a href=\"https://github.com/openresty/openresty-systemtap-toolkit/#tools\" target=\"_blank\" rel=\"noopener\">readme</a>.</p>\n<p>如果要使用<code>ngx-leaked-pools</code>需要用到<code>dtrace</code><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt install systemtap-sdt-dev -y</span><br><span class=\"line\">$ ./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">  --with-dtrace-probes</span><br></pre></td></tr></table></figure></p>\n<p>如果要用到<code>ngx-pcrejit</code>需要在编译openresty时增加<code>--with-pcre-opt=-g</code></p>\n<p>重新编译并<code>make &amp;&amp; make install</code> 后会将原有的二进制文件重命名为<code>${openresty_home}/nginx/sbin/nginx.old</code>，并创建一个<code>${openresty_home}/nginx/sbin/nginx</code>(新版)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -USR2 `cat /var/run/nginx.pid`</span><br></pre></td></tr></table></figure>\n<p>通过<code>ps -fC nginx</code>或者<code>ps -fC openresty</code>查看新版本是否成功启动</p>\n<p>如果成功启动，此时新旧版本同时接受请求</p>\n<p>通过<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kill -QUIT `cat /var/run/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure></p>\n<p>平滑杀掉旧版</p>\n<p>更多资料请自行谷歌、百度。或者参阅 下面的<strong>参考连接</strong></p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><ul>\n<li><a href=\"https://huoding.com/2016/08/18/531\" target=\"_blank\" rel=\"noopener\">白话火焰图-火丁笔记</a></li>\n<li><a href=\"http://openresty.org/en/build-systemtap.html\" target=\"_blank\" rel=\"noopener\">Build Systemtap-openresty官方文档</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\" target=\"_blank\" rel=\"noopener\">火焰图-openresty最佳实践</a></li>\n<li><a href=\"https://wiki.ubuntu.com/Kernel/Systemtap\" target=\"_blank\" rel=\"noopener\">Systemtap - ubuntu wiki</a></li>\n<li>[Debug Symbol Packages][Debug-Symbol-Packages]</li>\n<li><a href=\"https://github.com/openresty/stapxx/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/stapxx</a></li>\n<li><a href=\"https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/openresty-systemtap-toolkit</a></li>\n<li><a href=\"https://github.com/brendangregg/FlameGraph/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">brendangregg/FlameGraph</a></li>\n<li><a href=\"http://zachary-guo.iteye.com/blog/1358312\" target=\"_blank\" rel=\"noopener\">虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级</a></li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/09/12/stap/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/09/12/stap/</a><br>掘金 <a href=\"https://juejin.im/post/59ce27fef265da065b66d54b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59ce27fef265da065b66d54b</a><br>简书 <a href=\"http://www.jianshu.com/p/008fde8837f5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/008fde8837f5</a></p>\n<p><a href=\"https://wiki.ubuntu.com/Debug%20Symbol%20Packages\" target=\"_blank\" rel=\"noopener\">Debug-Symbol-Packages</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要是讲解如何在ubuntu安装最新Systemtap.以及绘制火焰图</p>\n<h2 id=\"安装调试镜像\"><a href=\"#安装调试镜像\" class=\"headerlink\" title=\"安装调试镜像\"></a>安装调试镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入 GPG key</span></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 428D7C01 C8CAB6595FDFF622</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://ddebs.ubuntu.com <span class=\"variable\">$(lsb_release -cs)</span> main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"string\">deb http://ddebs.ubuntu.com <span class=\"variable\">$(lsb_release -cs)</span>-updates main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"string\">deb http://ddebs.ubuntu.com <span class=\"variable\">$(lsb_release -cs)</span>-proposed main restricted universe multiverse\"</span> | \\</span><br><span class=\"line\">sudo tee -a /etc/apt/sources.list.d/ddebs.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装调试镜像</span></span><br><span class=\"line\">sudo apt-get install -y linux-image-$(uname -r)-dbgsym</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装最新版-systemtap\"><a href=\"#安装最新版-systemtap\" class=\"headerlink\" title=\"安装最新版 systemtap\"></a>安装最新版 systemtap</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y build-essential zlib1g-dev elfutils libdw-dev gettext</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/elfutils/ftp/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/elfutils/ftp/0.170/elfutils-0.170.tar.bz2</span><br><span class=\"line\">$ tar xf elfutils-0.170.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\"># https://sourceware.org/systemtap/ftp/releases/?C=M;O=D</span><br><span class=\"line\">$ wget https://sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz</span><br><span class=\"line\">$ tar zxf systemtap-3.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd systemtap-3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/opt/stap --disable-docs \\</span><br><span class=\"line\">    --disable-publican --disable-refdocs CFLAGS=&quot;-g -O2&quot; \\</span><br><span class=\"line\">    --with-elfutils=../elfutils-0.170</span><br><span class=\"line\"></span><br><span class=\"line\">$ make -j$(getconf _NPROCESSORS_ONLN) &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"># export STAP_HOME=/opt/stap/</span><br><span class=\"line\"># export PATH=$STAP_HOME:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap -V</span><br><span class=\"line\"></span><br><span class=\"line\">Systemtap translator/driver (version 3.1/0.170, non-git sources)</span><br><span class=\"line\">Copyright (C) 2005-2017 Red Hat, Inc. and others</span><br><span class=\"line\">This is free software; see the source for copying conditions.</span><br><span class=\"line\">tested kernel versions: 2.6.18 ... 4.10-rc8</span><br><span class=\"line\">enabled features: PYTHON2 PYTHON3 LIBXML2 NLS READLINE</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试是否生效\"><a href=\"#测试是否生效\" class=\"headerlink\" title=\"测试是否生效\"></a>测试是否生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># stap -v -e &apos;probe vfs.read &#123;printf(&quot;read performed\\n&quot;); exit()&#125;&apos;</span><br><span class=\"line\">Pass 1: parsed user script and 465 library scripts using 77388virt/46648res/5256shr/41840data kb, in 80usr/30sys/333real ms.</span><br><span class=\"line\">Pass 2: analyzed script: 1 probe, 1 function, 7 embeds, 0 globals using 260440virt/231204res/6736shr/224892data kb, in 1680usr/350sys/7050real ms.</span><br><span class=\"line\">Pass 3: translated to C into &quot;/tmp/stap8Lyxq5/stap_e1c4934460a3e749f6deefe95dd50015_2729_src.c&quot; using 260440virt/231404res/6936shr/224892data kb, in 10usr/0sys/5real ms.</span><br><span class=\"line\">Pass 4: compiled C into &quot;stap_e1c4934460a3e749f6deefe95dd50015_2729.ko&quot; in 5260usr/420sys/7185real ms.</span><br><span class=\"line\">Pass 5: starting run.</span><br><span class=\"line\">read performed</span><br><span class=\"line\">Pass 5: run completed in 0usr/20sys/486real ms.</span><br></pre></td></tr></table></figure>\n<h2 id=\"绘制火焰图\"><a href=\"#绘制火焰图\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h2><h3 id=\"下载各工具包\"><a href=\"#下载各工具包\" class=\"headerlink\" title=\"下载各工具包\"></a>下载各工具包</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git clone https://github.com/openresty/stapxx.git --depth=1 /opt/stapxx</span><br><span class=\"line\"># export STAP_PLUS_HOME=/opt/stapxx</span><br><span class=\"line\"># export PATH=$STAP_PLUS_HOME:$STAP_PLUS_HOME/samples:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ -e &apos;probe begin &#123; println(&quot;hello&quot;) exit() &#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/openresty/openresty-systemtap-toolkit.git --depth=1 /opt/openresty-systemtap-toolkit</span><br><span class=\"line\"></span><br><span class=\"line\"># git clone https://github.com/brendangregg/FlameGraph.git --depth=1 /opt/FlameGraph</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制火焰图-1\"><a href=\"#绘制火焰图-1\" class=\"headerlink\" title=\"绘制火焰图\"></a>绘制火焰图</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /opt/stapxx/samples/lj-lua-stacks.sxx --arg time=120 --skip-badvars -x `ps --no-headers -fC nginx|awk &apos;/worker/  &#123;print$2&#125;&apos;| shuf | head -n 1` &gt; /tmp/tmp.bt （-x 是要抓的进程的 pid， 探测结果输出到 tmp.bt）</span><br><span class=\"line\"># /opt/openresty-systemtap-toolkit/fix-lua-bt tmp.bt &gt; /tmp/flame.bt  (处理 lj-lua-stacks.sxx 的输出，使其可读性更佳)</span><br><span class=\"line\"># /opt/FlameGraph/stackcollapse-stap.pl /tmp/flame.bt &gt; /tmp/flame.cbt</span><br><span class=\"line\"># /opt/FlameGraph/flamegraph.pl /tmp/flame.cbt &gt; /tmp/flame.svg</span><br></pre></td></tr></table></figure>\n<p>为了突出效果，建议在运行<code>stap++</code>的时候，使用压测工具，以便采集足够的样本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># ab -n 10000 -c 100 -k http://localhost/</span><br></pre></td></tr></table></figure>\n<p>用浏览器打开 <code>/tmp/flame.svg</code> 尽量用 <code>chrome</code> <code>firefox</code>别用国产乱七八糟浏览器.</p>\n<h2 id=\"openresty-stapxx\"><a href=\"#openresty-stapxx\" class=\"headerlink\" title=\"openresty/stapxx\"></a>openresty/stapxx</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 使用 stap++ --args xx.sxx查看具体参数</span><br><span class=\"line\"></span><br><span class=\"line\"># stap++ --args /opt/stapxx/samples/lj-lua-stacks.sxx</span><br><span class=\"line\">    --arg depth=VALUE (default: 30)</span><br><span class=\"line\">    --arg detailed=VALUE (default: 0)</span><br><span class=\"line\">    --arg limit=VALUE (default: 1000)</span><br><span class=\"line\">    --arg min=VALUE (default: 2)</span><br><span class=\"line\">    --arg nointerp=VALUE (default: )</span><br><span class=\"line\">    --arg nojit=VALUE (default: )</span><br><span class=\"line\">    --arg probe=VALUE (default: timer.profile)</span><br><span class=\"line\">    --arg time=VALUE (default: )</span><br></pre></td></tr></table></figure>\n<p>具体脚本用法，参见 <a href=\"https://github.com/openresty/stapxx#samples\" target=\"_blank\" rel=\"noopener\">openresty/stapxx#samples</a></p>\n<h2 id=\"openresty-openresty-systemtap-toolkit\"><a href=\"#openresty-openresty-systemtap-toolkit\" class=\"headerlink\" title=\"openresty/openresty-systemtap-toolkit\"></a>openresty/openresty-systemtap-toolkit</h2><p>这一系列脚本很有用，比如可以用来看共享内存大小，使用情况，内存泄露情况，哪里泄露的，不过部分脚本需要在编译的时候，开启调试或者增加依赖。具体参见<a href=\"https://github.com/openresty/openresty-systemtap-toolkit/#tools\" target=\"_blank\" rel=\"noopener\">readme</a>.</p>\n<p>如果要使用<code>ngx-leaked-pools</code>需要用到<code>dtrace</code><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt install systemtap-sdt-dev -y</span><br><span class=\"line\">$ ./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">  --with-dtrace-probes</span><br></pre></td></tr></table></figure></p>\n<p>如果要用到<code>ngx-pcrejit</code>需要在编译openresty时增加<code>--with-pcre-opt=-g</code></p>\n<p>重新编译并<code>make &amp;&amp; make install</code> 后会将原有的二进制文件重命名为<code>${openresty_home}/nginx/sbin/nginx.old</code>，并创建一个<code>${openresty_home}/nginx/sbin/nginx</code>(新版)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -USR2 `cat /var/run/nginx.pid`</span><br></pre></td></tr></table></figure>\n<p>通过<code>ps -fC nginx</code>或者<code>ps -fC openresty</code>查看新版本是否成功启动</p>\n<p>如果成功启动，此时新旧版本同时接受请求</p>\n<p>通过<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kill -QUIT `cat /var/run/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure></p>\n<p>平滑杀掉旧版</p>\n<p>更多资料请自行谷歌、百度。或者参阅 下面的<strong>参考连接</strong></p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><ul>\n<li><a href=\"https://huoding.com/2016/08/18/531\" target=\"_blank\" rel=\"noopener\">白话火焰图-火丁笔记</a></li>\n<li><a href=\"http://openresty.org/en/build-systemtap.html\" target=\"_blank\" rel=\"noopener\">Build Systemtap-openresty官方文档</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/flame_graph.html\" target=\"_blank\" rel=\"noopener\">火焰图-openresty最佳实践</a></li>\n<li><a href=\"https://wiki.ubuntu.com/Kernel/Systemtap\" target=\"_blank\" rel=\"noopener\">Systemtap - ubuntu wiki</a></li>\n<li>[Debug Symbol Packages][Debug-Symbol-Packages]</li>\n<li><a href=\"https://github.com/openresty/stapxx/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/stapxx</a></li>\n<li><a href=\"https://github.com/openresty/openresty-systemtap-toolkit/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">openresty/openresty-systemtap-toolkit</a></li>\n<li><a href=\"https://github.com/brendangregg/FlameGraph/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">brendangregg/FlameGraph</a></li>\n<li><a href=\"http://zachary-guo.iteye.com/blog/1358312\" target=\"_blank\" rel=\"noopener\">虢兆坤- Nginx 的启动、停止、平滑重启、信号控制和平滑升级</a></li>\n</ul>\n<p>博客 <a href=\"https://anjia.ml/2017/09/12/stap/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/09/12/stap/</a><br>掘金 <a href=\"https://juejin.im/post/59ce27fef265da065b66d54b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59ce27fef265da065b66d54b</a><br>简书 <a href=\"http://www.jianshu.com/p/008fde8837f5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/008fde8837f5</a></p>\n<p><a href=\"https://wiki.ubuntu.com/Debug%20Symbol%20Packages\" target=\"_blank\" rel=\"noopener\">Debug-Symbol-Packages</a></p>"},{"title":"039-解决ubuntu使用preseed装机 base-installer/kernel/failed-package-install 问题","date":"2019-08-16T10:30:07.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第39篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍在使用pressed无人装机安装ubuntu时，偶尔出现<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1565929377804-60abd47c-6890-4bca-b20b-7132192158e1.png#align=left&display=inline&height=595&originHeight=595&originWidth=801&size=0&status=done&width=801)\n\n```bash\nUnexpected error; command not executed: 'sh -c debconf-apt-progress --no-progress --logstederr -- apt-get -q -y --no-remove install busybox-initramfs'\nbase-installer: error: exiting on error base-installer/kernel/failed-package-install\n```\n的解决方案。\n\n之前写的几篇无人装机的文章(有基于cobbler和cloudboot的)\n\n- [010-cloudboot批量安装rancheros](https://juejin.im/post/5c84f9d8f265da2de33f5936)\n- [007-Cobbler批量自动化部署Windows10和Server 2019及激活](https://juejin.im/post/5c748b2af265da2d9262ed0f)\n- [006-Cobbler批量自动化部署CentOS/Ubuntu/Windows](https://juejin.im/post/5c748ae2f265da2d84108d71)\n\n<!-- more -->\n\n<a name=\"2ncpC\"></a>\n## 排查过程\n首先，点击继续，返回上一层页面，选择shell, `cat /var/log/syslog` 找到报错信息 `base-installer: error: exiting on error base-installer/kernel/failed-package-install` <br />在百度和google搜索后，找到跟我类似的问题 [XenServer安装ubuntu16.04遇到的错误](https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/) \n\n但是使用作者的方式处理一遍后，没啥效果，但是阴差阳错的get了 `ctrl+alt+f4` (参考 [Reverting from Ctrl - Alt - F1](https://askubuntu.com/a/157621) )\n\n能看安装日志就简单了，排查就行了，发现是安装ubuntu security时，国外ip被ban了，换成国内源即可。\n\n修改preseed\n\n```bash\nd-i apt-setup/services-select multiselect security\nd-i apt-setup/security_host string mirrors.aliyun.com\nd-i apt-setup/security_path string /ubuntu\n```\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/08/16/ubuntu-preseed-base-installer-kernel)\n- [我的掘金](https://juejin.im/post/5d5638f45188255d51425ced)\n- [XenServer安装ubuntu16.04遇到的错误](https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/)\n- [Reverting from Ctrl - Alt - F1](https://askubuntu.com/a/157621)\n- [Headless Installation: Unable to install busybox-initramfs](https://askubuntu.com/questions/949826/headless-installation-unable-to-install-busybox-initramfs)\n- [How do I configure a preseed to skip the language support question?](https://askubuntu.com/questions/129651/how-do-i-configure-a-preseed-to-skip-the-language-support-question/349841#349841)\n\n\n","source":"_posts/ubuntu-preseed-base-installer-kernel.md","raw":"\n---\n\ntitle: 039-解决ubuntu使用preseed装机 base-installer/kernel/failed-package-install 问题\n\ndate: 2019-08-16 18:30:07 +0800\n\ntags: [pxe,dhcp,cloudboot,ubuntu,preseed]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第39篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍在使用pressed无人装机安装ubuntu时，偶尔出现<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1565929377804-60abd47c-6890-4bca-b20b-7132192158e1.png#align=left&display=inline&height=595&originHeight=595&originWidth=801&size=0&status=done&width=801)\n\n```bash\nUnexpected error; command not executed: 'sh -c debconf-apt-progress --no-progress --logstederr -- apt-get -q -y --no-remove install busybox-initramfs'\nbase-installer: error: exiting on error base-installer/kernel/failed-package-install\n```\n的解决方案。\n\n之前写的几篇无人装机的文章(有基于cobbler和cloudboot的)\n\n- [010-cloudboot批量安装rancheros](https://juejin.im/post/5c84f9d8f265da2de33f5936)\n- [007-Cobbler批量自动化部署Windows10和Server 2019及激活](https://juejin.im/post/5c748b2af265da2d9262ed0f)\n- [006-Cobbler批量自动化部署CentOS/Ubuntu/Windows](https://juejin.im/post/5c748ae2f265da2d84108d71)\n\n<!-- more -->\n\n<a name=\"2ncpC\"></a>\n## 排查过程\n首先，点击继续，返回上一层页面，选择shell, `cat /var/log/syslog` 找到报错信息 `base-installer: error: exiting on error base-installer/kernel/failed-package-install` <br />在百度和google搜索后，找到跟我类似的问题 [XenServer安装ubuntu16.04遇到的错误](https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/) \n\n但是使用作者的方式处理一遍后，没啥效果，但是阴差阳错的get了 `ctrl+alt+f4` (参考 [Reverting from Ctrl - Alt - F1](https://askubuntu.com/a/157621) )\n\n能看安装日志就简单了，排查就行了，发现是安装ubuntu security时，国外ip被ban了，换成国内源即可。\n\n修改preseed\n\n```bash\nd-i apt-setup/services-select multiselect security\nd-i apt-setup/security_host string mirrors.aliyun.com\nd-i apt-setup/security_path string /ubuntu\n```\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/08/16/ubuntu-preseed-base-installer-kernel)\n- [我的掘金](https://juejin.im/post/5d5638f45188255d51425ced)\n- [XenServer安装ubuntu16.04遇到的错误](https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/)\n- [Reverting from Ctrl - Alt - F1](https://askubuntu.com/a/157621)\n- [Headless Installation: Unable to install busybox-initramfs](https://askubuntu.com/questions/949826/headless-installation-unable-to-install-busybox-initramfs)\n- [How do I configure a preseed to skip the language support question?](https://askubuntu.com/questions/129651/how-do-i-configure-a-preseed-to-skip-the-language-support-question/349841#349841)\n\n\n","slug":"ubuntu-preseed-base-installer-kernel","published":1,"updated":"2019-08-16T06:11:14.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojel003c24do4xa6z4u2","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第39篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍在使用pressed无人装机安装ubuntu时，偶尔出现<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1565929377804-60abd47c-6890-4bca-b20b-7132192158e1.png#align=left&amp;display=inline&amp;height=595&amp;originHeight=595&amp;originWidth=801&amp;size=0&amp;status=done&amp;width=801\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Unexpected error; <span class=\"built_in\">command</span> not executed: <span class=\"string\">'sh -c debconf-apt-progress --no-progress --logstederr -- apt-get -q -y --no-remove install busybox-initramfs'</span></span><br><span class=\"line\">base-installer: error: exiting on error base-installer/kernel/failed-package-install</span><br></pre></td></tr></table></figure>\n<p>的解决方案。</p>\n<p>之前写的几篇无人装机的文章(有基于cobbler和cloudboot的)</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5c84f9d8f265da2de33f5936\" target=\"_blank\" rel=\"noopener\">010-cloudboot批量安装rancheros</a></li>\n<li><a href=\"https://juejin.im/post/5c748b2af265da2d9262ed0f\" target=\"_blank\" rel=\"noopener\">007-Cobbler批量自动化部署Windows10和Server 2019及激活</a></li>\n<li><a href=\"https://juejin.im/post/5c748ae2f265da2d84108d71\" target=\"_blank\" rel=\"noopener\">006-Cobbler批量自动化部署CentOS/Ubuntu/Windows</a></li>\n</ul>\n<a id=\"more\"></a>\n<p><a name=\"2ncpC\"></a></p>\n<h2 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h2><p>首先，点击继续，返回上一层页面，选择shell, <code>cat /var/log/syslog</code> 找到报错信息 <code>base-installer: error: exiting on error base-installer/kernel/failed-package-install</code> <br>在百度和google搜索后，找到跟我类似的问题 <a href=\"https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/\" target=\"_blank\" rel=\"noopener\">XenServer安装ubuntu16.04遇到的错误</a> </p>\n<p>但是使用作者的方式处理一遍后，没啥效果，但是阴差阳错的get了 <code>ctrl+alt+f4</code> (参考 <a href=\"https://askubuntu.com/a/157621\" target=\"_blank\" rel=\"noopener\">Reverting from Ctrl - Alt - F1</a> )</p>\n<p>能看安装日志就简单了，排查就行了，发现是安装ubuntu security时，国外ip被ban了，换成国内源即可。</p>\n<p>修改preseed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">d-i apt-setup/services-select multiselect security</span><br><span class=\"line\">d-i apt-setup/security_host string mirrors.aliyun.com</span><br><span class=\"line\">d-i apt-setup/security_path string /ubuntu</span><br></pre></td></tr></table></figure>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/08/16/ubuntu-preseed-base-installer-kernel\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d5638f45188255d51425ced\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/\" target=\"_blank\" rel=\"noopener\">XenServer安装ubuntu16.04遇到的错误</a></li>\n<li><a href=\"https://askubuntu.com/a/157621\" target=\"_blank\" rel=\"noopener\">Reverting from Ctrl - Alt - F1</a></li>\n<li><a href=\"https://askubuntu.com/questions/949826/headless-installation-unable-to-install-busybox-initramfs\" target=\"_blank\" rel=\"noopener\">Headless Installation: Unable to install busybox-initramfs</a></li>\n<li><a href=\"https://askubuntu.com/questions/129651/how-do-i-configure-a-preseed-to-skip-the-language-support-question/349841#349841\" target=\"_blank\" rel=\"noopener\">How do I configure a preseed to skip the language support question?</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第39篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍在使用pressed无人装机安装ubuntu时，偶尔出现<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1565929377804-60abd47c-6890-4bca-b20b-7132192158e1.png#align=left&amp;display=inline&amp;height=595&amp;originHeight=595&amp;originWidth=801&amp;size=0&amp;status=done&amp;width=801\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Unexpected error; <span class=\"built_in\">command</span> not executed: <span class=\"string\">'sh -c debconf-apt-progress --no-progress --logstederr -- apt-get -q -y --no-remove install busybox-initramfs'</span></span><br><span class=\"line\">base-installer: error: exiting on error base-installer/kernel/failed-package-install</span><br></pre></td></tr></table></figure>\n<p>的解决方案。</p>\n<p>之前写的几篇无人装机的文章(有基于cobbler和cloudboot的)</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5c84f9d8f265da2de33f5936\" target=\"_blank\" rel=\"noopener\">010-cloudboot批量安装rancheros</a></li>\n<li><a href=\"https://juejin.im/post/5c748b2af265da2d9262ed0f\" target=\"_blank\" rel=\"noopener\">007-Cobbler批量自动化部署Windows10和Server 2019及激活</a></li>\n<li><a href=\"https://juejin.im/post/5c748ae2f265da2d84108d71\" target=\"_blank\" rel=\"noopener\">006-Cobbler批量自动化部署CentOS/Ubuntu/Windows</a></li>\n</ul>","more":"<p><a name=\"2ncpC\"></a></p>\n<h2 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h2><p>首先，点击继续，返回上一层页面，选择shell, <code>cat /var/log/syslog</code> 找到报错信息 <code>base-installer: error: exiting on error base-installer/kernel/failed-package-install</code> <br>在百度和google搜索后，找到跟我类似的问题 <a href=\"https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/\" target=\"_blank\" rel=\"noopener\">XenServer安装ubuntu16.04遇到的错误</a> </p>\n<p>但是使用作者的方式处理一遍后，没啥效果，但是阴差阳错的get了 <code>ctrl+alt+f4</code> (参考 <a href=\"https://askubuntu.com/a/157621\" target=\"_blank\" rel=\"noopener\">Reverting from Ctrl - Alt - F1</a> )</p>\n<p>能看安装日志就简单了，排查就行了，发现是安装ubuntu security时，国外ip被ban了，换成国内源即可。</p>\n<p>修改preseed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">d-i apt-setup/services-select multiselect security</span><br><span class=\"line\">d-i apt-setup/security_host string mirrors.aliyun.com</span><br><span class=\"line\">d-i apt-setup/security_path string /ubuntu</span><br></pre></td></tr></table></figure>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/08/16/ubuntu-preseed-base-installer-kernel\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d5638f45188255d51425ced\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://imaojia.com/blog/questions/error-install-ubuntu-16-04-on-xenserver/\" target=\"_blank\" rel=\"noopener\">XenServer安装ubuntu16.04遇到的错误</a></li>\n<li><a href=\"https://askubuntu.com/a/157621\" target=\"_blank\" rel=\"noopener\">Reverting from Ctrl - Alt - F1</a></li>\n<li><a href=\"https://askubuntu.com/questions/949826/headless-installation-unable-to-install-busybox-initramfs\" target=\"_blank\" rel=\"noopener\">Headless Installation: Unable to install busybox-initramfs</a></li>\n<li><a href=\"https://askubuntu.com/questions/129651/how-do-i-configure-a-preseed-to-skip-the-language-support-question/349841#349841\" target=\"_blank\" rel=\"noopener\">How do I configure a preseed to skip the language support question?</a></li>\n</ul>"},{"title":"037-vagrant启动(up)后自动同步文件(rsync-auto)","date":"2019-07-29T00:37:45.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第37篇，定个小目标999，每周最少2篇。\n\n\n本文介绍两种vagrant up后自动同步文件(rsync) 分别基于 `sync` 和 `nfs` (如果不设置的话，需要再起一个终端，单独运行 `vagrant rsync-auto` )\n\n另外可以参考我的 [036-win10搭建python的linux开发环境(pycharm+vagrant+virtualbox)](https://juejin.im/post/5d3a55ece51d454f71439dd2)\n\n<!-- more -->\n\n<a name=\"M2lMe\"></a>\n## sync\n\n```bash\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"rsync\",\n    # rsync__verbose: true,\n    # rsync__auto: true,\n    rsync__exclude: ['.git*', 'node_modules*','*.log','*.box','Vagrantfile']\n\n  config.trigger.after :up do |t|\n   t.info = \"rsync auto\"\n   t.run = {inline: \"vagrant rsync-auto\"}\n    # 如果想后台运行，则使用下面语句\n    # t.run = {inline: \"bash -c 'vagrant rsync-auto &'\"}\n  end\n```\n\n参考 [Vagrant Does not Start RSync-Auto on Up or Reload#briancain's reply](https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397)\n\n<a name=\"3GPil\"></a>\n## nfs\n\n经测试，在win10上，需要安装插件（vagrant-vbguest vagrant-winnfsd）\n\n```bash\nvagrant plugin install vagrant-vbguest vagrant-winnfsd\n```\n如果报\n\n```bash\nInstalling the 'vagrant-vbguest' plugin. This can take a few minutes...\nERROR:  SSL verification error at depth 3: unable to get local issuer certificate (20)\nERROR:  You must add /C=US/O=Starfield Technologies, Inc./OU=Starfield Class 2 Certification Authority to your local trusted store\nVagrant failed to load a configured plugin source. This can be caused\nby a variety of issues including: transient connectivity issues, proxy\nfiltering rejecting access to a configured plugin source, or a configured\nplugin source not responding correctly. Please review the error message\nbelow to help resolve the issue:\n\n  SSL_connect returned=1 errno=0 state=error: certificate verify failed (https://gems.hashicorp.com/specs.4.8.gz)\n\nSource: https://gems.hashicorp.com/\n```\n需要设置CAfile\n\n```bash\nset SSL_CERT_FILE=\"path\\to\\Vagrant\\embedded\\cacert.pem\"\n```\n如果下载速度慢，并且有境外代理服务器，可以考虑设置代理\n\n```bash\nset http_proxy=http://username:password@ip:port\nset https_proxy=http://username:password@ip:port\n```\n\n设置Vagrantfile\n```bash\n  # ... 忽略无关内容\n  config.vm.synced_folder \".\", \"/vagrant\",\n     type:\"nfs\"\n  # ... 忽略无关内容\n```\n\n<a name=\"qruRF\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/08/14/vagrant-startup-run-rsync/)\n- [我的掘金](https://juejin.im/post/5d562b5e5188252d43756db8)\n- [Vagrant Does not Start RSync-Auto on Up or Reload#briancain's reply](https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397)\n- [How to speed up Vagrant on Windows 10 using NFS](https://peshmerge.io/how-to-speed-up-vagrant-on-windows-10-using-nfs/)\n\n","source":"_posts/vagrant-startup-run-rsync.md","raw":"\n---\n\ntitle: 037-vagrant启动(up)后自动同步文件(rsync-auto)\n\ndate: 2019-07-29 08:37:45 +0800\n\ntags: [虚拟机,kvm,vagrant,virtualbox,python]\n\ncategories: python\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第37篇，定个小目标999，每周最少2篇。\n\n\n本文介绍两种vagrant up后自动同步文件(rsync) 分别基于 `sync` 和 `nfs` (如果不设置的话，需要再起一个终端，单独运行 `vagrant rsync-auto` )\n\n另外可以参考我的 [036-win10搭建python的linux开发环境(pycharm+vagrant+virtualbox)](https://juejin.im/post/5d3a55ece51d454f71439dd2)\n\n<!-- more -->\n\n<a name=\"M2lMe\"></a>\n## sync\n\n```bash\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"rsync\",\n    # rsync__verbose: true,\n    # rsync__auto: true,\n    rsync__exclude: ['.git*', 'node_modules*','*.log','*.box','Vagrantfile']\n\n  config.trigger.after :up do |t|\n   t.info = \"rsync auto\"\n   t.run = {inline: \"vagrant rsync-auto\"}\n    # 如果想后台运行，则使用下面语句\n    # t.run = {inline: \"bash -c 'vagrant rsync-auto &'\"}\n  end\n```\n\n参考 [Vagrant Does not Start RSync-Auto on Up or Reload#briancain's reply](https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397)\n\n<a name=\"3GPil\"></a>\n## nfs\n\n经测试，在win10上，需要安装插件（vagrant-vbguest vagrant-winnfsd）\n\n```bash\nvagrant plugin install vagrant-vbguest vagrant-winnfsd\n```\n如果报\n\n```bash\nInstalling the 'vagrant-vbguest' plugin. This can take a few minutes...\nERROR:  SSL verification error at depth 3: unable to get local issuer certificate (20)\nERROR:  You must add /C=US/O=Starfield Technologies, Inc./OU=Starfield Class 2 Certification Authority to your local trusted store\nVagrant failed to load a configured plugin source. This can be caused\nby a variety of issues including: transient connectivity issues, proxy\nfiltering rejecting access to a configured plugin source, or a configured\nplugin source not responding correctly. Please review the error message\nbelow to help resolve the issue:\n\n  SSL_connect returned=1 errno=0 state=error: certificate verify failed (https://gems.hashicorp.com/specs.4.8.gz)\n\nSource: https://gems.hashicorp.com/\n```\n需要设置CAfile\n\n```bash\nset SSL_CERT_FILE=\"path\\to\\Vagrant\\embedded\\cacert.pem\"\n```\n如果下载速度慢，并且有境外代理服务器，可以考虑设置代理\n\n```bash\nset http_proxy=http://username:password@ip:port\nset https_proxy=http://username:password@ip:port\n```\n\n设置Vagrantfile\n```bash\n  # ... 忽略无关内容\n  config.vm.synced_folder \".\", \"/vagrant\",\n     type:\"nfs\"\n  # ... 忽略无关内容\n```\n\n<a name=\"qruRF\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/08/14/vagrant-startup-run-rsync/)\n- [我的掘金](https://juejin.im/post/5d562b5e5188252d43756db8)\n- [Vagrant Does not Start RSync-Auto on Up or Reload#briancain's reply](https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397)\n- [How to speed up Vagrant on Windows 10 using NFS](https://peshmerge.io/how-to-speed-up-vagrant-on-windows-10-using-nfs/)\n\n","slug":"vagrant-startup-run-rsync","published":1,"updated":"2019-08-16T06:38:11.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojeu003d24dome7pvhnh","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第37篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文介绍两种vagrant up后自动同步文件(rsync) 分别基于 <code>sync</code> 和 <code>nfs</code> (如果不设置的话，需要再起一个终端，单独运行 <code>vagrant rsync-auto</code> )</p>\n<p>另外可以参考我的 <a href=\"https://juejin.im/post/5d3a55ece51d454f71439dd2\" target=\"_blank\" rel=\"noopener\">036-win10搭建python的linux开发环境(pycharm+vagrant+virtualbox)</a></p>\n<a id=\"more\"></a>\n<p><a name=\"M2lMe\"></a></p>\n<h2 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">config.vm.synced_folder <span class=\"string\">\".\"</span>, <span class=\"string\">\"/vagrant\"</span>, <span class=\"built_in\">type</span>: <span class=\"string\">\"rsync\"</span>,</span><br><span class=\"line\">  <span class=\"comment\"># rsync__verbose: true,</span></span><br><span class=\"line\">  <span class=\"comment\"># rsync__auto: true,</span></span><br><span class=\"line\">  rsync__exclude: [<span class=\"string\">'.git*'</span>, <span class=\"string\">'node_modules*'</span>,<span class=\"string\">'*.log'</span>,<span class=\"string\">'*.box'</span>,<span class=\"string\">'Vagrantfile'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">config.trigger.after :up <span class=\"keyword\">do</span> |t|</span><br><span class=\"line\"> t.info = <span class=\"string\">\"rsync auto\"</span></span><br><span class=\"line\"> t.run = &#123;inline: <span class=\"string\">\"vagrant rsync-auto\"</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\"># 如果想后台运行，则使用下面语句</span></span><br><span class=\"line\">  <span class=\"comment\"># t.run = &#123;inline: \"bash -c 'vagrant rsync-auto &amp;'\"&#125;</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397\" target=\"_blank\" rel=\"noopener\">Vagrant Does not Start RSync-Auto on Up or Reload#briancain’s reply</a></p>\n<p><a name=\"3GPil\"></a></p>\n<h2 id=\"nfs\"><a href=\"#nfs\" class=\"headerlink\" title=\"nfs\"></a>nfs</h2><p>经测试，在win10上，需要安装插件（vagrant-vbguest vagrant-winnfsd）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vagrant plugin install vagrant-vbguest vagrant-winnfsd</span><br></pre></td></tr></table></figure>\n<p>如果报</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Installing the <span class=\"string\">'vagrant-vbguest'</span> plugin. This can take a few minutes...</span><br><span class=\"line\">ERROR:  SSL verification error at depth 3: unable to get <span class=\"built_in\">local</span> issuer certificate (20)</span><br><span class=\"line\">ERROR:  You must add /C=US/O=Starfield Technologies, Inc./OU=Starfield Class 2 Certification Authority to your <span class=\"built_in\">local</span> trusted store</span><br><span class=\"line\">Vagrant failed to load a configured plugin <span class=\"built_in\">source</span>. This can be caused</span><br><span class=\"line\">by a variety of issues including: transient connectivity issues, proxy</span><br><span class=\"line\">filtering rejecting access to a configured plugin <span class=\"built_in\">source</span>, or a configured</span><br><span class=\"line\">plugin <span class=\"built_in\">source</span> not responding correctly. Please review the error message</span><br><span class=\"line\">below to <span class=\"built_in\">help</span> resolve the issue:</span><br><span class=\"line\"></span><br><span class=\"line\">  SSL_connect returned=1 errno=0 state=error: certificate verify failed (https://gems.hashicorp.com/specs.4.8.gz)</span><br><span class=\"line\"></span><br><span class=\"line\">Source: https://gems.hashicorp.com/</span><br></pre></td></tr></table></figure>\n<p>需要设置CAfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> SSL_CERT_FILE=<span class=\"string\">\"path\\to\\Vagrant\\embedded\\cacert.pem\"</span></span><br></pre></td></tr></table></figure>\n<p>如果下载速度慢，并且有境外代理服务器，可以考虑设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://username:password@ip:port</span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=http://username:password@ip:port</span><br></pre></td></tr></table></figure>\n<p>设置Vagrantfile<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ... 忽略无关内容</span></span><br><span class=\"line\">config.vm.synced_folder <span class=\"string\">\".\"</span>, <span class=\"string\">\"/vagrant\"</span>,</span><br><span class=\"line\">   <span class=\"built_in\">type</span>:<span class=\"string\">\"nfs\"</span></span><br><span class=\"line\"><span class=\"comment\"># ... 忽略无关内容</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"qruRF\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/08/14/vagrant-startup-run-rsync/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d562b5e5188252d43756db8\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397\" target=\"_blank\" rel=\"noopener\">Vagrant Does not Start RSync-Auto on Up or Reload#briancain’s reply</a></li>\n<li><a href=\"https://peshmerge.io/how-to-speed-up-vagrant-on-windows-10-using-nfs/\" target=\"_blank\" rel=\"noopener\">How to speed up Vagrant on Windows 10 using NFS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第37篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文介绍两种vagrant up后自动同步文件(rsync) 分别基于 <code>sync</code> 和 <code>nfs</code> (如果不设置的话，需要再起一个终端，单独运行 <code>vagrant rsync-auto</code> )</p>\n<p>另外可以参考我的 <a href=\"https://juejin.im/post/5d3a55ece51d454f71439dd2\" target=\"_blank\" rel=\"noopener\">036-win10搭建python的linux开发环境(pycharm+vagrant+virtualbox)</a></p>","more":"<p><a name=\"M2lMe\"></a></p>\n<h2 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">config.vm.synced_folder <span class=\"string\">\".\"</span>, <span class=\"string\">\"/vagrant\"</span>, <span class=\"built_in\">type</span>: <span class=\"string\">\"rsync\"</span>,</span><br><span class=\"line\">  <span class=\"comment\"># rsync__verbose: true,</span></span><br><span class=\"line\">  <span class=\"comment\"># rsync__auto: true,</span></span><br><span class=\"line\">  rsync__exclude: [<span class=\"string\">'.git*'</span>, <span class=\"string\">'node_modules*'</span>,<span class=\"string\">'*.log'</span>,<span class=\"string\">'*.box'</span>,<span class=\"string\">'Vagrantfile'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">config.trigger.after :up <span class=\"keyword\">do</span> |t|</span><br><span class=\"line\"> t.info = <span class=\"string\">\"rsync auto\"</span></span><br><span class=\"line\"> t.run = &#123;inline: <span class=\"string\">\"vagrant rsync-auto\"</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\"># 如果想后台运行，则使用下面语句</span></span><br><span class=\"line\">  <span class=\"comment\"># t.run = &#123;inline: \"bash -c 'vagrant rsync-auto &amp;'\"&#125;</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397\" target=\"_blank\" rel=\"noopener\">Vagrant Does not Start RSync-Auto on Up or Reload#briancain’s reply</a></p>\n<p><a name=\"3GPil\"></a></p>\n<h2 id=\"nfs\"><a href=\"#nfs\" class=\"headerlink\" title=\"nfs\"></a>nfs</h2><p>经测试，在win10上，需要安装插件（vagrant-vbguest vagrant-winnfsd）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vagrant plugin install vagrant-vbguest vagrant-winnfsd</span><br></pre></td></tr></table></figure>\n<p>如果报</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Installing the <span class=\"string\">'vagrant-vbguest'</span> plugin. This can take a few minutes...</span><br><span class=\"line\">ERROR:  SSL verification error at depth 3: unable to get <span class=\"built_in\">local</span> issuer certificate (20)</span><br><span class=\"line\">ERROR:  You must add /C=US/O=Starfield Technologies, Inc./OU=Starfield Class 2 Certification Authority to your <span class=\"built_in\">local</span> trusted store</span><br><span class=\"line\">Vagrant failed to load a configured plugin <span class=\"built_in\">source</span>. This can be caused</span><br><span class=\"line\">by a variety of issues including: transient connectivity issues, proxy</span><br><span class=\"line\">filtering rejecting access to a configured plugin <span class=\"built_in\">source</span>, or a configured</span><br><span class=\"line\">plugin <span class=\"built_in\">source</span> not responding correctly. Please review the error message</span><br><span class=\"line\">below to <span class=\"built_in\">help</span> resolve the issue:</span><br><span class=\"line\"></span><br><span class=\"line\">  SSL_connect returned=1 errno=0 state=error: certificate verify failed (https://gems.hashicorp.com/specs.4.8.gz)</span><br><span class=\"line\"></span><br><span class=\"line\">Source: https://gems.hashicorp.com/</span><br></pre></td></tr></table></figure>\n<p>需要设置CAfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> SSL_CERT_FILE=<span class=\"string\">\"path\\to\\Vagrant\\embedded\\cacert.pem\"</span></span><br></pre></td></tr></table></figure>\n<p>如果下载速度慢，并且有境外代理服务器，可以考虑设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://username:password@ip:port</span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=http://username:password@ip:port</span><br></pre></td></tr></table></figure>\n<p>设置Vagrantfile<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ... 忽略无关内容</span></span><br><span class=\"line\">config.vm.synced_folder <span class=\"string\">\".\"</span>, <span class=\"string\">\"/vagrant\"</span>,</span><br><span class=\"line\">   <span class=\"built_in\">type</span>:<span class=\"string\">\"nfs\"</span></span><br><span class=\"line\"><span class=\"comment\"># ... 忽略无关内容</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"qruRF\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/08/14/vagrant-startup-run-rsync/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d562b5e5188252d43756db8\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://github.com/hashicorp/vagrant/issues/10002#issuecomment-419503397\" target=\"_blank\" rel=\"noopener\">Vagrant Does not Start RSync-Auto on Up or Reload#briancain’s reply</a></li>\n<li><a href=\"https://peshmerge.io/how-to-speed-up-vagrant-on-windows-10-using-nfs/\" target=\"_blank\" rel=\"noopener\">How to speed up Vagrant on Windows 10 using NFS</a></li>\n</ul>"},{"title":"024-VMWare VSphere 6.7(ESXI,VSCA) 下载","date":"2019-05-20T13:30:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第24篇，定个小目标999，每周最少2篇。\n\n\n\nVSphere是一套组件的合成，类似，word,excel,ppt合称office。而ESXI是虚拟组件，虚拟机跑在ESXI上，而VSCA是vcenter,是一个集群管理软件。提供企业级功能，比如虚拟机高可用等。\n\n本文主要讲解如何下载ESXI和VSCA。\n\n<a name=\"QvLjj\"></a>\n## 下载ESXI\n\n1. 转至  [VMware vSphere Hypervisor（ESXi）6.7下载页面](https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558333257691-7387ac13-94fc-43fb-b29d-9ff232ca77c9.png#align=left&display=inline&height=531&name=image.png&originHeight=531&originWidth=1151&size=70459&status=done&width=1151)\n\n2. 登陆或者创建一个VMware账号\n2. ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558333321551-eae0c876-c98e-484c-8e4d-bb9b623bf3e1.png#align=left&display=inline&height=516&name=image.png&originHeight=516&originWidth=1033&size=57459&status=done&width=1033)\n2. 下载最新的6.7.0U2。\n2. 安装到硬件设备上\n2. 如果只是个人用，则可以使用上图打马赛克的个人许可证。\n\n<a name=\"gVRsU\"></a>\n## VSCA\nvcenter是企业套件，无法通过官网免费下载。通过google搜索得到<br />[https://technet24.ir/vmware-vcenter-server-6-7-13940](https://technet24.ir/vmware-vcenter-server-6-7-13940) <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558334332060-23ee4240-2db2-4a0f-bcf8-0bc3bb3a7bcb.png#align=left&display=inline&height=771&name=image.png&originHeight=771&originWidth=755&size=147702&status=done&width=755)<br />其实 technet24.ir 也提供EXSI ISO的下载方式\n\n注意，为了安全起见，下载后，需要去跟官网的摘要进行比对，<br />[https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&productId=742#errorCheckDiv](https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&productId=742#errorCheckDiv)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558334892852-4ff231a2-498f-4795-aadc-9cc7e20ae821.png#align=left&display=inline&height=294&name=image.png&originHeight=294&originWidth=1480&size=49917&status=done&width=1480)\n\n安装和使用方式，参考 [Install VCSA 6.7.1](https://blog.51cto.com/happynews/2312006)\n\n<a name=\"szit3\"></a>\n## 参考资料\n\n- [VMware vSphere Hypervisor（ESXi）6.7下载页面](https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6)\n- [Vmware ESXi upgrade 11月9日](https://blog.51cto.com/happynews/2316683?source=dra)\n- [Install VCSA 6.7.1](https://blog.51cto.com/happynews/2312006)\n- [VMware VCenter Server 6.7 U2a](https://technet24.ir/vmware-vcenter-server-6-7-13940)\n- [VMware ESXi Patch Tracker](https://esxi-patches.v-front.de/ESXi-6.7.0.html)\n- [VMware ESXi Image Profiles](https://www.virten.net/vmware/vmware-esxi-image-profiles/)\n- [vmware 6 虚拟化 全系列 序列号](http://www.i5i6.net/post/190.html)\n\n","source":"_posts/vmware-vsphere-6-7.md","raw":"\n---\n\ntitle: 024-VMWare VSphere 6.7(ESXI,VSCA) 下载\n\ndate: 2019-05-20 21:30:00 +0800\n\ntags: [云计算,虚拟化,企业级虚拟化,私有云]\n\ncategories: 云计算\n\n---\n> 这是坚持技术写作计划（含翻译）的第24篇，定个小目标999，每周最少2篇。\n\n\n\nVSphere是一套组件的合成，类似，word,excel,ppt合称office。而ESXI是虚拟组件，虚拟机跑在ESXI上，而VSCA是vcenter,是一个集群管理软件。提供企业级功能，比如虚拟机高可用等。\n\n本文主要讲解如何下载ESXI和VSCA。\n\n<a name=\"QvLjj\"></a>\n## 下载ESXI\n\n1. 转至  [VMware vSphere Hypervisor（ESXi）6.7下载页面](https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558333257691-7387ac13-94fc-43fb-b29d-9ff232ca77c9.png#align=left&display=inline&height=531&name=image.png&originHeight=531&originWidth=1151&size=70459&status=done&width=1151)\n\n2. 登陆或者创建一个VMware账号\n2. ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558333321551-eae0c876-c98e-484c-8e4d-bb9b623bf3e1.png#align=left&display=inline&height=516&name=image.png&originHeight=516&originWidth=1033&size=57459&status=done&width=1033)\n2. 下载最新的6.7.0U2。\n2. 安装到硬件设备上\n2. 如果只是个人用，则可以使用上图打马赛克的个人许可证。\n\n<a name=\"gVRsU\"></a>\n## VSCA\nvcenter是企业套件，无法通过官网免费下载。通过google搜索得到<br />[https://technet24.ir/vmware-vcenter-server-6-7-13940](https://technet24.ir/vmware-vcenter-server-6-7-13940) <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558334332060-23ee4240-2db2-4a0f-bcf8-0bc3bb3a7bcb.png#align=left&display=inline&height=771&name=image.png&originHeight=771&originWidth=755&size=147702&status=done&width=755)<br />其实 technet24.ir 也提供EXSI ISO的下载方式\n\n注意，为了安全起见，下载后，需要去跟官网的摘要进行比对，<br />[https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&productId=742#errorCheckDiv](https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&productId=742#errorCheckDiv)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558334892852-4ff231a2-498f-4795-aadc-9cc7e20ae821.png#align=left&display=inline&height=294&name=image.png&originHeight=294&originWidth=1480&size=49917&status=done&width=1480)\n\n安装和使用方式，参考 [Install VCSA 6.7.1](https://blog.51cto.com/happynews/2312006)\n\n<a name=\"szit3\"></a>\n## 参考资料\n\n- [VMware vSphere Hypervisor（ESXi）6.7下载页面](https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6)\n- [Vmware ESXi upgrade 11月9日](https://blog.51cto.com/happynews/2316683?source=dra)\n- [Install VCSA 6.7.1](https://blog.51cto.com/happynews/2312006)\n- [VMware VCenter Server 6.7 U2a](https://technet24.ir/vmware-vcenter-server-6-7-13940)\n- [VMware ESXi Patch Tracker](https://esxi-patches.v-front.de/ESXi-6.7.0.html)\n- [VMware ESXi Image Profiles](https://www.virten.net/vmware/vmware-esxi-image-profiles/)\n- [vmware 6 虚拟化 全系列 序列号](http://www.i5i6.net/post/190.html)\n\n","slug":"vmware-vsphere-6-7","published":1,"updated":"2019-08-16T06:11:15.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojex003h24dowepre23v","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第24篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>VSphere是一套组件的合成，类似，word,excel,ppt合称office。而ESXI是虚拟组件，虚拟机跑在ESXI上，而VSCA是vcenter,是一个集群管理软件。提供企业级功能，比如虚拟机高可用等。</p>\n<p>本文主要讲解如何下载ESXI和VSCA。</p>\n<p><a name=\"QvLjj\"></a></p>\n<h2 id=\"下载ESXI\"><a href=\"#下载ESXI\" class=\"headerlink\" title=\"下载ESXI\"></a>下载ESXI</h2><ol>\n<li>转至  <a href=\"https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6\" target=\"_blank\" rel=\"noopener\">VMware vSphere Hypervisor（ESXi）6.7下载页面</a></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558333257691-7387ac13-94fc-43fb-b29d-9ff232ca77c9.png#align=left&amp;display=inline&amp;height=531&amp;name=image.png&amp;originHeight=531&amp;originWidth=1151&amp;size=70459&amp;status=done&amp;width=1151\" alt=\"image.png\"></p>\n<ol>\n<li>登陆或者创建一个VMware账号</li>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558333321551-eae0c876-c98e-484c-8e4d-bb9b623bf3e1.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=516&amp;originWidth=1033&amp;size=57459&amp;status=done&amp;width=1033\" alt=\"image.png\"></li>\n<li>下载最新的6.7.0U2。</li>\n<li>安装到硬件设备上</li>\n<li>如果只是个人用，则可以使用上图打马赛克的个人许可证。</li>\n</ol>\n<p><a name=\"gVRsU\"></a></p>\n<h2 id=\"VSCA\"><a href=\"#VSCA\" class=\"headerlink\" title=\"VSCA\"></a>VSCA</h2><p>vcenter是企业套件，无法通过官网免费下载。通过google搜索得到<br><a href=\"https://technet24.ir/vmware-vcenter-server-6-7-13940\" target=\"_blank\" rel=\"noopener\">https://technet24.ir/vmware-vcenter-server-6-7-13940</a> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558334332060-23ee4240-2db2-4a0f-bcf8-0bc3bb3a7bcb.png#align=left&amp;display=inline&amp;height=771&amp;name=image.png&amp;originHeight=771&amp;originWidth=755&amp;size=147702&amp;status=done&amp;width=755\" alt=\"image.png\"><br>其实 technet24.ir 也提供EXSI ISO的下载方式</p>\n<p>注意，为了安全起见，下载后，需要去跟官网的摘要进行比对，<br><a href=\"https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&amp;productId=742#errorCheckDiv\" target=\"_blank\" rel=\"noopener\">https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&amp;productId=742#errorCheckDiv</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558334892852-4ff231a2-498f-4795-aadc-9cc7e20ae821.png#align=left&amp;display=inline&amp;height=294&amp;name=image.png&amp;originHeight=294&amp;originWidth=1480&amp;size=49917&amp;status=done&amp;width=1480\" alt=\"image.png\"></p>\n<p>安装和使用方式，参考 <a href=\"https://blog.51cto.com/happynews/2312006\" target=\"_blank\" rel=\"noopener\">Install VCSA 6.7.1</a></p>\n<p><a name=\"szit3\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6\" target=\"_blank\" rel=\"noopener\">VMware vSphere Hypervisor（ESXi）6.7下载页面</a></li>\n<li><a href=\"https://blog.51cto.com/happynews/2316683?source=dra\" target=\"_blank\" rel=\"noopener\">Vmware ESXi upgrade 11月9日</a></li>\n<li><a href=\"https://blog.51cto.com/happynews/2312006\" target=\"_blank\" rel=\"noopener\">Install VCSA 6.7.1</a></li>\n<li><a href=\"https://technet24.ir/vmware-vcenter-server-6-7-13940\" target=\"_blank\" rel=\"noopener\">VMware VCenter Server 6.7 U2a</a></li>\n<li><a href=\"https://esxi-patches.v-front.de/ESXi-6.7.0.html\" target=\"_blank\" rel=\"noopener\">VMware ESXi Patch Tracker</a></li>\n<li><a href=\"https://www.virten.net/vmware/vmware-esxi-image-profiles/\" target=\"_blank\" rel=\"noopener\">VMware ESXi Image Profiles</a></li>\n<li><a href=\"http://www.i5i6.net/post/190.html\" target=\"_blank\" rel=\"noopener\">vmware 6 虚拟化 全系列 序列号</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第24篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>VSphere是一套组件的合成，类似，word,excel,ppt合称office。而ESXI是虚拟组件，虚拟机跑在ESXI上，而VSCA是vcenter,是一个集群管理软件。提供企业级功能，比如虚拟机高可用等。</p>\n<p>本文主要讲解如何下载ESXI和VSCA。</p>\n<p><a name=\"QvLjj\"></a></p>\n<h2 id=\"下载ESXI\"><a href=\"#下载ESXI\" class=\"headerlink\" title=\"下载ESXI\"></a>下载ESXI</h2><ol>\n<li>转至  <a href=\"https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6\" target=\"_blank\" rel=\"noopener\">VMware vSphere Hypervisor（ESXi）6.7下载页面</a></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558333257691-7387ac13-94fc-43fb-b29d-9ff232ca77c9.png#align=left&amp;display=inline&amp;height=531&amp;name=image.png&amp;originHeight=531&amp;originWidth=1151&amp;size=70459&amp;status=done&amp;width=1151\" alt=\"image.png\"></p>\n<ol>\n<li>登陆或者创建一个VMware账号</li>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558333321551-eae0c876-c98e-484c-8e4d-bb9b623bf3e1.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=516&amp;originWidth=1033&amp;size=57459&amp;status=done&amp;width=1033\" alt=\"image.png\"></li>\n<li>下载最新的6.7.0U2。</li>\n<li>安装到硬件设备上</li>\n<li>如果只是个人用，则可以使用上图打马赛克的个人许可证。</li>\n</ol>\n<p><a name=\"gVRsU\"></a></p>\n<h2 id=\"VSCA\"><a href=\"#VSCA\" class=\"headerlink\" title=\"VSCA\"></a>VSCA</h2><p>vcenter是企业套件，无法通过官网免费下载。通过google搜索得到<br><a href=\"https://technet24.ir/vmware-vcenter-server-6-7-13940\" target=\"_blank\" rel=\"noopener\">https://technet24.ir/vmware-vcenter-server-6-7-13940</a> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558334332060-23ee4240-2db2-4a0f-bcf8-0bc3bb3a7bcb.png#align=left&amp;display=inline&amp;height=771&amp;name=image.png&amp;originHeight=771&amp;originWidth=755&amp;size=147702&amp;status=done&amp;width=755\" alt=\"image.png\"><br>其实 technet24.ir 也提供EXSI ISO的下载方式</p>\n<p>注意，为了安全起见，下载后，需要去跟官网的摘要进行比对，<br><a href=\"https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&amp;productId=742#errorCheckDiv\" target=\"_blank\" rel=\"noopener\">https://my.vmware.com/cn/group/vmware/details?downloadGroup=VC67U2A&amp;productId=742#errorCheckDiv</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558334892852-4ff231a2-498f-4795-aadc-9cc7e20ae821.png#align=left&amp;display=inline&amp;height=294&amp;name=image.png&amp;originHeight=294&amp;originWidth=1480&amp;size=49917&amp;status=done&amp;width=1480\" alt=\"image.png\"></p>\n<p>安装和使用方式，参考 <a href=\"https://blog.51cto.com/happynews/2312006\" target=\"_blank\" rel=\"noopener\">Install VCSA 6.7.1</a></p>\n<p><a name=\"szit3\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://my.vmware.com/web/vmware/evalcenter?p=free-esxi6\" target=\"_blank\" rel=\"noopener\">VMware vSphere Hypervisor（ESXi）6.7下载页面</a></li>\n<li><a href=\"https://blog.51cto.com/happynews/2316683?source=dra\" target=\"_blank\" rel=\"noopener\">Vmware ESXi upgrade 11月9日</a></li>\n<li><a href=\"https://blog.51cto.com/happynews/2312006\" target=\"_blank\" rel=\"noopener\">Install VCSA 6.7.1</a></li>\n<li><a href=\"https://technet24.ir/vmware-vcenter-server-6-7-13940\" target=\"_blank\" rel=\"noopener\">VMware VCenter Server 6.7 U2a</a></li>\n<li><a href=\"https://esxi-patches.v-front.de/ESXi-6.7.0.html\" target=\"_blank\" rel=\"noopener\">VMware ESXi Patch Tracker</a></li>\n<li><a href=\"https://www.virten.net/vmware/vmware-esxi-image-profiles/\" target=\"_blank\" rel=\"noopener\">VMware ESXi Image Profiles</a></li>\n<li><a href=\"http://www.i5i6.net/post/190.html\" target=\"_blank\" rel=\"noopener\">vmware 6 虚拟化 全系列 序列号</a></li>\n</ul>\n"},{"title":"windows 10 64bit下安装Tensorflow+Keras","date":"2017-07-03T08:40:58.000Z","_content":"\nwindows 10 下 pip,conda 换国内源，安装Tensorflow,Keras\n\n\n<!-- more -->\n\n### 修改pip源 参考 [Python pip 国内镜像大全及使用办法][linkPythonPip国内镜像大全及使用办法]\n\n官方文档 [Config file][linkConfigFile]\n\nwindows 全部用户需要在`%APPDATA%\\pip\\pip.ini`,当前用户在`%HOME%\\pip\\pip.ini`\n\n```\n[global]\nindex-url=http://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n\n### 安装Tensorflow\n\n参考 [Installing TensorFlow on Windows][linkInstallingTensorflowOnWindows] \n\n```\n# 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本\n\n#打开Anaconda Prompt\n(python35) C:\\Users\\xx> activate python35\n\n#因为电脑无独显，所以安装`CPU-only`版本\n(python35) C:\\Users\\xx> pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl \n\n(python35) C:\\Users\\xx>python\n```\n\n```python\n>>> import tensorflow as tf\n>>> hello = tf.constant('Hello, TensorFlow')\n>>> sess = tf.Session()\n2017-07-03 16:44:16.082952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085590: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086312: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087014: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\n>>> print(sess.run(hello))\nb'Hello, TensorFlow'\n```\n\n如果要去掉`4-12`的警告信息，需要自己编译。详见 [\"The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations\" in \"Hello, TensorFlow!\" program #7778](https://github.com/tensorflow/tensorflow/issues/7778)\n\n### 安装Keras\n\n参考 官方文档 [Installation][]  中文文档  [Keras安装和配置指南(Windows)][]\n\n```bash\n(python35) C:\\Users\\xx>pip install keras -U --pre\n```\n\n但是我安装一直报错，\n```bash\nRunning setup.py bdist_wheel for scipy ... error\n  Complete output from command {Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d {AppData}\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:\n  lapack_opt_info:\n  lapack_mkl_info:\n    libraries mkl_rt not found in ['{Anaconda3_home}\\\\envs\\\\python35\\\\lib', 'C:\\\\', '{Anaconda3_home}\\\\envs\\\\python35\\\\libs']\n    NOT AVAILABLE\n\n## ...\n\nCommand \"{Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record {AppData}\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in {AppData}\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\\n```\n\n网上有建议通过 `pip install git+git://github.com/Theano/Theano.git` 从github直接下最新代码安装的，但是也是安装失败\n\n我成功的方式\n\n```\n(python35) C:\\Users\\xx>conda install mingw libpython theano -y\n(python35) C:\\Users\\xx>pip install keras\n```\n\n天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源][清华镜像源]\n```\n(python35) C:\\Users\\xx>python\nPython 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import keras\nUsing TensorFlow backend.\n```\n安装成功，默认后端是TensorFlow\n\n\n\n\n博客 [https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/][blog]\n掘金 [https://juejin.im/post/595a24b15188250d8d14237a][juejin]\n简书 [http://www.jianshu.com/p/e0d9fa795116][jianshu]\n\n[blog]: https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\n[juejin]: https://juejin.im/post/595a24b15188250d8d14237a\n[jianshu]: http://www.jianshu.com/p/e0d9fa795116\n[linkPythonPip国内镜像大全及使用办法]: http://blog.csdn.net/testcs_dn/article/details/54374849\n[linkConfigFile]: https://pip.pypa.io/en/stable/user_guide/#config-file\n[linkInstallingTensorflowOnWindows]: https://www.tensorflow.org/install/install_windows\n[Installation]: https://keras.io/#installation\n[Keras安装和配置指南(Windows)]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[清华镜像源]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\n","source":"_posts/windows-install-tensorflow-keras.md","raw":"---\ntitle: windows 10 64bit下安装Tensorflow+Keras\ndate: 2017-07-03 16:40:58\ntags: [python,anaconda,AI,Tensorflow,Keras]\ncategories: [anaconda,python,AI,Tensorflow,Keras]\n---\n\nwindows 10 下 pip,conda 换国内源，安装Tensorflow,Keras\n\n\n<!-- more -->\n\n### 修改pip源 参考 [Python pip 国内镜像大全及使用办法][linkPythonPip国内镜像大全及使用办法]\n\n官方文档 [Config file][linkConfigFile]\n\nwindows 全部用户需要在`%APPDATA%\\pip\\pip.ini`,当前用户在`%HOME%\\pip\\pip.ini`\n\n```\n[global]\nindex-url=http://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n\n### 安装Tensorflow\n\n参考 [Installing TensorFlow on Windows][linkInstallingTensorflowOnWindows] \n\n```\n# 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本\n\n#打开Anaconda Prompt\n(python35) C:\\Users\\xx> activate python35\n\n#因为电脑无独显，所以安装`CPU-only`版本\n(python35) C:\\Users\\xx> pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl \n\n(python35) C:\\Users\\xx>python\n```\n\n```python\n>>> import tensorflow as tf\n>>> hello = tf.constant('Hello, TensorFlow')\n>>> sess = tf.Session()\n2017-07-03 16:44:16.082952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085590: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086312: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087014: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\n>>> print(sess.run(hello))\nb'Hello, TensorFlow'\n```\n\n如果要去掉`4-12`的警告信息，需要自己编译。详见 [\"The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations\" in \"Hello, TensorFlow!\" program #7778](https://github.com/tensorflow/tensorflow/issues/7778)\n\n### 安装Keras\n\n参考 官方文档 [Installation][]  中文文档  [Keras安装和配置指南(Windows)][]\n\n```bash\n(python35) C:\\Users\\xx>pip install keras -U --pre\n```\n\n但是我安装一直报错，\n```bash\nRunning setup.py bdist_wheel for scipy ... error\n  Complete output from command {Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d {AppData}\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:\n  lapack_opt_info:\n  lapack_mkl_info:\n    libraries mkl_rt not found in ['{Anaconda3_home}\\\\envs\\\\python35\\\\lib', 'C:\\\\', '{Anaconda3_home}\\\\envs\\\\python35\\\\libs']\n    NOT AVAILABLE\n\n## ...\n\nCommand \"{Anaconda3_home}\\envs\\python35\\python.exe -u -c \"import setuptools, tokenize;__file__='{AppData}\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record {AppData}\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in {AppData}\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\\n```\n\n网上有建议通过 `pip install git+git://github.com/Theano/Theano.git` 从github直接下最新代码安装的，但是也是安装失败\n\n我成功的方式\n\n```\n(python35) C:\\Users\\xx>conda install mingw libpython theano -y\n(python35) C:\\Users\\xx>pip install keras\n```\n\n天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源][清华镜像源]\n```\n(python35) C:\\Users\\xx>python\nPython 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import keras\nUsing TensorFlow backend.\n```\n安装成功，默认后端是TensorFlow\n\n\n\n\n博客 [https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/][blog]\n掘金 [https://juejin.im/post/595a24b15188250d8d14237a][juejin]\n简书 [http://www.jianshu.com/p/e0d9fa795116][jianshu]\n\n[blog]: https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\n[juejin]: https://juejin.im/post/595a24b15188250d8d14237a\n[jianshu]: http://www.jianshu.com/p/e0d9fa795116\n[linkPythonPip国内镜像大全及使用办法]: http://blog.csdn.net/testcs_dn/article/details/54374849\n[linkConfigFile]: https://pip.pypa.io/en/stable/user_guide/#config-file\n[linkInstallingTensorflowOnWindows]: https://www.tensorflow.org/install/install_windows\n[Installation]: https://keras.io/#installation\n[Keras安装和配置指南(Windows)]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[清华镜像源]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\n","slug":"windows-install-tensorflow-keras","published":1,"updated":"2019-08-16T05:56:21.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojey003j24dotkw68gmj","content":"<p>windows 10 下 pip,conda 换国内源，安装Tensorflow,Keras</p>\n<a id=\"more\"></a>\n<h3 id=\"修改pip源-参考-Python-pip-国内镜像大全及使用办法\"><a href=\"#修改pip源-参考-Python-pip-国内镜像大全及使用办法\" class=\"headerlink\" title=\"修改pip源 参考 Python pip 国内镜像大全及使用办法\"></a>修改pip源 参考 <a href=\"http://blog.csdn.net/testcs_dn/article/details/54374849\" target=\"_blank\" rel=\"noopener\">Python pip 国内镜像大全及使用办法</a></h3><p>官方文档 <a href=\"https://pip.pypa.io/en/stable/user_guide/#config-file\" target=\"_blank\" rel=\"noopener\">Config file</a></p>\n<p>windows 全部用户需要在<code>%APPDATA%\\pip\\pip.ini</code>,当前用户在<code>%HOME%\\pip\\pip.ini</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Tensorflow\"><a href=\"#安装Tensorflow\" class=\"headerlink\" title=\"安装Tensorflow\"></a>安装Tensorflow</h3><p>参考 <a href=\"https://www.tensorflow.org/install/install_windows\" target=\"_blank\" rel=\"noopener\">Installing TensorFlow on Windows</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本</span><br><span class=\"line\"></span><br><span class=\"line\">#打开Anaconda Prompt</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; activate python35</span><br><span class=\"line\"></span><br><span class=\"line\">#因为电脑无独显，所以安装`CPU-only`版本</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl </span><br><span class=\"line\"></span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = tf.constant(<span class=\"string\">'Hello, TensorFlow'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sess = tf.Session()</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.082952</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE2 instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.085590</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE4<span class=\"number\">.1</span> instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.086312</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use AVX instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.087014</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use FMA instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sess.run(hello))</span><br><span class=\"line\"><span class=\"string\">b'Hello, TensorFlow'</span></span><br></pre></td></tr></table></figure>\n<p>如果要去掉<code>4-12</code>的警告信息，需要自己编译。详见 <a href=\"https://github.com/tensorflow/tensorflow/issues/7778\" target=\"_blank\" rel=\"noopener\">“The TensorFlow library wasn’t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations” in “Hello, TensorFlow!” program #7778</a></p>\n<h3 id=\"安装Keras\"><a href=\"#安装Keras\" class=\"headerlink\" title=\"安装Keras\"></a>安装Keras</h3><p>参考 官方文档 <a href=\"https://keras.io/#installation\" target=\"_blank\" rel=\"noopener\">Installation</a>  中文文档  <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras -U --pre</span><br></pre></td></tr></table></figure>\n<p>但是我安装一直报错，<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Running setup.py bdist_wheel <span class=\"keyword\">for</span> scipy ... error</span><br><span class=\"line\">  Complete output from <span class=\"built_in\">command</span> &#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c <span class=\"string\">\"import setuptools, tokenize;__file__='&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\"</span> bdist_wheel -d &#123;AppData&#125;\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:</span><br><span class=\"line\">  lapack_opt_info:</span><br><span class=\"line\">  lapack_mkl_info:</span><br><span class=\"line\">    libraries mkl_rt not found <span class=\"keyword\">in</span> [<span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\lib'</span>, <span class=\"string\">'C:\\\\'</span>, <span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\libs'</span>]</span><br><span class=\"line\">    NOT AVAILABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Command <span class=\"string\">\"&#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c \"</span>import setuptools, tokenize;__file__=<span class=\"string\">'&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py'</span>;f=getattr(tokenize, <span class=\"string\">'open'</span>, open)(__file__);code=f.read().replace(<span class=\"string\">'\\r\\n'</span>, <span class=\"string\">'\\n'</span>);f.close();<span class=\"built_in\">exec</span>(compile(code, __file__, <span class=\"string\">'exec'</span>))<span class=\"string\">\" install --record &#123;AppData&#125;\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\"</span> failed with error code 1 <span class=\"keyword\">in</span> &#123;AppData&#125;\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\</span><br></pre></td></tr></table></figure></p>\n<p>网上有建议通过 <code>pip install git+git://github.com/Theano/Theano.git</code> 从github直接下最新代码安装的，但是也是安装失败</p>\n<p>我成功的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;conda install mingw libpython theano -y</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras</span><br></pre></td></tr></table></figure>\n<p>天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br><span class=\"line\">Python 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import keras</span><br><span class=\"line\">Using TensorFlow backend.</span><br></pre></td></tr></table></figure></p>\n<p>安装成功，默认后端是TensorFlow</p>\n<p>博客 <a href=\"https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/</a><br>掘金 <a href=\"https://juejin.im/post/595a24b15188250d8d14237a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595a24b15188250d8d14237a</a><br>简书 <a href=\"http://www.jianshu.com/p/e0d9fa795116\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e0d9fa795116</a></p>\n","site":{"data":{}},"excerpt":"<p>windows 10 下 pip,conda 换国内源，安装Tensorflow,Keras</p>","more":"<h3 id=\"修改pip源-参考-Python-pip-国内镜像大全及使用办法\"><a href=\"#修改pip源-参考-Python-pip-国内镜像大全及使用办法\" class=\"headerlink\" title=\"修改pip源 参考 Python pip 国内镜像大全及使用办法\"></a>修改pip源 参考 <a href=\"http://blog.csdn.net/testcs_dn/article/details/54374849\" target=\"_blank\" rel=\"noopener\">Python pip 国内镜像大全及使用办法</a></h3><p>官方文档 <a href=\"https://pip.pypa.io/en/stable/user_guide/#config-file\" target=\"_blank\" rel=\"noopener\">Config file</a></p>\n<p>windows 全部用户需要在<code>%APPDATA%\\pip\\pip.ini</code>,当前用户在<code>%HOME%\\pip\\pip.ini</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Tensorflow\"><a href=\"#安装Tensorflow\" class=\"headerlink\" title=\"安装Tensorflow\"></a>安装Tensorflow</h3><p>参考 <a href=\"https://www.tensorflow.org/install/install_windows\" target=\"_blank\" rel=\"noopener\">Installing TensorFlow on Windows</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 切换到 python3.5 参考 详见另外一篇博文 https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#切换python版本</span><br><span class=\"line\"></span><br><span class=\"line\">#打开Anaconda Prompt</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; activate python35</span><br><span class=\"line\"></span><br><span class=\"line\">#因为电脑无独显，所以安装`CPU-only`版本</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt; pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.2.1-cp35-cp35m-win_amd64.whl </span><br><span class=\"line\"></span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = tf.constant(<span class=\"string\">'Hello, TensorFlow'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sess = tf.Session()</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.082952</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085175: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE2 instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.085590</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.085952: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use SSE4<span class=\"number\">.1</span> instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.086312</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.086634: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use AVX instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-03</span> <span class=\"number\">16</span>:<span class=\"number\">44</span>:<span class=\"number\">16.087014</span>: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\<span class=\"number\">35</span>\\tensorflow\\core\\platform\\cpu_feature_guard.cc:<span class=\"number\">45</span>] The TensorFlow library wasn<span class=\"string\">'t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.</span></span><br><span class=\"line\"><span class=\"string\">2017-07-03 16:44:16.087363: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn'</span>t compiled to use FMA instructions, but these are available on your machine <span class=\"keyword\">and</span> could speed up CPU computations.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sess.run(hello))</span><br><span class=\"line\"><span class=\"string\">b'Hello, TensorFlow'</span></span><br></pre></td></tr></table></figure>\n<p>如果要去掉<code>4-12</code>的警告信息，需要自己编译。详见 <a href=\"https://github.com/tensorflow/tensorflow/issues/7778\" target=\"_blank\" rel=\"noopener\">“The TensorFlow library wasn’t compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations” in “Hello, TensorFlow!” program #7778</a></p>\n<h3 id=\"安装Keras\"><a href=\"#安装Keras\" class=\"headerlink\" title=\"安装Keras\"></a>安装Keras</h3><p>参考 官方文档 <a href=\"https://keras.io/#installation\" target=\"_blank\" rel=\"noopener\">Installation</a>  中文文档  <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras -U --pre</span><br></pre></td></tr></table></figure>\n<p>但是我安装一直报错，<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Running setup.py bdist_wheel <span class=\"keyword\">for</span> scipy ... error</span><br><span class=\"line\">  Complete output from <span class=\"built_in\">command</span> &#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c <span class=\"string\">\"import setuptools, tokenize;__file__='&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\"</span> bdist_wheel -d &#123;AppData&#125;\\Local\\Temp\\tmpb_od_dlvpip-wheel- --python-tag cp35:</span><br><span class=\"line\">  lapack_opt_info:</span><br><span class=\"line\">  lapack_mkl_info:</span><br><span class=\"line\">    libraries mkl_rt not found <span class=\"keyword\">in</span> [<span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\lib'</span>, <span class=\"string\">'C:\\\\'</span>, <span class=\"string\">'&#123;Anaconda3_home&#125;\\\\envs\\\\python35\\\\libs'</span>]</span><br><span class=\"line\">    NOT AVAILABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">Command <span class=\"string\">\"&#123;Anaconda3_home&#125;\\envs\\python35\\python.exe -u -c \"</span>import setuptools, tokenize;__file__=<span class=\"string\">'&#123;AppData&#125;\\\\Local\\\\Temp\\\\pip-build-mgdjtt1d\\\\scipy\\\\setup.py'</span>;f=getattr(tokenize, <span class=\"string\">'open'</span>, open)(__file__);code=f.read().replace(<span class=\"string\">'\\r\\n'</span>, <span class=\"string\">'\\n'</span>);f.close();<span class=\"built_in\">exec</span>(compile(code, __file__, <span class=\"string\">'exec'</span>))<span class=\"string\">\" install --record &#123;AppData&#125;\\Local\\Temp\\pip-htcraop7-record\\install-record.txt --single-version-externally-managed --compile\"</span> failed with error code 1 <span class=\"keyword\">in</span> &#123;AppData&#125;\\Local\\Temp\\pip-build-mgdjtt1d\\scipy\\</span><br></pre></td></tr></table></figure></p>\n<p>网上有建议通过 <code>pip install git+git://github.com/Theano/Theano.git</code> 从github直接下最新代码安装的，但是也是安装失败</p>\n<p>我成功的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;conda install mingw libpython theano -y</span><br><span class=\"line\">(python35) C:\\Users\\xx&gt;pip install keras</span><br></pre></td></tr></table></figure>\n<p>天朝网络不稳定，挺慢的，可以参考 另外一篇博文切换清华源 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/#设置清华镜像源</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python35) C:\\Users\\xx&gt;python</span><br><span class=\"line\">Python 3.5.3 |Continuum Analytics, Inc.| (default, May 15 2017, 10:43:23) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import keras</span><br><span class=\"line\">Using TensorFlow backend.</span><br></pre></td></tr></table></figure></p>\n<p>安装成功，默认后端是TensorFlow</p>\n<p>博客 <a href=\"https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/03/windows-install-tensorflow-keras/</a><br>掘金 <a href=\"https://juejin.im/post/595a24b15188250d8d14237a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595a24b15188250d8d14237a</a><br>简书 <a href=\"http://www.jianshu.com/p/e0d9fa795116\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e0d9fa795116</a></p>"},{"title":"(2018年12月可用)官网下载免费版xshell5","date":"2018-09-14T01:18:40.000Z","_content":"\n\n\nxshell 是一个强大的终端模拟软件，类似的还有很多，比如 mobaxterm ,putty, Securecrt(本文不过多介绍，感兴趣自行百度)\n\n\n\n回到xshell, 自从手贱升级到xshell6以后,发现只能支持4个tab页，尴尬症都犯了，想降回xshell5，发现官方已经关闭5的下载通道了，难道你敢从百度等下载站随便下载xshell么？反正我不敢，经过一通折腾，终于成功找到官方下载入口了。\n\n<!--more-->\n\n\n\n根据 [v2ex](https://www.v2ex.com/t/460182), 其中 [chanssl](https://www.v2ex.com/t/460182) 指出\n\nXshell: <http://www.netsarang.com/download/down_live.html?productcode=2&majorversion=5>\n\nXftp: <http://www.netsarang.com/download/down_live.html?productcode=3&majorversion=5>\n\n的办法，发现下载的是评估版的，也就是30天可用。而且最蛋疼的是不能输入注册码，所以网上找的注册码都GG了。\n\n\n\n途中又尝试了`https://www.netsarang.com/download/down_form.html?code=622`改成`https://www.netsarang.com/download/down_form.html?code=522`发现只能输入`Product key` ，`Evaluation user / Home & School user` 压根就被删除了\n\n\n\n难道只能下载免费的6或者换别的终端软件？\n\n\n\n不死心的又尝试了一下F12大法，打开 https://www.netsarang.com/download/down_form.html?code=622\n\n在 `Console`执行 `document.getElementById(\"code\").value=522`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fv8vsmrgpvj20f40drjrx.jpg)\n\n然后打开邮箱，查看有没有收到下载链接\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fv8vu17nywj21380l7gnf.jpg)\n\n这属于程序漏洞，所以随着本文的传播，很可能被堵上。(截止2018-09-14本方法仍可用)\n\n所以，一旦下载成功后，千万千万记得在云盘存一份。防止后期系统重装时，本方法不可用了，又信不过网上提供的下载链接，就抓瞎了。\n\n\n\n此处贴一下`Xshell-5.0.1339p.exe`校验码\n\n```\n大小：\t33, 012, 688 字节\nMD5：\tAB1A4AFB4894B71A3DC4DE84A84E7126\nSHA1：\tD2DA24229554139AEF8D21F737D6F78F7BEF7A7F\nCRC32：305847D5\n\n```\n\n至于为啥跟 https://www.netsarang.com/download/down_live.html?productcode=2&majorversion=5 的校验码(`MD5: 6a2aef6ac7a502f31607524a13659a81`)不一致，因为 https://www.netsarang.com/download/down_live.html?productcode=2&majorversion=5  是评估版，并且文件名是`Xshell-5.0.1339.exe`\n\n另：出于对看客服务器的安全考虑，本文不会提供二进制下载。\n\n\n\n博客 [https://anjia0532.github.io/2018/09/14/xshell5/](https://anjia0532.github.io/2018/09/14/xshell5/)\n\n掘金 [https://juejin.im/post/5b9b271be51d450e7e513d88](https://juejin.im/post/5b9b271be51d450e7e513d88)","source":"_posts/xshell5.md","raw":"---\ntitle: (2018年12月可用)官网下载免费版xshell5\ndate: 2018-09-14 09:18:40\ntags: [linux,xshell,xshell5]\n---\n\n\n\nxshell 是一个强大的终端模拟软件，类似的还有很多，比如 mobaxterm ,putty, Securecrt(本文不过多介绍，感兴趣自行百度)\n\n\n\n回到xshell, 自从手贱升级到xshell6以后,发现只能支持4个tab页，尴尬症都犯了，想降回xshell5，发现官方已经关闭5的下载通道了，难道你敢从百度等下载站随便下载xshell么？反正我不敢，经过一通折腾，终于成功找到官方下载入口了。\n\n<!--more-->\n\n\n\n根据 [v2ex](https://www.v2ex.com/t/460182), 其中 [chanssl](https://www.v2ex.com/t/460182) 指出\n\nXshell: <http://www.netsarang.com/download/down_live.html?productcode=2&majorversion=5>\n\nXftp: <http://www.netsarang.com/download/down_live.html?productcode=3&majorversion=5>\n\n的办法，发现下载的是评估版的，也就是30天可用。而且最蛋疼的是不能输入注册码，所以网上找的注册码都GG了。\n\n\n\n途中又尝试了`https://www.netsarang.com/download/down_form.html?code=622`改成`https://www.netsarang.com/download/down_form.html?code=522`发现只能输入`Product key` ，`Evaluation user / Home & School user` 压根就被删除了\n\n\n\n难道只能下载免费的6或者换别的终端软件？\n\n\n\n不死心的又尝试了一下F12大法，打开 https://www.netsarang.com/download/down_form.html?code=622\n\n在 `Console`执行 `document.getElementById(\"code\").value=522`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fv8vsmrgpvj20f40drjrx.jpg)\n\n然后打开邮箱，查看有没有收到下载链接\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fv8vu17nywj21380l7gnf.jpg)\n\n这属于程序漏洞，所以随着本文的传播，很可能被堵上。(截止2018-09-14本方法仍可用)\n\n所以，一旦下载成功后，千万千万记得在云盘存一份。防止后期系统重装时，本方法不可用了，又信不过网上提供的下载链接，就抓瞎了。\n\n\n\n此处贴一下`Xshell-5.0.1339p.exe`校验码\n\n```\n大小：\t33, 012, 688 字节\nMD5：\tAB1A4AFB4894B71A3DC4DE84A84E7126\nSHA1：\tD2DA24229554139AEF8D21F737D6F78F7BEF7A7F\nCRC32：305847D5\n\n```\n\n至于为啥跟 https://www.netsarang.com/download/down_live.html?productcode=2&majorversion=5 的校验码(`MD5: 6a2aef6ac7a502f31607524a13659a81`)不一致，因为 https://www.netsarang.com/download/down_live.html?productcode=2&majorversion=5  是评估版，并且文件名是`Xshell-5.0.1339.exe`\n\n另：出于对看客服务器的安全考虑，本文不会提供二进制下载。\n\n\n\n博客 [https://anjia0532.github.io/2018/09/14/xshell5/](https://anjia0532.github.io/2018/09/14/xshell5/)\n\n掘金 [https://juejin.im/post/5b9b271be51d450e7e513d88](https://juejin.im/post/5b9b271be51d450e7e513d88)","slug":"xshell5","published":1,"updated":"2019-08-16T05:56:21.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojf0003n24dog61u5vuz","content":"<p>xshell 是一个强大的终端模拟软件，类似的还有很多，比如 mobaxterm ,putty, Securecrt(本文不过多介绍，感兴趣自行百度)</p>\n<p>回到xshell, 自从手贱升级到xshell6以后,发现只能支持4个tab页，尴尬症都犯了，想降回xshell5，发现官方已经关闭5的下载通道了，难道你敢从百度等下载站随便下载xshell么？反正我不敢，经过一通折腾，终于成功找到官方下载入口了。</p>\n<a id=\"more\"></a>\n<p>根据 <a href=\"https://www.v2ex.com/t/460182\" target=\"_blank\" rel=\"noopener\">v2ex</a>, 其中 <a href=\"https://www.v2ex.com/t/460182\" target=\"_blank\" rel=\"noopener\">chanssl</a> 指出</p>\n<p>Xshell: <a href=\"http://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">http://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5</a></p>\n<p>Xftp: <a href=\"http://www.netsarang.com/download/down_live.html?productcode=3&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">http://www.netsarang.com/download/down_live.html?productcode=3&amp;majorversion=5</a></p>\n<p>的办法，发现下载的是评估版的，也就是30天可用。而且最蛋疼的是不能输入注册码，所以网上找的注册码都GG了。</p>\n<p>途中又尝试了<code>https://www.netsarang.com/download/down_form.html?code=622</code>改成<code>https://www.netsarang.com/download/down_form.html?code=522</code>发现只能输入<code>Product key</code> ，<code>Evaluation user / Home &amp; School user</code> 压根就被删除了</p>\n<p>难道只能下载免费的6或者换别的终端软件？</p>\n<p>不死心的又尝试了一下F12大法，打开 <a href=\"https://www.netsarang.com/download/down_form.html?code=622\" target=\"_blank\" rel=\"noopener\">https://www.netsarang.com/download/down_form.html?code=622</a></p>\n<p>在 <code>Console</code>执行 <code>document.getElementById(&quot;code&quot;).value=522</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fv8vsmrgpvj20f40drjrx.jpg\" alt=\"\"></p>\n<p>然后打开邮箱，查看有没有收到下载链接</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fv8vu17nywj21380l7gnf.jpg\" alt=\"\"></p>\n<p>这属于程序漏洞，所以随着本文的传播，很可能被堵上。(截止2018-09-14本方法仍可用)</p>\n<p>所以，一旦下载成功后，千万千万记得在云盘存一份。防止后期系统重装时，本方法不可用了，又信不过网上提供的下载链接，就抓瞎了。</p>\n<p>此处贴一下<code>Xshell-5.0.1339p.exe</code>校验码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">大小：\t33, 012, 688 字节</span><br><span class=\"line\">MD5：\tAB1A4AFB4894B71A3DC4DE84A84E7126</span><br><span class=\"line\">SHA1：\tD2DA24229554139AEF8D21F737D6F78F7BEF7A7F</span><br><span class=\"line\">CRC32：305847D5</span><br></pre></td></tr></table></figure>\n<p>至于为啥跟 <a href=\"https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5</a> 的校验码(<code>MD5: 6a2aef6ac7a502f31607524a13659a81</code>)不一致，因为 <a href=\"https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5</a>  是评估版，并且文件名是<code>Xshell-5.0.1339.exe</code></p>\n<p>另：出于对看客服务器的安全考虑，本文不会提供二进制下载。</p>\n<p>博客 <a href=\"https://anjia0532.github.io/2018/09/14/xshell5/\">https://anjia0532.github.io/2018/09/14/xshell5/</a></p>\n<p>掘金 <a href=\"https://juejin.im/post/5b9b271be51d450e7e513d88\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b9b271be51d450e7e513d88</a></p>\n","site":{"data":{}},"excerpt":"<p>xshell 是一个强大的终端模拟软件，类似的还有很多，比如 mobaxterm ,putty, Securecrt(本文不过多介绍，感兴趣自行百度)</p>\n<p>回到xshell, 自从手贱升级到xshell6以后,发现只能支持4个tab页，尴尬症都犯了，想降回xshell5，发现官方已经关闭5的下载通道了，难道你敢从百度等下载站随便下载xshell么？反正我不敢，经过一通折腾，终于成功找到官方下载入口了。</p>","more":"<p>根据 <a href=\"https://www.v2ex.com/t/460182\" target=\"_blank\" rel=\"noopener\">v2ex</a>, 其中 <a href=\"https://www.v2ex.com/t/460182\" target=\"_blank\" rel=\"noopener\">chanssl</a> 指出</p>\n<p>Xshell: <a href=\"http://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">http://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5</a></p>\n<p>Xftp: <a href=\"http://www.netsarang.com/download/down_live.html?productcode=3&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">http://www.netsarang.com/download/down_live.html?productcode=3&amp;majorversion=5</a></p>\n<p>的办法，发现下载的是评估版的，也就是30天可用。而且最蛋疼的是不能输入注册码，所以网上找的注册码都GG了。</p>\n<p>途中又尝试了<code>https://www.netsarang.com/download/down_form.html?code=622</code>改成<code>https://www.netsarang.com/download/down_form.html?code=522</code>发现只能输入<code>Product key</code> ，<code>Evaluation user / Home &amp; School user</code> 压根就被删除了</p>\n<p>难道只能下载免费的6或者换别的终端软件？</p>\n<p>不死心的又尝试了一下F12大法，打开 <a href=\"https://www.netsarang.com/download/down_form.html?code=622\" target=\"_blank\" rel=\"noopener\">https://www.netsarang.com/download/down_form.html?code=622</a></p>\n<p>在 <code>Console</code>执行 <code>document.getElementById(&quot;code&quot;).value=522</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fv8vsmrgpvj20f40drjrx.jpg\" alt=\"\"></p>\n<p>然后打开邮箱，查看有没有收到下载链接</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fv8vu17nywj21380l7gnf.jpg\" alt=\"\"></p>\n<p>这属于程序漏洞，所以随着本文的传播，很可能被堵上。(截止2018-09-14本方法仍可用)</p>\n<p>所以，一旦下载成功后，千万千万记得在云盘存一份。防止后期系统重装时，本方法不可用了，又信不过网上提供的下载链接，就抓瞎了。</p>\n<p>此处贴一下<code>Xshell-5.0.1339p.exe</code>校验码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">大小：\t33, 012, 688 字节</span><br><span class=\"line\">MD5：\tAB1A4AFB4894B71A3DC4DE84A84E7126</span><br><span class=\"line\">SHA1：\tD2DA24229554139AEF8D21F737D6F78F7BEF7A7F</span><br><span class=\"line\">CRC32：305847D5</span><br></pre></td></tr></table></figure>\n<p>至于为啥跟 <a href=\"https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5</a> 的校验码(<code>MD5: 6a2aef6ac7a502f31607524a13659a81</code>)不一致，因为 <a href=\"https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5\" target=\"_blank\" rel=\"noopener\">https://www.netsarang.com/download/down_live.html?productcode=2&amp;majorversion=5</a>  是评估版，并且文件名是<code>Xshell-5.0.1339.exe</code></p>\n<p>另：出于对看客服务器的安全考虑，本文不会提供二进制下载。</p>\n<p>博客 <a href=\"https://anjia0532.github.io/2018/09/14/xshell5/\">https://anjia0532.github.io/2018/09/14/xshell5/</a></p>\n<p>掘金 <a href=\"https://juejin.im/post/5b9b271be51d450e7e513d88\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b9b271be51d450e7e513d88</a></p>"},{"title":"微服务场景下性能问题排查神器之xrebel","date":"2017-11-21T06:57:14.000Z","_content":"\n对于java应用性能跟踪其实有很多种手段，本文只是针对`xrebel`的使用做一些简单讲解（`单体应用`和`微服务应用`）。分布式跟踪有很多，比如zipkin等，详见 [分布式跟踪系统（一）：Zipkin的背景和设计][]，但是太重了，不适合小规模团队，开发时期用。\n\n而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。\n\n示例：\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n<!--more-->\n\n## [下载xrebel][]\n\n目前最新版本 [xrebel-3.4.1.zip][]\n\n## [xrebel 支持的框架及场景][Xrebel支持的框架及场景]\n\n\n## [快速安装][]\n\nxrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。\n\n1. 下载xrebel.zip 并解压到本地，e.g. `D:\\xrebel`\n2. 在tomcat也好，idea,eclipse也好，修改vm 参数，添加 `-javaagent:[path/to/xrebel]/xrebel.jar`\n\n下面分别是idea,eclipse\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg)\n\n默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 [xrebel][] [jrebel][] [jrebel for android][JrebelForAndroid] 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 [https://my.jrebel.com/][]\n\n## web ui\n\n打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 `xrebel`的`toolbar`，(e.g. http://localhost:8080)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg)\n\n或者通过 访问`服务/xrebel` (e.g. http://localhost:8080/xrebel) 打开单独页面，适用于webservice,restful 等无页面场景\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg)\n\n如果不想注入到页面中，只想通过`服务/xrebel`访问，则可以添加 `-Dxrebel.injection=true|false` ，默认为`true`\n\n其余开关参数 参见  [XRebel launch parameters][XrebelLaunchParameters]\n\n\n## xrebel 简单使用教程\n\n参考 [Using XRebel][UsingXrebel]\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg)\n\n## 微服务\n\n参考 [Microservices][] 和 [XRebel 3.0: introducing microservices profiling][Xrebel3.0:IntroducingMicroservices] \n\n确保调用方，和被调用方，都开了xrebel，\n\n效果如下\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n\n## 启用xrebel调试\n\n参考 [Debugging with XRebel enabled][DebuggingWithXrebelEnabled]\n\n\n## 题外话 静态资源分离的必要性\n\n为嘛建议将静态文件分离？通过xrebel就可以清晰看出来\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg)\n\n\n博客 [https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/][blog]\n掘金 [https://juejin.im/post/5a13e3db6fb9a045186a5bfc][juejin]\n简书 [http://www.jianshu.com/p/0029c32dde4e][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\n[juejin]: https://juejin.im/post/5a13e3db6fb9a045186a5bfc\n[jianshu]: http://www.jianshu.com/p/0029c32dde4e\n[分布式跟踪系统（一）：Zipkin的背景和设计]: http://manzhizhen.iteye.com/blog/2348175\n[下载xrebel]: https://zeroturnaround.com/software/xrebel/download/\n[xrebel-3.4.1.zip]: https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\n[Xrebel支持的框架及场景]: http://manuals.zeroturnaround.com/xrebel/support/index.html#\n[快速安装]: https://zeroturnaround.com/software/xrebel/quick-start/\n[XrebelLaunchParameters]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\n[Microservices]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\n[Xrebel3.0:IntroducingMicroservices]: https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\n[UsingXrebel]: http://manuals.zeroturnaround.com/xrebel/use/index.html#\n[jrebel]: https://zeroturnaround.com/software/jrebel/\n[JrebelForAndroid]: https://zeroturnaround.com/software/jrebel-for-android/\n[xrebel]: https://zeroturnaround.com/software/xrebel/\n[https://my.jrebel.com/]: https://my.jrebel.com/\n[DebuggingWithXrebelEnabled]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\n","source":"_posts/xrebel-introducing-microservices-profiling.md","raw":"---\ntitle: 微服务场景下性能问题排查神器之xrebel\ndate: 2017-11-21 14:57:14\ntags: [jrebel,xrebel,micro-service,spring-cloud]\n---\n\n对于java应用性能跟踪其实有很多种手段，本文只是针对`xrebel`的使用做一些简单讲解（`单体应用`和`微服务应用`）。分布式跟踪有很多，比如zipkin等，详见 [分布式跟踪系统（一）：Zipkin的背景和设计][]，但是太重了，不适合小规模团队，开发时期用。\n\n而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。\n\n示例：\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n<!--more-->\n\n## [下载xrebel][]\n\n目前最新版本 [xrebel-3.4.1.zip][]\n\n## [xrebel 支持的框架及场景][Xrebel支持的框架及场景]\n\n\n## [快速安装][]\n\nxrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。\n\n1. 下载xrebel.zip 并解压到本地，e.g. `D:\\xrebel`\n2. 在tomcat也好，idea,eclipse也好，修改vm 参数，添加 `-javaagent:[path/to/xrebel]/xrebel.jar`\n\n下面分别是idea,eclipse\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg)\n\n默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 [xrebel][] [jrebel][] [jrebel for android][JrebelForAndroid] 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 [https://my.jrebel.com/][]\n\n## web ui\n\n打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 `xrebel`的`toolbar`，(e.g. http://localhost:8080)\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg)\n\n或者通过 访问`服务/xrebel` (e.g. http://localhost:8080/xrebel) 打开单独页面，适用于webservice,restful 等无页面场景\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg)\n\n如果不想注入到页面中，只想通过`服务/xrebel`访问，则可以添加 `-Dxrebel.injection=true|false` ，默认为`true`\n\n其余开关参数 参见  [XRebel launch parameters][XrebelLaunchParameters]\n\n\n## xrebel 简单使用教程\n\n参考 [Using XRebel][UsingXrebel]\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg)\n\n## 微服务\n\n参考 [Microservices][] 和 [XRebel 3.0: introducing microservices profiling][Xrebel3.0:IntroducingMicroservices] \n\n确保调用方，和被调用方，都开了xrebel，\n\n效果如下\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg)\n\n\n## 启用xrebel调试\n\n参考 [Debugging with XRebel enabled][DebuggingWithXrebelEnabled]\n\n\n## 题外话 静态资源分离的必要性\n\n为嘛建议将静态文件分离？通过xrebel就可以清晰看出来\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg)\n\n\n博客 [https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/][blog]\n掘金 [https://juejin.im/post/5a13e3db6fb9a045186a5bfc][juejin]\n简书 [http://www.jianshu.com/p/0029c32dde4e][jianshu]\n\n\n[blog]: https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\n[juejin]: https://juejin.im/post/5a13e3db6fb9a045186a5bfc\n[jianshu]: http://www.jianshu.com/p/0029c32dde4e\n[分布式跟踪系统（一）：Zipkin的背景和设计]: http://manzhizhen.iteye.com/blog/2348175\n[下载xrebel]: https://zeroturnaround.com/software/xrebel/download/\n[xrebel-3.4.1.zip]: https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\n[Xrebel支持的框架及场景]: http://manuals.zeroturnaround.com/xrebel/support/index.html#\n[快速安装]: https://zeroturnaround.com/software/xrebel/quick-start/\n[XrebelLaunchParameters]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\n[Microservices]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\n[Xrebel3.0:IntroducingMicroservices]: https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\n[UsingXrebel]: http://manuals.zeroturnaround.com/xrebel/use/index.html#\n[jrebel]: https://zeroturnaround.com/software/jrebel/\n[JrebelForAndroid]: https://zeroturnaround.com/software/jrebel-for-android/\n[xrebel]: https://zeroturnaround.com/software/xrebel/\n[https://my.jrebel.com/]: https://my.jrebel.com/\n[DebuggingWithXrebelEnabled]: http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\n","slug":"xrebel-introducing-microservices-profiling","published":1,"updated":"2019-08-16T05:56:21.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojf2003p24dokjd4hbs2","content":"<p>对于java应用性能跟踪其实有很多种手段，本文只是针对<code>xrebel</code>的使用做一些简单讲解（<code>单体应用</code>和<code>微服务应用</code>）。分布式跟踪有很多，比如zipkin等，详见 <a href=\"http://manzhizhen.iteye.com/blog/2348175\" target=\"_blank\" rel=\"noopener\">分布式跟踪系统（一）：Zipkin的背景和设计</a>，但是太重了，不适合小规模团队，开发时期用。</p>\n<p>而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。</p>\n<p>示例：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"下载xrebel\"><a href=\"#下载xrebel\" class=\"headerlink\" title=\"下载xrebel\"></a><a href=\"https://zeroturnaround.com/software/xrebel/download/\" target=\"_blank\" rel=\"noopener\">下载xrebel</a></h2><p>目前最新版本 <a href=\"https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\" target=\"_blank\" rel=\"noopener\">xrebel-3.4.1.zip</a></p>\n<h2 id=\"xrebel-支持的框架及场景\"><a href=\"#xrebel-支持的框架及场景\" class=\"headerlink\" title=\"xrebel 支持的框架及场景\"></a><a href=\"http://manuals.zeroturnaround.com/xrebel/support/index.html#\" target=\"_blank\" rel=\"noopener\">xrebel 支持的框架及场景</a></h2><h2 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a><a href=\"https://zeroturnaround.com/software/xrebel/quick-start/\" target=\"_blank\" rel=\"noopener\">快速安装</a></h2><p>xrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。</p>\n<ol>\n<li>下载xrebel.zip 并解压到本地，e.g. <code>D:\\xrebel</code></li>\n<li>在tomcat也好，idea,eclipse也好，修改vm 参数，添加 <code>-javaagent:[path/to/xrebel]/xrebel.jar</code></li>\n</ol>\n<p>下面分别是idea,eclipse</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg\" alt=\"\"></p>\n<p>默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 <a href=\"https://zeroturnaround.com/software/xrebel/\" target=\"_blank\" rel=\"noopener\">xrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">jrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel-for-android/\" target=\"_blank\" rel=\"noopener\">jrebel for android</a> 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 <a href=\"https://my.jrebel.com/\" target=\"_blank\" rel=\"noopener\">https://my.jrebel.com/</a></p>\n<h2 id=\"web-ui\"><a href=\"#web-ui\" class=\"headerlink\" title=\"web ui\"></a>web ui</h2><p>打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 <code>xrebel</code>的<code>toolbar</code>，(e.g. <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>)</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg\" alt=\"\"></p>\n<p>或者通过 访问<code>服务/xrebel</code> (e.g. <a href=\"http://localhost:8080/xrebel\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/xrebel</a>) 打开单独页面，适用于webservice,restful 等无页面场景</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg\" alt=\"\"></p>\n<p>如果不想注入到页面中，只想通过<code>服务/xrebel</code>访问，则可以添加 <code>-Dxrebel.injection=true|false</code> ，默认为<code>true</code></p>\n<p>其余开关参数 参见  <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\" target=\"_blank\" rel=\"noopener\">XRebel launch parameters</a></p>\n<h2 id=\"xrebel-简单使用教程\"><a href=\"#xrebel-简单使用教程\" class=\"headerlink\" title=\"xrebel 简单使用教程\"></a>xrebel 简单使用教程</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/index.html#\" target=\"_blank\" rel=\"noopener\">Using XRebel</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg\" alt=\"\"></p>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\" target=\"_blank\" rel=\"noopener\">Microservices</a> 和 <a href=\"https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\" target=\"_blank\" rel=\"noopener\">XRebel 3.0: introducing microservices profiling</a> </p>\n<p>确保调用方，和被调用方，都开了xrebel，</p>\n<p>效果如下</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>\n<h2 id=\"启用xrebel调试\"><a href=\"#启用xrebel调试\" class=\"headerlink\" title=\"启用xrebel调试\"></a>启用xrebel调试</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\" target=\"_blank\" rel=\"noopener\">Debugging with XRebel enabled</a></p>\n<h2 id=\"题外话-静态资源分离的必要性\"><a href=\"#题外话-静态资源分离的必要性\" class=\"headerlink\" title=\"题外话 静态资源分离的必要性\"></a>题外话 静态资源分离的必要性</h2><p>为嘛建议将静态文件分离？通过xrebel就可以清晰看出来</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg\" alt=\"\"></p>\n<p>博客 <a href=\"https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/</a><br>掘金 <a href=\"https://juejin.im/post/5a13e3db6fb9a045186a5bfc\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a13e3db6fb9a045186a5bfc</a><br>简书 <a href=\"http://www.jianshu.com/p/0029c32dde4e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/0029c32dde4e</a></p>\n","site":{"data":{}},"excerpt":"<p>对于java应用性能跟踪其实有很多种手段，本文只是针对<code>xrebel</code>的使用做一些简单讲解（<code>单体应用</code>和<code>微服务应用</code>）。分布式跟踪有很多，比如zipkin等，详见 <a href=\"http://manzhizhen.iteye.com/blog/2348175\" target=\"_blank\" rel=\"noopener\">分布式跟踪系统（一）：Zipkin的背景和设计</a>，但是太重了，不适合小规模团队，开发时期用。</p>\n<p>而且以zipkin为例，仅仅是A服务调用B服务耗时多少，并不会显示详细的线程，堆栈信息。需要搭配其他手段进行排查。</p>\n<p>示例：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>","more":"<h2 id=\"下载xrebel\"><a href=\"#下载xrebel\" class=\"headerlink\" title=\"下载xrebel\"></a><a href=\"https://zeroturnaround.com/software/xrebel/download/\" target=\"_blank\" rel=\"noopener\">下载xrebel</a></h2><p>目前最新版本 <a href=\"https://zeroturnaround.com/software/xrebel/download/thank-you/?file=xrebel/releases/xrebel-3.4.1.zip\" target=\"_blank\" rel=\"noopener\">xrebel-3.4.1.zip</a></p>\n<h2 id=\"xrebel-支持的框架及场景\"><a href=\"#xrebel-支持的框架及场景\" class=\"headerlink\" title=\"xrebel 支持的框架及场景\"></a><a href=\"http://manuals.zeroturnaround.com/xrebel/support/index.html#\" target=\"_blank\" rel=\"noopener\">xrebel 支持的框架及场景</a></h2><h2 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a><a href=\"https://zeroturnaround.com/software/xrebel/quick-start/\" target=\"_blank\" rel=\"noopener\">快速安装</a></h2><p>xrebel支持eclipse和idea,同时有eclipse插件，建议使用独立方式安装。</p>\n<ol>\n<li>下载xrebel.zip 并解压到本地，e.g. <code>D:\\xrebel</code></li>\n<li>在tomcat也好，idea,eclipse也好，修改vm 参数，添加 <code>-javaagent:[path/to/xrebel]/xrebel.jar</code></li>\n</ol>\n<p>下面分别是idea,eclipse</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhxvfhj20jd0moaat.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqqhyux0j20wq0spmz7.jpg\" alt=\"\"></p>\n<p>默认是可以试用14天的，建议支持正版，毕竟大家都是吃这行饭的。而且 <a href=\"https://zeroturnaround.com/software/xrebel/\" target=\"_blank\" rel=\"noopener\">xrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">jrebel</a> <a href=\"https://zeroturnaround.com/software/jrebel-for-android/\" target=\"_blank\" rel=\"noopener\">jrebel for android</a> 给你省的时间，绝对值这个价。 jrebel有个免费的社区计划 <a href=\"https://my.jrebel.com/\" target=\"_blank\" rel=\"noopener\">https://my.jrebel.com/</a></p>\n<h2 id=\"web-ui\"><a href=\"#web-ui\" class=\"headerlink\" title=\"web ui\"></a>web ui</h2><p>打开 web 服务页面，xrebel会直接注入到你的页面中，左下角会出现 <code>xrebel</code>的<code>toolbar</code>，(e.g. <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>)</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqswphn4j20220bqjrc.jpg\" alt=\"\"></p>\n<p>或者通过 访问<code>服务/xrebel</code> (e.g. <a href=\"http://localhost:8080/xrebel\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/xrebel</a>) 打开单独页面，适用于webservice,restful 等无页面场景</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpqvgh2muj20md0f23z9.jpg\" alt=\"\"></p>\n<p>如果不想注入到页面中，只想通过<code>服务/xrebel</code>访问，则可以添加 <code>-Dxrebel.injection=true|false</code> ，默认为<code>true</code></p>\n<p>其余开关参数 参见  <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#xrebel-launch-parameters\" target=\"_blank\" rel=\"noopener\">XRebel launch parameters</a></p>\n<h2 id=\"xrebel-简单使用教程\"><a href=\"#xrebel-简单使用教程\" class=\"headerlink\" title=\"xrebel 简单使用教程\"></a>xrebel 简单使用教程</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/index.html#\" target=\"_blank\" rel=\"noopener\">Using XRebel</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxem5gdj20tq0h3tc1.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxekmsfj20wx0h3jua.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxeljmhj20tt0h3wg0.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprxelpxkj20th0h10vd.jpg\" alt=\"\"></p>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#microservices\" target=\"_blank\" rel=\"noopener\">Microservices</a> 和 <a href=\"https://zeroturnaround.com/rebellabs/xrebel-3-0-introducing-microservices-profiling/\" target=\"_blank\" rel=\"noopener\">XRebel 3.0: introducing microservices profiling</a> </p>\n<p>确保调用方，和被调用方，都开了xrebel，</p>\n<p>效果如下</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flpr6fphdbj21h10q30xi.jpg\" alt=\"\"></p>\n<h2 id=\"启用xrebel调试\"><a href=\"#启用xrebel调试\" class=\"headerlink\" title=\"启用xrebel调试\"></a>启用xrebel调试</h2><p>参考 <a href=\"http://manuals.zeroturnaround.com/xrebel/use/advanced.html#debugging-with-xrebel-enabled\" target=\"_blank\" rel=\"noopener\">Debugging with XRebel enabled</a></p>\n<h2 id=\"题外话-静态资源分离的必要性\"><a href=\"#题外话-静态资源分离的必要性\" class=\"headerlink\" title=\"题外话 静态资源分离的必要性\"></a>题外话 静态资源分离的必要性</h2><p>为嘛建议将静态文件分离？通过xrebel就可以清晰看出来</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1flprzm06cej20lo09iq3n.jpg\" alt=\"\"></p>\n<p>博客 <a href=\"https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/11/21/xrebel-introducing-microservices-profiling/</a><br>掘金 <a href=\"https://juejin.im/post/5a13e3db6fb9a045186a5bfc\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a13e3db6fb9a045186a5bfc</a><br>简书 <a href=\"http://www.jianshu.com/p/0029c32dde4e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/0029c32dde4e</a></p>"},{"title":"xshell 使用 Oh My ZSH home键 end键 小键盘区无效解决办法","date":"2017-09-10T08:38:41.000Z","_content":"\nzsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 [robbyrussell/oh-my-zsh][] 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k\n\n同样很优秀的有 [fisherman/fisherman][]\n\n此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。\n\n此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题\n\n<!--more-->\n\n参考连接 [Cannot using home/end key after install oh-my-zsh][linkCannotUsingHome/endKeyAfterInstall]\n\n第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成`linux`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg)\n\n但是注意 [@linlinlinlin ][] 所说，改用`linux`可能会导致shell的颜色比较奇怪。\n\n`linux`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg)\n\n`xterm`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg)\n\n\n结合 [@candrew34][] 和 [@linlinlinlin ][]的回复，得出第二种方案\n\n第二种方法，稍微复杂点\n\n```bash\ncat <<ENDOF >> ~/.zshrc\n# Home\nbindkey '\\e[1~' beginning-of-line\n# End\nbindkey '\\e[4~' end-of-line\n\n# Keypad\n# 0 . Enter\nbindkey -s \"^[Op\" \"0\"\nbindkey -s \"^[Ol\" \".\"\nbindkey -s \"^[OM\" \"^M\"\n# 1 2 3\nbindkey -s \"^[Oq\" \"1\"\nbindkey -s \"^[Or\" \"2\"\nbindkey -s \"^[Os\" \"3\"\n# 4 5 6\nbindkey -s \"^[Ot\" \"4\"\nbindkey -s \"^[Ou\" \"5\"\nbindkey -s \"^[Ov\" \"6\"\n# 7 8 9\nbindkey -s \"^[Ow\" \"7\"\nbindkey -s \"^[Ox\" \"8\"\nbindkey -s \"^[Oy\" \"9\"\n# + -  * /\nbindkey -s \"^[Ok\" \"+\"\nbindkey -s \"^[Om\" \"-\"\nbindkey -s \"^[Oj\" \"*\"\nbindkey -s \"^[Oo\" \"/\"\nENDOF\n\nsource ~/.zshrc\n```\n\n\n另附 [客户端putty, xshell连接linux中vim的小键盘问题][link客户端putty,Xshell连接linux中vim的小键盘问题]\n\n[robbyrussell/oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[fisherman/fisherman]: https://github.com/fisherman/fisherman\n[@linlinlinlin ]: https://github.com/linlinlinlin\n[@candrew34]: https://github.com/candrew34\n[linkCannotUsingHome/endKeyAfterInstall]: https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\n[link客户端putty,Xshell连接linux中vim的小键盘问题]: http://blog.csdn.net/jiedushi/article/details/6266944\n","source":"_posts/zsh-home-end-keypad-not-work.md","raw":"---\ntitle: xshell 使用 Oh My ZSH home键 end键 小键盘区无效解决办法\ndate: 2017-09-10 16:38:41\ntags: [zsh,xshell,oh-my-zsh]\n---\n\nzsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 [robbyrussell/oh-my-zsh][] 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k\n\n同样很优秀的有 [fisherman/fisherman][]\n\n此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。\n\n此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题\n\n<!--more-->\n\n参考连接 [Cannot using home/end key after install oh-my-zsh][linkCannotUsingHome/endKeyAfterInstall]\n\n第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成`linux`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg)\n\n但是注意 [@linlinlinlin ][] 所说，改用`linux`可能会导致shell的颜色比较奇怪。\n\n`linux`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg)\n\n`xterm`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg)\n\n\n结合 [@candrew34][] 和 [@linlinlinlin ][]的回复，得出第二种方案\n\n第二种方法，稍微复杂点\n\n```bash\ncat <<ENDOF >> ~/.zshrc\n# Home\nbindkey '\\e[1~' beginning-of-line\n# End\nbindkey '\\e[4~' end-of-line\n\n# Keypad\n# 0 . Enter\nbindkey -s \"^[Op\" \"0\"\nbindkey -s \"^[Ol\" \".\"\nbindkey -s \"^[OM\" \"^M\"\n# 1 2 3\nbindkey -s \"^[Oq\" \"1\"\nbindkey -s \"^[Or\" \"2\"\nbindkey -s \"^[Os\" \"3\"\n# 4 5 6\nbindkey -s \"^[Ot\" \"4\"\nbindkey -s \"^[Ou\" \"5\"\nbindkey -s \"^[Ov\" \"6\"\n# 7 8 9\nbindkey -s \"^[Ow\" \"7\"\nbindkey -s \"^[Ox\" \"8\"\nbindkey -s \"^[Oy\" \"9\"\n# + -  * /\nbindkey -s \"^[Ok\" \"+\"\nbindkey -s \"^[Om\" \"-\"\nbindkey -s \"^[Oj\" \"*\"\nbindkey -s \"^[Oo\" \"/\"\nENDOF\n\nsource ~/.zshrc\n```\n\n\n另附 [客户端putty, xshell连接linux中vim的小键盘问题][link客户端putty,Xshell连接linux中vim的小键盘问题]\n\n[robbyrussell/oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[fisherman/fisherman]: https://github.com/fisherman/fisherman\n[@linlinlinlin ]: https://github.com/linlinlinlin\n[@candrew34]: https://github.com/candrew34\n[linkCannotUsingHome/endKeyAfterInstall]: https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\n[link客户端putty,Xshell连接linux中vim的小键盘问题]: http://blog.csdn.net/jiedushi/article/details/6266944\n","slug":"zsh-home-end-keypad-not-work","published":1,"updated":"2019-08-16T05:56:21.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojf3003r24dozn7l1qcw","content":"<p>zsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">robbyrussell/oh-my-zsh</a> 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k</p>\n<p>同样很优秀的有 <a href=\"https://github.com/fisherman/fisherman\" target=\"_blank\" rel=\"noopener\">fisherman/fisherman</a></p>\n<p>此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。</p>\n<p>此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题</p>\n<a id=\"more\"></a>\n<p>参考连接 <a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\" target=\"_blank\" rel=\"noopener\">Cannot using home/end key after install oh-my-zsh</a></p>\n<p>第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成<code>linux</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg\" alt=\"\"></p>\n<p>但是注意 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a> 所说，改用<code>linux</code>可能会导致shell的颜色比较奇怪。</p>\n<p><code>linux</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg\" alt=\"\"></p>\n<p><code>xterm</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg\" alt=\"\"></p>\n<p>结合 <a href=\"https://github.com/candrew34\" target=\"_blank\" rel=\"noopener\">@candrew34</a> 和 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a>的回复，得出第二种方案</p>\n<p>第二种方法，稍微复杂点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;ENDOF &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># Home</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[1~'</span> beginning-of-line</span><br><span class=\"line\"><span class=\"comment\"># End</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[4~'</span> end-of-line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keypad</span></span><br><span class=\"line\"><span class=\"comment\"># 0 . Enter</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Op\"</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ol\"</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[OM\"</span> <span class=\"string\">\"^M\"</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oq\"</span> <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Or\"</span> <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Os\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"comment\"># 4 5 6</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ot\"</span> <span class=\"string\">\"4\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ou\"</span> <span class=\"string\">\"5\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ov\"</span> <span class=\"string\">\"6\"</span></span><br><span class=\"line\"><span class=\"comment\"># 7 8 9</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ow\"</span> <span class=\"string\">\"7\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ox\"</span> <span class=\"string\">\"8\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oy\"</span> <span class=\"string\">\"9\"</span></span><br><span class=\"line\"><span class=\"comment\"># + -  * /</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ok\"</span> <span class=\"string\">\"+\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Om\"</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oj\"</span> <span class=\"string\">\"*\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oo\"</span> <span class=\"string\">\"/\"</span></span><br><span class=\"line\">ENDOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>另附 <a href=\"http://blog.csdn.net/jiedushi/article/details/6266944\" target=\"_blank\" rel=\"noopener\">客户端putty, xshell连接linux中vim的小键盘问题</a></p>\n","site":{"data":{}},"excerpt":"<p>zsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">robbyrussell/oh-my-zsh</a> 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k</p>\n<p>同样很优秀的有 <a href=\"https://github.com/fisherman/fisherman\" target=\"_blank\" rel=\"noopener\">fisherman/fisherman</a></p>\n<p>此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。</p>\n<p>此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，<kbd>Home</kbd>,<kbd>End</kbd>,小键盘区诸键无效问题</p>","more":"<p>参考连接 <a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/3061#issuecomment-93494905\" target=\"_blank\" rel=\"noopener\">Cannot using home/end key after install oh-my-zsh</a></p>\n<p>第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成<code>linux</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjekq3ap0wj20fu0d3jrt.jpg\" alt=\"\"></p>\n<p>但是注意 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a> 所说，改用<code>linux</code>可能会导致shell的颜色比较奇怪。</p>\n<p><code>linux</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lc8faj205706rglk.jpg\" alt=\"\"></p>\n<p><code>xterm</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fjel9lchsfj207e09gaa4.jpg\" alt=\"\"></p>\n<p>结合 <a href=\"https://github.com/candrew34\" target=\"_blank\" rel=\"noopener\">@candrew34</a> 和 <a href=\"https://github.com/linlinlinlin\" target=\"_blank\" rel=\"noopener\">@linlinlinlin </a>的回复，得出第二种方案</p>\n<p>第二种方法，稍微复杂点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;ENDOF &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># Home</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[1~'</span> beginning-of-line</span><br><span class=\"line\"><span class=\"comment\"># End</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> <span class=\"string\">'\\e[4~'</span> end-of-line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keypad</span></span><br><span class=\"line\"><span class=\"comment\"># 0 . Enter</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Op\"</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ol\"</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[OM\"</span> <span class=\"string\">\"^M\"</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oq\"</span> <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Or\"</span> <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Os\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"comment\"># 4 5 6</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ot\"</span> <span class=\"string\">\"4\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ou\"</span> <span class=\"string\">\"5\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ov\"</span> <span class=\"string\">\"6\"</span></span><br><span class=\"line\"><span class=\"comment\"># 7 8 9</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ow\"</span> <span class=\"string\">\"7\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ox\"</span> <span class=\"string\">\"8\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oy\"</span> <span class=\"string\">\"9\"</span></span><br><span class=\"line\"><span class=\"comment\"># + -  * /</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Ok\"</span> <span class=\"string\">\"+\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Om\"</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oj\"</span> <span class=\"string\">\"*\"</span></span><br><span class=\"line\"><span class=\"built_in\">bindkey</span> -s <span class=\"string\">\"^[Oo\"</span> <span class=\"string\">\"/\"</span></span><br><span class=\"line\">ENDOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>另附 <a href=\"http://blog.csdn.net/jiedushi/article/details/6266944\" target=\"_blank\" rel=\"noopener\">客户端putty, xshell连接linux中vim的小键盘问题</a></p>"},{"title":"Ansible2.7批量管理Windows","date":"2019-02-13T16:58:00.000Z","_content":"\n<a name=\"59683fbc\"></a>\n## 简述\n\n<a name=\"8e1b944f\"></a>\n### 背景\nAnsible是一款轻量级的开源的自动化运维工具，支持linux和windows(只支持client，并且部分模块)，利用Ansible可以简单批量的配置系统，安装软件，或者更高级的运维任务（比如滚动升级）。\n\nAnsible之类的运维工具对运维工作进行抽象及规范，能够极大的降低运维难度。本文只是为了演示如何通过ansible 的各模块对windows进行传输文件,管理账号,执行脚本等批量自动化管理工作\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n### 实验环境\n| 类型 | 系统 | ip |\n| --- | --- | --- |\n| Server | Ubuntu Server 16.04.5 LTS X64 | 192.168.0.22 |\n| Client | Windows Server 2008 R2 SP1 | 192.168.0.23 |\n\n\n**注意：**\n\n如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境，升级完PS和.Net后），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费\n\n<a name=\"d29617ad\"></a>\n## Windows 被控端(Ansible Client)\n\nAnsible 只支持Powershell 4.0及以上(用3.0会报 [Process is terminated due to StackOverflowException.](https://github.com/ansible/ansible/issues/10825))，所以要求最低要求Win7,或者Win server 2008,详见 [Ansible Doc host requirements](https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#host-requirements)\n\n<a name=\"399fa47e\"></a>\n### [升级PowerShell 和.Net Framework](https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#id2)\n\n官方文档要求升级至ps3.0即可，但是实验发现，3.0会报错\n\n`Win+R`  -> `PowerShell`  打开PowerShell\n\n输入 `$PSVersionTable` 查看 `PSVersion` 确保大于等于4.0(PowerShell 4.0),以及 `CLRVersion` 大于等于4.0(.NET Framework 4.0) ,如果版本过低，则执行下面代码，直接复制到PowerShell 执行即可,建议使用5.1(参考 [hotfixv4.trafficmanager.net dont work](https://github.com/jborean93/ansible-windows/issues/14) 和 [安装和配置 WMF 5.1](https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure))\n\n**注意：**\n\n- 注意用户名密码改成管理员的用户名密码\n- 确保能够访问外网\n- PowerShell以管理员模式打开\n- PS3不能直升PS5，需要卸载PS3或者保存 PSModulePath\n- 安装PS5需要先打最新SP补丁\n- PS5要求 .NET Framework 不低于 4.5.2\n- 安装成功后会自动重启服务器，注意别影响其他服务\n\n```bash\n$url = \"https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1\"\n$file = \"$env:temp\\Upgrade-PowerShell.ps1\"\n$username = \"管理员用户名\"\n$password = \"管理员密码\"\n\n(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Force\n\n# PowerShell 版本，只能用 3.0, 4.0 和 5.1 \n&$file -Version 5.1 -Username $username -Password $password -Verbose\n```\n\n重启后，再次打开PS ,输入 `$PSVersionTable` 查看版本\n\n<a name=\"fadbd8e5\"></a>\n### 安装WinRM，并且配置监听\n\n```\n## 配置WinRM\n\n$url = \"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"\n$file = \"$env:temp\\ConfigureRemotingForAnsible.ps1\"\n(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)\npowershell.exe -ExecutionPolicy ByPass -File $file\n```\n\n<a name=\"1994c2f8\"></a>\n## Linux主控端(Ansible Server)\n\n<a name=\"401f96f4\"></a>\n### 安装Ansible和pywinrm\n\n参考 [Installing the Control Machine](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine)\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install -y software-properties-common\n$ sudo apt-add-repository --yes --update ppa:ansible/ansible\n$ sudo apt-get install -y ansible\n$ ansible --version\nansible 2.7.7\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/lib/python2.7/dist-packages/ansible\n  executable location = /usr/bin/ansible\n  python version = 2.7.12 (default, Nov 12 2018, 14:36:49) [GCC 5.4.0 20160609]\n\n$ pip install \"pywinrm>=0.3.0\"\n```\n\n<a name=\"a9796771\"></a>\n### 配置Inventory\n\n参考 [Working with Inventory](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html)\n\n默认是 Inventory `/etc/ansible/hosts` ,此处改为手动指定，Ansible的Inventory支持ini格式和yaml格式，本文采用yaml格式\n\n```bash\n$ mkdir ansible\n$ tee ansible/test_hosts.yaml <<-'EOF'\nwinserver:\n  hosts: \n    192.168.0.23:\n  vars:\n    ansible_user: Administrator\n    ansible_password: 密码\n    ansible_connection: winrm\n    ansible_port: 5986\n    ansible_winrm_server_cert_validation: ignore\n\nEOF\n```\n\n<a name=\"ea275a70\"></a>\n### 探测主机是否存活\n\n```bash\n$ ansible -i ansible/test_hosts.yaml winserver -m win_ping\n 192.168.0.23 | SUCCESS => {\n    \"changed\": false, \n    \"ping\": \"pong\"\n}\n```\n\n如果报错\n\n```bash\nTASK [Gathering Facts] *******************************************************************************************************************************************************************************************************************************************************\nfatal: [192.168.0.23]: UNREACHABLE! => {\"changed\": false, \"msg\": \"ssl: HTTPSConnectionPool(host='192.168.0.23', port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(\\\"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)\\\",),))\", \"unreachable\": true}\n```\n\n降级一下 `pip install \"pywinrm==0.2.2\"`\n\n更多实验，参见参考资料中的两篇51cto中的博文\n\n<a name=\"7d486fc7\"></a>\n## 可用的Windows模块\n\n根据 [What modules are available?](https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#what-modules-are-available) 绝大部分Module都是针对Linux编写的，大部分在windows下不能正常使用，有一些专用的windows module 使用ps编写的，可用在windows下使用，详细列表参见 [Windows modules](https://docs.ansible.com/ansible/latest/modules/list_of_windows_modules.html#windows-modules)\n\n<a name=\"fae94bcd\"></a>\n## [Windows常见问题](https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#windows-frequently-asked-questions)\n\n官方文档中列举了Ansible windows常见问题，建议仔细阅读\n\n<a name=\"53001b41\"></a>\n## Ansible Playbook\n\nAnsible配合[playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#about-playbooks)食用更佳，上述中的 `ansible` 命令是[adhoc命令模式](https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html)，类似在bash中手动执行命令，多用于简单，并且不需要复用场景，而 `ansible-playbook` 类似 bash脚本，但是更强大，适合复杂任务编排场景。\n\n考虑后期出一个playbook的文章\n\n推荐配合[vscode](https://code.visualstudio.com/)的[ansible](https://marketplace.visualstudio.com/items?itemName=vscoss.vscode-ansible) 插件(github repo 地址 [https://github.com/VSChina/vscode-ansible](https://github.com/VSChina/vscode-ansible))\n\n效果如下所示，比idea的ansible强大很多。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/226273/1556186451366-4149328b-fa7d-439d-9761-0194293d9352.gif#align=left&display=inline&height=546&originHeight=724&originWidth=990&size=0&status=done&width=746)\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [官方文档](https://docs.ansible.com/)\n- [官方文档-windows指南](https://docs.ansible.com/ansible/latest/user_guide/windows.html)\n- [官方文档-windows指南-winrm步骤](https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#winrm-setup)\n- [Ansible批量远程管理Windows主机(部署与配置)](http://blog.51cto.com/7424593/2174156)\n- [ansible自动化管理windows系统实战](http://blog.51cto.com/dyc2005/2064746)\n- [安装和配置 WMF 5.1](https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure)\n- [hotfixv4.trafficmanager.net dont work](https://github.com/jborean93/ansible-windows/issues/14)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师。\n\n","source":"_posts/ansible-2-7-windows.md","raw":"\n---\n\ntitle: Ansible2.7批量管理Windows\n\ndate: 2019-02-14 00:58:00 +0800\n\ntags: [ansible,运维,devops,windows,ansible-playbook]\n\ncategories: 运维\n\n---\n\n<a name=\"59683fbc\"></a>\n## 简述\n\n<a name=\"8e1b944f\"></a>\n### 背景\nAnsible是一款轻量级的开源的自动化运维工具，支持linux和windows(只支持client，并且部分模块)，利用Ansible可以简单批量的配置系统，安装软件，或者更高级的运维任务（比如滚动升级）。\n\nAnsible之类的运维工具对运维工作进行抽象及规范，能够极大的降低运维难度。本文只是为了演示如何通过ansible 的各模块对windows进行传输文件,管理账号,执行脚本等批量自动化管理工作\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n### 实验环境\n| 类型 | 系统 | ip |\n| --- | --- | --- |\n| Server | Ubuntu Server 16.04.5 LTS X64 | 192.168.0.22 |\n| Client | Windows Server 2008 R2 SP1 | 192.168.0.23 |\n\n\n**注意：**\n\n如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境，升级完PS和.Net后），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费\n\n<a name=\"d29617ad\"></a>\n## Windows 被控端(Ansible Client)\n\nAnsible 只支持Powershell 4.0及以上(用3.0会报 [Process is terminated due to StackOverflowException.](https://github.com/ansible/ansible/issues/10825))，所以要求最低要求Win7,或者Win server 2008,详见 [Ansible Doc host requirements](https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#host-requirements)\n\n<a name=\"399fa47e\"></a>\n### [升级PowerShell 和.Net Framework](https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#id2)\n\n官方文档要求升级至ps3.0即可，但是实验发现，3.0会报错\n\n`Win+R`  -> `PowerShell`  打开PowerShell\n\n输入 `$PSVersionTable` 查看 `PSVersion` 确保大于等于4.0(PowerShell 4.0),以及 `CLRVersion` 大于等于4.0(.NET Framework 4.0) ,如果版本过低，则执行下面代码，直接复制到PowerShell 执行即可,建议使用5.1(参考 [hotfixv4.trafficmanager.net dont work](https://github.com/jborean93/ansible-windows/issues/14) 和 [安装和配置 WMF 5.1](https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure))\n\n**注意：**\n\n- 注意用户名密码改成管理员的用户名密码\n- 确保能够访问外网\n- PowerShell以管理员模式打开\n- PS3不能直升PS5，需要卸载PS3或者保存 PSModulePath\n- 安装PS5需要先打最新SP补丁\n- PS5要求 .NET Framework 不低于 4.5.2\n- 安装成功后会自动重启服务器，注意别影响其他服务\n\n```bash\n$url = \"https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1\"\n$file = \"$env:temp\\Upgrade-PowerShell.ps1\"\n$username = \"管理员用户名\"\n$password = \"管理员密码\"\n\n(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Force\n\n# PowerShell 版本，只能用 3.0, 4.0 和 5.1 \n&$file -Version 5.1 -Username $username -Password $password -Verbose\n```\n\n重启后，再次打开PS ,输入 `$PSVersionTable` 查看版本\n\n<a name=\"fadbd8e5\"></a>\n### 安装WinRM，并且配置监听\n\n```\n## 配置WinRM\n\n$url = \"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"\n$file = \"$env:temp\\ConfigureRemotingForAnsible.ps1\"\n(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)\npowershell.exe -ExecutionPolicy ByPass -File $file\n```\n\n<a name=\"1994c2f8\"></a>\n## Linux主控端(Ansible Server)\n\n<a name=\"401f96f4\"></a>\n### 安装Ansible和pywinrm\n\n参考 [Installing the Control Machine](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine)\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install -y software-properties-common\n$ sudo apt-add-repository --yes --update ppa:ansible/ansible\n$ sudo apt-get install -y ansible\n$ ansible --version\nansible 2.7.7\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/lib/python2.7/dist-packages/ansible\n  executable location = /usr/bin/ansible\n  python version = 2.7.12 (default, Nov 12 2018, 14:36:49) [GCC 5.4.0 20160609]\n\n$ pip install \"pywinrm>=0.3.0\"\n```\n\n<a name=\"a9796771\"></a>\n### 配置Inventory\n\n参考 [Working with Inventory](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html)\n\n默认是 Inventory `/etc/ansible/hosts` ,此处改为手动指定，Ansible的Inventory支持ini格式和yaml格式，本文采用yaml格式\n\n```bash\n$ mkdir ansible\n$ tee ansible/test_hosts.yaml <<-'EOF'\nwinserver:\n  hosts: \n    192.168.0.23:\n  vars:\n    ansible_user: Administrator\n    ansible_password: 密码\n    ansible_connection: winrm\n    ansible_port: 5986\n    ansible_winrm_server_cert_validation: ignore\n\nEOF\n```\n\n<a name=\"ea275a70\"></a>\n### 探测主机是否存活\n\n```bash\n$ ansible -i ansible/test_hosts.yaml winserver -m win_ping\n 192.168.0.23 | SUCCESS => {\n    \"changed\": false, \n    \"ping\": \"pong\"\n}\n```\n\n如果报错\n\n```bash\nTASK [Gathering Facts] *******************************************************************************************************************************************************************************************************************************************************\nfatal: [192.168.0.23]: UNREACHABLE! => {\"changed\": false, \"msg\": \"ssl: HTTPSConnectionPool(host='192.168.0.23', port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(\\\"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)\\\",),))\", \"unreachable\": true}\n```\n\n降级一下 `pip install \"pywinrm==0.2.2\"`\n\n更多实验，参见参考资料中的两篇51cto中的博文\n\n<a name=\"7d486fc7\"></a>\n## 可用的Windows模块\n\n根据 [What modules are available?](https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#what-modules-are-available) 绝大部分Module都是针对Linux编写的，大部分在windows下不能正常使用，有一些专用的windows module 使用ps编写的，可用在windows下使用，详细列表参见 [Windows modules](https://docs.ansible.com/ansible/latest/modules/list_of_windows_modules.html#windows-modules)\n\n<a name=\"fae94bcd\"></a>\n## [Windows常见问题](https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#windows-frequently-asked-questions)\n\n官方文档中列举了Ansible windows常见问题，建议仔细阅读\n\n<a name=\"53001b41\"></a>\n## Ansible Playbook\n\nAnsible配合[playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#about-playbooks)食用更佳，上述中的 `ansible` 命令是[adhoc命令模式](https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html)，类似在bash中手动执行命令，多用于简单，并且不需要复用场景，而 `ansible-playbook` 类似 bash脚本，但是更强大，适合复杂任务编排场景。\n\n考虑后期出一个playbook的文章\n\n推荐配合[vscode](https://code.visualstudio.com/)的[ansible](https://marketplace.visualstudio.com/items?itemName=vscoss.vscode-ansible) 插件(github repo 地址 [https://github.com/VSChina/vscode-ansible](https://github.com/VSChina/vscode-ansible))\n\n效果如下所示，比idea的ansible强大很多。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/226273/1556186451366-4149328b-fa7d-439d-9761-0194293d9352.gif#align=left&display=inline&height=546&originHeight=724&originWidth=990&size=0&status=done&width=746)\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [官方文档](https://docs.ansible.com/)\n- [官方文档-windows指南](https://docs.ansible.com/ansible/latest/user_guide/windows.html)\n- [官方文档-windows指南-winrm步骤](https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#winrm-setup)\n- [Ansible批量远程管理Windows主机(部署与配置)](http://blog.51cto.com/7424593/2174156)\n- [ansible自动化管理windows系统实战](http://blog.51cto.com/dyc2005/2064746)\n- [安装和配置 WMF 5.1](https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure)\n- [hotfixv4.trafficmanager.net dont work](https://github.com/jborean93/ansible-windows/issues/14)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师。\n\n","slug":"ansible-2-7-windows","published":1,"updated":"2019-08-16T06:11:15.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtoji900cq24doqiihltyi","content":"<p><a name=\"59683fbc\"></a></p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p><a name=\"8e1b944f\"></a></p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>Ansible是一款轻量级的开源的自动化运维工具，支持linux和windows(只支持client，并且部分模块)，利用Ansible可以简单批量的配置系统，安装软件，或者更高级的运维任务（比如滚动升级）。</p>\n<p>Ansible之类的运维工具对运维工作进行抽象及规范，能够极大的降低运维难度。本文只是为了演示如何通过ansible 的各模块对windows进行传输文件,管理账号,执行脚本等批量自动化管理工作</p>\n<a id=\"more\"></a>\n<p><a name=\"12267079\"></a></p>\n<h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>系统</th>\n<th>ip</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server</td>\n<td>Ubuntu Server 16.04.5 LTS X64</td>\n<td>192.168.0.22</td>\n</tr>\n<tr>\n<td>Client</td>\n<td>Windows Server 2008 R2 SP1</td>\n<td>192.168.0.23</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong></p>\n<p>如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境，升级完PS和.Net后），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费</p>\n<p><a name=\"d29617ad\"></a></p>\n<h2 id=\"Windows-被控端-Ansible-Client\"><a href=\"#Windows-被控端-Ansible-Client\" class=\"headerlink\" title=\"Windows 被控端(Ansible Client)\"></a>Windows 被控端(Ansible Client)</h2><p>Ansible 只支持Powershell 4.0及以上(用3.0会报 <a href=\"https://github.com/ansible/ansible/issues/10825\" target=\"_blank\" rel=\"noopener\">Process is terminated due to StackOverflowException.</a>)，所以要求最低要求Win7,或者Win server 2008,详见 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#host-requirements\" target=\"_blank\" rel=\"noopener\">Ansible Doc host requirements</a></p>\n<p><a name=\"399fa47e\"></a></p>\n<h3 id=\"升级PowerShell-和-Net-Framework\"><a href=\"#升级PowerShell-和-Net-Framework\" class=\"headerlink\" title=\"升级PowerShell 和.Net Framework\"></a><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#id2\" target=\"_blank\" rel=\"noopener\">升级PowerShell 和.Net Framework</a></h3><p>官方文档要求升级至ps3.0即可，但是实验发现，3.0会报错</p>\n<p><code>Win+R</code>  -&gt; <code>PowerShell</code>  打开PowerShell</p>\n<p>输入 <code>$PSVersionTable</code> 查看 <code>PSVersion</code> 确保大于等于4.0(PowerShell 4.0),以及 <code>CLRVersion</code> 大于等于4.0(.NET Framework 4.0) ,如果版本过低，则执行下面代码，直接复制到PowerShell 执行即可,建议使用5.1(参考 <a href=\"https://github.com/jborean93/ansible-windows/issues/14\" target=\"_blank\" rel=\"noopener\">hotfixv4.trafficmanager.net dont work</a> 和 <a href=\"https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure\" target=\"_blank\" rel=\"noopener\">安装和配置 WMF 5.1</a>)</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>注意用户名密码改成管理员的用户名密码</li>\n<li>确保能够访问外网</li>\n<li>PowerShell以管理员模式打开</li>\n<li>PS3不能直升PS5，需要卸载PS3或者保存 PSModulePath</li>\n<li>安装PS5需要先打最新SP补丁</li>\n<li>PS5要求 .NET Framework 不低于 4.5.2</li>\n<li>安装成功后会自动重启服务器，注意别影响其他服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">\"https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1\"</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"string\">\"<span class=\"variable\">$env</span>:temp\\Upgrade-PowerShell.ps1\"</span></span><br><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"string\">\"管理员用户名\"</span></span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"string\">\"管理员密码\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">(New-Object -TypeName System.Net.WebClient).DownloadFile(<span class=\"variable\">$url</span>, <span class=\"variable\">$file</span>)</span><br><span class=\"line\">Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PowerShell 版本，只能用 3.0, 4.0 和 5.1 </span></span><br><span class=\"line\">&amp;<span class=\"variable\">$file</span> -Version 5.1 -Username <span class=\"variable\">$username</span> -Password <span class=\"variable\">$password</span> -Verbose</span><br></pre></td></tr></table></figure>\n<p>重启后，再次打开PS ,输入 <code>$PSVersionTable</code> 查看版本</p>\n<p><a name=\"fadbd8e5\"></a></p>\n<h3 id=\"安装WinRM，并且配置监听\"><a href=\"#安装WinRM，并且配置监听\" class=\"headerlink\" title=\"安装WinRM，并且配置监听\"></a>安装WinRM，并且配置监听</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 配置WinRM</span><br><span class=\"line\"></span><br><span class=\"line\">$url = &quot;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&quot;</span><br><span class=\"line\">$file = &quot;$env:temp\\ConfigureRemotingForAnsible.ps1&quot;</span><br><span class=\"line\">(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)</span><br><span class=\"line\">powershell.exe -ExecutionPolicy ByPass -File $file</span><br></pre></td></tr></table></figure>\n<p><a name=\"1994c2f8\"></a></p>\n<h2 id=\"Linux主控端-Ansible-Server\"><a href=\"#Linux主控端-Ansible-Server\" class=\"headerlink\" title=\"Linux主控端(Ansible Server)\"></a>Linux主控端(Ansible Server)</h2><p><a name=\"401f96f4\"></a></p>\n<h3 id=\"安装Ansible和pywinrm\"><a href=\"#安装Ansible和pywinrm\" class=\"headerlink\" title=\"安装Ansible和pywinrm\"></a>安装Ansible和pywinrm</h3><p>参考 <a href=\"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine\" target=\"_blank\" rel=\"noopener\">Installing the Control Machine</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install -y software-properties-common</span><br><span class=\"line\">$ sudo apt-add-repository --yes --update ppa:ansible/ansible</span><br><span class=\"line\">$ sudo apt-get install -y ansible</span><br><span class=\"line\">$ ansible --version</span><br><span class=\"line\">ansible 2.7.7</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u<span class=\"string\">'/root/.ansible/plugins/modules'</span>, u<span class=\"string\">'/usr/share/ansible/plugins/modules'</span>]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/dist-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible</span><br><span class=\"line\">  python version = 2.7.12 (default, Nov 12 2018, 14:36:49) [GCC 5.4.0 20160609]</span><br><span class=\"line\"></span><br><span class=\"line\">$ pip install <span class=\"string\">\"pywinrm&gt;=0.3.0\"</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"a9796771\"></a></p>\n<h3 id=\"配置Inventory\"><a href=\"#配置Inventory\" class=\"headerlink\" title=\"配置Inventory\"></a>配置Inventory</h3><p>参考 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html\" target=\"_blank\" rel=\"noopener\">Working with Inventory</a></p>\n<p>默认是 Inventory <code>/etc/ansible/hosts</code> ,此处改为手动指定，Ansible的Inventory支持ini格式和yaml格式，本文采用yaml格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir ansible</span><br><span class=\"line\">$ tee ansible/test_hosts.yaml &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">winserver:</span><br><span class=\"line\">  hosts: </span><br><span class=\"line\">    192.168.0.23:</span><br><span class=\"line\">  vars:</span><br><span class=\"line\">    ansible_user: Administrator</span><br><span class=\"line\">    ansible_password: 密码</span><br><span class=\"line\">    ansible_connection: winrm</span><br><span class=\"line\">    ansible_port: 5986</span><br><span class=\"line\">    ansible_winrm_server_cert_validation: ignore</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><a name=\"ea275a70\"></a></p>\n<h3 id=\"探测主机是否存活\"><a href=\"#探测主机是否存活\" class=\"headerlink\" title=\"探测主机是否存活\"></a>探测主机是否存活</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ansible -i ansible/test_hosts.yaml winserver -m win_ping</span><br><span class=\"line\"> 192.168.0.23 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">TASK [Gathering Facts] *******************************************************************************************************************************************************************************************************************************************************</span><br><span class=\"line\">fatal: [192.168.0.23]: UNREACHABLE! =&gt; &#123;<span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>, <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"ssl: HTTPSConnectionPool(host='192.168.0.23', port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(\\\"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)\\\",),))\"</span>, <span class=\"string\">\"unreachable\"</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>降级一下 <code>pip install &quot;pywinrm==0.2.2&quot;</code></p>\n<p>更多实验，参见参考资料中的两篇51cto中的博文</p>\n<p><a name=\"7d486fc7\"></a></p>\n<h2 id=\"可用的Windows模块\"><a href=\"#可用的Windows模块\" class=\"headerlink\" title=\"可用的Windows模块\"></a>可用的Windows模块</h2><p>根据 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#what-modules-are-available\" target=\"_blank\" rel=\"noopener\">What modules are available?</a> 绝大部分Module都是针对Linux编写的，大部分在windows下不能正常使用，有一些专用的windows module 使用ps编写的，可用在windows下使用，详细列表参见 <a href=\"https://docs.ansible.com/ansible/latest/modules/list_of_windows_modules.html#windows-modules\" target=\"_blank\" rel=\"noopener\">Windows modules</a></p>\n<p><a name=\"fae94bcd\"></a></p>\n<h2 id=\"Windows常见问题\"><a href=\"#Windows常见问题\" class=\"headerlink\" title=\"Windows常见问题\"></a><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#windows-frequently-asked-questions\" target=\"_blank\" rel=\"noopener\">Windows常见问题</a></h2><p>官方文档中列举了Ansible windows常见问题，建议仔细阅读</p>\n<p><a name=\"53001b41\"></a></p>\n<h2 id=\"Ansible-Playbook\"><a href=\"#Ansible-Playbook\" class=\"headerlink\" title=\"Ansible Playbook\"></a>Ansible Playbook</h2><p>Ansible配合<a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#about-playbooks\" target=\"_blank\" rel=\"noopener\">playbook</a>食用更佳，上述中的 <code>ansible</code> 命令是<a href=\"https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html\" target=\"_blank\" rel=\"noopener\">adhoc命令模式</a>，类似在bash中手动执行命令，多用于简单，并且不需要复用场景，而 <code>ansible-playbook</code> 类似 bash脚本，但是更强大，适合复杂任务编排场景。</p>\n<p>考虑后期出一个playbook的文章</p>\n<p>推荐配合<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode</a>的<a href=\"https://marketplace.visualstudio.com/items?itemName=vscoss.vscode-ansible\" target=\"_blank\" rel=\"noopener\">ansible</a> 插件(github repo 地址 <a href=\"https://github.com/VSChina/vscode-ansible\" target=\"_blank\" rel=\"noopener\">https://github.com/VSChina/vscode-ansible</a>)</p>\n<p>效果如下所示，比idea的ansible强大很多。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/226273/1556186451366-4149328b-fa7d-439d-9761-0194293d9352.gif#align=left&amp;display=inline&amp;height=546&amp;originHeight=724&amp;originWidth=990&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows.html\" target=\"_blank\" rel=\"noopener\">官方文档-windows指南</a></li>\n<li><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#winrm-setup\" target=\"_blank\" rel=\"noopener\">官方文档-windows指南-winrm步骤</a></li>\n<li><a href=\"http://blog.51cto.com/7424593/2174156\" target=\"_blank\" rel=\"noopener\">Ansible批量远程管理Windows主机(部署与配置)</a></li>\n<li><a href=\"http://blog.51cto.com/dyc2005/2064746\" target=\"_blank\" rel=\"noopener\">ansible自动化管理windows系统实战</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure\" target=\"_blank\" rel=\"noopener\">安装和配置 WMF 5.1</a></li>\n<li><a href=\"https://github.com/jborean93/ansible-windows/issues/14\" target=\"_blank\" rel=\"noopener\">hotfixv4.trafficmanager.net dont work</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师。</p>\n","site":{"data":{}},"excerpt":"<p><a name=\"59683fbc\"></a></p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p><a name=\"8e1b944f\"></a></p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>Ansible是一款轻量级的开源的自动化运维工具，支持linux和windows(只支持client，并且部分模块)，利用Ansible可以简单批量的配置系统，安装软件，或者更高级的运维任务（比如滚动升级）。</p>\n<p>Ansible之类的运维工具对运维工作进行抽象及规范，能够极大的降低运维难度。本文只是为了演示如何通过ansible 的各模块对windows进行传输文件,管理账号,执行脚本等批量自动化管理工作</p>","more":"<p><a name=\"12267079\"></a></p>\n<h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>系统</th>\n<th>ip</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server</td>\n<td>Ubuntu Server 16.04.5 LTS X64</td>\n<td>192.168.0.22</td>\n</tr>\n<tr>\n<td>Client</td>\n<td>Windows Server 2008 R2 SP1</td>\n<td>192.168.0.23</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong></p>\n<p>如果是实验目的，建议用Vmware，并且在关键操作时备份快照（比如，刚装完环境，升级完PS和.Net后），这样能够及时，干净的还原现场，节省每次重装系统导致的时间浪费</p>\n<p><a name=\"d29617ad\"></a></p>\n<h2 id=\"Windows-被控端-Ansible-Client\"><a href=\"#Windows-被控端-Ansible-Client\" class=\"headerlink\" title=\"Windows 被控端(Ansible Client)\"></a>Windows 被控端(Ansible Client)</h2><p>Ansible 只支持Powershell 4.0及以上(用3.0会报 <a href=\"https://github.com/ansible/ansible/issues/10825\" target=\"_blank\" rel=\"noopener\">Process is terminated due to StackOverflowException.</a>)，所以要求最低要求Win7,或者Win server 2008,详见 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#host-requirements\" target=\"_blank\" rel=\"noopener\">Ansible Doc host requirements</a></p>\n<p><a name=\"399fa47e\"></a></p>\n<h3 id=\"升级PowerShell-和-Net-Framework\"><a href=\"#升级PowerShell-和-Net-Framework\" class=\"headerlink\" title=\"升级PowerShell 和.Net Framework\"></a><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#id2\" target=\"_blank\" rel=\"noopener\">升级PowerShell 和.Net Framework</a></h3><p>官方文档要求升级至ps3.0即可，但是实验发现，3.0会报错</p>\n<p><code>Win+R</code>  -&gt; <code>PowerShell</code>  打开PowerShell</p>\n<p>输入 <code>$PSVersionTable</code> 查看 <code>PSVersion</code> 确保大于等于4.0(PowerShell 4.0),以及 <code>CLRVersion</code> 大于等于4.0(.NET Framework 4.0) ,如果版本过低，则执行下面代码，直接复制到PowerShell 执行即可,建议使用5.1(参考 <a href=\"https://github.com/jborean93/ansible-windows/issues/14\" target=\"_blank\" rel=\"noopener\">hotfixv4.trafficmanager.net dont work</a> 和 <a href=\"https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure\" target=\"_blank\" rel=\"noopener\">安装和配置 WMF 5.1</a>)</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>注意用户名密码改成管理员的用户名密码</li>\n<li>确保能够访问外网</li>\n<li>PowerShell以管理员模式打开</li>\n<li>PS3不能直升PS5，需要卸载PS3或者保存 PSModulePath</li>\n<li>安装PS5需要先打最新SP补丁</li>\n<li>PS5要求 .NET Framework 不低于 4.5.2</li>\n<li>安装成功后会自动重启服务器，注意别影响其他服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">\"https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1\"</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"string\">\"<span class=\"variable\">$env</span>:temp\\Upgrade-PowerShell.ps1\"</span></span><br><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"string\">\"管理员用户名\"</span></span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"string\">\"管理员密码\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">(New-Object -TypeName System.Net.WebClient).DownloadFile(<span class=\"variable\">$url</span>, <span class=\"variable\">$file</span>)</span><br><span class=\"line\">Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PowerShell 版本，只能用 3.0, 4.0 和 5.1 </span></span><br><span class=\"line\">&amp;<span class=\"variable\">$file</span> -Version 5.1 -Username <span class=\"variable\">$username</span> -Password <span class=\"variable\">$password</span> -Verbose</span><br></pre></td></tr></table></figure>\n<p>重启后，再次打开PS ,输入 <code>$PSVersionTable</code> 查看版本</p>\n<p><a name=\"fadbd8e5\"></a></p>\n<h3 id=\"安装WinRM，并且配置监听\"><a href=\"#安装WinRM，并且配置监听\" class=\"headerlink\" title=\"安装WinRM，并且配置监听\"></a>安装WinRM，并且配置监听</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 配置WinRM</span><br><span class=\"line\"></span><br><span class=\"line\">$url = &quot;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&quot;</span><br><span class=\"line\">$file = &quot;$env:temp\\ConfigureRemotingForAnsible.ps1&quot;</span><br><span class=\"line\">(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)</span><br><span class=\"line\">powershell.exe -ExecutionPolicy ByPass -File $file</span><br></pre></td></tr></table></figure>\n<p><a name=\"1994c2f8\"></a></p>\n<h2 id=\"Linux主控端-Ansible-Server\"><a href=\"#Linux主控端-Ansible-Server\" class=\"headerlink\" title=\"Linux主控端(Ansible Server)\"></a>Linux主控端(Ansible Server)</h2><p><a name=\"401f96f4\"></a></p>\n<h3 id=\"安装Ansible和pywinrm\"><a href=\"#安装Ansible和pywinrm\" class=\"headerlink\" title=\"安装Ansible和pywinrm\"></a>安装Ansible和pywinrm</h3><p>参考 <a href=\"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine\" target=\"_blank\" rel=\"noopener\">Installing the Control Machine</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install -y software-properties-common</span><br><span class=\"line\">$ sudo apt-add-repository --yes --update ppa:ansible/ansible</span><br><span class=\"line\">$ sudo apt-get install -y ansible</span><br><span class=\"line\">$ ansible --version</span><br><span class=\"line\">ansible 2.7.7</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u<span class=\"string\">'/root/.ansible/plugins/modules'</span>, u<span class=\"string\">'/usr/share/ansible/plugins/modules'</span>]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/dist-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible</span><br><span class=\"line\">  python version = 2.7.12 (default, Nov 12 2018, 14:36:49) [GCC 5.4.0 20160609]</span><br><span class=\"line\"></span><br><span class=\"line\">$ pip install <span class=\"string\">\"pywinrm&gt;=0.3.0\"</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"a9796771\"></a></p>\n<h3 id=\"配置Inventory\"><a href=\"#配置Inventory\" class=\"headerlink\" title=\"配置Inventory\"></a>配置Inventory</h3><p>参考 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html\" target=\"_blank\" rel=\"noopener\">Working with Inventory</a></p>\n<p>默认是 Inventory <code>/etc/ansible/hosts</code> ,此处改为手动指定，Ansible的Inventory支持ini格式和yaml格式，本文采用yaml格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir ansible</span><br><span class=\"line\">$ tee ansible/test_hosts.yaml &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">winserver:</span><br><span class=\"line\">  hosts: </span><br><span class=\"line\">    192.168.0.23:</span><br><span class=\"line\">  vars:</span><br><span class=\"line\">    ansible_user: Administrator</span><br><span class=\"line\">    ansible_password: 密码</span><br><span class=\"line\">    ansible_connection: winrm</span><br><span class=\"line\">    ansible_port: 5986</span><br><span class=\"line\">    ansible_winrm_server_cert_validation: ignore</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><a name=\"ea275a70\"></a></p>\n<h3 id=\"探测主机是否存活\"><a href=\"#探测主机是否存活\" class=\"headerlink\" title=\"探测主机是否存活\"></a>探测主机是否存活</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ansible -i ansible/test_hosts.yaml winserver -m win_ping</span><br><span class=\"line\"> 192.168.0.23 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">TASK [Gathering Facts] *******************************************************************************************************************************************************************************************************************************************************</span><br><span class=\"line\">fatal: [192.168.0.23]: UNREACHABLE! =&gt; &#123;<span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>, <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"ssl: HTTPSConnectionPool(host='192.168.0.23', port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(\\\"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)\\\",),))\"</span>, <span class=\"string\">\"unreachable\"</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>降级一下 <code>pip install &quot;pywinrm==0.2.2&quot;</code></p>\n<p>更多实验，参见参考资料中的两篇51cto中的博文</p>\n<p><a name=\"7d486fc7\"></a></p>\n<h2 id=\"可用的Windows模块\"><a href=\"#可用的Windows模块\" class=\"headerlink\" title=\"可用的Windows模块\"></a>可用的Windows模块</h2><p>根据 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#what-modules-are-available\" target=\"_blank\" rel=\"noopener\">What modules are available?</a> 绝大部分Module都是针对Linux编写的，大部分在windows下不能正常使用，有一些专用的windows module 使用ps编写的，可用在windows下使用，详细列表参见 <a href=\"https://docs.ansible.com/ansible/latest/modules/list_of_windows_modules.html#windows-modules\" target=\"_blank\" rel=\"noopener\">Windows modules</a></p>\n<p><a name=\"fae94bcd\"></a></p>\n<h2 id=\"Windows常见问题\"><a href=\"#Windows常见问题\" class=\"headerlink\" title=\"Windows常见问题\"></a><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#windows-frequently-asked-questions\" target=\"_blank\" rel=\"noopener\">Windows常见问题</a></h2><p>官方文档中列举了Ansible windows常见问题，建议仔细阅读</p>\n<p><a name=\"53001b41\"></a></p>\n<h2 id=\"Ansible-Playbook\"><a href=\"#Ansible-Playbook\" class=\"headerlink\" title=\"Ansible Playbook\"></a>Ansible Playbook</h2><p>Ansible配合<a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#about-playbooks\" target=\"_blank\" rel=\"noopener\">playbook</a>食用更佳，上述中的 <code>ansible</code> 命令是<a href=\"https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html\" target=\"_blank\" rel=\"noopener\">adhoc命令模式</a>，类似在bash中手动执行命令，多用于简单，并且不需要复用场景，而 <code>ansible-playbook</code> 类似 bash脚本，但是更强大，适合复杂任务编排场景。</p>\n<p>考虑后期出一个playbook的文章</p>\n<p>推荐配合<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode</a>的<a href=\"https://marketplace.visualstudio.com/items?itemName=vscoss.vscode-ansible\" target=\"_blank\" rel=\"noopener\">ansible</a> 插件(github repo 地址 <a href=\"https://github.com/VSChina/vscode-ansible\" target=\"_blank\" rel=\"noopener\">https://github.com/VSChina/vscode-ansible</a>)</p>\n<p>效果如下所示，比idea的ansible强大很多。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/226273/1556186451366-4149328b-fa7d-439d-9761-0194293d9352.gif#align=left&amp;display=inline&amp;height=546&amp;originHeight=724&amp;originWidth=990&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows.html\" target=\"_blank\" rel=\"noopener\">官方文档-windows指南</a></li>\n<li><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#winrm-setup\" target=\"_blank\" rel=\"noopener\">官方文档-windows指南-winrm步骤</a></li>\n<li><a href=\"http://blog.51cto.com/7424593/2174156\" target=\"_blank\" rel=\"noopener\">Ansible批量远程管理Windows主机(部署与配置)</a></li>\n<li><a href=\"http://blog.51cto.com/dyc2005/2064746\" target=\"_blank\" rel=\"noopener\">ansible自动化管理windows系统实战</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/powershell/wmf/5.1/install-configure\" target=\"_blank\" rel=\"noopener\">安装和配置 WMF 5.1</a></li>\n<li><a href=\"https://github.com/jborean93/ansible-windows/issues/14\" target=\"_blank\" rel=\"noopener\">hotfixv4.trafficmanager.net dont work</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师。</p>"},{"title":"安装anaconda并且配置jupyter notebook支持python2.x和3.x共存","date":"2017-07-02T02:59:18.000Z","_content":"\n业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。[基于elk报警器elastalert的微信企业号插件](https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py)\n\n之前一直用的[sublime text 3][linkSublimeText3] , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过`sublimeREPL`->`python`->`execfile(filepath)`实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用`sublime+python`切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便\n\n经过一番搜索，最后决定使用[Anaconda][Anaconda] Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了[jupyter notebook][linkJupyterNotebook] ，可以使用 [try it in your browser][linkTryItInYourBrowser] 进行体验。\n\n<!-- more -->\n\n## 安装anaconda\n\n官方安装包 [https://www.continuum.io/downloads][anacondaDownloads] ,但是国内比较慢，可以使用[清华镜像][qinghua] ,从 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/][anacondaQingHuaDownloads] 下载安装包。目前(2017-07-02)最新的是 `Anaconda3-4.4.0-*` \n\n我下载的是windows 64位版[Anaconda3-4.4.0-Windows-x86_64.exe][linkWindows64]（如果用于机器学习(e.g. [Tensorflow][]) 建议使用Linux系统，具体参见 [Keras安装和配置指南(Windows)][keras_windows]）。\n\n同时推荐 [李金][lijin-THU]的 [《中文 Python 笔记》][notes-python] ,github 打开.ipynb 较慢，推荐使用[NbViewer][] 查看\n\n\n\n\n#### 设置清华镜像源\n更多可参阅 [conda 使用清华大学开源软件镜像][linkConda使用清华大学开源软件镜像] 或者 [清华镜像][qinghua]\n```bash\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n```\n\n#### 修改windows下jupyter默认路径\n参考 stackoverflow 上 [how to change jupyter start folder?][linkHowToChangeJupyterStartFolder?] 的回答\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 运行`jupyter notebook --generate-config`\n3. 会生成一个默认配置文件，`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n4. 修改`#c.NotebookApp.notebook_dir = ''` 为 `c.NotebookApp.notebook_dir = '你的默认路径'`\n5. 打开`C:\\Users\\{用户名}\\Anaconda3\\Scripts`\n6. 右键单击`jupyter-notebook.exe`并发送到`桌面快捷方式` \n7. 在桌面上找到该快捷方式，`右键`->`属性`->`更改图标(C)...`->`{Anaconda3_home}\\Menu\\jupyter.ico`\n8. 双击运行，会自动打开默认浏览器。\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg)\n\n输入\n\n```python\nprint('hello jupyter')\n```\n按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg)\n\n具体快捷键，参见 `Help` -> `Keyboard Shortcuts`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg)\n\n### 切换python版本\n\n参考 [Managing Python][linkManagingPython] 或者 [Anaconda多环境多版本python配置指导][5465452]\n\n打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n\n#### 创建python2.7环境\n\n```bash\nconda create -n python27 python=2.7 -y\nactivate python27\n```\n#### 设置jupyter 2.7,3.6共存\n参考 [Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法][linkAnaconda3Python3和2InJupyterNotebook共存方法]\n```\nconda install ipykernel -y\n```\n\n复制`${Anaconda3_home}\\share\\jupyter\\kernels\\python3` 并重命名为`${Anaconda3_home}\\share\\jupyter\\kernels\\python27`，编辑`${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json`\n```\n{\n \"argv\": [\n  \"${Anaconda3_home}\\\\envs\\\\python27\\\\python.exe\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python 27\",\n \"language\": \"python\"\n}\n```\n\n注意，修改`display_name`为自定义名称，`argv`第一行中路径用`\\\\`替代`\\`\n\n![jupyter-change-kernel](http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg)\n\n在`cell`中输入\n```python\nimport sys \nsys.version\n```\n\n切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的`3.6.1`,因为 Tensorflow官方文档说windows只支持 [3.5.x][] ，故而又装了一个3.5.3的环境\n\n#### jupyter作为公开服务使用(云IDE)\n\n参考 [Running a notebook server][linkRunningANotebookServer] ，使用[nssm][linkWindows10CreatorsUpdate]将jupyter设置为开机自启动服务\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 切换回anaconda默认环境`activate root`\n3. 创建密码 `jupyter notebook password` [Preparing a hashed password][linkPreparingAHashedPassword]\n4. 修改`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`中`c.NotebookApp.ip = '*'`,`c.NotebookApp.open_browser = False`\n5. 重启 jupyter ,打开 http://{ip}:8888, 提示输入密码，输入密码即可登录\n6. 注册为服务 下载[nssm][linkWindows10CreatorsUpdate] 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 [Windows 10 Creators Update][linkWindows10CreatorsUpdate] \n7. `{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n8. `{nssm_home}\\win64\\nssm.exe start jupyter'\n9. 浏览器打开 http://ip:8888 输入密码登录\n\n注意，nssm默认使用`LOCALSYSTEM `账号操作，而jupyter默认读取`~\\.jupyter`(`~\\`是当前登录用户文件夹)，可以使用`nssm set <servicename> ObjectName <username> <password>` 使用指定用户，这样就不需要`--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py` 参数了，具体详见 [Usage][] 和 [Managing services from the command line][linkManagingServicesFromTheCommandLine]\n\n#### nginx反向代理\n\n```\nupstream jupyter {\n    server http://ip:8888;\n    server http://ip2:8888;\n}\nserver {\n    listen 80;\n    server_name jupyter.example.com;\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_set_header Host  $host;\n\n        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        #如果是单服务，无负载，则不需要用upsstream\n        #proxy_pass     http://ip:8888;\n        proxy_pass http://jupyter;\n    }\n}\n```\n\n博客 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/][blog]\n掘金 [https://juejin.im/post/595897c36fb9a06bca0b91eb][juejin]\n简书 [http://www.jianshu.com/p/e981c9d28555][jianshu]\n\n[blog]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\n[juejin]: https://juejin.im/post/595897c36fb9a06bca0b91eb\n[jianshu]: http://www.jianshu.com/p/e981c9d28555\n\n[linkSublimeText3]: http://www.sublimetext.com/3\n[Anaconda]: https://www.continuum.io\n[linkJupyterNotebook]: http://jupyter.org/\n[linkTryItInYourBrowser]: https://try.jupyter.org/\n[qinghua]: https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\n[anacondaDownloads]: https://www.continuum.io/downloads\n[anacondaQingHuaDownloads]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\n[Tensorflow]: http://tensorflow.org/\n[keras_windows]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[linkWindows64]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\n[notes-python]: https://github.com/lijin-THU/notes-python\n[lijin-THU]: https://github.com/lijin-THU\n[NbViewer]: http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb \n[linkManagingPython]: https://conda.io/docs/py2or3.html\n[5465452]: http://www.cnblogs.com/harvey888/p/5465452.html\n[linkConda使用清华大学开源软件镜像]: http://blog.csdn.net/u010570551/article/details/54291507\n[linkAnaconda3Python3和2InJupyterNotebook共存方法]: https://segmentfault.com/a/1190000008585746\n[3.5.x]: https://www.tensorflow.org/install/install_windows#installing_with_native_pip\n[linkHowToChangeJupyterStartFolder?]: https://stackoverflow.com/a/44463707/7001350\n[linkRunningANotebookServer]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\n[linkPreparingAHashedPassword]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\n[linkWindows10CreatorsUpdate]: http://www.nssm.cc/download\n[linkManagingServicesFromTheCommandLine]: http://www.nssm.cc/commands\n[Usage]: http://www.nssm.cc/usage\n","source":"_posts/anaconda-install-and-configurating-jupyter.md","raw":"---\ntitle: 安装anaconda并且配置jupyter notebook支持python2.x和3.x共存\ndate: 2017-07-02 10:59:18\ntags: [python,anaconda,jupyter,ipython]\ncategories: [anaconda,jupyter]\n---\n\n业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。[基于elk报警器elastalert的微信企业号插件](https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py)\n\n之前一直用的[sublime text 3][linkSublimeText3] , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过`sublimeREPL`->`python`->`execfile(filepath)`实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用`sublime+python`切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便\n\n经过一番搜索，最后决定使用[Anaconda][Anaconda] Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了[jupyter notebook][linkJupyterNotebook] ，可以使用 [try it in your browser][linkTryItInYourBrowser] 进行体验。\n\n<!-- more -->\n\n## 安装anaconda\n\n官方安装包 [https://www.continuum.io/downloads][anacondaDownloads] ,但是国内比较慢，可以使用[清华镜像][qinghua] ,从 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/][anacondaQingHuaDownloads] 下载安装包。目前(2017-07-02)最新的是 `Anaconda3-4.4.0-*` \n\n我下载的是windows 64位版[Anaconda3-4.4.0-Windows-x86_64.exe][linkWindows64]（如果用于机器学习(e.g. [Tensorflow][]) 建议使用Linux系统，具体参见 [Keras安装和配置指南(Windows)][keras_windows]）。\n\n同时推荐 [李金][lijin-THU]的 [《中文 Python 笔记》][notes-python] ,github 打开.ipynb 较慢，推荐使用[NbViewer][] 查看\n\n\n\n\n#### 设置清华镜像源\n更多可参阅 [conda 使用清华大学开源软件镜像][linkConda使用清华大学开源软件镜像] 或者 [清华镜像][qinghua]\n```bash\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n```\n\n#### 修改windows下jupyter默认路径\n参考 stackoverflow 上 [how to change jupyter start folder?][linkHowToChangeJupyterStartFolder?] 的回答\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 运行`jupyter notebook --generate-config`\n3. 会生成一个默认配置文件，`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n4. 修改`#c.NotebookApp.notebook_dir = ''` 为 `c.NotebookApp.notebook_dir = '你的默认路径'`\n5. 打开`C:\\Users\\{用户名}\\Anaconda3\\Scripts`\n6. 右键单击`jupyter-notebook.exe`并发送到`桌面快捷方式` \n7. 在桌面上找到该快捷方式，`右键`->`属性`->`更改图标(C)...`->`{Anaconda3_home}\\Menu\\jupyter.ico`\n8. 双击运行，会自动打开默认浏览器。\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg)\n\n输入\n\n```python\nprint('hello jupyter')\n```\n按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg)\n\n具体快捷键，参见 `Help` -> `Keyboard Shortcuts`\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg)\n\n### 切换python版本\n\n参考 [Managing Python][linkManagingPython] 或者 [Anaconda多环境多版本python配置指导][5465452]\n\n打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n\n#### 创建python2.7环境\n\n```bash\nconda create -n python27 python=2.7 -y\nactivate python27\n```\n#### 设置jupyter 2.7,3.6共存\n参考 [Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法][linkAnaconda3Python3和2InJupyterNotebook共存方法]\n```\nconda install ipykernel -y\n```\n\n复制`${Anaconda3_home}\\share\\jupyter\\kernels\\python3` 并重命名为`${Anaconda3_home}\\share\\jupyter\\kernels\\python27`，编辑`${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json`\n```\n{\n \"argv\": [\n  \"${Anaconda3_home}\\\\envs\\\\python27\\\\python.exe\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python 27\",\n \"language\": \"python\"\n}\n```\n\n注意，修改`display_name`为自定义名称，`argv`第一行中路径用`\\\\`替代`\\`\n\n![jupyter-change-kernel](http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg)\n\n在`cell`中输入\n```python\nimport sys \nsys.version\n```\n\n切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的`3.6.1`,因为 Tensorflow官方文档说windows只支持 [3.5.x][] ，故而又装了一个3.5.3的环境\n\n#### jupyter作为公开服务使用(云IDE)\n\n参考 [Running a notebook server][linkRunningANotebookServer] ，使用[nssm][linkWindows10CreatorsUpdate]将jupyter设置为开机自启动服务\n\n1. 打开 `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)` 运行 `Anaconda Prompt`\n2. 切换回anaconda默认环境`activate root`\n3. 创建密码 `jupyter notebook password` [Preparing a hashed password][linkPreparingAHashedPassword]\n4. 修改`C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`中`c.NotebookApp.ip = '*'`,`c.NotebookApp.open_browser = False`\n5. 重启 jupyter ,打开 http://{ip}:8888, 提示输入密码，输入密码即可登录\n6. 注册为服务 下载[nssm][linkWindows10CreatorsUpdate] 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 [Windows 10 Creators Update][linkWindows10CreatorsUpdate] \n7. `{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py`\n8. `{nssm_home}\\win64\\nssm.exe start jupyter'\n9. 浏览器打开 http://ip:8888 输入密码登录\n\n注意，nssm默认使用`LOCALSYSTEM `账号操作，而jupyter默认读取`~\\.jupyter`(`~\\`是当前登录用户文件夹)，可以使用`nssm set <servicename> ObjectName <username> <password>` 使用指定用户，这样就不需要`--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py` 参数了，具体详见 [Usage][] 和 [Managing services from the command line][linkManagingServicesFromTheCommandLine]\n\n#### nginx反向代理\n\n```\nupstream jupyter {\n    server http://ip:8888;\n    server http://ip2:8888;\n}\nserver {\n    listen 80;\n    server_name jupyter.example.com;\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_set_header Host  $host;\n\n        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        #如果是单服务，无负载，则不需要用upsstream\n        #proxy_pass     http://ip:8888;\n        proxy_pass http://jupyter;\n    }\n}\n```\n\n博客 [https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/][blog]\n掘金 [https://juejin.im/post/595897c36fb9a06bca0b91eb][juejin]\n简书 [http://www.jianshu.com/p/e981c9d28555][jianshu]\n\n[blog]: https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\n[juejin]: https://juejin.im/post/595897c36fb9a06bca0b91eb\n[jianshu]: http://www.jianshu.com/p/e981c9d28555\n\n[linkSublimeText3]: http://www.sublimetext.com/3\n[Anaconda]: https://www.continuum.io\n[linkJupyterNotebook]: http://jupyter.org/\n[linkTryItInYourBrowser]: https://try.jupyter.org/\n[qinghua]: https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\n[anacondaDownloads]: https://www.continuum.io/downloads\n[anacondaQingHuaDownloads]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\n[Tensorflow]: http://tensorflow.org/\n[keras_windows]: https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\n[linkWindows64]: https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\n[notes-python]: https://github.com/lijin-THU/notes-python\n[lijin-THU]: https://github.com/lijin-THU\n[NbViewer]: http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb \n[linkManagingPython]: https://conda.io/docs/py2or3.html\n[5465452]: http://www.cnblogs.com/harvey888/p/5465452.html\n[linkConda使用清华大学开源软件镜像]: http://blog.csdn.net/u010570551/article/details/54291507\n[linkAnaconda3Python3和2InJupyterNotebook共存方法]: https://segmentfault.com/a/1190000008585746\n[3.5.x]: https://www.tensorflow.org/install/install_windows#installing_with_native_pip\n[linkHowToChangeJupyterStartFolder?]: https://stackoverflow.com/a/44463707/7001350\n[linkRunningANotebookServer]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\n[linkPreparingAHashedPassword]: http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\n[linkWindows10CreatorsUpdate]: http://www.nssm.cc/download\n[linkManagingServicesFromTheCommandLine]: http://www.nssm.cc/commands\n[Usage]: http://www.nssm.cc/usage\n","slug":"anaconda-install-and-configurating-jupyter","published":1,"updated":"2019-08-16T05:56:21.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojia00cr24do62x64ya4","content":"<p>业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。<a href=\"https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py\" target=\"_blank\" rel=\"noopener\">基于elk报警器elastalert的微信企业号插件</a></p>\n<p>之前一直用的<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">sublime text 3</a> , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过<code>sublimeREPL</code>-&gt;<code>python</code>-&gt;<code>execfile(filepath)</code>实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用<code>sublime+python</code>切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便</p>\n<p>经过一番搜索，最后决定使用<a href=\"https://www.continuum.io\" target=\"_blank\" rel=\"noopener\">Anaconda</a> Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了<a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"noopener\">jupyter notebook</a> ，可以使用 <a href=\"https://try.jupyter.org/\" target=\"_blank\" rel=\"noopener\">try it in your browser</a> 进行体验。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装anaconda\"><a href=\"#安装anaconda\" class=\"headerlink\" title=\"安装anaconda\"></a>安装anaconda</h2><p>官方安装包 <a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">https://www.continuum.io/downloads</a> ,但是国内比较慢，可以使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a> ,从 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载安装包。目前(2017-07-02)最新的是 <code>Anaconda3-4.4.0-*</code> </p>\n<p>我下载的是windows 64位版<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\" target=\"_blank\" rel=\"noopener\">Anaconda3-4.4.0-Windows-x86_64.exe</a>（如果用于机器学习(e.g. <a href=\"http://tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Tensorflow</a>) 建议使用Linux系统，具体参见 <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a>）。</p>\n<p>同时推荐 <a href=\"https://github.com/lijin-THU\" target=\"_blank\" rel=\"noopener\">李金</a>的 <a href=\"https://github.com/lijin-THU/notes-python\" target=\"_blank\" rel=\"noopener\">《中文 Python 笔记》</a> ,github 打开.ipynb 较慢，推荐使用<a href=\"http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb\" target=\"_blank\" rel=\"noopener\">NbViewer</a> 查看</p>\n<h4 id=\"设置清华镜像源\"><a href=\"#设置清华镜像源\" class=\"headerlink\" title=\"设置清华镜像源\"></a>设置清华镜像源</h4><p>更多可参阅 <a href=\"http://blog.csdn.net/u010570551/article/details/54291507\" target=\"_blank\" rel=\"noopener\">conda 使用清华大学开源软件镜像</a> 或者 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --<span class=\"built_in\">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改windows下jupyter默认路径\"><a href=\"#修改windows下jupyter默认路径\" class=\"headerlink\" title=\"修改windows下jupyter默认路径\"></a>修改windows下jupyter默认路径</h4><p>参考 stackoverflow 上 <a href=\"https://stackoverflow.com/a/44463707/7001350\" target=\"_blank\" rel=\"noopener\">how to change jupyter start folder?</a> 的回答</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>运行<code>jupyter notebook --generate-config</code></li>\n<li>会生成一个默认配置文件，<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>修改<code>#c.NotebookApp.notebook_dir = &#39;&#39;</code> 为 <code>c.NotebookApp.notebook_dir = &#39;你的默认路径&#39;</code></li>\n<li>打开<code>C:\\Users\\{用户名}\\Anaconda3\\Scripts</code></li>\n<li>右键单击<code>jupyter-notebook.exe</code>并发送到<code>桌面快捷方式</code> </li>\n<li>在桌面上找到该快捷方式，<code>右键</code>-&gt;<code>属性</code>-&gt;<code>更改图标(C)...</code>-&gt;<code>{Anaconda3_home}\\Menu\\jupyter.ico</code></li>\n<li>双击运行，会自动打开默认浏览器。<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg\" alt=\"\"></li>\n</ol>\n<p>输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello jupyter'</span>)</span><br></pre></td></tr></table></figure>\n<p>按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg\" alt=\"\"></p>\n<p>具体快捷键，参见 <code>Help</code> -&gt; <code>Keyboard Shortcuts</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg\" alt=\"\"></p>\n<h3 id=\"切换python版本\"><a href=\"#切换python版本\" class=\"headerlink\" title=\"切换python版本\"></a>切换python版本</h3><p>参考 <a href=\"https://conda.io/docs/py2or3.html\" target=\"_blank\" rel=\"noopener\">Managing Python</a> 或者 <a href=\"http://www.cnblogs.com/harvey888/p/5465452.html\" target=\"_blank\" rel=\"noopener\">Anaconda多环境多版本python配置指导</a></p>\n<p>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></p>\n<h4 id=\"创建python2-7环境\"><a href=\"#创建python2-7环境\" class=\"headerlink\" title=\"创建python2.7环境\"></a>创建python2.7环境</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n python27 python=2.7 -y</span><br><span class=\"line\">activate python27</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置jupyter-2-7-3-6共存\"><a href=\"#设置jupyter-2-7-3-6共存\" class=\"headerlink\" title=\"设置jupyter 2.7,3.6共存\"></a>设置jupyter 2.7,3.6共存</h4><p>参考 <a href=\"https://segmentfault.com/a/1190000008585746\" target=\"_blank\" rel=\"noopener\">Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda install ipykernel -y</span><br></pre></td></tr></table></figure></p>\n<p>复制<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python3</code> 并重命名为<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27</code>，编辑<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;argv&quot;: [</span><br><span class=\"line\">  &quot;$&#123;Anaconda3_home&#125;\\\\envs\\\\python27\\\\python.exe&quot;,</span><br><span class=\"line\">  &quot;-m&quot;,</span><br><span class=\"line\">  &quot;ipykernel_launcher&quot;,</span><br><span class=\"line\">  &quot;-f&quot;,</span><br><span class=\"line\">  &quot;&#123;connection_file&#125;&quot;</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> &quot;display_name&quot;: &quot;Python 27&quot;,</span><br><span class=\"line\"> &quot;language&quot;: &quot;python&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意，修改<code>display_name</code>为自定义名称，<code>argv</code>第一行中路径用<code>\\\\</code>替代<code>\\</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg\" alt=\"jupyter-change-kernel\"></p>\n<p>在<code>cell</code>中输入<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys </span><br><span class=\"line\">sys.version</span><br></pre></td></tr></table></figure></p>\n<p>切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的<code>3.6.1</code>,因为 Tensorflow官方文档说windows只支持 <a href=\"https://www.tensorflow.org/install/install_windows#installing_with_native_pip\" target=\"_blank\" rel=\"noopener\">3.5.x</a> ，故而又装了一个3.5.3的环境</p>\n<h4 id=\"jupyter作为公开服务使用-云IDE\"><a href=\"#jupyter作为公开服务使用-云IDE\" class=\"headerlink\" title=\"jupyter作为公开服务使用(云IDE)\"></a>jupyter作为公开服务使用(云IDE)</h4><p>参考 <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\" target=\"_blank\" rel=\"noopener\">Running a notebook server</a> ，使用<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>将jupyter设置为开机自启动服务</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>切换回anaconda默认环境<code>activate root</code></li>\n<li>创建密码 <code>jupyter notebook password</code> <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\" target=\"_blank\" rel=\"noopener\">Preparing a hashed password</a></li>\n<li>修改<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code>中<code>c.NotebookApp.ip = &#39;*&#39;</code>,<code>c.NotebookApp.open_browser = False</code></li>\n<li>重启 jupyter ,打开 <a href=\"http://{ip}:8888\" target=\"_blank\" rel=\"noopener\">http://{ip}:8888</a>, 提示输入密码，输入密码即可登录</li>\n<li>注册为服务 下载<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a> 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 <a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">Windows 10 Creators Update</a> </li>\n<li><code>{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>`{nssm_home}\\win64\\nssm.exe start jupyter’</li>\n<li>浏览器打开 <a href=\"http://ip:8888\" target=\"_blank\" rel=\"noopener\">http://ip:8888</a> 输入密码登录</li>\n</ol>\n<p>注意，nssm默认使用<code>LOCALSYSTEM</code>账号操作，而jupyter默认读取<code>~\\.jupyter</code>(<code>~\\</code>是当前登录用户文件夹)，可以使用<code>nssm set &lt;servicename&gt; ObjectName &lt;username&gt; &lt;password&gt;</code> 使用指定用户，这样就不需要<code>--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code> 参数了，具体详见 <a href=\"http://www.nssm.cc/usage\" target=\"_blank\" rel=\"noopener\">Usage</a> 和 <a href=\"http://www.nssm.cc/commands\" target=\"_blank\" rel=\"noopener\">Managing services from the command line</a></p>\n<h4 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream jupyter &#123;</span><br><span class=\"line\">    server http://ip:8888;</span><br><span class=\"line\">    server http://ip2:8888;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name jupyter.example.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">        proxy_set_header Host  $host;</span><br><span class=\"line\"></span><br><span class=\"line\">        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\"></span><br><span class=\"line\">        #如果是单服务，无负载，则不需要用upsstream</span><br><span class=\"line\">        #proxy_pass     http://ip:8888;</span><br><span class=\"line\">        proxy_pass http://jupyter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/595897c36fb9a06bca0b91eb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595897c36fb9a06bca0b91eb</a><br>简书 <a href=\"http://www.jianshu.com/p/e981c9d28555\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e981c9d28555</a></p>\n","site":{"data":{}},"excerpt":"<p>业余时间，偶尔接触了python，感觉python很优雅，遂研究一下。<a href=\"https://github.com/anjia0532/elastalert-wechat-plugin/blob/master/wechat_qiye_alert.py\" target=\"_blank\" rel=\"noopener\">基于elk报警器elastalert的微信企业号插件</a></p>\n<p>之前一直用的<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">sublime text 3</a> , 但是对于控制台输入(2.x raw_input,3.x input)支持不太好，虽然可以通过<code>sublimeREPL</code>-&gt;<code>python</code>-&gt;<code>execfile(filepath)</code>实现，但是无疑更繁琐(可以使用sublime 的key bindings，定义快捷键来触发，但是还是觉得繁琐)，而且使用<code>sublime+python</code>切换python版本也不方便(网上很多资料是基于python2.x)，但是python3的文章资料也越来越多，学习时经常需要切换很不方便</p>\n<p>经过一番搜索，最后决定使用<a href=\"https://www.continuum.io\" target=\"_blank\" rel=\"noopener\">Anaconda</a> Anaconda是Python众多发行版中非常适用于科学计算的版本，里面已经集成了很多优秀的科学计算Python库,开源且免费，全平台支持:linux,mac,windows;支持python 2.x，3.x,Anaconda集成了<a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"noopener\">jupyter notebook</a> ，可以使用 <a href=\"https://try.jupyter.org/\" target=\"_blank\" rel=\"noopener\">try it in your browser</a> 进行体验。</p>","more":"<h2 id=\"安装anaconda\"><a href=\"#安装anaconda\" class=\"headerlink\" title=\"安装anaconda\"></a>安装anaconda</h2><p>官方安装包 <a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">https://www.continuum.io/downloads</a> ,但是国内比较慢，可以使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a> ,从 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载安装包。目前(2017-07-02)最新的是 <code>Anaconda3-4.4.0-*</code> </p>\n<p>我下载的是windows 64位版<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe\" target=\"_blank\" rel=\"noopener\">Anaconda3-4.4.0-Windows-x86_64.exe</a>（如果用于机器学习(e.g. <a href=\"http://tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Tensorflow</a>) 建议使用Linux系统，具体参见 <a href=\"https://keras-cn.readthedocs.io/en/latest/for_beginners/keras_windows/\" target=\"_blank\" rel=\"noopener\">Keras安装和配置指南(Windows)</a>）。</p>\n<p>同时推荐 <a href=\"https://github.com/lijin-THU\" target=\"_blank\" rel=\"noopener\">李金</a>的 <a href=\"https://github.com/lijin-THU/notes-python\" target=\"_blank\" rel=\"noopener\">《中文 Python 笔记》</a> ,github 打开.ipynb 较慢，推荐使用<a href=\"http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb\" target=\"_blank\" rel=\"noopener\">NbViewer</a> 查看</p>\n<h4 id=\"设置清华镜像源\"><a href=\"#设置清华镜像源\" class=\"headerlink\" title=\"设置清华镜像源\"></a>设置清华镜像源</h4><p>更多可参阅 <a href=\"http://blog.csdn.net/u010570551/article/details/54291507\" target=\"_blank\" rel=\"noopener\">conda 使用清华大学开源软件镜像</a> 或者 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener\">清华镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --<span class=\"built_in\">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改windows下jupyter默认路径\"><a href=\"#修改windows下jupyter默认路径\" class=\"headerlink\" title=\"修改windows下jupyter默认路径\"></a>修改windows下jupyter默认路径</h4><p>参考 stackoverflow 上 <a href=\"https://stackoverflow.com/a/44463707/7001350\" target=\"_blank\" rel=\"noopener\">how to change jupyter start folder?</a> 的回答</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>运行<code>jupyter notebook --generate-config</code></li>\n<li>会生成一个默认配置文件，<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>修改<code>#c.NotebookApp.notebook_dir = &#39;&#39;</code> 为 <code>c.NotebookApp.notebook_dir = &#39;你的默认路径&#39;</code></li>\n<li>打开<code>C:\\Users\\{用户名}\\Anaconda3\\Scripts</code></li>\n<li>右键单击<code>jupyter-notebook.exe</code>并发送到<code>桌面快捷方式</code> </li>\n<li>在桌面上找到该快捷方式，<code>右键</code>-&gt;<code>属性</code>-&gt;<code>更改图标(C)...</code>-&gt;<code>{Anaconda3_home}\\Menu\\jupyter.ico</code></li>\n<li>双击运行，会自动打开默认浏览器。<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxapcxj20w3080q3f.jpg\" alt=\"\"></li>\n</ol>\n<p>输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello jupyter'</span>)</span><br></pre></td></tr></table></figure>\n<p>按 <kbd>Ctrl</kbd>+<kbd>Enter</kbd> 运行，结果如下<br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5hpxb7fej20w00683yr.jpg\" alt=\"\"></p>\n<p>具体快捷键，参见 <code>Help</code> -&gt; <code>Keyboard Shortcuts</code><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5htjiup4j210d0nzjty.jpg\" alt=\"\"></p>\n<h3 id=\"切换python版本\"><a href=\"#切换python版本\" class=\"headerlink\" title=\"切换python版本\"></a>切换python版本</h3><p>参考 <a href=\"https://conda.io/docs/py2or3.html\" target=\"_blank\" rel=\"noopener\">Managing Python</a> 或者 <a href=\"http://www.cnblogs.com/harvey888/p/5465452.html\" target=\"_blank\" rel=\"noopener\">Anaconda多环境多版本python配置指导</a></p>\n<p>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></p>\n<h4 id=\"创建python2-7环境\"><a href=\"#创建python2-7环境\" class=\"headerlink\" title=\"创建python2.7环境\"></a>创建python2.7环境</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n python27 python=2.7 -y</span><br><span class=\"line\">activate python27</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置jupyter-2-7-3-6共存\"><a href=\"#设置jupyter-2-7-3-6共存\" class=\"headerlink\" title=\"设置jupyter 2.7,3.6共存\"></a>设置jupyter 2.7,3.6共存</h4><p>参考 <a href=\"https://segmentfault.com/a/1190000008585746\" target=\"_blank\" rel=\"noopener\">Anaconda3 Python 3 和 2 in Jupyter Notebook共存方法</a><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda install ipykernel -y</span><br></pre></td></tr></table></figure></p>\n<p>复制<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python3</code> 并重命名为<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27</code>，编辑<code>${Anaconda3_home}\\share\\jupyter\\kernels\\python27\\kernel.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;argv&quot;: [</span><br><span class=\"line\">  &quot;$&#123;Anaconda3_home&#125;\\\\envs\\\\python27\\\\python.exe&quot;,</span><br><span class=\"line\">  &quot;-m&quot;,</span><br><span class=\"line\">  &quot;ipykernel_launcher&quot;,</span><br><span class=\"line\">  &quot;-f&quot;,</span><br><span class=\"line\">  &quot;&#123;connection_file&#125;&quot;</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> &quot;display_name&quot;: &quot;Python 27&quot;,</span><br><span class=\"line\"> &quot;language&quot;: &quot;python&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意，修改<code>display_name</code>为自定义名称，<code>argv</code>第一行中路径用<code>\\\\</code>替代<code>\\</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fh5h0mqjg8j20ha08ujrt.jpg\" alt=\"jupyter-change-kernel\"></p>\n<p>在<code>cell</code>中输入<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys </span><br><span class=\"line\">sys.version</span><br></pre></td></tr></table></figure></p>\n<p>切换不同python版本 按<kbd>Ctrl</kbd>+<kbd>Enter</kbd>运行 查看版本，e.g. 上图中的<code>3.6.1</code>,因为 Tensorflow官方文档说windows只支持 <a href=\"https://www.tensorflow.org/install/install_windows#installing_with_native_pip\" target=\"_blank\" rel=\"noopener\">3.5.x</a> ，故而又装了一个3.5.3的环境</p>\n<h4 id=\"jupyter作为公开服务使用-云IDE\"><a href=\"#jupyter作为公开服务使用-云IDE\" class=\"headerlink\" title=\"jupyter作为公开服务使用(云IDE)\"></a>jupyter作为公开服务使用(云IDE)</h4><p>参考 <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html\" target=\"_blank\" rel=\"noopener\">Running a notebook server</a> ，使用<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>将jupyter设置为开机自启动服务</p>\n<ol>\n<li>打开 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)</code> 运行 <code>Anaconda Prompt</code></li>\n<li>切换回anaconda默认环境<code>activate root</code></li>\n<li>创建密码 <code>jupyter notebook password</code> <a href=\"http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#preparing-a-hashed-password\" target=\"_blank\" rel=\"noopener\">Preparing a hashed password</a></li>\n<li>修改<code>C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code>中<code>c.NotebookApp.ip = &#39;*&#39;</code>,<code>c.NotebookApp.open_browser = False</code></li>\n<li>重启 jupyter ,打开 <a href=\"http://{ip}:8888\" target=\"_blank\" rel=\"noopener\">http://{ip}:8888</a>, 提示输入密码，输入密码即可登录</li>\n<li>注册为服务 下载<a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a> 注意，如果之前用过nssm，建议升级到 nssm 2.24-101-g897c7ad 版本，详见 <a href=\"http://www.nssm.cc/download\" target=\"_blank\" rel=\"noopener\">Windows 10 Creators Update</a> </li>\n<li><code>{nssm_home}\\win64\\nssm.exe install jupyter {Anaconda3_home}\\Scripts\\jupyter-notebook.exe --config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code></li>\n<li>`{nssm_home}\\win64\\nssm.exe start jupyter’</li>\n<li>浏览器打开 <a href=\"http://ip:8888\" target=\"_blank\" rel=\"noopener\">http://ip:8888</a> 输入密码登录</li>\n</ol>\n<p>注意，nssm默认使用<code>LOCALSYSTEM</code>账号操作，而jupyter默认读取<code>~\\.jupyter</code>(<code>~\\</code>是当前登录用户文件夹)，可以使用<code>nssm set &lt;servicename&gt; ObjectName &lt;username&gt; &lt;password&gt;</code> 使用指定用户，这样就不需要<code>--config=C:\\Users\\{用户名}\\.jupyter\\jupyter_notebook_config.py</code> 参数了，具体详见 <a href=\"http://www.nssm.cc/usage\" target=\"_blank\" rel=\"noopener\">Usage</a> 和 <a href=\"http://www.nssm.cc/commands\" target=\"_blank\" rel=\"noopener\">Managing services from the command line</a></p>\n<h4 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream jupyter &#123;</span><br><span class=\"line\">    server http://ip:8888;</span><br><span class=\"line\">    server http://ip2:8888;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name jupyter.example.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">        proxy_set_header Host  $host;</span><br><span class=\"line\"></span><br><span class=\"line\">        # kernels使用websocket通讯，需要增加Upgrade和Connection [WebSocket proxying](http://nginx.org/en/docs/http/websocket.html)</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\"></span><br><span class=\"line\">        #如果是单服务，无负载，则不需要用upsstream</span><br><span class=\"line\">        #proxy_pass     http://ip:8888;</span><br><span class=\"line\">        proxy_pass http://jupyter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>博客 <a href=\"https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/\" target=\"_blank\" rel=\"noopener\">https://anjia.ml/2017/07/02/anaconda-install-and-configurating-jupyter/</a><br>掘金 <a href=\"https://juejin.im/post/595897c36fb9a06bca0b91eb\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/595897c36fb9a06bca0b91eb</a><br>简书 <a href=\"http://www.jianshu.com/p/e981c9d28555\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/e981c9d28555</a></p>"},{"title":"015-Ansible批量安装Elastic Beats(支持Linux和Windows)","date":"2019-04-13T12:41:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第15篇，定个小目标999，每周最少2篇。\n\n\n使用[elastic beats](https://www.elastic.co/cn/downloads/beats)进行拨测，metric采集，主机监控，但是批量化安装仍是个问题，好在elastic官方有开源的 [ansible-beats](https://github.com/elastic/ansible-beats) 但是只支持Linux，而我们在某些业务场景下，还有WinServer的存在。故而在官方基础上fork并增加了windows的支持（[已提交PR](https://github.com/elastic/ansible-beats/pull/17)，但是官方不一定给合并 [捂脸] ）。关于Ansible管理windows可以参考我之前写的一篇文章 [Ansible2.7批量管理Windows](https://juejin.im/post/5c644d7ef265da2dea050f66)。\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n## 实验环境\n| 类型 | 系统 | ip |\n| --- | --- | --- |\n| Server(主控) | Ubuntu Server 16.04.5 LTS X64 | 192.168.0.22 |\n| Client(受控) | Windows Server 2008 R2 SP1 | 192.168.0.23 |\n| Clinet(受控) | Ubuntu Server 16.04.5 LTS X64 | 192.168.0.24 |\n| Clinet(受控) | CentOS  7.6.1810 (Core) | 192.168.0.25 |\n\n> 注意: 主控端需要安装Ansible 2.7.12 可参考 \n\n\n<a name=\"52b36576\"></a>\n## 步骤\n此处已假设主控端已安装Ansible 2.7+，被控端的Windows的WinRM已配置完成\n\n<a name=\"5be9697d\"></a>\n### 安装[anjia0532.ansible_beats](https://galaxy.ansible.com/anjia0532/ansible_beats)\n在主控端(192.168.0.22)执行以下命令\n```bash\nroot@ubuntu:/root/# ansible-galaxy install anjia0532.ansible_beats\n- downloading role 'ansible_beats', owned by anjia0532\n- downloading role from https://github.com/anjia0532/ansible-beats/archive/master.tar.gz\n- extracting anjia0532.ansible_beats to /root/.ansible/roles/anjia0532.ansible_beats\n- anjia0532.ansible_beats (master) was installed successfully\n```\n\n<a name=\"e7a37043\"></a>\n### 创建inventorys\n创建 `inventorys/hosts.yml` \n```yaml\nbeats:\n  hosts: \n    192.168.0.23:\n        ansible_user: Administrator\n        ansible_password: password\n        ansible_connection: winrm\n        ansible_winrm_transport: basic\n        ansible_port: 5985\n    192.168.0.24:\n        ansible_user: root\n        ansible_ssh_private_key_file: /root/.ssh/id_rsa\n    192.168.0.25:\n        ansible_user: root\n        ansible_ssh_private_key_file: /root/.ssh/id_rsa\n```\n\n<a name=\"b990749b\"></a>\n### 创建 task\n创建 beats.yml\n\n```yaml\n- name: Example playbook for installing packetbeat\n  hosts: beats\n  roles:\n    - { role: anjia0532.ansible_beats,\n        beat: \"packetbeat\",\n        beat_conf: {\n          \"interfaces\": {\"device\":\"any\"},\n          \"protocols\": {\n            \"dns\": {\n              \"ports\": [53],\n              \"include_authorities\":true\n            },\n            \"http\": {\n              \"ports\": [80, 8080, 8000, 5000, 8002]\n            },\n            \"memcache\": {\n              \"ports\": [11211]\n            },\n            \"mysql\": {\n              \"ports\": [3306]\n            },\n            \"pgsql\": {\n              \"ports\": [5432]\n            },\n            \"redis\": {\n              \"ports\": [6379]\n            },\n            \"thrift\": {\n              \"ports\": [9090]\n            },\n            \"mongodb\": {\n              \"ports\": [27017]\n            }\n          }\n        },\n        output_conf : {\n          \"elasticsearch\": {\n            \"hosts\": [\"localhost:9200\"]\n          }\n        }\n    }\n  vars:\n    use_repository: true\n```\n\n<a name=\"b47ee1bf\"></a>\n### 安装beats\n\n```bash\n# ansible-playbook -i inventorys/hosts.yml ./beats.yml\n\n// 忽略输出\nPLAY RECAP *******************************************************************************************************************************************************************************************************************************************************************\n192.168.0.23               : ok=17   changed=17    unreachable=0    failed=0\n192.168.0.24               : ok=19   changed=19    unreachable=0    failed=0\n192.168.0.25               : ok=19   changed=19    unreachable=0    failed=0\n```\n表明都成功了\n\n<a name=\"7a433c76\"></a>\n### 查看配置文件和日志\n\n```bash\nssh root@192.168.0.24\ncat /etc/packetbeat/packetbeat.yml\n```\n\n```yaml\n################### packetbeat Configuration #########################\n\n############################# packetbeat ######################################\ninterfaces:\n    device: any\nprotocols:\n    dns:\n        include_authorities: true\n        ports:\n        - 53\n    http:\n        ports:\n        - 80\n        - 8080\n        - 8000\n        - 5000\n        - 8002\n    memcache:\n        ports:\n        - 11211\n    mongodb:\n        ports:\n        - 27017\n    mysql:\n        ports:\n        - 3306\n    pgsql:\n        ports:\n        - 5432\n    redis:\n        ports:\n        - 6379\n    thrift:\n        ports:\n        - 9090\n\n\n###############################################################################\n############################# Libbeat Config ##################################\n# Base config file used by all other beats for using libbeat features\n\n############################# Output ##########################################\n\noutput:\n    elasticsearch:\n        hosts:\n        - localhost:9200\n\n\n############################# Logging #########################################\n\nlogging:\n    files:\n        rotateeverybytes: 10485760\n```\n\n```bash\n# less /var/log/packetbeat/packetbeat\n\n2019-04-13T09:38:44.865+0800    INFO    instance/beat.go:611    Home path: [/usr/share/packetbeat] Config path: [/etc/packetbeat] Data path: [/var/lib/packetbeat] Logs path: [/var/log/packetbeat]\n2019-04-13T09:38:44.868+0800    INFO    instance/beat.go:618    Beat UUID: 8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2\n2019-04-13T09:38:44.868+0800    INFO    [seccomp]       seccomp/seccomp.go:116  Syscall filter successfully installed\n2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:931    Beat info       {\"system_info\": {\"beat\": {\"path\": {\"config\": \"/etc/packetbeat\", \"data\": \"/var/lib/packetbeat\", \"home\": \"/usr/share/packetbeat\", \"logs\": \"/var/log/packetbeat\"}, \"type\": \"packetbeat\", \"uuid\": \"8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2\"}}}\n2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:940    Build info      {\"system_info\": {\"build\": {\"commit\": \"1d55b4bd9dbf106a4ad4bc34fe9ee425d922363b\", \"libbeat\": \"6.7.1\", \"time\": \"2019-04-02T15:15:12.000Z\", \"version\": \"6.7.1\"}}}\n2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:943    Go runtime info {\"system_info\": {\"go\": {\"os\":\"linux\",\"arch\":\"amd64\",\"max_procs\":4,\"version\":\"go1.10.8\"}}}\n2019-04-13T09:38:44.872+0800    INFO    [beat]  instance/beat.go:947    Host info       {\"system_info\": {\"host\": {\"architecture\":\"x86_64\",\"boot_time\":\"2019-04-12T20:58:45+08:00\",\"containerized\":true,\"name\":\"localhost.localdomain\",\"ip\":[\"127.0.0.1/8\",\"::1/128\",\"172.60.20.116/24\",\"fe80::536d:17d0:e9f6:57c/64\"],\"kernel_version\":\"3.10.0-957.el7.x86_64\",\"mac\":[\"00:50:56:9f:8b:b7\"],\"os\":{\"family\":\"redhat\",\"platform\":\"centos\",\"name\":\"CentOS Linux\",\"version\":\"7 (Core)\",\"major\":7,\"minor\":6,\"patch\":1810,\"codename\":\"Core\"},\"timezone\":\"CST\",\"timezone_offset_sec\":28800,\"id\":\"cd7bb2d0c80a41c89bb5b596c22fc85e\"}}}\n2019-04-13T09:38:44.873+0800    INFO    [beat]  instance/beat.go:976    Process info    {\"system_info\": {\"process\": {\"capabilities\": {\"inheritable\":null,\"permitted\":[\"chown\",\"dac_override\",\"dac_read_search\",\"fowner\",\"fsetid\",\"kill\",\"setgid\",\"setuid\",\"setpcap\",\"linux_immutable\",\"net_bind_service\",\"net_broadcast\",\"net_admin\",\"net_raw\",\"ipc_lock\",\"ipc_owner\",\"sys_module\",\"sys_rawio\",\"sys_chroot\",\"sys_ptrace\",\"sys_pacct\",\"sys_admin\",\"sys_boot\",\"sys_nice\",\"sys_resource\",\"sys_time\",\"sys_tty_config\",\"mknod\",\"lease\",\"audit_write\",\"audit_control\",\"setfcap\",\"mac_override\",\"mac_admin\",\"syslog\",\"wake_alarm\",\"block_suspend\"],\"effective\":[\"chown\",\"dac_override\",\"dac_read_search\",\"fowner\",\"fsetid\",\"kill\",\"setgid\",\"setuid\",\"setpcap\",\"linux_immutable\",\"net_bind_service\",\"net_broadcast\",\"net_admin\",\"net_raw\",\"ipc_lock\",\"ipc_owner\",\"sys_module\",\"sys_rawio\",\"sys_chroot\",\"sys_ptrace\",\"sys_pacct\",\"sys_admin\",\"sys_boot\",\"sys_nice\",\"sys_resource\",\"sys_time\",\"sys_tty_config\",\"mknod\",\"lease\",\"audit_write\",\"audit_control\",\"setfcap\",\"mac_override\",\"mac_admin\",\"syslog\",\"wake_alarm\",\"block_suspend\"],\"bounding\":[\"chown\",\"dac_override\",\"dac_read_search\",\"fowner\",\"fsetid\",\"kill\",\"setgid\",\"setuid\",\"setpcap\",\"linux_immutable\",\"net_bind_service\",\"net_broadcast\",\"net_admin\",\"net_raw\",\"ipc_lock\",\"ipc_owner\",\"sys_module\",\"sys_rawio\",\"sys_chroot\",\"sys_ptrace\",\"sys_pacct\",\"sys_admin\",\"sys_boot\",\"sys_nice\",\"sys_resource\",\"sys_time\",\"sys_tty_config\",\"mknod\",\"lease\",\"audit_write\",\"audit_control\",\"setfcap\",\"mac_override\",\"mac_admin\",\"syslog\",\"wake_alarm\",\"block_suspend\"],\"ambient\":null}, \"cwd\": \"/\", \"exe\": \"/usr/share/packetbeat/bin/packetbeat\", \"name\": \"packetbeat\", \"pid\": 9683, \"ppid\": 1, \"seccomp\": {\"mode\":\"filter\"}, \"start_time\": \"2019-04-13T09:38:44.350+0800\"}}}\n2019-04-13T09:38:44.874+0800    INFO    instance/beat.go:280    Setup Beat: packetbeat; Version: 6.7.1\n2019-04-13T09:38:44.874+0800    INFO    elasticsearch/client.go:164     Elasticsearch url: http://localhost:9200\n2019-04-13T09:38:44.875+0800    INFO    [publisher]     pipeline/module.go:110  Beat name: localhost.localdomain\n2019-04-13T09:38:44.875+0800    INFO    procs/procs.go:101      Process watcher disabled\n2019-04-13T09:38:44.877+0800    INFO    instance/beat.go:402    packetbeat start running.\n2019-04-13T09:38:44.877+0800    INFO    [monitoring]    log/log.go:117  Starting metrics logging every 30s\n2019-04-13T09:39:14.887+0800    INFO    [monitoring]    log/log.go:144  Non-zero metrics in the last 30s        {\"monitoring\": {\"metrics\": {\"beat\":{\"cpu\":{\"system\":{\"ticks\":160,\"time\":{\"ms\":162}},\"total\":{\"ticks\":610,\"time\":{\"ms\":614},\"value\":0},\"user\":{\"ticks\":450,\"time\":{\"ms\":452}}},\"handles\":{\"limit\":{\"hard\":4096,\"soft\":1024},\"open\":7},\"info\":{\"ephemeral_id\":\"691a2203-1433-44d4-b173-938a52dbea22\",\"uptime\":{\"ms\":30042}},\"memstats\":{\"gc_next\":36201104,\"memory_alloc\":18724416,\"memory_total\":23093208,\"rss\":45715456}},\"libbeat\":{\"config\":{\"module\":{\"running\":0}},\"output\":{\"type\":\"elasticsearch\"},\"pipeline\":{\"clients\":0,\"events\":{\"active\":0}}},\"system\":{\"cpu\":{\"cores\":4},\"load\":{\"1\":0.1,\"15\":0.06,\"5\":0.05,\"norm\":{\"1\":0.025,\"15\":0.015,\"5\":0.0125}}}}}}\n```\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [Latest Releases via Apt (Ubuntu)](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#latest-releases-via-apt-ubuntu)\n- [Windows Guides](https://docs.ansible.com/ansible/latest/user_guide/windows.html)\n- [Document npcap requires WinPcap Compatible Mode](https://github.com/elastic/beats/issues/4364)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/ansible-beats.md","raw":"\n---\n\ntitle: 015-Ansible批量安装Elastic Beats(支持Linux和Windows)\n\ndate: 2019-04-13 20:41:00 +0800\n\ntags: [ansible,linux,运维,beats,es,elasticsearch]\n\ncategories: 运维,elasticsearch\n\n---\n> 这是坚持技术写作计划（含翻译）的第15篇，定个小目标999，每周最少2篇。\n\n\n使用[elastic beats](https://www.elastic.co/cn/downloads/beats)进行拨测，metric采集，主机监控，但是批量化安装仍是个问题，好在elastic官方有开源的 [ansible-beats](https://github.com/elastic/ansible-beats) 但是只支持Linux，而我们在某些业务场景下，还有WinServer的存在。故而在官方基础上fork并增加了windows的支持（[已提交PR](https://github.com/elastic/ansible-beats/pull/17)，但是官方不一定给合并 [捂脸] ）。关于Ansible管理windows可以参考我之前写的一篇文章 [Ansible2.7批量管理Windows](https://juejin.im/post/5c644d7ef265da2dea050f66)。\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n## 实验环境\n| 类型 | 系统 | ip |\n| --- | --- | --- |\n| Server(主控) | Ubuntu Server 16.04.5 LTS X64 | 192.168.0.22 |\n| Client(受控) | Windows Server 2008 R2 SP1 | 192.168.0.23 |\n| Clinet(受控) | Ubuntu Server 16.04.5 LTS X64 | 192.168.0.24 |\n| Clinet(受控) | CentOS  7.6.1810 (Core) | 192.168.0.25 |\n\n> 注意: 主控端需要安装Ansible 2.7.12 可参考 \n\n\n<a name=\"52b36576\"></a>\n## 步骤\n此处已假设主控端已安装Ansible 2.7+，被控端的Windows的WinRM已配置完成\n\n<a name=\"5be9697d\"></a>\n### 安装[anjia0532.ansible_beats](https://galaxy.ansible.com/anjia0532/ansible_beats)\n在主控端(192.168.0.22)执行以下命令\n```bash\nroot@ubuntu:/root/# ansible-galaxy install anjia0532.ansible_beats\n- downloading role 'ansible_beats', owned by anjia0532\n- downloading role from https://github.com/anjia0532/ansible-beats/archive/master.tar.gz\n- extracting anjia0532.ansible_beats to /root/.ansible/roles/anjia0532.ansible_beats\n- anjia0532.ansible_beats (master) was installed successfully\n```\n\n<a name=\"e7a37043\"></a>\n### 创建inventorys\n创建 `inventorys/hosts.yml` \n```yaml\nbeats:\n  hosts: \n    192.168.0.23:\n        ansible_user: Administrator\n        ansible_password: password\n        ansible_connection: winrm\n        ansible_winrm_transport: basic\n        ansible_port: 5985\n    192.168.0.24:\n        ansible_user: root\n        ansible_ssh_private_key_file: /root/.ssh/id_rsa\n    192.168.0.25:\n        ansible_user: root\n        ansible_ssh_private_key_file: /root/.ssh/id_rsa\n```\n\n<a name=\"b990749b\"></a>\n### 创建 task\n创建 beats.yml\n\n```yaml\n- name: Example playbook for installing packetbeat\n  hosts: beats\n  roles:\n    - { role: anjia0532.ansible_beats,\n        beat: \"packetbeat\",\n        beat_conf: {\n          \"interfaces\": {\"device\":\"any\"},\n          \"protocols\": {\n            \"dns\": {\n              \"ports\": [53],\n              \"include_authorities\":true\n            },\n            \"http\": {\n              \"ports\": [80, 8080, 8000, 5000, 8002]\n            },\n            \"memcache\": {\n              \"ports\": [11211]\n            },\n            \"mysql\": {\n              \"ports\": [3306]\n            },\n            \"pgsql\": {\n              \"ports\": [5432]\n            },\n            \"redis\": {\n              \"ports\": [6379]\n            },\n            \"thrift\": {\n              \"ports\": [9090]\n            },\n            \"mongodb\": {\n              \"ports\": [27017]\n            }\n          }\n        },\n        output_conf : {\n          \"elasticsearch\": {\n            \"hosts\": [\"localhost:9200\"]\n          }\n        }\n    }\n  vars:\n    use_repository: true\n```\n\n<a name=\"b47ee1bf\"></a>\n### 安装beats\n\n```bash\n# ansible-playbook -i inventorys/hosts.yml ./beats.yml\n\n// 忽略输出\nPLAY RECAP *******************************************************************************************************************************************************************************************************************************************************************\n192.168.0.23               : ok=17   changed=17    unreachable=0    failed=0\n192.168.0.24               : ok=19   changed=19    unreachable=0    failed=0\n192.168.0.25               : ok=19   changed=19    unreachable=0    failed=0\n```\n表明都成功了\n\n<a name=\"7a433c76\"></a>\n### 查看配置文件和日志\n\n```bash\nssh root@192.168.0.24\ncat /etc/packetbeat/packetbeat.yml\n```\n\n```yaml\n################### packetbeat Configuration #########################\n\n############################# packetbeat ######################################\ninterfaces:\n    device: any\nprotocols:\n    dns:\n        include_authorities: true\n        ports:\n        - 53\n    http:\n        ports:\n        - 80\n        - 8080\n        - 8000\n        - 5000\n        - 8002\n    memcache:\n        ports:\n        - 11211\n    mongodb:\n        ports:\n        - 27017\n    mysql:\n        ports:\n        - 3306\n    pgsql:\n        ports:\n        - 5432\n    redis:\n        ports:\n        - 6379\n    thrift:\n        ports:\n        - 9090\n\n\n###############################################################################\n############################# Libbeat Config ##################################\n# Base config file used by all other beats for using libbeat features\n\n############################# Output ##########################################\n\noutput:\n    elasticsearch:\n        hosts:\n        - localhost:9200\n\n\n############################# Logging #########################################\n\nlogging:\n    files:\n        rotateeverybytes: 10485760\n```\n\n```bash\n# less /var/log/packetbeat/packetbeat\n\n2019-04-13T09:38:44.865+0800    INFO    instance/beat.go:611    Home path: [/usr/share/packetbeat] Config path: [/etc/packetbeat] Data path: [/var/lib/packetbeat] Logs path: [/var/log/packetbeat]\n2019-04-13T09:38:44.868+0800    INFO    instance/beat.go:618    Beat UUID: 8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2\n2019-04-13T09:38:44.868+0800    INFO    [seccomp]       seccomp/seccomp.go:116  Syscall filter successfully installed\n2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:931    Beat info       {\"system_info\": {\"beat\": {\"path\": {\"config\": \"/etc/packetbeat\", \"data\": \"/var/lib/packetbeat\", \"home\": \"/usr/share/packetbeat\", \"logs\": \"/var/log/packetbeat\"}, \"type\": \"packetbeat\", \"uuid\": \"8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2\"}}}\n2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:940    Build info      {\"system_info\": {\"build\": {\"commit\": \"1d55b4bd9dbf106a4ad4bc34fe9ee425d922363b\", \"libbeat\": \"6.7.1\", \"time\": \"2019-04-02T15:15:12.000Z\", \"version\": \"6.7.1\"}}}\n2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:943    Go runtime info {\"system_info\": {\"go\": {\"os\":\"linux\",\"arch\":\"amd64\",\"max_procs\":4,\"version\":\"go1.10.8\"}}}\n2019-04-13T09:38:44.872+0800    INFO    [beat]  instance/beat.go:947    Host info       {\"system_info\": {\"host\": {\"architecture\":\"x86_64\",\"boot_time\":\"2019-04-12T20:58:45+08:00\",\"containerized\":true,\"name\":\"localhost.localdomain\",\"ip\":[\"127.0.0.1/8\",\"::1/128\",\"172.60.20.116/24\",\"fe80::536d:17d0:e9f6:57c/64\"],\"kernel_version\":\"3.10.0-957.el7.x86_64\",\"mac\":[\"00:50:56:9f:8b:b7\"],\"os\":{\"family\":\"redhat\",\"platform\":\"centos\",\"name\":\"CentOS Linux\",\"version\":\"7 (Core)\",\"major\":7,\"minor\":6,\"patch\":1810,\"codename\":\"Core\"},\"timezone\":\"CST\",\"timezone_offset_sec\":28800,\"id\":\"cd7bb2d0c80a41c89bb5b596c22fc85e\"}}}\n2019-04-13T09:38:44.873+0800    INFO    [beat]  instance/beat.go:976    Process info    {\"system_info\": {\"process\": {\"capabilities\": {\"inheritable\":null,\"permitted\":[\"chown\",\"dac_override\",\"dac_read_search\",\"fowner\",\"fsetid\",\"kill\",\"setgid\",\"setuid\",\"setpcap\",\"linux_immutable\",\"net_bind_service\",\"net_broadcast\",\"net_admin\",\"net_raw\",\"ipc_lock\",\"ipc_owner\",\"sys_module\",\"sys_rawio\",\"sys_chroot\",\"sys_ptrace\",\"sys_pacct\",\"sys_admin\",\"sys_boot\",\"sys_nice\",\"sys_resource\",\"sys_time\",\"sys_tty_config\",\"mknod\",\"lease\",\"audit_write\",\"audit_control\",\"setfcap\",\"mac_override\",\"mac_admin\",\"syslog\",\"wake_alarm\",\"block_suspend\"],\"effective\":[\"chown\",\"dac_override\",\"dac_read_search\",\"fowner\",\"fsetid\",\"kill\",\"setgid\",\"setuid\",\"setpcap\",\"linux_immutable\",\"net_bind_service\",\"net_broadcast\",\"net_admin\",\"net_raw\",\"ipc_lock\",\"ipc_owner\",\"sys_module\",\"sys_rawio\",\"sys_chroot\",\"sys_ptrace\",\"sys_pacct\",\"sys_admin\",\"sys_boot\",\"sys_nice\",\"sys_resource\",\"sys_time\",\"sys_tty_config\",\"mknod\",\"lease\",\"audit_write\",\"audit_control\",\"setfcap\",\"mac_override\",\"mac_admin\",\"syslog\",\"wake_alarm\",\"block_suspend\"],\"bounding\":[\"chown\",\"dac_override\",\"dac_read_search\",\"fowner\",\"fsetid\",\"kill\",\"setgid\",\"setuid\",\"setpcap\",\"linux_immutable\",\"net_bind_service\",\"net_broadcast\",\"net_admin\",\"net_raw\",\"ipc_lock\",\"ipc_owner\",\"sys_module\",\"sys_rawio\",\"sys_chroot\",\"sys_ptrace\",\"sys_pacct\",\"sys_admin\",\"sys_boot\",\"sys_nice\",\"sys_resource\",\"sys_time\",\"sys_tty_config\",\"mknod\",\"lease\",\"audit_write\",\"audit_control\",\"setfcap\",\"mac_override\",\"mac_admin\",\"syslog\",\"wake_alarm\",\"block_suspend\"],\"ambient\":null}, \"cwd\": \"/\", \"exe\": \"/usr/share/packetbeat/bin/packetbeat\", \"name\": \"packetbeat\", \"pid\": 9683, \"ppid\": 1, \"seccomp\": {\"mode\":\"filter\"}, \"start_time\": \"2019-04-13T09:38:44.350+0800\"}}}\n2019-04-13T09:38:44.874+0800    INFO    instance/beat.go:280    Setup Beat: packetbeat; Version: 6.7.1\n2019-04-13T09:38:44.874+0800    INFO    elasticsearch/client.go:164     Elasticsearch url: http://localhost:9200\n2019-04-13T09:38:44.875+0800    INFO    [publisher]     pipeline/module.go:110  Beat name: localhost.localdomain\n2019-04-13T09:38:44.875+0800    INFO    procs/procs.go:101      Process watcher disabled\n2019-04-13T09:38:44.877+0800    INFO    instance/beat.go:402    packetbeat start running.\n2019-04-13T09:38:44.877+0800    INFO    [monitoring]    log/log.go:117  Starting metrics logging every 30s\n2019-04-13T09:39:14.887+0800    INFO    [monitoring]    log/log.go:144  Non-zero metrics in the last 30s        {\"monitoring\": {\"metrics\": {\"beat\":{\"cpu\":{\"system\":{\"ticks\":160,\"time\":{\"ms\":162}},\"total\":{\"ticks\":610,\"time\":{\"ms\":614},\"value\":0},\"user\":{\"ticks\":450,\"time\":{\"ms\":452}}},\"handles\":{\"limit\":{\"hard\":4096,\"soft\":1024},\"open\":7},\"info\":{\"ephemeral_id\":\"691a2203-1433-44d4-b173-938a52dbea22\",\"uptime\":{\"ms\":30042}},\"memstats\":{\"gc_next\":36201104,\"memory_alloc\":18724416,\"memory_total\":23093208,\"rss\":45715456}},\"libbeat\":{\"config\":{\"module\":{\"running\":0}},\"output\":{\"type\":\"elasticsearch\"},\"pipeline\":{\"clients\":0,\"events\":{\"active\":0}}},\"system\":{\"cpu\":{\"cores\":4},\"load\":{\"1\":0.1,\"15\":0.06,\"5\":0.05,\"norm\":{\"1\":0.025,\"15\":0.015,\"5\":0.0125}}}}}}\n```\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [Latest Releases via Apt (Ubuntu)](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#latest-releases-via-apt-ubuntu)\n- [Windows Guides](https://docs.ansible.com/ansible/latest/user_guide/windows.html)\n- [Document npcap requires WinPcap Compatible Mode](https://github.com/elastic/beats/issues/4364)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"ansible-beats","published":1,"updated":"2019-08-16T06:11:15.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojie00ct24doyhh841lq","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第15篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>使用<a href=\"https://www.elastic.co/cn/downloads/beats\" target=\"_blank\" rel=\"noopener\">elastic beats</a>进行拨测，metric采集，主机监控，但是批量化安装仍是个问题，好在elastic官方有开源的 <a href=\"https://github.com/elastic/ansible-beats\" target=\"_blank\" rel=\"noopener\">ansible-beats</a> 但是只支持Linux，而我们在某些业务场景下，还有WinServer的存在。故而在官方基础上fork并增加了windows的支持（<a href=\"https://github.com/elastic/ansible-beats/pull/17\" target=\"_blank\" rel=\"noopener\">已提交PR</a>，但是官方不一定给合并 [捂脸] ）。关于Ansible管理windows可以参考我之前写的一篇文章 <a href=\"https://juejin.im/post/5c644d7ef265da2dea050f66\" target=\"_blank\" rel=\"noopener\">Ansible2.7批量管理Windows</a>。</p>\n<a id=\"more\"></a>\n<p><a name=\"12267079\"></a></p>\n<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>系统</th>\n<th>ip</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server(主控)</td>\n<td>Ubuntu Server 16.04.5 LTS X64</td>\n<td>192.168.0.22</td>\n</tr>\n<tr>\n<td>Client(受控)</td>\n<td>Windows Server 2008 R2 SP1</td>\n<td>192.168.0.23</td>\n</tr>\n<tr>\n<td>Clinet(受控)</td>\n<td>Ubuntu Server 16.04.5 LTS X64</td>\n<td>192.168.0.24</td>\n</tr>\n<tr>\n<td>Clinet(受控)</td>\n<td>CentOS  7.6.1810 (Core)</td>\n<td>192.168.0.25</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意: 主控端需要安装Ansible 2.7.12 可参考 </p>\n</blockquote>\n<p><a name=\"52b36576\"></a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>此处已假设主控端已安装Ansible 2.7+，被控端的Windows的WinRM已配置完成</p>\n<p><a name=\"5be9697d\"></a></p>\n<h3 id=\"安装anjia0532-ansible-beats\"><a href=\"#安装anjia0532-ansible-beats\" class=\"headerlink\" title=\"安装anjia0532.ansible_beats\"></a>安装<a href=\"https://galaxy.ansible.com/anjia0532/ansible_beats\" target=\"_blank\" rel=\"noopener\">anjia0532.ansible_beats</a></h3><p>在主控端(192.168.0.22)执行以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/root/<span class=\"comment\"># ansible-galaxy install anjia0532.ansible_beats</span></span><br><span class=\"line\">- downloading role <span class=\"string\">'ansible_beats'</span>, owned by anjia0532</span><br><span class=\"line\">- downloading role from https://github.com/anjia0532/ansible-beats/archive/master.tar.gz</span><br><span class=\"line\">- extracting anjia0532.ansible_beats to /root/.ansible/roles/anjia0532.ansible_beats</span><br><span class=\"line\">- anjia0532.ansible_beats (master) was installed successfully</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"e7a37043\"></a></p>\n<h3 id=\"创建inventorys\"><a href=\"#创建inventorys\" class=\"headerlink\" title=\"创建inventorys\"></a>创建inventorys</h3><p>创建 <code>inventorys/hosts.yml</code><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">beats:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> </span><br><span class=\"line\">    <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.23</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_user:</span> <span class=\"string\">Administrator</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_password:</span> <span class=\"string\">password</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_connection:</span> <span class=\"string\">winrm</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_winrm_transport:</span> <span class=\"string\">basic</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_port:</span> <span class=\"number\">5985</span></span><br><span class=\"line\">    <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.24</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_ssh_private_key_file:</span> <span class=\"string\">/root/.ssh/id_rsa</span></span><br><span class=\"line\">    <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.25</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_ssh_private_key_file:</span> <span class=\"string\">/root/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"b990749b\"></a></p>\n<h3 id=\"创建-task\"><a href=\"#创建-task\" class=\"headerlink\" title=\"创建 task\"></a>创建 task</h3><p>创建 beats.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- name:</span> <span class=\"string\">Example</span> <span class=\"string\">playbook</span> <span class=\"string\">for</span> <span class=\"string\">installing</span> <span class=\"string\">packetbeat</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">beats</span></span><br><span class=\"line\"><span class=\"attr\">  roles:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">&#123;</span> <span class=\"attr\">role:</span> <span class=\"string\">anjia0532.ansible_beats,</span></span><br><span class=\"line\"><span class=\"attr\">        beat:</span> <span class=\"string\">\"packetbeat\"</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">        beat_conf:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">          \"interfaces\":</span> <span class=\"string\">&#123;\"device\":\"any\"&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">          \"protocols\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">            \"dns\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[53],</span></span><br><span class=\"line\"><span class=\"attr\">              \"include_authorities\":</span><span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"http\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[80,</span> <span class=\"number\">8080</span><span class=\"string\">,</span> <span class=\"number\">8000</span><span class=\"string\">,</span> <span class=\"number\">5000</span><span class=\"string\">,</span> <span class=\"number\">8002</span><span class=\"string\">]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"memcache\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[11211]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"mysql\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[3306]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"pgsql\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[5432]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"redis\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[6379]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"thrift\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[9090]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"mongodb\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[27017]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;</span></span><br><span class=\"line\">          <span class=\"string\">&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;,</span></span><br><span class=\"line\">        <span class=\"string\">output_conf</span> <span class=\"string\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">          \"elasticsearch\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">            \"hosts\":</span> <span class=\"string\">[\"localhost:9200\"]</span></span><br><span class=\"line\">          <span class=\"string\">&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    use_repository:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b47ee1bf\"></a></p>\n<h3 id=\"安装beats\"><a href=\"#安装beats\" class=\"headerlink\" title=\"安装beats\"></a>安装beats</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ansible-playbook -i inventorys/hosts.yml ./beats.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 忽略输出</span><br><span class=\"line\">PLAY RECAP *******************************************************************************************************************************************************************************************************************************************************************</span><br><span class=\"line\">192.168.0.23               : ok=17   changed=17    unreachable=0    failed=0</span><br><span class=\"line\">192.168.0.24               : ok=19   changed=19    unreachable=0    failed=0</span><br><span class=\"line\">192.168.0.25               : ok=19   changed=19    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>\n<p>表明都成功了</p>\n<p><a name=\"7a433c76\"></a></p>\n<h3 id=\"查看配置文件和日志\"><a href=\"#查看配置文件和日志\" class=\"headerlink\" title=\"查看配置文件和日志\"></a>查看配置文件和日志</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.24</span><br><span class=\"line\">cat /etc/packetbeat/packetbeat.yml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################### packetbeat Configuration #########################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################# packetbeat ######################################</span></span><br><span class=\"line\"><span class=\"attr\">interfaces:</span></span><br><span class=\"line\"><span class=\"attr\">    device:</span> <span class=\"string\">any</span></span><br><span class=\"line\"><span class=\"attr\">protocols:</span></span><br><span class=\"line\"><span class=\"attr\">    dns:</span></span><br><span class=\"line\"><span class=\"attr\">        include_authorities:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">53</span></span><br><span class=\"line\"><span class=\"attr\">    http:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8002</span></span><br><span class=\"line\"><span class=\"attr\">    memcache:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">    mongodb:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">    mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">    pgsql:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">    redis:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">    thrift:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\"><span class=\"comment\">############################# Libbeat Config ##################################</span></span><br><span class=\"line\"><span class=\"comment\"># Base config file used by all other beats for using libbeat features</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################# Output ##########################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">output:</span></span><br><span class=\"line\"><span class=\"attr\">    elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">        hosts:</span></span><br><span class=\"line\"><span class=\"attr\">        - localhost:</span><span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################# Logging #########################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\"><span class=\"attr\">    files:</span></span><br><span class=\"line\"><span class=\"attr\">        rotateeverybytes:</span> <span class=\"number\">10485760</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># less /var/log/packetbeat/packetbeat</span></span><br><span class=\"line\"></span><br><span class=\"line\">2019-04-13T09:38:44.865+0800    INFO    instance/beat.go:611    Home path: [/usr/share/packetbeat] Config path: [/etc/packetbeat] Data path: [/var/lib/packetbeat] Logs path: [/var/<span class=\"built_in\">log</span>/packetbeat]</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    instance/beat.go:618    Beat UUID: 8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [seccomp]       seccomp/seccomp.go:116  Syscall filter successfully installed</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:931    Beat info       &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"beat\"</span>: &#123;<span class=\"string\">\"path\"</span>: &#123;<span class=\"string\">\"config\"</span>: <span class=\"string\">\"/etc/packetbeat\"</span>, <span class=\"string\">\"data\"</span>: <span class=\"string\">\"/var/lib/packetbeat\"</span>, <span class=\"string\">\"home\"</span>: <span class=\"string\">\"/usr/share/packetbeat\"</span>, <span class=\"string\">\"logs\"</span>: <span class=\"string\">\"/var/log/packetbeat\"</span>&#125;, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"packetbeat\"</span>, <span class=\"string\">\"uuid\"</span>: <span class=\"string\">\"8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:940    Build info      &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"build\"</span>: &#123;<span class=\"string\">\"commit\"</span>: <span class=\"string\">\"1d55b4bd9dbf106a4ad4bc34fe9ee425d922363b\"</span>, <span class=\"string\">\"libbeat\"</span>: <span class=\"string\">\"6.7.1\"</span>, <span class=\"string\">\"time\"</span>: <span class=\"string\">\"2019-04-02T15:15:12.000Z\"</span>, <span class=\"string\">\"version\"</span>: <span class=\"string\">\"6.7.1\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:943    Go runtime info &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"go\"</span>: &#123;<span class=\"string\">\"os\"</span>:<span class=\"string\">\"linux\"</span>,<span class=\"string\">\"arch\"</span>:<span class=\"string\">\"amd64\"</span>,<span class=\"string\">\"max_procs\"</span>:4,<span class=\"string\">\"version\"</span>:<span class=\"string\">\"go1.10.8\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.872+0800    INFO    [beat]  instance/beat.go:947    Host info       &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"host\"</span>: &#123;<span class=\"string\">\"architecture\"</span>:<span class=\"string\">\"x86_64\"</span>,<span class=\"string\">\"boot_time\"</span>:<span class=\"string\">\"2019-04-12T20:58:45+08:00\"</span>,<span class=\"string\">\"containerized\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"localhost.localdomain\"</span>,<span class=\"string\">\"ip\"</span>:[<span class=\"string\">\"127.0.0.1/8\"</span>,<span class=\"string\">\"::1/128\"</span>,<span class=\"string\">\"172.60.20.116/24\"</span>,<span class=\"string\">\"fe80::536d:17d0:e9f6:57c/64\"</span>],<span class=\"string\">\"kernel_version\"</span>:<span class=\"string\">\"3.10.0-957.el7.x86_64\"</span>,<span class=\"string\">\"mac\"</span>:[<span class=\"string\">\"00:50:56:9f:8b:b7\"</span>],<span class=\"string\">\"os\"</span>:&#123;<span class=\"string\">\"family\"</span>:<span class=\"string\">\"redhat\"</span>,<span class=\"string\">\"platform\"</span>:<span class=\"string\">\"centos\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"CentOS Linux\"</span>,<span class=\"string\">\"version\"</span>:<span class=\"string\">\"7 (Core)\"</span>,<span class=\"string\">\"major\"</span>:7,<span class=\"string\">\"minor\"</span>:6,<span class=\"string\">\"patch\"</span>:1810,<span class=\"string\">\"codename\"</span>:<span class=\"string\">\"Core\"</span>&#125;,<span class=\"string\">\"timezone\"</span>:<span class=\"string\">\"CST\"</span>,<span class=\"string\">\"timezone_offset_sec\"</span>:28800,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"cd7bb2d0c80a41c89bb5b596c22fc85e\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.873+0800    INFO    [beat]  instance/beat.go:976    Process info    &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"process\"</span>: &#123;<span class=\"string\">\"capabilities\"</span>: &#123;<span class=\"string\">\"inheritable\"</span>:null,<span class=\"string\">\"permitted\"</span>:[<span class=\"string\">\"chown\"</span>,<span class=\"string\">\"dac_override\"</span>,<span class=\"string\">\"dac_read_search\"</span>,<span class=\"string\">\"fowner\"</span>,<span class=\"string\">\"fsetid\"</span>,<span class=\"string\">\"kill\"</span>,<span class=\"string\">\"setgid\"</span>,<span class=\"string\">\"setuid\"</span>,<span class=\"string\">\"setpcap\"</span>,<span class=\"string\">\"linux_immutable\"</span>,<span class=\"string\">\"net_bind_service\"</span>,<span class=\"string\">\"net_broadcast\"</span>,<span class=\"string\">\"net_admin\"</span>,<span class=\"string\">\"net_raw\"</span>,<span class=\"string\">\"ipc_lock\"</span>,<span class=\"string\">\"ipc_owner\"</span>,<span class=\"string\">\"sys_module\"</span>,<span class=\"string\">\"sys_rawio\"</span>,<span class=\"string\">\"sys_chroot\"</span>,<span class=\"string\">\"sys_ptrace\"</span>,<span class=\"string\">\"sys_pacct\"</span>,<span class=\"string\">\"sys_admin\"</span>,<span class=\"string\">\"sys_boot\"</span>,<span class=\"string\">\"sys_nice\"</span>,<span class=\"string\">\"sys_resource\"</span>,<span class=\"string\">\"sys_time\"</span>,<span class=\"string\">\"sys_tty_config\"</span>,<span class=\"string\">\"mknod\"</span>,<span class=\"string\">\"lease\"</span>,<span class=\"string\">\"audit_write\"</span>,<span class=\"string\">\"audit_control\"</span>,<span class=\"string\">\"setfcap\"</span>,<span class=\"string\">\"mac_override\"</span>,<span class=\"string\">\"mac_admin\"</span>,<span class=\"string\">\"syslog\"</span>,<span class=\"string\">\"wake_alarm\"</span>,<span class=\"string\">\"block_suspend\"</span>],<span class=\"string\">\"effective\"</span>:[<span class=\"string\">\"chown\"</span>,<span class=\"string\">\"dac_override\"</span>,<span class=\"string\">\"dac_read_search\"</span>,<span class=\"string\">\"fowner\"</span>,<span class=\"string\">\"fsetid\"</span>,<span class=\"string\">\"kill\"</span>,<span class=\"string\">\"setgid\"</span>,<span class=\"string\">\"setuid\"</span>,<span class=\"string\">\"setpcap\"</span>,<span class=\"string\">\"linux_immutable\"</span>,<span class=\"string\">\"net_bind_service\"</span>,<span class=\"string\">\"net_broadcast\"</span>,<span class=\"string\">\"net_admin\"</span>,<span class=\"string\">\"net_raw\"</span>,<span class=\"string\">\"ipc_lock\"</span>,<span class=\"string\">\"ipc_owner\"</span>,<span class=\"string\">\"sys_module\"</span>,<span class=\"string\">\"sys_rawio\"</span>,<span class=\"string\">\"sys_chroot\"</span>,<span class=\"string\">\"sys_ptrace\"</span>,<span class=\"string\">\"sys_pacct\"</span>,<span class=\"string\">\"sys_admin\"</span>,<span class=\"string\">\"sys_boot\"</span>,<span class=\"string\">\"sys_nice\"</span>,<span class=\"string\">\"sys_resource\"</span>,<span class=\"string\">\"sys_time\"</span>,<span class=\"string\">\"sys_tty_config\"</span>,<span class=\"string\">\"mknod\"</span>,<span class=\"string\">\"lease\"</span>,<span class=\"string\">\"audit_write\"</span>,<span class=\"string\">\"audit_control\"</span>,<span class=\"string\">\"setfcap\"</span>,<span class=\"string\">\"mac_override\"</span>,<span class=\"string\">\"mac_admin\"</span>,<span class=\"string\">\"syslog\"</span>,<span class=\"string\">\"wake_alarm\"</span>,<span class=\"string\">\"block_suspend\"</span>],<span class=\"string\">\"bounding\"</span>:[<span class=\"string\">\"chown\"</span>,<span class=\"string\">\"dac_override\"</span>,<span class=\"string\">\"dac_read_search\"</span>,<span class=\"string\">\"fowner\"</span>,<span class=\"string\">\"fsetid\"</span>,<span class=\"string\">\"kill\"</span>,<span class=\"string\">\"setgid\"</span>,<span class=\"string\">\"setuid\"</span>,<span class=\"string\">\"setpcap\"</span>,<span class=\"string\">\"linux_immutable\"</span>,<span class=\"string\">\"net_bind_service\"</span>,<span class=\"string\">\"net_broadcast\"</span>,<span class=\"string\">\"net_admin\"</span>,<span class=\"string\">\"net_raw\"</span>,<span class=\"string\">\"ipc_lock\"</span>,<span class=\"string\">\"ipc_owner\"</span>,<span class=\"string\">\"sys_module\"</span>,<span class=\"string\">\"sys_rawio\"</span>,<span class=\"string\">\"sys_chroot\"</span>,<span class=\"string\">\"sys_ptrace\"</span>,<span class=\"string\">\"sys_pacct\"</span>,<span class=\"string\">\"sys_admin\"</span>,<span class=\"string\">\"sys_boot\"</span>,<span class=\"string\">\"sys_nice\"</span>,<span class=\"string\">\"sys_resource\"</span>,<span class=\"string\">\"sys_time\"</span>,<span class=\"string\">\"sys_tty_config\"</span>,<span class=\"string\">\"mknod\"</span>,<span class=\"string\">\"lease\"</span>,<span class=\"string\">\"audit_write\"</span>,<span class=\"string\">\"audit_control\"</span>,<span class=\"string\">\"setfcap\"</span>,<span class=\"string\">\"mac_override\"</span>,<span class=\"string\">\"mac_admin\"</span>,<span class=\"string\">\"syslog\"</span>,<span class=\"string\">\"wake_alarm\"</span>,<span class=\"string\">\"block_suspend\"</span>],<span class=\"string\">\"ambient\"</span>:null&#125;, <span class=\"string\">\"cwd\"</span>: <span class=\"string\">\"/\"</span>, <span class=\"string\">\"exe\"</span>: <span class=\"string\">\"/usr/share/packetbeat/bin/packetbeat\"</span>, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"packetbeat\"</span>, <span class=\"string\">\"pid\"</span>: 9683, <span class=\"string\">\"ppid\"</span>: 1, <span class=\"string\">\"seccomp\"</span>: &#123;<span class=\"string\">\"mode\"</span>:<span class=\"string\">\"filter\"</span>&#125;, <span class=\"string\">\"start_time\"</span>: <span class=\"string\">\"2019-04-13T09:38:44.350+0800\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.874+0800    INFO    instance/beat.go:280    Setup Beat: packetbeat; Version: 6.7.1</span><br><span class=\"line\">2019-04-13T09:38:44.874+0800    INFO    elasticsearch/client.go:164     Elasticsearch url: http://localhost:9200</span><br><span class=\"line\">2019-04-13T09:38:44.875+0800    INFO    [publisher]     pipeline/module.go:110  Beat name: localhost.localdomain</span><br><span class=\"line\">2019-04-13T09:38:44.875+0800    INFO    procs/procs.go:101      Process watcher disabled</span><br><span class=\"line\">2019-04-13T09:38:44.877+0800    INFO    instance/beat.go:402    packetbeat start running.</span><br><span class=\"line\">2019-04-13T09:38:44.877+0800    INFO    [monitoring]    <span class=\"built_in\">log</span>/log.go:117  Starting metrics logging every 30s</span><br><span class=\"line\">2019-04-13T09:39:14.887+0800    INFO    [monitoring]    <span class=\"built_in\">log</span>/log.go:144  Non-zero metrics <span class=\"keyword\">in</span> the last 30s        &#123;<span class=\"string\">\"monitoring\"</span>: &#123;<span class=\"string\">\"metrics\"</span>: &#123;<span class=\"string\">\"beat\"</span>:&#123;<span class=\"string\">\"cpu\"</span>:&#123;<span class=\"string\">\"system\"</span>:&#123;<span class=\"string\">\"ticks\"</span>:160,<span class=\"string\">\"time\"</span>:&#123;<span class=\"string\">\"ms\"</span>:162&#125;&#125;,<span class=\"string\">\"total\"</span>:&#123;<span class=\"string\">\"ticks\"</span>:610,<span class=\"string\">\"time\"</span>:&#123;<span class=\"string\">\"ms\"</span>:614&#125;,<span class=\"string\">\"value\"</span>:0&#125;,<span class=\"string\">\"user\"</span>:&#123;<span class=\"string\">\"ticks\"</span>:450,<span class=\"string\">\"time\"</span>:&#123;<span class=\"string\">\"ms\"</span>:452&#125;&#125;&#125;,<span class=\"string\">\"handles\"</span>:&#123;<span class=\"string\">\"limit\"</span>:&#123;<span class=\"string\">\"hard\"</span>:4096,<span class=\"string\">\"soft\"</span>:1024&#125;,<span class=\"string\">\"open\"</span>:7&#125;,<span class=\"string\">\"info\"</span>:&#123;<span class=\"string\">\"ephemeral_id\"</span>:<span class=\"string\">\"691a2203-1433-44d4-b173-938a52dbea22\"</span>,<span class=\"string\">\"uptime\"</span>:&#123;<span class=\"string\">\"ms\"</span>:30042&#125;&#125;,<span class=\"string\">\"memstats\"</span>:&#123;<span class=\"string\">\"gc_next\"</span>:36201104,<span class=\"string\">\"memory_alloc\"</span>:18724416,<span class=\"string\">\"memory_total\"</span>:23093208,<span class=\"string\">\"rss\"</span>:45715456&#125;&#125;,<span class=\"string\">\"libbeat\"</span>:&#123;<span class=\"string\">\"config\"</span>:&#123;<span class=\"string\">\"module\"</span>:&#123;<span class=\"string\">\"running\"</span>:0&#125;&#125;,<span class=\"string\">\"output\"</span>:&#123;<span class=\"string\">\"type\"</span>:<span class=\"string\">\"elasticsearch\"</span>&#125;,<span class=\"string\">\"pipeline\"</span>:&#123;<span class=\"string\">\"clients\"</span>:0,<span class=\"string\">\"events\"</span>:&#123;<span class=\"string\">\"active\"</span>:0&#125;&#125;&#125;,<span class=\"string\">\"system\"</span>:&#123;<span class=\"string\">\"cpu\"</span>:&#123;<span class=\"string\">\"cores\"</span>:4&#125;,<span class=\"string\">\"load\"</span>:&#123;<span class=\"string\">\"1\"</span>:0.1,<span class=\"string\">\"15\"</span>:0.06,<span class=\"string\">\"5\"</span>:0.05,<span class=\"string\">\"norm\"</span>:&#123;<span class=\"string\">\"1\"</span>:0.025,<span class=\"string\">\"15\"</span>:0.015,<span class=\"string\">\"5\"</span>:0.0125&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#latest-releases-via-apt-ubuntu\" target=\"_blank\" rel=\"noopener\">Latest Releases via Apt (Ubuntu)</a></li>\n<li><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows.html\" target=\"_blank\" rel=\"noopener\">Windows Guides</a></li>\n<li><a href=\"https://github.com/elastic/beats/issues/4364\" target=\"_blank\" rel=\"noopener\">Document npcap requires WinPcap Compatible Mode</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第15篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>使用<a href=\"https://www.elastic.co/cn/downloads/beats\" target=\"_blank\" rel=\"noopener\">elastic beats</a>进行拨测，metric采集，主机监控，但是批量化安装仍是个问题，好在elastic官方有开源的 <a href=\"https://github.com/elastic/ansible-beats\" target=\"_blank\" rel=\"noopener\">ansible-beats</a> 但是只支持Linux，而我们在某些业务场景下，还有WinServer的存在。故而在官方基础上fork并增加了windows的支持（<a href=\"https://github.com/elastic/ansible-beats/pull/17\" target=\"_blank\" rel=\"noopener\">已提交PR</a>，但是官方不一定给合并 [捂脸] ）。关于Ansible管理windows可以参考我之前写的一篇文章 <a href=\"https://juejin.im/post/5c644d7ef265da2dea050f66\" target=\"_blank\" rel=\"noopener\">Ansible2.7批量管理Windows</a>。</p>","more":"<p><a name=\"12267079\"></a></p>\n<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>系统</th>\n<th>ip</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server(主控)</td>\n<td>Ubuntu Server 16.04.5 LTS X64</td>\n<td>192.168.0.22</td>\n</tr>\n<tr>\n<td>Client(受控)</td>\n<td>Windows Server 2008 R2 SP1</td>\n<td>192.168.0.23</td>\n</tr>\n<tr>\n<td>Clinet(受控)</td>\n<td>Ubuntu Server 16.04.5 LTS X64</td>\n<td>192.168.0.24</td>\n</tr>\n<tr>\n<td>Clinet(受控)</td>\n<td>CentOS  7.6.1810 (Core)</td>\n<td>192.168.0.25</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意: 主控端需要安装Ansible 2.7.12 可参考 </p>\n</blockquote>\n<p><a name=\"52b36576\"></a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>此处已假设主控端已安装Ansible 2.7+，被控端的Windows的WinRM已配置完成</p>\n<p><a name=\"5be9697d\"></a></p>\n<h3 id=\"安装anjia0532-ansible-beats\"><a href=\"#安装anjia0532-ansible-beats\" class=\"headerlink\" title=\"安装anjia0532.ansible_beats\"></a>安装<a href=\"https://galaxy.ansible.com/anjia0532/ansible_beats\" target=\"_blank\" rel=\"noopener\">anjia0532.ansible_beats</a></h3><p>在主控端(192.168.0.22)执行以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/root/<span class=\"comment\"># ansible-galaxy install anjia0532.ansible_beats</span></span><br><span class=\"line\">- downloading role <span class=\"string\">'ansible_beats'</span>, owned by anjia0532</span><br><span class=\"line\">- downloading role from https://github.com/anjia0532/ansible-beats/archive/master.tar.gz</span><br><span class=\"line\">- extracting anjia0532.ansible_beats to /root/.ansible/roles/anjia0532.ansible_beats</span><br><span class=\"line\">- anjia0532.ansible_beats (master) was installed successfully</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"e7a37043\"></a></p>\n<h3 id=\"创建inventorys\"><a href=\"#创建inventorys\" class=\"headerlink\" title=\"创建inventorys\"></a>创建inventorys</h3><p>创建 <code>inventorys/hosts.yml</code><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">beats:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> </span><br><span class=\"line\">    <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.23</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_user:</span> <span class=\"string\">Administrator</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_password:</span> <span class=\"string\">password</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_connection:</span> <span class=\"string\">winrm</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_winrm_transport:</span> <span class=\"string\">basic</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_port:</span> <span class=\"number\">5985</span></span><br><span class=\"line\">    <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.24</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_ssh_private_key_file:</span> <span class=\"string\">/root/.ssh/id_rsa</span></span><br><span class=\"line\">    <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.25</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">        ansible_ssh_private_key_file:</span> <span class=\"string\">/root/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"b990749b\"></a></p>\n<h3 id=\"创建-task\"><a href=\"#创建-task\" class=\"headerlink\" title=\"创建 task\"></a>创建 task</h3><p>创建 beats.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- name:</span> <span class=\"string\">Example</span> <span class=\"string\">playbook</span> <span class=\"string\">for</span> <span class=\"string\">installing</span> <span class=\"string\">packetbeat</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">beats</span></span><br><span class=\"line\"><span class=\"attr\">  roles:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">&#123;</span> <span class=\"attr\">role:</span> <span class=\"string\">anjia0532.ansible_beats,</span></span><br><span class=\"line\"><span class=\"attr\">        beat:</span> <span class=\"string\">\"packetbeat\"</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">        beat_conf:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">          \"interfaces\":</span> <span class=\"string\">&#123;\"device\":\"any\"&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">          \"protocols\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">            \"dns\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[53],</span></span><br><span class=\"line\"><span class=\"attr\">              \"include_authorities\":</span><span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"http\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[80,</span> <span class=\"number\">8080</span><span class=\"string\">,</span> <span class=\"number\">8000</span><span class=\"string\">,</span> <span class=\"number\">5000</span><span class=\"string\">,</span> <span class=\"number\">8002</span><span class=\"string\">]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"memcache\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[11211]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"mysql\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[3306]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"pgsql\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[5432]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"redis\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[6379]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"thrift\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[9090]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"attr\">            \"mongodb\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">              \"ports\":</span> <span class=\"string\">[27017]</span></span><br><span class=\"line\">            <span class=\"string\">&#125;</span></span><br><span class=\"line\">          <span class=\"string\">&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;,</span></span><br><span class=\"line\">        <span class=\"string\">output_conf</span> <span class=\"string\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">          \"elasticsearch\":</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">            \"hosts\":</span> <span class=\"string\">[\"localhost:9200\"]</span></span><br><span class=\"line\">          <span class=\"string\">&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    use_repository:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b47ee1bf\"></a></p>\n<h3 id=\"安装beats\"><a href=\"#安装beats\" class=\"headerlink\" title=\"安装beats\"></a>安装beats</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ansible-playbook -i inventorys/hosts.yml ./beats.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 忽略输出</span><br><span class=\"line\">PLAY RECAP *******************************************************************************************************************************************************************************************************************************************************************</span><br><span class=\"line\">192.168.0.23               : ok=17   changed=17    unreachable=0    failed=0</span><br><span class=\"line\">192.168.0.24               : ok=19   changed=19    unreachable=0    failed=0</span><br><span class=\"line\">192.168.0.25               : ok=19   changed=19    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>\n<p>表明都成功了</p>\n<p><a name=\"7a433c76\"></a></p>\n<h3 id=\"查看配置文件和日志\"><a href=\"#查看配置文件和日志\" class=\"headerlink\" title=\"查看配置文件和日志\"></a>查看配置文件和日志</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.24</span><br><span class=\"line\">cat /etc/packetbeat/packetbeat.yml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################### packetbeat Configuration #########################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################# packetbeat ######################################</span></span><br><span class=\"line\"><span class=\"attr\">interfaces:</span></span><br><span class=\"line\"><span class=\"attr\">    device:</span> <span class=\"string\">any</span></span><br><span class=\"line\"><span class=\"attr\">protocols:</span></span><br><span class=\"line\"><span class=\"attr\">    dns:</span></span><br><span class=\"line\"><span class=\"attr\">        include_authorities:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">53</span></span><br><span class=\"line\"><span class=\"attr\">    http:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8002</span></span><br><span class=\"line\"><span class=\"attr\">    memcache:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">    mongodb:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">    mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">    pgsql:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">    redis:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">    thrift:</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\"><span class=\"comment\">############################# Libbeat Config ##################################</span></span><br><span class=\"line\"><span class=\"comment\"># Base config file used by all other beats for using libbeat features</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################# Output ##########################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">output:</span></span><br><span class=\"line\"><span class=\"attr\">    elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">        hosts:</span></span><br><span class=\"line\"><span class=\"attr\">        - localhost:</span><span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################# Logging #########################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\"><span class=\"attr\">    files:</span></span><br><span class=\"line\"><span class=\"attr\">        rotateeverybytes:</span> <span class=\"number\">10485760</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># less /var/log/packetbeat/packetbeat</span></span><br><span class=\"line\"></span><br><span class=\"line\">2019-04-13T09:38:44.865+0800    INFO    instance/beat.go:611    Home path: [/usr/share/packetbeat] Config path: [/etc/packetbeat] Data path: [/var/lib/packetbeat] Logs path: [/var/<span class=\"built_in\">log</span>/packetbeat]</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    instance/beat.go:618    Beat UUID: 8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [seccomp]       seccomp/seccomp.go:116  Syscall filter successfully installed</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:931    Beat info       &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"beat\"</span>: &#123;<span class=\"string\">\"path\"</span>: &#123;<span class=\"string\">\"config\"</span>: <span class=\"string\">\"/etc/packetbeat\"</span>, <span class=\"string\">\"data\"</span>: <span class=\"string\">\"/var/lib/packetbeat\"</span>, <span class=\"string\">\"home\"</span>: <span class=\"string\">\"/usr/share/packetbeat\"</span>, <span class=\"string\">\"logs\"</span>: <span class=\"string\">\"/var/log/packetbeat\"</span>&#125;, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"packetbeat\"</span>, <span class=\"string\">\"uuid\"</span>: <span class=\"string\">\"8fbd86a8-0bbc-4349-8aca-d4dc8c897ba2\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:940    Build info      &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"build\"</span>: &#123;<span class=\"string\">\"commit\"</span>: <span class=\"string\">\"1d55b4bd9dbf106a4ad4bc34fe9ee425d922363b\"</span>, <span class=\"string\">\"libbeat\"</span>: <span class=\"string\">\"6.7.1\"</span>, <span class=\"string\">\"time\"</span>: <span class=\"string\">\"2019-04-02T15:15:12.000Z\"</span>, <span class=\"string\">\"version\"</span>: <span class=\"string\">\"6.7.1\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.868+0800    INFO    [beat]  instance/beat.go:943    Go runtime info &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"go\"</span>: &#123;<span class=\"string\">\"os\"</span>:<span class=\"string\">\"linux\"</span>,<span class=\"string\">\"arch\"</span>:<span class=\"string\">\"amd64\"</span>,<span class=\"string\">\"max_procs\"</span>:4,<span class=\"string\">\"version\"</span>:<span class=\"string\">\"go1.10.8\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.872+0800    INFO    [beat]  instance/beat.go:947    Host info       &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"host\"</span>: &#123;<span class=\"string\">\"architecture\"</span>:<span class=\"string\">\"x86_64\"</span>,<span class=\"string\">\"boot_time\"</span>:<span class=\"string\">\"2019-04-12T20:58:45+08:00\"</span>,<span class=\"string\">\"containerized\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"localhost.localdomain\"</span>,<span class=\"string\">\"ip\"</span>:[<span class=\"string\">\"127.0.0.1/8\"</span>,<span class=\"string\">\"::1/128\"</span>,<span class=\"string\">\"172.60.20.116/24\"</span>,<span class=\"string\">\"fe80::536d:17d0:e9f6:57c/64\"</span>],<span class=\"string\">\"kernel_version\"</span>:<span class=\"string\">\"3.10.0-957.el7.x86_64\"</span>,<span class=\"string\">\"mac\"</span>:[<span class=\"string\">\"00:50:56:9f:8b:b7\"</span>],<span class=\"string\">\"os\"</span>:&#123;<span class=\"string\">\"family\"</span>:<span class=\"string\">\"redhat\"</span>,<span class=\"string\">\"platform\"</span>:<span class=\"string\">\"centos\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"CentOS Linux\"</span>,<span class=\"string\">\"version\"</span>:<span class=\"string\">\"7 (Core)\"</span>,<span class=\"string\">\"major\"</span>:7,<span class=\"string\">\"minor\"</span>:6,<span class=\"string\">\"patch\"</span>:1810,<span class=\"string\">\"codename\"</span>:<span class=\"string\">\"Core\"</span>&#125;,<span class=\"string\">\"timezone\"</span>:<span class=\"string\">\"CST\"</span>,<span class=\"string\">\"timezone_offset_sec\"</span>:28800,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"cd7bb2d0c80a41c89bb5b596c22fc85e\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.873+0800    INFO    [beat]  instance/beat.go:976    Process info    &#123;<span class=\"string\">\"system_info\"</span>: &#123;<span class=\"string\">\"process\"</span>: &#123;<span class=\"string\">\"capabilities\"</span>: &#123;<span class=\"string\">\"inheritable\"</span>:null,<span class=\"string\">\"permitted\"</span>:[<span class=\"string\">\"chown\"</span>,<span class=\"string\">\"dac_override\"</span>,<span class=\"string\">\"dac_read_search\"</span>,<span class=\"string\">\"fowner\"</span>,<span class=\"string\">\"fsetid\"</span>,<span class=\"string\">\"kill\"</span>,<span class=\"string\">\"setgid\"</span>,<span class=\"string\">\"setuid\"</span>,<span class=\"string\">\"setpcap\"</span>,<span class=\"string\">\"linux_immutable\"</span>,<span class=\"string\">\"net_bind_service\"</span>,<span class=\"string\">\"net_broadcast\"</span>,<span class=\"string\">\"net_admin\"</span>,<span class=\"string\">\"net_raw\"</span>,<span class=\"string\">\"ipc_lock\"</span>,<span class=\"string\">\"ipc_owner\"</span>,<span class=\"string\">\"sys_module\"</span>,<span class=\"string\">\"sys_rawio\"</span>,<span class=\"string\">\"sys_chroot\"</span>,<span class=\"string\">\"sys_ptrace\"</span>,<span class=\"string\">\"sys_pacct\"</span>,<span class=\"string\">\"sys_admin\"</span>,<span class=\"string\">\"sys_boot\"</span>,<span class=\"string\">\"sys_nice\"</span>,<span class=\"string\">\"sys_resource\"</span>,<span class=\"string\">\"sys_time\"</span>,<span class=\"string\">\"sys_tty_config\"</span>,<span class=\"string\">\"mknod\"</span>,<span class=\"string\">\"lease\"</span>,<span class=\"string\">\"audit_write\"</span>,<span class=\"string\">\"audit_control\"</span>,<span class=\"string\">\"setfcap\"</span>,<span class=\"string\">\"mac_override\"</span>,<span class=\"string\">\"mac_admin\"</span>,<span class=\"string\">\"syslog\"</span>,<span class=\"string\">\"wake_alarm\"</span>,<span class=\"string\">\"block_suspend\"</span>],<span class=\"string\">\"effective\"</span>:[<span class=\"string\">\"chown\"</span>,<span class=\"string\">\"dac_override\"</span>,<span class=\"string\">\"dac_read_search\"</span>,<span class=\"string\">\"fowner\"</span>,<span class=\"string\">\"fsetid\"</span>,<span class=\"string\">\"kill\"</span>,<span class=\"string\">\"setgid\"</span>,<span class=\"string\">\"setuid\"</span>,<span class=\"string\">\"setpcap\"</span>,<span class=\"string\">\"linux_immutable\"</span>,<span class=\"string\">\"net_bind_service\"</span>,<span class=\"string\">\"net_broadcast\"</span>,<span class=\"string\">\"net_admin\"</span>,<span class=\"string\">\"net_raw\"</span>,<span class=\"string\">\"ipc_lock\"</span>,<span class=\"string\">\"ipc_owner\"</span>,<span class=\"string\">\"sys_module\"</span>,<span class=\"string\">\"sys_rawio\"</span>,<span class=\"string\">\"sys_chroot\"</span>,<span class=\"string\">\"sys_ptrace\"</span>,<span class=\"string\">\"sys_pacct\"</span>,<span class=\"string\">\"sys_admin\"</span>,<span class=\"string\">\"sys_boot\"</span>,<span class=\"string\">\"sys_nice\"</span>,<span class=\"string\">\"sys_resource\"</span>,<span class=\"string\">\"sys_time\"</span>,<span class=\"string\">\"sys_tty_config\"</span>,<span class=\"string\">\"mknod\"</span>,<span class=\"string\">\"lease\"</span>,<span class=\"string\">\"audit_write\"</span>,<span class=\"string\">\"audit_control\"</span>,<span class=\"string\">\"setfcap\"</span>,<span class=\"string\">\"mac_override\"</span>,<span class=\"string\">\"mac_admin\"</span>,<span class=\"string\">\"syslog\"</span>,<span class=\"string\">\"wake_alarm\"</span>,<span class=\"string\">\"block_suspend\"</span>],<span class=\"string\">\"bounding\"</span>:[<span class=\"string\">\"chown\"</span>,<span class=\"string\">\"dac_override\"</span>,<span class=\"string\">\"dac_read_search\"</span>,<span class=\"string\">\"fowner\"</span>,<span class=\"string\">\"fsetid\"</span>,<span class=\"string\">\"kill\"</span>,<span class=\"string\">\"setgid\"</span>,<span class=\"string\">\"setuid\"</span>,<span class=\"string\">\"setpcap\"</span>,<span class=\"string\">\"linux_immutable\"</span>,<span class=\"string\">\"net_bind_service\"</span>,<span class=\"string\">\"net_broadcast\"</span>,<span class=\"string\">\"net_admin\"</span>,<span class=\"string\">\"net_raw\"</span>,<span class=\"string\">\"ipc_lock\"</span>,<span class=\"string\">\"ipc_owner\"</span>,<span class=\"string\">\"sys_module\"</span>,<span class=\"string\">\"sys_rawio\"</span>,<span class=\"string\">\"sys_chroot\"</span>,<span class=\"string\">\"sys_ptrace\"</span>,<span class=\"string\">\"sys_pacct\"</span>,<span class=\"string\">\"sys_admin\"</span>,<span class=\"string\">\"sys_boot\"</span>,<span class=\"string\">\"sys_nice\"</span>,<span class=\"string\">\"sys_resource\"</span>,<span class=\"string\">\"sys_time\"</span>,<span class=\"string\">\"sys_tty_config\"</span>,<span class=\"string\">\"mknod\"</span>,<span class=\"string\">\"lease\"</span>,<span class=\"string\">\"audit_write\"</span>,<span class=\"string\">\"audit_control\"</span>,<span class=\"string\">\"setfcap\"</span>,<span class=\"string\">\"mac_override\"</span>,<span class=\"string\">\"mac_admin\"</span>,<span class=\"string\">\"syslog\"</span>,<span class=\"string\">\"wake_alarm\"</span>,<span class=\"string\">\"block_suspend\"</span>],<span class=\"string\">\"ambient\"</span>:null&#125;, <span class=\"string\">\"cwd\"</span>: <span class=\"string\">\"/\"</span>, <span class=\"string\">\"exe\"</span>: <span class=\"string\">\"/usr/share/packetbeat/bin/packetbeat\"</span>, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"packetbeat\"</span>, <span class=\"string\">\"pid\"</span>: 9683, <span class=\"string\">\"ppid\"</span>: 1, <span class=\"string\">\"seccomp\"</span>: &#123;<span class=\"string\">\"mode\"</span>:<span class=\"string\">\"filter\"</span>&#125;, <span class=\"string\">\"start_time\"</span>: <span class=\"string\">\"2019-04-13T09:38:44.350+0800\"</span>&#125;&#125;&#125;</span><br><span class=\"line\">2019-04-13T09:38:44.874+0800    INFO    instance/beat.go:280    Setup Beat: packetbeat; Version: 6.7.1</span><br><span class=\"line\">2019-04-13T09:38:44.874+0800    INFO    elasticsearch/client.go:164     Elasticsearch url: http://localhost:9200</span><br><span class=\"line\">2019-04-13T09:38:44.875+0800    INFO    [publisher]     pipeline/module.go:110  Beat name: localhost.localdomain</span><br><span class=\"line\">2019-04-13T09:38:44.875+0800    INFO    procs/procs.go:101      Process watcher disabled</span><br><span class=\"line\">2019-04-13T09:38:44.877+0800    INFO    instance/beat.go:402    packetbeat start running.</span><br><span class=\"line\">2019-04-13T09:38:44.877+0800    INFO    [monitoring]    <span class=\"built_in\">log</span>/log.go:117  Starting metrics logging every 30s</span><br><span class=\"line\">2019-04-13T09:39:14.887+0800    INFO    [monitoring]    <span class=\"built_in\">log</span>/log.go:144  Non-zero metrics <span class=\"keyword\">in</span> the last 30s        &#123;<span class=\"string\">\"monitoring\"</span>: &#123;<span class=\"string\">\"metrics\"</span>: &#123;<span class=\"string\">\"beat\"</span>:&#123;<span class=\"string\">\"cpu\"</span>:&#123;<span class=\"string\">\"system\"</span>:&#123;<span class=\"string\">\"ticks\"</span>:160,<span class=\"string\">\"time\"</span>:&#123;<span class=\"string\">\"ms\"</span>:162&#125;&#125;,<span class=\"string\">\"total\"</span>:&#123;<span class=\"string\">\"ticks\"</span>:610,<span class=\"string\">\"time\"</span>:&#123;<span class=\"string\">\"ms\"</span>:614&#125;,<span class=\"string\">\"value\"</span>:0&#125;,<span class=\"string\">\"user\"</span>:&#123;<span class=\"string\">\"ticks\"</span>:450,<span class=\"string\">\"time\"</span>:&#123;<span class=\"string\">\"ms\"</span>:452&#125;&#125;&#125;,<span class=\"string\">\"handles\"</span>:&#123;<span class=\"string\">\"limit\"</span>:&#123;<span class=\"string\">\"hard\"</span>:4096,<span class=\"string\">\"soft\"</span>:1024&#125;,<span class=\"string\">\"open\"</span>:7&#125;,<span class=\"string\">\"info\"</span>:&#123;<span class=\"string\">\"ephemeral_id\"</span>:<span class=\"string\">\"691a2203-1433-44d4-b173-938a52dbea22\"</span>,<span class=\"string\">\"uptime\"</span>:&#123;<span class=\"string\">\"ms\"</span>:30042&#125;&#125;,<span class=\"string\">\"memstats\"</span>:&#123;<span class=\"string\">\"gc_next\"</span>:36201104,<span class=\"string\">\"memory_alloc\"</span>:18724416,<span class=\"string\">\"memory_total\"</span>:23093208,<span class=\"string\">\"rss\"</span>:45715456&#125;&#125;,<span class=\"string\">\"libbeat\"</span>:&#123;<span class=\"string\">\"config\"</span>:&#123;<span class=\"string\">\"module\"</span>:&#123;<span class=\"string\">\"running\"</span>:0&#125;&#125;,<span class=\"string\">\"output\"</span>:&#123;<span class=\"string\">\"type\"</span>:<span class=\"string\">\"elasticsearch\"</span>&#125;,<span class=\"string\">\"pipeline\"</span>:&#123;<span class=\"string\">\"clients\"</span>:0,<span class=\"string\">\"events\"</span>:&#123;<span class=\"string\">\"active\"</span>:0&#125;&#125;&#125;,<span class=\"string\">\"system\"</span>:&#123;<span class=\"string\">\"cpu\"</span>:&#123;<span class=\"string\">\"cores\"</span>:4&#125;,<span class=\"string\">\"load\"</span>:&#123;<span class=\"string\">\"1\"</span>:0.1,<span class=\"string\">\"15\"</span>:0.06,<span class=\"string\">\"5\"</span>:0.05,<span class=\"string\">\"norm\"</span>:&#123;<span class=\"string\">\"1\"</span>:0.025,<span class=\"string\">\"15\"</span>:0.015,<span class=\"string\">\"5\"</span>:0.0125&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#latest-releases-via-apt-ubuntu\" target=\"_blank\" rel=\"noopener\">Latest Releases via Apt (Ubuntu)</a></li>\n<li><a href=\"https://docs.ansible.com/ansible/latest/user_guide/windows.html\" target=\"_blank\" rel=\"noopener\">Windows Guides</a></li>\n<li><a href=\"https://github.com/elastic/beats/issues/4364\" target=\"_blank\" rel=\"noopener\">Document npcap requires WinPcap Compatible Mode</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"017-Centos7.6+CDH 6.2 安装和使用","date":"2019-04-25T11:10:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第17篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍hadoop发行版CDH最新版(6.2)的安装。\n\n<!-- more -->\n\n\n<a name=\"x5Osz\"></a>\n## 准备\n<a name=\"hybLO\"></a>\n### 硬件配置\n| IP | HostName | OS | Cores | Mem | Disk | Rules |\n| --- | --- | --- | --- | --- | --- | --- |\n| 192.168.20.24 | cdh01.anjia.com | centos7.6 mini | 4 | 16G | 100G | CM6,CDH agent |\n| 192.168.20.25 | cdh02.anjia.com | centos7.6 mini | 4 | 16G | 100G | CDH agent |\n| 192.168.20.28 | cdh03.anjia.com | centos7.6 mini | 4 | 16G | 100G | CDH agent |\n\n<a name=\"YUZct\"></a>\n### 软件包\n本地搭建镜像源，加速构建。参考 [018-CDH6.2构建本地源加速CDH安装](https://juejin.im/post/5cc57a01f265da036c57929b)\n\n<a name=\"eLCZv\"></a>\n### 安装前准备\n<a name=\"V4FS6\"></a>\n#### CM存储空间规划\n参考 [Storage Space Planning for Cloudera Manager](https://www.cloudera.com/documentation/enterprise/6/6.2/topics/cm_ig_reqs_space.html)\n<a name=\"mC4zx\"></a>\n#### 配置网络名\n\n```bash\n# cdh01.anjia.com 192.168.20.24\nsudo hostnamectl set-hostname cdh01.anjia.com\ncat << EOF | sudo tee -a /etc/hosts\n192.168.20.24  cdh01.anjia.com  cdh01\n192.168.20.25  cdh02.anjia.com  cdh02\n192.168.20.28  cdh03.anjia.com  cdh03\nEOF\necho \"HOSTNAME=cdh01.anjia.com\" >> /etc/sysconfig/network\n\n# cdh02.anjia.com 192.168.20.25\nsudo hostnamectl set-hostname cdh02.anjia.com\ncat << EOF | sudo tee -a /etc/hosts\n192.168.20.24  cdh01.anjia.com  cdh01\n192.168.20.25  cdh02.anjia.com  cdh02\n192.168.20.28  cdh03.anjia.com  cdh03\nEOF\necho \"HOSTNAME=cdh02.anjia.com\" >> /etc/sysconfig/network\n\n# cdh03.anjia.com 192.168.20.28\nsudo hostnamectl set-hostname cdh03.anjia.com\ncat << EOF | sudo tee -a /etc/hosts\n192.168.20.24  cdh01.anjia.com  cdh01\n192.168.20.25  cdh02.anjia.com  cdh02\n192.168.20.28  cdh03.anjia.com  cdh03\nEOF\necho \"HOSTNAME=cdh03.anjia.com\" >> /etc/sysconfig/network\n```\n\n参考 [Configure Network Names](https://www.cloudera.com/documentation/enterprise/6/6.2/topics/configure_network_names.html)\n\n<a name=\"4udpU\"></a>\n#### 禁用防火墙\n每台都执行\n```bash\nsudo iptables-save > ~/firewall.rules\nsudo systemctl disable firewalld\nsudo systemctl stop firewalld\n```\n参考 [Disabling the Firewall](https://www.cloudera.com/documentation/enterprise/6/6.2/topics/install_cdh_disable_iptables.html)\n\n<a name=\"DnQF2\"></a>\n#### 开启ntp同步时钟\n每台都执行\n```bash\nyum install -y ntp\nsed -i \"/^server/ d\" /etc/ntp.conf\ncat << EOF | sudo tee -a /etc/ntp.conf\nserver ntp1.aliyun.com\nserver ntp2.aliyun.com\nserver ntp3.aliyun.com\nserver ntp4.aliyun.com\nEOF\nsudo systemctl start ntpd\nsudo systemctl enable ntpd\nntpdate -u ntp1.aliyun.com\nhwclock --systohc\n```\n\n<a name=\"dLErf\"></a>\n#### 修改repo\n每台都执行\n```bash\nsudo wget https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/cloudera-manager.repo -P /etc/yum.repos.d/\nsed -i \"s/https\\:\\/\\/archive.cloudera.com/http\\:\\/\\/192.168.20.24\\/cloudera-repos/g\"  /etc/yum.repos.d/cloudera-manager.repo\nsudo rpm --import https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPM-GPG-KEY-cloudera\n```\n<a name=\"OpEts\"></a>\n#### 优化虚拟内存需求率\n每台都执行\n```bash\necho 'vm.swappiness = 10' >> /etc/sysctl.conf\nsysctl -p\n```\n<a name=\"RRcLH\"></a>\n#### 解决透明大页面问题\n\n```bash\necho never > /sys/kernel/mm/transparent_hugepage/defrag\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n<a name=\"GBoH7\"></a>\n#### 安装jdk\n每台都执行\n\n```bash\nsudo yum install -y oracle-j2sdk1.8\n\ncat << EOF | sudo tee -a /etc/profile\n#设置java环境\nexport JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JAVA_HOME/jre/lib:\\$CLASSPATH\nexport PATH=\\$JAVA_HOME/bin:\\$JAVA_HOME/jre/bin:\\$PATH\nEOF\nsource /etc/profile\n```\n\n<a name=\"rmtsK\"></a>\n### 安装CM和CDH\n\n<a name=\"tjzk3\"></a>\n#### 安装CM\n在cdh01.anjia.com执行\n```bash\nsudo yum install -y cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server\n```\n启用Auto-TLS,在CM6.2.0人工不启用auto-tls会导致登陆不成功\n```bash\nsudo JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera /opt/cloudera/cm-agent/bin/certmanager --location /opt/cloudera/CMCA setup --configure-services\n```\n\n<a name=\"F5mJx\"></a>\n#### 安装数据库\n本文选择MariaDB<br />在cdh01.anjia.com执行\n```bash\nsudo yum install -y mariadb-server\nsudo systemctl stop mariadb\ncat << EOF | sudo tee -a /etc/my.cnf.d/cdh-db.cnf\n[mysqld]\ntransaction-isolation = READ-COMMITTED\n# Disabling symbolic-links is recommended to prevent assorted security risks;\n# to do so, uncomment this line:\nsymbolic-links = 0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\nkey_buffer = 16M\nkey_buffer_size = 32M\nmax_allowed_packet = 32M\nthread_stack = 256K\nthread_cache_size = 64\nquery_cache_limit = 8M\nquery_cache_size = 64M\nquery_cache_type = 1\n\nmax_connections = 550\n#expire_logs_days = 10\n#max_binlog_size = 100M\n\n#log_bin should be on a disk with enough free space.\n#Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your\n#system and chown the specified folder to the mysql user.\nlog_bin=/var/lib/mysql/mysql_binary_log\n\n#In later versions of MariaDB, if you enable the binary log and do not set\n#a server_id, MariaDB will not start. The server_id must be unique within\n#the replicating group.\nserver_id=1\n\nbinlog_format = mixed\n\nread_buffer_size = 2M\nread_rnd_buffer_size = 16M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\n\n# InnoDB settings\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit  = 2\ninnodb_log_buffer_size = 64M\ninnodb_buffer_pool_size = 4G\ninnodb_thread_concurrency = 8\ninnodb_flush_method = O_DIRECT\ninnodb_log_file_size = 512M\nEOF\n\n\nsudo systemctl enable mariadb\nsudo systemctl start mariadb\n\nsudo /usr/bin/mysql_secure_installation\n\n[...]\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n[...]\nSet root password? [Y/n] Y\nNew password:\nRe-enter new password:\n[...]\nRemove anonymous users? [Y/n] Y\n[...]\nDisallow root login remotely? [Y/n] N\n[...]\nRemove test database and access to it [Y/n] Y\n[...]\nReload privilege tables now? [Y/n] Y\n[...]\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n<a name=\"so3ND\"></a>\n#### 安装数据库驱动\n每台都执行\n```bash\nwget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz\ntar zxvf mysql-connector-java-5.1.46.tar.gz\nsudo mkdir -p /usr/share/java/\ncd mysql-connector-java-5.1.46\nsudo cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar\n```\n\n<a name=\"VXP2c\"></a>\n#### 创建数据库\n在cdh01.anjia.com执行\n\n```bash\nmysql -u root -p<password>\n\nCREATE DATABASE <database> DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON <database>.* TO '<user>'@'%' IDENTIFIED BY '<password>';\n```\n这一步scm是必须的，其余的数据库可以等后边真实使用时再创建。\n\n| Service | Database | User |\n| :---: | :---: | :---: |\n| Cloudera Manager Server | scm | scm |\n| Activity Monitor | amon | amon |\n| Reports Manager | rman | rman |\n| Hue | hue | hue |\n| Hive Metastore Server | metastore | hive |\n| Sentry Server | sentry | sentry |\n| Cloudera Navigator Audit Server | nav | nav |\n| Cloudera Navigator Metadata Server | navms | navms |\n| Oozie | oozie | oozie |\n\n<a name=\"TujCM\"></a>\n#### 配置CM数据库\n\n```bash\nsudo /opt/cloudera/cm/schema/scm_prepare_database.sh [options] <databaseType> <databaseName> <databaseUser> <password>\n# 输出\nJAVA_HOME=/usr/java/jdk1.8.0_181-cloudera\nVerifying that we can write to /etc/cloudera-scm-server\nCreating SCM configuration file in /etc/cloudera-scm-server\nExecuting:  /usr/java/jdk1.8.0_181-cloudera/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/opt/cloudera/cm/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.\n[                          main] DbCommandExecutor              INFO  Successfully connected to database.\nAll done, your SCM database is configured correctly!\n```\n详细参数，参考 [Syntax for scm_prepare_database.sh](https://www.cloudera.com/documentation/enterprise/latest/topics/prepare_cm_database.html#scm_prepare_syntax)\n\n<a name=\"ZjPAa\"></a>\n#### 安装CDH和其他软件\n\n```bash\nsudo systemctl start cloudera-scm-server\n# 启动后，监听server日志，大约1-3分钟左右\nsudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log\n# 直到日志出现，如下内容，即启动成功。\n2019-05-08 13:12:26,523 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.\n```\n参考资料<br />\n\n- [CDH 6.2.x Packaging](https://www.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_62_packaging.html)\n\n","source":"_posts/cdh-6-2-x.md","raw":"\n---\n\ntitle: 017-Centos7.6+CDH 6.2 安装和使用\n\ndate: 2019-04-25 19:10:00 +0800\n\ntags: [大数据,hadoop,spark,cdh,hdp]\n\ncategories: 大数据\n\n---\n> 这是坚持技术写作计划（含翻译）的第17篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍hadoop发行版CDH最新版(6.2)的安装。\n\n<!-- more -->\n\n\n<a name=\"x5Osz\"></a>\n## 准备\n<a name=\"hybLO\"></a>\n### 硬件配置\n| IP | HostName | OS | Cores | Mem | Disk | Rules |\n| --- | --- | --- | --- | --- | --- | --- |\n| 192.168.20.24 | cdh01.anjia.com | centos7.6 mini | 4 | 16G | 100G | CM6,CDH agent |\n| 192.168.20.25 | cdh02.anjia.com | centos7.6 mini | 4 | 16G | 100G | CDH agent |\n| 192.168.20.28 | cdh03.anjia.com | centos7.6 mini | 4 | 16G | 100G | CDH agent |\n\n<a name=\"YUZct\"></a>\n### 软件包\n本地搭建镜像源，加速构建。参考 [018-CDH6.2构建本地源加速CDH安装](https://juejin.im/post/5cc57a01f265da036c57929b)\n\n<a name=\"eLCZv\"></a>\n### 安装前准备\n<a name=\"V4FS6\"></a>\n#### CM存储空间规划\n参考 [Storage Space Planning for Cloudera Manager](https://www.cloudera.com/documentation/enterprise/6/6.2/topics/cm_ig_reqs_space.html)\n<a name=\"mC4zx\"></a>\n#### 配置网络名\n\n```bash\n# cdh01.anjia.com 192.168.20.24\nsudo hostnamectl set-hostname cdh01.anjia.com\ncat << EOF | sudo tee -a /etc/hosts\n192.168.20.24  cdh01.anjia.com  cdh01\n192.168.20.25  cdh02.anjia.com  cdh02\n192.168.20.28  cdh03.anjia.com  cdh03\nEOF\necho \"HOSTNAME=cdh01.anjia.com\" >> /etc/sysconfig/network\n\n# cdh02.anjia.com 192.168.20.25\nsudo hostnamectl set-hostname cdh02.anjia.com\ncat << EOF | sudo tee -a /etc/hosts\n192.168.20.24  cdh01.anjia.com  cdh01\n192.168.20.25  cdh02.anjia.com  cdh02\n192.168.20.28  cdh03.anjia.com  cdh03\nEOF\necho \"HOSTNAME=cdh02.anjia.com\" >> /etc/sysconfig/network\n\n# cdh03.anjia.com 192.168.20.28\nsudo hostnamectl set-hostname cdh03.anjia.com\ncat << EOF | sudo tee -a /etc/hosts\n192.168.20.24  cdh01.anjia.com  cdh01\n192.168.20.25  cdh02.anjia.com  cdh02\n192.168.20.28  cdh03.anjia.com  cdh03\nEOF\necho \"HOSTNAME=cdh03.anjia.com\" >> /etc/sysconfig/network\n```\n\n参考 [Configure Network Names](https://www.cloudera.com/documentation/enterprise/6/6.2/topics/configure_network_names.html)\n\n<a name=\"4udpU\"></a>\n#### 禁用防火墙\n每台都执行\n```bash\nsudo iptables-save > ~/firewall.rules\nsudo systemctl disable firewalld\nsudo systemctl stop firewalld\n```\n参考 [Disabling the Firewall](https://www.cloudera.com/documentation/enterprise/6/6.2/topics/install_cdh_disable_iptables.html)\n\n<a name=\"DnQF2\"></a>\n#### 开启ntp同步时钟\n每台都执行\n```bash\nyum install -y ntp\nsed -i \"/^server/ d\" /etc/ntp.conf\ncat << EOF | sudo tee -a /etc/ntp.conf\nserver ntp1.aliyun.com\nserver ntp2.aliyun.com\nserver ntp3.aliyun.com\nserver ntp4.aliyun.com\nEOF\nsudo systemctl start ntpd\nsudo systemctl enable ntpd\nntpdate -u ntp1.aliyun.com\nhwclock --systohc\n```\n\n<a name=\"dLErf\"></a>\n#### 修改repo\n每台都执行\n```bash\nsudo wget https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/cloudera-manager.repo -P /etc/yum.repos.d/\nsed -i \"s/https\\:\\/\\/archive.cloudera.com/http\\:\\/\\/192.168.20.24\\/cloudera-repos/g\"  /etc/yum.repos.d/cloudera-manager.repo\nsudo rpm --import https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPM-GPG-KEY-cloudera\n```\n<a name=\"OpEts\"></a>\n#### 优化虚拟内存需求率\n每台都执行\n```bash\necho 'vm.swappiness = 10' >> /etc/sysctl.conf\nsysctl -p\n```\n<a name=\"RRcLH\"></a>\n#### 解决透明大页面问题\n\n```bash\necho never > /sys/kernel/mm/transparent_hugepage/defrag\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n<a name=\"GBoH7\"></a>\n#### 安装jdk\n每台都执行\n\n```bash\nsudo yum install -y oracle-j2sdk1.8\n\ncat << EOF | sudo tee -a /etc/profile\n#设置java环境\nexport JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JAVA_HOME/jre/lib:\\$CLASSPATH\nexport PATH=\\$JAVA_HOME/bin:\\$JAVA_HOME/jre/bin:\\$PATH\nEOF\nsource /etc/profile\n```\n\n<a name=\"rmtsK\"></a>\n### 安装CM和CDH\n\n<a name=\"tjzk3\"></a>\n#### 安装CM\n在cdh01.anjia.com执行\n```bash\nsudo yum install -y cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server\n```\n启用Auto-TLS,在CM6.2.0人工不启用auto-tls会导致登陆不成功\n```bash\nsudo JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera /opt/cloudera/cm-agent/bin/certmanager --location /opt/cloudera/CMCA setup --configure-services\n```\n\n<a name=\"F5mJx\"></a>\n#### 安装数据库\n本文选择MariaDB<br />在cdh01.anjia.com执行\n```bash\nsudo yum install -y mariadb-server\nsudo systemctl stop mariadb\ncat << EOF | sudo tee -a /etc/my.cnf.d/cdh-db.cnf\n[mysqld]\ntransaction-isolation = READ-COMMITTED\n# Disabling symbolic-links is recommended to prevent assorted security risks;\n# to do so, uncomment this line:\nsymbolic-links = 0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\nkey_buffer = 16M\nkey_buffer_size = 32M\nmax_allowed_packet = 32M\nthread_stack = 256K\nthread_cache_size = 64\nquery_cache_limit = 8M\nquery_cache_size = 64M\nquery_cache_type = 1\n\nmax_connections = 550\n#expire_logs_days = 10\n#max_binlog_size = 100M\n\n#log_bin should be on a disk with enough free space.\n#Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your\n#system and chown the specified folder to the mysql user.\nlog_bin=/var/lib/mysql/mysql_binary_log\n\n#In later versions of MariaDB, if you enable the binary log and do not set\n#a server_id, MariaDB will not start. The server_id must be unique within\n#the replicating group.\nserver_id=1\n\nbinlog_format = mixed\n\nread_buffer_size = 2M\nread_rnd_buffer_size = 16M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\n\n# InnoDB settings\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit  = 2\ninnodb_log_buffer_size = 64M\ninnodb_buffer_pool_size = 4G\ninnodb_thread_concurrency = 8\ninnodb_flush_method = O_DIRECT\ninnodb_log_file_size = 512M\nEOF\n\n\nsudo systemctl enable mariadb\nsudo systemctl start mariadb\n\nsudo /usr/bin/mysql_secure_installation\n\n[...]\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n[...]\nSet root password? [Y/n] Y\nNew password:\nRe-enter new password:\n[...]\nRemove anonymous users? [Y/n] Y\n[...]\nDisallow root login remotely? [Y/n] N\n[...]\nRemove test database and access to it [Y/n] Y\n[...]\nReload privilege tables now? [Y/n] Y\n[...]\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n<a name=\"so3ND\"></a>\n#### 安装数据库驱动\n每台都执行\n```bash\nwget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz\ntar zxvf mysql-connector-java-5.1.46.tar.gz\nsudo mkdir -p /usr/share/java/\ncd mysql-connector-java-5.1.46\nsudo cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar\n```\n\n<a name=\"VXP2c\"></a>\n#### 创建数据库\n在cdh01.anjia.com执行\n\n```bash\nmysql -u root -p<password>\n\nCREATE DATABASE <database> DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON <database>.* TO '<user>'@'%' IDENTIFIED BY '<password>';\n```\n这一步scm是必须的，其余的数据库可以等后边真实使用时再创建。\n\n| Service | Database | User |\n| :---: | :---: | :---: |\n| Cloudera Manager Server | scm | scm |\n| Activity Monitor | amon | amon |\n| Reports Manager | rman | rman |\n| Hue | hue | hue |\n| Hive Metastore Server | metastore | hive |\n| Sentry Server | sentry | sentry |\n| Cloudera Navigator Audit Server | nav | nav |\n| Cloudera Navigator Metadata Server | navms | navms |\n| Oozie | oozie | oozie |\n\n<a name=\"TujCM\"></a>\n#### 配置CM数据库\n\n```bash\nsudo /opt/cloudera/cm/schema/scm_prepare_database.sh [options] <databaseType> <databaseName> <databaseUser> <password>\n# 输出\nJAVA_HOME=/usr/java/jdk1.8.0_181-cloudera\nVerifying that we can write to /etc/cloudera-scm-server\nCreating SCM configuration file in /etc/cloudera-scm-server\nExecuting:  /usr/java/jdk1.8.0_181-cloudera/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/opt/cloudera/cm/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.\n[                          main] DbCommandExecutor              INFO  Successfully connected to database.\nAll done, your SCM database is configured correctly!\n```\n详细参数，参考 [Syntax for scm_prepare_database.sh](https://www.cloudera.com/documentation/enterprise/latest/topics/prepare_cm_database.html#scm_prepare_syntax)\n\n<a name=\"ZjPAa\"></a>\n#### 安装CDH和其他软件\n\n```bash\nsudo systemctl start cloudera-scm-server\n# 启动后，监听server日志，大约1-3分钟左右\nsudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log\n# 直到日志出现，如下内容，即启动成功。\n2019-05-08 13:12:26,523 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.\n```\n参考资料<br />\n\n- [CDH 6.2.x Packaging](https://www.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_62_packaging.html)\n\n","slug":"cdh-6-2-x","published":1,"updated":"2019-08-16T06:11:15.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojig00cv24dof4qze8e6","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第17篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍hadoop发行版CDH最新版(6.2)的安装。</p>\n<a id=\"more\"></a>\n<p><a name=\"x5Osz\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><a name=\"hybLO\"></a></p>\n<h3 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h3><table>\n<thead>\n<tr>\n<th>IP</th>\n<th>HostName</th>\n<th>OS</th>\n<th>Cores</th>\n<th>Mem</th>\n<th>Disk</th>\n<th>Rules</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.20.24</td>\n<td>cdh01.anjia.com</td>\n<td>centos7.6 mini</td>\n<td>4</td>\n<td>16G</td>\n<td>100G</td>\n<td>CM6,CDH agent</td>\n</tr>\n<tr>\n<td>192.168.20.25</td>\n<td>cdh02.anjia.com</td>\n<td>centos7.6 mini</td>\n<td>4</td>\n<td>16G</td>\n<td>100G</td>\n<td>CDH agent</td>\n</tr>\n<tr>\n<td>192.168.20.28</td>\n<td>cdh03.anjia.com</td>\n<td>centos7.6 mini</td>\n<td>4</td>\n<td>16G</td>\n<td>100G</td>\n<td>CDH agent</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"YUZct\"></a></p>\n<h3 id=\"软件包\"><a href=\"#软件包\" class=\"headerlink\" title=\"软件包\"></a>软件包</h3><p>本地搭建镜像源，加速构建。参考 <a href=\"https://juejin.im/post/5cc57a01f265da036c57929b\" target=\"_blank\" rel=\"noopener\">018-CDH6.2构建本地源加速CDH安装</a></p>\n<p><a name=\"eLCZv\"></a></p>\n<h3 id=\"安装前准备\"><a href=\"#安装前准备\" class=\"headerlink\" title=\"安装前准备\"></a>安装前准备</h3><p><a name=\"V4FS6\"></a></p>\n<h4 id=\"CM存储空间规划\"><a href=\"#CM存储空间规划\" class=\"headerlink\" title=\"CM存储空间规划\"></a>CM存储空间规划</h4><p>参考 <a href=\"https://www.cloudera.com/documentation/enterprise/6/6.2/topics/cm_ig_reqs_space.html\" target=\"_blank\" rel=\"noopener\">Storage Space Planning for Cloudera Manager</a><br><a name=\"mC4zx\"></a></p>\n<h4 id=\"配置网络名\"><a href=\"#配置网络名\" class=\"headerlink\" title=\"配置网络名\"></a>配置网络名</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cdh01.anjia.com 192.168.20.24</span></span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname cdh01.anjia.com</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/hosts</span><br><span class=\"line\">192.168.20.24  cdh01.anjia.com  cdh01</span><br><span class=\"line\">192.168.20.25  cdh02.anjia.com  cdh02</span><br><span class=\"line\">192.168.20.28  cdh03.anjia.com  cdh03</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HOSTNAME=cdh01.anjia.com\"</span> &gt;&gt; /etc/sysconfig/network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cdh02.anjia.com 192.168.20.25</span></span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname cdh02.anjia.com</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/hosts</span><br><span class=\"line\">192.168.20.24  cdh01.anjia.com  cdh01</span><br><span class=\"line\">192.168.20.25  cdh02.anjia.com  cdh02</span><br><span class=\"line\">192.168.20.28  cdh03.anjia.com  cdh03</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HOSTNAME=cdh02.anjia.com\"</span> &gt;&gt; /etc/sysconfig/network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cdh03.anjia.com 192.168.20.28</span></span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname cdh03.anjia.com</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/hosts</span><br><span class=\"line\">192.168.20.24  cdh01.anjia.com  cdh01</span><br><span class=\"line\">192.168.20.25  cdh02.anjia.com  cdh02</span><br><span class=\"line\">192.168.20.28  cdh03.anjia.com  cdh03</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HOSTNAME=cdh03.anjia.com\"</span> &gt;&gt; /etc/sysconfig/network</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"https://www.cloudera.com/documentation/enterprise/6/6.2/topics/configure_network_names.html\" target=\"_blank\" rel=\"noopener\">Configure Network Names</a></p>\n<p><a name=\"4udpU\"></a></p>\n<h4 id=\"禁用防火墙\"><a href=\"#禁用防火墙\" class=\"headerlink\" title=\"禁用防火墙\"></a>禁用防火墙</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo iptables-save &gt; ~/firewall.rules</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://www.cloudera.com/documentation/enterprise/6/6.2/topics/install_cdh_disable_iptables.html\" target=\"_blank\" rel=\"noopener\">Disabling the Firewall</a></p>\n<p><a name=\"DnQF2\"></a></p>\n<h4 id=\"开启ntp同步时钟\"><a href=\"#开启ntp同步时钟\" class=\"headerlink\" title=\"开启ntp同步时钟\"></a>开启ntp同步时钟</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y ntp</span><br><span class=\"line\">sed -i <span class=\"string\">\"/^server/ d\"</span> /etc/ntp.conf</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/ntp.conf</span><br><span class=\"line\">server ntp1.aliyun.com</span><br><span class=\"line\">server ntp2.aliyun.com</span><br><span class=\"line\">server ntp3.aliyun.com</span><br><span class=\"line\">server ntp4.aliyun.com</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl start ntpd</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> ntpd</span><br><span class=\"line\">ntpdate -u ntp1.aliyun.com</span><br><span class=\"line\">hwclock --systohc</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"dLErf\"></a></p>\n<h4 id=\"修改repo\"><a href=\"#修改repo\" class=\"headerlink\" title=\"修改repo\"></a>修改repo</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo wget https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/cloudera-manager.repo -P /etc/yum.repos.d/</span><br><span class=\"line\">sed -i <span class=\"string\">\"s/https\\:\\/\\/archive.cloudera.com/http\\:\\/\\/192.168.20.24\\/cloudera-repos/g\"</span>  /etc/yum.repos.d/cloudera-manager.repo</span><br><span class=\"line\">sudo rpm --import https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPM-GPG-KEY-cloudera</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"OpEts\"></a></p>\n<h4 id=\"优化虚拟内存需求率\"><a href=\"#优化虚拟内存需求率\" class=\"headerlink\" title=\"优化虚拟内存需求率\"></a>优化虚拟内存需求率</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'vm.swappiness = 10'</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"RRcLH\"></a></p>\n<h4 id=\"解决透明大页面问题\"><a href=\"#解决透明大页面问题\" class=\"headerlink\" title=\"解决透明大页面问题\"></a>解决透明大页面问题</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\"><span class=\"built_in\">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>\n<p><a name=\"GBoH7\"></a></p>\n<h4 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h4><p>每台都执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y oracle-j2sdk1.8</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:\\<span class=\"variable\">$JAVA_HOME</span>/lib:\\<span class=\"variable\">$JAVA_HOME</span>/jre/lib:\\<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$JAVA_HOME</span>/bin:\\<span class=\"variable\">$JAVA_HOME</span>/jre/bin:\\<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p><a name=\"rmtsK\"></a></p>\n<h3 id=\"安装CM和CDH\"><a href=\"#安装CM和CDH\" class=\"headerlink\" title=\"安装CM和CDH\"></a>安装CM和CDH</h3><p><a name=\"tjzk3\"></a></p>\n<h4 id=\"安装CM\"><a href=\"#安装CM\" class=\"headerlink\" title=\"安装CM\"></a>安装CM</h4><p>在cdh01.anjia.com执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server</span><br></pre></td></tr></table></figure></p>\n<p>启用Auto-TLS,在CM6.2.0人工不启用auto-tls会导致登陆不成功<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera /opt/cloudera/cm-agent/bin/certmanager --location /opt/cloudera/CMCA setup --configure-services</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"F5mJx\"></a></p>\n<h4 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h4><p>本文选择MariaDB<br>在cdh01.anjia.com执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y mariadb-server</span><br><span class=\"line\">sudo systemctl stop mariadb</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/my.cnf.d/cdh-db.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">transaction-isolation = READ-COMMITTED</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks;</span></span><br><span class=\"line\"><span class=\"comment\"># to do so, uncomment this line:</span></span><br><span class=\"line\">symbolic-links = 0</span><br><span class=\"line\"><span class=\"comment\"># Settings user and group are ignored when systemd is used.</span></span><br><span class=\"line\"><span class=\"comment\"># If you need to run mysqld under a different user or group,</span></span><br><span class=\"line\"><span class=\"comment\"># customize your systemd unit file for mariadb according to the</span></span><br><span class=\"line\"><span class=\"comment\"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class=\"line\"></span><br><span class=\"line\">key_buffer = 16M</span><br><span class=\"line\">key_buffer_size = 32M</span><br><span class=\"line\">max_allowed_packet = 32M</span><br><span class=\"line\">thread_stack = 256K</span><br><span class=\"line\">thread_cache_size = 64</span><br><span class=\"line\">query_cache_limit = 8M</span><br><span class=\"line\">query_cache_size = 64M</span><br><span class=\"line\">query_cache_type = 1</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections = 550</span><br><span class=\"line\"><span class=\"comment\">#expire_logs_days = 10</span></span><br><span class=\"line\"><span class=\"comment\">#max_binlog_size = 100M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#log_bin should be on a disk with enough free space.</span></span><br><span class=\"line\"><span class=\"comment\">#Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your</span></span><br><span class=\"line\"><span class=\"comment\">#system and chown the specified folder to the mysql user.</span></span><br><span class=\"line\">log_bin=/var/lib/mysql/mysql_binary_log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In later versions of MariaDB, if you enable the binary log and do not set</span></span><br><span class=\"line\"><span class=\"comment\">#a server_id, MariaDB will not start. The server_id must be unique within</span></span><br><span class=\"line\"><span class=\"comment\">#the replicating group.</span></span><br><span class=\"line\">server_id=1</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\"></span><br><span class=\"line\">read_buffer_size = 2M</span><br><span class=\"line\">read_rnd_buffer_size = 16M</span><br><span class=\"line\">sort_buffer_size = 8M</span><br><span class=\"line\">join_buffer_size = 8M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># InnoDB settings</span></span><br><span class=\"line\">innodb_file_per_table = 1</span><br><span class=\"line\">innodb_flush_log_at_trx_commit  = 2</span><br><span class=\"line\">innodb_log_buffer_size = 64M</span><br><span class=\"line\">innodb_buffer_pool_size = 4G</span><br><span class=\"line\">innodb_thread_concurrency = 8</span><br><span class=\"line\">innodb_flush_method = O_DIRECT</span><br><span class=\"line\">innodb_log_file_size = 512M</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> mariadb</span><br><span class=\"line\">sudo systemctl start mariadb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo /usr/bin/mysql_secure_installation</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\">Enter current password <span class=\"keyword\">for</span> root (enter <span class=\"keyword\">for</span> none):</span><br><span class=\"line\">OK, successfully used password, moving on...</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Set root password? [Y/n] Y</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Re-enter new password:</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove anonymous users? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Disallow root login remotely? [Y/n] N</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove <span class=\"built_in\">test</span> database and access to it [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Reload privilege tables now? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">All <span class=\"keyword\">done</span>!  If you<span class=\"string\">'ve completed all of the above steps, your MariaDB</span></span><br><span class=\"line\"><span class=\"string\">installation should now be secure.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Thanks for using MariaDB!</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"so3ND\"></a></p>\n<h4 id=\"安装数据库驱动\"><a href=\"#安装数据库驱动\" class=\"headerlink\" title=\"安装数据库驱动\"></a>安装数据库驱动</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz</span><br><span class=\"line\">tar zxvf mysql-connector-java-5.1.46.tar.gz</span><br><span class=\"line\">sudo mkdir -p /usr/share/java/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> mysql-connector-java-5.1.46</span><br><span class=\"line\">sudo cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"VXP2c\"></a></p>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><p>在cdh01.anjia.com执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p&lt;password&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DATABASE &lt;database&gt; DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON &lt;database&gt;.* TO <span class=\"string\">'&lt;user&gt;'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'&lt;password&gt;'</span>;</span><br></pre></td></tr></table></figure>\n<p>这一步scm是必须的，其余的数据库可以等后边真实使用时再创建。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Service</th>\n<th style=\"text-align:center\">Database</th>\n<th style=\"text-align:center\">User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Cloudera Manager Server</td>\n<td style=\"text-align:center\">scm</td>\n<td style=\"text-align:center\">scm</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Activity Monitor</td>\n<td style=\"text-align:center\">amon</td>\n<td style=\"text-align:center\">amon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reports Manager</td>\n<td style=\"text-align:center\">rman</td>\n<td style=\"text-align:center\">rman</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hue</td>\n<td style=\"text-align:center\">hue</td>\n<td style=\"text-align:center\">hue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hive Metastore Server</td>\n<td style=\"text-align:center\">metastore</td>\n<td style=\"text-align:center\">hive</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Sentry Server</td>\n<td style=\"text-align:center\">sentry</td>\n<td style=\"text-align:center\">sentry</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Cloudera Navigator Audit Server</td>\n<td style=\"text-align:center\">nav</td>\n<td style=\"text-align:center\">nav</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Cloudera Navigator Metadata Server</td>\n<td style=\"text-align:center\">navms</td>\n<td style=\"text-align:center\">navms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Oozie</td>\n<td style=\"text-align:center\">oozie</td>\n<td style=\"text-align:center\">oozie</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"TujCM\"></a></p>\n<h4 id=\"配置CM数据库\"><a href=\"#配置CM数据库\" class=\"headerlink\" title=\"配置CM数据库\"></a>配置CM数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /opt/cloudera/cm/schema/scm_prepare_database.sh [options] &lt;databaseType&gt; &lt;databaseName&gt; &lt;databaseUser&gt; &lt;password&gt;</span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera</span><br><span class=\"line\">Verifying that we can write to /etc/cloudera-scm-server</span><br><span class=\"line\">Creating SCM configuration file <span class=\"keyword\">in</span> /etc/cloudera-scm-server</span><br><span class=\"line\">Executing:  /usr/java/jdk1.8.0_181-cloudera/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/opt/cloudera/cm/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.</span><br><span class=\"line\">[                          main] DbCommandExecutor              INFO  Successfully connected to database.</span><br><span class=\"line\">All <span class=\"keyword\">done</span>, your SCM database is configured correctly!</span><br></pre></td></tr></table></figure>\n<p>详细参数，参考 <a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/prepare_cm_database.html#scm_prepare_syntax\" target=\"_blank\" rel=\"noopener\">Syntax for scm_prepare_database.sh</a></p>\n<p><a name=\"ZjPAa\"></a></p>\n<h4 id=\"安装CDH和其他软件\"><a href=\"#安装CDH和其他软件\" class=\"headerlink\" title=\"安装CDH和其他软件\"></a>安装CDH和其他软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl start cloudera-scm-server</span><br><span class=\"line\"><span class=\"comment\"># 启动后，监听server日志，大约1-3分钟左右</span></span><br><span class=\"line\">sudo tail -f /var/<span class=\"built_in\">log</span>/cloudera-scm-server/cloudera-scm-server.log</span><br><span class=\"line\"><span class=\"comment\"># 直到日志出现，如下内容，即启动成功。</span></span><br><span class=\"line\">2019-05-08 13:12:26,523 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.</span><br></pre></td></tr></table></figure>\n<p>参考资料<br></p>\n<ul>\n<li><a href=\"https://www.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_62_packaging.html\" target=\"_blank\" rel=\"noopener\">CDH 6.2.x Packaging</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第17篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍hadoop发行版CDH最新版(6.2)的安装。</p>","more":"<p><a name=\"x5Osz\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><a name=\"hybLO\"></a></p>\n<h3 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h3><table>\n<thead>\n<tr>\n<th>IP</th>\n<th>HostName</th>\n<th>OS</th>\n<th>Cores</th>\n<th>Mem</th>\n<th>Disk</th>\n<th>Rules</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.20.24</td>\n<td>cdh01.anjia.com</td>\n<td>centos7.6 mini</td>\n<td>4</td>\n<td>16G</td>\n<td>100G</td>\n<td>CM6,CDH agent</td>\n</tr>\n<tr>\n<td>192.168.20.25</td>\n<td>cdh02.anjia.com</td>\n<td>centos7.6 mini</td>\n<td>4</td>\n<td>16G</td>\n<td>100G</td>\n<td>CDH agent</td>\n</tr>\n<tr>\n<td>192.168.20.28</td>\n<td>cdh03.anjia.com</td>\n<td>centos7.6 mini</td>\n<td>4</td>\n<td>16G</td>\n<td>100G</td>\n<td>CDH agent</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"YUZct\"></a></p>\n<h3 id=\"软件包\"><a href=\"#软件包\" class=\"headerlink\" title=\"软件包\"></a>软件包</h3><p>本地搭建镜像源，加速构建。参考 <a href=\"https://juejin.im/post/5cc57a01f265da036c57929b\" target=\"_blank\" rel=\"noopener\">018-CDH6.2构建本地源加速CDH安装</a></p>\n<p><a name=\"eLCZv\"></a></p>\n<h3 id=\"安装前准备\"><a href=\"#安装前准备\" class=\"headerlink\" title=\"安装前准备\"></a>安装前准备</h3><p><a name=\"V4FS6\"></a></p>\n<h4 id=\"CM存储空间规划\"><a href=\"#CM存储空间规划\" class=\"headerlink\" title=\"CM存储空间规划\"></a>CM存储空间规划</h4><p>参考 <a href=\"https://www.cloudera.com/documentation/enterprise/6/6.2/topics/cm_ig_reqs_space.html\" target=\"_blank\" rel=\"noopener\">Storage Space Planning for Cloudera Manager</a><br><a name=\"mC4zx\"></a></p>\n<h4 id=\"配置网络名\"><a href=\"#配置网络名\" class=\"headerlink\" title=\"配置网络名\"></a>配置网络名</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cdh01.anjia.com 192.168.20.24</span></span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname cdh01.anjia.com</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/hosts</span><br><span class=\"line\">192.168.20.24  cdh01.anjia.com  cdh01</span><br><span class=\"line\">192.168.20.25  cdh02.anjia.com  cdh02</span><br><span class=\"line\">192.168.20.28  cdh03.anjia.com  cdh03</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HOSTNAME=cdh01.anjia.com\"</span> &gt;&gt; /etc/sysconfig/network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cdh02.anjia.com 192.168.20.25</span></span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname cdh02.anjia.com</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/hosts</span><br><span class=\"line\">192.168.20.24  cdh01.anjia.com  cdh01</span><br><span class=\"line\">192.168.20.25  cdh02.anjia.com  cdh02</span><br><span class=\"line\">192.168.20.28  cdh03.anjia.com  cdh03</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HOSTNAME=cdh02.anjia.com\"</span> &gt;&gt; /etc/sysconfig/network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cdh03.anjia.com 192.168.20.28</span></span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname cdh03.anjia.com</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/hosts</span><br><span class=\"line\">192.168.20.24  cdh01.anjia.com  cdh01</span><br><span class=\"line\">192.168.20.25  cdh02.anjia.com  cdh02</span><br><span class=\"line\">192.168.20.28  cdh03.anjia.com  cdh03</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HOSTNAME=cdh03.anjia.com\"</span> &gt;&gt; /etc/sysconfig/network</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"https://www.cloudera.com/documentation/enterprise/6/6.2/topics/configure_network_names.html\" target=\"_blank\" rel=\"noopener\">Configure Network Names</a></p>\n<p><a name=\"4udpU\"></a></p>\n<h4 id=\"禁用防火墙\"><a href=\"#禁用防火墙\" class=\"headerlink\" title=\"禁用防火墙\"></a>禁用防火墙</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo iptables-save &gt; ~/firewall.rules</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://www.cloudera.com/documentation/enterprise/6/6.2/topics/install_cdh_disable_iptables.html\" target=\"_blank\" rel=\"noopener\">Disabling the Firewall</a></p>\n<p><a name=\"DnQF2\"></a></p>\n<h4 id=\"开启ntp同步时钟\"><a href=\"#开启ntp同步时钟\" class=\"headerlink\" title=\"开启ntp同步时钟\"></a>开启ntp同步时钟</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y ntp</span><br><span class=\"line\">sed -i <span class=\"string\">\"/^server/ d\"</span> /etc/ntp.conf</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/ntp.conf</span><br><span class=\"line\">server ntp1.aliyun.com</span><br><span class=\"line\">server ntp2.aliyun.com</span><br><span class=\"line\">server ntp3.aliyun.com</span><br><span class=\"line\">server ntp4.aliyun.com</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl start ntpd</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> ntpd</span><br><span class=\"line\">ntpdate -u ntp1.aliyun.com</span><br><span class=\"line\">hwclock --systohc</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"dLErf\"></a></p>\n<h4 id=\"修改repo\"><a href=\"#修改repo\" class=\"headerlink\" title=\"修改repo\"></a>修改repo</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo wget https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/cloudera-manager.repo -P /etc/yum.repos.d/</span><br><span class=\"line\">sed -i <span class=\"string\">\"s/https\\:\\/\\/archive.cloudera.com/http\\:\\/\\/192.168.20.24\\/cloudera-repos/g\"</span>  /etc/yum.repos.d/cloudera-manager.repo</span><br><span class=\"line\">sudo rpm --import https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPM-GPG-KEY-cloudera</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"OpEts\"></a></p>\n<h4 id=\"优化虚拟内存需求率\"><a href=\"#优化虚拟内存需求率\" class=\"headerlink\" title=\"优化虚拟内存需求率\"></a>优化虚拟内存需求率</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'vm.swappiness = 10'</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"RRcLH\"></a></p>\n<h4 id=\"解决透明大页面问题\"><a href=\"#解决透明大页面问题\" class=\"headerlink\" title=\"解决透明大页面问题\"></a>解决透明大页面问题</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\"><span class=\"built_in\">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>\n<p><a name=\"GBoH7\"></a></p>\n<h4 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h4><p>每台都执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y oracle-j2sdk1.8</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:\\<span class=\"variable\">$JAVA_HOME</span>/lib:\\<span class=\"variable\">$JAVA_HOME</span>/jre/lib:\\<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$JAVA_HOME</span>/bin:\\<span class=\"variable\">$JAVA_HOME</span>/jre/bin:\\<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p><a name=\"rmtsK\"></a></p>\n<h3 id=\"安装CM和CDH\"><a href=\"#安装CM和CDH\" class=\"headerlink\" title=\"安装CM和CDH\"></a>安装CM和CDH</h3><p><a name=\"tjzk3\"></a></p>\n<h4 id=\"安装CM\"><a href=\"#安装CM\" class=\"headerlink\" title=\"安装CM\"></a>安装CM</h4><p>在cdh01.anjia.com执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server</span><br></pre></td></tr></table></figure></p>\n<p>启用Auto-TLS,在CM6.2.0人工不启用auto-tls会导致登陆不成功<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera /opt/cloudera/cm-agent/bin/certmanager --location /opt/cloudera/CMCA setup --configure-services</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"F5mJx\"></a></p>\n<h4 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h4><p>本文选择MariaDB<br>在cdh01.anjia.com执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y mariadb-server</span><br><span class=\"line\">sudo systemctl stop mariadb</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/my.cnf.d/cdh-db.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">transaction-isolation = READ-COMMITTED</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks;</span></span><br><span class=\"line\"><span class=\"comment\"># to do so, uncomment this line:</span></span><br><span class=\"line\">symbolic-links = 0</span><br><span class=\"line\"><span class=\"comment\"># Settings user and group are ignored when systemd is used.</span></span><br><span class=\"line\"><span class=\"comment\"># If you need to run mysqld under a different user or group,</span></span><br><span class=\"line\"><span class=\"comment\"># customize your systemd unit file for mariadb according to the</span></span><br><span class=\"line\"><span class=\"comment\"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class=\"line\"></span><br><span class=\"line\">key_buffer = 16M</span><br><span class=\"line\">key_buffer_size = 32M</span><br><span class=\"line\">max_allowed_packet = 32M</span><br><span class=\"line\">thread_stack = 256K</span><br><span class=\"line\">thread_cache_size = 64</span><br><span class=\"line\">query_cache_limit = 8M</span><br><span class=\"line\">query_cache_size = 64M</span><br><span class=\"line\">query_cache_type = 1</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections = 550</span><br><span class=\"line\"><span class=\"comment\">#expire_logs_days = 10</span></span><br><span class=\"line\"><span class=\"comment\">#max_binlog_size = 100M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#log_bin should be on a disk with enough free space.</span></span><br><span class=\"line\"><span class=\"comment\">#Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your</span></span><br><span class=\"line\"><span class=\"comment\">#system and chown the specified folder to the mysql user.</span></span><br><span class=\"line\">log_bin=/var/lib/mysql/mysql_binary_log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In later versions of MariaDB, if you enable the binary log and do not set</span></span><br><span class=\"line\"><span class=\"comment\">#a server_id, MariaDB will not start. The server_id must be unique within</span></span><br><span class=\"line\"><span class=\"comment\">#the replicating group.</span></span><br><span class=\"line\">server_id=1</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\"></span><br><span class=\"line\">read_buffer_size = 2M</span><br><span class=\"line\">read_rnd_buffer_size = 16M</span><br><span class=\"line\">sort_buffer_size = 8M</span><br><span class=\"line\">join_buffer_size = 8M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># InnoDB settings</span></span><br><span class=\"line\">innodb_file_per_table = 1</span><br><span class=\"line\">innodb_flush_log_at_trx_commit  = 2</span><br><span class=\"line\">innodb_log_buffer_size = 64M</span><br><span class=\"line\">innodb_buffer_pool_size = 4G</span><br><span class=\"line\">innodb_thread_concurrency = 8</span><br><span class=\"line\">innodb_flush_method = O_DIRECT</span><br><span class=\"line\">innodb_log_file_size = 512M</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> mariadb</span><br><span class=\"line\">sudo systemctl start mariadb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo /usr/bin/mysql_secure_installation</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\">Enter current password <span class=\"keyword\">for</span> root (enter <span class=\"keyword\">for</span> none):</span><br><span class=\"line\">OK, successfully used password, moving on...</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Set root password? [Y/n] Y</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Re-enter new password:</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove anonymous users? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Disallow root login remotely? [Y/n] N</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove <span class=\"built_in\">test</span> database and access to it [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Reload privilege tables now? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">All <span class=\"keyword\">done</span>!  If you<span class=\"string\">'ve completed all of the above steps, your MariaDB</span></span><br><span class=\"line\"><span class=\"string\">installation should now be secure.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Thanks for using MariaDB!</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"so3ND\"></a></p>\n<h4 id=\"安装数据库驱动\"><a href=\"#安装数据库驱动\" class=\"headerlink\" title=\"安装数据库驱动\"></a>安装数据库驱动</h4><p>每台都执行<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz</span><br><span class=\"line\">tar zxvf mysql-connector-java-5.1.46.tar.gz</span><br><span class=\"line\">sudo mkdir -p /usr/share/java/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> mysql-connector-java-5.1.46</span><br><span class=\"line\">sudo cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"VXP2c\"></a></p>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><p>在cdh01.anjia.com执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p&lt;password&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DATABASE &lt;database&gt; DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON &lt;database&gt;.* TO <span class=\"string\">'&lt;user&gt;'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'&lt;password&gt;'</span>;</span><br></pre></td></tr></table></figure>\n<p>这一步scm是必须的，其余的数据库可以等后边真实使用时再创建。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Service</th>\n<th style=\"text-align:center\">Database</th>\n<th style=\"text-align:center\">User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Cloudera Manager Server</td>\n<td style=\"text-align:center\">scm</td>\n<td style=\"text-align:center\">scm</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Activity Monitor</td>\n<td style=\"text-align:center\">amon</td>\n<td style=\"text-align:center\">amon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reports Manager</td>\n<td style=\"text-align:center\">rman</td>\n<td style=\"text-align:center\">rman</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hue</td>\n<td style=\"text-align:center\">hue</td>\n<td style=\"text-align:center\">hue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hive Metastore Server</td>\n<td style=\"text-align:center\">metastore</td>\n<td style=\"text-align:center\">hive</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Sentry Server</td>\n<td style=\"text-align:center\">sentry</td>\n<td style=\"text-align:center\">sentry</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Cloudera Navigator Audit Server</td>\n<td style=\"text-align:center\">nav</td>\n<td style=\"text-align:center\">nav</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Cloudera Navigator Metadata Server</td>\n<td style=\"text-align:center\">navms</td>\n<td style=\"text-align:center\">navms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Oozie</td>\n<td style=\"text-align:center\">oozie</td>\n<td style=\"text-align:center\">oozie</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"TujCM\"></a></p>\n<h4 id=\"配置CM数据库\"><a href=\"#配置CM数据库\" class=\"headerlink\" title=\"配置CM数据库\"></a>配置CM数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /opt/cloudera/cm/schema/scm_prepare_database.sh [options] &lt;databaseType&gt; &lt;databaseName&gt; &lt;databaseUser&gt; &lt;password&gt;</span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera</span><br><span class=\"line\">Verifying that we can write to /etc/cloudera-scm-server</span><br><span class=\"line\">Creating SCM configuration file <span class=\"keyword\">in</span> /etc/cloudera-scm-server</span><br><span class=\"line\">Executing:  /usr/java/jdk1.8.0_181-cloudera/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/opt/cloudera/cm/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.</span><br><span class=\"line\">[                          main] DbCommandExecutor              INFO  Successfully connected to database.</span><br><span class=\"line\">All <span class=\"keyword\">done</span>, your SCM database is configured correctly!</span><br></pre></td></tr></table></figure>\n<p>详细参数，参考 <a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/prepare_cm_database.html#scm_prepare_syntax\" target=\"_blank\" rel=\"noopener\">Syntax for scm_prepare_database.sh</a></p>\n<p><a name=\"ZjPAa\"></a></p>\n<h4 id=\"安装CDH和其他软件\"><a href=\"#安装CDH和其他软件\" class=\"headerlink\" title=\"安装CDH和其他软件\"></a>安装CDH和其他软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl start cloudera-scm-server</span><br><span class=\"line\"><span class=\"comment\"># 启动后，监听server日志，大约1-3分钟左右</span></span><br><span class=\"line\">sudo tail -f /var/<span class=\"built_in\">log</span>/cloudera-scm-server/cloudera-scm-server.log</span><br><span class=\"line\"><span class=\"comment\"># 直到日志出现，如下内容，即启动成功。</span></span><br><span class=\"line\">2019-05-08 13:12:26,523 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.</span><br></pre></td></tr></table></figure>\n<p>参考资料<br></p>\n<ul>\n<li><a href=\"https://www.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_62_packaging.html\" target=\"_blank\" rel=\"noopener\">CDH 6.2.x Packaging</a></li>\n</ul>"},{"title":"010-cloudboot批量安装rancheros","date":"2019-03-10T10:41:55.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第10篇，定个小目标999，每周最少2篇。\n\n\n本文主要讲解如何使用[cloudboot](http://www.idcos.com/opensource/cloudboot-open-source)简单批量安装[rancheros](https://rancher.com/rancher-os/)。\n\n\n<a name=\"61a3ec66\"></a>\n## 介绍\n\n\n<a name=\"cloudboot\"></a>\n### cloudboot\n\n[cloudboot](http://www.idcos.com/opensource/cloudboot-open-source)是 [云霁科技](http://www.idcos.com/) 科技开源的一款简单易用的装机系统，类似 [cobbler](http://cobbler.github.io) ,但是功能更强大，更易用。(可参考我之前写的 [007-Cobbler批量自动化部署Windows10和Server 2019](https://juejin.im/post/5c748b2af265da2d9262ed0f) 和 [006-Cobbler批量自动化部署CentOS/Ubuntu/Windows](https://juejin.im/post/5c748ae2f265da2d84108d71))\n\n<a name=\"rancheros\"></a>\n### rancheros\n\n[rancheros](https://rancher.com/rancher-os/) 是 [rancher lab](https://rancher.com) 开源的一款容器操作系统，类似[coreos](https://coreos.com/),RancherOS是RancherLab设计的小巧、专用的容器操作系统，可用安装到服务器本地硬盘中，也可以部署到公有云上，或者配合DockerMachine使用。与Ubuntu和CentOS不同，RancherOS使用cloud-config.yml配置文件来管理机器的配置信息，包括系统启动时的服务、网络相关的配置信息、存储配置、容器配置等等，都可以放到配置文件中进行管理。\n\n<a name=\"46679853\"></a>\n## 安装cloudboot\n\n参考 [cloudboot一键部署](http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html) 不多赘述\n\n<a name=\"334359aa\"></a>\n### 挂载rancheros镜像\n\n```bash\nwget -P /tmp/ http://releases.rancher.com/os/latest/rancheros.iso\nmkdir -p $PWD/cloudboot/deploy/iso/rancheros/1.5.1/\nmount -o loop /tmp/rancheros.iso /media\nrsync -a /media/ $PWD/cloudboot/deploy/iso/rancheros/1.5.1/\numount /media\n```\n\n<a name=\"483e5673\"></a>\n### 创建软连接\n\n```bash\ndocker exec -it cloudboot /bin/sh\nln -s /data/iso/rancheros /home/www/rancheros\n```\n\n<a name=\"ba8d1dca\"></a>\n### 注意：\n\n- cloudboot默认用户名密码是 admin/admin\n- 登陆后需要配置dhcp(【系统管理】-> 【系统设置】)\n- 需要配置网段(【网段管理】->【应用网段】)\n- 本文讲的是vmware，所以不需要配置OOB\n- 需要配置设备位置(【模板管理】->【位置管理】)\n- 如果cloudboot和rancheros都装在vmware虚拟机里，需要把vmware的网络设置中的dhcp去掉，否则会冲突\n\n<a name=\"375e9611\"></a>\n## pxe安装rancheros\n\n参考 [rancheros#docs#iPXE](https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/) 和 [cloudboot PXE模板定制规范](http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html)\n\n<a name=\"c51df3a1\"></a>\n### PXE模板管理\n\n从【模板管理】->【PXE模板管理】 新增rancheros-1.5.1\n\n```bash\nDEFAULT rancheros\nLABEL rancheros\nKERNEL http://osinstall.idcos.com/rancheros/1.5.1/boot/vmlinuz-4.14.85-rancher\nAPPEND initrd=http://osinstall.idcos.com/rancheros/1.5.1/boot/initrd-v1.5.1  rancher.cloud_init.datasources=[url:http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn={sn}] rancher.autologin=tty1 rancher.autologin=ttyS0 rancher.autologin=ttyS1 rancher.autologin=ttyS1 console=tty1 console=ttyS0 console=ttyS1 printk.devkmsg=on panic=10 \nIPAPPEND 2\n```\n\n<a name=\"b3df8665\"></a>\n### 系统模板管理\n\n从【模板管理】->【系统模板管理】 新增rancheros-1.5.1\n\n把docker  mirror换成实际的加速器，如果不需要，可以删除，[ssh_authorized_keys 换成真实的ssh key](https://rancher.com/docs/os/v1.x/en/installation/configuration/ssh-keys/)\n\n```yaml\n#cloud-config\nrancher:\n    console: alpine\n    docker:\n        registry_mirror: \"https://xxx.mirror.aliyuncs.com\"\nruncmd:\n    - sh -c 'curl http://osinstall.idcos.com/scripts/rancheros.sh | bash'\nssh_authorized_keys:\n    - ssh-rsa AAAA....ZZZZ user@user\n```\n\n<a name=\"95dfb265\"></a>\n### 自定义脚本\n\n在cloudboot宿主机上，运行 `docker exec -it cloudboot /bin/sh` ,然后运行 `vim /home/www/scripts/rancheros.sh`\n\n```bash\n#!/bin/bash\nprogress() {\n    curl -H \"Content-Type: application/json\" -X POST -d \"{\\\"Sn\\\":\\\"$_sn\\\",\\\"Title\\\":\\\"$1\\\",\\\"InstallProgress\\\":$2,\\\"InstallLog\\\":\\\"$3\\\"}\" http://osinstall.idcos.com/api/osinstall/v1/report/deviceInstallInfo\n}\n\n_sn=$(sed q /sys/class/net/eth0/address)\n\nprogress \"配置主机名和网络\" 0.7 \"6YWN572u5Li75py65ZCN5ZKM572R57uc\"\n\n# config network\ncurl -o /tmp/networkinfo \"http://osinstall.idcos.com/api/osinstall/v1/device/getNetworkBySn?sn=${_sn}&type=raw\"\nsource /tmp/networkinfo\n\ncat > /etc/network/interfaces <<EOF\nauto lo\niface lo inet loopback\nauto eth0\niface eth0 inet static\naddress $IPADDR\nnetmask $NETMASK\ngateway $GATEWAY\nEOF\n\necho \"$HOSTNAME\" > /etc/hostname\nsudo hostname \"$HOSTNAME\"\n\nprogress \"配置alpine镜像源\" 0.8 \"6YWN572uYWxwaW5l6ZWc5YOP5rqQ\"\nsed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n\nprogress \"安装完成\" 1 \"5a6J6KOF5a6M5oiQ\"\nsudo ros install -c http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn=$_sn\" -d /dev/sda -f\n```\n\n<a name=\"b67e6b7d\"></a>\n### 自动化安装rancheros\n\n从vmware创建 空盘 -> 其他Linux4.x或更高版本内核64位，2核2G虚拟机，然后上电<br />虚拟机会从PXE拉取[cloudboot的bootos](http://idcos.github.io/osinstall-doc/bootos/) 安装到内存中，并且往cloudboot上注册待录入的设备（待屏幕变蓝色）\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079937-7895b3bf-3100-47c6-9d89-d1069a5a420c.png#align=left&display=inline&height=400&originHeight=400&originWidth=720&size=0&status=done&width=720)<br />从 `http://${cloudboot host}/#/dashboard/device/scan/list` 会发现新设备，选中后，点击录入新设备<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079846-e0a498fc-7070-40b2-b67b-b4dc3c16b04d.png#align=left&display=inline&height=321&originHeight=321&originWidth=691&size=0&status=done&width=691)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079934-c5031ae9-b299-4b91-bcde-90d607704755.png#align=left&display=inline&height=222&originHeight=379&originWidth=1276&size=0&status=done&width=746)\n\nbootos会自动轮询是否有自动装机任务，所以静候即可。如果等不及，可以在录入成功后，手动重启虚拟机。<br />在【正在安装的设备】中，会自动出现要安装的设备\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079912-f3e907b7-188d-4b82-aeff-1e577a4aba40.png#align=left&display=inline&height=98&originHeight=236&originWidth=1801&size=0&status=done&width=746)\n\n点击【详情】会在滚动模式下试试看到安装进度\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079852-3baec0a2-0627-4fe9-8233-0459d3e5c20d.png#align=left&display=inline&height=157&originHeight=157&originWidth=440&size=0&status=done&width=440)\n\n在【设备列表】可以看到已安装成功的设备\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079889-990adf01-3db1-4cd2-9791-4fc4d6b36e57.png#align=left&display=inline&height=72&originHeight=176&originWidth=1826&size=0&status=done&width=746)\n\n<a name=\"138a6766\"></a>\n### 注意\n\n~~不知道为嘛，安装后需要重启一下虚拟机后，才能使用ssh进行连接。~~\n\n根据rancher labs 大神腩哥指点\n\n> booting from ISO 首次启动，整个系统都在内存中。\n> \n> 执行ros install后，安装bootloader和initrd/vmlinuz到磁盘。\n> \n> 再次启动后，就是完整的运行在硬盘上的操作系统。\n\n\n<a name=\"c9665e1f\"></a>\n## 脑洞\n\n其实是正规操作，可以在 cloud config 配置自定义服务，这样装机后，就可以直接启动服务，不需要ssh到ros上，手动执行命令，例如配置rancher client的添加主机的命令，这样就可以直接添加到已有集群。 更多参考 [Custom System Services](https://rancher.com/docs/os/v1.x/en/installation/system-services/custom-system-services/)\n\n```yaml\n#cloud-config\nrancher:\n  services:\n    nginxapp:\n      image: nginx\n      restart: always\n```\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [cloudboot一键部署](http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html)\n- [cloudboot PXE模板定制规范](http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html)\n- [rancheros#docs#iPXE](https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/)\n- [006-Cobbler批量自动化部署CentOS/Ubuntu/Windows](https://juejin.im/post/5c748ae2f265da2d84108d71)\n- [007-Cobbler批量自动化部署Windows10和Server 2019](https://juejin.im/post/5c748b2af265da2d9262ed0f)\n\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/cloudboot-ros.md","raw":"\n---\n\ntitle: 010-cloudboot批量安装rancheros\n\ndate: 2019-03-10 18:41:55 +0800\n\ntags: []\n\n---\n> 这是坚持技术写作计划（含翻译）的第10篇，定个小目标999，每周最少2篇。\n\n\n本文主要讲解如何使用[cloudboot](http://www.idcos.com/opensource/cloudboot-open-source)简单批量安装[rancheros](https://rancher.com/rancher-os/)。\n\n\n<a name=\"61a3ec66\"></a>\n## 介绍\n\n\n<a name=\"cloudboot\"></a>\n### cloudboot\n\n[cloudboot](http://www.idcos.com/opensource/cloudboot-open-source)是 [云霁科技](http://www.idcos.com/) 科技开源的一款简单易用的装机系统，类似 [cobbler](http://cobbler.github.io) ,但是功能更强大，更易用。(可参考我之前写的 [007-Cobbler批量自动化部署Windows10和Server 2019](https://juejin.im/post/5c748b2af265da2d9262ed0f) 和 [006-Cobbler批量自动化部署CentOS/Ubuntu/Windows](https://juejin.im/post/5c748ae2f265da2d84108d71))\n\n<a name=\"rancheros\"></a>\n### rancheros\n\n[rancheros](https://rancher.com/rancher-os/) 是 [rancher lab](https://rancher.com) 开源的一款容器操作系统，类似[coreos](https://coreos.com/),RancherOS是RancherLab设计的小巧、专用的容器操作系统，可用安装到服务器本地硬盘中，也可以部署到公有云上，或者配合DockerMachine使用。与Ubuntu和CentOS不同，RancherOS使用cloud-config.yml配置文件来管理机器的配置信息，包括系统启动时的服务、网络相关的配置信息、存储配置、容器配置等等，都可以放到配置文件中进行管理。\n\n<a name=\"46679853\"></a>\n## 安装cloudboot\n\n参考 [cloudboot一键部署](http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html) 不多赘述\n\n<a name=\"334359aa\"></a>\n### 挂载rancheros镜像\n\n```bash\nwget -P /tmp/ http://releases.rancher.com/os/latest/rancheros.iso\nmkdir -p $PWD/cloudboot/deploy/iso/rancheros/1.5.1/\nmount -o loop /tmp/rancheros.iso /media\nrsync -a /media/ $PWD/cloudboot/deploy/iso/rancheros/1.5.1/\numount /media\n```\n\n<a name=\"483e5673\"></a>\n### 创建软连接\n\n```bash\ndocker exec -it cloudboot /bin/sh\nln -s /data/iso/rancheros /home/www/rancheros\n```\n\n<a name=\"ba8d1dca\"></a>\n### 注意：\n\n- cloudboot默认用户名密码是 admin/admin\n- 登陆后需要配置dhcp(【系统管理】-> 【系统设置】)\n- 需要配置网段(【网段管理】->【应用网段】)\n- 本文讲的是vmware，所以不需要配置OOB\n- 需要配置设备位置(【模板管理】->【位置管理】)\n- 如果cloudboot和rancheros都装在vmware虚拟机里，需要把vmware的网络设置中的dhcp去掉，否则会冲突\n\n<a name=\"375e9611\"></a>\n## pxe安装rancheros\n\n参考 [rancheros#docs#iPXE](https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/) 和 [cloudboot PXE模板定制规范](http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html)\n\n<a name=\"c51df3a1\"></a>\n### PXE模板管理\n\n从【模板管理】->【PXE模板管理】 新增rancheros-1.5.1\n\n```bash\nDEFAULT rancheros\nLABEL rancheros\nKERNEL http://osinstall.idcos.com/rancheros/1.5.1/boot/vmlinuz-4.14.85-rancher\nAPPEND initrd=http://osinstall.idcos.com/rancheros/1.5.1/boot/initrd-v1.5.1  rancher.cloud_init.datasources=[url:http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn={sn}] rancher.autologin=tty1 rancher.autologin=ttyS0 rancher.autologin=ttyS1 rancher.autologin=ttyS1 console=tty1 console=ttyS0 console=ttyS1 printk.devkmsg=on panic=10 \nIPAPPEND 2\n```\n\n<a name=\"b3df8665\"></a>\n### 系统模板管理\n\n从【模板管理】->【系统模板管理】 新增rancheros-1.5.1\n\n把docker  mirror换成实际的加速器，如果不需要，可以删除，[ssh_authorized_keys 换成真实的ssh key](https://rancher.com/docs/os/v1.x/en/installation/configuration/ssh-keys/)\n\n```yaml\n#cloud-config\nrancher:\n    console: alpine\n    docker:\n        registry_mirror: \"https://xxx.mirror.aliyuncs.com\"\nruncmd:\n    - sh -c 'curl http://osinstall.idcos.com/scripts/rancheros.sh | bash'\nssh_authorized_keys:\n    - ssh-rsa AAAA....ZZZZ user@user\n```\n\n<a name=\"95dfb265\"></a>\n### 自定义脚本\n\n在cloudboot宿主机上，运行 `docker exec -it cloudboot /bin/sh` ,然后运行 `vim /home/www/scripts/rancheros.sh`\n\n```bash\n#!/bin/bash\nprogress() {\n    curl -H \"Content-Type: application/json\" -X POST -d \"{\\\"Sn\\\":\\\"$_sn\\\",\\\"Title\\\":\\\"$1\\\",\\\"InstallProgress\\\":$2,\\\"InstallLog\\\":\\\"$3\\\"}\" http://osinstall.idcos.com/api/osinstall/v1/report/deviceInstallInfo\n}\n\n_sn=$(sed q /sys/class/net/eth0/address)\n\nprogress \"配置主机名和网络\" 0.7 \"6YWN572u5Li75py65ZCN5ZKM572R57uc\"\n\n# config network\ncurl -o /tmp/networkinfo \"http://osinstall.idcos.com/api/osinstall/v1/device/getNetworkBySn?sn=${_sn}&type=raw\"\nsource /tmp/networkinfo\n\ncat > /etc/network/interfaces <<EOF\nauto lo\niface lo inet loopback\nauto eth0\niface eth0 inet static\naddress $IPADDR\nnetmask $NETMASK\ngateway $GATEWAY\nEOF\n\necho \"$HOSTNAME\" > /etc/hostname\nsudo hostname \"$HOSTNAME\"\n\nprogress \"配置alpine镜像源\" 0.8 \"6YWN572uYWxwaW5l6ZWc5YOP5rqQ\"\nsed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n\nprogress \"安装完成\" 1 \"5a6J6KOF5a6M5oiQ\"\nsudo ros install -c http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn=$_sn\" -d /dev/sda -f\n```\n\n<a name=\"b67e6b7d\"></a>\n### 自动化安装rancheros\n\n从vmware创建 空盘 -> 其他Linux4.x或更高版本内核64位，2核2G虚拟机，然后上电<br />虚拟机会从PXE拉取[cloudboot的bootos](http://idcos.github.io/osinstall-doc/bootos/) 安装到内存中，并且往cloudboot上注册待录入的设备（待屏幕变蓝色）\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079937-7895b3bf-3100-47c6-9d89-d1069a5a420c.png#align=left&display=inline&height=400&originHeight=400&originWidth=720&size=0&status=done&width=720)<br />从 `http://${cloudboot host}/#/dashboard/device/scan/list` 会发现新设备，选中后，点击录入新设备<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079846-e0a498fc-7070-40b2-b67b-b4dc3c16b04d.png#align=left&display=inline&height=321&originHeight=321&originWidth=691&size=0&status=done&width=691)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079934-c5031ae9-b299-4b91-bcde-90d607704755.png#align=left&display=inline&height=222&originHeight=379&originWidth=1276&size=0&status=done&width=746)\n\nbootos会自动轮询是否有自动装机任务，所以静候即可。如果等不及，可以在录入成功后，手动重启虚拟机。<br />在【正在安装的设备】中，会自动出现要安装的设备\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079912-f3e907b7-188d-4b82-aeff-1e577a4aba40.png#align=left&display=inline&height=98&originHeight=236&originWidth=1801&size=0&status=done&width=746)\n\n点击【详情】会在滚动模式下试试看到安装进度\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079852-3baec0a2-0627-4fe9-8233-0459d3e5c20d.png#align=left&display=inline&height=157&originHeight=157&originWidth=440&size=0&status=done&width=440)\n\n在【设备列表】可以看到已安装成功的设备\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079889-990adf01-3db1-4cd2-9791-4fc4d6b36e57.png#align=left&display=inline&height=72&originHeight=176&originWidth=1826&size=0&status=done&width=746)\n\n<a name=\"138a6766\"></a>\n### 注意\n\n~~不知道为嘛，安装后需要重启一下虚拟机后，才能使用ssh进行连接。~~\n\n根据rancher labs 大神腩哥指点\n\n> booting from ISO 首次启动，整个系统都在内存中。\n> \n> 执行ros install后，安装bootloader和initrd/vmlinuz到磁盘。\n> \n> 再次启动后，就是完整的运行在硬盘上的操作系统。\n\n\n<a name=\"c9665e1f\"></a>\n## 脑洞\n\n其实是正规操作，可以在 cloud config 配置自定义服务，这样装机后，就可以直接启动服务，不需要ssh到ros上，手动执行命令，例如配置rancher client的添加主机的命令，这样就可以直接添加到已有集群。 更多参考 [Custom System Services](https://rancher.com/docs/os/v1.x/en/installation/system-services/custom-system-services/)\n\n```yaml\n#cloud-config\nrancher:\n  services:\n    nginxapp:\n      image: nginx\n      restart: always\n```\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [cloudboot一键部署](http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html)\n- [cloudboot PXE模板定制规范](http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html)\n- [rancheros#docs#iPXE](https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/)\n- [006-Cobbler批量自动化部署CentOS/Ubuntu/Windows](https://juejin.im/post/5c748ae2f265da2d84108d71)\n- [007-Cobbler批量自动化部署Windows10和Server 2019](https://juejin.im/post/5c748b2af265da2d9262ed0f)\n\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"cloudboot-ros","published":1,"updated":"2019-08-16T06:11:15.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojii00cz24do3u1bzitj","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第10篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要讲解如何使用<a href=\"http://www.idcos.com/opensource/cloudboot-open-source\" target=\"_blank\" rel=\"noopener\">cloudboot</a>简单批量安装<a href=\"https://rancher.com/rancher-os/\" target=\"_blank\" rel=\"noopener\">rancheros</a>。</p>\n<p><a name=\"61a3ec66\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a name=\"cloudboot\"></a></p>\n<h3 id=\"cloudboot\"><a href=\"#cloudboot\" class=\"headerlink\" title=\"cloudboot\"></a>cloudboot</h3><p><a href=\"http://www.idcos.com/opensource/cloudboot-open-source\" target=\"_blank\" rel=\"noopener\">cloudboot</a>是 <a href=\"http://www.idcos.com/\" target=\"_blank\" rel=\"noopener\">云霁科技</a> 科技开源的一款简单易用的装机系统，类似 <a href=\"http://cobbler.github.io\" target=\"_blank\" rel=\"noopener\">cobbler</a> ,但是功能更强大，更易用。(可参考我之前写的 <a href=\"https://juejin.im/post/5c748b2af265da2d9262ed0f\" target=\"_blank\" rel=\"noopener\">007-Cobbler批量自动化部署Windows10和Server 2019</a> 和 <a href=\"https://juejin.im/post/5c748ae2f265da2d84108d71\" target=\"_blank\" rel=\"noopener\">006-Cobbler批量自动化部署CentOS/Ubuntu/Windows</a>)</p>\n<p><a name=\"rancheros\"></a></p>\n<h3 id=\"rancheros\"><a href=\"#rancheros\" class=\"headerlink\" title=\"rancheros\"></a>rancheros</h3><p><a href=\"https://rancher.com/rancher-os/\" target=\"_blank\" rel=\"noopener\">rancheros</a> 是 <a href=\"https://rancher.com\" target=\"_blank\" rel=\"noopener\">rancher lab</a> 开源的一款容器操作系统，类似<a href=\"https://coreos.com/\" target=\"_blank\" rel=\"noopener\">coreos</a>,RancherOS是RancherLab设计的小巧、专用的容器操作系统，可用安装到服务器本地硬盘中，也可以部署到公有云上，或者配合DockerMachine使用。与Ubuntu和CentOS不同，RancherOS使用cloud-config.yml配置文件来管理机器的配置信息，包括系统启动时的服务、网络相关的配置信息、存储配置、容器配置等等，都可以放到配置文件中进行管理。</p>\n<p><a name=\"46679853\"></a></p>\n<h2 id=\"安装cloudboot\"><a href=\"#安装cloudboot\" class=\"headerlink\" title=\"安装cloudboot\"></a>安装cloudboot</h2><p>参考 <a href=\"http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html\" target=\"_blank\" rel=\"noopener\">cloudboot一键部署</a> 不多赘述</p>\n<p><a name=\"334359aa\"></a></p>\n<h3 id=\"挂载rancheros镜像\"><a href=\"#挂载rancheros镜像\" class=\"headerlink\" title=\"挂载rancheros镜像\"></a>挂载rancheros镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /tmp/ http://releases.rancher.com/os/latest/rancheros.iso</span><br><span class=\"line\">mkdir -p <span class=\"variable\">$PWD</span>/cloudboot/deploy/iso/rancheros/1.5.1/</span><br><span class=\"line\">mount -o loop /tmp/rancheros.iso /media</span><br><span class=\"line\">rsync -a /media/ <span class=\"variable\">$PWD</span>/cloudboot/deploy/iso/rancheros/1.5.1/</span><br><span class=\"line\">umount /media</span><br></pre></td></tr></table></figure>\n<p><a name=\"483e5673\"></a></p>\n<h3 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it cloudboot /bin/sh</span><br><span class=\"line\">ln -s /data/iso/rancheros /home/www/rancheros</span><br></pre></td></tr></table></figure>\n<p><a name=\"ba8d1dca\"></a></p>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ul>\n<li>cloudboot默认用户名密码是 admin/admin</li>\n<li>登陆后需要配置dhcp(【系统管理】-&gt; 【系统设置】)</li>\n<li>需要配置网段(【网段管理】-&gt;【应用网段】)</li>\n<li>本文讲的是vmware，所以不需要配置OOB</li>\n<li>需要配置设备位置(【模板管理】-&gt;【位置管理】)</li>\n<li>如果cloudboot和rancheros都装在vmware虚拟机里，需要把vmware的网络设置中的dhcp去掉，否则会冲突</li>\n</ul>\n<p><a name=\"375e9611\"></a></p>\n<h2 id=\"pxe安装rancheros\"><a href=\"#pxe安装rancheros\" class=\"headerlink\" title=\"pxe安装rancheros\"></a>pxe安装rancheros</h2><p>参考 <a href=\"https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/\" target=\"_blank\" rel=\"noopener\">rancheros#docs#iPXE</a> 和 <a href=\"http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html\" target=\"_blank\" rel=\"noopener\">cloudboot PXE模板定制规范</a></p>\n<p><a name=\"c51df3a1\"></a></p>\n<h3 id=\"PXE模板管理\"><a href=\"#PXE模板管理\" class=\"headerlink\" title=\"PXE模板管理\"></a>PXE模板管理</h3><p>从【模板管理】-&gt;【PXE模板管理】 新增rancheros-1.5.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DEFAULT rancheros</span><br><span class=\"line\">LABEL rancheros</span><br><span class=\"line\">KERNEL http://osinstall.idcos.com/rancheros/1.5.1/boot/vmlinuz-4.14.85-rancher</span><br><span class=\"line\">APPEND initrd=http://osinstall.idcos.com/rancheros/1.5.1/boot/initrd-v1.5.1  rancher.cloud_init.datasources=[url:http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn=&#123;sn&#125;] rancher.autologin=tty1 rancher.autologin=ttyS0 rancher.autologin=ttyS1 rancher.autologin=ttyS1 console=tty1 console=ttyS0 console=ttyS1 printk.devkmsg=on panic=10 </span><br><span class=\"line\">IPAPPEND 2</span><br></pre></td></tr></table></figure>\n<p><a name=\"b3df8665\"></a></p>\n<h3 id=\"系统模板管理\"><a href=\"#系统模板管理\" class=\"headerlink\" title=\"系统模板管理\"></a>系统模板管理</h3><p>从【模板管理】-&gt;【系统模板管理】 新增rancheros-1.5.1</p>\n<p>把docker  mirror换成实际的加速器，如果不需要，可以删除，<a href=\"https://rancher.com/docs/os/v1.x/en/installation/configuration/ssh-keys/\" target=\"_blank\" rel=\"noopener\">ssh_authorized_keys 换成真实的ssh key</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\"><span class=\"attr\">rancher:</span></span><br><span class=\"line\"><span class=\"attr\">    console:</span> <span class=\"string\">alpine</span></span><br><span class=\"line\"><span class=\"attr\">    docker:</span></span><br><span class=\"line\"><span class=\"attr\">        registry_mirror:</span> <span class=\"string\">\"https://xxx.mirror.aliyuncs.com\"</span></span><br><span class=\"line\"><span class=\"attr\">runcmd:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">sh</span> <span class=\"bullet\">-c</span> <span class=\"string\">'curl http://osinstall.idcos.com/scripts/rancheros.sh | bash'</span></span><br><span class=\"line\"><span class=\"attr\">ssh_authorized_keys:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">ssh-rsa</span> <span class=\"string\">AAAA....ZZZZ</span> <span class=\"string\">user@user</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"95dfb265\"></a></p>\n<h3 id=\"自定义脚本\"><a href=\"#自定义脚本\" class=\"headerlink\" title=\"自定义脚本\"></a>自定义脚本</h3><p>在cloudboot宿主机上，运行 <code>docker exec -it cloudboot /bin/sh</code> ,然后运行 <code>vim /home/www/scripts/rancheros.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">progress</span></span>() &#123;</span><br><span class=\"line\">    curl -H <span class=\"string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"string\">\"&#123;\\\"Sn\\\":\\\"<span class=\"variable\">$_sn</span>\\\",\\\"Title\\\":\\\"<span class=\"variable\">$1</span>\\\",\\\"InstallProgress\\\":<span class=\"variable\">$2</span>,\\\"InstallLog\\\":\\\"<span class=\"variable\">$3</span>\\\"&#125;\"</span> http://osinstall.idcos.com/api/osinstall/v1/report/deviceInstallInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_sn=$(sed q /sys/class/net/eth0/address)</span><br><span class=\"line\"></span><br><span class=\"line\">progress <span class=\"string\">\"配置主机名和网络\"</span> 0.7 <span class=\"string\">\"6YWN572u5Li75py65ZCN5ZKM572R57uc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># config network</span></span><br><span class=\"line\">curl -o /tmp/networkinfo <span class=\"string\">\"http://osinstall.idcos.com/api/osinstall/v1/device/getNetworkBySn?sn=<span class=\"variable\">$&#123;_sn&#125;</span>&amp;type=raw\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /tmp/networkinfo</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; /etc/network/interfaces &lt;&lt;EOF</span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\">auto eth0</span><br><span class=\"line\">iface eth0 inet static</span><br><span class=\"line\">address <span class=\"variable\">$IPADDR</span></span><br><span class=\"line\">netmask <span class=\"variable\">$NETMASK</span></span><br><span class=\"line\">gateway <span class=\"variable\">$GATEWAY</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$HOSTNAME</span>\"</span> &gt; /etc/hostname</span><br><span class=\"line\">sudo hostname <span class=\"string\">\"<span class=\"variable\">$HOSTNAME</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">progress <span class=\"string\">\"配置alpine镜像源\"</span> 0.8 <span class=\"string\">\"6YWN572uYWxwaW5l6ZWc5YOP5rqQ\"</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories</span><br><span class=\"line\"></span><br><span class=\"line\">progress <span class=\"string\">\"安装完成\"</span> 1 <span class=\"string\">\"5a6J6KOF5a6M5oiQ\"</span></span><br><span class=\"line\">sudo ros install -c http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn=<span class=\"variable\">$_sn</span><span class=\"string\">\" -d /dev/sda -f</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b67e6b7d\"></a></p>\n<h3 id=\"自动化安装rancheros\"><a href=\"#自动化安装rancheros\" class=\"headerlink\" title=\"自动化安装rancheros\"></a>自动化安装rancheros</h3><p>从vmware创建 空盘 -&gt; 其他Linux4.x或更高版本内核64位，2核2G虚拟机，然后上电<br>虚拟机会从PXE拉取<a href=\"http://idcos.github.io/osinstall-doc/bootos/\" target=\"_blank\" rel=\"noopener\">cloudboot的bootos</a> 安装到内存中，并且往cloudboot上注册待录入的设备（待屏幕变蓝色）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079937-7895b3bf-3100-47c6-9d89-d1069a5a420c.png#align=left&amp;display=inline&amp;height=400&amp;originHeight=400&amp;originWidth=720&amp;size=0&amp;status=done&amp;width=720\" alt=\"\"><br>从 <code>http://${cloudboot host}/#/dashboard/device/scan/list</code> 会发现新设备，选中后，点击录入新设备<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079846-e0a498fc-7070-40b2-b67b-b4dc3c16b04d.png#align=left&amp;display=inline&amp;height=321&amp;originHeight=321&amp;originWidth=691&amp;size=0&amp;status=done&amp;width=691\" alt=\"\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079934-c5031ae9-b299-4b91-bcde-90d607704755.png#align=left&amp;display=inline&amp;height=222&amp;originHeight=379&amp;originWidth=1276&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p>bootos会自动轮询是否有自动装机任务，所以静候即可。如果等不及，可以在录入成功后，手动重启虚拟机。<br>在【正在安装的设备】中，会自动出现要安装的设备</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079912-f3e907b7-188d-4b82-aeff-1e577a4aba40.png#align=left&amp;display=inline&amp;height=98&amp;originHeight=236&amp;originWidth=1801&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p>点击【详情】会在滚动模式下试试看到安装进度</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079852-3baec0a2-0627-4fe9-8233-0459d3e5c20d.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=157&amp;originWidth=440&amp;size=0&amp;status=done&amp;width=440\" alt=\"\"></p>\n<p>在【设备列表】可以看到已安装成功的设备</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079889-990adf01-3db1-4cd2-9791-4fc4d6b36e57.png#align=left&amp;display=inline&amp;height=72&amp;originHeight=176&amp;originWidth=1826&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p><a name=\"138a6766\"></a></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p><del>不知道为嘛，安装后需要重启一下虚拟机后，才能使用ssh进行连接。</del></p>\n<p>根据rancher labs 大神腩哥指点</p>\n<blockquote>\n<p>booting from ISO 首次启动，整个系统都在内存中。</p>\n<p>执行ros install后，安装bootloader和initrd/vmlinuz到磁盘。</p>\n<p>再次启动后，就是完整的运行在硬盘上的操作系统。</p>\n</blockquote>\n<p><a name=\"c9665e1f\"></a></p>\n<h2 id=\"脑洞\"><a href=\"#脑洞\" class=\"headerlink\" title=\"脑洞\"></a>脑洞</h2><p>其实是正规操作，可以在 cloud config 配置自定义服务，这样装机后，就可以直接启动服务，不需要ssh到ros上，手动执行命令，例如配置rancher client的添加主机的命令，这样就可以直接添加到已有集群。 更多参考 <a href=\"https://rancher.com/docs/os/v1.x/en/installation/system-services/custom-system-services/\" target=\"_blank\" rel=\"noopener\">Custom System Services</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\"><span class=\"attr\">rancher:</span></span><br><span class=\"line\"><span class=\"attr\">  services:</span></span><br><span class=\"line\"><span class=\"attr\">    nginxapp:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html\" target=\"_blank\" rel=\"noopener\">cloudboot一键部署</a></li>\n<li><a href=\"http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html\" target=\"_blank\" rel=\"noopener\">cloudboot PXE模板定制规范</a></li>\n<li><a href=\"https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/\" target=\"_blank\" rel=\"noopener\">rancheros#docs#iPXE</a></li>\n<li><a href=\"https://juejin.im/post/5c748ae2f265da2d84108d71\" target=\"_blank\" rel=\"noopener\">006-Cobbler批量自动化部署CentOS/Ubuntu/Windows</a></li>\n<li><a href=\"https://juejin.im/post/5c748b2af265da2d9262ed0f\" target=\"_blank\" rel=\"noopener\">007-Cobbler批量自动化部署Windows10和Server 2019</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第10篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要讲解如何使用<a href=\"http://www.idcos.com/opensource/cloudboot-open-source\" target=\"_blank\" rel=\"noopener\">cloudboot</a>简单批量安装<a href=\"https://rancher.com/rancher-os/\" target=\"_blank\" rel=\"noopener\">rancheros</a>。</p>\n<p><a name=\"61a3ec66\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a name=\"cloudboot\"></a></p>\n<h3 id=\"cloudboot\"><a href=\"#cloudboot\" class=\"headerlink\" title=\"cloudboot\"></a>cloudboot</h3><p><a href=\"http://www.idcos.com/opensource/cloudboot-open-source\" target=\"_blank\" rel=\"noopener\">cloudboot</a>是 <a href=\"http://www.idcos.com/\" target=\"_blank\" rel=\"noopener\">云霁科技</a> 科技开源的一款简单易用的装机系统，类似 <a href=\"http://cobbler.github.io\" target=\"_blank\" rel=\"noopener\">cobbler</a> ,但是功能更强大，更易用。(可参考我之前写的 <a href=\"https://juejin.im/post/5c748b2af265da2d9262ed0f\" target=\"_blank\" rel=\"noopener\">007-Cobbler批量自动化部署Windows10和Server 2019</a> 和 <a href=\"https://juejin.im/post/5c748ae2f265da2d84108d71\" target=\"_blank\" rel=\"noopener\">006-Cobbler批量自动化部署CentOS/Ubuntu/Windows</a>)</p>\n<p><a name=\"rancheros\"></a></p>\n<h3 id=\"rancheros\"><a href=\"#rancheros\" class=\"headerlink\" title=\"rancheros\"></a>rancheros</h3><p><a href=\"https://rancher.com/rancher-os/\" target=\"_blank\" rel=\"noopener\">rancheros</a> 是 <a href=\"https://rancher.com\" target=\"_blank\" rel=\"noopener\">rancher lab</a> 开源的一款容器操作系统，类似<a href=\"https://coreos.com/\" target=\"_blank\" rel=\"noopener\">coreos</a>,RancherOS是RancherLab设计的小巧、专用的容器操作系统，可用安装到服务器本地硬盘中，也可以部署到公有云上，或者配合DockerMachine使用。与Ubuntu和CentOS不同，RancherOS使用cloud-config.yml配置文件来管理机器的配置信息，包括系统启动时的服务、网络相关的配置信息、存储配置、容器配置等等，都可以放到配置文件中进行管理。</p>\n<p><a name=\"46679853\"></a></p>\n<h2 id=\"安装cloudboot\"><a href=\"#安装cloudboot\" class=\"headerlink\" title=\"安装cloudboot\"></a>安装cloudboot</h2><p>参考 <a href=\"http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html\" target=\"_blank\" rel=\"noopener\">cloudboot一键部署</a> 不多赘述</p>\n<p><a name=\"334359aa\"></a></p>\n<h3 id=\"挂载rancheros镜像\"><a href=\"#挂载rancheros镜像\" class=\"headerlink\" title=\"挂载rancheros镜像\"></a>挂载rancheros镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /tmp/ http://releases.rancher.com/os/latest/rancheros.iso</span><br><span class=\"line\">mkdir -p <span class=\"variable\">$PWD</span>/cloudboot/deploy/iso/rancheros/1.5.1/</span><br><span class=\"line\">mount -o loop /tmp/rancheros.iso /media</span><br><span class=\"line\">rsync -a /media/ <span class=\"variable\">$PWD</span>/cloudboot/deploy/iso/rancheros/1.5.1/</span><br><span class=\"line\">umount /media</span><br></pre></td></tr></table></figure>\n<p><a name=\"483e5673\"></a></p>\n<h3 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it cloudboot /bin/sh</span><br><span class=\"line\">ln -s /data/iso/rancheros /home/www/rancheros</span><br></pre></td></tr></table></figure>\n<p><a name=\"ba8d1dca\"></a></p>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ul>\n<li>cloudboot默认用户名密码是 admin/admin</li>\n<li>登陆后需要配置dhcp(【系统管理】-&gt; 【系统设置】)</li>\n<li>需要配置网段(【网段管理】-&gt;【应用网段】)</li>\n<li>本文讲的是vmware，所以不需要配置OOB</li>\n<li>需要配置设备位置(【模板管理】-&gt;【位置管理】)</li>\n<li>如果cloudboot和rancheros都装在vmware虚拟机里，需要把vmware的网络设置中的dhcp去掉，否则会冲突</li>\n</ul>\n<p><a name=\"375e9611\"></a></p>\n<h2 id=\"pxe安装rancheros\"><a href=\"#pxe安装rancheros\" class=\"headerlink\" title=\"pxe安装rancheros\"></a>pxe安装rancheros</h2><p>参考 <a href=\"https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/\" target=\"_blank\" rel=\"noopener\">rancheros#docs#iPXE</a> 和 <a href=\"http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html\" target=\"_blank\" rel=\"noopener\">cloudboot PXE模板定制规范</a></p>\n<p><a name=\"c51df3a1\"></a></p>\n<h3 id=\"PXE模板管理\"><a href=\"#PXE模板管理\" class=\"headerlink\" title=\"PXE模板管理\"></a>PXE模板管理</h3><p>从【模板管理】-&gt;【PXE模板管理】 新增rancheros-1.5.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DEFAULT rancheros</span><br><span class=\"line\">LABEL rancheros</span><br><span class=\"line\">KERNEL http://osinstall.idcos.com/rancheros/1.5.1/boot/vmlinuz-4.14.85-rancher</span><br><span class=\"line\">APPEND initrd=http://osinstall.idcos.com/rancheros/1.5.1/boot/initrd-v1.5.1  rancher.cloud_init.datasources=[url:http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn=&#123;sn&#125;] rancher.autologin=tty1 rancher.autologin=ttyS0 rancher.autologin=ttyS1 rancher.autologin=ttyS1 console=tty1 console=ttyS0 console=ttyS1 printk.devkmsg=on panic=10 </span><br><span class=\"line\">IPAPPEND 2</span><br></pre></td></tr></table></figure>\n<p><a name=\"b3df8665\"></a></p>\n<h3 id=\"系统模板管理\"><a href=\"#系统模板管理\" class=\"headerlink\" title=\"系统模板管理\"></a>系统模板管理</h3><p>从【模板管理】-&gt;【系统模板管理】 新增rancheros-1.5.1</p>\n<p>把docker  mirror换成实际的加速器，如果不需要，可以删除，<a href=\"https://rancher.com/docs/os/v1.x/en/installation/configuration/ssh-keys/\" target=\"_blank\" rel=\"noopener\">ssh_authorized_keys 换成真实的ssh key</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\"><span class=\"attr\">rancher:</span></span><br><span class=\"line\"><span class=\"attr\">    console:</span> <span class=\"string\">alpine</span></span><br><span class=\"line\"><span class=\"attr\">    docker:</span></span><br><span class=\"line\"><span class=\"attr\">        registry_mirror:</span> <span class=\"string\">\"https://xxx.mirror.aliyuncs.com\"</span></span><br><span class=\"line\"><span class=\"attr\">runcmd:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">sh</span> <span class=\"bullet\">-c</span> <span class=\"string\">'curl http://osinstall.idcos.com/scripts/rancheros.sh | bash'</span></span><br><span class=\"line\"><span class=\"attr\">ssh_authorized_keys:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">ssh-rsa</span> <span class=\"string\">AAAA....ZZZZ</span> <span class=\"string\">user@user</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"95dfb265\"></a></p>\n<h3 id=\"自定义脚本\"><a href=\"#自定义脚本\" class=\"headerlink\" title=\"自定义脚本\"></a>自定义脚本</h3><p>在cloudboot宿主机上，运行 <code>docker exec -it cloudboot /bin/sh</code> ,然后运行 <code>vim /home/www/scripts/rancheros.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">progress</span></span>() &#123;</span><br><span class=\"line\">    curl -H <span class=\"string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"string\">\"&#123;\\\"Sn\\\":\\\"<span class=\"variable\">$_sn</span>\\\",\\\"Title\\\":\\\"<span class=\"variable\">$1</span>\\\",\\\"InstallProgress\\\":<span class=\"variable\">$2</span>,\\\"InstallLog\\\":\\\"<span class=\"variable\">$3</span>\\\"&#125;\"</span> http://osinstall.idcos.com/api/osinstall/v1/report/deviceInstallInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_sn=$(sed q /sys/class/net/eth0/address)</span><br><span class=\"line\"></span><br><span class=\"line\">progress <span class=\"string\">\"配置主机名和网络\"</span> 0.7 <span class=\"string\">\"6YWN572u5Li75py65ZCN5ZKM572R57uc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># config network</span></span><br><span class=\"line\">curl -o /tmp/networkinfo <span class=\"string\">\"http://osinstall.idcos.com/api/osinstall/v1/device/getNetworkBySn?sn=<span class=\"variable\">$&#123;_sn&#125;</span>&amp;type=raw\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /tmp/networkinfo</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; /etc/network/interfaces &lt;&lt;EOF</span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\">auto eth0</span><br><span class=\"line\">iface eth0 inet static</span><br><span class=\"line\">address <span class=\"variable\">$IPADDR</span></span><br><span class=\"line\">netmask <span class=\"variable\">$NETMASK</span></span><br><span class=\"line\">gateway <span class=\"variable\">$GATEWAY</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$HOSTNAME</span>\"</span> &gt; /etc/hostname</span><br><span class=\"line\">sudo hostname <span class=\"string\">\"<span class=\"variable\">$HOSTNAME</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">progress <span class=\"string\">\"配置alpine镜像源\"</span> 0.8 <span class=\"string\">\"6YWN572uYWxwaW5l6ZWc5YOP5rqQ\"</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories</span><br><span class=\"line\"></span><br><span class=\"line\">progress <span class=\"string\">\"安装完成\"</span> 1 <span class=\"string\">\"5a6J6KOF5a6M5oiQ\"</span></span><br><span class=\"line\">sudo ros install -c http://osinstall.idcos.com/api/osinstall/v1/device/getSystemBySn?sn=<span class=\"variable\">$_sn</span><span class=\"string\">\" -d /dev/sda -f</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b67e6b7d\"></a></p>\n<h3 id=\"自动化安装rancheros\"><a href=\"#自动化安装rancheros\" class=\"headerlink\" title=\"自动化安装rancheros\"></a>自动化安装rancheros</h3><p>从vmware创建 空盘 -&gt; 其他Linux4.x或更高版本内核64位，2核2G虚拟机，然后上电<br>虚拟机会从PXE拉取<a href=\"http://idcos.github.io/osinstall-doc/bootos/\" target=\"_blank\" rel=\"noopener\">cloudboot的bootos</a> 安装到内存中，并且往cloudboot上注册待录入的设备（待屏幕变蓝色）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079937-7895b3bf-3100-47c6-9d89-d1069a5a420c.png#align=left&amp;display=inline&amp;height=400&amp;originHeight=400&amp;originWidth=720&amp;size=0&amp;status=done&amp;width=720\" alt=\"\"><br>从 <code>http://${cloudboot host}/#/dashboard/device/scan/list</code> 会发现新设备，选中后，点击录入新设备<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079846-e0a498fc-7070-40b2-b67b-b4dc3c16b04d.png#align=left&amp;display=inline&amp;height=321&amp;originHeight=321&amp;originWidth=691&amp;size=0&amp;status=done&amp;width=691\" alt=\"\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079934-c5031ae9-b299-4b91-bcde-90d607704755.png#align=left&amp;display=inline&amp;height=222&amp;originHeight=379&amp;originWidth=1276&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p>bootos会自动轮询是否有自动装机任务，所以静候即可。如果等不及，可以在录入成功后，手动重启虚拟机。<br>在【正在安装的设备】中，会自动出现要安装的设备</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079912-f3e907b7-188d-4b82-aeff-1e577a4aba40.png#align=left&amp;display=inline&amp;height=98&amp;originHeight=236&amp;originWidth=1801&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p>点击【详情】会在滚动模式下试试看到安装进度</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079852-3baec0a2-0627-4fe9-8233-0459d3e5c20d.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=157&amp;originWidth=440&amp;size=0&amp;status=done&amp;width=440\" alt=\"\"></p>\n<p>在【设备列表】可以看到已安装成功的设备</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1552641079889-990adf01-3db1-4cd2-9791-4fc4d6b36e57.png#align=left&amp;display=inline&amp;height=72&amp;originHeight=176&amp;originWidth=1826&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"></p>\n<p><a name=\"138a6766\"></a></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p><del>不知道为嘛，安装后需要重启一下虚拟机后，才能使用ssh进行连接。</del></p>\n<p>根据rancher labs 大神腩哥指点</p>\n<blockquote>\n<p>booting from ISO 首次启动，整个系统都在内存中。</p>\n<p>执行ros install后，安装bootloader和initrd/vmlinuz到磁盘。</p>\n<p>再次启动后，就是完整的运行在硬盘上的操作系统。</p>\n</blockquote>\n<p><a name=\"c9665e1f\"></a></p>\n<h2 id=\"脑洞\"><a href=\"#脑洞\" class=\"headerlink\" title=\"脑洞\"></a>脑洞</h2><p>其实是正规操作，可以在 cloud config 配置自定义服务，这样装机后，就可以直接启动服务，不需要ssh到ros上，手动执行命令，例如配置rancher client的添加主机的命令，这样就可以直接添加到已有集群。 更多参考 <a href=\"https://rancher.com/docs/os/v1.x/en/installation/system-services/custom-system-services/\" target=\"_blank\" rel=\"noopener\">Custom System Services</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\"><span class=\"attr\">rancher:</span></span><br><span class=\"line\"><span class=\"attr\">  services:</span></span><br><span class=\"line\"><span class=\"attr\">    nginxapp:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://idcos.github.io/osinstall-doc/environment/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html\" target=\"_blank\" rel=\"noopener\">cloudboot一键部署</a></li>\n<li><a href=\"http://idcos.github.io/osinstall-doc/os/PXE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E5%88%B6%E8%A7%84%E8%8C%83.html\" target=\"_blank\" rel=\"noopener\">cloudboot PXE模板定制规范</a></li>\n<li><a href=\"https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe/\" target=\"_blank\" rel=\"noopener\">rancheros#docs#iPXE</a></li>\n<li><a href=\"https://juejin.im/post/5c748ae2f265da2d84108d71\" target=\"_blank\" rel=\"noopener\">006-Cobbler批量自动化部署CentOS/Ubuntu/Windows</a></li>\n<li><a href=\"https://juejin.im/post/5c748b2af265da2d9262ed0f\" target=\"_blank\" rel=\"noopener\">007-Cobbler批量自动化部署Windows10和Server 2019</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"025-大数据ETL工具之StreamSets安装及订阅mysql binlog","date":"2019-06-10T13:00:01.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第25篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍CDH6.2+StreamSets3.9。\n\nStreamSets是一个大数据采集和数据处理工具。可以通过拖拽式的可视化操作，实现数据管道(Pipelines)的设计和调度。其特点有：\n\n- 拖拽式的可视化界面操作，上手快。\n- 对常见数据处理(数据源、数据操作、数据输出)支持较好。\n- 内置监控，可以对数据流进行观测。\n\n类似的开源产品还有 [Apache NiFi](http://nifi.apache.org/) , 网上有关于NiFi和StreamSets 的对比 [Open Source ETL: Apache NiFi vs Streamsets](https://statsbot.co/blog/open-source-etl/) (网上有中文翻译版版)\n\n国内接触较多的ETL工具，可能是 [DataX](https://github.com/alibaba/DataX) 、 [Kettle](https://kettle.pentaho.com) 、[Sqoop](http://sqoop.apache.org/)。此处有个简单的对比，[数据集成之 kettle、sqoop、datax、streamSets 比较 ](https://my.oschina.net/peakfang/blog/2056426)\n\n\n<a name=\"t85Ls\"></a>\n## 安装StreamSets 3.9\n<a name=\"sMTmJ\"></a>\n### 下载parcel安装包\n\n从 [https://archives.streamsets.com/index.html](https://archives.streamsets.com/index.html) 下载3.9的<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560930235577-b347118a-9af6-4e1e-b3c8-d76d7d388e95.png#align=left&display=inline&height=681&name=image.png&originHeight=681&originWidth=549&size=51810&status=done&width=549)<br />并上传到http服务器的www目录下，本文以centos7.6为例\n\n```bash\nwget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/manifest.json\nwget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel.sha\nwget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560930516379-4f6922d6-76ed-44cd-b5c7-1b8579743cdf.png#align=left&display=inline&height=269&name=image.png&originHeight=269&originWidth=553&size=25017&status=done&width=553)\n\n<a name=\"QEaW1\"></a>\n### 配置csd\n从 [https://streamsets.com/opensource](https://streamsets.com/opensource) 下载<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560930592344-14e9b2ee-6153-4c2b-8e6e-eafa305b11ca.png#align=left&display=inline&height=628&name=image.png&originHeight=628&originWidth=520&size=49861&status=done&width=520)\n\n```bash\nwget -P /opt/cloudera/csd/ https://archives.streamsets.com/datacollector/3.9.0/csd/STREAMSETS-3.9.0.jar\ncd /opt/cloudera/csd/\nsudo chown cloudera-scm:cloudera-scm STREAMSETS-3.9.0.jar && sudo chmod 644 STREAMSETS-3.9.0.jar\nsystemctl restart cloudera-scm-server\n```\n\n<a name=\"16S3C\"></a>\n### 下载分发Parcel包\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931069258-56f0a704-4b7a-4765-8e19-6600d46f7f6f.png#align=left&display=inline&height=158&name=image.png&originHeight=158&originWidth=770&size=15171&status=done&width=770)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931088736-68ef0972-74b2-4043-984c-b2b1630adca0.png#align=left&display=inline&height=98&name=image.png&originHeight=98&originWidth=394&size=5113&status=done&width=394)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931127791-d2b173ce-ed55-4b65-99a7-2cd658468dc5.png#align=left&display=inline&height=346&name=image.png&originHeight=346&originWidth=1023&size=42564&status=done&width=1023)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931177761-a0d04a4d-a502-4b7f-a84e-fb6323c0299e.png#align=left&display=inline&height=118&name=image.png&originHeight=118&originWidth=1029&size=14553&status=done&width=1029)<br />下载并激活，但是，我实际测试时，总大小，4.6G，实际下载后，5.2G，导致sha1sum 校验失败，报<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931888700-b4afecab-a671-463b-9610-701e2a58b761.png#align=left&display=inline&height=227&name=image.png&originHeight=227&originWidth=628&size=18002&status=done&width=628)\n\n在cm所在主机， `ls -lah /opt/cloudera/parcel-repo`  <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560932061185-d64adfe2-5884-4967-b98b-c76a999c3024.png#align=left&display=inline&height=159&name=image.png&originHeight=159&originWidth=777&size=25904&status=done&width=777)\n\n把下载的 [https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel](https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel) 复制到 /opt/cloudera/parcel-repo 下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560932517429-eb7b8ece-4135-4a81-a751-8e8c0d267ef9.png#align=left&display=inline&height=105&name=image.png&originHeight=105&originWidth=1039&size=12588&status=done&width=1039)<br />如果已经不信邪，试过下载，并报hash错误后，直接替换后，这个页面还是提示hash，此时再次点击下载，就会变成分配。<br />激活后如下所示<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560936491543-f6e5539b-2396-4eb4-a616-ae2bafd02155.png#align=left&display=inline&height=156&name=image.png&originHeight=156&originWidth=1589&size=17337&status=done&width=1589)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560936642593-d20866d4-46d1-490e-9bff-8cf7c72587d5.png#align=left&display=inline&height=701&name=image.png&originHeight=701&originWidth=903&size=171790&status=done&width=903)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560936658975-a85eae7a-341d-4c68-8967-a670c23cb622.png#align=left&display=inline&height=378&name=image.png&originHeight=378&originWidth=1146&size=38226&status=done&width=1146)<br />创建完毕\n\n<a name=\"ScFf4\"></a>\n### streamsets 简单使用\n打开streamsets，默认用户名密码 admin/admin<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560945744410-72401676-7384-4312-8859-c7b652c1caca.png#align=left&display=inline&height=516&name=image.png&originHeight=516&originWidth=1374&size=63461&status=done&width=1374)<br />\n        ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561003595012-472339dd-c7c0-49be-9be3-855d9fe21016.png)\n          \n  \n  \n          \n      \n    \n  <br />\n\n官方教程，参考 [Basic Tutorial](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html)\n\n本文主要讲解订阅mysql binlog进行数据同步\n\n<a name=\"fcYrG\"></a>\n## mysql binlog\n\n<a name=\"nEogv\"></a>\n### 开启binlog\n修改mysql配置文件，my.cnf，在mysqld下增加（注意5.7的不加server-id无法正常启动）\n\n```\nserver-id=1\nlog-bin=mysql-bin\nbinlog_format=ROW\n```\n\n<a name=\"Q47aL\"></a>\n### 创建并配置同步账号\n\n```sql\nGRANT ALL on slave_test.* to 'slave_test'@'%' identified by 'slave_test';\nGRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE on *.* to 'slave_test'@'%';\nFLUSH PRIVILEGES;\n```\n\n<a name=\"oWlz6\"></a>\n### 安装mysql jdbc驱动\n\n```bash\nwget -P /opt/cloudera/parcels/STREAMSETS_DATACOLLECTOR/streamsets-libs/streamsets-datacollector-mysql-binlog-lib/lib/ https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar\n```\n\n重启streamsets\n\n\n<a name=\"qXsmC\"></a>\n### 创建pipeline\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561022971274-512e79c5-11a2-4910-85e2-aabeba28edb2.png#align=left&display=inline&height=483&name=image.png&originHeight=483&originWidth=1245&size=57203&status=done&width=1245)\n<a name=\"vDqzm\"></a>\n### 配置mysql binlog解析及处理\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023067141-a97a2e75-8272-472e-8d31-812be2123206.png#align=left&display=inline&height=703&name=image.png&originHeight=703&originWidth=831&size=64114&status=done&width=831)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023232872-f63802b3-7be6-4968-9fb9-2f7c368e7c3b.png#align=left&display=inline&height=649&name=image.png&originHeight=649&originWidth=781&size=44770&status=done&width=781)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&display=inline&height=345&name=image.png&originHeight=345&originWidth=776&size=40429&status=done&width=776)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023323874-819a18b1-42f9-404b-9eac-17d7b7190b3c.png#align=left&display=inline&height=211&name=image.png&originHeight=211&originWidth=658&size=15146&status=done&width=658)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023405577-345c7f5d-e682-45ba-b684-450707e4d26d.png#align=left&display=inline&height=482&name=image.png&originHeight=482&originWidth=880&size=57665&status=done&width=880)<br />配置目标端<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023517902-fcf0a0d8-7360-4ca9-aed4-2b2f88b07ce7.png#align=left&display=inline&height=428&name=image.png&originHeight=428&originWidth=303&size=22581&status=done&width=303)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023530221-53bf1e14-b792-40bf-9fcf-234b3c1ca097.png#align=left&display=inline&height=583&name=image.png&originHeight=583&originWidth=773&size=28852&status=done&width=773)\n\n\n<a name=\"AEeSg\"></a>\n### 运行\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023620269-fd10f7a4-f48d-44d7-a61f-d03a5fc8dead.png#align=left&display=inline&height=458&name=image.png&originHeight=458&originWidth=1808&size=69037&status=done&width=1808)\n\n<a name=\"WoQS7\"></a>\n### 测试\n此处使用mysql自带的压测工具 `mysqlslap.exe` 进行测试 \n\n```bash\nbin/mysqlslap --user=root --password=xxxxxx --concurrency=50 --number-int-cols=5 --number-char-cols=20 --auto-generate-sql --number-of-queries=100000 --auto-generate-sql-load-type=write --host=192.168.0.123 --port=3306\n--user 用户(需要有建库建表权限)\n--password 密码\n--concurrency 并发数\n--number-int-cols 表内有5个数字列\n--number-char-cols 表内有20个字符串列\n--auto-generate-sql 自动生成脚本\n--number-of-queries 总执行次数\n--auto-generate-sql-load-type=write 只执行写入操作\n--host mysql 主机\n--port 端口\n```\n下方有监控报表\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1561022869352-3d191209-41df-43ef-a7a6-5b7f097f4ba0.png#align=left&display=inline&height=883&originHeight=883&originWidth=1896&status=done&width=1896)\n\n\n<a name=\"41HXC\"></a>\n## 常见错误\n\n        ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561021775509-fa60a34d-8e71-4e30-aa65-88a23521fb26.png)\n          \n  \n  \n          \n      \n    \n  <br />同步不一致导致的错误，手动从<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&display=inline&height=332&originHeight=345&originWidth=776&status=done&width=746)<br />设置偏移量<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561022441978-aefea073-d2eb-41b6-863c-733229e35252.png#align=left&display=inline&height=709&name=image.png&originHeight=709&originWidth=900&size=124020&status=done&width=900)\n\n如果报错 `Pipeline Status: RUNNING_ERROR: For input string: \"\"xxxx\"`   ，把my.cnf改成\n\n```bash\nserver-id=1\nlog-bin=mysql-bin\nbinlog_format=ROW\nsync_binlog=1\nbinlog_gtid_simple_recovery=ON\nlog_slave_updates=ON\ngtid_mode=ON\nenforce_gtid_consistency=ON\n```\n\n<a name=\"ePxB0\"></a>\n## 参考资料\n\n- [腾讯工程师带你深入解析 MySQL binlog](https://zhuanlan.zhihu.com/p/33504555)\n- [Home/Origins/MySQL Binary Log](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html)\n- [Home/Tutorial/Basic Tutorial](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html)\n- [如何在CDH中安装和使用StreamSets](https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247488566&idx=1&sn=8c4350eb654453b2317de2b347b6e525&chksm=ec2ac43fdb5d4d2964e2b074d02faaeebe202c2ba3565ac00f589b696644bdbfa8f6f4d9754e&scene=21#wechat_redirect)\n- [如何使用StreamSets实现MySQL中变化数据实时写入HBase](https://cloud.tencent.com/developer/article/1158163)\n\n","source":"_posts/cdh-streamsets.md","raw":"\n---\n\ntitle: 025-大数据ETL工具之StreamSets安装及订阅mysql binlog\n\ndate: 2019-06-10 21:00:01 +0800\n\ntags: [CDH,hadoop,大数据,ETL,StreamSets,SDC]\n\ncategories: 大数据\n\n---\n> 这是坚持技术写作计划（含翻译）的第25篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍CDH6.2+StreamSets3.9。\n\nStreamSets是一个大数据采集和数据处理工具。可以通过拖拽式的可视化操作，实现数据管道(Pipelines)的设计和调度。其特点有：\n\n- 拖拽式的可视化界面操作，上手快。\n- 对常见数据处理(数据源、数据操作、数据输出)支持较好。\n- 内置监控，可以对数据流进行观测。\n\n类似的开源产品还有 [Apache NiFi](http://nifi.apache.org/) , 网上有关于NiFi和StreamSets 的对比 [Open Source ETL: Apache NiFi vs Streamsets](https://statsbot.co/blog/open-source-etl/) (网上有中文翻译版版)\n\n国内接触较多的ETL工具，可能是 [DataX](https://github.com/alibaba/DataX) 、 [Kettle](https://kettle.pentaho.com) 、[Sqoop](http://sqoop.apache.org/)。此处有个简单的对比，[数据集成之 kettle、sqoop、datax、streamSets 比较 ](https://my.oschina.net/peakfang/blog/2056426)\n\n\n<a name=\"t85Ls\"></a>\n## 安装StreamSets 3.9\n<a name=\"sMTmJ\"></a>\n### 下载parcel安装包\n\n从 [https://archives.streamsets.com/index.html](https://archives.streamsets.com/index.html) 下载3.9的<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560930235577-b347118a-9af6-4e1e-b3c8-d76d7d388e95.png#align=left&display=inline&height=681&name=image.png&originHeight=681&originWidth=549&size=51810&status=done&width=549)<br />并上传到http服务器的www目录下，本文以centos7.6为例\n\n```bash\nwget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/manifest.json\nwget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel.sha\nwget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560930516379-4f6922d6-76ed-44cd-b5c7-1b8579743cdf.png#align=left&display=inline&height=269&name=image.png&originHeight=269&originWidth=553&size=25017&status=done&width=553)\n\n<a name=\"QEaW1\"></a>\n### 配置csd\n从 [https://streamsets.com/opensource](https://streamsets.com/opensource) 下载<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560930592344-14e9b2ee-6153-4c2b-8e6e-eafa305b11ca.png#align=left&display=inline&height=628&name=image.png&originHeight=628&originWidth=520&size=49861&status=done&width=520)\n\n```bash\nwget -P /opt/cloudera/csd/ https://archives.streamsets.com/datacollector/3.9.0/csd/STREAMSETS-3.9.0.jar\ncd /opt/cloudera/csd/\nsudo chown cloudera-scm:cloudera-scm STREAMSETS-3.9.0.jar && sudo chmod 644 STREAMSETS-3.9.0.jar\nsystemctl restart cloudera-scm-server\n```\n\n<a name=\"16S3C\"></a>\n### 下载分发Parcel包\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931069258-56f0a704-4b7a-4765-8e19-6600d46f7f6f.png#align=left&display=inline&height=158&name=image.png&originHeight=158&originWidth=770&size=15171&status=done&width=770)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931088736-68ef0972-74b2-4043-984c-b2b1630adca0.png#align=left&display=inline&height=98&name=image.png&originHeight=98&originWidth=394&size=5113&status=done&width=394)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931127791-d2b173ce-ed55-4b65-99a7-2cd658468dc5.png#align=left&display=inline&height=346&name=image.png&originHeight=346&originWidth=1023&size=42564&status=done&width=1023)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931177761-a0d04a4d-a502-4b7f-a84e-fb6323c0299e.png#align=left&display=inline&height=118&name=image.png&originHeight=118&originWidth=1029&size=14553&status=done&width=1029)<br />下载并激活，但是，我实际测试时，总大小，4.6G，实际下载后，5.2G，导致sha1sum 校验失败，报<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560931888700-b4afecab-a671-463b-9610-701e2a58b761.png#align=left&display=inline&height=227&name=image.png&originHeight=227&originWidth=628&size=18002&status=done&width=628)\n\n在cm所在主机， `ls -lah /opt/cloudera/parcel-repo`  <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560932061185-d64adfe2-5884-4967-b98b-c76a999c3024.png#align=left&display=inline&height=159&name=image.png&originHeight=159&originWidth=777&size=25904&status=done&width=777)\n\n把下载的 [https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel](https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel) 复制到 /opt/cloudera/parcel-repo 下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560932517429-eb7b8ece-4135-4a81-a751-8e8c0d267ef9.png#align=left&display=inline&height=105&name=image.png&originHeight=105&originWidth=1039&size=12588&status=done&width=1039)<br />如果已经不信邪，试过下载，并报hash错误后，直接替换后，这个页面还是提示hash，此时再次点击下载，就会变成分配。<br />激活后如下所示<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560936491543-f6e5539b-2396-4eb4-a616-ae2bafd02155.png#align=left&display=inline&height=156&name=image.png&originHeight=156&originWidth=1589&size=17337&status=done&width=1589)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560936642593-d20866d4-46d1-490e-9bff-8cf7c72587d5.png#align=left&display=inline&height=701&name=image.png&originHeight=701&originWidth=903&size=171790&status=done&width=903)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560936658975-a85eae7a-341d-4c68-8967-a670c23cb622.png#align=left&display=inline&height=378&name=image.png&originHeight=378&originWidth=1146&size=38226&status=done&width=1146)<br />创建完毕\n\n<a name=\"ScFf4\"></a>\n### streamsets 简单使用\n打开streamsets，默认用户名密码 admin/admin<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1560945744410-72401676-7384-4312-8859-c7b652c1caca.png#align=left&display=inline&height=516&name=image.png&originHeight=516&originWidth=1374&size=63461&status=done&width=1374)<br />\n        ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561003595012-472339dd-c7c0-49be-9be3-855d9fe21016.png)\n          \n  \n  \n          \n      \n    \n  <br />\n\n官方教程，参考 [Basic Tutorial](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html)\n\n本文主要讲解订阅mysql binlog进行数据同步\n\n<a name=\"fcYrG\"></a>\n## mysql binlog\n\n<a name=\"nEogv\"></a>\n### 开启binlog\n修改mysql配置文件，my.cnf，在mysqld下增加（注意5.7的不加server-id无法正常启动）\n\n```\nserver-id=1\nlog-bin=mysql-bin\nbinlog_format=ROW\n```\n\n<a name=\"Q47aL\"></a>\n### 创建并配置同步账号\n\n```sql\nGRANT ALL on slave_test.* to 'slave_test'@'%' identified by 'slave_test';\nGRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE on *.* to 'slave_test'@'%';\nFLUSH PRIVILEGES;\n```\n\n<a name=\"oWlz6\"></a>\n### 安装mysql jdbc驱动\n\n```bash\nwget -P /opt/cloudera/parcels/STREAMSETS_DATACOLLECTOR/streamsets-libs/streamsets-datacollector-mysql-binlog-lib/lib/ https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar\n```\n\n重启streamsets\n\n\n<a name=\"qXsmC\"></a>\n### 创建pipeline\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561022971274-512e79c5-11a2-4910-85e2-aabeba28edb2.png#align=left&display=inline&height=483&name=image.png&originHeight=483&originWidth=1245&size=57203&status=done&width=1245)\n<a name=\"vDqzm\"></a>\n### 配置mysql binlog解析及处理\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023067141-a97a2e75-8272-472e-8d31-812be2123206.png#align=left&display=inline&height=703&name=image.png&originHeight=703&originWidth=831&size=64114&status=done&width=831)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023232872-f63802b3-7be6-4968-9fb9-2f7c368e7c3b.png#align=left&display=inline&height=649&name=image.png&originHeight=649&originWidth=781&size=44770&status=done&width=781)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&display=inline&height=345&name=image.png&originHeight=345&originWidth=776&size=40429&status=done&width=776)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023323874-819a18b1-42f9-404b-9eac-17d7b7190b3c.png#align=left&display=inline&height=211&name=image.png&originHeight=211&originWidth=658&size=15146&status=done&width=658)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023405577-345c7f5d-e682-45ba-b684-450707e4d26d.png#align=left&display=inline&height=482&name=image.png&originHeight=482&originWidth=880&size=57665&status=done&width=880)<br />配置目标端<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023517902-fcf0a0d8-7360-4ca9-aed4-2b2f88b07ce7.png#align=left&display=inline&height=428&name=image.png&originHeight=428&originWidth=303&size=22581&status=done&width=303)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023530221-53bf1e14-b792-40bf-9fcf-234b3c1ca097.png#align=left&display=inline&height=583&name=image.png&originHeight=583&originWidth=773&size=28852&status=done&width=773)\n\n\n<a name=\"AEeSg\"></a>\n### 运行\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023620269-fd10f7a4-f48d-44d7-a61f-d03a5fc8dead.png#align=left&display=inline&height=458&name=image.png&originHeight=458&originWidth=1808&size=69037&status=done&width=1808)\n\n<a name=\"WoQS7\"></a>\n### 测试\n此处使用mysql自带的压测工具 `mysqlslap.exe` 进行测试 \n\n```bash\nbin/mysqlslap --user=root --password=xxxxxx --concurrency=50 --number-int-cols=5 --number-char-cols=20 --auto-generate-sql --number-of-queries=100000 --auto-generate-sql-load-type=write --host=192.168.0.123 --port=3306\n--user 用户(需要有建库建表权限)\n--password 密码\n--concurrency 并发数\n--number-int-cols 表内有5个数字列\n--number-char-cols 表内有20个字符串列\n--auto-generate-sql 自动生成脚本\n--number-of-queries 总执行次数\n--auto-generate-sql-load-type=write 只执行写入操作\n--host mysql 主机\n--port 端口\n```\n下方有监控报表\n\n![](https://cdn.nlark.com/yuque/0/2019/png/226273/1561022869352-3d191209-41df-43ef-a7a6-5b7f097f4ba0.png#align=left&display=inline&height=883&originHeight=883&originWidth=1896&status=done&width=1896)\n\n\n<a name=\"41HXC\"></a>\n## 常见错误\n\n        ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561021775509-fa60a34d-8e71-4e30-aa65-88a23521fb26.png)\n          \n  \n  \n          \n      \n    \n  <br />同步不一致导致的错误，手动从<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&display=inline&height=332&originHeight=345&originWidth=776&status=done&width=746)<br />设置偏移量<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561022441978-aefea073-d2eb-41b6-863c-733229e35252.png#align=left&display=inline&height=709&name=image.png&originHeight=709&originWidth=900&size=124020&status=done&width=900)\n\n如果报错 `Pipeline Status: RUNNING_ERROR: For input string: \"\"xxxx\"`   ，把my.cnf改成\n\n```bash\nserver-id=1\nlog-bin=mysql-bin\nbinlog_format=ROW\nsync_binlog=1\nbinlog_gtid_simple_recovery=ON\nlog_slave_updates=ON\ngtid_mode=ON\nenforce_gtid_consistency=ON\n```\n\n<a name=\"ePxB0\"></a>\n## 参考资料\n\n- [腾讯工程师带你深入解析 MySQL binlog](https://zhuanlan.zhihu.com/p/33504555)\n- [Home/Origins/MySQL Binary Log](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html)\n- [Home/Tutorial/Basic Tutorial](https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html)\n- [如何在CDH中安装和使用StreamSets](https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247488566&idx=1&sn=8c4350eb654453b2317de2b347b6e525&chksm=ec2ac43fdb5d4d2964e2b074d02faaeebe202c2ba3565ac00f589b696644bdbfa8f6f4d9754e&scene=21#wechat_redirect)\n- [如何使用StreamSets实现MySQL中变化数据实时写入HBase](https://cloud.tencent.com/developer/article/1158163)\n\n","slug":"cdh-streamsets","published":1,"updated":"2019-08-16T06:11:15.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojik00d224dorqb1edg5","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第25篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍CDH6.2+StreamSets3.9。</p>\n<p>StreamSets是一个大数据采集和数据处理工具。可以通过拖拽式的可视化操作，实现数据管道(Pipelines)的设计和调度。其特点有：</p>\n<ul>\n<li>拖拽式的可视化界面操作，上手快。</li>\n<li>对常见数据处理(数据源、数据操作、数据输出)支持较好。</li>\n<li>内置监控，可以对数据流进行观测。</li>\n</ul>\n<p>类似的开源产品还有 <a href=\"http://nifi.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache NiFi</a> , 网上有关于NiFi和StreamSets 的对比 <a href=\"https://statsbot.co/blog/open-source-etl/\" target=\"_blank\" rel=\"noopener\">Open Source ETL: Apache NiFi vs Streamsets</a> (网上有中文翻译版版)</p>\n<p>国内接触较多的ETL工具，可能是 <a href=\"https://github.com/alibaba/DataX\" target=\"_blank\" rel=\"noopener\">DataX</a> 、 <a href=\"https://kettle.pentaho.com\" target=\"_blank\" rel=\"noopener\">Kettle</a> 、<a href=\"http://sqoop.apache.org/\" target=\"_blank\" rel=\"noopener\">Sqoop</a>。此处有个简单的对比，<a href=\"https://my.oschina.net/peakfang/blog/2056426\" target=\"_blank\" rel=\"noopener\">数据集成之 kettle、sqoop、datax、streamSets 比较 </a></p>\n<p><a name=\"t85Ls\"></a></p>\n<h2 id=\"安装StreamSets-3-9\"><a href=\"#安装StreamSets-3-9\" class=\"headerlink\" title=\"安装StreamSets 3.9\"></a>安装StreamSets 3.9</h2><p><a name=\"sMTmJ\"></a></p>\n<h3 id=\"下载parcel安装包\"><a href=\"#下载parcel安装包\" class=\"headerlink\" title=\"下载parcel安装包\"></a>下载parcel安装包</h3><p>从 <a href=\"https://archives.streamsets.com/index.html\" target=\"_blank\" rel=\"noopener\">https://archives.streamsets.com/index.html</a> 下载3.9的<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560930235577-b347118a-9af6-4e1e-b3c8-d76d7d388e95.png#align=left&amp;display=inline&amp;height=681&amp;name=image.png&amp;originHeight=681&amp;originWidth=549&amp;size=51810&amp;status=done&amp;width=549\" alt=\"image.png\"><br>并上传到http服务器的www目录下，本文以centos7.6为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/manifest.json</span><br><span class=\"line\">wget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel.sha</span><br><span class=\"line\">wget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560930516379-4f6922d6-76ed-44cd-b5c7-1b8579743cdf.png#align=left&amp;display=inline&amp;height=269&amp;name=image.png&amp;originHeight=269&amp;originWidth=553&amp;size=25017&amp;status=done&amp;width=553\" alt=\"image.png\"></p>\n<p><a name=\"QEaW1\"></a></p>\n<h3 id=\"配置csd\"><a href=\"#配置csd\" class=\"headerlink\" title=\"配置csd\"></a>配置csd</h3><p>从 <a href=\"https://streamsets.com/opensource\" target=\"_blank\" rel=\"noopener\">https://streamsets.com/opensource</a> 下载<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560930592344-14e9b2ee-6153-4c2b-8e6e-eafa305b11ca.png#align=left&amp;display=inline&amp;height=628&amp;name=image.png&amp;originHeight=628&amp;originWidth=520&amp;size=49861&amp;status=done&amp;width=520\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /opt/cloudera/csd/ https://archives.streamsets.com/datacollector/3.9.0/csd/STREAMSETS-3.9.0.jar</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/cloudera/csd/</span><br><span class=\"line\">sudo chown cloudera-scm:cloudera-scm STREAMSETS-3.9.0.jar &amp;&amp; sudo chmod 644 STREAMSETS-3.9.0.jar</span><br><span class=\"line\">systemctl restart cloudera-scm-server</span><br></pre></td></tr></table></figure>\n<p><a name=\"16S3C\"></a></p>\n<h3 id=\"下载分发Parcel包\"><a href=\"#下载分发Parcel包\" class=\"headerlink\" title=\"下载分发Parcel包\"></a>下载分发Parcel包</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931069258-56f0a704-4b7a-4765-8e19-6600d46f7f6f.png#align=left&amp;display=inline&amp;height=158&amp;name=image.png&amp;originHeight=158&amp;originWidth=770&amp;size=15171&amp;status=done&amp;width=770\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931088736-68ef0972-74b2-4043-984c-b2b1630adca0.png#align=left&amp;display=inline&amp;height=98&amp;name=image.png&amp;originHeight=98&amp;originWidth=394&amp;size=5113&amp;status=done&amp;width=394\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931127791-d2b173ce-ed55-4b65-99a7-2cd658468dc5.png#align=left&amp;display=inline&amp;height=346&amp;name=image.png&amp;originHeight=346&amp;originWidth=1023&amp;size=42564&amp;status=done&amp;width=1023\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931177761-a0d04a4d-a502-4b7f-a84e-fb6323c0299e.png#align=left&amp;display=inline&amp;height=118&amp;name=image.png&amp;originHeight=118&amp;originWidth=1029&amp;size=14553&amp;status=done&amp;width=1029\" alt=\"image.png\"><br>下载并激活，但是，我实际测试时，总大小，4.6G，实际下载后，5.2G，导致sha1sum 校验失败，报<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931888700-b4afecab-a671-463b-9610-701e2a58b761.png#align=left&amp;display=inline&amp;height=227&amp;name=image.png&amp;originHeight=227&amp;originWidth=628&amp;size=18002&amp;status=done&amp;width=628\" alt=\"image.png\"></p>\n<p>在cm所在主机， <code>ls -lah /opt/cloudera/parcel-repo</code>  <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560932061185-d64adfe2-5884-4967-b98b-c76a999c3024.png#align=left&amp;display=inline&amp;height=159&amp;name=image.png&amp;originHeight=159&amp;originWidth=777&amp;size=25904&amp;status=done&amp;width=777\" alt=\"image.png\"></p>\n<p>把下载的 <a href=\"https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel\" target=\"_blank\" rel=\"noopener\">https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel</a> 复制到 /opt/cloudera/parcel-repo 下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560932517429-eb7b8ece-4135-4a81-a751-8e8c0d267ef9.png#align=left&amp;display=inline&amp;height=105&amp;name=image.png&amp;originHeight=105&amp;originWidth=1039&amp;size=12588&amp;status=done&amp;width=1039\" alt=\"image.png\"><br>如果已经不信邪，试过下载，并报hash错误后，直接替换后，这个页面还是提示hash，此时再次点击下载，就会变成分配。<br>激活后如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560936491543-f6e5539b-2396-4eb4-a616-ae2bafd02155.png#align=left&amp;display=inline&amp;height=156&amp;name=image.png&amp;originHeight=156&amp;originWidth=1589&amp;size=17337&amp;status=done&amp;width=1589\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560936642593-d20866d4-46d1-490e-9bff-8cf7c72587d5.png#align=left&amp;display=inline&amp;height=701&amp;name=image.png&amp;originHeight=701&amp;originWidth=903&amp;size=171790&amp;status=done&amp;width=903\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560936658975-a85eae7a-341d-4c68-8967-a670c23cb622.png#align=left&amp;display=inline&amp;height=378&amp;name=image.png&amp;originHeight=378&amp;originWidth=1146&amp;size=38226&amp;status=done&amp;width=1146\" alt=\"image.png\"><br>创建完毕</p>\n<p><a name=\"ScFf4\"></a></p>\n<h3 id=\"streamsets-简单使用\"><a href=\"#streamsets-简单使用\" class=\"headerlink\" title=\"streamsets 简单使用\"></a>streamsets 简单使用</h3><p>打开streamsets，默认用户名密码 admin/admin<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560945744410-72401676-7384-4312-8859-c7b652c1caca.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=516&amp;originWidth=1374&amp;size=63461&amp;status=done&amp;width=1374\" alt=\"image.png\"><br><br>        <img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561003595012-472339dd-c7c0-49be-9be3-855d9fe21016.png\" alt=\"image.png\"></p>\n<p>  <br></p>\n<p>官方教程，参考 <a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html\" target=\"_blank\" rel=\"noopener\">Basic Tutorial</a></p>\n<p>本文主要讲解订阅mysql binlog进行数据同步</p>\n<p><a name=\"fcYrG\"></a></p>\n<h2 id=\"mysql-binlog\"><a href=\"#mysql-binlog\" class=\"headerlink\" title=\"mysql binlog\"></a>mysql binlog</h2><p><a name=\"nEogv\"></a></p>\n<h3 id=\"开启binlog\"><a href=\"#开启binlog\" class=\"headerlink\" title=\"开启binlog\"></a>开启binlog</h3><p>修改mysql配置文件，my.cnf，在mysqld下增加（注意5.7的不加server-id无法正常启动）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server-id=1</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">binlog_format=ROW</span><br></pre></td></tr></table></figure>\n<p><a name=\"Q47aL\"></a></p>\n<h3 id=\"创建并配置同步账号\"><a href=\"#创建并配置同步账号\" class=\"headerlink\" title=\"创建并配置同步账号\"></a>创建并配置同步账号</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">on</span> slave_test.* <span class=\"keyword\">to</span> <span class=\"string\">'slave_test'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'slave_test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">CLIENT</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> <span class=\"string\">'slave_test'</span>@<span class=\"string\">'%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>\n<p><a name=\"oWlz6\"></a></p>\n<h3 id=\"安装mysql-jdbc驱动\"><a href=\"#安装mysql-jdbc驱动\" class=\"headerlink\" title=\"安装mysql jdbc驱动\"></a>安装mysql jdbc驱动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /opt/cloudera/parcels/STREAMSETS_DATACOLLECTOR/streamsets-libs/streamsets-datacollector-mysql-binlog-lib/lib/ https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar</span><br></pre></td></tr></table></figure>\n<p>重启streamsets</p>\n<p><a name=\"qXsmC\"></a></p>\n<h3 id=\"创建pipeline\"><a href=\"#创建pipeline\" class=\"headerlink\" title=\"创建pipeline\"></a>创建pipeline</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561022971274-512e79c5-11a2-4910-85e2-aabeba28edb2.png#align=left&amp;display=inline&amp;height=483&amp;name=image.png&amp;originHeight=483&amp;originWidth=1245&amp;size=57203&amp;status=done&amp;width=1245\" alt=\"image.png\"><br><a name=\"vDqzm\"></a></p>\n<h3 id=\"配置mysql-binlog解析及处理\"><a href=\"#配置mysql-binlog解析及处理\" class=\"headerlink\" title=\"配置mysql binlog解析及处理\"></a>配置mysql binlog解析及处理</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023067141-a97a2e75-8272-472e-8d31-812be2123206.png#align=left&amp;display=inline&amp;height=703&amp;name=image.png&amp;originHeight=703&amp;originWidth=831&amp;size=64114&amp;status=done&amp;width=831\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023232872-f63802b3-7be6-4968-9fb9-2f7c368e7c3b.png#align=left&amp;display=inline&amp;height=649&amp;name=image.png&amp;originHeight=649&amp;originWidth=781&amp;size=44770&amp;status=done&amp;width=781\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&amp;display=inline&amp;height=345&amp;name=image.png&amp;originHeight=345&amp;originWidth=776&amp;size=40429&amp;status=done&amp;width=776\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023323874-819a18b1-42f9-404b-9eac-17d7b7190b3c.png#align=left&amp;display=inline&amp;height=211&amp;name=image.png&amp;originHeight=211&amp;originWidth=658&amp;size=15146&amp;status=done&amp;width=658\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023405577-345c7f5d-e682-45ba-b684-450707e4d26d.png#align=left&amp;display=inline&amp;height=482&amp;name=image.png&amp;originHeight=482&amp;originWidth=880&amp;size=57665&amp;status=done&amp;width=880\" alt=\"image.png\"><br>配置目标端<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023517902-fcf0a0d8-7360-4ca9-aed4-2b2f88b07ce7.png#align=left&amp;display=inline&amp;height=428&amp;name=image.png&amp;originHeight=428&amp;originWidth=303&amp;size=22581&amp;status=done&amp;width=303\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023530221-53bf1e14-b792-40bf-9fcf-234b3c1ca097.png#align=left&amp;display=inline&amp;height=583&amp;name=image.png&amp;originHeight=583&amp;originWidth=773&amp;size=28852&amp;status=done&amp;width=773\" alt=\"image.png\"></p>\n<p><a name=\"AEeSg\"></a></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023620269-fd10f7a4-f48d-44d7-a61f-d03a5fc8dead.png#align=left&amp;display=inline&amp;height=458&amp;name=image.png&amp;originHeight=458&amp;originWidth=1808&amp;size=69037&amp;status=done&amp;width=1808\" alt=\"image.png\"></p>\n<p><a name=\"WoQS7\"></a></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>此处使用mysql自带的压测工具 <code>mysqlslap.exe</code> 进行测试 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/mysqlslap --user=root --password=xxxxxx --concurrency=50 --number-int-cols=5 --number-char-cols=20 --auto-generate-sql --number-of-queries=100000 --auto-generate-sql-load-type=write --host=192.168.0.123 --port=3306</span><br><span class=\"line\">--user 用户(需要有建库建表权限)</span><br><span class=\"line\">--password 密码</span><br><span class=\"line\">--concurrency 并发数</span><br><span class=\"line\">--number-int-cols 表内有5个数字列</span><br><span class=\"line\">--number-char-cols 表内有20个字符串列</span><br><span class=\"line\">--auto-generate-sql 自动生成脚本</span><br><span class=\"line\">--number-of-queries 总执行次数</span><br><span class=\"line\">--auto-generate-sql-load-type=write 只执行写入操作</span><br><span class=\"line\">--host mysql 主机</span><br><span class=\"line\">--port 端口</span><br></pre></td></tr></table></figure>\n<p>下方有监控报表</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561022869352-3d191209-41df-43ef-a7a6-5b7f097f4ba0.png#align=left&amp;display=inline&amp;height=883&amp;originHeight=883&amp;originWidth=1896&amp;status=done&amp;width=1896\" alt=\"\"></p>\n<p><a name=\"41HXC\"></a></p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><pre><code>![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561021775509-fa60a34d-8e71-4e30-aa65-88a23521fb26.png)\n</code></pre><p>  <br>同步不一致导致的错误，手动从<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&amp;display=inline&amp;height=332&amp;originHeight=345&amp;originWidth=776&amp;status=done&amp;width=746\" alt=\"\"><br>设置偏移量<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561022441978-aefea073-d2eb-41b6-863c-733229e35252.png#align=left&amp;display=inline&amp;height=709&amp;name=image.png&amp;originHeight=709&amp;originWidth=900&amp;size=124020&amp;status=done&amp;width=900\" alt=\"image.png\"></p>\n<p>如果报错 <code>Pipeline Status: RUNNING_ERROR: For input string: &quot;&quot;xxxx&quot;</code>   ，把my.cnf改成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server-id=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>-bin=mysql-bin</span><br><span class=\"line\">binlog_format=ROW</span><br><span class=\"line\">sync_binlog=1</span><br><span class=\"line\">binlog_gtid_simple_recovery=ON</span><br><span class=\"line\">log_slave_updates=ON</span><br><span class=\"line\">gtid_mode=ON</span><br><span class=\"line\">enforce_gtid_consistency=ON</span><br></pre></td></tr></table></figure>\n<p><a name=\"ePxB0\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/33504555\" target=\"_blank\" rel=\"noopener\">腾讯工程师带你深入解析 MySQL binlog</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html\" target=\"_blank\" rel=\"noopener\">Home/Origins/MySQL Binary Log</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html\" target=\"_blank\" rel=\"noopener\">Home/Tutorial/Basic Tutorial</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247488566&amp;idx=1&amp;sn=8c4350eb654453b2317de2b347b6e525&amp;chksm=ec2ac43fdb5d4d2964e2b074d02faaeebe202c2ba3565ac00f589b696644bdbfa8f6f4d9754e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">如何在CDH中安装和使用StreamSets</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1158163\" target=\"_blank\" rel=\"noopener\">如何使用StreamSets实现MySQL中变化数据实时写入HBase</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第25篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍CDH6.2+StreamSets3.9。</p>\n<p>StreamSets是一个大数据采集和数据处理工具。可以通过拖拽式的可视化操作，实现数据管道(Pipelines)的设计和调度。其特点有：</p>\n<ul>\n<li>拖拽式的可视化界面操作，上手快。</li>\n<li>对常见数据处理(数据源、数据操作、数据输出)支持较好。</li>\n<li>内置监控，可以对数据流进行观测。</li>\n</ul>\n<p>类似的开源产品还有 <a href=\"http://nifi.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache NiFi</a> , 网上有关于NiFi和StreamSets 的对比 <a href=\"https://statsbot.co/blog/open-source-etl/\" target=\"_blank\" rel=\"noopener\">Open Source ETL: Apache NiFi vs Streamsets</a> (网上有中文翻译版版)</p>\n<p>国内接触较多的ETL工具，可能是 <a href=\"https://github.com/alibaba/DataX\" target=\"_blank\" rel=\"noopener\">DataX</a> 、 <a href=\"https://kettle.pentaho.com\" target=\"_blank\" rel=\"noopener\">Kettle</a> 、<a href=\"http://sqoop.apache.org/\" target=\"_blank\" rel=\"noopener\">Sqoop</a>。此处有个简单的对比，<a href=\"https://my.oschina.net/peakfang/blog/2056426\" target=\"_blank\" rel=\"noopener\">数据集成之 kettle、sqoop、datax、streamSets 比较 </a></p>\n<p><a name=\"t85Ls\"></a></p>\n<h2 id=\"安装StreamSets-3-9\"><a href=\"#安装StreamSets-3-9\" class=\"headerlink\" title=\"安装StreamSets 3.9\"></a>安装StreamSets 3.9</h2><p><a name=\"sMTmJ\"></a></p>\n<h3 id=\"下载parcel安装包\"><a href=\"#下载parcel安装包\" class=\"headerlink\" title=\"下载parcel安装包\"></a>下载parcel安装包</h3><p>从 <a href=\"https://archives.streamsets.com/index.html\" target=\"_blank\" rel=\"noopener\">https://archives.streamsets.com/index.html</a> 下载3.9的<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560930235577-b347118a-9af6-4e1e-b3c8-d76d7d388e95.png#align=left&amp;display=inline&amp;height=681&amp;name=image.png&amp;originHeight=681&amp;originWidth=549&amp;size=51810&amp;status=done&amp;width=549\" alt=\"image.png\"><br>并上传到http服务器的www目录下，本文以centos7.6为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/manifest.json</span><br><span class=\"line\">wget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel.sha</span><br><span class=\"line\">wget -P /var/www/html/streamsets3.9.0/ https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560930516379-4f6922d6-76ed-44cd-b5c7-1b8579743cdf.png#align=left&amp;display=inline&amp;height=269&amp;name=image.png&amp;originHeight=269&amp;originWidth=553&amp;size=25017&amp;status=done&amp;width=553\" alt=\"image.png\"></p>\n<p><a name=\"QEaW1\"></a></p>\n<h3 id=\"配置csd\"><a href=\"#配置csd\" class=\"headerlink\" title=\"配置csd\"></a>配置csd</h3><p>从 <a href=\"https://streamsets.com/opensource\" target=\"_blank\" rel=\"noopener\">https://streamsets.com/opensource</a> 下载<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560930592344-14e9b2ee-6153-4c2b-8e6e-eafa305b11ca.png#align=left&amp;display=inline&amp;height=628&amp;name=image.png&amp;originHeight=628&amp;originWidth=520&amp;size=49861&amp;status=done&amp;width=520\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /opt/cloudera/csd/ https://archives.streamsets.com/datacollector/3.9.0/csd/STREAMSETS-3.9.0.jar</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/cloudera/csd/</span><br><span class=\"line\">sudo chown cloudera-scm:cloudera-scm STREAMSETS-3.9.0.jar &amp;&amp; sudo chmod 644 STREAMSETS-3.9.0.jar</span><br><span class=\"line\">systemctl restart cloudera-scm-server</span><br></pre></td></tr></table></figure>\n<p><a name=\"16S3C\"></a></p>\n<h3 id=\"下载分发Parcel包\"><a href=\"#下载分发Parcel包\" class=\"headerlink\" title=\"下载分发Parcel包\"></a>下载分发Parcel包</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931069258-56f0a704-4b7a-4765-8e19-6600d46f7f6f.png#align=left&amp;display=inline&amp;height=158&amp;name=image.png&amp;originHeight=158&amp;originWidth=770&amp;size=15171&amp;status=done&amp;width=770\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931088736-68ef0972-74b2-4043-984c-b2b1630adca0.png#align=left&amp;display=inline&amp;height=98&amp;name=image.png&amp;originHeight=98&amp;originWidth=394&amp;size=5113&amp;status=done&amp;width=394\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931127791-d2b173ce-ed55-4b65-99a7-2cd658468dc5.png#align=left&amp;display=inline&amp;height=346&amp;name=image.png&amp;originHeight=346&amp;originWidth=1023&amp;size=42564&amp;status=done&amp;width=1023\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931177761-a0d04a4d-a502-4b7f-a84e-fb6323c0299e.png#align=left&amp;display=inline&amp;height=118&amp;name=image.png&amp;originHeight=118&amp;originWidth=1029&amp;size=14553&amp;status=done&amp;width=1029\" alt=\"image.png\"><br>下载并激活，但是，我实际测试时，总大小，4.6G，实际下载后，5.2G，导致sha1sum 校验失败，报<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560931888700-b4afecab-a671-463b-9610-701e2a58b761.png#align=left&amp;display=inline&amp;height=227&amp;name=image.png&amp;originHeight=227&amp;originWidth=628&amp;size=18002&amp;status=done&amp;width=628\" alt=\"image.png\"></p>\n<p>在cm所在主机， <code>ls -lah /opt/cloudera/parcel-repo</code>  <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560932061185-d64adfe2-5884-4967-b98b-c76a999c3024.png#align=left&amp;display=inline&amp;height=159&amp;name=image.png&amp;originHeight=159&amp;originWidth=777&amp;size=25904&amp;status=done&amp;width=777\" alt=\"image.png\"></p>\n<p>把下载的 <a href=\"https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel\" target=\"_blank\" rel=\"noopener\">https://archives.streamsets.com/datacollector/3.9.0/parcel/STREAMSETS_DATACOLLECTOR-3.9.0-el7.parcel</a> 复制到 /opt/cloudera/parcel-repo 下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560932517429-eb7b8ece-4135-4a81-a751-8e8c0d267ef9.png#align=left&amp;display=inline&amp;height=105&amp;name=image.png&amp;originHeight=105&amp;originWidth=1039&amp;size=12588&amp;status=done&amp;width=1039\" alt=\"image.png\"><br>如果已经不信邪，试过下载，并报hash错误后，直接替换后，这个页面还是提示hash，此时再次点击下载，就会变成分配。<br>激活后如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560936491543-f6e5539b-2396-4eb4-a616-ae2bafd02155.png#align=left&amp;display=inline&amp;height=156&amp;name=image.png&amp;originHeight=156&amp;originWidth=1589&amp;size=17337&amp;status=done&amp;width=1589\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560936642593-d20866d4-46d1-490e-9bff-8cf7c72587d5.png#align=left&amp;display=inline&amp;height=701&amp;name=image.png&amp;originHeight=701&amp;originWidth=903&amp;size=171790&amp;status=done&amp;width=903\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560936658975-a85eae7a-341d-4c68-8967-a670c23cb622.png#align=left&amp;display=inline&amp;height=378&amp;name=image.png&amp;originHeight=378&amp;originWidth=1146&amp;size=38226&amp;status=done&amp;width=1146\" alt=\"image.png\"><br>创建完毕</p>\n<p><a name=\"ScFf4\"></a></p>\n<h3 id=\"streamsets-简单使用\"><a href=\"#streamsets-简单使用\" class=\"headerlink\" title=\"streamsets 简单使用\"></a>streamsets 简单使用</h3><p>打开streamsets，默认用户名密码 admin/admin<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1560945744410-72401676-7384-4312-8859-c7b652c1caca.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=516&amp;originWidth=1374&amp;size=63461&amp;status=done&amp;width=1374\" alt=\"image.png\"><br><br>        <img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561003595012-472339dd-c7c0-49be-9be3-855d9fe21016.png\" alt=\"image.png\"></p>\n<p>  <br></p>\n<p>官方教程，参考 <a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html\" target=\"_blank\" rel=\"noopener\">Basic Tutorial</a></p>\n<p>本文主要讲解订阅mysql binlog进行数据同步</p>\n<p><a name=\"fcYrG\"></a></p>\n<h2 id=\"mysql-binlog\"><a href=\"#mysql-binlog\" class=\"headerlink\" title=\"mysql binlog\"></a>mysql binlog</h2><p><a name=\"nEogv\"></a></p>\n<h3 id=\"开启binlog\"><a href=\"#开启binlog\" class=\"headerlink\" title=\"开启binlog\"></a>开启binlog</h3><p>修改mysql配置文件，my.cnf，在mysqld下增加（注意5.7的不加server-id无法正常启动）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server-id=1</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">binlog_format=ROW</span><br></pre></td></tr></table></figure>\n<p><a name=\"Q47aL\"></a></p>\n<h3 id=\"创建并配置同步账号\"><a href=\"#创建并配置同步账号\" class=\"headerlink\" title=\"创建并配置同步账号\"></a>创建并配置同步账号</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">on</span> slave_test.* <span class=\"keyword\">to</span> <span class=\"string\">'slave_test'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'slave_test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">CLIENT</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> <span class=\"string\">'slave_test'</span>@<span class=\"string\">'%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>\n<p><a name=\"oWlz6\"></a></p>\n<h3 id=\"安装mysql-jdbc驱动\"><a href=\"#安装mysql-jdbc驱动\" class=\"headerlink\" title=\"安装mysql jdbc驱动\"></a>安装mysql jdbc驱动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /opt/cloudera/parcels/STREAMSETS_DATACOLLECTOR/streamsets-libs/streamsets-datacollector-mysql-binlog-lib/lib/ https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar</span><br></pre></td></tr></table></figure>\n<p>重启streamsets</p>\n<p><a name=\"qXsmC\"></a></p>\n<h3 id=\"创建pipeline\"><a href=\"#创建pipeline\" class=\"headerlink\" title=\"创建pipeline\"></a>创建pipeline</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561022971274-512e79c5-11a2-4910-85e2-aabeba28edb2.png#align=left&amp;display=inline&amp;height=483&amp;name=image.png&amp;originHeight=483&amp;originWidth=1245&amp;size=57203&amp;status=done&amp;width=1245\" alt=\"image.png\"><br><a name=\"vDqzm\"></a></p>\n<h3 id=\"配置mysql-binlog解析及处理\"><a href=\"#配置mysql-binlog解析及处理\" class=\"headerlink\" title=\"配置mysql binlog解析及处理\"></a>配置mysql binlog解析及处理</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023067141-a97a2e75-8272-472e-8d31-812be2123206.png#align=left&amp;display=inline&amp;height=703&amp;name=image.png&amp;originHeight=703&amp;originWidth=831&amp;size=64114&amp;status=done&amp;width=831\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023232872-f63802b3-7be6-4968-9fb9-2f7c368e7c3b.png#align=left&amp;display=inline&amp;height=649&amp;name=image.png&amp;originHeight=649&amp;originWidth=781&amp;size=44770&amp;status=done&amp;width=781\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&amp;display=inline&amp;height=345&amp;name=image.png&amp;originHeight=345&amp;originWidth=776&amp;size=40429&amp;status=done&amp;width=776\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023323874-819a18b1-42f9-404b-9eac-17d7b7190b3c.png#align=left&amp;display=inline&amp;height=211&amp;name=image.png&amp;originHeight=211&amp;originWidth=658&amp;size=15146&amp;status=done&amp;width=658\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023405577-345c7f5d-e682-45ba-b684-450707e4d26d.png#align=left&amp;display=inline&amp;height=482&amp;name=image.png&amp;originHeight=482&amp;originWidth=880&amp;size=57665&amp;status=done&amp;width=880\" alt=\"image.png\"><br>配置目标端<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023517902-fcf0a0d8-7360-4ca9-aed4-2b2f88b07ce7.png#align=left&amp;display=inline&amp;height=428&amp;name=image.png&amp;originHeight=428&amp;originWidth=303&amp;size=22581&amp;status=done&amp;width=303\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023530221-53bf1e14-b792-40bf-9fcf-234b3c1ca097.png#align=left&amp;display=inline&amp;height=583&amp;name=image.png&amp;originHeight=583&amp;originWidth=773&amp;size=28852&amp;status=done&amp;width=773\" alt=\"image.png\"></p>\n<p><a name=\"AEeSg\"></a></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023620269-fd10f7a4-f48d-44d7-a61f-d03a5fc8dead.png#align=left&amp;display=inline&amp;height=458&amp;name=image.png&amp;originHeight=458&amp;originWidth=1808&amp;size=69037&amp;status=done&amp;width=1808\" alt=\"image.png\"></p>\n<p><a name=\"WoQS7\"></a></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>此处使用mysql自带的压测工具 <code>mysqlslap.exe</code> 进行测试 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/mysqlslap --user=root --password=xxxxxx --concurrency=50 --number-int-cols=5 --number-char-cols=20 --auto-generate-sql --number-of-queries=100000 --auto-generate-sql-load-type=write --host=192.168.0.123 --port=3306</span><br><span class=\"line\">--user 用户(需要有建库建表权限)</span><br><span class=\"line\">--password 密码</span><br><span class=\"line\">--concurrency 并发数</span><br><span class=\"line\">--number-int-cols 表内有5个数字列</span><br><span class=\"line\">--number-char-cols 表内有20个字符串列</span><br><span class=\"line\">--auto-generate-sql 自动生成脚本</span><br><span class=\"line\">--number-of-queries 总执行次数</span><br><span class=\"line\">--auto-generate-sql-load-type=write 只执行写入操作</span><br><span class=\"line\">--host mysql 主机</span><br><span class=\"line\">--port 端口</span><br></pre></td></tr></table></figure>\n<p>下方有监控报表</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561022869352-3d191209-41df-43ef-a7a6-5b7f097f4ba0.png#align=left&amp;display=inline&amp;height=883&amp;originHeight=883&amp;originWidth=1896&amp;status=done&amp;width=1896\" alt=\"\"></p>\n<p><a name=\"41HXC\"></a></p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><pre><code>![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1561021775509-fa60a34d-8e71-4e30-aa65-88a23521fb26.png)\n</code></pre><p>  <br>同步不一致导致的错误，手动从<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561023290961-315616ad-faed-405c-af47-f1bed5816b07.png#align=left&amp;display=inline&amp;height=332&amp;originHeight=345&amp;originWidth=776&amp;status=done&amp;width=746\" alt=\"\"><br>设置偏移量<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1561022441978-aefea073-d2eb-41b6-863c-733229e35252.png#align=left&amp;display=inline&amp;height=709&amp;name=image.png&amp;originHeight=709&amp;originWidth=900&amp;size=124020&amp;status=done&amp;width=900\" alt=\"image.png\"></p>\n<p>如果报错 <code>Pipeline Status: RUNNING_ERROR: For input string: &quot;&quot;xxxx&quot;</code>   ，把my.cnf改成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server-id=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>-bin=mysql-bin</span><br><span class=\"line\">binlog_format=ROW</span><br><span class=\"line\">sync_binlog=1</span><br><span class=\"line\">binlog_gtid_simple_recovery=ON</span><br><span class=\"line\">log_slave_updates=ON</span><br><span class=\"line\">gtid_mode=ON</span><br><span class=\"line\">enforce_gtid_consistency=ON</span><br></pre></td></tr></table></figure>\n<p><a name=\"ePxB0\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/33504555\" target=\"_blank\" rel=\"noopener\">腾讯工程师带你深入解析 MySQL binlog</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/MySQLBinaryLog.html\" target=\"_blank\" rel=\"noopener\">Home/Origins/MySQL Binary Log</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/3.9.x/help/datacollector/UserGuide/Tutorial/BasicTutorial.html\" target=\"_blank\" rel=\"noopener\">Home/Tutorial/Basic Tutorial</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247488566&amp;idx=1&amp;sn=8c4350eb654453b2317de2b347b6e525&amp;chksm=ec2ac43fdb5d4d2964e2b074d02faaeebe202c2ba3565ac00f589b696644bdbfa8f6f4d9754e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">如何在CDH中安装和使用StreamSets</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1158163\" target=\"_blank\" rel=\"noopener\">如何使用StreamSets实现MySQL中变化数据实时写入HBase</a></li>\n</ul>\n"},{"title":"021-cdh6.2+kylin2.6.2","date":"2019-05-03T12:00:01.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第21篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍，如何使用大数据神兽Kylin(2.6.2)连接cdh6.2。\n\n<!-- more -->\n\n<a name=\"kHqRf\"></a>\n## 提示\n\n- 因为cdh6.2使用的是hadoop3，而目前的kylin3.0beta版本只是hadoop2,所以只能安装kylin2.5+,此处选择kylin2.6.2-cdh60（cdh6.0版）\n\n<a name=\"0cU6y\"></a>\n## 安装kylin\n<a name=\"ZtEd1\"></a>\n### 下载kylin2.6.2二进制包\n\n```bash\nwget http://mirrors.tuna.tsinghua.edu.cn/apache/kylin/apache-kylin-2.6.2/apache-kylin-2.6.2-bin-cdh60.tar.gz\ntar zxf apache-kylin-2.6.2-bin-cdh60.tar.gz -C /usr/local/\nln -s /usr/local/apache-kylin-2.6.2-bin-cdh60 /usr/local/kylin\n```\n\n<a name=\"NtEtw\"></a>\n### 配置kylin环境变量\n\n```bash\ncat << EOF | sudo tee -a /etc/profile\n#设置java环境\nexport JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JAVA_HOME/jre/lib:\\$CLASSPATH\nexport KYLIN_HOME=/usr/local/kylin\nexport PATH=\\$JAVA_HOME/bin:\\$JAVA_HOME/jre/bin:\\$PATH\nexport CDH_HOME=/opt/cloudera/parcels/CDH\nexport HBASE_HOME=\\${CDH_HOME}/lib/hbase\nexport HBASE_CLASSPATH=\\${HBASE_HOME}/lib/hbase-common-2.1.0-cdh6.2.0.jar\nEOF\nsource /etc/profile\n```\n\n如果不加 `$HBASE_HOME` 会报 `hbase-common lib not found` \n\n```\nRetrieving hadoop conf dir...\nKYLIN_HOME is set to /usr/local/kylin\nRetrieving hive dependency...\nRetrieving hbase dependency...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nhbase-common lib not found\n```\n\n<a name=\"8xtqi\"></a>\n### 在hdfs创建kylin和spark目录\n\n```bash\nexport HADOOP_USER_NAME=hdfs\n```\n\n否则会报\n```bash\n$KYLIN_HOME/bin/check-env.sh\nRetrieving hadoop conf dir...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nKYLIN_HOME is set to /usr/local/kylin\nmkdir: Permission denied: user=root, access=WRITE, inode=\"/kylin\":hdfs:supergroup:drwxr-xr-x\nFailed to create hdfs:///kylin/spark-history. Please make sure the user has right to access hdfs:///kylin/spark-history\n```\n\n```bash\nyum install -y net-tools\n```\n <br />否则会报\n```bash\n$KYLIN_HOME/bin/check-env.sh\nRetrieving hadoop conf dir...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nKYLIN_HOME is set to /usr/local/kylin\n/usr/local/kylin/bin/check-port-availability.sh: line 27: netstat: command not found\n```\n\n<a name=\"7pUpu\"></a>\n### 下载spark\n\n```bash\n$KYLIN_HOME/bin/download-spark.sh\n```\n否则会报 \n\n```bash\n$KYLIN_HOME/bin/kylin.sh start\nRetrieving hadoop conf dir...\n错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty\nKYLIN_HOME is set to /usr/local/kylin\nRetrieving hive dependency...\nRetrieving hbase dependency...\n错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty\nRetrieving hadoop conf dir...\n错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty\nRetrieving kafka dependency...\nRetrieving Spark dependency...\nspark not found, set SPARK_HOME, or run bin/download-spark.sh\n```\n\n如果知己指定了不兼容的spark版本，可能会导致404，参考 [Kylin web UI http 404 error](https://issues.apache.org/jira/browse/KYLIN-3872)\n\n<a name=\"xQuTy\"></a>\n### 启动kylin\n\n```bash\n$KYLIN_HOME/bin/kylin.sh start\n```\n如果成功会输出\n\n```\nA new Kylin instance is started by root. To stop it, run 'kylin.sh stop'\nCheck the log at /usr/local/kylin/logs/kylin.log\nWeb UI is at http://<hostname>:7070/kylin\n```\n浏览器打开 http://IP:7070/kylin ，用户名密码是 `ADMIN/KYLIN` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557482549401-ccd81caf-6b9f-4dad-8899-1262307ef09a.png#align=left&display=inline&height=445&name=image.png&originHeight=445&originWidth=822&size=19890&status=done&width=822)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557482608635-8a90d635-862f-4695-b3b7-93c634267a5c.png#align=left&display=inline&height=738&name=image.png&originHeight=738&originWidth=979&size=46329&status=done&width=979)\n\n<a name=\"a3XdE\"></a>\n## 使用kylin(以官方demo演示)\n<a name=\"kCo8L\"></a>\n### 导入数据\n\n```bash\n$KYLIN_HOME/bin/sample.sh\n\nRetrieving hadoop conf dir...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nLoading sample data into HDFS tmp path: /tmp/kylin/sample_cube/data\nGoing to create sample tables in hive to database DEFAULT by cli\nWARNING: Use \"yarn jar\" to launch YARN applications.\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/log4j-slf4j-impl-2.8.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]\n\nLogging initialized using configuration in jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/hive-common-2.1.1-cdh6.2.0.jar!/hive-log4j2.properties Async: false\nOK\n//....\nSample cube is created successfully in project 'learn_kylin'.\n\n** Restart Kylin Server or click Web UI => System Tab => Reload Metadata to take effect **\n\n```\n\n<a name=\"aQUhJ\"></a>\n### 重新加载元数据\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483583704-c21d7c5b-00b8-4d77-a50f-dc8fd534fe86.png#align=left&display=inline&height=581&name=image.png&originHeight=581&originWidth=1641&size=124786&status=done&width=1641)<br />选择 learn_kylin\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483605102-3911751e-a861-4754-9dca-3b0311657f55.png#align=left&display=inline&height=149&name=image.png&originHeight=149&originWidth=222&size=7898&status=done&width=222)\n<a name=\"UmJvr\"></a>\n### 构建Cube\n选择 Model，选择kylin_sales_model,选择build<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483714167-c3f0370c-7a1a-4f46-a532-8123b4d4b9f6.png#align=left&display=inline&height=642&name=image.png&originHeight=642&originWidth=1901&size=80161&status=done&width=1901)<br />此处选择起止日期。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483733469-dae19d83-b08a-4d72-9a05-1de253703e9f.png#align=left&display=inline&height=365&name=image.png&originHeight=365&originWidth=1512&size=26543&status=done&width=1512)<br />如果没关闭hdfs权限校验，此处肯定会build失败。可以通过右侧 `>` 图标点击查看进度。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557486437790-8e1c97a3-aebb-4866-857a-8ef3f0848d0c.png#align=left&display=inline&height=427&name=image.png&originHeight=427&originWidth=1871&size=53965&status=done&width=1871)<br />build成功后，回到Insight界面，此时已经成功构建出5张表了。\n\n<a name=\"PBL8A\"></a>\n### 讲解demo表\nKylin的示例是销售业务分析\n\n- KYLIN_SALES 事实表，存有销售订单的详细信息(卖家，商品分类，订单金额，商品数量等)\n- KYLIN_COUNTRY 维度表，存有国家信息(简写，名称等)\n- KYLIN_CATEGORY_GROUPINGS 维度表，存有商品分类的详细介绍(分类名称等)\n- KYLIN_CAL_DT 维度表，存有时间扩展信息(日期所在年始，月始，周始，年份，月份等)\n- KYLIN_ACCOUNT 维度表，存有账户信息(账户id，卖家等级，买家等级，国家等)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557486460421-1d88684e-825c-420d-9fdd-9e9717c28cb6.png#align=left&display=inline&height=576&name=image.png&originHeight=576&originWidth=1102&size=47232&status=done&width=1102)\n\n<a name=\"5dwAT\"></a>\n### 运行查询语句\n执行 `select count(1) from kylin_sales` 点击submit，下方会显示执行结果，以及执行耗时(此处是1.8秒)。kylin会缓存执行结果，再次执行发现变成了0.18秒<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557486561989-c58f3430-7336-49dc-9b47-14c68fb8c6d6.png#align=left&display=inline&height=771&name=image.png&originHeight=771&originWidth=1870&size=80062&status=done&width=1870)<br />执行稍微复杂的SQL语句\n\n```sql\nselect sum(KYLIN_SALES.PRICE) \nas price_sum,KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME \nfrom KYLIN_SALES inner join KYLIN_CATEGORY_GROUPINGS\non KYLIN_SALES.LEAF_CATEG_ID = KYLIN_CATEGORY_GROUPINGS.LEAF_CATEG_ID and \nKYLIN_SALES.LSTG_SITE_ID = KYLIN_CATEGORY_GROUPINGS.SITE_ID\ngroup by KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME\norder by KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME asc,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME desc\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558172952282-191a44d2-d434-4aad-8eff-da8cb6f8fc76.png#align=left&display=inline&height=586&name=image.png&originHeight=586&originWidth=1456&size=63114&status=done&width=1456)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558172990808-29ba9fd6-dfab-4835-84df-c98c6fa80fb7.png#align=left&display=inline&height=638&name=image.png&originHeight=638&originWidth=1536&size=68562&status=done&width=1536)自带简单的可视化。\n\n<a name=\"jXA3N\"></a>\n## 参考资料\n\n- [如何在CDH中部署及使用Kylin](https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247489540&idx=1&sn=a9a2c9bbb065987cd8756635c146800d)\n- [Kylin web UI http 404 error](https://issues.apache.org/jira/browse/KYLIN-3872)\n- [Kylin 2.6.1 on Ambari 2.7.1.0 花式踩坑集锦](https://zhuanlan.zhihu.com/p/62187552)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","source":"_posts/cm6-kylin.md","raw":"\n---\n\ntitle: 021-cdh6.2+kylin2.6.2\n\ndate: 2019-05-03 20:00:01 +0800\n\ntags: [CDH,hadoop,大数据,KYLIN,OLAP,麒麟]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第21篇，定个小目标999，每周最少2篇。\n\n\n本文主要介绍，如何使用大数据神兽Kylin(2.6.2)连接cdh6.2。\n\n<!-- more -->\n\n<a name=\"kHqRf\"></a>\n## 提示\n\n- 因为cdh6.2使用的是hadoop3，而目前的kylin3.0beta版本只是hadoop2,所以只能安装kylin2.5+,此处选择kylin2.6.2-cdh60（cdh6.0版）\n\n<a name=\"0cU6y\"></a>\n## 安装kylin\n<a name=\"ZtEd1\"></a>\n### 下载kylin2.6.2二进制包\n\n```bash\nwget http://mirrors.tuna.tsinghua.edu.cn/apache/kylin/apache-kylin-2.6.2/apache-kylin-2.6.2-bin-cdh60.tar.gz\ntar zxf apache-kylin-2.6.2-bin-cdh60.tar.gz -C /usr/local/\nln -s /usr/local/apache-kylin-2.6.2-bin-cdh60 /usr/local/kylin\n```\n\n<a name=\"NtEtw\"></a>\n### 配置kylin环境变量\n\n```bash\ncat << EOF | sudo tee -a /etc/profile\n#设置java环境\nexport JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JAVA_HOME/jre/lib:\\$CLASSPATH\nexport KYLIN_HOME=/usr/local/kylin\nexport PATH=\\$JAVA_HOME/bin:\\$JAVA_HOME/jre/bin:\\$PATH\nexport CDH_HOME=/opt/cloudera/parcels/CDH\nexport HBASE_HOME=\\${CDH_HOME}/lib/hbase\nexport HBASE_CLASSPATH=\\${HBASE_HOME}/lib/hbase-common-2.1.0-cdh6.2.0.jar\nEOF\nsource /etc/profile\n```\n\n如果不加 `$HBASE_HOME` 会报 `hbase-common lib not found` \n\n```\nRetrieving hadoop conf dir...\nKYLIN_HOME is set to /usr/local/kylin\nRetrieving hive dependency...\nRetrieving hbase dependency...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nhbase-common lib not found\n```\n\n<a name=\"8xtqi\"></a>\n### 在hdfs创建kylin和spark目录\n\n```bash\nexport HADOOP_USER_NAME=hdfs\n```\n\n否则会报\n```bash\n$KYLIN_HOME/bin/check-env.sh\nRetrieving hadoop conf dir...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nKYLIN_HOME is set to /usr/local/kylin\nmkdir: Permission denied: user=root, access=WRITE, inode=\"/kylin\":hdfs:supergroup:drwxr-xr-x\nFailed to create hdfs:///kylin/spark-history. Please make sure the user has right to access hdfs:///kylin/spark-history\n```\n\n```bash\nyum install -y net-tools\n```\n <br />否则会报\n```bash\n$KYLIN_HOME/bin/check-env.sh\nRetrieving hadoop conf dir...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nKYLIN_HOME is set to /usr/local/kylin\n/usr/local/kylin/bin/check-port-availability.sh: line 27: netstat: command not found\n```\n\n<a name=\"7pUpu\"></a>\n### 下载spark\n\n```bash\n$KYLIN_HOME/bin/download-spark.sh\n```\n否则会报 \n\n```bash\n$KYLIN_HOME/bin/kylin.sh start\nRetrieving hadoop conf dir...\n错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty\nKYLIN_HOME is set to /usr/local/kylin\nRetrieving hive dependency...\nRetrieving hbase dependency...\n错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty\nRetrieving hadoop conf dir...\n错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty\nRetrieving kafka dependency...\nRetrieving Spark dependency...\nspark not found, set SPARK_HOME, or run bin/download-spark.sh\n```\n\n如果知己指定了不兼容的spark版本，可能会导致404，参考 [Kylin web UI http 404 error](https://issues.apache.org/jira/browse/KYLIN-3872)\n\n<a name=\"xQuTy\"></a>\n### 启动kylin\n\n```bash\n$KYLIN_HOME/bin/kylin.sh start\n```\n如果成功会输出\n\n```\nA new Kylin instance is started by root. To stop it, run 'kylin.sh stop'\nCheck the log at /usr/local/kylin/logs/kylin.log\nWeb UI is at http://<hostname>:7070/kylin\n```\n浏览器打开 http://IP:7070/kylin ，用户名密码是 `ADMIN/KYLIN` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557482549401-ccd81caf-6b9f-4dad-8899-1262307ef09a.png#align=left&display=inline&height=445&name=image.png&originHeight=445&originWidth=822&size=19890&status=done&width=822)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557482608635-8a90d635-862f-4695-b3b7-93c634267a5c.png#align=left&display=inline&height=738&name=image.png&originHeight=738&originWidth=979&size=46329&status=done&width=979)\n\n<a name=\"a3XdE\"></a>\n## 使用kylin(以官方demo演示)\n<a name=\"kCo8L\"></a>\n### 导入数据\n\n```bash\n$KYLIN_HOME/bin/sample.sh\n\nRetrieving hadoop conf dir...\nError: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty\nLoading sample data into HDFS tmp path: /tmp/kylin/sample_cube/data\nGoing to create sample tables in hive to database DEFAULT by cli\nWARNING: Use \"yarn jar\" to launch YARN applications.\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/log4j-slf4j-impl-2.8.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]\n\nLogging initialized using configuration in jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/hive-common-2.1.1-cdh6.2.0.jar!/hive-log4j2.properties Async: false\nOK\n//....\nSample cube is created successfully in project 'learn_kylin'.\n\n** Restart Kylin Server or click Web UI => System Tab => Reload Metadata to take effect **\n\n```\n\n<a name=\"aQUhJ\"></a>\n### 重新加载元数据\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483583704-c21d7c5b-00b8-4d77-a50f-dc8fd534fe86.png#align=left&display=inline&height=581&name=image.png&originHeight=581&originWidth=1641&size=124786&status=done&width=1641)<br />选择 learn_kylin\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483605102-3911751e-a861-4754-9dca-3b0311657f55.png#align=left&display=inline&height=149&name=image.png&originHeight=149&originWidth=222&size=7898&status=done&width=222)\n<a name=\"UmJvr\"></a>\n### 构建Cube\n选择 Model，选择kylin_sales_model,选择build<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483714167-c3f0370c-7a1a-4f46-a532-8123b4d4b9f6.png#align=left&display=inline&height=642&name=image.png&originHeight=642&originWidth=1901&size=80161&status=done&width=1901)<br />此处选择起止日期。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557483733469-dae19d83-b08a-4d72-9a05-1de253703e9f.png#align=left&display=inline&height=365&name=image.png&originHeight=365&originWidth=1512&size=26543&status=done&width=1512)<br />如果没关闭hdfs权限校验，此处肯定会build失败。可以通过右侧 `>` 图标点击查看进度。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557486437790-8e1c97a3-aebb-4866-857a-8ef3f0848d0c.png#align=left&display=inline&height=427&name=image.png&originHeight=427&originWidth=1871&size=53965&status=done&width=1871)<br />build成功后，回到Insight界面，此时已经成功构建出5张表了。\n\n<a name=\"PBL8A\"></a>\n### 讲解demo表\nKylin的示例是销售业务分析\n\n- KYLIN_SALES 事实表，存有销售订单的详细信息(卖家，商品分类，订单金额，商品数量等)\n- KYLIN_COUNTRY 维度表，存有国家信息(简写，名称等)\n- KYLIN_CATEGORY_GROUPINGS 维度表，存有商品分类的详细介绍(分类名称等)\n- KYLIN_CAL_DT 维度表，存有时间扩展信息(日期所在年始，月始，周始，年份，月份等)\n- KYLIN_ACCOUNT 维度表，存有账户信息(账户id，卖家等级，买家等级，国家等)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557486460421-1d88684e-825c-420d-9fdd-9e9717c28cb6.png#align=left&display=inline&height=576&name=image.png&originHeight=576&originWidth=1102&size=47232&status=done&width=1102)\n\n<a name=\"5dwAT\"></a>\n### 运行查询语句\n执行 `select count(1) from kylin_sales` 点击submit，下方会显示执行结果，以及执行耗时(此处是1.8秒)。kylin会缓存执行结果，再次执行发现变成了0.18秒<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1557486561989-c58f3430-7336-49dc-9b47-14c68fb8c6d6.png#align=left&display=inline&height=771&name=image.png&originHeight=771&originWidth=1870&size=80062&status=done&width=1870)<br />执行稍微复杂的SQL语句\n\n```sql\nselect sum(KYLIN_SALES.PRICE) \nas price_sum,KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME \nfrom KYLIN_SALES inner join KYLIN_CATEGORY_GROUPINGS\non KYLIN_SALES.LEAF_CATEG_ID = KYLIN_CATEGORY_GROUPINGS.LEAF_CATEG_ID and \nKYLIN_SALES.LSTG_SITE_ID = KYLIN_CATEGORY_GROUPINGS.SITE_ID\ngroup by KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME\norder by KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME asc,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME desc\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558172952282-191a44d2-d434-4aad-8eff-da8cb6f8fc76.png#align=left&display=inline&height=586&name=image.png&originHeight=586&originWidth=1456&size=63114&status=done&width=1456)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1558172990808-29ba9fd6-dfab-4835-84df-c98c6fa80fb7.png#align=left&display=inline&height=638&name=image.png&originHeight=638&originWidth=1536&size=68562&status=done&width=1536)自带简单的可视化。\n\n<a name=\"jXA3N\"></a>\n## 参考资料\n\n- [如何在CDH中部署及使用Kylin](https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247489540&idx=1&sn=a9a2c9bbb065987cd8756635c146800d)\n- [Kylin web UI http 404 error](https://issues.apache.org/jira/browse/KYLIN-3872)\n- [Kylin 2.6.1 on Ambari 2.7.1.0 花式踩坑集锦](https://zhuanlan.zhihu.com/p/62187552)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","slug":"cm6-kylin","published":1,"updated":"2019-08-16T06:11:15.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojim00d524dog0c72hnt","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第21篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍，如何使用大数据神兽Kylin(2.6.2)连接cdh6.2。</p>\n<a id=\"more\"></a>\n<p><a name=\"kHqRf\"></a></p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><ul>\n<li>因为cdh6.2使用的是hadoop3，而目前的kylin3.0beta版本只是hadoop2,所以只能安装kylin2.5+,此处选择kylin2.6.2-cdh60（cdh6.0版）</li>\n</ul>\n<p><a name=\"0cU6y\"></a></p>\n<h2 id=\"安装kylin\"><a href=\"#安装kylin\" class=\"headerlink\" title=\"安装kylin\"></a>安装kylin</h2><p><a name=\"ZtEd1\"></a></p>\n<h3 id=\"下载kylin2-6-2二进制包\"><a href=\"#下载kylin2-6-2二进制包\" class=\"headerlink\" title=\"下载kylin2.6.2二进制包\"></a>下载kylin2.6.2二进制包</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.tuna.tsinghua.edu.cn/apache/kylin/apache-kylin-2.6.2/apache-kylin-2.6.2-bin-cdh60.tar.gz</span><br><span class=\"line\">tar zxf apache-kylin-2.6.2-bin-cdh60.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/apache-kylin-2.6.2-bin-cdh60 /usr/<span class=\"built_in\">local</span>/kylin</span><br></pre></td></tr></table></figure>\n<p><a name=\"NtEtw\"></a></p>\n<h3 id=\"配置kylin环境变量\"><a href=\"#配置kylin环境变量\" class=\"headerlink\" title=\"配置kylin环境变量\"></a>配置kylin环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:\\<span class=\"variable\">$JAVA_HOME</span>/lib:\\<span class=\"variable\">$JAVA_HOME</span>/jre/lib:\\<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KYLIN_HOME=/usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$JAVA_HOME</span>/bin:\\<span class=\"variable\">$JAVA_HOME</span>/jre/bin:\\<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CDH_HOME=/opt/cloudera/parcels/CDH</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_HOME=\\<span class=\"variable\">$&#123;CDH_HOME&#125;</span>/lib/hbase</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_CLASSPATH=\\<span class=\"variable\">$&#123;HBASE_HOME&#125;</span>/lib/hbase-common-2.1.0-cdh6.2.0.jar</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>如果不加 <code>$HBASE_HOME</code> 会报 <code>hbase-common lib not found</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">KYLIN_HOME is set to /usr/local/kylin</span><br><span class=\"line\">Retrieving hive dependency...</span><br><span class=\"line\">Retrieving hbase dependency...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">hbase-common lib not found</span><br></pre></td></tr></table></figure>\n<p><a name=\"8xtqi\"></a></p>\n<h3 id=\"在hdfs创建kylin和spark目录\"><a href=\"#在hdfs创建kylin和spark目录\" class=\"headerlink\" title=\"在hdfs创建kylin和spark目录\"></a>在hdfs创建kylin和spark目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_USER_NAME=hdfs</span><br></pre></td></tr></table></figure>\n<p>否则会报<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/check-env.sh</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">KYLIN_HOME is <span class=\"built_in\">set</span> to /usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\">mkdir: Permission denied: user=root, access=WRITE, inode=<span class=\"string\">\"/kylin\"</span>:hdfs:supergroup:drwxr-xr-x</span><br><span class=\"line\">Failed to create hdfs:///kylin/spark-history. Please make sure the user has right to access hdfs:///kylin/spark-history</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y net-tools</span><br></pre></td></tr></table></figure>\n<p> <br>否则会报<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/check-env.sh</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">KYLIN_HOME is <span class=\"built_in\">set</span> to /usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/kylin/bin/check-port-availability.sh: line 27: netstat: <span class=\"built_in\">command</span> not found</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"7pUpu\"></a></p>\n<h3 id=\"下载spark\"><a href=\"#下载spark\" class=\"headerlink\" title=\"下载spark\"></a>下载spark</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/download-spark.sh</span><br></pre></td></tr></table></figure>\n<p>否则会报 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/kylin.sh start</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">KYLIN_HOME is <span class=\"built_in\">set</span> to /usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\">Retrieving hive dependency...</span><br><span class=\"line\">Retrieving hbase dependency...</span><br><span class=\"line\">错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">Retrieving kafka dependency...</span><br><span class=\"line\">Retrieving Spark dependency...</span><br><span class=\"line\">spark not found, <span class=\"built_in\">set</span> SPARK_HOME, or run bin/download-spark.sh</span><br></pre></td></tr></table></figure>\n<p>如果知己指定了不兼容的spark版本，可能会导致404，参考 <a href=\"https://issues.apache.org/jira/browse/KYLIN-3872\" target=\"_blank\" rel=\"noopener\">Kylin web UI http 404 error</a></p>\n<p><a name=\"xQuTy\"></a></p>\n<h3 id=\"启动kylin\"><a href=\"#启动kylin\" class=\"headerlink\" title=\"启动kylin\"></a>启动kylin</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/kylin.sh start</span><br></pre></td></tr></table></figure>\n<p>如果成功会输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">A new Kylin instance is started by root. To stop it, run &apos;kylin.sh stop&apos;</span><br><span class=\"line\">Check the log at /usr/local/kylin/logs/kylin.log</span><br><span class=\"line\">Web UI is at http://&lt;hostname&gt;:7070/kylin</span><br></pre></td></tr></table></figure>\n<p>浏览器打开 <a href=\"http://IP:7070/kylin\" target=\"_blank\" rel=\"noopener\">http://IP:7070/kylin</a> ，用户名密码是 <code>ADMIN/KYLIN</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557482549401-ccd81caf-6b9f-4dad-8899-1262307ef09a.png#align=left&amp;display=inline&amp;height=445&amp;name=image.png&amp;originHeight=445&amp;originWidth=822&amp;size=19890&amp;status=done&amp;width=822\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557482608635-8a90d635-862f-4695-b3b7-93c634267a5c.png#align=left&amp;display=inline&amp;height=738&amp;name=image.png&amp;originHeight=738&amp;originWidth=979&amp;size=46329&amp;status=done&amp;width=979\" alt=\"image.png\"></p>\n<p><a name=\"a3XdE\"></a></p>\n<h2 id=\"使用kylin-以官方demo演示\"><a href=\"#使用kylin-以官方demo演示\" class=\"headerlink\" title=\"使用kylin(以官方demo演示)\"></a>使用kylin(以官方demo演示)</h2><p><a name=\"kCo8L\"></a></p>\n<h3 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/sample.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">Loading sample data into HDFS tmp path: /tmp/kylin/sample_cube/data</span><br><span class=\"line\">Going to create sample tables <span class=\"keyword\">in</span> hive to database DEFAULT by cli</span><br><span class=\"line\">WARNING: Use <span class=\"string\">\"yarn jar\"</span> to launch YARN applications.</span><br><span class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class=\"line\">SLF4J: Found binding <span class=\"keyword\">in</span> [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/log4j-slf4j-impl-2.8.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: Found binding <span class=\"keyword\">in</span> [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: See http://www.slf4j.org/codes.html<span class=\"comment\">#multiple_bindings for an explanation.</span></span><br><span class=\"line\">SLF4J: Actual binding is of <span class=\"built_in\">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class=\"line\"></span><br><span class=\"line\">Logging initialized using configuration <span class=\"keyword\">in</span> jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/hive-common-2.1.1-cdh6.2.0.jar!/hive-log4j2.properties Async: <span class=\"literal\">false</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">//....</span><br><span class=\"line\">Sample cube is created successfully <span class=\"keyword\">in</span> project <span class=\"string\">'learn_kylin'</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">** Restart Kylin Server or click Web UI =&gt; System Tab =&gt; Reload Metadata to take effect **</span><br></pre></td></tr></table></figure>\n<p><a name=\"aQUhJ\"></a></p>\n<h3 id=\"重新加载元数据\"><a href=\"#重新加载元数据\" class=\"headerlink\" title=\"重新加载元数据\"></a>重新加载元数据</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483583704-c21d7c5b-00b8-4d77-a50f-dc8fd534fe86.png#align=left&amp;display=inline&amp;height=581&amp;name=image.png&amp;originHeight=581&amp;originWidth=1641&amp;size=124786&amp;status=done&amp;width=1641\" alt=\"image.png\"><br>选择 learn_kylin</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483605102-3911751e-a861-4754-9dca-3b0311657f55.png#align=left&amp;display=inline&amp;height=149&amp;name=image.png&amp;originHeight=149&amp;originWidth=222&amp;size=7898&amp;status=done&amp;width=222\" alt=\"image.png\"><br><a name=\"UmJvr\"></a></p>\n<h3 id=\"构建Cube\"><a href=\"#构建Cube\" class=\"headerlink\" title=\"构建Cube\"></a>构建Cube</h3><p>选择 Model，选择kylin_sales_model,选择build<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483714167-c3f0370c-7a1a-4f46-a532-8123b4d4b9f6.png#align=left&amp;display=inline&amp;height=642&amp;name=image.png&amp;originHeight=642&amp;originWidth=1901&amp;size=80161&amp;status=done&amp;width=1901\" alt=\"image.png\"><br>此处选择起止日期。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483733469-dae19d83-b08a-4d72-9a05-1de253703e9f.png#align=left&amp;display=inline&amp;height=365&amp;name=image.png&amp;originHeight=365&amp;originWidth=1512&amp;size=26543&amp;status=done&amp;width=1512\" alt=\"image.png\"><br>如果没关闭hdfs权限校验，此处肯定会build失败。可以通过右侧 <code>&gt;</code> 图标点击查看进度。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557486437790-8e1c97a3-aebb-4866-857a-8ef3f0848d0c.png#align=left&amp;display=inline&amp;height=427&amp;name=image.png&amp;originHeight=427&amp;originWidth=1871&amp;size=53965&amp;status=done&amp;width=1871\" alt=\"image.png\"><br>build成功后，回到Insight界面，此时已经成功构建出5张表了。</p>\n<p><a name=\"PBL8A\"></a></p>\n<h3 id=\"讲解demo表\"><a href=\"#讲解demo表\" class=\"headerlink\" title=\"讲解demo表\"></a>讲解demo表</h3><p>Kylin的示例是销售业务分析</p>\n<ul>\n<li>KYLIN_SALES 事实表，存有销售订单的详细信息(卖家，商品分类，订单金额，商品数量等)</li>\n<li>KYLIN_COUNTRY 维度表，存有国家信息(简写，名称等)</li>\n<li>KYLIN_CATEGORY_GROUPINGS 维度表，存有商品分类的详细介绍(分类名称等)</li>\n<li>KYLIN_CAL_DT 维度表，存有时间扩展信息(日期所在年始，月始，周始，年份，月份等)</li>\n<li>KYLIN_ACCOUNT 维度表，存有账户信息(账户id，卖家等级，买家等级，国家等)</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557486460421-1d88684e-825c-420d-9fdd-9e9717c28cb6.png#align=left&amp;display=inline&amp;height=576&amp;name=image.png&amp;originHeight=576&amp;originWidth=1102&amp;size=47232&amp;status=done&amp;width=1102\" alt=\"image.png\"></p>\n<p><a name=\"5dwAT\"></a></p>\n<h3 id=\"运行查询语句\"><a href=\"#运行查询语句\" class=\"headerlink\" title=\"运行查询语句\"></a>运行查询语句</h3><p>执行 <code>select count(1) from kylin_sales</code> 点击submit，下方会显示执行结果，以及执行耗时(此处是1.8秒)。kylin会缓存执行结果，再次执行发现变成了0.18秒<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557486561989-c58f3430-7336-49dc-9b47-14c68fb8c6d6.png#align=left&amp;display=inline&amp;height=771&amp;name=image.png&amp;originHeight=771&amp;originWidth=1870&amp;size=80062&amp;status=done&amp;width=1870\" alt=\"image.png\"><br>执行稍微复杂的SQL语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sum</span>(KYLIN_SALES.PRICE) </span><br><span class=\"line\"><span class=\"keyword\">as</span> price_sum,KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME </span><br><span class=\"line\"><span class=\"keyword\">from</span> KYLIN_SALES <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> KYLIN_CATEGORY_GROUPINGS</span><br><span class=\"line\"><span class=\"keyword\">on</span> KYLIN_SALES.LEAF_CATEG_ID = KYLIN_CATEGORY_GROUPINGS.LEAF_CATEG_ID <span class=\"keyword\">and</span> </span><br><span class=\"line\">KYLIN_SALES.LSTG_SITE_ID = KYLIN_CATEGORY_GROUPINGS.SITE_ID</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME <span class=\"keyword\">asc</span>,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558172952282-191a44d2-d434-4aad-8eff-da8cb6f8fc76.png#align=left&amp;display=inline&amp;height=586&amp;name=image.png&amp;originHeight=586&amp;originWidth=1456&amp;size=63114&amp;status=done&amp;width=1456\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558172990808-29ba9fd6-dfab-4835-84df-c98c6fa80fb7.png#align=left&amp;display=inline&amp;height=638&amp;name=image.png&amp;originHeight=638&amp;originWidth=1536&amp;size=68562&amp;status=done&amp;width=1536\" alt=\"image.png\">自带简单的可视化。</p>\n<p><a name=\"jXA3N\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247489540&amp;idx=1&amp;sn=a9a2c9bbb065987cd8756635c146800d\" target=\"_blank\" rel=\"noopener\">如何在CDH中部署及使用Kylin</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/KYLIN-3872\" target=\"_blank\" rel=\"noopener\">Kylin web UI http 404 error</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/62187552\" target=\"_blank\" rel=\"noopener\">Kylin 2.6.1 on Ambari 2.7.1.0 花式踩坑集锦</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第21篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要介绍，如何使用大数据神兽Kylin(2.6.2)连接cdh6.2。</p>","more":"<p><a name=\"kHqRf\"></a></p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><ul>\n<li>因为cdh6.2使用的是hadoop3，而目前的kylin3.0beta版本只是hadoop2,所以只能安装kylin2.5+,此处选择kylin2.6.2-cdh60（cdh6.0版）</li>\n</ul>\n<p><a name=\"0cU6y\"></a></p>\n<h2 id=\"安装kylin\"><a href=\"#安装kylin\" class=\"headerlink\" title=\"安装kylin\"></a>安装kylin</h2><p><a name=\"ZtEd1\"></a></p>\n<h3 id=\"下载kylin2-6-2二进制包\"><a href=\"#下载kylin2-6-2二进制包\" class=\"headerlink\" title=\"下载kylin2.6.2二进制包\"></a>下载kylin2.6.2二进制包</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.tuna.tsinghua.edu.cn/apache/kylin/apache-kylin-2.6.2/apache-kylin-2.6.2-bin-cdh60.tar.gz</span><br><span class=\"line\">tar zxf apache-kylin-2.6.2-bin-cdh60.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/apache-kylin-2.6.2-bin-cdh60 /usr/<span class=\"built_in\">local</span>/kylin</span><br></pre></td></tr></table></figure>\n<p><a name=\"NtEtw\"></a></p>\n<h3 id=\"配置kylin环境变量\"><a href=\"#配置kylin环境变量\" class=\"headerlink\" title=\"配置kylin环境变量\"></a>配置kylin环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#设置java环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera/</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:\\<span class=\"variable\">$JAVA_HOME</span>/lib:\\<span class=\"variable\">$JAVA_HOME</span>/jre/lib:\\<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KYLIN_HOME=/usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$JAVA_HOME</span>/bin:\\<span class=\"variable\">$JAVA_HOME</span>/jre/bin:\\<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CDH_HOME=/opt/cloudera/parcels/CDH</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_HOME=\\<span class=\"variable\">$&#123;CDH_HOME&#125;</span>/lib/hbase</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_CLASSPATH=\\<span class=\"variable\">$&#123;HBASE_HOME&#125;</span>/lib/hbase-common-2.1.0-cdh6.2.0.jar</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>如果不加 <code>$HBASE_HOME</code> 会报 <code>hbase-common lib not found</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">KYLIN_HOME is set to /usr/local/kylin</span><br><span class=\"line\">Retrieving hive dependency...</span><br><span class=\"line\">Retrieving hbase dependency...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">hbase-common lib not found</span><br></pre></td></tr></table></figure>\n<p><a name=\"8xtqi\"></a></p>\n<h3 id=\"在hdfs创建kylin和spark目录\"><a href=\"#在hdfs创建kylin和spark目录\" class=\"headerlink\" title=\"在hdfs创建kylin和spark目录\"></a>在hdfs创建kylin和spark目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_USER_NAME=hdfs</span><br></pre></td></tr></table></figure>\n<p>否则会报<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/check-env.sh</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">KYLIN_HOME is <span class=\"built_in\">set</span> to /usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\">mkdir: Permission denied: user=root, access=WRITE, inode=<span class=\"string\">\"/kylin\"</span>:hdfs:supergroup:drwxr-xr-x</span><br><span class=\"line\">Failed to create hdfs:///kylin/spark-history. Please make sure the user has right to access hdfs:///kylin/spark-history</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y net-tools</span><br></pre></td></tr></table></figure>\n<p> <br>否则会报<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/check-env.sh</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">KYLIN_HOME is <span class=\"built_in\">set</span> to /usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/kylin/bin/check-port-availability.sh: line 27: netstat: <span class=\"built_in\">command</span> not found</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"7pUpu\"></a></p>\n<h3 id=\"下载spark\"><a href=\"#下载spark\" class=\"headerlink\" title=\"下载spark\"></a>下载spark</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/download-spark.sh</span><br></pre></td></tr></table></figure>\n<p>否则会报 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/kylin.sh start</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">KYLIN_HOME is <span class=\"built_in\">set</span> to /usr/<span class=\"built_in\">local</span>/kylin</span><br><span class=\"line\">Retrieving hive dependency...</span><br><span class=\"line\">Retrieving hbase dependency...</span><br><span class=\"line\">错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">错误: 找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">Retrieving kafka dependency...</span><br><span class=\"line\">Retrieving Spark dependency...</span><br><span class=\"line\">spark not found, <span class=\"built_in\">set</span> SPARK_HOME, or run bin/download-spark.sh</span><br></pre></td></tr></table></figure>\n<p>如果知己指定了不兼容的spark版本，可能会导致404，参考 <a href=\"https://issues.apache.org/jira/browse/KYLIN-3872\" target=\"_blank\" rel=\"noopener\">Kylin web UI http 404 error</a></p>\n<p><a name=\"xQuTy\"></a></p>\n<h3 id=\"启动kylin\"><a href=\"#启动kylin\" class=\"headerlink\" title=\"启动kylin\"></a>启动kylin</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/kylin.sh start</span><br></pre></td></tr></table></figure>\n<p>如果成功会输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">A new Kylin instance is started by root. To stop it, run &apos;kylin.sh stop&apos;</span><br><span class=\"line\">Check the log at /usr/local/kylin/logs/kylin.log</span><br><span class=\"line\">Web UI is at http://&lt;hostname&gt;:7070/kylin</span><br></pre></td></tr></table></figure>\n<p>浏览器打开 <a href=\"http://IP:7070/kylin\" target=\"_blank\" rel=\"noopener\">http://IP:7070/kylin</a> ，用户名密码是 <code>ADMIN/KYLIN</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557482549401-ccd81caf-6b9f-4dad-8899-1262307ef09a.png#align=left&amp;display=inline&amp;height=445&amp;name=image.png&amp;originHeight=445&amp;originWidth=822&amp;size=19890&amp;status=done&amp;width=822\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557482608635-8a90d635-862f-4695-b3b7-93c634267a5c.png#align=left&amp;display=inline&amp;height=738&amp;name=image.png&amp;originHeight=738&amp;originWidth=979&amp;size=46329&amp;status=done&amp;width=979\" alt=\"image.png\"></p>\n<p><a name=\"a3XdE\"></a></p>\n<h2 id=\"使用kylin-以官方demo演示\"><a href=\"#使用kylin-以官方demo演示\" class=\"headerlink\" title=\"使用kylin(以官方demo演示)\"></a>使用kylin(以官方demo演示)</h2><p><a name=\"kCo8L\"></a></p>\n<h3 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$KYLIN_HOME</span>/bin/sample.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Retrieving hadoop conf dir...</span><br><span class=\"line\">Error: Could not find or load main class org.apache.hadoop.hbase.util.GetJavaProperty</span><br><span class=\"line\">Loading sample data into HDFS tmp path: /tmp/kylin/sample_cube/data</span><br><span class=\"line\">Going to create sample tables <span class=\"keyword\">in</span> hive to database DEFAULT by cli</span><br><span class=\"line\">WARNING: Use <span class=\"string\">\"yarn jar\"</span> to launch YARN applications.</span><br><span class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class=\"line\">SLF4J: Found binding <span class=\"keyword\">in</span> [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/log4j-slf4j-impl-2.8.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: Found binding <span class=\"keyword\">in</span> [jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: See http://www.slf4j.org/codes.html<span class=\"comment\">#multiple_bindings for an explanation.</span></span><br><span class=\"line\">SLF4J: Actual binding is of <span class=\"built_in\">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class=\"line\"></span><br><span class=\"line\">Logging initialized using configuration <span class=\"keyword\">in</span> jar:file:/opt/cloudera/parcels/CDH-6.2.0-1.cdh6.2.0.p0.967373/jars/hive-common-2.1.1-cdh6.2.0.jar!/hive-log4j2.properties Async: <span class=\"literal\">false</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">//....</span><br><span class=\"line\">Sample cube is created successfully <span class=\"keyword\">in</span> project <span class=\"string\">'learn_kylin'</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">** Restart Kylin Server or click Web UI =&gt; System Tab =&gt; Reload Metadata to take effect **</span><br></pre></td></tr></table></figure>\n<p><a name=\"aQUhJ\"></a></p>\n<h3 id=\"重新加载元数据\"><a href=\"#重新加载元数据\" class=\"headerlink\" title=\"重新加载元数据\"></a>重新加载元数据</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483583704-c21d7c5b-00b8-4d77-a50f-dc8fd534fe86.png#align=left&amp;display=inline&amp;height=581&amp;name=image.png&amp;originHeight=581&amp;originWidth=1641&amp;size=124786&amp;status=done&amp;width=1641\" alt=\"image.png\"><br>选择 learn_kylin</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483605102-3911751e-a861-4754-9dca-3b0311657f55.png#align=left&amp;display=inline&amp;height=149&amp;name=image.png&amp;originHeight=149&amp;originWidth=222&amp;size=7898&amp;status=done&amp;width=222\" alt=\"image.png\"><br><a name=\"UmJvr\"></a></p>\n<h3 id=\"构建Cube\"><a href=\"#构建Cube\" class=\"headerlink\" title=\"构建Cube\"></a>构建Cube</h3><p>选择 Model，选择kylin_sales_model,选择build<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483714167-c3f0370c-7a1a-4f46-a532-8123b4d4b9f6.png#align=left&amp;display=inline&amp;height=642&amp;name=image.png&amp;originHeight=642&amp;originWidth=1901&amp;size=80161&amp;status=done&amp;width=1901\" alt=\"image.png\"><br>此处选择起止日期。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557483733469-dae19d83-b08a-4d72-9a05-1de253703e9f.png#align=left&amp;display=inline&amp;height=365&amp;name=image.png&amp;originHeight=365&amp;originWidth=1512&amp;size=26543&amp;status=done&amp;width=1512\" alt=\"image.png\"><br>如果没关闭hdfs权限校验，此处肯定会build失败。可以通过右侧 <code>&gt;</code> 图标点击查看进度。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557486437790-8e1c97a3-aebb-4866-857a-8ef3f0848d0c.png#align=left&amp;display=inline&amp;height=427&amp;name=image.png&amp;originHeight=427&amp;originWidth=1871&amp;size=53965&amp;status=done&amp;width=1871\" alt=\"image.png\"><br>build成功后，回到Insight界面，此时已经成功构建出5张表了。</p>\n<p><a name=\"PBL8A\"></a></p>\n<h3 id=\"讲解demo表\"><a href=\"#讲解demo表\" class=\"headerlink\" title=\"讲解demo表\"></a>讲解demo表</h3><p>Kylin的示例是销售业务分析</p>\n<ul>\n<li>KYLIN_SALES 事实表，存有销售订单的详细信息(卖家，商品分类，订单金额，商品数量等)</li>\n<li>KYLIN_COUNTRY 维度表，存有国家信息(简写，名称等)</li>\n<li>KYLIN_CATEGORY_GROUPINGS 维度表，存有商品分类的详细介绍(分类名称等)</li>\n<li>KYLIN_CAL_DT 维度表，存有时间扩展信息(日期所在年始，月始，周始，年份，月份等)</li>\n<li>KYLIN_ACCOUNT 维度表，存有账户信息(账户id，卖家等级，买家等级，国家等)</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557486460421-1d88684e-825c-420d-9fdd-9e9717c28cb6.png#align=left&amp;display=inline&amp;height=576&amp;name=image.png&amp;originHeight=576&amp;originWidth=1102&amp;size=47232&amp;status=done&amp;width=1102\" alt=\"image.png\"></p>\n<p><a name=\"5dwAT\"></a></p>\n<h3 id=\"运行查询语句\"><a href=\"#运行查询语句\" class=\"headerlink\" title=\"运行查询语句\"></a>运行查询语句</h3><p>执行 <code>select count(1) from kylin_sales</code> 点击submit，下方会显示执行结果，以及执行耗时(此处是1.8秒)。kylin会缓存执行结果，再次执行发现变成了0.18秒<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1557486561989-c58f3430-7336-49dc-9b47-14c68fb8c6d6.png#align=left&amp;display=inline&amp;height=771&amp;name=image.png&amp;originHeight=771&amp;originWidth=1870&amp;size=80062&amp;status=done&amp;width=1870\" alt=\"image.png\"><br>执行稍微复杂的SQL语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sum</span>(KYLIN_SALES.PRICE) </span><br><span class=\"line\"><span class=\"keyword\">as</span> price_sum,KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME </span><br><span class=\"line\"><span class=\"keyword\">from</span> KYLIN_SALES <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> KYLIN_CATEGORY_GROUPINGS</span><br><span class=\"line\"><span class=\"keyword\">on</span> KYLIN_SALES.LEAF_CATEG_ID = KYLIN_CATEGORY_GROUPINGS.LEAF_CATEG_ID <span class=\"keyword\">and</span> </span><br><span class=\"line\">KYLIN_SALES.LSTG_SITE_ID = KYLIN_CATEGORY_GROUPINGS.SITE_ID</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> KYLIN_CATEGORY_GROUPINGS.META_CATEG_NAME <span class=\"keyword\">asc</span>,KYLIN_CATEGORY_GROUPINGS.CATEG_LVL2_NAME <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558172952282-191a44d2-d434-4aad-8eff-da8cb6f8fc76.png#align=left&amp;display=inline&amp;height=586&amp;name=image.png&amp;originHeight=586&amp;originWidth=1456&amp;size=63114&amp;status=done&amp;width=1456\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1558172990808-29ba9fd6-dfab-4835-84df-c98c6fa80fb7.png#align=left&amp;display=inline&amp;height=638&amp;name=image.png&amp;originHeight=638&amp;originWidth=1536&amp;size=68562&amp;status=done&amp;width=1536\" alt=\"image.png\">自带简单的可视化。</p>\n<p><a name=\"jXA3N\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4OTY3MTUyNg==∣=2247489540&amp;idx=1&amp;sn=a9a2c9bbb065987cd8756635c146800d\" target=\"_blank\" rel=\"noopener\">如何在CDH中部署及使用Kylin</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/KYLIN-3872\" target=\"_blank\" rel=\"noopener\">Kylin web UI http 404 error</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/62187552\" target=\"_blank\" rel=\"noopener\">Kylin 2.6.1 on Ambari 2.7.1.0 花式踩坑集锦</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"013-阿里Dragonfly体验之私有registry下载","date":"2019-03-30T02:17:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第13篇，定个小目标999，每周最少2篇。\n\n\n书接上篇[ 012-P2P加速Docker镜像分发(阿里Dragonfly)](https://juejin.im/post/5c98a8e9f265da60e346fe04) ,讲解了如何快速搭建Dragonfly,但是访问的是公开镜像，本文主要讲解如何下载私有镜像。\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n## 实验环境\n<a name=\"65227369\"></a>\n### 主机\n| 类型 | 主机名 | 系统 | ip | docker version |\n| --- | --- | --- | --- | --- |\n| supernode | d7y-1 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.75 | 17.06.2ubuntu |\n| clinet1 | d7y-2 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.76 | 17.06.2ubuntu |\n| clinet2 | d7y-3 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.77 | 17.06.2ubuntu |\n\n<a name=\"592cc647\"></a>\n### 私有registry\n本次以[阿里云私有镜像库](https://cr.console.aliyun.com/cn-qingdao/instances/repositories)为例，可以自行开通。\n\n<a name=\"c40e1e5e\"></a>\n### 文档之坑\n官方文档比较简单,甚至带有误导性，下意识的以为应该在dfdaemon节点上配置auth信息，并且配的是真实的私有registry，如果真这么搞了，肯定被坑。（但是也能解释通，比较绕，dfdaemon本身就是一个伪装成registry，用来加速私有registry，那么登陆信息就应该换成dfdaemon ip，只是示例不太恰当而已，对初学者相当不友好倒是真的）<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553913213390-3865b763-e270-4d25-8043-d140efc5faeb.png#align=left&display=inline&height=546&name=image.png&originHeight=546&originWidth=922&size=67579&status=done&width=922)\n\n<a name=\"494e38bf\"></a>\n## supernode步骤\n\n<a name=\"71e91348\"></a>\n### 安装supernode\n```bash\nroot@d7y-1:~# docker run --name dragonfly-supernode --restart=always \\\n              -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode \\\n              registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 \\\n              -Dsupernode.advertiseIp=192.168.0.75\n\nroot@d7y-1:~# docker ps\nCONTAINER ID        IMAGE                                                            COMMAND                  CREATED              STATUS              PORTS                              NAMES\nbe7fb931db0b        registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0   \"/bin/sh -c '/root...\"   About a minute ago   Up About a minute   0.0.0.0:8001-8002->8001-8002/tcp   dragonfly-supernode\n\nroot@d7y-1:/data/dragonfly/supernode/logs# cat app.log \n2019-03-30 01:04:40.065 INFO  [      main] c.d.d.s.SuperNodeStarter       - Starting SuperNodeStarter on be7fb931db0b with PID 9 (/supernode.jar started by root in /)\n2019-03-30 01:04:40.069 INFO  [      main] c.d.d.s.SuperNodeStarter       - No active profile set, falling back to default profiles: default\n2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init local ip of supernode, use ip:192.168.0.75\n2019-03-30 01:04:42.253 INFO  [      main] c.d.d.s.c.SupernodeProperties  - cluster members: [{\"downloadPort\":8001,\"ip\":\"localhost\",\"registerPort\":8002}]\n2019-03-30 01:04:42.263 INFO  [      main] c.d.d.s.c.util.MonitorService  - available processors count is 4\n2019-03-30 01:04:42.272 ERROR [  Thread-2] c.d.d.s.c.util.MonitorService  - process fields:null error\njava.io.IOException: Cannot run program \"tsar\": error=2, No such file or directory\n\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)\n\tat java.lang.Runtime.exec(Runtime.java:620)\n\tat java.lang.Runtime.exec(Runtime.java:450)\n\tat java.lang.Runtime.exec(Runtime.java:347)\n\tat com.dragonflyoss.dragonfly.supernode.common.util.MonitorService$1.run(MonitorService.java:56)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: error=2, No such file or directory\n\tat java.lang.UNIXProcess.forkAndExec(Native Method)\n\tat java.lang.UNIXProcess.<init>(UNIXProcess.java:247)\n\tat java.lang.ProcessImpl.start(ProcessImpl.java:134)\n\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)\n\t... 5 common frames omitted\n2019-03-30 01:04:43.507 INFO  [      main] c.d.d.s.SuperNodeStarter       - Started SuperNodeStarter in 3.906 seconds (JVM running for 4.59)\n2019-03-30 01:04:49.472 INFO  [  spring-1] c.d.d.s.s.p.PreheatServiceImpl - deleteExpiresPreheatTask, count:0\n```\n\n从 `2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init local ip of supernode, use ip:192.168.0.75`  看，启动ip设置成功.\n\n注意，官方的镜像没改时区，默认是UTC时间，比北京东八区早8小时。\n\n<a name=\"2537d15e\"></a>\n### 登陆私有registry并推送镜像\n```bash\nroot@d7y-1:~# docker login https://registry.cn-qingdao.aliyuncs.com \nUsername: //你阿里云账号\nPassword: //你阿里云密码\nLogin Succeeded\nroot@d7y-1:~# docker pull nginx:alpine\nroot@d7y-1:~# docker tag nginx:alpine registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine\nroot@d7y-1:~# docker push registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine\nalpine: digest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3 size: 1153\n```\n\n<a name=\"5b37fed5\"></a>\n## dfdaemon 步骤\n<a name=\"fe0b02fa\"></a>\n### 安装dfdaemon\n在两台client节点分别执行如下命令\n```bash\nroot@d7y-2:~# cat <<EOD >/etc/dragonfly.conf\n[node]\naddress=192.168.0.75\nEOD\nroot@d7y-2:~# docker run --name dragonfly-dfclient --restart=always \\\n\t\t\t\t\t\t-d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly \\\n            -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 \\\n            --registry=https://registry.cn-qingdao.aliyuncs.com  --ratelimit 100M\nUnable to find image 'dragonflyoss/dfclient:v0.3.0' locally\nv0.3.0: Pulling from dragonflyoss/dfclient\n169185f82c45: Pull complete \nf58f64214283: Pull complete \nbd8f062dc2d2: Pull complete \nDigest: sha256:5bcabd5b34f4da0c2d489c8f99a23a401fb9ec57e54d4fa90457a93c5a85371f\nStatus: Downloaded newer image for dragonflyoss/dfclient:v0.3.0\nb491e90489a584119b82ca934cf2ae087abc136f7f9de3542e14fb12bc1c7512\n\nroot@d7y-2:~# cat <<EOD >/etc/docker/daemon.json\n{\n\"registry-mirrors\": [\"http://127.0.0.1:65001\"]\n}\nEOD\nroot@d7y-2:~# systemctl restart docker \n\nroot@d7y-2:~# docker ps\nCONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                      NAMES\nb491e90489a5        dragonflyoss/dfclient:v0.3.0   \"/dfclient/dfdaemo...\"   28 seconds ago      Up 4 seconds        0.0.0.0:65001->65001/tcp   dragonfly-dfclient\n\nroot@d7y-2:~/.small-dragonfly/logs# cat dfdaemon.log\n2019-03-30 01:18:21.331 INFO sign:1 : init...\n2019-03-30 01:18:21.331 INFO sign:1 : rotate log routine start...\n2019-03-30 01:18:21.338 INFO sign:1 : dfget version:\n2019-03-30 01:18:21.338 ERRO sign:1 : init properties failed:open /etc/dragonfly/dfdaemon.yml: no such file or directory\n2019-03-30 01:18:21.338 INFO sign:1 : init properties:{\"Registries\":[{\"Schema\":\"https\",\"Host\":\"registry.cn-qingdao.aliyuncs.com\",\"Certs\":null,\"Regx\":\"(^localhost$)|(^127.0.0.1$)|(^127.0.0.1$)\"}]}\n2019-03-30 01:18:21.338 INFO sign:1 : init finish\n2019-03-30 01:18:21.338 INFO sign:1 : start dfdaemon param: &{DfPath:/dfclient/dfget DFRepo:/root/.small-dragonfly/dfdaemon/data/ RateLimit:100M CallSystem:com_ops_dragonfly URLFilter:Signature&Expires&OSSAccessKeyId Notbs:true MaxProcs:4 Version:false Verbose:false HostIP:127.0.0.1 Port:65001 Registry:https://registry.cn-qingdao.aliyuncs.com DownRule: CertFile: KeyFile: TrustHosts:[] ConfigPath:/etc/dragonfly/dfdaemon.yml}\n2019-03-30 01:18:21.338 INFO sign:1 : launch dfdaemon http server on 127.0.0.1:65001\n```\n\n<a name=\"414f9e5b\"></a>\n### 登陆dfdaemon\n\n```bash\nroot@d7y-2:~# docker login http://127.0.0.1:65001\nUsername: //你阿里云账号\nPassword: //你阿里云密码\nLogin Succeeded\nroot@d7y-2:~# cat ~/.docker/config.json \n{\n\t\"auths\": {\n\t\t\"127.0.0.1:65001\": {\n\t\t\t\"auth\": \"zzxxxxxx=\"\n\t\t}\n\t}\n}\n\n```\n\n<a name=\"c6e04966\"></a>\n### pull 私有镜像\n\n```bash\nroot@d7y-2:~# docker pull 127.0.0.1:65001/d7y-test/nginx:alpine\nalpine: Pulling from d7y-test/nginx\n8e402f1a9c57: Pull complete \n56b0d9b69cc9: Pull complete \nb66c8bb200cc: Pull complete \n4ec77fc9c55f: Pull complete \nDigest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3\nStatus: Downloaded newer image for 127.0.0.1:65001/d7y-test/nginx:alpine\n```\n\n可以通过iftop 等命令，观察流量。\n\n\n<a name=\"0d98c747\"></a>\n## 其他\n<a name=\"21b8fa6d\"></a>\n### 排错\n如果有遇到其他问题，可以通过查看日志来获取更多信息。<br />dfdaemon log : /root/.small-dragonfly/logs/{dfclient.log,dfdaemon.log,dfserver.log}<br />supernode log: /home/admin/supernode/{app.log,data-gc.log,downloader.log,piece-hit.log,space-gc.log}\n\n<a name=\"269346af\"></a>\n### 公开和私有registry混用\n如果大量都是私有registry的话，可以在/etc/docker/daemon.json 中配置dfdaemon和加速器，如果是一半一半的话，那就干脆起两个dfdaemon就行了，一个--registry写私有的，一个--registry写公有的，然后也是配置 /etc/docker/daemon.json\n\n```bash\ncat /etc/docker/daemon.json \n{\n  \"registry-mirrors\": [\"http://127.0.0.1:65001\",\"https://xxx.mirror.aliyuncs.com\"],\n  \"dns\": [\"223.5.5.5\"]\n}\n```\n\n<a name=\"1075cc79\"></a>\n### 吐槽\n再次吐槽一下d7y的产品很好，解决了很大问题。但是这文档，真心不是给新手看的。从未见过如此坑多且深的文档。没见过哪家quick start 写的这么复杂。\n\n<a name=\"5eff9f05\"></a>\n### 鸣谢\n非常感谢钉钉群内的 d7y 的 contributor [太云-lowzj](https://github.com/lowzj) 耐心解答，从开始研究d7y开始，遇到的很多坑都是在   [太云-lowzj](https://github.com/lowzj) 帮助下蹚过去的。但是还是觉得，如果文档足够友好，肯定会减少群内被打扰的次数，进而节省自己时间的。<br />\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553916020142-2062e206-a3e6-4df0-bb28-1b20632751a7.png#align=left&display=inline&height=153&name=image.png&originHeight=153&originWidth=436&size=12860&status=done&width=436)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/d7y-private-registry.md","raw":"\n---\n\ntitle: 013-阿里Dragonfly体验之私有registry下载\n\ndate: 2019-03-30 10:17:00 +0800\n\ntags: [docker,k8s,kubernetes,alibaba,Dragonfly]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第13篇，定个小目标999，每周最少2篇。\n\n\n书接上篇[ 012-P2P加速Docker镜像分发(阿里Dragonfly)](https://juejin.im/post/5c98a8e9f265da60e346fe04) ,讲解了如何快速搭建Dragonfly,但是访问的是公开镜像，本文主要讲解如何下载私有镜像。\n\n<!-- more -->\n\n<a name=\"12267079\"></a>\n## 实验环境\n<a name=\"65227369\"></a>\n### 主机\n| 类型 | 主机名 | 系统 | ip | docker version |\n| --- | --- | --- | --- | --- |\n| supernode | d7y-1 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.75 | 17.06.2ubuntu |\n| clinet1 | d7y-2 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.76 | 17.06.2ubuntu |\n| clinet2 | d7y-3 | Ubuntu Server 16.04.6 LTS X64 | 192.168.0.77 | 17.06.2ubuntu |\n\n<a name=\"592cc647\"></a>\n### 私有registry\n本次以[阿里云私有镜像库](https://cr.console.aliyun.com/cn-qingdao/instances/repositories)为例，可以自行开通。\n\n<a name=\"c40e1e5e\"></a>\n### 文档之坑\n官方文档比较简单,甚至带有误导性，下意识的以为应该在dfdaemon节点上配置auth信息，并且配的是真实的私有registry，如果真这么搞了，肯定被坑。（但是也能解释通，比较绕，dfdaemon本身就是一个伪装成registry，用来加速私有registry，那么登陆信息就应该换成dfdaemon ip，只是示例不太恰当而已，对初学者相当不友好倒是真的）<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553913213390-3865b763-e270-4d25-8043-d140efc5faeb.png#align=left&display=inline&height=546&name=image.png&originHeight=546&originWidth=922&size=67579&status=done&width=922)\n\n<a name=\"494e38bf\"></a>\n## supernode步骤\n\n<a name=\"71e91348\"></a>\n### 安装supernode\n```bash\nroot@d7y-1:~# docker run --name dragonfly-supernode --restart=always \\\n              -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode \\\n              registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 \\\n              -Dsupernode.advertiseIp=192.168.0.75\n\nroot@d7y-1:~# docker ps\nCONTAINER ID        IMAGE                                                            COMMAND                  CREATED              STATUS              PORTS                              NAMES\nbe7fb931db0b        registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0   \"/bin/sh -c '/root...\"   About a minute ago   Up About a minute   0.0.0.0:8001-8002->8001-8002/tcp   dragonfly-supernode\n\nroot@d7y-1:/data/dragonfly/supernode/logs# cat app.log \n2019-03-30 01:04:40.065 INFO  [      main] c.d.d.s.SuperNodeStarter       - Starting SuperNodeStarter on be7fb931db0b with PID 9 (/supernode.jar started by root in /)\n2019-03-30 01:04:40.069 INFO  [      main] c.d.d.s.SuperNodeStarter       - No active profile set, falling back to default profiles: default\n2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init local ip of supernode, use ip:192.168.0.75\n2019-03-30 01:04:42.253 INFO  [      main] c.d.d.s.c.SupernodeProperties  - cluster members: [{\"downloadPort\":8001,\"ip\":\"localhost\",\"registerPort\":8002}]\n2019-03-30 01:04:42.263 INFO  [      main] c.d.d.s.c.util.MonitorService  - available processors count is 4\n2019-03-30 01:04:42.272 ERROR [  Thread-2] c.d.d.s.c.util.MonitorService  - process fields:null error\njava.io.IOException: Cannot run program \"tsar\": error=2, No such file or directory\n\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)\n\tat java.lang.Runtime.exec(Runtime.java:620)\n\tat java.lang.Runtime.exec(Runtime.java:450)\n\tat java.lang.Runtime.exec(Runtime.java:347)\n\tat com.dragonflyoss.dragonfly.supernode.common.util.MonitorService$1.run(MonitorService.java:56)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: error=2, No such file or directory\n\tat java.lang.UNIXProcess.forkAndExec(Native Method)\n\tat java.lang.UNIXProcess.<init>(UNIXProcess.java:247)\n\tat java.lang.ProcessImpl.start(ProcessImpl.java:134)\n\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)\n\t... 5 common frames omitted\n2019-03-30 01:04:43.507 INFO  [      main] c.d.d.s.SuperNodeStarter       - Started SuperNodeStarter in 3.906 seconds (JVM running for 4.59)\n2019-03-30 01:04:49.472 INFO  [  spring-1] c.d.d.s.s.p.PreheatServiceImpl - deleteExpiresPreheatTask, count:0\n```\n\n从 `2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init local ip of supernode, use ip:192.168.0.75`  看，启动ip设置成功.\n\n注意，官方的镜像没改时区，默认是UTC时间，比北京东八区早8小时。\n\n<a name=\"2537d15e\"></a>\n### 登陆私有registry并推送镜像\n```bash\nroot@d7y-1:~# docker login https://registry.cn-qingdao.aliyuncs.com \nUsername: //你阿里云账号\nPassword: //你阿里云密码\nLogin Succeeded\nroot@d7y-1:~# docker pull nginx:alpine\nroot@d7y-1:~# docker tag nginx:alpine registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine\nroot@d7y-1:~# docker push registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine\nalpine: digest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3 size: 1153\n```\n\n<a name=\"5b37fed5\"></a>\n## dfdaemon 步骤\n<a name=\"fe0b02fa\"></a>\n### 安装dfdaemon\n在两台client节点分别执行如下命令\n```bash\nroot@d7y-2:~# cat <<EOD >/etc/dragonfly.conf\n[node]\naddress=192.168.0.75\nEOD\nroot@d7y-2:~# docker run --name dragonfly-dfclient --restart=always \\\n\t\t\t\t\t\t-d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly \\\n            -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 \\\n            --registry=https://registry.cn-qingdao.aliyuncs.com  --ratelimit 100M\nUnable to find image 'dragonflyoss/dfclient:v0.3.0' locally\nv0.3.0: Pulling from dragonflyoss/dfclient\n169185f82c45: Pull complete \nf58f64214283: Pull complete \nbd8f062dc2d2: Pull complete \nDigest: sha256:5bcabd5b34f4da0c2d489c8f99a23a401fb9ec57e54d4fa90457a93c5a85371f\nStatus: Downloaded newer image for dragonflyoss/dfclient:v0.3.0\nb491e90489a584119b82ca934cf2ae087abc136f7f9de3542e14fb12bc1c7512\n\nroot@d7y-2:~# cat <<EOD >/etc/docker/daemon.json\n{\n\"registry-mirrors\": [\"http://127.0.0.1:65001\"]\n}\nEOD\nroot@d7y-2:~# systemctl restart docker \n\nroot@d7y-2:~# docker ps\nCONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                      NAMES\nb491e90489a5        dragonflyoss/dfclient:v0.3.0   \"/dfclient/dfdaemo...\"   28 seconds ago      Up 4 seconds        0.0.0.0:65001->65001/tcp   dragonfly-dfclient\n\nroot@d7y-2:~/.small-dragonfly/logs# cat dfdaemon.log\n2019-03-30 01:18:21.331 INFO sign:1 : init...\n2019-03-30 01:18:21.331 INFO sign:1 : rotate log routine start...\n2019-03-30 01:18:21.338 INFO sign:1 : dfget version:\n2019-03-30 01:18:21.338 ERRO sign:1 : init properties failed:open /etc/dragonfly/dfdaemon.yml: no such file or directory\n2019-03-30 01:18:21.338 INFO sign:1 : init properties:{\"Registries\":[{\"Schema\":\"https\",\"Host\":\"registry.cn-qingdao.aliyuncs.com\",\"Certs\":null,\"Regx\":\"(^localhost$)|(^127.0.0.1$)|(^127.0.0.1$)\"}]}\n2019-03-30 01:18:21.338 INFO sign:1 : init finish\n2019-03-30 01:18:21.338 INFO sign:1 : start dfdaemon param: &{DfPath:/dfclient/dfget DFRepo:/root/.small-dragonfly/dfdaemon/data/ RateLimit:100M CallSystem:com_ops_dragonfly URLFilter:Signature&Expires&OSSAccessKeyId Notbs:true MaxProcs:4 Version:false Verbose:false HostIP:127.0.0.1 Port:65001 Registry:https://registry.cn-qingdao.aliyuncs.com DownRule: CertFile: KeyFile: TrustHosts:[] ConfigPath:/etc/dragonfly/dfdaemon.yml}\n2019-03-30 01:18:21.338 INFO sign:1 : launch dfdaemon http server on 127.0.0.1:65001\n```\n\n<a name=\"414f9e5b\"></a>\n### 登陆dfdaemon\n\n```bash\nroot@d7y-2:~# docker login http://127.0.0.1:65001\nUsername: //你阿里云账号\nPassword: //你阿里云密码\nLogin Succeeded\nroot@d7y-2:~# cat ~/.docker/config.json \n{\n\t\"auths\": {\n\t\t\"127.0.0.1:65001\": {\n\t\t\t\"auth\": \"zzxxxxxx=\"\n\t\t}\n\t}\n}\n\n```\n\n<a name=\"c6e04966\"></a>\n### pull 私有镜像\n\n```bash\nroot@d7y-2:~# docker pull 127.0.0.1:65001/d7y-test/nginx:alpine\nalpine: Pulling from d7y-test/nginx\n8e402f1a9c57: Pull complete \n56b0d9b69cc9: Pull complete \nb66c8bb200cc: Pull complete \n4ec77fc9c55f: Pull complete \nDigest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3\nStatus: Downloaded newer image for 127.0.0.1:65001/d7y-test/nginx:alpine\n```\n\n可以通过iftop 等命令，观察流量。\n\n\n<a name=\"0d98c747\"></a>\n## 其他\n<a name=\"21b8fa6d\"></a>\n### 排错\n如果有遇到其他问题，可以通过查看日志来获取更多信息。<br />dfdaemon log : /root/.small-dragonfly/logs/{dfclient.log,dfdaemon.log,dfserver.log}<br />supernode log: /home/admin/supernode/{app.log,data-gc.log,downloader.log,piece-hit.log,space-gc.log}\n\n<a name=\"269346af\"></a>\n### 公开和私有registry混用\n如果大量都是私有registry的话，可以在/etc/docker/daemon.json 中配置dfdaemon和加速器，如果是一半一半的话，那就干脆起两个dfdaemon就行了，一个--registry写私有的，一个--registry写公有的，然后也是配置 /etc/docker/daemon.json\n\n```bash\ncat /etc/docker/daemon.json \n{\n  \"registry-mirrors\": [\"http://127.0.0.1:65001\",\"https://xxx.mirror.aliyuncs.com\"],\n  \"dns\": [\"223.5.5.5\"]\n}\n```\n\n<a name=\"1075cc79\"></a>\n### 吐槽\n再次吐槽一下d7y的产品很好，解决了很大问题。但是这文档，真心不是给新手看的。从未见过如此坑多且深的文档。没见过哪家quick start 写的这么复杂。\n\n<a name=\"5eff9f05\"></a>\n### 鸣谢\n非常感谢钉钉群内的 d7y 的 contributor [太云-lowzj](https://github.com/lowzj) 耐心解答，从开始研究d7y开始，遇到的很多坑都是在   [太云-lowzj](https://github.com/lowzj) 帮助下蹚过去的。但是还是觉得，如果文档足够友好，肯定会减少群内被打扰的次数，进而节省自己时间的。<br />\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1553916020142-2062e206-a3e6-4df0-bb28-1b20632751a7.png#align=left&display=inline&height=153&name=image.png&originHeight=153&originWidth=436&size=12860&status=done&width=436)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"d7y-private-registry","published":1,"updated":"2019-08-16T06:11:15.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojip00d924don3dhvn4f","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第13篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>书接上篇<a href=\"https://juejin.im/post/5c98a8e9f265da60e346fe04\" target=\"_blank\" rel=\"noopener\"> 012-P2P加速Docker镜像分发(阿里Dragonfly)</a> ,讲解了如何快速搭建Dragonfly,但是访问的是公开镜像，本文主要讲解如何下载私有镜像。</p>\n<a id=\"more\"></a>\n<p><a name=\"12267079\"></a></p>\n<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><a name=\"65227369\"></a></p>\n<h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>主机名</th>\n<th>系统</th>\n<th>ip</th>\n<th>docker version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>supernode</td>\n<td>d7y-1</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.75</td>\n<td>17.06.2ubuntu</td>\n</tr>\n<tr>\n<td>clinet1</td>\n<td>d7y-2</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.76</td>\n<td>17.06.2ubuntu</td>\n</tr>\n<tr>\n<td>clinet2</td>\n<td>d7y-3</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.77</td>\n<td>17.06.2ubuntu</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"592cc647\"></a></p>\n<h3 id=\"私有registry\"><a href=\"#私有registry\" class=\"headerlink\" title=\"私有registry\"></a>私有registry</h3><p>本次以<a href=\"https://cr.console.aliyun.com/cn-qingdao/instances/repositories\" target=\"_blank\" rel=\"noopener\">阿里云私有镜像库</a>为例，可以自行开通。</p>\n<p><a name=\"c40e1e5e\"></a></p>\n<h3 id=\"文档之坑\"><a href=\"#文档之坑\" class=\"headerlink\" title=\"文档之坑\"></a>文档之坑</h3><p>官方文档比较简单,甚至带有误导性，下意识的以为应该在dfdaemon节点上配置auth信息，并且配的是真实的私有registry，如果真这么搞了，肯定被坑。（但是也能解释通，比较绕，dfdaemon本身就是一个伪装成registry，用来加速私有registry，那么登陆信息就应该换成dfdaemon ip，只是示例不太恰当而已，对初学者相当不友好倒是真的）<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553913213390-3865b763-e270-4d25-8043-d140efc5faeb.png#align=left&amp;display=inline&amp;height=546&amp;name=image.png&amp;originHeight=546&amp;originWidth=922&amp;size=67579&amp;status=done&amp;width=922\" alt=\"image.png\"></p>\n<p><a name=\"494e38bf\"></a></p>\n<h2 id=\"supernode步骤\"><a href=\"#supernode步骤\" class=\"headerlink\" title=\"supernode步骤\"></a>supernode步骤</h2><p><a name=\"71e91348\"></a></p>\n<h3 id=\"安装supernode\"><a href=\"#安装supernode\" class=\"headerlink\" title=\"安装supernode\"></a>安装supernode</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker run --name dragonfly-supernode --restart=always \\</span></span><br><span class=\"line\">              -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode \\</span><br><span class=\"line\">              registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 \\</span><br><span class=\"line\">              -Dsupernode.advertiseIp=192.168.0.75</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                                                            COMMAND                  CREATED              STATUS              PORTS                              NAMES</span><br><span class=\"line\">be7fb931db0b        registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0   <span class=\"string\">\"/bin/sh -c '/root...\"</span>   About a minute ago   Up About a minute   0.0.0.0:8001-8002-&gt;8001-8002/tcp   dragonfly-supernode</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-1:/data/dragonfly/supernode/logs<span class=\"comment\"># cat app.log </span></span><br><span class=\"line\">2019-03-30 01:04:40.065 INFO  [      main] c.d.d.s.SuperNodeStarter       - Starting SuperNodeStarter on be7fb931db0b with PID 9 (/supernode.jar started by root <span class=\"keyword\">in</span> /)</span><br><span class=\"line\">2019-03-30 01:04:40.069 INFO  [      main] c.d.d.s.SuperNodeStarter       - No active profile <span class=\"built_in\">set</span>, falling back to default profiles: default</span><br><span class=\"line\">2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init <span class=\"built_in\">local</span> ip of supernode, use ip:192.168.0.75</span><br><span class=\"line\">2019-03-30 01:04:42.253 INFO  [      main] c.d.d.s.c.SupernodeProperties  - cluster members: [&#123;<span class=\"string\">\"downloadPort\"</span>:8001,<span class=\"string\">\"ip\"</span>:<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"registerPort\"</span>:8002&#125;]</span><br><span class=\"line\">2019-03-30 01:04:42.263 INFO  [      main] c.d.d.s.c.util.MonitorService  - available processors count is 4</span><br><span class=\"line\">2019-03-30 01:04:42.272 ERROR [  Thread-2] c.d.d.s.c.util.MonitorService  - process fields:null error</span><br><span class=\"line\">java.io.IOException: Cannot run program <span class=\"string\">\"tsar\"</span>: error=2, No such file or directory</span><br><span class=\"line\">\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)</span><br><span class=\"line\">\tat java.lang.Runtime.exec(Runtime.java:620)</span><br><span class=\"line\">\tat java.lang.Runtime.exec(Runtime.java:450)</span><br><span class=\"line\">\tat java.lang.Runtime.exec(Runtime.java:347)</span><br><span class=\"line\">\tat com.dragonflyoss.dragonfly.supernode.common.util.MonitorService<span class=\"variable\">$1</span>.run(MonitorService.java:56)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">Caused by: java.io.IOException: error=2, No such file or directory</span><br><span class=\"line\">\tat java.lang.UNIXProcess.forkAndExec(Native Method)</span><br><span class=\"line\">\tat java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:247)</span><br><span class=\"line\">\tat java.lang.ProcessImpl.start(ProcessImpl.java:134)</span><br><span class=\"line\">\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)</span><br><span class=\"line\">\t... 5 common frames omitted</span><br><span class=\"line\">2019-03-30 01:04:43.507 INFO  [      main] c.d.d.s.SuperNodeStarter       - Started SuperNodeStarter <span class=\"keyword\">in</span> 3.906 seconds (JVM running <span class=\"keyword\">for</span> 4.59)</span><br><span class=\"line\">2019-03-30 01:04:49.472 INFO  [  spring-1] c.d.d.s.s.p.PreheatServiceImpl - deleteExpiresPreheatTask, count:0</span><br></pre></td></tr></table></figure>\n<p>从 <code>2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init local ip of supernode, use ip:192.168.0.75</code>  看，启动ip设置成功.</p>\n<p>注意，官方的镜像没改时区，默认是UTC时间，比北京东八区早8小时。</p>\n<p><a name=\"2537d15e\"></a></p>\n<h3 id=\"登陆私有registry并推送镜像\"><a href=\"#登陆私有registry并推送镜像\" class=\"headerlink\" title=\"登陆私有registry并推送镜像\"></a>登陆私有registry并推送镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker login https://registry.cn-qingdao.aliyuncs.com </span></span><br><span class=\"line\">Username: //你阿里云账号</span><br><span class=\"line\">Password: //你阿里云密码</span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker pull nginx:alpine</span></span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker tag nginx:alpine registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine</span></span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker push registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine</span></span><br><span class=\"line\">alpine: digest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3 size: 1153</span><br></pre></td></tr></table></figure>\n<p><a name=\"5b37fed5\"></a></p>\n<h2 id=\"dfdaemon-步骤\"><a href=\"#dfdaemon-步骤\" class=\"headerlink\" title=\"dfdaemon 步骤\"></a>dfdaemon 步骤</h2><p><a name=\"fe0b02fa\"></a></p>\n<h3 id=\"安装dfdaemon\"><a href=\"#安装dfdaemon\" class=\"headerlink\" title=\"安装dfdaemon\"></a>安装dfdaemon</h3><p>在两台client节点分别执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-2:~<span class=\"comment\"># cat &lt;&lt;EOD &gt;/etc/dragonfly.conf</span></span><br><span class=\"line\">[node]</span><br><span class=\"line\">address=192.168.0.75</span><br><span class=\"line\">EOD</span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker run --name dragonfly-dfclient --restart=always \\</span></span><br><span class=\"line\">\t\t\t\t\t\t-d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly \\</span><br><span class=\"line\">            -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 \\</span><br><span class=\"line\">            --registry=https://registry.cn-qingdao.aliyuncs.com  --ratelimit 100M</span><br><span class=\"line\">Unable to find image <span class=\"string\">'dragonflyoss/dfclient:v0.3.0'</span> locally</span><br><span class=\"line\">v0.3.0: Pulling from dragonflyoss/dfclient</span><br><span class=\"line\">169185f82c45: Pull complete </span><br><span class=\"line\">f58f64214283: Pull complete </span><br><span class=\"line\">bd8f062dc2d2: Pull complete </span><br><span class=\"line\">Digest: sha256:5bcabd5b34f4da0c2d489c8f99a23a401fb9ec57e54d4fa90457a93c5a85371f</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> dragonflyoss/dfclient:v0.3.0</span><br><span class=\"line\">b491e90489a584119b82ca934cf2ae087abc136f7f9de3542e14fb12bc1c7512</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># cat &lt;&lt;EOD &gt;/etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://127.0.0.1:65001\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># systemctl restart docker </span></span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                      NAMES</span><br><span class=\"line\">b491e90489a5        dragonflyoss/dfclient:v0.3.0   <span class=\"string\">\"/dfclient/dfdaemo...\"</span>   28 seconds ago      Up 4 seconds        0.0.0.0:65001-&gt;65001/tcp   dragonfly-dfclient</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-2:~/.small-dragonfly/logs<span class=\"comment\"># cat dfdaemon.log</span></span><br><span class=\"line\">2019-03-30 01:18:21.331 INFO sign:1 : init...</span><br><span class=\"line\">2019-03-30 01:18:21.331 INFO sign:1 : rotate <span class=\"built_in\">log</span> routine start...</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : dfget version:</span><br><span class=\"line\">2019-03-30 01:18:21.338 ERRO sign:1 : init properties failed:open /etc/dragonfly/dfdaemon.yml: no such file or directory</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : init properties:&#123;<span class=\"string\">\"Registries\"</span>:[&#123;<span class=\"string\">\"Schema\"</span>:<span class=\"string\">\"https\"</span>,<span class=\"string\">\"Host\"</span>:<span class=\"string\">\"registry.cn-qingdao.aliyuncs.com\"</span>,<span class=\"string\">\"Certs\"</span>:null,<span class=\"string\">\"Regx\"</span>:<span class=\"string\">\"(^localhost$)|(^127.0.0.1$)|(^127.0.0.1$)\"</span>&#125;]&#125;</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : init finish</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : start dfdaemon param: &amp;&#123;DfPath:/dfclient/dfget DFRepo:/root/.small-dragonfly/dfdaemon/data/ RateLimit:100M CallSystem:com_ops_dragonfly URLFilter:Signature&amp;Expires&amp;OSSAccessKeyId Notbs:<span class=\"literal\">true</span> MaxProcs:4 Version:<span class=\"literal\">false</span> Verbose:<span class=\"literal\">false</span> HostIP:127.0.0.1 Port:65001 Registry:https://registry.cn-qingdao.aliyuncs.com DownRule: CertFile: KeyFile: TrustHosts:[] ConfigPath:/etc/dragonfly/dfdaemon.yml&#125;</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : launch dfdaemon http server on 127.0.0.1:65001</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"414f9e5b\"></a></p>\n<h3 id=\"登陆dfdaemon\"><a href=\"#登陆dfdaemon\" class=\"headerlink\" title=\"登陆dfdaemon\"></a>登陆dfdaemon</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker login http://127.0.0.1:65001</span></span><br><span class=\"line\">Username: //你阿里云账号</span><br><span class=\"line\">Password: //你阿里云密码</span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># cat ~/.docker/config.json </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"auths\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"127.0.0.1:65001\"</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"auth\"</span>: <span class=\"string\">\"zzxxxxxx=\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"c6e04966\"></a></p>\n<h3 id=\"pull-私有镜像\"><a href=\"#pull-私有镜像\" class=\"headerlink\" title=\"pull 私有镜像\"></a>pull 私有镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker pull 127.0.0.1:65001/d7y-test/nginx:alpine</span></span><br><span class=\"line\">alpine: Pulling from d7y-test/nginx</span><br><span class=\"line\">8e402f1a9c57: Pull complete </span><br><span class=\"line\">56b0d9b69cc9: Pull complete </span><br><span class=\"line\">b66c8bb200cc: Pull complete </span><br><span class=\"line\">4ec77fc9c55f: Pull complete </span><br><span class=\"line\">Digest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> 127.0.0.1:65001/d7y-test/nginx:alpine</span><br></pre></td></tr></table></figure>\n<p>可以通过iftop 等命令，观察流量。</p>\n<p><a name=\"0d98c747\"></a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><a name=\"21b8fa6d\"></a></p>\n<h3 id=\"排错\"><a href=\"#排错\" class=\"headerlink\" title=\"排错\"></a>排错</h3><p>如果有遇到其他问题，可以通过查看日志来获取更多信息。<br>dfdaemon log : /root/.small-dragonfly/logs/{dfclient.log,dfdaemon.log,dfserver.log}<br>supernode log: /home/admin/supernode/{app.log,data-gc.log,downloader.log,piece-hit.log,space-gc.log}</p>\n<p><a name=\"269346af\"></a></p>\n<h3 id=\"公开和私有registry混用\"><a href=\"#公开和私有registry混用\" class=\"headerlink\" title=\"公开和私有registry混用\"></a>公开和私有registry混用</h3><p>如果大量都是私有registry的话，可以在/etc/docker/daemon.json 中配置dfdaemon和加速器，如果是一半一半的话，那就干脆起两个dfdaemon就行了，一个–registry写私有的，一个–registry写公有的，然后也是配置 /etc/docker/daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://127.0.0.1:65001\"</span>,<span class=\"string\">\"https://xxx.mirror.aliyuncs.com\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"dns\"</span>: [<span class=\"string\">\"223.5.5.5\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"1075cc79\"></a></p>\n<h3 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h3><p>再次吐槽一下d7y的产品很好，解决了很大问题。但是这文档，真心不是给新手看的。从未见过如此坑多且深的文档。没见过哪家quick start 写的这么复杂。</p>\n<p><a name=\"5eff9f05\"></a></p>\n<h3 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h3><p>非常感谢钉钉群内的 d7y 的 contributor <a href=\"https://github.com/lowzj\" target=\"_blank\" rel=\"noopener\">太云-lowzj</a> 耐心解答，从开始研究d7y开始，遇到的很多坑都是在   <a href=\"https://github.com/lowzj\" target=\"_blank\" rel=\"noopener\">太云-lowzj</a> 帮助下蹚过去的。但是还是觉得，如果文档足够友好，肯定会减少群内被打扰的次数，进而节省自己时间的。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553916020142-2062e206-a3e6-4df0-bb28-1b20632751a7.png#align=left&amp;display=inline&amp;height=153&amp;name=image.png&amp;originHeight=153&amp;originWidth=436&amp;size=12860&amp;status=done&amp;width=436\" alt=\"image.png\"></p>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第13篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>书接上篇<a href=\"https://juejin.im/post/5c98a8e9f265da60e346fe04\" target=\"_blank\" rel=\"noopener\"> 012-P2P加速Docker镜像分发(阿里Dragonfly)</a> ,讲解了如何快速搭建Dragonfly,但是访问的是公开镜像，本文主要讲解如何下载私有镜像。</p>","more":"<p><a name=\"12267079\"></a></p>\n<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><a name=\"65227369\"></a></p>\n<h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>主机名</th>\n<th>系统</th>\n<th>ip</th>\n<th>docker version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>supernode</td>\n<td>d7y-1</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.75</td>\n<td>17.06.2ubuntu</td>\n</tr>\n<tr>\n<td>clinet1</td>\n<td>d7y-2</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.76</td>\n<td>17.06.2ubuntu</td>\n</tr>\n<tr>\n<td>clinet2</td>\n<td>d7y-3</td>\n<td>Ubuntu Server 16.04.6 LTS X64</td>\n<td>192.168.0.77</td>\n<td>17.06.2ubuntu</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"592cc647\"></a></p>\n<h3 id=\"私有registry\"><a href=\"#私有registry\" class=\"headerlink\" title=\"私有registry\"></a>私有registry</h3><p>本次以<a href=\"https://cr.console.aliyun.com/cn-qingdao/instances/repositories\" target=\"_blank\" rel=\"noopener\">阿里云私有镜像库</a>为例，可以自行开通。</p>\n<p><a name=\"c40e1e5e\"></a></p>\n<h3 id=\"文档之坑\"><a href=\"#文档之坑\" class=\"headerlink\" title=\"文档之坑\"></a>文档之坑</h3><p>官方文档比较简单,甚至带有误导性，下意识的以为应该在dfdaemon节点上配置auth信息，并且配的是真实的私有registry，如果真这么搞了，肯定被坑。（但是也能解释通，比较绕，dfdaemon本身就是一个伪装成registry，用来加速私有registry，那么登陆信息就应该换成dfdaemon ip，只是示例不太恰当而已，对初学者相当不友好倒是真的）<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553913213390-3865b763-e270-4d25-8043-d140efc5faeb.png#align=left&amp;display=inline&amp;height=546&amp;name=image.png&amp;originHeight=546&amp;originWidth=922&amp;size=67579&amp;status=done&amp;width=922\" alt=\"image.png\"></p>\n<p><a name=\"494e38bf\"></a></p>\n<h2 id=\"supernode步骤\"><a href=\"#supernode步骤\" class=\"headerlink\" title=\"supernode步骤\"></a>supernode步骤</h2><p><a name=\"71e91348\"></a></p>\n<h3 id=\"安装supernode\"><a href=\"#安装supernode\" class=\"headerlink\" title=\"安装supernode\"></a>安装supernode</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker run --name dragonfly-supernode --restart=always \\</span></span><br><span class=\"line\">              -d -p 8001:8001 -p 8002:8002 -v /data/dragonfly/supernode:/home/admin/supernode \\</span><br><span class=\"line\">              registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0 \\</span><br><span class=\"line\">              -Dsupernode.advertiseIp=192.168.0.75</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                                                            COMMAND                  CREATED              STATUS              PORTS                              NAMES</span><br><span class=\"line\">be7fb931db0b        registry.cn-hangzhou.aliyuncs.com/dragonflyoss/supernode:0.3.0   <span class=\"string\">\"/bin/sh -c '/root...\"</span>   About a minute ago   Up About a minute   0.0.0.0:8001-8002-&gt;8001-8002/tcp   dragonfly-supernode</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-1:/data/dragonfly/supernode/logs<span class=\"comment\"># cat app.log </span></span><br><span class=\"line\">2019-03-30 01:04:40.065 INFO  [      main] c.d.d.s.SuperNodeStarter       - Starting SuperNodeStarter on be7fb931db0b with PID 9 (/supernode.jar started by root <span class=\"keyword\">in</span> /)</span><br><span class=\"line\">2019-03-30 01:04:40.069 INFO  [      main] c.d.d.s.SuperNodeStarter       - No active profile <span class=\"built_in\">set</span>, falling back to default profiles: default</span><br><span class=\"line\">2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init <span class=\"built_in\">local</span> ip of supernode, use ip:192.168.0.75</span><br><span class=\"line\">2019-03-30 01:04:42.253 INFO  [      main] c.d.d.s.c.SupernodeProperties  - cluster members: [&#123;<span class=\"string\">\"downloadPort\"</span>:8001,<span class=\"string\">\"ip\"</span>:<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"registerPort\"</span>:8002&#125;]</span><br><span class=\"line\">2019-03-30 01:04:42.263 INFO  [      main] c.d.d.s.c.util.MonitorService  - available processors count is 4</span><br><span class=\"line\">2019-03-30 01:04:42.272 ERROR [  Thread-2] c.d.d.s.c.util.MonitorService  - process fields:null error</span><br><span class=\"line\">java.io.IOException: Cannot run program <span class=\"string\">\"tsar\"</span>: error=2, No such file or directory</span><br><span class=\"line\">\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)</span><br><span class=\"line\">\tat java.lang.Runtime.exec(Runtime.java:620)</span><br><span class=\"line\">\tat java.lang.Runtime.exec(Runtime.java:450)</span><br><span class=\"line\">\tat java.lang.Runtime.exec(Runtime.java:347)</span><br><span class=\"line\">\tat com.dragonflyoss.dragonfly.supernode.common.util.MonitorService<span class=\"variable\">$1</span>.run(MonitorService.java:56)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">Caused by: java.io.IOException: error=2, No such file or directory</span><br><span class=\"line\">\tat java.lang.UNIXProcess.forkAndExec(Native Method)</span><br><span class=\"line\">\tat java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:247)</span><br><span class=\"line\">\tat java.lang.ProcessImpl.start(ProcessImpl.java:134)</span><br><span class=\"line\">\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)</span><br><span class=\"line\">\t... 5 common frames omitted</span><br><span class=\"line\">2019-03-30 01:04:43.507 INFO  [      main] c.d.d.s.SuperNodeStarter       - Started SuperNodeStarter <span class=\"keyword\">in</span> 3.906 seconds (JVM running <span class=\"keyword\">for</span> 4.59)</span><br><span class=\"line\">2019-03-30 01:04:49.472 INFO  [  spring-1] c.d.d.s.s.p.PreheatServiceImpl - deleteExpiresPreheatTask, count:0</span><br></pre></td></tr></table></figure>\n<p>从 <code>2019-03-30 01:04:42.151 INFO  [      main] c.d.d.s.c.SupernodeProperties  - init local ip of supernode, use ip:192.168.0.75</code>  看，启动ip设置成功.</p>\n<p>注意，官方的镜像没改时区，默认是UTC时间，比北京东八区早8小时。</p>\n<p><a name=\"2537d15e\"></a></p>\n<h3 id=\"登陆私有registry并推送镜像\"><a href=\"#登陆私有registry并推送镜像\" class=\"headerlink\" title=\"登陆私有registry并推送镜像\"></a>登陆私有registry并推送镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker login https://registry.cn-qingdao.aliyuncs.com </span></span><br><span class=\"line\">Username: //你阿里云账号</span><br><span class=\"line\">Password: //你阿里云密码</span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker pull nginx:alpine</span></span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker tag nginx:alpine registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine</span></span><br><span class=\"line\">root@d7y-1:~<span class=\"comment\"># docker push registry.cn-qingdao.aliyuncs.com/d7y-test/nginx:alpine</span></span><br><span class=\"line\">alpine: digest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3 size: 1153</span><br></pre></td></tr></table></figure>\n<p><a name=\"5b37fed5\"></a></p>\n<h2 id=\"dfdaemon-步骤\"><a href=\"#dfdaemon-步骤\" class=\"headerlink\" title=\"dfdaemon 步骤\"></a>dfdaemon 步骤</h2><p><a name=\"fe0b02fa\"></a></p>\n<h3 id=\"安装dfdaemon\"><a href=\"#安装dfdaemon\" class=\"headerlink\" title=\"安装dfdaemon\"></a>安装dfdaemon</h3><p>在两台client节点分别执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-2:~<span class=\"comment\"># cat &lt;&lt;EOD &gt;/etc/dragonfly.conf</span></span><br><span class=\"line\">[node]</span><br><span class=\"line\">address=192.168.0.75</span><br><span class=\"line\">EOD</span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker run --name dragonfly-dfclient --restart=always \\</span></span><br><span class=\"line\">\t\t\t\t\t\t-d -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly \\</span><br><span class=\"line\">            -v /etc/dragonfly.conf:/etc/dragonfly.conf dragonflyoss/dfclient:v0.3.0 \\</span><br><span class=\"line\">            --registry=https://registry.cn-qingdao.aliyuncs.com  --ratelimit 100M</span><br><span class=\"line\">Unable to find image <span class=\"string\">'dragonflyoss/dfclient:v0.3.0'</span> locally</span><br><span class=\"line\">v0.3.0: Pulling from dragonflyoss/dfclient</span><br><span class=\"line\">169185f82c45: Pull complete </span><br><span class=\"line\">f58f64214283: Pull complete </span><br><span class=\"line\">bd8f062dc2d2: Pull complete </span><br><span class=\"line\">Digest: sha256:5bcabd5b34f4da0c2d489c8f99a23a401fb9ec57e54d4fa90457a93c5a85371f</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> dragonflyoss/dfclient:v0.3.0</span><br><span class=\"line\">b491e90489a584119b82ca934cf2ae087abc136f7f9de3542e14fb12bc1c7512</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># cat &lt;&lt;EOD &gt;/etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://127.0.0.1:65001\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># systemctl restart docker </span></span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                      NAMES</span><br><span class=\"line\">b491e90489a5        dragonflyoss/dfclient:v0.3.0   <span class=\"string\">\"/dfclient/dfdaemo...\"</span>   28 seconds ago      Up 4 seconds        0.0.0.0:65001-&gt;65001/tcp   dragonfly-dfclient</span><br><span class=\"line\"></span><br><span class=\"line\">root@d7y-2:~/.small-dragonfly/logs<span class=\"comment\"># cat dfdaemon.log</span></span><br><span class=\"line\">2019-03-30 01:18:21.331 INFO sign:1 : init...</span><br><span class=\"line\">2019-03-30 01:18:21.331 INFO sign:1 : rotate <span class=\"built_in\">log</span> routine start...</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : dfget version:</span><br><span class=\"line\">2019-03-30 01:18:21.338 ERRO sign:1 : init properties failed:open /etc/dragonfly/dfdaemon.yml: no such file or directory</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : init properties:&#123;<span class=\"string\">\"Registries\"</span>:[&#123;<span class=\"string\">\"Schema\"</span>:<span class=\"string\">\"https\"</span>,<span class=\"string\">\"Host\"</span>:<span class=\"string\">\"registry.cn-qingdao.aliyuncs.com\"</span>,<span class=\"string\">\"Certs\"</span>:null,<span class=\"string\">\"Regx\"</span>:<span class=\"string\">\"(^localhost$)|(^127.0.0.1$)|(^127.0.0.1$)\"</span>&#125;]&#125;</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : init finish</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : start dfdaemon param: &amp;&#123;DfPath:/dfclient/dfget DFRepo:/root/.small-dragonfly/dfdaemon/data/ RateLimit:100M CallSystem:com_ops_dragonfly URLFilter:Signature&amp;Expires&amp;OSSAccessKeyId Notbs:<span class=\"literal\">true</span> MaxProcs:4 Version:<span class=\"literal\">false</span> Verbose:<span class=\"literal\">false</span> HostIP:127.0.0.1 Port:65001 Registry:https://registry.cn-qingdao.aliyuncs.com DownRule: CertFile: KeyFile: TrustHosts:[] ConfigPath:/etc/dragonfly/dfdaemon.yml&#125;</span><br><span class=\"line\">2019-03-30 01:18:21.338 INFO sign:1 : launch dfdaemon http server on 127.0.0.1:65001</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"414f9e5b\"></a></p>\n<h3 id=\"登陆dfdaemon\"><a href=\"#登陆dfdaemon\" class=\"headerlink\" title=\"登陆dfdaemon\"></a>登陆dfdaemon</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker login http://127.0.0.1:65001</span></span><br><span class=\"line\">Username: //你阿里云账号</span><br><span class=\"line\">Password: //你阿里云密码</span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">root@d7y-2:~<span class=\"comment\"># cat ~/.docker/config.json </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"auths\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"127.0.0.1:65001\"</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"auth\"</span>: <span class=\"string\">\"zzxxxxxx=\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"c6e04966\"></a></p>\n<h3 id=\"pull-私有镜像\"><a href=\"#pull-私有镜像\" class=\"headerlink\" title=\"pull 私有镜像\"></a>pull 私有镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d7y-2:~<span class=\"comment\"># docker pull 127.0.0.1:65001/d7y-test/nginx:alpine</span></span><br><span class=\"line\">alpine: Pulling from d7y-test/nginx</span><br><span class=\"line\">8e402f1a9c57: Pull complete </span><br><span class=\"line\">56b0d9b69cc9: Pull complete </span><br><span class=\"line\">b66c8bb200cc: Pull complete </span><br><span class=\"line\">4ec77fc9c55f: Pull complete </span><br><span class=\"line\">Digest: sha256:857e6f195df0e9b497be0c7fad0f013126407aaeb71edcef66a24e8b990d94b3</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> 127.0.0.1:65001/d7y-test/nginx:alpine</span><br></pre></td></tr></table></figure>\n<p>可以通过iftop 等命令，观察流量。</p>\n<p><a name=\"0d98c747\"></a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><a name=\"21b8fa6d\"></a></p>\n<h3 id=\"排错\"><a href=\"#排错\" class=\"headerlink\" title=\"排错\"></a>排错</h3><p>如果有遇到其他问题，可以通过查看日志来获取更多信息。<br>dfdaemon log : /root/.small-dragonfly/logs/{dfclient.log,dfdaemon.log,dfserver.log}<br>supernode log: /home/admin/supernode/{app.log,data-gc.log,downloader.log,piece-hit.log,space-gc.log}</p>\n<p><a name=\"269346af\"></a></p>\n<h3 id=\"公开和私有registry混用\"><a href=\"#公开和私有registry混用\" class=\"headerlink\" title=\"公开和私有registry混用\"></a>公开和私有registry混用</h3><p>如果大量都是私有registry的话，可以在/etc/docker/daemon.json 中配置dfdaemon和加速器，如果是一半一半的话，那就干脆起两个dfdaemon就行了，一个–registry写私有的，一个–registry写公有的，然后也是配置 /etc/docker/daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://127.0.0.1:65001\"</span>,<span class=\"string\">\"https://xxx.mirror.aliyuncs.com\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"dns\"</span>: [<span class=\"string\">\"223.5.5.5\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"1075cc79\"></a></p>\n<h3 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h3><p>再次吐槽一下d7y的产品很好，解决了很大问题。但是这文档，真心不是给新手看的。从未见过如此坑多且深的文档。没见过哪家quick start 写的这么复杂。</p>\n<p><a name=\"5eff9f05\"></a></p>\n<h3 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h3><p>非常感谢钉钉群内的 d7y 的 contributor <a href=\"https://github.com/lowzj\" target=\"_blank\" rel=\"noopener\">太云-lowzj</a> 耐心解答，从开始研究d7y开始，遇到的很多坑都是在   <a href=\"https://github.com/lowzj\" target=\"_blank\" rel=\"noopener\">太云-lowzj</a> 帮助下蹚过去的。但是还是觉得，如果文档足够友好，肯定会减少群内被打扰的次数，进而节省自己时间的。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1553916020142-2062e206-a3e6-4df0-bb28-1b20632751a7.png#align=left&amp;display=inline&amp;height=153&amp;name=image.png&amp;originHeight=153&amp;originWidth=436&amp;size=12860&amp;status=done&amp;width=436\" alt=\"image.png\"></p>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"elasticsearch冷热数据分离并使用oss备份老数据","date":"2018-07-30T08:31:40.000Z","_content":"\n\n\n从某东看希捷2.5寸企业级硬盘10K转600G在1.6K左右，英特尔ssd 1T 在2-3K左右，（普通民用的便宜，普通硬盘8T 10T 12T 的也不超过2.5K）\n\n怎么在保证扩容方便（不用走冗长的采购审批流程），保证数据安全（oss 持久性SLA是99.999999999% ），前提下，节省存储成本,经过一番研究，发现用oss来做虽然猥琐了点，但是成本最低（目前阿里云oss有活动1T三年99,10T三年999，到期后，就别续费了，新买资源包就行了，数据不用迁移）。\n\n下面讲一下具体步骤，以及遇到的坑。\n\n\n\n## 简要介绍\n\n1.  环境 vpc 内网 ，ecs，数据磁盘，oss，elk\n2.  热数据存在ecs数据磁盘，冷数据存在oss上，归档数据存在oss上\n   1. 热数据(hot)：(根据情况1d-7d,一般日志场景超过1d就不会有高频访问了)，按需设置1-3副本\n   2. 冷数据(warm)：(根据情况[2~7]-30天的)，副本0，分片1，应对偶尔的查询需求\n   3. 快照(snapshot)：超过30天的，进行归档。\n\n准备[ossfs > 快速安装](https://help.aliyun.com/document_detail/32196.html?spm=a2c4g.11174283.6.1104.IDaiUN) 将oss挂载成warm节点的磁盘\n\n```\n$ mkdir /path/to/warm/dir\n$ ossfs <bucketname> /path/to/warm/dir -ourl=http://vpc100-oss-cn-<节点名>.aliyuncs.com  -opasswd_file=/path/to/oss-passwds/file -o allow_other -omultireq_max=100 -omultipart_size=20 -oretries=4 -oconnect_timeout=600 -oreadwrite_timeout=600 -omax_stat_cache_size=5000\n```\n\n\n\n## 设置冷热节点\n\n详见 [“Hot-Warm” Architecture in Elasticsearch 5.x](https://www.elastic.co/blog/hot-warm-architecture-in-elasticsearch-5-x) 中文(像是机译) [Elasticsearch 5.x 版本中的冷热节点架构](https://github.com/ximply/ElasticStackArticle/blob/master/hot-warm-architecture-in-elasticsearch-5-x-in-chinese.md)\n\n> 请别纠结为嘛hot-warm不叫成热-温，而是叫冷热，纯粹是叫着顺口，that's all\n\n#### 修改elasticsearch.yml\n\n1. 在热数据节点的elasticsearch.yml中增加 `node.attr.box_type: hot `,`path.data:/path/to/data` 如果是多块磁盘建议写多个文件夹，加快写入速度，防止磁盘io阻塞 详见 [`path.data` and `path.logs`](https://www.elastic.co/guide/en/elasticsearch/reference/current/path-settings.html)\n2. 在冷数据节点的elasticsearch.yml中增加 `node.attr.box_type: warm`,`path.data:/path/to/oss_data`\n\nNote: 此处的`hot`和`warm`是可以随便写的\n\n#### 设置索引模板\n\n```\nPUT _template/hot_warm_template\n{\n    \"order\": 0,\n    \"version\": 60001,\n    \"index_patterns\": [\n      \"<indexname>*\"\n    ],\n    \"settings\" : {\n      \"index.routing.allocation.require.box_type\": \"hot\"\n    ...\n}\n```\n\n以后新增的索引，都会发往`hot`节点， 需要将上面的template中的`<indexname>`替换成真正的indexname，如果要弄成全部，则可以粗暴的改成`*`\n\n\n\n#### 将老数据迁移到warm节点（oss）\n\n**坑1**  开始想着标准存储的dd测速，读100m/s 写40m/s速度足够了，然后热数据直接写入到oss，返回数据会有丢失情况（正常30G的数据，oss只有1-2G），原因不明，改用hot-warm后，因为不会有小文件(forcemerge成大文件了)，转存到oss上不会丢失数据\n\n\n\n简单的，可以通过 \n\n```\nPUT /indexname/_settings\n{ \n  \"settings\": { \n    \"index.routing.allocation.require.box_type\": \"warm\"\n  } \n}\n```\n\n但是不建议这么做，一个是累（每次都得写命令干?），再就是还得合并索引段(index segments),另外还得减少副本数。\n\n所以，Curator 了解一下？详见[Features](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about-features.html) \n\n如果嫌弃安装麻烦，我封装了一个[docker-curator](https://github.com/anjia0532/docker-curator)镜像\n\n\n\n##### action_file.yml\n\n```yaml\nactions:\n  1:\n    action: replicas\n    description: >-\n      超过3天的logstash-%Y.%m.%d副本数设置成0\n    options:\n      count: 0\n      wait_for_completion: True\n      disable_action: True\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: creation_date\n      direction: older\n      unit: days\n      unit_count: 3\n      \n  2:\n    action: forcemerge\n    description: >-\n      强制合并超过3天的logstash-%Y.%m.%d为每片（每个shard不建议超过32G）2个segments(单个segments不建议超过5G)，自动跳过低于2个segments的，防止重复合并\n    options:\n      max_num_segments: 2\n      delay: 120\n      timeout_override:\n      continue_if_exception: False\n      disable_action: True\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    - filtertype: age\n      source: creation_date\n      direction: older\n      unit: days\n      unit_count: 3\n      exclude:\n    - filtertype: forcemerged\n      max_num_segments: 2\n      exclude:\n  3:\n    action: allocation\n    description: \"将超过3天的logstash-%Y.%m.%d移动到warm节点上\"\n    options:\n      key: box_type\n      value: warm\n      allocation_type: require\n      wait_for_completion: true\n      timeout_override:\n      continue_if_exception: false\n      disable_action: false\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 3\n```\n\n可以通过`GET _cat/segments` 查看segments count和所属节点\n\n因为warm节点的data指定的是oss挂载的磁盘，所以数据此时已经迁移到oss上了\n\n#### 数据快照备份到oss\n\n如果你想说为啥warm已经放到oss了，还要整快照(备份)\n\n1. 可以不同集群恢复数据\n2. 减少es堆内存\n3. 关闭用不到的index等\n4. 如果是按量付费的oss，归档类型的比标准类型的便宜很多(0.033元/GB/月)\n\n以上\n\n##### 设置共享文件存储\n\n我采用的还是挂载磁盘的方案，不过社区内有大牛基于aliyun-oss-sdk写了个es的存储插件，[elasticsearch-repository-oss](https://github.com/zhichen/elasticsearch-repository-oss/wiki) 但是这个是5.5.3的，如果其他版本，`需要修改plguins/plugin-descriptor.properties中的elasticsearch.version和version,改为自己es集群的版本` 也有别人改好的，参见  [gist#aramalipoor/.env](https://gist.github.com/aramalipoor/c298395d937e1ad412db2ba8c0b239e9) ，当然也可以fork后简单的改改，比如升级一下sdk版本，优化一下代码啥的，我也是这么干的，哈哈，详见 [anjia0532/elasticsearch-repository-oss#6.3.1](https://github.com/anjia0532/elasticsearch-repository-oss/releases)  没有改原有逻辑，只是升级了jar版本\n\n\n\n此处主要讲 挂载磁盘当共享存储用的方案，参见 [shared file system repository](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_shared_file_system_repository)\n1.挂载oss磁盘为 `/es-data/backup`\n\n2.修改所有master节点和data节点的`elasticsearch.yml`\n```yaml\npath.repo: [\"/es-data/backup\"]\n```\n3.创建共享文件库\n```\nPUT /_snapshot/my_backup\n{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"/es-data/backup\",\n        \"compress\": true\n    }\n}\n```\n\naction_file.yml\n\n```yaml\nactions:\n  1:\n    action: snapshot\n    description: >-\n      将超过15天的logstash-%Y.%m.%d 索引按照指定的名字(默认curator-%Y%m%d%H%M%S)备份快照。\n      等待快照完成，不跳过存储库文件系统检查，使用别的选项创建快照\n    options:\n      repository:\n      # 如果为空，则默认快照名为 'curator-%Y%m%d%H%M%S'\n      name:\n      ignore_unavailable: False\n      include_global_state: True\n      partial: False\n      wait_for_completion: True\n      skip_repo_fs_check: False\n      disable_action: True\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: creation_date\n      direction: older\n      unit: days\n      unit_count: 15\n```\n\n其余的，如何恢复和恢复时修改index settings详见 [modules-snapshots.html#restore]( https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#restore)\n\n\n\n","source":"_posts/es-oss-hot-warm-backup.md","raw":"---\ntitle: elasticsearch冷热数据分离并使用oss备份老数据\ndate: 2018-07-30 16:31:40\ntags: [elasticsearch,es,hot-warm,oss,backup,curator]\n---\n\n\n\n从某东看希捷2.5寸企业级硬盘10K转600G在1.6K左右，英特尔ssd 1T 在2-3K左右，（普通民用的便宜，普通硬盘8T 10T 12T 的也不超过2.5K）\n\n怎么在保证扩容方便（不用走冗长的采购审批流程），保证数据安全（oss 持久性SLA是99.999999999% ），前提下，节省存储成本,经过一番研究，发现用oss来做虽然猥琐了点，但是成本最低（目前阿里云oss有活动1T三年99,10T三年999，到期后，就别续费了，新买资源包就行了，数据不用迁移）。\n\n下面讲一下具体步骤，以及遇到的坑。\n\n\n\n## 简要介绍\n\n1.  环境 vpc 内网 ，ecs，数据磁盘，oss，elk\n2.  热数据存在ecs数据磁盘，冷数据存在oss上，归档数据存在oss上\n   1. 热数据(hot)：(根据情况1d-7d,一般日志场景超过1d就不会有高频访问了)，按需设置1-3副本\n   2. 冷数据(warm)：(根据情况[2~7]-30天的)，副本0，分片1，应对偶尔的查询需求\n   3. 快照(snapshot)：超过30天的，进行归档。\n\n准备[ossfs > 快速安装](https://help.aliyun.com/document_detail/32196.html?spm=a2c4g.11174283.6.1104.IDaiUN) 将oss挂载成warm节点的磁盘\n\n```\n$ mkdir /path/to/warm/dir\n$ ossfs <bucketname> /path/to/warm/dir -ourl=http://vpc100-oss-cn-<节点名>.aliyuncs.com  -opasswd_file=/path/to/oss-passwds/file -o allow_other -omultireq_max=100 -omultipart_size=20 -oretries=4 -oconnect_timeout=600 -oreadwrite_timeout=600 -omax_stat_cache_size=5000\n```\n\n\n\n## 设置冷热节点\n\n详见 [“Hot-Warm” Architecture in Elasticsearch 5.x](https://www.elastic.co/blog/hot-warm-architecture-in-elasticsearch-5-x) 中文(像是机译) [Elasticsearch 5.x 版本中的冷热节点架构](https://github.com/ximply/ElasticStackArticle/blob/master/hot-warm-architecture-in-elasticsearch-5-x-in-chinese.md)\n\n> 请别纠结为嘛hot-warm不叫成热-温，而是叫冷热，纯粹是叫着顺口，that's all\n\n#### 修改elasticsearch.yml\n\n1. 在热数据节点的elasticsearch.yml中增加 `node.attr.box_type: hot `,`path.data:/path/to/data` 如果是多块磁盘建议写多个文件夹，加快写入速度，防止磁盘io阻塞 详见 [`path.data` and `path.logs`](https://www.elastic.co/guide/en/elasticsearch/reference/current/path-settings.html)\n2. 在冷数据节点的elasticsearch.yml中增加 `node.attr.box_type: warm`,`path.data:/path/to/oss_data`\n\nNote: 此处的`hot`和`warm`是可以随便写的\n\n#### 设置索引模板\n\n```\nPUT _template/hot_warm_template\n{\n    \"order\": 0,\n    \"version\": 60001,\n    \"index_patterns\": [\n      \"<indexname>*\"\n    ],\n    \"settings\" : {\n      \"index.routing.allocation.require.box_type\": \"hot\"\n    ...\n}\n```\n\n以后新增的索引，都会发往`hot`节点， 需要将上面的template中的`<indexname>`替换成真正的indexname，如果要弄成全部，则可以粗暴的改成`*`\n\n\n\n#### 将老数据迁移到warm节点（oss）\n\n**坑1**  开始想着标准存储的dd测速，读100m/s 写40m/s速度足够了，然后热数据直接写入到oss，返回数据会有丢失情况（正常30G的数据，oss只有1-2G），原因不明，改用hot-warm后，因为不会有小文件(forcemerge成大文件了)，转存到oss上不会丢失数据\n\n\n\n简单的，可以通过 \n\n```\nPUT /indexname/_settings\n{ \n  \"settings\": { \n    \"index.routing.allocation.require.box_type\": \"warm\"\n  } \n}\n```\n\n但是不建议这么做，一个是累（每次都得写命令干?），再就是还得合并索引段(index segments),另外还得减少副本数。\n\n所以，Curator 了解一下？详见[Features](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about-features.html) \n\n如果嫌弃安装麻烦，我封装了一个[docker-curator](https://github.com/anjia0532/docker-curator)镜像\n\n\n\n##### action_file.yml\n\n```yaml\nactions:\n  1:\n    action: replicas\n    description: >-\n      超过3天的logstash-%Y.%m.%d副本数设置成0\n    options:\n      count: 0\n      wait_for_completion: True\n      disable_action: True\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: creation_date\n      direction: older\n      unit: days\n      unit_count: 3\n      \n  2:\n    action: forcemerge\n    description: >-\n      强制合并超过3天的logstash-%Y.%m.%d为每片（每个shard不建议超过32G）2个segments(单个segments不建议超过5G)，自动跳过低于2个segments的，防止重复合并\n    options:\n      max_num_segments: 2\n      delay: 120\n      timeout_override:\n      continue_if_exception: False\n      disable_action: True\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    - filtertype: age\n      source: creation_date\n      direction: older\n      unit: days\n      unit_count: 3\n      exclude:\n    - filtertype: forcemerged\n      max_num_segments: 2\n      exclude:\n  3:\n    action: allocation\n    description: \"将超过3天的logstash-%Y.%m.%d移动到warm节点上\"\n    options:\n      key: box_type\n      value: warm\n      allocation_type: require\n      wait_for_completion: true\n      timeout_override:\n      continue_if_exception: false\n      disable_action: false\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 3\n```\n\n可以通过`GET _cat/segments` 查看segments count和所属节点\n\n因为warm节点的data指定的是oss挂载的磁盘，所以数据此时已经迁移到oss上了\n\n#### 数据快照备份到oss\n\n如果你想说为啥warm已经放到oss了，还要整快照(备份)\n\n1. 可以不同集群恢复数据\n2. 减少es堆内存\n3. 关闭用不到的index等\n4. 如果是按量付费的oss，归档类型的比标准类型的便宜很多(0.033元/GB/月)\n\n以上\n\n##### 设置共享文件存储\n\n我采用的还是挂载磁盘的方案，不过社区内有大牛基于aliyun-oss-sdk写了个es的存储插件，[elasticsearch-repository-oss](https://github.com/zhichen/elasticsearch-repository-oss/wiki) 但是这个是5.5.3的，如果其他版本，`需要修改plguins/plugin-descriptor.properties中的elasticsearch.version和version,改为自己es集群的版本` 也有别人改好的，参见  [gist#aramalipoor/.env](https://gist.github.com/aramalipoor/c298395d937e1ad412db2ba8c0b239e9) ，当然也可以fork后简单的改改，比如升级一下sdk版本，优化一下代码啥的，我也是这么干的，哈哈，详见 [anjia0532/elasticsearch-repository-oss#6.3.1](https://github.com/anjia0532/elasticsearch-repository-oss/releases)  没有改原有逻辑，只是升级了jar版本\n\n\n\n此处主要讲 挂载磁盘当共享存储用的方案，参见 [shared file system repository](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_shared_file_system_repository)\n1.挂载oss磁盘为 `/es-data/backup`\n\n2.修改所有master节点和data节点的`elasticsearch.yml`\n```yaml\npath.repo: [\"/es-data/backup\"]\n```\n3.创建共享文件库\n```\nPUT /_snapshot/my_backup\n{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"/es-data/backup\",\n        \"compress\": true\n    }\n}\n```\n\naction_file.yml\n\n```yaml\nactions:\n  1:\n    action: snapshot\n    description: >-\n      将超过15天的logstash-%Y.%m.%d 索引按照指定的名字(默认curator-%Y%m%d%H%M%S)备份快照。\n      等待快照完成，不跳过存储库文件系统检查，使用别的选项创建快照\n    options:\n      repository:\n      # 如果为空，则默认快照名为 'curator-%Y%m%d%H%M%S'\n      name:\n      ignore_unavailable: False\n      include_global_state: True\n      partial: False\n      wait_for_completion: True\n      skip_repo_fs_check: False\n      disable_action: True\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: creation_date\n      direction: older\n      unit: days\n      unit_count: 15\n```\n\n其余的，如何恢复和恢复时修改index settings详见 [modules-snapshots.html#restore]( https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#restore)\n\n\n\n","slug":"es-oss-hot-warm-backup","published":1,"updated":"2019-08-16T05:56:21.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojit00dc24dom4ipf9n2","content":"<p>从某东看希捷2.5寸企业级硬盘10K转600G在1.6K左右，英特尔ssd 1T 在2-3K左右，（普通民用的便宜，普通硬盘8T 10T 12T 的也不超过2.5K）</p>\n<p>怎么在保证扩容方便（不用走冗长的采购审批流程），保证数据安全（oss 持久性SLA是99.999999999% ），前提下，节省存储成本,经过一番研究，发现用oss来做虽然猥琐了点，但是成本最低（目前阿里云oss有活动1T三年99,10T三年999，到期后，就别续费了，新买资源包就行了，数据不用迁移）。</p>\n<p>下面讲一下具体步骤，以及遇到的坑。</p>\n<h2 id=\"简要介绍\"><a href=\"#简要介绍\" class=\"headerlink\" title=\"简要介绍\"></a>简要介绍</h2><ol>\n<li>环境 vpc 内网 ，ecs，数据磁盘，oss，elk</li>\n<li>热数据存在ecs数据磁盘，冷数据存在oss上，归档数据存在oss上<ol>\n<li>热数据(hot)：(根据情况1d-7d,一般日志场景超过1d就不会有高频访问了)，按需设置1-3副本</li>\n<li>冷数据(warm)：(根据情况[2~7]-30天的)，副本0，分片1，应对偶尔的查询需求</li>\n<li>快照(snapshot)：超过30天的，进行归档。</li>\n</ol>\n</li>\n</ol>\n<p>准备<a href=\"https://help.aliyun.com/document_detail/32196.html?spm=a2c4g.11174283.6.1104.IDaiUN\" target=\"_blank\" rel=\"noopener\">ossfs &gt; 快速安装</a> 将oss挂载成warm节点的磁盘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir /path/to/warm/dir</span><br><span class=\"line\">$ ossfs &lt;bucketname&gt; /path/to/warm/dir -ourl=http://vpc100-oss-cn-&lt;节点名&gt;.aliyuncs.com  -opasswd_file=/path/to/oss-passwds/file -o allow_other -omultireq_max=100 -omultipart_size=20 -oretries=4 -oconnect_timeout=600 -oreadwrite_timeout=600 -omax_stat_cache_size=5000</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置冷热节点\"><a href=\"#设置冷热节点\" class=\"headerlink\" title=\"设置冷热节点\"></a>设置冷热节点</h2><p>详见 <a href=\"https://www.elastic.co/blog/hot-warm-architecture-in-elasticsearch-5-x\" target=\"_blank\" rel=\"noopener\">“Hot-Warm” Architecture in Elasticsearch 5.x</a> 中文(像是机译) <a href=\"https://github.com/ximply/ElasticStackArticle/blob/master/hot-warm-architecture-in-elasticsearch-5-x-in-chinese.md\" target=\"_blank\" rel=\"noopener\">Elasticsearch 5.x 版本中的冷热节点架构</a></p>\n<blockquote>\n<p>请别纠结为嘛hot-warm不叫成热-温，而是叫冷热，纯粹是叫着顺口，that’s all</p>\n</blockquote>\n<h4 id=\"修改elasticsearch-yml\"><a href=\"#修改elasticsearch-yml\" class=\"headerlink\" title=\"修改elasticsearch.yml\"></a>修改elasticsearch.yml</h4><ol>\n<li>在热数据节点的elasticsearch.yml中增加 <code>node.attr.box_type: hot</code>,<code>path.data:/path/to/data</code> 如果是多块磁盘建议写多个文件夹，加快写入速度，防止磁盘io阻塞 详见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/path-settings.html\" target=\"_blank\" rel=\"noopener\"><code>path.data</code> and <code>path.logs</code></a></li>\n<li>在冷数据节点的elasticsearch.yml中增加 <code>node.attr.box_type: warm</code>,<code>path.data:/path/to/oss_data</code></li>\n</ol>\n<p>Note: 此处的<code>hot</code>和<code>warm</code>是可以随便写的</p>\n<h4 id=\"设置索引模板\"><a href=\"#设置索引模板\" class=\"headerlink\" title=\"设置索引模板\"></a>设置索引模板</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT _template/hot_warm_template</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;order&quot;: 0,</span><br><span class=\"line\">    &quot;version&quot;: 60001,</span><br><span class=\"line\">    &quot;index_patterns&quot;: [</span><br><span class=\"line\">      &quot;&lt;indexname&gt;*&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;settings&quot; : &#123;</span><br><span class=\"line\">      &quot;index.routing.allocation.require.box_type&quot;: &quot;hot&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后新增的索引，都会发往<code>hot</code>节点， 需要将上面的template中的<code>&lt;indexname&gt;</code>替换成真正的indexname，如果要弄成全部，则可以粗暴的改成<code>*</code></p>\n<h4 id=\"将老数据迁移到warm节点（oss）\"><a href=\"#将老数据迁移到warm节点（oss）\" class=\"headerlink\" title=\"将老数据迁移到warm节点（oss）\"></a>将老数据迁移到warm节点（oss）</h4><p><strong>坑1</strong>  开始想着标准存储的dd测速，读100m/s 写40m/s速度足够了，然后热数据直接写入到oss，返回数据会有丢失情况（正常30G的数据，oss只有1-2G），原因不明，改用hot-warm后，因为不会有小文件(forcemerge成大文件了)，转存到oss上不会丢失数据</p>\n<p>简单的，可以通过 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /indexname/_settings</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  &quot;settings&quot;: &#123; </span><br><span class=\"line\">    &quot;index.routing.allocation.require.box_type&quot;: &quot;warm&quot;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是不建议这么做，一个是累（每次都得写命令干?），再就是还得合并索引段(index segments),另外还得减少副本数。</p>\n<p>所以，Curator 了解一下？详见<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about-features.html\" target=\"_blank\" rel=\"noopener\">Features</a> </p>\n<p>如果嫌弃安装麻烦，我封装了一个<a href=\"https://github.com/anjia0532/docker-curator\" target=\"_blank\" rel=\"noopener\">docker-curator</a>镜像</p>\n<h5 id=\"action-file-yml\"><a href=\"#action-file-yml\" class=\"headerlink\" title=\"action_file.yml\"></a>action_file.yml</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">replicas</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">超过3天的logstash-%Y.%m.%d副本数设置成0</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      count:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">      wait_for_completion:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">creation_date</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"number\">2</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">forcemerge</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">强制合并超过3天的logstash-%Y.%m.%d为每片（每个shard不建议超过32G）2个segments(单个segments不建议超过5G)，自动跳过低于2个segments的，防止重复合并</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      max_num_segments:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      delay:</span> <span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">creation_date</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">forcemerged</span></span><br><span class=\"line\"><span class=\"attr\">      max_num_segments:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\">  <span class=\"number\">3</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">allocation</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">\"将超过3天的logstash-%Y.%m.%d移动到warm节点上\"</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      key:</span> <span class=\"string\">box_type</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">warm</span></span><br><span class=\"line\"><span class=\"attr\">      allocation_type:</span> <span class=\"string\">require</span></span><br><span class=\"line\"><span class=\"attr\">      wait_for_completion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">name</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>可以通过<code>GET _cat/segments</code> 查看segments count和所属节点</p>\n<p>因为warm节点的data指定的是oss挂载的磁盘，所以数据此时已经迁移到oss上了</p>\n<h4 id=\"数据快照备份到oss\"><a href=\"#数据快照备份到oss\" class=\"headerlink\" title=\"数据快照备份到oss\"></a>数据快照备份到oss</h4><p>如果你想说为啥warm已经放到oss了，还要整快照(备份)</p>\n<ol>\n<li>可以不同集群恢复数据</li>\n<li>减少es堆内存</li>\n<li>关闭用不到的index等</li>\n<li>如果是按量付费的oss，归档类型的比标准类型的便宜很多(0.033元/GB/月)</li>\n</ol>\n<p>以上</p>\n<h5 id=\"设置共享文件存储\"><a href=\"#设置共享文件存储\" class=\"headerlink\" title=\"设置共享文件存储\"></a>设置共享文件存储</h5><p>我采用的还是挂载磁盘的方案，不过社区内有大牛基于aliyun-oss-sdk写了个es的存储插件，<a href=\"https://github.com/zhichen/elasticsearch-repository-oss/wiki\" target=\"_blank\" rel=\"noopener\">elasticsearch-repository-oss</a> 但是这个是5.5.3的，如果其他版本，<code>需要修改plguins/plugin-descriptor.properties中的elasticsearch.version和version,改为自己es集群的版本</code> 也有别人改好的，参见  <a href=\"https://gist.github.com/aramalipoor/c298395d937e1ad412db2ba8c0b239e9\" target=\"_blank\" rel=\"noopener\">gist#aramalipoor/.env</a> ，当然也可以fork后简单的改改，比如升级一下sdk版本，优化一下代码啥的，我也是这么干的，哈哈，详见 <a href=\"https://github.com/anjia0532/elasticsearch-repository-oss/releases\" target=\"_blank\" rel=\"noopener\">anjia0532/elasticsearch-repository-oss#6.3.1</a>  没有改原有逻辑，只是升级了jar版本</p>\n<p>此处主要讲 挂载磁盘当共享存储用的方案，参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_shared_file_system_repository\" target=\"_blank\" rel=\"noopener\">shared file system repository</a><br>1.挂载oss磁盘为 <code>/es-data/backup</code></p>\n<p>2.修改所有master节点和data节点的<code>elasticsearch.yml</code><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">path.repo:</span> <span class=\"string\">[\"/es-data/backup\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>3.创建共享文件库<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /_snapshot/my_backup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;fs&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;location&quot;: &quot;/es-data/backup&quot;,</span><br><span class=\"line\">        &quot;compress&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>action_file.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">snapshot</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">将超过15天的logstash-%Y.%m.%d</span> <span class=\"string\">索引按照指定的名字(默认curator-%Y%m%d%H%M%S)备份快照。</span></span><br><span class=\"line\">      <span class=\"string\">等待快照完成，不跳过存储库文件系统检查，使用别的选项创建快照</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      repository:</span></span><br><span class=\"line\">      <span class=\"comment\"># 如果为空，则默认快照名为 'curator-%Y%m%d%H%M%S'</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span></span><br><span class=\"line\"><span class=\"attr\">      ignore_unavailable:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      include_global_state:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      partial:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      wait_for_completion:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      skip_repo_fs_check:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">creation_date</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>其余的，如何恢复和恢复时修改index settings详见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#restore\" target=\"_blank\" rel=\"noopener\">modules-snapshots.html#restore</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>从某东看希捷2.5寸企业级硬盘10K转600G在1.6K左右，英特尔ssd 1T 在2-3K左右，（普通民用的便宜，普通硬盘8T 10T 12T 的也不超过2.5K）</p>\n<p>怎么在保证扩容方便（不用走冗长的采购审批流程），保证数据安全（oss 持久性SLA是99.999999999% ），前提下，节省存储成本,经过一番研究，发现用oss来做虽然猥琐了点，但是成本最低（目前阿里云oss有活动1T三年99,10T三年999，到期后，就别续费了，新买资源包就行了，数据不用迁移）。</p>\n<p>下面讲一下具体步骤，以及遇到的坑。</p>\n<h2 id=\"简要介绍\"><a href=\"#简要介绍\" class=\"headerlink\" title=\"简要介绍\"></a>简要介绍</h2><ol>\n<li>环境 vpc 内网 ，ecs，数据磁盘，oss，elk</li>\n<li>热数据存在ecs数据磁盘，冷数据存在oss上，归档数据存在oss上<ol>\n<li>热数据(hot)：(根据情况1d-7d,一般日志场景超过1d就不会有高频访问了)，按需设置1-3副本</li>\n<li>冷数据(warm)：(根据情况[2~7]-30天的)，副本0，分片1，应对偶尔的查询需求</li>\n<li>快照(snapshot)：超过30天的，进行归档。</li>\n</ol>\n</li>\n</ol>\n<p>准备<a href=\"https://help.aliyun.com/document_detail/32196.html?spm=a2c4g.11174283.6.1104.IDaiUN\" target=\"_blank\" rel=\"noopener\">ossfs &gt; 快速安装</a> 将oss挂载成warm节点的磁盘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir /path/to/warm/dir</span><br><span class=\"line\">$ ossfs &lt;bucketname&gt; /path/to/warm/dir -ourl=http://vpc100-oss-cn-&lt;节点名&gt;.aliyuncs.com  -opasswd_file=/path/to/oss-passwds/file -o allow_other -omultireq_max=100 -omultipart_size=20 -oretries=4 -oconnect_timeout=600 -oreadwrite_timeout=600 -omax_stat_cache_size=5000</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置冷热节点\"><a href=\"#设置冷热节点\" class=\"headerlink\" title=\"设置冷热节点\"></a>设置冷热节点</h2><p>详见 <a href=\"https://www.elastic.co/blog/hot-warm-architecture-in-elasticsearch-5-x\" target=\"_blank\" rel=\"noopener\">“Hot-Warm” Architecture in Elasticsearch 5.x</a> 中文(像是机译) <a href=\"https://github.com/ximply/ElasticStackArticle/blob/master/hot-warm-architecture-in-elasticsearch-5-x-in-chinese.md\" target=\"_blank\" rel=\"noopener\">Elasticsearch 5.x 版本中的冷热节点架构</a></p>\n<blockquote>\n<p>请别纠结为嘛hot-warm不叫成热-温，而是叫冷热，纯粹是叫着顺口，that’s all</p>\n</blockquote>\n<h4 id=\"修改elasticsearch-yml\"><a href=\"#修改elasticsearch-yml\" class=\"headerlink\" title=\"修改elasticsearch.yml\"></a>修改elasticsearch.yml</h4><ol>\n<li>在热数据节点的elasticsearch.yml中增加 <code>node.attr.box_type: hot</code>,<code>path.data:/path/to/data</code> 如果是多块磁盘建议写多个文件夹，加快写入速度，防止磁盘io阻塞 详见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/path-settings.html\" target=\"_blank\" rel=\"noopener\"><code>path.data</code> and <code>path.logs</code></a></li>\n<li>在冷数据节点的elasticsearch.yml中增加 <code>node.attr.box_type: warm</code>,<code>path.data:/path/to/oss_data</code></li>\n</ol>\n<p>Note: 此处的<code>hot</code>和<code>warm</code>是可以随便写的</p>\n<h4 id=\"设置索引模板\"><a href=\"#设置索引模板\" class=\"headerlink\" title=\"设置索引模板\"></a>设置索引模板</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT _template/hot_warm_template</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;order&quot;: 0,</span><br><span class=\"line\">    &quot;version&quot;: 60001,</span><br><span class=\"line\">    &quot;index_patterns&quot;: [</span><br><span class=\"line\">      &quot;&lt;indexname&gt;*&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;settings&quot; : &#123;</span><br><span class=\"line\">      &quot;index.routing.allocation.require.box_type&quot;: &quot;hot&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后新增的索引，都会发往<code>hot</code>节点， 需要将上面的template中的<code>&lt;indexname&gt;</code>替换成真正的indexname，如果要弄成全部，则可以粗暴的改成<code>*</code></p>\n<h4 id=\"将老数据迁移到warm节点（oss）\"><a href=\"#将老数据迁移到warm节点（oss）\" class=\"headerlink\" title=\"将老数据迁移到warm节点（oss）\"></a>将老数据迁移到warm节点（oss）</h4><p><strong>坑1</strong>  开始想着标准存储的dd测速，读100m/s 写40m/s速度足够了，然后热数据直接写入到oss，返回数据会有丢失情况（正常30G的数据，oss只有1-2G），原因不明，改用hot-warm后，因为不会有小文件(forcemerge成大文件了)，转存到oss上不会丢失数据</p>\n<p>简单的，可以通过 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /indexname/_settings</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  &quot;settings&quot;: &#123; </span><br><span class=\"line\">    &quot;index.routing.allocation.require.box_type&quot;: &quot;warm&quot;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是不建议这么做，一个是累（每次都得写命令干?），再就是还得合并索引段(index segments),另外还得减少副本数。</p>\n<p>所以，Curator 了解一下？详见<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about-features.html\" target=\"_blank\" rel=\"noopener\">Features</a> </p>\n<p>如果嫌弃安装麻烦，我封装了一个<a href=\"https://github.com/anjia0532/docker-curator\" target=\"_blank\" rel=\"noopener\">docker-curator</a>镜像</p>\n<h5 id=\"action-file-yml\"><a href=\"#action-file-yml\" class=\"headerlink\" title=\"action_file.yml\"></a>action_file.yml</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">replicas</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">超过3天的logstash-%Y.%m.%d副本数设置成0</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      count:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">      wait_for_completion:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">creation_date</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"number\">2</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">forcemerge</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">强制合并超过3天的logstash-%Y.%m.%d为每片（每个shard不建议超过32G）2个segments(单个segments不建议超过5G)，自动跳过低于2个segments的，防止重复合并</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      max_num_segments:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      delay:</span> <span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">creation_date</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">forcemerged</span></span><br><span class=\"line\"><span class=\"attr\">      max_num_segments:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span></span><br><span class=\"line\">  <span class=\"number\">3</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">allocation</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">\"将超过3天的logstash-%Y.%m.%d移动到warm节点上\"</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      key:</span> <span class=\"string\">box_type</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">warm</span></span><br><span class=\"line\"><span class=\"attr\">      allocation_type:</span> <span class=\"string\">require</span></span><br><span class=\"line\"><span class=\"attr\">      wait_for_completion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">      timeout_override:</span></span><br><span class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">name</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>可以通过<code>GET _cat/segments</code> 查看segments count和所属节点</p>\n<p>因为warm节点的data指定的是oss挂载的磁盘，所以数据此时已经迁移到oss上了</p>\n<h4 id=\"数据快照备份到oss\"><a href=\"#数据快照备份到oss\" class=\"headerlink\" title=\"数据快照备份到oss\"></a>数据快照备份到oss</h4><p>如果你想说为啥warm已经放到oss了，还要整快照(备份)</p>\n<ol>\n<li>可以不同集群恢复数据</li>\n<li>减少es堆内存</li>\n<li>关闭用不到的index等</li>\n<li>如果是按量付费的oss，归档类型的比标准类型的便宜很多(0.033元/GB/月)</li>\n</ol>\n<p>以上</p>\n<h5 id=\"设置共享文件存储\"><a href=\"#设置共享文件存储\" class=\"headerlink\" title=\"设置共享文件存储\"></a>设置共享文件存储</h5><p>我采用的还是挂载磁盘的方案，不过社区内有大牛基于aliyun-oss-sdk写了个es的存储插件，<a href=\"https://github.com/zhichen/elasticsearch-repository-oss/wiki\" target=\"_blank\" rel=\"noopener\">elasticsearch-repository-oss</a> 但是这个是5.5.3的，如果其他版本，<code>需要修改plguins/plugin-descriptor.properties中的elasticsearch.version和version,改为自己es集群的版本</code> 也有别人改好的，参见  <a href=\"https://gist.github.com/aramalipoor/c298395d937e1ad412db2ba8c0b239e9\" target=\"_blank\" rel=\"noopener\">gist#aramalipoor/.env</a> ，当然也可以fork后简单的改改，比如升级一下sdk版本，优化一下代码啥的，我也是这么干的，哈哈，详见 <a href=\"https://github.com/anjia0532/elasticsearch-repository-oss/releases\" target=\"_blank\" rel=\"noopener\">anjia0532/elasticsearch-repository-oss#6.3.1</a>  没有改原有逻辑，只是升级了jar版本</p>\n<p>此处主要讲 挂载磁盘当共享存储用的方案，参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_shared_file_system_repository\" target=\"_blank\" rel=\"noopener\">shared file system repository</a><br>1.挂载oss磁盘为 <code>/es-data/backup</code></p>\n<p>2.修改所有master节点和data节点的<code>elasticsearch.yml</code><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">path.repo:</span> <span class=\"string\">[\"/es-data/backup\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>3.创建共享文件库<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /_snapshot/my_backup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;fs&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;location&quot;: &quot;/es-data/backup&quot;,</span><br><span class=\"line\">        &quot;compress&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>action_file.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions:</span></span><br><span class=\"line\">  <span class=\"number\">1</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">    action:</span> <span class=\"string\">snapshot</span></span><br><span class=\"line\"><span class=\"attr\">    description:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">将超过15天的logstash-%Y.%m.%d</span> <span class=\"string\">索引按照指定的名字(默认curator-%Y%m%d%H%M%S)备份快照。</span></span><br><span class=\"line\">      <span class=\"string\">等待快照完成，不跳过存储库文件系统检查，使用别的选项创建快照</span></span><br><span class=\"line\"><span class=\"attr\">    options:</span></span><br><span class=\"line\"><span class=\"attr\">      repository:</span></span><br><span class=\"line\">      <span class=\"comment\"># 如果为空，则默认快照名为 'curator-%Y%m%d%H%M%S'</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span></span><br><span class=\"line\"><span class=\"attr\">      ignore_unavailable:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      include_global_state:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      partial:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      wait_for_completion:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">      skip_repo_fs_check:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">    filters:</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">pattern</span></span><br><span class=\"line\"><span class=\"attr\">      kind:</span> <span class=\"string\">prefix</span></span><br><span class=\"line\"><span class=\"attr\">      value:</span> <span class=\"string\">logstash-</span></span><br><span class=\"line\"><span class=\"attr\">    - filtertype:</span> <span class=\"string\">age</span></span><br><span class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">creation_date</span></span><br><span class=\"line\"><span class=\"attr\">      direction:</span> <span class=\"string\">older</span></span><br><span class=\"line\"><span class=\"attr\">      unit:</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>其余的，如何恢复和恢复时修改index settings详见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#restore\" target=\"_blank\" rel=\"noopener\">modules-snapshots.html#restore</a></p>\n"},{"title":"加速和简化构建Docker(基于Google jib)","date":"2019-02-08T13:26:00.000Z","_content":"\n<a name=\"61a3ec66\"></a>\n## 介绍\n\n其实jib刚发布时就有关注，但是一直没有用于生产，原因有二\n\n- 基于 [spotify/docker-maven-plugin](https://github.com/spotify/docker-maven-plugin) (原作者已经停止维护docker-maven-plugin，建议使用 [spotify/dockerfile-maven](https://github.com/spotify/dockerfile-maven))的原有流程跑的好好的，没动力换成jib\n- Google jib 一直没有发布1.x ，担心其不稳定\n\n先简单介绍一下: [google jib](https://github.com/GoogleContainerTools/jib/) 是Google于18年7月发布的一个针对Java应用的构建镜像的工具(支持[Maven](https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin)和[Gradle](https://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin)) ，好处是能够复用构建缓存，能够加快构建，减小传输体积（后文会详细讲解），并且让Java工程师不需要理解Docker相关知识就可以简单构建镜像并且发布到指定registry里（不需要docker build , tag, push）\n\n本文会依次讲解三种java构建镜像的方法，分别是 **正统的Dockerfile** ，**spotify/dockerfile-maven** ，**Google jib** <br />\n附赠 [alibaba/arthas](https://github.com/alibaba/arthas) 的集成和使用方法\n\n<!-- more -->\n<a name=\"424a2ad8\"></a>\n## 准备\n\n- Maven3.5\n- Git\n- Jdk 1.8\n- Docker\n\n```bash\n$ git clone https://github.com/anjia0532/jib-demo.git\n$ cd jib-demo\n$ mvn clean package -DskipTests\n$ mkdir docker\n$ cp ./target/*.jar ./docker\n```\n\n<a name=\"Dockerfile\"></a>\n## Dockerfile\n\n创建 `./docker/Dockerfile` ,内容如下，需要注意此处为了方便理解，没有进行改进（比如限制用户，安装必要软件等）\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n\nADD *.jar /app.jar\n\nEXPOSE 8080\n\nCMD java ${JAVA_OPTS} /app.jar\n```\n\n详情参见 官方文档 [Dockerfile reference](https://docs.docker.com/engine/reference/builder/#usage)\n\n```bash\n$ cd ./docker\n$ sudo docker build . -t jib-demo\n$ docker images --查看本地images\n$ docker tag jib-demo anjia0532/jib-demo --不写registry，则默认为docker hub registry,可以在build时，直接写\n$ docker push anjia0532/jib-demo -- 推送到registry\n```\n\n<a name=\"5db9fd7c\"></a>\n### 小结\n\n**优点：** 不需要改造pom，灵活，配合CI工具，可以不侵入项目，运维可以针对性的进行安全加固，并且可以做到标准化<br />\n**缺点：** 命令复杂，Java程序员需要学习Dockerfile命令，或者运维和java沟通不畅时，时区，软件，甚至目录等都可能有出问题\n\n<a name=\"50df2cce\"></a>\n## spotify/dockerfile-maven\n\n需要注意，spotify/dockerfile-maven 是需要pom+Dockerfile一块用的，而docker-maven-plugin是可选的\n\n在项目根目录创建Dockerfile，如下所示\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n\nEXPOSE 8080\n\nARG JAR_FILE\nADD target/${JAR_FILE} /usr/share/myservice/myservice.jar\n\nENTRYPOINT [\"/usr/bin/java\", \"-jar\", \"/usr/share/myservice/myservice.jar\"]\n```\n\n在pom里增加dockerfile-maven-plugin到build标签里\n\n```xml\n<build>\n  <plugins>\n    ...\n    <plugin>\n      <groupId>com.spotify</groupId>\n      <artifactId>dockerfile-maven-plugin</artifactId>\n      <version>${dockerfile-maven-version}</version>\n      <executions>\n        <execution>\n          <id>default</id>\n          <goals>\n            <goal>build</goal>\n            <goal>push</goal>\n          </goals>\n        </execution>\n      </executions>\n      <configuration>\n        <repository>anjia0532/dockerfile-maven-demo</repository>\n        <tag>${project.version}</tag>\n        <buildArgs>\n          <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>\n        </buildArgs>\n      </configuration>\n    </plugin>\n    ...\n  <plugins>    \n<build>\n```\n\n运行如下命令进行构建\n\n```bash\n$ mvn package -DskipTests\n```\n\n详情参见 官方文档 [spotify/dockerfile-maven](https://github.com/spotify/dockerfile-maven)\n\n\n<a name=\"5db9fd7c\"></a>\n### 小结\n\n**优点：** 减少了docker build & tag & push 的操作，Java程序员能够控制镜像名<br />\n**缺点： **其实就是省了docker build & tag & push的操作，别的缺点一点没落不说，还得改动pom，还得要求写Dockerfile，tag只支持一个等等\n\n<a name=\"ce62745d\"></a>\n## Google jib\n\n修改默认settings.xml，增加registry认证,参见[Authentication Methods](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#authentication-methods)\n\n```xml\n<settings>\n  ...\n  <servers>\n    ...\n    <server>\n      <id>docker_hub</id>\n      <username>MY_USERNAME</username>\n      <password>{MY_SECRET}</password>\n    </server>\n  </servers>\n</settings>\n```\n\n改动pom.xml 增加 jib插件\n\n```xml\n<project>\n  ...\n  <build>\n    <plugins>\n      ...\n      <plugin>\n        <groupId>com.google.cloud.tools</groupId>\n        <artifactId>jib-maven-plugin</artifactId>\n        <version>1.0.0</version>\n        <configuration>\n          <from>\n            <!-- 如果不需要arthas可以改为 registry.hub.docker.com/openjdk:8-jdk-alpine -->\n            <image>registry.hub.docker.com/hengyunabc/arthas:latest</image>\n            <credHelper>docker_hub</credHelper>\n          </from>\n          <to>\n            <image>${project.artifactId}</image>\n            <tags>\n              <tag>latest</tag>\n              <tag>${project.version}</tag>\n            </tags>\n          </to>\n          <container>\n            <mainClass>${start-class}</mainClass>\n            <ports>\n              <port>8080</port>\n              <port>5701/udp</port>\n              <port>8563</port>\n            </ports>\n            <entrypoint>\n              <shell>sh</shell>\n              <option>-c</option>\n              <arg>java -cp /app/resources/:/app/classes/:/app/libs/* com.example.demo.DemoApplication</arg>\n            </entrypoint>\n            <appRoot>/app</appRoot>\n            <useCurrentTimestamp>true</useCurrentTimestamp>\n          </container>\n        </configuration>\n      </plugin>\n      ...\n    </plugins>\n  </build>\n  ...\n</project>\n```\n\n执行`mvn clean compile jib:dockerBuild` 构建docker镜像\n\n**注意：** <br />\npom中用的是 `registry.hub.docker.com/hengyunabc/arthas:latest` 是 [alibaba/arthas](https://github.com/alibaba/arthas/blob/master/README_CN.md) (阿里开源的一个Java诊断工具，便于线上调试)封装的docker镜像，如果不需要可以改成 `registry.hub.docker.com/openjdk:8-jdk-alpine`\n\n```bash\n$ docker run -d --init -p8563:8563 --name demo demo:latest\n## 下面是启动arthas，如果使用的是openjdk镜像请勿执行\n$ docker exec -it demo /bin/sh\n$ jid=$(jps | grep App | awk '{print $1}')\n$ java -jar /opt/arthas/arthas-boot.jar --target-ip 0.0.0.0 ${jid}\n```\n\n如果使用了arthas镜像，可以访问 [http://ip:8563](http://ip:8563) ，在页面上填上宿主ip，点击Connect， 然后参考[Arthas/命令列表](https://alibaba.github.io/arthas/commands.html) 了解Arthas命令用法\n\n![snipaste20190208_201332.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1549628164482-56f9cb66-b8bc-42db-82a3-ceb8717460bd.png#align=left&display=inline&height=340&linkTarget=_blank&name=snipaste20190208_201332.png&originHeight=612&originWidth=1343&size=85193&width=746#align=left&display=inline&height=340&originHeight=612&originWidth=1343&width=746)\n\n<a name=\"5db9fd7c\"></a>\n### 小结\n\n**优点：** 充分利用缓存，加快构建，不强制依赖docker daemon，依赖简单（在maven或gradle增加插件即可）<br />\n**缺点：** 不支持Docker RUN 命令(jib官方建议将run封装到base镜像)，对entrypoint和cmd支持不太好(alpine默认不支持多任务，跑java应用默认是pid 1 ，运行jmap等命令会报错，参考 [jmap not happy on alpine](https://github.com/docker-library/openjdk/issues/76) )\n\n<a name=\"d3f22cc0\"></a>\n### jib 缓存策略\n\n项目每次发布实际上变更的代码量不大，尤其依赖的jar变动的可能性较小，如果按照前两种方案构建镜像，会导致每次都全量构建，会导致存储和带宽资源浪费。\n\n> <a name=\"396d6264\"></a>\n## **Jib 如何让开发变得更美好**\n> Jib 利用了 Docker 镜像的分层机制，将其与构建系统集成，并通过以下方式优化 Java 容器镜像的构建：\n> 1. 简单——Jib 使用 Java 开发，并作为 Maven 或 Gradle 的一部分运行。你不需要编写 Dockerfile 或运行 Docker 守护进程，甚至无需创建包含所有依赖的大 JAR 包。因为 Jib 与 Java 构建过程紧密集成，所以它可以访问到打包应用程序所需的所有信息。在后续的容器构建期间，它将自动选择 Java 构建过的任何变体。\n> 1. 快速——Jib 利用镜像分层和注册表缓存来实现快速、增量的构建。它读取你的构建配置，将你的应用程序组织到不同的层（依赖项、资源、类）中，并只重新构建和推送发生变更的层。在项目进行快速迭代时，Jib 只讲发生变更的层（而不是整个应用程序）推送到注册表来节省宝贵的构建时间。\n> 1. 可重现——Jib 支持根据 Maven 和 Gradle 的构建元数据进行声明式的容器镜像构建，因此，只要输入保持不变，就可以通过配置重复创建相同的镜像。\n\n\n可以可以通过 `mvn clean compile jib:buildTar` 生成 `target/jib-image.tar` 然后用解压缩工具解压后进行分析，实际上jib会将lib中非快照部分放到一个层，将快照部分放到一个层，将源码编译后放到一个层。。。<br />\n![snipaste20190208_211839.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1549631943594-f1682ff3-91f5-47e7-8af4-ba83490c44a0.png#align=left&display=inline&height=485&linkTarget=_blank&name=snipaste20190208_211839.png&originHeight=507&originWidth=780&size=83376&width=746#align=left&display=inline&height=485&originHeight=507&originWidth=780&width=746)\n\n\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [谷歌开源 Java 镜像构建工具 Jib](https://www.infoq.cn/article/2018%2F07%2Fgoogle-opensource-Jib)\n- [jib自定义entrypoint](https://segmentfault.com/a/1190000016254151)\n- [jib打包docker镜像实战](https://segmentfault.com/a/1190000016156009)\n- [Jib - Containerize your Maven project](https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/README.md)\n\n","source":"_posts/google-jib.md","raw":"\n---\n\ntitle: 加速和简化构建Docker(基于Google jib)\n\ndate: 2019-02-08 21:26:00 +0800\n\ntags: [k8s,容器,docker,微服务,容器,google-jib,jib,arthas,jvm]\n\ncategories: k8s\n\n---\n\n<a name=\"61a3ec66\"></a>\n## 介绍\n\n其实jib刚发布时就有关注，但是一直没有用于生产，原因有二\n\n- 基于 [spotify/docker-maven-plugin](https://github.com/spotify/docker-maven-plugin) (原作者已经停止维护docker-maven-plugin，建议使用 [spotify/dockerfile-maven](https://github.com/spotify/dockerfile-maven))的原有流程跑的好好的，没动力换成jib\n- Google jib 一直没有发布1.x ，担心其不稳定\n\n先简单介绍一下: [google jib](https://github.com/GoogleContainerTools/jib/) 是Google于18年7月发布的一个针对Java应用的构建镜像的工具(支持[Maven](https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin)和[Gradle](https://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin)) ，好处是能够复用构建缓存，能够加快构建，减小传输体积（后文会详细讲解），并且让Java工程师不需要理解Docker相关知识就可以简单构建镜像并且发布到指定registry里（不需要docker build , tag, push）\n\n本文会依次讲解三种java构建镜像的方法，分别是 **正统的Dockerfile** ，**spotify/dockerfile-maven** ，**Google jib** <br />\n附赠 [alibaba/arthas](https://github.com/alibaba/arthas) 的集成和使用方法\n\n<!-- more -->\n<a name=\"424a2ad8\"></a>\n## 准备\n\n- Maven3.5\n- Git\n- Jdk 1.8\n- Docker\n\n```bash\n$ git clone https://github.com/anjia0532/jib-demo.git\n$ cd jib-demo\n$ mvn clean package -DskipTests\n$ mkdir docker\n$ cp ./target/*.jar ./docker\n```\n\n<a name=\"Dockerfile\"></a>\n## Dockerfile\n\n创建 `./docker/Dockerfile` ,内容如下，需要注意此处为了方便理解，没有进行改进（比如限制用户，安装必要软件等）\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n\nADD *.jar /app.jar\n\nEXPOSE 8080\n\nCMD java ${JAVA_OPTS} /app.jar\n```\n\n详情参见 官方文档 [Dockerfile reference](https://docs.docker.com/engine/reference/builder/#usage)\n\n```bash\n$ cd ./docker\n$ sudo docker build . -t jib-demo\n$ docker images --查看本地images\n$ docker tag jib-demo anjia0532/jib-demo --不写registry，则默认为docker hub registry,可以在build时，直接写\n$ docker push anjia0532/jib-demo -- 推送到registry\n```\n\n<a name=\"5db9fd7c\"></a>\n### 小结\n\n**优点：** 不需要改造pom，灵活，配合CI工具，可以不侵入项目，运维可以针对性的进行安全加固，并且可以做到标准化<br />\n**缺点：** 命令复杂，Java程序员需要学习Dockerfile命令，或者运维和java沟通不畅时，时区，软件，甚至目录等都可能有出问题\n\n<a name=\"50df2cce\"></a>\n## spotify/dockerfile-maven\n\n需要注意，spotify/dockerfile-maven 是需要pom+Dockerfile一块用的，而docker-maven-plugin是可选的\n\n在项目根目录创建Dockerfile，如下所示\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n\nEXPOSE 8080\n\nARG JAR_FILE\nADD target/${JAR_FILE} /usr/share/myservice/myservice.jar\n\nENTRYPOINT [\"/usr/bin/java\", \"-jar\", \"/usr/share/myservice/myservice.jar\"]\n```\n\n在pom里增加dockerfile-maven-plugin到build标签里\n\n```xml\n<build>\n  <plugins>\n    ...\n    <plugin>\n      <groupId>com.spotify</groupId>\n      <artifactId>dockerfile-maven-plugin</artifactId>\n      <version>${dockerfile-maven-version}</version>\n      <executions>\n        <execution>\n          <id>default</id>\n          <goals>\n            <goal>build</goal>\n            <goal>push</goal>\n          </goals>\n        </execution>\n      </executions>\n      <configuration>\n        <repository>anjia0532/dockerfile-maven-demo</repository>\n        <tag>${project.version}</tag>\n        <buildArgs>\n          <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>\n        </buildArgs>\n      </configuration>\n    </plugin>\n    ...\n  <plugins>    \n<build>\n```\n\n运行如下命令进行构建\n\n```bash\n$ mvn package -DskipTests\n```\n\n详情参见 官方文档 [spotify/dockerfile-maven](https://github.com/spotify/dockerfile-maven)\n\n\n<a name=\"5db9fd7c\"></a>\n### 小结\n\n**优点：** 减少了docker build & tag & push 的操作，Java程序员能够控制镜像名<br />\n**缺点： **其实就是省了docker build & tag & push的操作，别的缺点一点没落不说，还得改动pom，还得要求写Dockerfile，tag只支持一个等等\n\n<a name=\"ce62745d\"></a>\n## Google jib\n\n修改默认settings.xml，增加registry认证,参见[Authentication Methods](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#authentication-methods)\n\n```xml\n<settings>\n  ...\n  <servers>\n    ...\n    <server>\n      <id>docker_hub</id>\n      <username>MY_USERNAME</username>\n      <password>{MY_SECRET}</password>\n    </server>\n  </servers>\n</settings>\n```\n\n改动pom.xml 增加 jib插件\n\n```xml\n<project>\n  ...\n  <build>\n    <plugins>\n      ...\n      <plugin>\n        <groupId>com.google.cloud.tools</groupId>\n        <artifactId>jib-maven-plugin</artifactId>\n        <version>1.0.0</version>\n        <configuration>\n          <from>\n            <!-- 如果不需要arthas可以改为 registry.hub.docker.com/openjdk:8-jdk-alpine -->\n            <image>registry.hub.docker.com/hengyunabc/arthas:latest</image>\n            <credHelper>docker_hub</credHelper>\n          </from>\n          <to>\n            <image>${project.artifactId}</image>\n            <tags>\n              <tag>latest</tag>\n              <tag>${project.version}</tag>\n            </tags>\n          </to>\n          <container>\n            <mainClass>${start-class}</mainClass>\n            <ports>\n              <port>8080</port>\n              <port>5701/udp</port>\n              <port>8563</port>\n            </ports>\n            <entrypoint>\n              <shell>sh</shell>\n              <option>-c</option>\n              <arg>java -cp /app/resources/:/app/classes/:/app/libs/* com.example.demo.DemoApplication</arg>\n            </entrypoint>\n            <appRoot>/app</appRoot>\n            <useCurrentTimestamp>true</useCurrentTimestamp>\n          </container>\n        </configuration>\n      </plugin>\n      ...\n    </plugins>\n  </build>\n  ...\n</project>\n```\n\n执行`mvn clean compile jib:dockerBuild` 构建docker镜像\n\n**注意：** <br />\npom中用的是 `registry.hub.docker.com/hengyunabc/arthas:latest` 是 [alibaba/arthas](https://github.com/alibaba/arthas/blob/master/README_CN.md) (阿里开源的一个Java诊断工具，便于线上调试)封装的docker镜像，如果不需要可以改成 `registry.hub.docker.com/openjdk:8-jdk-alpine`\n\n```bash\n$ docker run -d --init -p8563:8563 --name demo demo:latest\n## 下面是启动arthas，如果使用的是openjdk镜像请勿执行\n$ docker exec -it demo /bin/sh\n$ jid=$(jps | grep App | awk '{print $1}')\n$ java -jar /opt/arthas/arthas-boot.jar --target-ip 0.0.0.0 ${jid}\n```\n\n如果使用了arthas镜像，可以访问 [http://ip:8563](http://ip:8563) ，在页面上填上宿主ip，点击Connect， 然后参考[Arthas/命令列表](https://alibaba.github.io/arthas/commands.html) 了解Arthas命令用法\n\n![snipaste20190208_201332.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1549628164482-56f9cb66-b8bc-42db-82a3-ceb8717460bd.png#align=left&display=inline&height=340&linkTarget=_blank&name=snipaste20190208_201332.png&originHeight=612&originWidth=1343&size=85193&width=746#align=left&display=inline&height=340&originHeight=612&originWidth=1343&width=746)\n\n<a name=\"5db9fd7c\"></a>\n### 小结\n\n**优点：** 充分利用缓存，加快构建，不强制依赖docker daemon，依赖简单（在maven或gradle增加插件即可）<br />\n**缺点：** 不支持Docker RUN 命令(jib官方建议将run封装到base镜像)，对entrypoint和cmd支持不太好(alpine默认不支持多任务，跑java应用默认是pid 1 ，运行jmap等命令会报错，参考 [jmap not happy on alpine](https://github.com/docker-library/openjdk/issues/76) )\n\n<a name=\"d3f22cc0\"></a>\n### jib 缓存策略\n\n项目每次发布实际上变更的代码量不大，尤其依赖的jar变动的可能性较小，如果按照前两种方案构建镜像，会导致每次都全量构建，会导致存储和带宽资源浪费。\n\n> <a name=\"396d6264\"></a>\n## **Jib 如何让开发变得更美好**\n> Jib 利用了 Docker 镜像的分层机制，将其与构建系统集成，并通过以下方式优化 Java 容器镜像的构建：\n> 1. 简单——Jib 使用 Java 开发，并作为 Maven 或 Gradle 的一部分运行。你不需要编写 Dockerfile 或运行 Docker 守护进程，甚至无需创建包含所有依赖的大 JAR 包。因为 Jib 与 Java 构建过程紧密集成，所以它可以访问到打包应用程序所需的所有信息。在后续的容器构建期间，它将自动选择 Java 构建过的任何变体。\n> 1. 快速——Jib 利用镜像分层和注册表缓存来实现快速、增量的构建。它读取你的构建配置，将你的应用程序组织到不同的层（依赖项、资源、类）中，并只重新构建和推送发生变更的层。在项目进行快速迭代时，Jib 只讲发生变更的层（而不是整个应用程序）推送到注册表来节省宝贵的构建时间。\n> 1. 可重现——Jib 支持根据 Maven 和 Gradle 的构建元数据进行声明式的容器镜像构建，因此，只要输入保持不变，就可以通过配置重复创建相同的镜像。\n\n\n可以可以通过 `mvn clean compile jib:buildTar` 生成 `target/jib-image.tar` 然后用解压缩工具解压后进行分析，实际上jib会将lib中非快照部分放到一个层，将快照部分放到一个层，将源码编译后放到一个层。。。<br />\n![snipaste20190208_211839.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1549631943594-f1682ff3-91f5-47e7-8af4-ba83490c44a0.png#align=left&display=inline&height=485&linkTarget=_blank&name=snipaste20190208_211839.png&originHeight=507&originWidth=780&size=83376&width=746#align=left&display=inline&height=485&originHeight=507&originWidth=780&width=746)\n\n\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [谷歌开源 Java 镜像构建工具 Jib](https://www.infoq.cn/article/2018%2F07%2Fgoogle-opensource-Jib)\n- [jib自定义entrypoint](https://segmentfault.com/a/1190000016254151)\n- [jib打包docker镜像实战](https://segmentfault.com/a/1190000016156009)\n- [Jib - Containerize your Maven project](https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/README.md)\n\n","slug":"google-jib","published":1,"updated":"2019-08-16T06:11:15.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojiw00dg24do2bchn93i","content":"<p><a name=\"61a3ec66\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>其实jib刚发布时就有关注，但是一直没有用于生产，原因有二</p>\n<ul>\n<li>基于 <a href=\"https://github.com/spotify/docker-maven-plugin\" target=\"_blank\" rel=\"noopener\">spotify/docker-maven-plugin</a> (原作者已经停止维护docker-maven-plugin，建议使用 <a href=\"https://github.com/spotify/dockerfile-maven\" target=\"_blank\" rel=\"noopener\">spotify/dockerfile-maven</a>)的原有流程跑的好好的，没动力换成jib</li>\n<li>Google jib 一直没有发布1.x ，担心其不稳定</li>\n</ul>\n<p>先简单介绍一下: <a href=\"https://github.com/GoogleContainerTools/jib/\" target=\"_blank\" rel=\"noopener\">google jib</a> 是Google于18年7月发布的一个针对Java应用的构建镜像的工具(支持<a href=\"https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin\" target=\"_blank\" rel=\"noopener\">Maven</a>和<a href=\"https://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin\" target=\"_blank\" rel=\"noopener\">Gradle</a>) ，好处是能够复用构建缓存，能够加快构建，减小传输体积（后文会详细讲解），并且让Java工程师不需要理解Docker相关知识就可以简单构建镜像并且发布到指定registry里（不需要docker build , tag, push）</p>\n<p>本文会依次讲解三种java构建镜像的方法，分别是 <strong>正统的Dockerfile</strong> ，<strong>spotify/dockerfile-maven</strong> ，<strong>Google jib</strong> <br><br>附赠 <a href=\"https://github.com/alibaba/arthas\" target=\"_blank\" rel=\"noopener\">alibaba/arthas</a> 的集成和使用方法</p>\n<a id=\"more\"></a>\n<p><a name=\"424a2ad8\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>Maven3.5</li>\n<li>Git</li>\n<li>Jdk 1.8</li>\n<li>Docker</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/anjia0532/jib-demo.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> jib-demo</span><br><span class=\"line\">$ mvn clean package -DskipTests</span><br><span class=\"line\">$ mkdir docker</span><br><span class=\"line\">$ cp ./target/*.jar ./docker</span><br></pre></td></tr></table></figure>\n<p><a name=\"Dockerfile\"></a></p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>创建 <code>./docker/Dockerfile</code> ,内容如下，需要注意此处为了方便理解，没有进行改进（比如限制用户，安装必要软件等）</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> *.jar /app.jar</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">CMD java <span class=\"variable\">$&#123;JAVA_OPTS&#125;</span> /app.jar</span></span><br></pre></td></tr></table></figure>\n<p>详情参见 官方文档 <a href=\"https://docs.docker.com/engine/reference/builder/#usage\" target=\"_blank\" rel=\"noopener\">Dockerfile reference</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ./docker</span><br><span class=\"line\">$ sudo docker build . -t jib-demo</span><br><span class=\"line\">$ docker images --查看本地images</span><br><span class=\"line\">$ docker tag jib-demo anjia0532/jib-demo --不写registry，则默认为docker hub registry,可以在build时，直接写</span><br><span class=\"line\">$ docker push anjia0532/jib-demo -- 推送到registry</span><br></pre></td></tr></table></figure>\n<p><a name=\"5db9fd7c\"></a></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>优点：</strong> 不需要改造pom，灵活，配合CI工具，可以不侵入项目，运维可以针对性的进行安全加固，并且可以做到标准化<br><br><strong>缺点：</strong> 命令复杂，Java程序员需要学习Dockerfile命令，或者运维和java沟通不畅时，时区，软件，甚至目录等都可能有出问题</p>\n<p><a name=\"50df2cce\"></a></p>\n<h2 id=\"spotify-dockerfile-maven\"><a href=\"#spotify-dockerfile-maven\" class=\"headerlink\" title=\"spotify/dockerfile-maven\"></a>spotify/dockerfile-maven</h2><p>需要注意，spotify/dockerfile-maven 是需要pom+Dockerfile一块用的，而docker-maven-plugin是可选的</p>\n<p>在项目根目录创建Dockerfile，如下所示</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> JAR_FILE</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> target/<span class=\"variable\">$&#123;JAR_FILE&#125;</span> /usr/share/myservice/myservice.jar</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">ENTRYPOINT [<span class=\"string\">\"/usr/bin/java\"</span>, <span class=\"string\">\"-jar\"</span>, <span class=\"string\">\"/usr/share/myservice/myservice.jar\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>在pom里增加dockerfile-maven-plugin到build标签里</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;dockerfile-maven-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>push<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span>anjia0532/dockerfile-maven-demo<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">buildArgs</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">JAR_FILE</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">JAR_FILE</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">buildArgs</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行如下命令进行构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mvn package -DskipTests</span><br></pre></td></tr></table></figure>\n<p>详情参见 官方文档 <a href=\"https://github.com/spotify/dockerfile-maven\" target=\"_blank\" rel=\"noopener\">spotify/dockerfile-maven</a></p>\n<p><a name=\"5db9fd7c\"></a></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>优点：</strong> 减少了docker build &amp; tag &amp; push 的操作，Java程序员能够控制镜像名<br><br><strong>缺点： </strong>其实就是省了docker build &amp; tag &amp; push的操作，别的缺点一点没落不说，还得改动pom，还得要求写Dockerfile，tag只支持一个等等</p>\n<p><a name=\"ce62745d\"></a></p>\n<h2 id=\"Google-jib\"><a href=\"#Google-jib\" class=\"headerlink\" title=\"Google jib\"></a>Google jib</h2><p>修改默认settings.xml，增加registry认证,参见<a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#authentication-methods\" target=\"_blank\" rel=\"noopener\">Authentication Methods</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>docker_hub<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>MY_USERNAME<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>&#123;MY_SECRET&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改动pom.xml 增加 jib插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.cloud.tools<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jib-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 如果不需要arthas可以改为 registry.hub.docker.com/openjdk:8-jdk-alpine --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span>&gt;</span>registry.hub.docker.com/hengyunabc/arthas:latest<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">credHelper</span>&gt;</span>docker_hub<span class=\"tag\">&lt;/<span class=\"name\">credHelper</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tags</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">container</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>$&#123;start-class&#125;<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ports</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>5701/udp<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8563<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ports</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entrypoint</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">shell</span>&gt;</span>sh<span class=\"tag\">&lt;/<span class=\"name\">shell</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-c<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">arg</span>&gt;</span>java -cp /app/resources/:/app/classes/:/app/libs/* com.example.demo.DemoApplication<span class=\"tag\">&lt;/<span class=\"name\">arg</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">entrypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appRoot</span>&gt;</span>/app<span class=\"tag\">&lt;/<span class=\"name\">appRoot</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">useCurrentTimestamp</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">useCurrentTimestamp</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">container</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行<code>mvn clean compile jib:dockerBuild</code> 构建docker镜像</p>\n<p><strong>注意：</strong> <br><br>pom中用的是 <code>registry.hub.docker.com/hengyunabc/arthas:latest</code> 是 <a href=\"https://github.com/alibaba/arthas/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">alibaba/arthas</a> (阿里开源的一个Java诊断工具，便于线上调试)封装的docker镜像，如果不需要可以改成 <code>registry.hub.docker.com/openjdk:8-jdk-alpine</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -d --init -p8563:8563 --name demo demo:latest</span><br><span class=\"line\"><span class=\"comment\">## 下面是启动arthas，如果使用的是openjdk镜像请勿执行</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it demo /bin/sh</span><br><span class=\"line\">$ jid=$(jps | grep App | awk <span class=\"string\">'&#123;print $1&#125;'</span>)</span><br><span class=\"line\">$ java -jar /opt/arthas/arthas-boot.jar --target-ip 0.0.0.0 <span class=\"variable\">$&#123;jid&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果使用了arthas镜像，可以访问 <a href=\"http://ip:8563\" target=\"_blank\" rel=\"noopener\">http://ip:8563</a> ，在页面上填上宿主ip，点击Connect， 然后参考<a href=\"https://alibaba.github.io/arthas/commands.html\" target=\"_blank\" rel=\"noopener\">Arthas/命令列表</a> 了解Arthas命令用法</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1549628164482-56f9cb66-b8bc-42db-82a3-ceb8717460bd.png#align=left&amp;display=inline&amp;height=340&amp;linkTarget=_blank&amp;name=snipaste20190208_201332.png&amp;originHeight=612&amp;originWidth=1343&amp;size=85193&amp;width=746#align=left&amp;display=inline&amp;height=340&amp;originHeight=612&amp;originWidth=1343&amp;width=746\" alt=\"snipaste20190208_201332.png\"></p>\n<p><a name=\"5db9fd7c\"></a></p>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>优点：</strong> 充分利用缓存，加快构建，不强制依赖docker daemon，依赖简单（在maven或gradle增加插件即可）<br><br><strong>缺点：</strong> 不支持Docker RUN 命令(jib官方建议将run封装到base镜像)，对entrypoint和cmd支持不太好(alpine默认不支持多任务，跑java应用默认是pid 1 ，运行jmap等命令会报错，参考 <a href=\"https://github.com/docker-library/openjdk/issues/76\" target=\"_blank\" rel=\"noopener\">jmap not happy on alpine</a> )</p>\n<p><a name=\"d3f22cc0\"></a></p>\n<h3 id=\"jib-缓存策略\"><a href=\"#jib-缓存策略\" class=\"headerlink\" title=\"jib 缓存策略\"></a>jib 缓存策略</h3><p>项目每次发布实际上变更的代码量不大，尤其依赖的jar变动的可能性较小，如果按照前两种方案构建镜像，会导致每次都全量构建，会导致存储和带宽资源浪费。</p>\n<blockquote>\n<p><a name=\"396d6264\"></a></p>\n<h2 id=\"Jib-如何让开发变得更美好\"><a href=\"#Jib-如何让开发变得更美好\" class=\"headerlink\" title=\"Jib 如何让开发变得更美好\"></a><strong>Jib 如何让开发变得更美好</strong></h2><p>Jib 利用了 Docker 镜像的分层机制，将其与构建系统集成，并通过以下方式优化 Java 容器镜像的构建：</p>\n<ol>\n<li>简单——Jib 使用 Java 开发，并作为 Maven 或 Gradle 的一部分运行。你不需要编写 Dockerfile 或运行 Docker 守护进程，甚至无需创建包含所有依赖的大 JAR 包。因为 Jib 与 Java 构建过程紧密集成，所以它可以访问到打包应用程序所需的所有信息。在后续的容器构建期间，它将自动选择 Java 构建过的任何变体。</li>\n<li>快速——Jib 利用镜像分层和注册表缓存来实现快速、增量的构建。它读取你的构建配置，将你的应用程序组织到不同的层（依赖项、资源、类）中，并只重新构建和推送发生变更的层。在项目进行快速迭代时，Jib 只讲发生变更的层（而不是整个应用程序）推送到注册表来节省宝贵的构建时间。</li>\n<li>可重现——Jib 支持根据 Maven 和 Gradle 的构建元数据进行声明式的容器镜像构建，因此，只要输入保持不变，就可以通过配置重复创建相同的镜像。</li>\n</ol>\n</blockquote>\n<p>可以可以通过 <code>mvn clean compile jib:buildTar</code> 生成 <code>target/jib-image.tar</code> 然后用解压缩工具解压后进行分析，实际上jib会将lib中非快照部分放到一个层，将快照部分放到一个层，将源码编译后放到一个层。。。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1549631943594-f1682ff3-91f5-47e7-8af4-ba83490c44a0.png#align=left&amp;display=inline&amp;height=485&amp;linkTarget=_blank&amp;name=snipaste20190208_211839.png&amp;originHeight=507&amp;originWidth=780&amp;size=83376&amp;width=746#align=left&amp;display=inline&amp;height=485&amp;originHeight=507&amp;originWidth=780&amp;width=746\" alt=\"snipaste20190208_211839.png\"></p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.infoq.cn/article/2018%2F07%2Fgoogle-opensource-Jib\" target=\"_blank\" rel=\"noopener\">谷歌开源 Java 镜像构建工具 Jib</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000016254151\" target=\"_blank\" rel=\"noopener\">jib自定义entrypoint</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000016156009\" target=\"_blank\" rel=\"noopener\">jib打包docker镜像实战</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/README.md\" target=\"_blank\" rel=\"noopener\">Jib - Containerize your Maven project</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a name=\"61a3ec66\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>其实jib刚发布时就有关注，但是一直没有用于生产，原因有二</p>\n<ul>\n<li>基于 <a href=\"https://github.com/spotify/docker-maven-plugin\" target=\"_blank\" rel=\"noopener\">spotify/docker-maven-plugin</a> (原作者已经停止维护docker-maven-plugin，建议使用 <a href=\"https://github.com/spotify/dockerfile-maven\" target=\"_blank\" rel=\"noopener\">spotify/dockerfile-maven</a>)的原有流程跑的好好的，没动力换成jib</li>\n<li>Google jib 一直没有发布1.x ，担心其不稳定</li>\n</ul>\n<p>先简单介绍一下: <a href=\"https://github.com/GoogleContainerTools/jib/\" target=\"_blank\" rel=\"noopener\">google jib</a> 是Google于18年7月发布的一个针对Java应用的构建镜像的工具(支持<a href=\"https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin\" target=\"_blank\" rel=\"noopener\">Maven</a>和<a href=\"https://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin\" target=\"_blank\" rel=\"noopener\">Gradle</a>) ，好处是能够复用构建缓存，能够加快构建，减小传输体积（后文会详细讲解），并且让Java工程师不需要理解Docker相关知识就可以简单构建镜像并且发布到指定registry里（不需要docker build , tag, push）</p>\n<p>本文会依次讲解三种java构建镜像的方法，分别是 <strong>正统的Dockerfile</strong> ，<strong>spotify/dockerfile-maven</strong> ，<strong>Google jib</strong> <br><br>附赠 <a href=\"https://github.com/alibaba/arthas\" target=\"_blank\" rel=\"noopener\">alibaba/arthas</a> 的集成和使用方法</p>","more":"<p><a name=\"424a2ad8\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>Maven3.5</li>\n<li>Git</li>\n<li>Jdk 1.8</li>\n<li>Docker</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/anjia0532/jib-demo.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> jib-demo</span><br><span class=\"line\">$ mvn clean package -DskipTests</span><br><span class=\"line\">$ mkdir docker</span><br><span class=\"line\">$ cp ./target/*.jar ./docker</span><br></pre></td></tr></table></figure>\n<p><a name=\"Dockerfile\"></a></p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>创建 <code>./docker/Dockerfile</code> ,内容如下，需要注意此处为了方便理解，没有进行改进（比如限制用户，安装必要软件等）</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> *.jar /app.jar</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">CMD java <span class=\"variable\">$&#123;JAVA_OPTS&#125;</span> /app.jar</span></span><br></pre></td></tr></table></figure>\n<p>详情参见 官方文档 <a href=\"https://docs.docker.com/engine/reference/builder/#usage\" target=\"_blank\" rel=\"noopener\">Dockerfile reference</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ./docker</span><br><span class=\"line\">$ sudo docker build . -t jib-demo</span><br><span class=\"line\">$ docker images --查看本地images</span><br><span class=\"line\">$ docker tag jib-demo anjia0532/jib-demo --不写registry，则默认为docker hub registry,可以在build时，直接写</span><br><span class=\"line\">$ docker push anjia0532/jib-demo -- 推送到registry</span><br></pre></td></tr></table></figure>\n<p><a name=\"5db9fd7c\"></a></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>优点：</strong> 不需要改造pom，灵活，配合CI工具，可以不侵入项目，运维可以针对性的进行安全加固，并且可以做到标准化<br><br><strong>缺点：</strong> 命令复杂，Java程序员需要学习Dockerfile命令，或者运维和java沟通不畅时，时区，软件，甚至目录等都可能有出问题</p>\n<p><a name=\"50df2cce\"></a></p>\n<h2 id=\"spotify-dockerfile-maven\"><a href=\"#spotify-dockerfile-maven\" class=\"headerlink\" title=\"spotify/dockerfile-maven\"></a>spotify/dockerfile-maven</h2><p>需要注意，spotify/dockerfile-maven 是需要pom+Dockerfile一块用的，而docker-maven-plugin是可选的</p>\n<p>在项目根目录创建Dockerfile，如下所示</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> JAR_FILE</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> target/<span class=\"variable\">$&#123;JAR_FILE&#125;</span> /usr/share/myservice/myservice.jar</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">ENTRYPOINT [<span class=\"string\">\"/usr/bin/java\"</span>, <span class=\"string\">\"-jar\"</span>, <span class=\"string\">\"/usr/share/myservice/myservice.jar\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>在pom里增加dockerfile-maven-plugin到build标签里</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;dockerfile-maven-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>push<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span>anjia0532/dockerfile-maven-demo<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">buildArgs</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">JAR_FILE</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">JAR_FILE</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">buildArgs</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行如下命令进行构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mvn package -DskipTests</span><br></pre></td></tr></table></figure>\n<p>详情参见 官方文档 <a href=\"https://github.com/spotify/dockerfile-maven\" target=\"_blank\" rel=\"noopener\">spotify/dockerfile-maven</a></p>\n<p><a name=\"5db9fd7c\"></a></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>优点：</strong> 减少了docker build &amp; tag &amp; push 的操作，Java程序员能够控制镜像名<br><br><strong>缺点： </strong>其实就是省了docker build &amp; tag &amp; push的操作，别的缺点一点没落不说，还得改动pom，还得要求写Dockerfile，tag只支持一个等等</p>\n<p><a name=\"ce62745d\"></a></p>\n<h2 id=\"Google-jib\"><a href=\"#Google-jib\" class=\"headerlink\" title=\"Google jib\"></a>Google jib</h2><p>修改默认settings.xml，增加registry认证,参见<a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#authentication-methods\" target=\"_blank\" rel=\"noopener\">Authentication Methods</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>docker_hub<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>MY_USERNAME<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>&#123;MY_SECRET&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改动pom.xml 增加 jib插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.cloud.tools<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jib-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 如果不需要arthas可以改为 registry.hub.docker.com/openjdk:8-jdk-alpine --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span>&gt;</span>registry.hub.docker.com/hengyunabc/arthas:latest<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">credHelper</span>&gt;</span>docker_hub<span class=\"tag\">&lt;/<span class=\"name\">credHelper</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tags</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">container</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>$&#123;start-class&#125;<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ports</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>5701/udp<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8563<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ports</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entrypoint</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">shell</span>&gt;</span>sh<span class=\"tag\">&lt;/<span class=\"name\">shell</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-c<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">arg</span>&gt;</span>java -cp /app/resources/:/app/classes/:/app/libs/* com.example.demo.DemoApplication<span class=\"tag\">&lt;/<span class=\"name\">arg</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">entrypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appRoot</span>&gt;</span>/app<span class=\"tag\">&lt;/<span class=\"name\">appRoot</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">useCurrentTimestamp</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">useCurrentTimestamp</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">container</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行<code>mvn clean compile jib:dockerBuild</code> 构建docker镜像</p>\n<p><strong>注意：</strong> <br><br>pom中用的是 <code>registry.hub.docker.com/hengyunabc/arthas:latest</code> 是 <a href=\"https://github.com/alibaba/arthas/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">alibaba/arthas</a> (阿里开源的一个Java诊断工具，便于线上调试)封装的docker镜像，如果不需要可以改成 <code>registry.hub.docker.com/openjdk:8-jdk-alpine</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -d --init -p8563:8563 --name demo demo:latest</span><br><span class=\"line\"><span class=\"comment\">## 下面是启动arthas，如果使用的是openjdk镜像请勿执行</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it demo /bin/sh</span><br><span class=\"line\">$ jid=$(jps | grep App | awk <span class=\"string\">'&#123;print $1&#125;'</span>)</span><br><span class=\"line\">$ java -jar /opt/arthas/arthas-boot.jar --target-ip 0.0.0.0 <span class=\"variable\">$&#123;jid&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果使用了arthas镜像，可以访问 <a href=\"http://ip:8563\" target=\"_blank\" rel=\"noopener\">http://ip:8563</a> ，在页面上填上宿主ip，点击Connect， 然后参考<a href=\"https://alibaba.github.io/arthas/commands.html\" target=\"_blank\" rel=\"noopener\">Arthas/命令列表</a> 了解Arthas命令用法</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1549628164482-56f9cb66-b8bc-42db-82a3-ceb8717460bd.png#align=left&amp;display=inline&amp;height=340&amp;linkTarget=_blank&amp;name=snipaste20190208_201332.png&amp;originHeight=612&amp;originWidth=1343&amp;size=85193&amp;width=746#align=left&amp;display=inline&amp;height=340&amp;originHeight=612&amp;originWidth=1343&amp;width=746\" alt=\"snipaste20190208_201332.png\"></p>\n<p><a name=\"5db9fd7c\"></a></p>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>优点：</strong> 充分利用缓存，加快构建，不强制依赖docker daemon，依赖简单（在maven或gradle增加插件即可）<br><br><strong>缺点：</strong> 不支持Docker RUN 命令(jib官方建议将run封装到base镜像)，对entrypoint和cmd支持不太好(alpine默认不支持多任务，跑java应用默认是pid 1 ，运行jmap等命令会报错，参考 <a href=\"https://github.com/docker-library/openjdk/issues/76\" target=\"_blank\" rel=\"noopener\">jmap not happy on alpine</a> )</p>\n<p><a name=\"d3f22cc0\"></a></p>\n<h3 id=\"jib-缓存策略\"><a href=\"#jib-缓存策略\" class=\"headerlink\" title=\"jib 缓存策略\"></a>jib 缓存策略</h3><p>项目每次发布实际上变更的代码量不大，尤其依赖的jar变动的可能性较小，如果按照前两种方案构建镜像，会导致每次都全量构建，会导致存储和带宽资源浪费。</p>\n<blockquote>\n<p><a name=\"396d6264\"></a></p>\n<h2 id=\"Jib-如何让开发变得更美好\"><a href=\"#Jib-如何让开发变得更美好\" class=\"headerlink\" title=\"Jib 如何让开发变得更美好\"></a><strong>Jib 如何让开发变得更美好</strong></h2><p>Jib 利用了 Docker 镜像的分层机制，将其与构建系统集成，并通过以下方式优化 Java 容器镜像的构建：</p>\n<ol>\n<li>简单——Jib 使用 Java 开发，并作为 Maven 或 Gradle 的一部分运行。你不需要编写 Dockerfile 或运行 Docker 守护进程，甚至无需创建包含所有依赖的大 JAR 包。因为 Jib 与 Java 构建过程紧密集成，所以它可以访问到打包应用程序所需的所有信息。在后续的容器构建期间，它将自动选择 Java 构建过的任何变体。</li>\n<li>快速——Jib 利用镜像分层和注册表缓存来实现快速、增量的构建。它读取你的构建配置，将你的应用程序组织到不同的层（依赖项、资源、类）中，并只重新构建和推送发生变更的层。在项目进行快速迭代时，Jib 只讲发生变更的层（而不是整个应用程序）推送到注册表来节省宝贵的构建时间。</li>\n<li>可重现——Jib 支持根据 Maven 和 Gradle 的构建元数据进行声明式的容器镜像构建，因此，只要输入保持不变，就可以通过配置重复创建相同的镜像。</li>\n</ol>\n</blockquote>\n<p>可以可以通过 <code>mvn clean compile jib:buildTar</code> 生成 <code>target/jib-image.tar</code> 然后用解压缩工具解压后进行分析，实际上jib会将lib中非快照部分放到一个层，将快照部分放到一个层，将源码编译后放到一个层。。。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1549631943594-f1682ff3-91f5-47e7-8af4-ba83490c44a0.png#align=left&amp;display=inline&amp;height=485&amp;linkTarget=_blank&amp;name=snipaste20190208_211839.png&amp;originHeight=507&amp;originWidth=780&amp;size=83376&amp;width=746#align=left&amp;display=inline&amp;height=485&amp;originHeight=507&amp;originWidth=780&amp;width=746\" alt=\"snipaste20190208_211839.png\"></p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.infoq.cn/article/2018%2F07%2Fgoogle-opensource-Jib\" target=\"_blank\" rel=\"noopener\">谷歌开源 Java 镜像构建工具 Jib</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000016254151\" target=\"_blank\" rel=\"noopener\">jib自定义entrypoint</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000016156009\" target=\"_blank\" rel=\"noopener\">jib打包docker镜像实战</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/README.md\" target=\"_blank\" rel=\"noopener\">Jib - Containerize your Maven project</a></li>\n</ul>"},{"title":"036-win10搭建python的linux开发环境(pycharm+vagrant+virtualbox)","date":"2019-07-24T11:35:21.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。\n\n\n本文以jumpserver为例，介绍如何在windows环境下进行jumpserver开发(jumpserver依赖的一些库，只有linux环境才能用)，其实不局限于jumpserver，其他项目也适用(不限于python)。参考 [打造跨平台一致性开发环境](https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail)\n\n<!-- more -->\n\n<a name=\"FBqFH\"></a>\n## 初始化环境\n<a name=\"DzvF8\"></a>\n### 安装vagrant+virtualbox\n参考 [Vagrant系列(一)----win10搭建Vagrant+VirtualBox环境](https://blog.csdn.net/u011781521/article/details/80275212)\n<a name=\"LDM8N\"></a>\n### 下载centos镜像\n可以使用境外服务器或者迅雷下载 `https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box` \n```bash\nvagrant box add centos/7 \\\n    https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box\n\n## 或者\n\nvagrant box add centos/7 /path/to/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box\n```\n\n<a name=\"3o5Z3\"></a>\n### 下载jumpserver源代码并创建vagrant\n如果下载速度慢，可以使用码云(gitee.com)自己创建个镜像项目，clone码云上的jumpserver\n```bash\ngit clone --depth=1 https://github.com/jumpserver/jumpserver.git\ncd jumpserver\n```\n在jumpserver下创建Vagrantfile\n```ruby\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://vagrantcloud.com/search.\n  config.vm.box_check_update = false\n  config.vm.box = \"centos/7\"\n  config.vm.hostname = \"jumpserver\"\n  config.vm.network \"private_network\", ip: \"172.17.8.101\"\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.memory = \"4096\"\n    vb.cpus = 2\n    vb.name = \"jumpserver\"\n  end\n\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"rsync\",\n    rsync__verbose: true,\n    rsync__exclude: ['.git*', 'node_modules*','*.log','*.box','Vagrantfile']\n\n  config.vm.provision \"shell\", inline: <<-SHELL\nsudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nsudo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo\nsudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\nsudo yum makecache\n\nsudo yum install -y python36 python36-devel python36-pip \\\n\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\\n     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\\n     openldap-devel mariadb-devel mysql-devel libffi-devel \\\n     openssh-clients telnet openldap-clients gcc\n\nmkdir /home/vagrant/.pip\ncat << EOF | sudo tee -a /home/vagrant/.pip/pip.conf\n[global]\ntimeout = 6000\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n\n[install]\nuse-mirrors = true\nmirrors = https://mirrors.aliyun.com/pypi/simple/\ntrusted-host=mirrors.aliyun.com\nEOF\n\npython3.6 -m venv /home/vagrant/venv\nsource /home/vagrant/venv/bin/activate\necho \"source /home/vagrant/venv/bin/activate\" >> /home/vagrant/.bash_profile\n  SHELL\nend\n\n```\n\n```bash\ncd jumpserver\nvagrant up\nvagrant ssh\n```\n\n<a name=\"gn90K\"></a>\n### ~~安装python3.6及配置pip源~~\n如果使用我的Vargrantfile，已经自动配置阿里云源并且安装必要依赖包了，不需要重复配置\n```bash\n## 设置yum的阿里云源\nsudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nsudo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo\nsudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\nsudo yum makecache\n\n## 安装依赖包\nsudo yum install -y python36 python36-devel python36-pip \\\n\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\\n     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\\n     openldap-devel mariadb-devel mysql-devel libffi-devel \\\n     openssh-clients telnet openldap-clients gcc\n\n## 配置pip阿里云源\nmkdir ~/.pip\ncat << EOF | sudo tee -a ~/.pip/pip.conf\n[global]\ntimeout = 6000\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n\n[install]\nuse-mirrors = true\nmirrors = https://mirrors.aliyun.com/pypi/simple/\ntrusted-host=mirrors.aliyun.com\nEOF\n```\n\n<a name=\"YFYr7\"></a>\n### 安装依赖\n如果使用我的Vargrantfile，不需要配置python env了，已经配置好了\n```bash\nvagrant ssh\npython3.6 -m venv /home/vagrant/venv\nsource /home/vagrant/venv/bin/activate\n```\n\n只需要执行这个即可\n```bash\npip3 install -r /vagrant/requirements/requirements.txt\n```\n\n参考 [安装文档](http://docs.jumpserver.org/zh/docs/step_by_step.html)\n\n<a name=\"KRTaO\"></a>\n## 配置pycharm并启动jumpserver\n<a name=\"Mk0Vl\"></a>\n### 配置pycharm\n\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>打开设置\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102215460-c6a602ed-86e6-49fc-b2b1-d43689243daa.png#align=left&display=inline&height=706&name=image.png&originHeight=706&originWidth=1009&size=70204&status=done&width=1009)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102389714-c0a5c982-1597-4007-8719-c4f316457bf8.png#align=left&display=inline&height=678&name=image.png&originHeight=678&originWidth=841&size=65908&status=done&width=841)<br />如果正常，会显示已经安装的pip包，如果是空，或者只有两个，那意味着python的env设置的不对。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102637247-a8c69ed0-d6a2-4d00-ad3b-feebe98a0589.png#align=left&display=inline&height=674&name=image.png&originHeight=674&originWidth=1007&size=68920&status=done&width=1007)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102989073-8062df66-c4cc-45dd-b574-db6e6a39cb6d.png#align=left&display=inline&height=739&name=image.png&originHeight=739&originWidth=1068&size=108292&status=done&width=1068)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564110989520-3f8ac63d-5b58-46b7-89bc-d24f6352785c.png#align=left&display=inline&height=706&name=image.png&originHeight=706&originWidth=1009&size=63412&status=done&width=1009)\n\n[使用 PyCharm专业版和vagrant进行同步开发](https://blog.csdn.net/weixin_42393089/article/details/83211456)\n\n<a name=\"TVFTG\"></a>\n### 修改配置并初始化数据库\n\n```bash\ncd jumpserver\ncp config_example.yml config.yml\n## 修改config.yml的相关配置\nvagrant ssh\nsource /home/vagrant/venv/bin/activate\ncd /vagrant/utils\n./make_migrations.sh\n```\n\n<a name=\"avGGO\"></a>\n### 启动项目\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103536157-efbb24a4-c29d-45b4-991f-b314544ed548.png#align=left&display=inline&height=79&name=image.png&originHeight=79&originWidth=353&size=5532&status=done&width=353)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103574288-28ffdb6f-25f2-4a67-b8ba-936cca59ccf3.png#align=left&display=inline&height=273&name=image.png&originHeight=273&originWidth=407&size=25404&status=done&width=407)<br />浏览器打开 [http://172.17.8.101:8080/auth/login/?next=/](http://172.17.8.101:8080/auth/login/?next=/)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103612991-53990854-279f-41c9-8250-6647b7889279.png#align=left&display=inline&height=368&name=image.png&originHeight=368&originWidth=889&size=55638&status=done&width=889)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103694901-b41968af-0830-4fc3-beab-4a2393a76279.png#align=left&display=inline&height=240&name=image.png&originHeight=240&originWidth=596&size=56566&status=done&width=596)\n\n\n<a name=\"Kgbm8\"></a>\n## 其他\n已经提交PR，如果有需要的朋友， 可以在PR上投票，可以提高通过率[added Vagrantfile to support windows dev#3036](https://github.com/jumpserver/jumpserver/pull/3036)\n\njumpserver virtualbox 已上传百度云盘 <br />链接：[https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ](https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ)  密码：rci6\n\n<a name=\"sNYV4\"></a>\n## 参考资料\n\n- [我的博客](http://anjia0532.github.io/2019/07/24/jumpserver-vagrant-virtualbox)\n- [我的掘金](https://juejin.im/post/5d3a55ece51d454f71439dd2)\n- [Win10 10月更新 VirtualBox VT-x is not available (VERR_VMX_NO_VMX). 解决](https://blog.csdn.net/imilano/article/details/83038682)\n- [Vagrant系列(一)----win10搭建Vagrant+VirtualBox环境](https://blog.csdn.net/u011781521/article/details/80275212)\n- [安装文档](http://docs.jumpserver.org/zh/docs/step_by_step.html)\n- [使用 PyCharm专业版和vagrant进行同步开发](https://blog.csdn.net/weixin_42393089/article/details/83211456)\n- [打造跨平台一致性开发环境](https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail)\n\n\n","source":"_posts/jumpserver-vagrant-virtualbox.md","raw":"\n---\n\ntitle: 036-win10搭建python的linux开发环境(pycharm+vagrant+virtualbox)\n\ndate: 2019-07-24 19:35:21 +0800\n\ntags: [虚拟机,kvm,vagrant,virtualbox,jumpserver,堡垒机]\n\ncategories: python\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。\n\n\n本文以jumpserver为例，介绍如何在windows环境下进行jumpserver开发(jumpserver依赖的一些库，只有linux环境才能用)，其实不局限于jumpserver，其他项目也适用(不限于python)。参考 [打造跨平台一致性开发环境](https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail)\n\n<!-- more -->\n\n<a name=\"FBqFH\"></a>\n## 初始化环境\n<a name=\"DzvF8\"></a>\n### 安装vagrant+virtualbox\n参考 [Vagrant系列(一)----win10搭建Vagrant+VirtualBox环境](https://blog.csdn.net/u011781521/article/details/80275212)\n<a name=\"LDM8N\"></a>\n### 下载centos镜像\n可以使用境外服务器或者迅雷下载 `https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box` \n```bash\nvagrant box add centos/7 \\\n    https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box\n\n## 或者\n\nvagrant box add centos/7 /path/to/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box\n```\n\n<a name=\"3o5Z3\"></a>\n### 下载jumpserver源代码并创建vagrant\n如果下载速度慢，可以使用码云(gitee.com)自己创建个镜像项目，clone码云上的jumpserver\n```bash\ngit clone --depth=1 https://github.com/jumpserver/jumpserver.git\ncd jumpserver\n```\n在jumpserver下创建Vagrantfile\n```ruby\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://vagrantcloud.com/search.\n  config.vm.box_check_update = false\n  config.vm.box = \"centos/7\"\n  config.vm.hostname = \"jumpserver\"\n  config.vm.network \"private_network\", ip: \"172.17.8.101\"\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.memory = \"4096\"\n    vb.cpus = 2\n    vb.name = \"jumpserver\"\n  end\n\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"rsync\",\n    rsync__verbose: true,\n    rsync__exclude: ['.git*', 'node_modules*','*.log','*.box','Vagrantfile']\n\n  config.vm.provision \"shell\", inline: <<-SHELL\nsudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nsudo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo\nsudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\nsudo yum makecache\n\nsudo yum install -y python36 python36-devel python36-pip \\\n\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\\n     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\\n     openldap-devel mariadb-devel mysql-devel libffi-devel \\\n     openssh-clients telnet openldap-clients gcc\n\nmkdir /home/vagrant/.pip\ncat << EOF | sudo tee -a /home/vagrant/.pip/pip.conf\n[global]\ntimeout = 6000\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n\n[install]\nuse-mirrors = true\nmirrors = https://mirrors.aliyun.com/pypi/simple/\ntrusted-host=mirrors.aliyun.com\nEOF\n\npython3.6 -m venv /home/vagrant/venv\nsource /home/vagrant/venv/bin/activate\necho \"source /home/vagrant/venv/bin/activate\" >> /home/vagrant/.bash_profile\n  SHELL\nend\n\n```\n\n```bash\ncd jumpserver\nvagrant up\nvagrant ssh\n```\n\n<a name=\"gn90K\"></a>\n### ~~安装python3.6及配置pip源~~\n如果使用我的Vargrantfile，已经自动配置阿里云源并且安装必要依赖包了，不需要重复配置\n```bash\n## 设置yum的阿里云源\nsudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nsudo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo\nsudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\nsudo yum makecache\n\n## 安装依赖包\nsudo yum install -y python36 python36-devel python36-pip \\\n\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\\n     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\\n     openldap-devel mariadb-devel mysql-devel libffi-devel \\\n     openssh-clients telnet openldap-clients gcc\n\n## 配置pip阿里云源\nmkdir ~/.pip\ncat << EOF | sudo tee -a ~/.pip/pip.conf\n[global]\ntimeout = 6000\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n\n[install]\nuse-mirrors = true\nmirrors = https://mirrors.aliyun.com/pypi/simple/\ntrusted-host=mirrors.aliyun.com\nEOF\n```\n\n<a name=\"YFYr7\"></a>\n### 安装依赖\n如果使用我的Vargrantfile，不需要配置python env了，已经配置好了\n```bash\nvagrant ssh\npython3.6 -m venv /home/vagrant/venv\nsource /home/vagrant/venv/bin/activate\n```\n\n只需要执行这个即可\n```bash\npip3 install -r /vagrant/requirements/requirements.txt\n```\n\n参考 [安装文档](http://docs.jumpserver.org/zh/docs/step_by_step.html)\n\n<a name=\"KRTaO\"></a>\n## 配置pycharm并启动jumpserver\n<a name=\"Mk0Vl\"></a>\n### 配置pycharm\n\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>打开设置\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102215460-c6a602ed-86e6-49fc-b2b1-d43689243daa.png#align=left&display=inline&height=706&name=image.png&originHeight=706&originWidth=1009&size=70204&status=done&width=1009)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102389714-c0a5c982-1597-4007-8719-c4f316457bf8.png#align=left&display=inline&height=678&name=image.png&originHeight=678&originWidth=841&size=65908&status=done&width=841)<br />如果正常，会显示已经安装的pip包，如果是空，或者只有两个，那意味着python的env设置的不对。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102637247-a8c69ed0-d6a2-4d00-ad3b-feebe98a0589.png#align=left&display=inline&height=674&name=image.png&originHeight=674&originWidth=1007&size=68920&status=done&width=1007)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564102989073-8062df66-c4cc-45dd-b574-db6e6a39cb6d.png#align=left&display=inline&height=739&name=image.png&originHeight=739&originWidth=1068&size=108292&status=done&width=1068)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564110989520-3f8ac63d-5b58-46b7-89bc-d24f6352785c.png#align=left&display=inline&height=706&name=image.png&originHeight=706&originWidth=1009&size=63412&status=done&width=1009)\n\n[使用 PyCharm专业版和vagrant进行同步开发](https://blog.csdn.net/weixin_42393089/article/details/83211456)\n\n<a name=\"TVFTG\"></a>\n### 修改配置并初始化数据库\n\n```bash\ncd jumpserver\ncp config_example.yml config.yml\n## 修改config.yml的相关配置\nvagrant ssh\nsource /home/vagrant/venv/bin/activate\ncd /vagrant/utils\n./make_migrations.sh\n```\n\n<a name=\"avGGO\"></a>\n### 启动项目\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103536157-efbb24a4-c29d-45b4-991f-b314544ed548.png#align=left&display=inline&height=79&name=image.png&originHeight=79&originWidth=353&size=5532&status=done&width=353)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103574288-28ffdb6f-25f2-4a67-b8ba-936cca59ccf3.png#align=left&display=inline&height=273&name=image.png&originHeight=273&originWidth=407&size=25404&status=done&width=407)<br />浏览器打开 [http://172.17.8.101:8080/auth/login/?next=/](http://172.17.8.101:8080/auth/login/?next=/)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103612991-53990854-279f-41c9-8250-6647b7889279.png#align=left&display=inline&height=368&name=image.png&originHeight=368&originWidth=889&size=55638&status=done&width=889)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564103694901-b41968af-0830-4fc3-beab-4a2393a76279.png#align=left&display=inline&height=240&name=image.png&originHeight=240&originWidth=596&size=56566&status=done&width=596)\n\n\n<a name=\"Kgbm8\"></a>\n## 其他\n已经提交PR，如果有需要的朋友， 可以在PR上投票，可以提高通过率[added Vagrantfile to support windows dev#3036](https://github.com/jumpserver/jumpserver/pull/3036)\n\njumpserver virtualbox 已上传百度云盘 <br />链接：[https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ](https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ)  密码：rci6\n\n<a name=\"sNYV4\"></a>\n## 参考资料\n\n- [我的博客](http://anjia0532.github.io/2019/07/24/jumpserver-vagrant-virtualbox)\n- [我的掘金](https://juejin.im/post/5d3a55ece51d454f71439dd2)\n- [Win10 10月更新 VirtualBox VT-x is not available (VERR_VMX_NO_VMX). 解决](https://blog.csdn.net/imilano/article/details/83038682)\n- [Vagrant系列(一)----win10搭建Vagrant+VirtualBox环境](https://blog.csdn.net/u011781521/article/details/80275212)\n- [安装文档](http://docs.jumpserver.org/zh/docs/step_by_step.html)\n- [使用 PyCharm专业版和vagrant进行同步开发](https://blog.csdn.net/weixin_42393089/article/details/83211456)\n- [打造跨平台一致性开发环境](https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail)\n\n\n","slug":"jumpserver-vagrant-virtualbox","published":1,"updated":"2019-08-16T06:11:14.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojiz00dj24dogeocj818","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文以jumpserver为例，介绍如何在windows环境下进行jumpserver开发(jumpserver依赖的一些库，只有linux环境才能用)，其实不局限于jumpserver，其他项目也适用(不限于python)。参考 <a href=\"https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail\" target=\"_blank\" rel=\"noopener\">打造跨平台一致性开发环境</a></p>\n<a id=\"more\"></a>\n<p><a name=\"FBqFH\"></a></p>\n<h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><p><a name=\"DzvF8\"></a></p>\n<h3 id=\"安装vagrant-virtualbox\"><a href=\"#安装vagrant-virtualbox\" class=\"headerlink\" title=\"安装vagrant+virtualbox\"></a>安装vagrant+virtualbox</h3><p>参考 <a href=\"https://blog.csdn.net/u011781521/article/details/80275212\" target=\"_blank\" rel=\"noopener\">Vagrant系列(一)—-win10搭建Vagrant+VirtualBox环境</a><br><a name=\"LDM8N\"></a></p>\n<h3 id=\"下载centos镜像\"><a href=\"#下载centos镜像\" class=\"headerlink\" title=\"下载centos镜像\"></a>下载centos镜像</h3><p>可以使用境外服务器或者迅雷下载 <code>https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</code><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vagrant box add centos/7 \\</span><br><span class=\"line\">    https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant box add centos/7 /path/to/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"3o5Z3\"></a></p>\n<h3 id=\"下载jumpserver源代码并创建vagrant\"><a href=\"#下载jumpserver源代码并创建vagrant\" class=\"headerlink\" title=\"下载jumpserver源代码并创建vagrant\"></a>下载jumpserver源代码并创建vagrant</h3><p>如果下载速度慢，可以使用码云(gitee.com)自己创建个镜像项目，clone码云上的jumpserver<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://github.com/jumpserver/jumpserver.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> jumpserver</span><br></pre></td></tr></table></figure></p>\n<p>在jumpserver下创建Vagrantfile<br><figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- mode: ruby -*-</span></span><br><span class=\"line\"><span class=\"comment\"># vi: set ft=ruby :</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(<span class=\"string\">\"2\"</span>) <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">  <span class=\"comment\"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class=\"line\">  <span class=\"comment\"># boxes at https://vagrantcloud.com/search.</span></span><br><span class=\"line\">  config.vm.box_check_update = <span class=\"literal\">false</span></span><br><span class=\"line\">  config.vm.box = <span class=\"string\">\"centos/7\"</span></span><br><span class=\"line\">  config.vm.hostname = <span class=\"string\">\"jumpserver\"</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">\"private_network\"</span>, <span class=\"symbol\">ip:</span> <span class=\"string\">\"172.17.8.101\"</span></span><br><span class=\"line\">  config.vm.provider <span class=\"string\">\"virtualbox\"</span> <span class=\"keyword\">do</span> <span class=\"params\">|vb|</span></span><br><span class=\"line\">    vb.memory = <span class=\"string\">\"4096\"</span></span><br><span class=\"line\">    vb.cpus = <span class=\"number\">2</span></span><br><span class=\"line\">    vb.name = <span class=\"string\">\"jumpserver\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.synced_folder <span class=\"string\">\".\"</span>, <span class=\"string\">\"/vagrant\"</span>, <span class=\"symbol\">type:</span> <span class=\"string\">\"rsync\"</span>,</span><br><span class=\"line\">    <span class=\"symbol\">rsync__verbose:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"symbol\">rsync__exclude:</span> [<span class=\"string\">'.git*'</span>, <span class=\"string\">'node_modules*'</span>,<span class=\"string\">'*.log'</span>,<span class=\"string\">'*.box'</span>,<span class=\"string\">'Vagrantfile'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.provision <span class=\"string\">\"shell\"</span>, <span class=\"symbol\">inline:</span> <span class=\"string\">&lt;&lt;-SHELL</span></span><br><span class=\"line\"><span class=\"string\">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class=\"line\"><span class=\"string\">sudo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class=\"line\"><span class=\"string\">sudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class=\"line\"><span class=\"string\">sudo yum makecache</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sudo yum install -y python36 python36-devel python36-pip \\</span></span><br><span class=\"line\"><span class=\"string\">\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\</span></span><br><span class=\"line\"><span class=\"string\">     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\</span></span><br><span class=\"line\"><span class=\"string\">     openldap-devel mariadb-devel mysql-devel libffi-devel \\</span></span><br><span class=\"line\"><span class=\"string\">     openssh-clients telnet openldap-clients gcc</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mkdir /home/vagrant/.pip</span></span><br><span class=\"line\"><span class=\"string\">cat &lt;&lt; EOF | sudo tee -a /home/vagrant/.pip/pip.conf</span></span><br><span class=\"line\"><span class=\"string\">[global]</span></span><br><span class=\"line\"><span class=\"string\">timeout = 6000</span></span><br><span class=\"line\"><span class=\"string\">index-url = https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[install]</span></span><br><span class=\"line\"><span class=\"string\">use-mirrors = true</span></span><br><span class=\"line\"><span class=\"string\">mirrors = https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class=\"line\"><span class=\"string\">trusted-host=mirrors.aliyun.com</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">python3.<span class=\"number\">6</span> -m venv /home/vagrant/venv</span><br><span class=\"line\">source /home/vagrant/venv/bin/activate</span><br><span class=\"line\">echo <span class=\"string\">\"source /home/vagrant/venv/bin/activate\"</span> <span class=\"meta\">&gt;&gt; </span>/home/vagrant/.bash_profile</span><br><span class=\"line\">  SHELL</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> jumpserver</span><br><span class=\"line\">vagrant up</span><br><span class=\"line\">vagrant ssh</span><br></pre></td></tr></table></figure>\n<p><a name=\"gn90K\"></a></p>\n<h3 id=\"安装python3-6及配置pip源\"><a href=\"#安装python3-6及配置pip源\" class=\"headerlink\" title=\"安装python3.6及配置pip源\"></a><del>安装python3.6及配置pip源</del></h3><p>如果使用我的Vargrantfile，已经自动配置阿里云源并且安装必要依赖包了，不需要重复配置<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置yum的阿里云源</span></span><br><span class=\"line\">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">sudo sed -i -e <span class=\"string\">'/mirrors.cloud.aliyuncs.com/d'</span> -e <span class=\"string\">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">sudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class=\"line\">sudo yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装依赖包</span></span><br><span class=\"line\">sudo yum install -y python36 python36-devel python36-pip \\</span><br><span class=\"line\">\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\</span><br><span class=\"line\">     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\</span><br><span class=\"line\">     openldap-devel mariadb-devel mysql-devel libffi-devel \\</span><br><span class=\"line\">     openssh-clients telnet openldap-clients gcc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 配置pip阿里云源</span></span><br><span class=\"line\">mkdir ~/.pip</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a ~/.pip/pip.conf</span><br><span class=\"line\">[global]</span><br><span class=\"line\">timeout = 6000</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\"></span><br><span class=\"line\">[install]</span><br><span class=\"line\">use-mirrors = <span class=\"literal\">true</span></span><br><span class=\"line\">mirrors = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"YFYr7\"></a></p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>如果使用我的Vargrantfile，不需要配置python env了，已经配置好了<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vagrant ssh</span><br><span class=\"line\">python3.6 -m venv /home/vagrant/venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/vagrant/venv/bin/activate</span><br></pre></td></tr></table></figure></p>\n<p>只需要执行这个即可<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install -r /vagrant/requirements/requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"http://docs.jumpserver.org/zh/docs/step_by_step.html\" target=\"_blank\" rel=\"noopener\">安装文档</a></p>\n<p><a name=\"KRTaO\"></a></p>\n<h2 id=\"配置pycharm并启动jumpserver\"><a href=\"#配置pycharm并启动jumpserver\" class=\"headerlink\" title=\"配置pycharm并启动jumpserver\"></a>配置pycharm并启动jumpserver</h2><p><a name=\"Mk0Vl\"></a></p>\n<h3 id=\"配置pycharm\"><a href=\"#配置pycharm\" class=\"headerlink\" title=\"配置pycharm\"></a>配置pycharm</h3><p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>打开设置</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102215460-c6a602ed-86e6-49fc-b2b1-d43689243daa.png#align=left&amp;display=inline&amp;height=706&amp;name=image.png&amp;originHeight=706&amp;originWidth=1009&amp;size=70204&amp;status=done&amp;width=1009\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102389714-c0a5c982-1597-4007-8719-c4f316457bf8.png#align=left&amp;display=inline&amp;height=678&amp;name=image.png&amp;originHeight=678&amp;originWidth=841&amp;size=65908&amp;status=done&amp;width=841\" alt=\"image.png\"><br>如果正常，会显示已经安装的pip包，如果是空，或者只有两个，那意味着python的env设置的不对。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102637247-a8c69ed0-d6a2-4d00-ad3b-feebe98a0589.png#align=left&amp;display=inline&amp;height=674&amp;name=image.png&amp;originHeight=674&amp;originWidth=1007&amp;size=68920&amp;status=done&amp;width=1007\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102989073-8062df66-c4cc-45dd-b574-db6e6a39cb6d.png#align=left&amp;display=inline&amp;height=739&amp;name=image.png&amp;originHeight=739&amp;originWidth=1068&amp;size=108292&amp;status=done&amp;width=1068\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564110989520-3f8ac63d-5b58-46b7-89bc-d24f6352785c.png#align=left&amp;display=inline&amp;height=706&amp;name=image.png&amp;originHeight=706&amp;originWidth=1009&amp;size=63412&amp;status=done&amp;width=1009\" alt=\"image.png\"></p>\n<p><a href=\"https://blog.csdn.net/weixin_42393089/article/details/83211456\" target=\"_blank\" rel=\"noopener\">使用 PyCharm专业版和vagrant进行同步开发</a></p>\n<p><a name=\"TVFTG\"></a></p>\n<h3 id=\"修改配置并初始化数据库\"><a href=\"#修改配置并初始化数据库\" class=\"headerlink\" title=\"修改配置并初始化数据库\"></a>修改配置并初始化数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> jumpserver</span><br><span class=\"line\">cp config_example.yml config.yml</span><br><span class=\"line\"><span class=\"comment\">## 修改config.yml的相关配置</span></span><br><span class=\"line\">vagrant ssh</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/vagrant/venv/bin/activate</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /vagrant/utils</span><br><span class=\"line\">./make_migrations.sh</span><br></pre></td></tr></table></figure>\n<p><a name=\"avGGO\"></a></p>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103536157-efbb24a4-c29d-45b4-991f-b314544ed548.png#align=left&amp;display=inline&amp;height=79&amp;name=image.png&amp;originHeight=79&amp;originWidth=353&amp;size=5532&amp;status=done&amp;width=353\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103574288-28ffdb6f-25f2-4a67-b8ba-936cca59ccf3.png#align=left&amp;display=inline&amp;height=273&amp;name=image.png&amp;originHeight=273&amp;originWidth=407&amp;size=25404&amp;status=done&amp;width=407\" alt=\"image.png\"><br>浏览器打开 <a href=\"http://172.17.8.101:8080/auth/login/?next=/\" target=\"_blank\" rel=\"noopener\">http://172.17.8.101:8080/auth/login/?next=/</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103612991-53990854-279f-41c9-8250-6647b7889279.png#align=left&amp;display=inline&amp;height=368&amp;name=image.png&amp;originHeight=368&amp;originWidth=889&amp;size=55638&amp;status=done&amp;width=889\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103694901-b41968af-0830-4fc3-beab-4a2393a76279.png#align=left&amp;display=inline&amp;height=240&amp;name=image.png&amp;originHeight=240&amp;originWidth=596&amp;size=56566&amp;status=done&amp;width=596\" alt=\"image.png\"></p>\n<p><a name=\"Kgbm8\"></a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>已经提交PR，如果有需要的朋友， 可以在PR上投票，可以提高通过率<a href=\"https://github.com/jumpserver/jumpserver/pull/3036\" target=\"_blank\" rel=\"noopener\">added Vagrantfile to support windows dev#3036</a></p>\n<p>jumpserver virtualbox 已上传百度云盘 <br>链接：<a href=\"https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ</a>  密码：rci6</p>\n<p><a name=\"sNYV4\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://anjia0532.github.io/2019/07/24/jumpserver-vagrant-virtualbox\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3a55ece51d454f71439dd2\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://blog.csdn.net/imilano/article/details/83038682\" target=\"_blank\" rel=\"noopener\">Win10 10月更新 VirtualBox VT-x is not available (VERR_VMX_NO_VMX). 解决</a></li>\n<li><a href=\"https://blog.csdn.net/u011781521/article/details/80275212\" target=\"_blank\" rel=\"noopener\">Vagrant系列(一)—-win10搭建Vagrant+VirtualBox环境</a></li>\n<li><a href=\"http://docs.jumpserver.org/zh/docs/step_by_step.html\" target=\"_blank\" rel=\"noopener\">安装文档</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42393089/article/details/83211456\" target=\"_blank\" rel=\"noopener\">使用 PyCharm专业版和vagrant进行同步开发</a></li>\n<li><a href=\"https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail\" target=\"_blank\" rel=\"noopener\">打造跨平台一致性开发环境</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第36篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文以jumpserver为例，介绍如何在windows环境下进行jumpserver开发(jumpserver依赖的一些库，只有linux环境才能用)，其实不局限于jumpserver，其他项目也适用(不限于python)。参考 <a href=\"https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail\" target=\"_blank\" rel=\"noopener\">打造跨平台一致性开发环境</a></p>","more":"<p><a name=\"FBqFH\"></a></p>\n<h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><p><a name=\"DzvF8\"></a></p>\n<h3 id=\"安装vagrant-virtualbox\"><a href=\"#安装vagrant-virtualbox\" class=\"headerlink\" title=\"安装vagrant+virtualbox\"></a>安装vagrant+virtualbox</h3><p>参考 <a href=\"https://blog.csdn.net/u011781521/article/details/80275212\" target=\"_blank\" rel=\"noopener\">Vagrant系列(一)—-win10搭建Vagrant+VirtualBox环境</a><br><a name=\"LDM8N\"></a></p>\n<h3 id=\"下载centos镜像\"><a href=\"#下载centos镜像\" class=\"headerlink\" title=\"下载centos镜像\"></a>下载centos镜像</h3><p>可以使用境外服务器或者迅雷下载 <code>https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</code><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vagrant box add centos/7 \\</span><br><span class=\"line\">    https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant box add centos/7 /path/to/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"3o5Z3\"></a></p>\n<h3 id=\"下载jumpserver源代码并创建vagrant\"><a href=\"#下载jumpserver源代码并创建vagrant\" class=\"headerlink\" title=\"下载jumpserver源代码并创建vagrant\"></a>下载jumpserver源代码并创建vagrant</h3><p>如果下载速度慢，可以使用码云(gitee.com)自己创建个镜像项目，clone码云上的jumpserver<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://github.com/jumpserver/jumpserver.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> jumpserver</span><br></pre></td></tr></table></figure></p>\n<p>在jumpserver下创建Vagrantfile<br><figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- mode: ruby -*-</span></span><br><span class=\"line\"><span class=\"comment\"># vi: set ft=ruby :</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(<span class=\"string\">\"2\"</span>) <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">  <span class=\"comment\"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class=\"line\">  <span class=\"comment\"># boxes at https://vagrantcloud.com/search.</span></span><br><span class=\"line\">  config.vm.box_check_update = <span class=\"literal\">false</span></span><br><span class=\"line\">  config.vm.box = <span class=\"string\">\"centos/7\"</span></span><br><span class=\"line\">  config.vm.hostname = <span class=\"string\">\"jumpserver\"</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">\"private_network\"</span>, <span class=\"symbol\">ip:</span> <span class=\"string\">\"172.17.8.101\"</span></span><br><span class=\"line\">  config.vm.provider <span class=\"string\">\"virtualbox\"</span> <span class=\"keyword\">do</span> <span class=\"params\">|vb|</span></span><br><span class=\"line\">    vb.memory = <span class=\"string\">\"4096\"</span></span><br><span class=\"line\">    vb.cpus = <span class=\"number\">2</span></span><br><span class=\"line\">    vb.name = <span class=\"string\">\"jumpserver\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.synced_folder <span class=\"string\">\".\"</span>, <span class=\"string\">\"/vagrant\"</span>, <span class=\"symbol\">type:</span> <span class=\"string\">\"rsync\"</span>,</span><br><span class=\"line\">    <span class=\"symbol\">rsync__verbose:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"symbol\">rsync__exclude:</span> [<span class=\"string\">'.git*'</span>, <span class=\"string\">'node_modules*'</span>,<span class=\"string\">'*.log'</span>,<span class=\"string\">'*.box'</span>,<span class=\"string\">'Vagrantfile'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.provision <span class=\"string\">\"shell\"</span>, <span class=\"symbol\">inline:</span> <span class=\"string\">&lt;&lt;-SHELL</span></span><br><span class=\"line\"><span class=\"string\">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class=\"line\"><span class=\"string\">sudo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class=\"line\"><span class=\"string\">sudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class=\"line\"><span class=\"string\">sudo yum makecache</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sudo yum install -y python36 python36-devel python36-pip \\</span></span><br><span class=\"line\"><span class=\"string\">\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\</span></span><br><span class=\"line\"><span class=\"string\">     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\</span></span><br><span class=\"line\"><span class=\"string\">     openldap-devel mariadb-devel mysql-devel libffi-devel \\</span></span><br><span class=\"line\"><span class=\"string\">     openssh-clients telnet openldap-clients gcc</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mkdir /home/vagrant/.pip</span></span><br><span class=\"line\"><span class=\"string\">cat &lt;&lt; EOF | sudo tee -a /home/vagrant/.pip/pip.conf</span></span><br><span class=\"line\"><span class=\"string\">[global]</span></span><br><span class=\"line\"><span class=\"string\">timeout = 6000</span></span><br><span class=\"line\"><span class=\"string\">index-url = https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[install]</span></span><br><span class=\"line\"><span class=\"string\">use-mirrors = true</span></span><br><span class=\"line\"><span class=\"string\">mirrors = https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class=\"line\"><span class=\"string\">trusted-host=mirrors.aliyun.com</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">python3.<span class=\"number\">6</span> -m venv /home/vagrant/venv</span><br><span class=\"line\">source /home/vagrant/venv/bin/activate</span><br><span class=\"line\">echo <span class=\"string\">\"source /home/vagrant/venv/bin/activate\"</span> <span class=\"meta\">&gt;&gt; </span>/home/vagrant/.bash_profile</span><br><span class=\"line\">  SHELL</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> jumpserver</span><br><span class=\"line\">vagrant up</span><br><span class=\"line\">vagrant ssh</span><br></pre></td></tr></table></figure>\n<p><a name=\"gn90K\"></a></p>\n<h3 id=\"安装python3-6及配置pip源\"><a href=\"#安装python3-6及配置pip源\" class=\"headerlink\" title=\"安装python3.6及配置pip源\"></a><del>安装python3.6及配置pip源</del></h3><p>如果使用我的Vargrantfile，已经自动配置阿里云源并且安装必要依赖包了，不需要重复配置<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置yum的阿里云源</span></span><br><span class=\"line\">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">sudo sed -i -e <span class=\"string\">'/mirrors.cloud.aliyuncs.com/d'</span> -e <span class=\"string\">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">sudo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class=\"line\">sudo yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装依赖包</span></span><br><span class=\"line\">sudo yum install -y python36 python36-devel python36-pip \\</span><br><span class=\"line\">\t\t libtiff-devel libjpeg-devel libzip-devel freetype-devel \\</span><br><span class=\"line\">     lcms2-devel libwebp-devel tcl-devel tk-devel sshpass \\</span><br><span class=\"line\">     openldap-devel mariadb-devel mysql-devel libffi-devel \\</span><br><span class=\"line\">     openssh-clients telnet openldap-clients gcc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 配置pip阿里云源</span></span><br><span class=\"line\">mkdir ~/.pip</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a ~/.pip/pip.conf</span><br><span class=\"line\">[global]</span><br><span class=\"line\">timeout = 6000</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\"></span><br><span class=\"line\">[install]</span><br><span class=\"line\">use-mirrors = <span class=\"literal\">true</span></span><br><span class=\"line\">mirrors = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"YFYr7\"></a></p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>如果使用我的Vargrantfile，不需要配置python env了，已经配置好了<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vagrant ssh</span><br><span class=\"line\">python3.6 -m venv /home/vagrant/venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/vagrant/venv/bin/activate</span><br></pre></td></tr></table></figure></p>\n<p>只需要执行这个即可<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install -r /vagrant/requirements/requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"http://docs.jumpserver.org/zh/docs/step_by_step.html\" target=\"_blank\" rel=\"noopener\">安装文档</a></p>\n<p><a name=\"KRTaO\"></a></p>\n<h2 id=\"配置pycharm并启动jumpserver\"><a href=\"#配置pycharm并启动jumpserver\" class=\"headerlink\" title=\"配置pycharm并启动jumpserver\"></a>配置pycharm并启动jumpserver</h2><p><a name=\"Mk0Vl\"></a></p>\n<h3 id=\"配置pycharm\"><a href=\"#配置pycharm\" class=\"headerlink\" title=\"配置pycharm\"></a>配置pycharm</h3><p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>打开设置</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102215460-c6a602ed-86e6-49fc-b2b1-d43689243daa.png#align=left&amp;display=inline&amp;height=706&amp;name=image.png&amp;originHeight=706&amp;originWidth=1009&amp;size=70204&amp;status=done&amp;width=1009\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102389714-c0a5c982-1597-4007-8719-c4f316457bf8.png#align=left&amp;display=inline&amp;height=678&amp;name=image.png&amp;originHeight=678&amp;originWidth=841&amp;size=65908&amp;status=done&amp;width=841\" alt=\"image.png\"><br>如果正常，会显示已经安装的pip包，如果是空，或者只有两个，那意味着python的env设置的不对。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102637247-a8c69ed0-d6a2-4d00-ad3b-feebe98a0589.png#align=left&amp;display=inline&amp;height=674&amp;name=image.png&amp;originHeight=674&amp;originWidth=1007&amp;size=68920&amp;status=done&amp;width=1007\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564102989073-8062df66-c4cc-45dd-b574-db6e6a39cb6d.png#align=left&amp;display=inline&amp;height=739&amp;name=image.png&amp;originHeight=739&amp;originWidth=1068&amp;size=108292&amp;status=done&amp;width=1068\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564110989520-3f8ac63d-5b58-46b7-89bc-d24f6352785c.png#align=left&amp;display=inline&amp;height=706&amp;name=image.png&amp;originHeight=706&amp;originWidth=1009&amp;size=63412&amp;status=done&amp;width=1009\" alt=\"image.png\"></p>\n<p><a href=\"https://blog.csdn.net/weixin_42393089/article/details/83211456\" target=\"_blank\" rel=\"noopener\">使用 PyCharm专业版和vagrant进行同步开发</a></p>\n<p><a name=\"TVFTG\"></a></p>\n<h3 id=\"修改配置并初始化数据库\"><a href=\"#修改配置并初始化数据库\" class=\"headerlink\" title=\"修改配置并初始化数据库\"></a>修改配置并初始化数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> jumpserver</span><br><span class=\"line\">cp config_example.yml config.yml</span><br><span class=\"line\"><span class=\"comment\">## 修改config.yml的相关配置</span></span><br><span class=\"line\">vagrant ssh</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/vagrant/venv/bin/activate</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /vagrant/utils</span><br><span class=\"line\">./make_migrations.sh</span><br></pre></td></tr></table></figure>\n<p><a name=\"avGGO\"></a></p>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103536157-efbb24a4-c29d-45b4-991f-b314544ed548.png#align=left&amp;display=inline&amp;height=79&amp;name=image.png&amp;originHeight=79&amp;originWidth=353&amp;size=5532&amp;status=done&amp;width=353\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103574288-28ffdb6f-25f2-4a67-b8ba-936cca59ccf3.png#align=left&amp;display=inline&amp;height=273&amp;name=image.png&amp;originHeight=273&amp;originWidth=407&amp;size=25404&amp;status=done&amp;width=407\" alt=\"image.png\"><br>浏览器打开 <a href=\"http://172.17.8.101:8080/auth/login/?next=/\" target=\"_blank\" rel=\"noopener\">http://172.17.8.101:8080/auth/login/?next=/</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103612991-53990854-279f-41c9-8250-6647b7889279.png#align=left&amp;display=inline&amp;height=368&amp;name=image.png&amp;originHeight=368&amp;originWidth=889&amp;size=55638&amp;status=done&amp;width=889\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564103694901-b41968af-0830-4fc3-beab-4a2393a76279.png#align=left&amp;display=inline&amp;height=240&amp;name=image.png&amp;originHeight=240&amp;originWidth=596&amp;size=56566&amp;status=done&amp;width=596\" alt=\"image.png\"></p>\n<p><a name=\"Kgbm8\"></a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>已经提交PR，如果有需要的朋友， 可以在PR上投票，可以提高通过率<a href=\"https://github.com/jumpserver/jumpserver/pull/3036\" target=\"_blank\" rel=\"noopener\">added Vagrantfile to support windows dev#3036</a></p>\n<p>jumpserver virtualbox 已上传百度云盘 <br>链接：<a href=\"https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mr6xM7UVkPJy3TPTyoM_NQ</a>  密码：rci6</p>\n<p><a name=\"sNYV4\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://anjia0532.github.io/2019/07/24/jumpserver-vagrant-virtualbox\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3a55ece51d454f71439dd2\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://blog.csdn.net/imilano/article/details/83038682\" target=\"_blank\" rel=\"noopener\">Win10 10月更新 VirtualBox VT-x is not available (VERR_VMX_NO_VMX). 解决</a></li>\n<li><a href=\"https://blog.csdn.net/u011781521/article/details/80275212\" target=\"_blank\" rel=\"noopener\">Vagrant系列(一)—-win10搭建Vagrant+VirtualBox环境</a></li>\n<li><a href=\"http://docs.jumpserver.org/zh/docs/step_by_step.html\" target=\"_blank\" rel=\"noopener\">安装文档</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42393089/article/details/83211456\" target=\"_blank\" rel=\"noopener\">使用 PyCharm专业版和vagrant进行同步开发</a></li>\n<li><a href=\"https://juejin.im/entry/5c6a6da5f265da2de52d7d7c/detail\" target=\"_blank\" rel=\"noopener\">打造跨平台一致性开发环境</a></li>\n</ul>"},{"title":"004-零失败快速搞定通配符SSL证书","date":"2019-02-18T04:43:00.000Z","_content":"\n> \n> 这是坚持技术写作计划（含翻译）的第四篇，定个小目标999，每周最少2篇。\n\n\n> 过去几年中，我们一直主张站点采用 HTTPS，以提升其安全性。去年的时候，我们还通过将更大的 HTTP 页面标记为‘不安全’以帮助用户。\n> 不过从 2018 年 7 月开始，随着 Chrome 68 的发布，浏览器会将所有 HTTP 网站标记为‘不安全’。\n> 引用自 [chrome 68 发布说明](https://support.google.com/chrome/a/answer/7679408)\n\n\n得益于Google等大厂的消灭HTTP运动和[Let's Encrypt](https://letsencrypt.org) 非盈利组织的努力，越来越多的站点开始迁移到HTTPS，下图是[Let's Encrypt的统计数据](https://letsencrypt.org/stats/)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550317966768-d4587466-a6d0-4868-b9ca-4e65bc45b101.png#align=left&display=inline&height=450&name=image.png&originHeight=450&originWidth=940&size=41971&width=940)<br /><!-- more -->\n\n<a name=\"d8c35fbf\"></a>\n## 什么是Let's Encrypt\n\n部署 HTTPS 网站的时候需要证书，证书由 CA 机构签发，大部分传统 CA 机构签发证书是需要收费的，这不利于推动 HTTPS 协议的使用。\n\nLet's Encrypt是一个国外的非盈利的CA证书机构，旨在以自动化流程消除手动创建和安装证书的复杂流程，并推广使万维网服务器的加密连接无所不在，为安全网站提供免费的SSL/TLS证书。\n\n由Linux基金会托管，许多国内外互联网大厂都对其进行赞助，目前主流浏览器均已信任Let's Encrypt发放的证书。\n\n注意，Let's Encrypt颁发的都是DV证书，不提供OV,EV证书。\n\n本文主要讲解 如何使用Let's Encrypt颁发通配符证书。\n\n<a name=\"cbaf77e0\"></a>\n## 通配符证书\n\n通配符SSL证书旨在保护主域名以及旗下不限数量的子域，即用户可通过单个通配符SSL证书可保护任意数量的子域。如果用户拥有多个子域名平台，可通过通配符SSL证书保护这些子域名。\n\n但是目前Let's Encrypt 只支持同级子域名通配符。例如 `*.demo.com` 只支持 `xx.demo.com` 这种的，而不支持 `xx.xx.demo.com` ，而要支持二级通配符，需要再次颁发二级通配符证书 类似 `*.demo.demo.com` ，注意，这种的二级通配符，要求，一级域名是固定的，意即，不支持 `*.*.demo.com` \n\n<a name=\"1c74e63c\"></a>\n## 使用 acme.sh 简化证书颁发操作\n\n官方建议使用[Certbot](https://certbot.eff.org/) ，但是很长一段时期Certbot不支持通配符（现在已经支持），而且对于证书自动续期支持的也不好。并且操作时也挺麻烦。\n\n\n<a name=\"0c48da8f\"></a>\n### 安装 acme.sh\n\n```bash\n$ curl https://get.acme.sh | sh\n# 或者\n$ wget -O -  https://get.acme.sh | sh\n# 或者\n$ git clone https://github.com/Neilpang/acme.sh.git\n$ ./acme.sh/acme.sh --install\n```\n\n<a name=\"4c752c1e\"></a>\n### DNS Api 颁发通配符证书\nacme.sh 功能很强大，此处只介绍使用Dns Api 自动化颁发通配符证书. 目前支持包含阿里和DNSPod在内的60家dns服务商（参见 [Currently acme.sh supports](https://github.com/Neilpang/acme.sh#currently-acmesh-supports)）\n\n如果你的DNS服务商不提供API或者acme.sh暂未支持，或者处于安全方面的考虑，不想将重要的域名的API权限暴露给 acme.sh，可以申请一个测试域名，然后在重要域名上设置CNAME（参见 [DNS alias mode](https://github.com/Neilpang/acme.sh/wiki/DNS-alias-mode)）\n\n假设您的域名在DNSPod托管，登陆DNSPod后台，依次打开 用户中心->安全设置-> API Token->查看->创建API Token-> 输入任意token名称->确定-> 保存ID和Token值（图中打码部分）\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550463481824-01a645a7-5a95-4320-80ab-753ff7664bff.png#align=left&display=inline&height=558&name=image.png&originHeight=558&originWidth=1241&size=59891&width=1241)\n\n```bash\n$ export DP_Id=\"你的ID\"\n$ export DP_Key=\"你的Token\"\n$ acme.sh --issue --dns dns_dp -d example.com -d *.example.com\n# 如果 使用了DNS别名，还需要增加 --challenge-alias 别名域名 参数\n# 为了防止dns不生效，脚本会暂停2分钟，并倒计时(Sleep 120 seconds for the txt records to take effect),等待即可\n# 如果成功会出现 Cert success. 字样\n# 不建议直接用~/.acme.sh 下的证书，参考 https://github.com/Neilpang/acme.sh/wiki/说明#3-copy安装-证书\n# 需要使用 --installcert 复制到指定目录\n$ acme.sh --installcert  \\\n\t\t\t\t-d  example.com -d *.example.com \\\n        --key-file /etc/letsencrypt/live/example.com/privkey.pem \\\n        --fullchain-file /etc/letsencrypt/live/example.com/fullchain.pem \\\n        --reloadcmd  \"service nginx reload\"\n```\n\n<a name=\"03e61821\"></a>\n### 优化HTTPS配置\n本文以 [Mozilla SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/) 生成的nginx为例，同样也可以生成Apache和IIS\n\n```nginx\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits\n    # openssl dhparam -out /etc/letsencrypt/live/example.com/ 2048\n    ssl_dhparam /etc/letsencrypt/live/example.com/dhparam.pem;\n\n    # intermediate configuration. tweak to your needs.\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)\n    add_header Strict-Transport-Security max-age=15768000;\n\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    ## verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;\n\n    resolver <IP DNS resolver>;\n\n    ....\n}\n```\n\n<a name=\"7154ff4a\"></a>\n### 检查HTTPS得分\n访问 [https://www.ssllabs.com/ssltest/](https://www.ssllabs.com/ssltest/) 提交自己域名，进行评分\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [Chrome 将不再标记 HTTPS 页面为安全站点](https://www.oschina.net/news/96200/chrome-will-stop-tag-https-site-secure)\n- [Let's Encrypt Stats](https://letsencrypt.org/stats/)\n- [About Let's Encrypt](https://letsencrypt.org/about/)\n- [Mozilla SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/)\n- [DV型、OV型、EV型证书的主要区别](https://www.cnblogs.com/sslwork/p/6193256.html)\n- [Neilpang/acme.sh#Wiki#安装说明](https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md)\n- [Neilpang/acme.sh#Wiki#How to Install](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n- [Neilpang/acme.sh#Wiki#How to use DNS API](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/lets-encrypt-acme-sh.md","raw":"\n---\n\ntitle: 004-零失败快速搞定通配符SSL证书\n\ndate: 2019-02-18 12:43:00 +0800\n\ntags: [ssl,https,http2,lets-encrypt,acme,acme-sh]\n\ncategories: 运维\n\n---\n\n> \n> 这是坚持技术写作计划（含翻译）的第四篇，定个小目标999，每周最少2篇。\n\n\n> 过去几年中，我们一直主张站点采用 HTTPS，以提升其安全性。去年的时候，我们还通过将更大的 HTTP 页面标记为‘不安全’以帮助用户。\n> 不过从 2018 年 7 月开始，随着 Chrome 68 的发布，浏览器会将所有 HTTP 网站标记为‘不安全’。\n> 引用自 [chrome 68 发布说明](https://support.google.com/chrome/a/answer/7679408)\n\n\n得益于Google等大厂的消灭HTTP运动和[Let's Encrypt](https://letsencrypt.org) 非盈利组织的努力，越来越多的站点开始迁移到HTTPS，下图是[Let's Encrypt的统计数据](https://letsencrypt.org/stats/)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550317966768-d4587466-a6d0-4868-b9ca-4e65bc45b101.png#align=left&display=inline&height=450&name=image.png&originHeight=450&originWidth=940&size=41971&width=940)<br /><!-- more -->\n\n<a name=\"d8c35fbf\"></a>\n## 什么是Let's Encrypt\n\n部署 HTTPS 网站的时候需要证书，证书由 CA 机构签发，大部分传统 CA 机构签发证书是需要收费的，这不利于推动 HTTPS 协议的使用。\n\nLet's Encrypt是一个国外的非盈利的CA证书机构，旨在以自动化流程消除手动创建和安装证书的复杂流程，并推广使万维网服务器的加密连接无所不在，为安全网站提供免费的SSL/TLS证书。\n\n由Linux基金会托管，许多国内外互联网大厂都对其进行赞助，目前主流浏览器均已信任Let's Encrypt发放的证书。\n\n注意，Let's Encrypt颁发的都是DV证书，不提供OV,EV证书。\n\n本文主要讲解 如何使用Let's Encrypt颁发通配符证书。\n\n<a name=\"cbaf77e0\"></a>\n## 通配符证书\n\n通配符SSL证书旨在保护主域名以及旗下不限数量的子域，即用户可通过单个通配符SSL证书可保护任意数量的子域。如果用户拥有多个子域名平台，可通过通配符SSL证书保护这些子域名。\n\n但是目前Let's Encrypt 只支持同级子域名通配符。例如 `*.demo.com` 只支持 `xx.demo.com` 这种的，而不支持 `xx.xx.demo.com` ，而要支持二级通配符，需要再次颁发二级通配符证书 类似 `*.demo.demo.com` ，注意，这种的二级通配符，要求，一级域名是固定的，意即，不支持 `*.*.demo.com` \n\n<a name=\"1c74e63c\"></a>\n## 使用 acme.sh 简化证书颁发操作\n\n官方建议使用[Certbot](https://certbot.eff.org/) ，但是很长一段时期Certbot不支持通配符（现在已经支持），而且对于证书自动续期支持的也不好。并且操作时也挺麻烦。\n\n\n<a name=\"0c48da8f\"></a>\n### 安装 acme.sh\n\n```bash\n$ curl https://get.acme.sh | sh\n# 或者\n$ wget -O -  https://get.acme.sh | sh\n# 或者\n$ git clone https://github.com/Neilpang/acme.sh.git\n$ ./acme.sh/acme.sh --install\n```\n\n<a name=\"4c752c1e\"></a>\n### DNS Api 颁发通配符证书\nacme.sh 功能很强大，此处只介绍使用Dns Api 自动化颁发通配符证书. 目前支持包含阿里和DNSPod在内的60家dns服务商（参见 [Currently acme.sh supports](https://github.com/Neilpang/acme.sh#currently-acmesh-supports)）\n\n如果你的DNS服务商不提供API或者acme.sh暂未支持，或者处于安全方面的考虑，不想将重要的域名的API权限暴露给 acme.sh，可以申请一个测试域名，然后在重要域名上设置CNAME（参见 [DNS alias mode](https://github.com/Neilpang/acme.sh/wiki/DNS-alias-mode)）\n\n假设您的域名在DNSPod托管，登陆DNSPod后台，依次打开 用户中心->安全设置-> API Token->查看->创建API Token-> 输入任意token名称->确定-> 保存ID和Token值（图中打码部分）\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550463481824-01a645a7-5a95-4320-80ab-753ff7664bff.png#align=left&display=inline&height=558&name=image.png&originHeight=558&originWidth=1241&size=59891&width=1241)\n\n```bash\n$ export DP_Id=\"你的ID\"\n$ export DP_Key=\"你的Token\"\n$ acme.sh --issue --dns dns_dp -d example.com -d *.example.com\n# 如果 使用了DNS别名，还需要增加 --challenge-alias 别名域名 参数\n# 为了防止dns不生效，脚本会暂停2分钟，并倒计时(Sleep 120 seconds for the txt records to take effect),等待即可\n# 如果成功会出现 Cert success. 字样\n# 不建议直接用~/.acme.sh 下的证书，参考 https://github.com/Neilpang/acme.sh/wiki/说明#3-copy安装-证书\n# 需要使用 --installcert 复制到指定目录\n$ acme.sh --installcert  \\\n\t\t\t\t-d  example.com -d *.example.com \\\n        --key-file /etc/letsencrypt/live/example.com/privkey.pem \\\n        --fullchain-file /etc/letsencrypt/live/example.com/fullchain.pem \\\n        --reloadcmd  \"service nginx reload\"\n```\n\n<a name=\"03e61821\"></a>\n### 优化HTTPS配置\n本文以 [Mozilla SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/) 生成的nginx为例，同样也可以生成Apache和IIS\n\n```nginx\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits\n    # openssl dhparam -out /etc/letsencrypt/live/example.com/ 2048\n    ssl_dhparam /etc/letsencrypt/live/example.com/dhparam.pem;\n\n    # intermediate configuration. tweak to your needs.\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)\n    add_header Strict-Transport-Security max-age=15768000;\n\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    ## verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;\n\n    resolver <IP DNS resolver>;\n\n    ....\n}\n```\n\n<a name=\"7154ff4a\"></a>\n### 检查HTTPS得分\n访问 [https://www.ssllabs.com/ssltest/](https://www.ssllabs.com/ssltest/) 提交自己域名，进行评分\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [Chrome 将不再标记 HTTPS 页面为安全站点](https://www.oschina.net/news/96200/chrome-will-stop-tag-https-site-secure)\n- [Let's Encrypt Stats](https://letsencrypt.org/stats/)\n- [About Let's Encrypt](https://letsencrypt.org/about/)\n- [Mozilla SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/)\n- [DV型、OV型、EV型证书的主要区别](https://www.cnblogs.com/sslwork/p/6193256.html)\n- [Neilpang/acme.sh#Wiki#安装说明](https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md)\n- [Neilpang/acme.sh#Wiki#How to Install](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n- [Neilpang/acme.sh#Wiki#How to use DNS API](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"lets-encrypt-acme-sh","published":1,"updated":"2019-08-16T06:11:15.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojj100dn24do7re0rchr","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第四篇，定个小目标999，每周最少2篇。</p>\n<p>过去几年中，我们一直主张站点采用 HTTPS，以提升其安全性。去年的时候，我们还通过将更大的 HTTP 页面标记为‘不安全’以帮助用户。<br>不过从 2018 年 7 月开始，随着 Chrome 68 的发布，浏览器会将所有 HTTP 网站标记为‘不安全’。<br>引用自 <a href=\"https://support.google.com/chrome/a/answer/7679408\" target=\"_blank\" rel=\"noopener\">chrome 68 发布说明</a></p>\n</blockquote>\n<p>得益于Google等大厂的消灭HTTP运动和<a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 非盈利组织的努力，越来越多的站点开始迁移到HTTPS，下图是<a href=\"https://letsencrypt.org/stats/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt的统计数据</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550317966768-d4587466-a6d0-4868-b9ca-4e65bc45b101.png#align=left&amp;display=inline&amp;height=450&amp;name=image.png&amp;originHeight=450&amp;originWidth=940&amp;size=41971&amp;width=940\" alt=\"image.png\"><br><a id=\"more\"></a></p>\n<p><a name=\"d8c35fbf\"></a></p>\n<h2 id=\"什么是Let’s-Encrypt\"><a href=\"#什么是Let’s-Encrypt\" class=\"headerlink\" title=\"什么是Let’s Encrypt\"></a>什么是Let’s Encrypt</h2><p>部署 HTTPS 网站的时候需要证书，证书由 CA 机构签发，大部分传统 CA 机构签发证书是需要收费的，这不利于推动 HTTPS 协议的使用。</p>\n<p>Let’s Encrypt是一个国外的非盈利的CA证书机构，旨在以自动化流程消除手动创建和安装证书的复杂流程，并推广使万维网服务器的加密连接无所不在，为安全网站提供免费的SSL/TLS证书。</p>\n<p>由Linux基金会托管，许多国内外互联网大厂都对其进行赞助，目前主流浏览器均已信任Let’s Encrypt发放的证书。</p>\n<p>注意，Let’s Encrypt颁发的都是DV证书，不提供OV,EV证书。</p>\n<p>本文主要讲解 如何使用Let’s Encrypt颁发通配符证书。</p>\n<p><a name=\"cbaf77e0\"></a></p>\n<h2 id=\"通配符证书\"><a href=\"#通配符证书\" class=\"headerlink\" title=\"通配符证书\"></a>通配符证书</h2><p>通配符SSL证书旨在保护主域名以及旗下不限数量的子域，即用户可通过单个通配符SSL证书可保护任意数量的子域。如果用户拥有多个子域名平台，可通过通配符SSL证书保护这些子域名。</p>\n<p>但是目前Let’s Encrypt 只支持同级子域名通配符。例如 <code>*.demo.com</code> 只支持 <code>xx.demo.com</code> 这种的，而不支持 <code>xx.xx.demo.com</code> ，而要支持二级通配符，需要再次颁发二级通配符证书 类似 <code>*.demo.demo.com</code> ，注意，这种的二级通配符，要求，一级域名是固定的，意即，不支持 <code>*.*.demo.com</code> </p>\n<p><a name=\"1c74e63c\"></a></p>\n<h2 id=\"使用-acme-sh-简化证书颁发操作\"><a href=\"#使用-acme-sh-简化证书颁发操作\" class=\"headerlink\" title=\"使用 acme.sh 简化证书颁发操作\"></a>使用 acme.sh 简化证书颁发操作</h2><p>官方建议使用<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot</a> ，但是很长一段时期Certbot不支持通配符（现在已经支持），而且对于证书自动续期支持的也不好。并且操作时也挺麻烦。</p>\n<p><a name=\"0c48da8f\"></a></p>\n<h3 id=\"安装-acme-sh\"><a href=\"#安装-acme-sh\" class=\"headerlink\" title=\"安装 acme.sh\"></a>安装 acme.sh</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl https://get.acme.sh | sh</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ wget -O -  https://get.acme.sh | sh</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Neilpang/acme.sh.git</span><br><span class=\"line\">$ ./acme.sh/acme.sh --install</span><br></pre></td></tr></table></figure>\n<p><a name=\"4c752c1e\"></a></p>\n<h3 id=\"DNS-Api-颁发通配符证书\"><a href=\"#DNS-Api-颁发通配符证书\" class=\"headerlink\" title=\"DNS Api 颁发通配符证书\"></a>DNS Api 颁发通配符证书</h3><p>acme.sh 功能很强大，此处只介绍使用Dns Api 自动化颁发通配符证书. 目前支持包含阿里和DNSPod在内的60家dns服务商（参见 <a href=\"https://github.com/Neilpang/acme.sh#currently-acmesh-supports\" target=\"_blank\" rel=\"noopener\">Currently acme.sh supports</a>）</p>\n<p>如果你的DNS服务商不提供API或者acme.sh暂未支持，或者处于安全方面的考虑，不想将重要的域名的API权限暴露给 acme.sh，可以申请一个测试域名，然后在重要域名上设置CNAME（参见 <a href=\"https://github.com/Neilpang/acme.sh/wiki/DNS-alias-mode\" target=\"_blank\" rel=\"noopener\">DNS alias mode</a>）</p>\n<p>假设您的域名在DNSPod托管，登陆DNSPod后台，依次打开 用户中心-&gt;安全设置-&gt; API Token-&gt;查看-&gt;创建API Token-&gt; 输入任意token名称-&gt;确定-&gt; 保存ID和Token值（图中打码部分）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550463481824-01a645a7-5a95-4320-80ab-753ff7664bff.png#align=left&amp;display=inline&amp;height=558&amp;name=image.png&amp;originHeight=558&amp;originWidth=1241&amp;size=59891&amp;width=1241\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> DP_Id=<span class=\"string\">\"你的ID\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> DP_Key=<span class=\"string\">\"你的Token\"</span></span><br><span class=\"line\">$ acme.sh --issue --dns dns_dp -d example.com -d *.example.com</span><br><span class=\"line\"><span class=\"comment\"># 如果 使用了DNS别名，还需要增加 --challenge-alias 别名域名 参数</span></span><br><span class=\"line\"><span class=\"comment\"># 为了防止dns不生效，脚本会暂停2分钟，并倒计时(Sleep 120 seconds for the txt records to take effect),等待即可</span></span><br><span class=\"line\"><span class=\"comment\"># 如果成功会出现 Cert success. 字样</span></span><br><span class=\"line\"><span class=\"comment\"># 不建议直接用~/.acme.sh 下的证书，参考 https://github.com/Neilpang/acme.sh/wiki/说明#3-copy安装-证书</span></span><br><span class=\"line\"><span class=\"comment\"># 需要使用 --installcert 复制到指定目录</span></span><br><span class=\"line\">$ acme.sh --installcert  \\</span><br><span class=\"line\">\t\t\t\t-d  example.com -d *.example.com \\</span><br><span class=\"line\">        --key-file /etc/letsencrypt/live/example.com/privkey.pem \\</span><br><span class=\"line\">        --fullchain-file /etc/letsencrypt/live/example.com/fullchain.pem \\</span><br><span class=\"line\">        --reloadcmd  <span class=\"string\">\"service nginx reload\"</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"03e61821\"></a></p>\n<h3 id=\"优化HTTPS配置\"><a href=\"#优化HTTPS配置\" class=\"headerlink\" title=\"优化HTTPS配置\"></a>优化HTTPS配置</h3><p>本文以 <a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\" target=\"_blank\" rel=\"noopener\">Mozilla SSL Configuration Generator</a> 生成的nginx为例，同样也可以生成Apache和IIS</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">80</span> default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">1d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_cache</span> shared:SSL:<span class=\"number\">50m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_tickets</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></span><br><span class=\"line\">    <span class=\"comment\"># openssl dhparam -out /etc/letsencrypt/live/example.com/ 2048</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_dhparam</span> /etc/letsencrypt/live/example.com/dhparam.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># intermediate configuration. tweak to your needs.</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> <span class=\"string\">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Strict-Transport-Security max-age=<span class=\"number\">15768000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># OCSP Stapling ---</span></span><br><span class=\"line\">    <span class=\"comment\"># fetch OCSP records from URL in ssl_certificate and cache them</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling_verify</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></span><br><span class=\"line\">    <span class=\"comment\"># ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">resolver</span> &lt;IP DNS resolver&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"7154ff4a\"></a></p>\n<h3 id=\"检查HTTPS得分\"><a href=\"#检查HTTPS得分\" class=\"headerlink\" title=\"检查HTTPS得分\"></a>检查HTTPS得分</h3><p>访问 <a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\" rel=\"noopener\">https://www.ssllabs.com/ssltest/</a> 提交自己域名，进行评分</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.oschina.net/news/96200/chrome-will-stop-tag-https-site-secure\" target=\"_blank\" rel=\"noopener\">Chrome 将不再标记 HTTPS 页面为安全站点</a></li>\n<li><a href=\"https://letsencrypt.org/stats/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt Stats</a></li>\n<li><a href=\"https://letsencrypt.org/about/\" target=\"_blank\" rel=\"noopener\">About Let’s Encrypt</a></li>\n<li><a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\" target=\"_blank\" rel=\"noopener\">Mozilla SSL Configuration Generator</a></li>\n<li><a href=\"https://www.cnblogs.com/sslwork/p/6193256.html\" target=\"_blank\" rel=\"noopener\">DV型、OV型、EV型证书的主要区别</a></li>\n<li><a href=\"https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md\" target=\"_blank\" rel=\"noopener\">Neilpang/acme.sh#Wiki#安装说明</a></li>\n<li><a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\" target=\"_blank\" rel=\"noopener\">Neilpang/acme.sh#Wiki#How to Install</a></li>\n<li><a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\" target=\"_blank\" rel=\"noopener\">Neilpang/acme.sh#Wiki#How to use DNS API</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第四篇，定个小目标999，每周最少2篇。</p>\n<p>过去几年中，我们一直主张站点采用 HTTPS，以提升其安全性。去年的时候，我们还通过将更大的 HTTP 页面标记为‘不安全’以帮助用户。<br>不过从 2018 年 7 月开始，随着 Chrome 68 的发布，浏览器会将所有 HTTP 网站标记为‘不安全’。<br>引用自 <a href=\"https://support.google.com/chrome/a/answer/7679408\" target=\"_blank\" rel=\"noopener\">chrome 68 发布说明</a></p>\n</blockquote>\n<p>得益于Google等大厂的消灭HTTP运动和<a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 非盈利组织的努力，越来越多的站点开始迁移到HTTPS，下图是<a href=\"https://letsencrypt.org/stats/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt的统计数据</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550317966768-d4587466-a6d0-4868-b9ca-4e65bc45b101.png#align=left&amp;display=inline&amp;height=450&amp;name=image.png&amp;originHeight=450&amp;originWidth=940&amp;size=41971&amp;width=940\" alt=\"image.png\"><br>","more":"</p>\n<p><a name=\"d8c35fbf\"></a></p>\n<h2 id=\"什么是Let’s-Encrypt\"><a href=\"#什么是Let’s-Encrypt\" class=\"headerlink\" title=\"什么是Let’s Encrypt\"></a>什么是Let’s Encrypt</h2><p>部署 HTTPS 网站的时候需要证书，证书由 CA 机构签发，大部分传统 CA 机构签发证书是需要收费的，这不利于推动 HTTPS 协议的使用。</p>\n<p>Let’s Encrypt是一个国外的非盈利的CA证书机构，旨在以自动化流程消除手动创建和安装证书的复杂流程，并推广使万维网服务器的加密连接无所不在，为安全网站提供免费的SSL/TLS证书。</p>\n<p>由Linux基金会托管，许多国内外互联网大厂都对其进行赞助，目前主流浏览器均已信任Let’s Encrypt发放的证书。</p>\n<p>注意，Let’s Encrypt颁发的都是DV证书，不提供OV,EV证书。</p>\n<p>本文主要讲解 如何使用Let’s Encrypt颁发通配符证书。</p>\n<p><a name=\"cbaf77e0\"></a></p>\n<h2 id=\"通配符证书\"><a href=\"#通配符证书\" class=\"headerlink\" title=\"通配符证书\"></a>通配符证书</h2><p>通配符SSL证书旨在保护主域名以及旗下不限数量的子域，即用户可通过单个通配符SSL证书可保护任意数量的子域。如果用户拥有多个子域名平台，可通过通配符SSL证书保护这些子域名。</p>\n<p>但是目前Let’s Encrypt 只支持同级子域名通配符。例如 <code>*.demo.com</code> 只支持 <code>xx.demo.com</code> 这种的，而不支持 <code>xx.xx.demo.com</code> ，而要支持二级通配符，需要再次颁发二级通配符证书 类似 <code>*.demo.demo.com</code> ，注意，这种的二级通配符，要求，一级域名是固定的，意即，不支持 <code>*.*.demo.com</code> </p>\n<p><a name=\"1c74e63c\"></a></p>\n<h2 id=\"使用-acme-sh-简化证书颁发操作\"><a href=\"#使用-acme-sh-简化证书颁发操作\" class=\"headerlink\" title=\"使用 acme.sh 简化证书颁发操作\"></a>使用 acme.sh 简化证书颁发操作</h2><p>官方建议使用<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot</a> ，但是很长一段时期Certbot不支持通配符（现在已经支持），而且对于证书自动续期支持的也不好。并且操作时也挺麻烦。</p>\n<p><a name=\"0c48da8f\"></a></p>\n<h3 id=\"安装-acme-sh\"><a href=\"#安装-acme-sh\" class=\"headerlink\" title=\"安装 acme.sh\"></a>安装 acme.sh</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl https://get.acme.sh | sh</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ wget -O -  https://get.acme.sh | sh</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Neilpang/acme.sh.git</span><br><span class=\"line\">$ ./acme.sh/acme.sh --install</span><br></pre></td></tr></table></figure>\n<p><a name=\"4c752c1e\"></a></p>\n<h3 id=\"DNS-Api-颁发通配符证书\"><a href=\"#DNS-Api-颁发通配符证书\" class=\"headerlink\" title=\"DNS Api 颁发通配符证书\"></a>DNS Api 颁发通配符证书</h3><p>acme.sh 功能很强大，此处只介绍使用Dns Api 自动化颁发通配符证书. 目前支持包含阿里和DNSPod在内的60家dns服务商（参见 <a href=\"https://github.com/Neilpang/acme.sh#currently-acmesh-supports\" target=\"_blank\" rel=\"noopener\">Currently acme.sh supports</a>）</p>\n<p>如果你的DNS服务商不提供API或者acme.sh暂未支持，或者处于安全方面的考虑，不想将重要的域名的API权限暴露给 acme.sh，可以申请一个测试域名，然后在重要域名上设置CNAME（参见 <a href=\"https://github.com/Neilpang/acme.sh/wiki/DNS-alias-mode\" target=\"_blank\" rel=\"noopener\">DNS alias mode</a>）</p>\n<p>假设您的域名在DNSPod托管，登陆DNSPod后台，依次打开 用户中心-&gt;安全设置-&gt; API Token-&gt;查看-&gt;创建API Token-&gt; 输入任意token名称-&gt;确定-&gt; 保存ID和Token值（图中打码部分）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550463481824-01a645a7-5a95-4320-80ab-753ff7664bff.png#align=left&amp;display=inline&amp;height=558&amp;name=image.png&amp;originHeight=558&amp;originWidth=1241&amp;size=59891&amp;width=1241\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> DP_Id=<span class=\"string\">\"你的ID\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> DP_Key=<span class=\"string\">\"你的Token\"</span></span><br><span class=\"line\">$ acme.sh --issue --dns dns_dp -d example.com -d *.example.com</span><br><span class=\"line\"><span class=\"comment\"># 如果 使用了DNS别名，还需要增加 --challenge-alias 别名域名 参数</span></span><br><span class=\"line\"><span class=\"comment\"># 为了防止dns不生效，脚本会暂停2分钟，并倒计时(Sleep 120 seconds for the txt records to take effect),等待即可</span></span><br><span class=\"line\"><span class=\"comment\"># 如果成功会出现 Cert success. 字样</span></span><br><span class=\"line\"><span class=\"comment\"># 不建议直接用~/.acme.sh 下的证书，参考 https://github.com/Neilpang/acme.sh/wiki/说明#3-copy安装-证书</span></span><br><span class=\"line\"><span class=\"comment\"># 需要使用 --installcert 复制到指定目录</span></span><br><span class=\"line\">$ acme.sh --installcert  \\</span><br><span class=\"line\">\t\t\t\t-d  example.com -d *.example.com \\</span><br><span class=\"line\">        --key-file /etc/letsencrypt/live/example.com/privkey.pem \\</span><br><span class=\"line\">        --fullchain-file /etc/letsencrypt/live/example.com/fullchain.pem \\</span><br><span class=\"line\">        --reloadcmd  <span class=\"string\">\"service nginx reload\"</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"03e61821\"></a></p>\n<h3 id=\"优化HTTPS配置\"><a href=\"#优化HTTPS配置\" class=\"headerlink\" title=\"优化HTTPS配置\"></a>优化HTTPS配置</h3><p>本文以 <a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\" target=\"_blank\" rel=\"noopener\">Mozilla SSL Configuration Generator</a> 生成的nginx为例，同样也可以生成Apache和IIS</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">80</span> default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">1d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_cache</span> shared:SSL:<span class=\"number\">50m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_tickets</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></span><br><span class=\"line\">    <span class=\"comment\"># openssl dhparam -out /etc/letsencrypt/live/example.com/ 2048</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_dhparam</span> /etc/letsencrypt/live/example.com/dhparam.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># intermediate configuration. tweak to your needs.</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> <span class=\"string\">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Strict-Transport-Security max-age=<span class=\"number\">15768000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># OCSP Stapling ---</span></span><br><span class=\"line\">    <span class=\"comment\"># fetch OCSP records from URL in ssl_certificate and cache them</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling_verify</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></span><br><span class=\"line\">    <span class=\"comment\"># ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">resolver</span> &lt;IP DNS resolver&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"7154ff4a\"></a></p>\n<h3 id=\"检查HTTPS得分\"><a href=\"#检查HTTPS得分\" class=\"headerlink\" title=\"检查HTTPS得分\"></a>检查HTTPS得分</h3><p>访问 <a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\" rel=\"noopener\">https://www.ssllabs.com/ssltest/</a> 提交自己域名，进行评分</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.oschina.net/news/96200/chrome-will-stop-tag-https-site-secure\" target=\"_blank\" rel=\"noopener\">Chrome 将不再标记 HTTPS 页面为安全站点</a></li>\n<li><a href=\"https://letsencrypt.org/stats/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt Stats</a></li>\n<li><a href=\"https://letsencrypt.org/about/\" target=\"_blank\" rel=\"noopener\">About Let’s Encrypt</a></li>\n<li><a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\" target=\"_blank\" rel=\"noopener\">Mozilla SSL Configuration Generator</a></li>\n<li><a href=\"https://www.cnblogs.com/sslwork/p/6193256.html\" target=\"_blank\" rel=\"noopener\">DV型、OV型、EV型证书的主要区别</a></li>\n<li><a href=\"https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md\" target=\"_blank\" rel=\"noopener\">Neilpang/acme.sh#Wiki#安装说明</a></li>\n<li><a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\" target=\"_blank\" rel=\"noopener\">Neilpang/acme.sh#Wiki#How to Install</a></li>\n<li><a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\" target=\"_blank\" rel=\"noopener\">Neilpang/acme.sh#Wiki#How to use DNS API</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"033-史上最全-mysql迁移到clickhouse的5种办法","date":"2019-07-17T14:15:38.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第33篇，定个小目标999，每周最少2篇。\n\n\n数据迁移需要从mysql导入clickhouse, 总结方案如下，包括clickhouse自身支持的三种方式，第三方工具两种。\n\n<!-- more -->\n<a name=\"0nrjs\"></a>\n## create table engin mysql\n\n```sql\nCREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],\n    ...\n    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,\n    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2\n) ENGINE = MySQL('host:port', 'database', 'table', 'user', 'password'[, replace_query, 'on_duplicate_clause']);\n```\n\n> 官方文档: [https://clickhouse.yandex/docs/en/operations/table_engines/mysql/](https://clickhouse.yandex/docs/en/operations/table_engines/mysql/)\n\n注意，实际数据存储在远端mysql数据库中，可以理解成外表。<br />可以通过在mysql增删数据进行验证。\n\n<a name=\"CDYbo\"></a>\n## insert into select from\n\n```sql\n-- 先建表\nCREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n) ENGINE = engine\n-- 导入数据\nINSERT INTO [db.]table [(c1, c2, c3)] select 列或者* from mysql('host:port', 'db', 'table_name', 'user', 'password')\n```\n可以自定义列类型，列数，使用clickhouse函数对数据进行处理，比如 `select toDate(xx) from mysql(\"host:port\",\"db\",\"table_name\",\"user_name\",\"password\")` \n\n<a name=\"jwRVs\"></a>\n## create table as select from\n\n```sql\nCREATE TABLE [IF NOT EXISTS] [db.]table_name\nENGINE =Log\nAS \nSELECT *\nFROM mysql('host:port', 'db', 'article_clientuser_sum', 'user', 'password')\n```\n> 网友文章: [http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/](http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/)\n\n不支持自定义列，参考资料里的博主写的 `ENGIN=MergeTree` 测试失败。<br />可以理解成 create table 和 insert into select 的组合\n\n<a name=\"rbmGL\"></a>\n## Altinity/clickhouse-mysql-data-reader\nAltinity公司开源的一个python工具，用来从mysql迁移数据到clickhouse(支持binlog增量更新和全量导入)，但是官方readme和代码脱节，根据quick start跑不通。\n```bash\n## 创建表\nclickhouse-mysql \\\n    --src-host=127.0.0.1 \\\n    --src-user=reader \\\n    --src-password=Qwerty1# \\\n    --table-templates-with-create-database \\\n    --src-table=airline.ontime > create_clickhouse_table_template.sql\n## 修改脚本\nvim create_clickhouse_table_template.sql\n\n## 导入建表\nclickhouse-client -mn < create_clickhouse_table_template.sql\n\n## 数据导入\nclickhouse-mysql \\\n     --src-host=127.0.0.1 \\\n     --src-user=reader \\\n     --src-password=Qwerty1# \\\n     --table-migrate \\\n     --dst-host=127.0.0.1 \\\n     --dst-table=logunified \\\n     --csvpool\n```\n> 官方文档: [https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1---migrate-existing-data](https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1---migrate-existing-data)\n\n\n注意，上述三种都是从mysql导入clickhouse，如果数据量大，对于mysql压力还是挺大的。下面介绍两种离线方式(streamsets支持实时，也支持离线)<br />csv\n\n```bash\n## 忽略建表\nclickhouse-client \\\n  -h host \\\n  --query=\"INSERT INTO [db].table FORMAT CSV\" < test.csv\n```\n\n但是如果源数据质量不高，往往会有问题，比如包含特殊字符(分隔符，转义符)，或者换行。被坑的很惨。\n\n- 自定义分隔符, `--format_csv_delimiter=\"|\"` \n- 遇到错误跳过而不中止， `--input_format_allow_errors_num=10` 最多允许10行错误, `--input_format_allow_errors_ratio=0.1` 允许10%的错误\n- csv 跳过空值(null) ，报 `Code: 27. DB::Exception: Cannot parse input: expected , before: xxxx: (at row 69) ERROR: garbage after Nullable(Date): \"8,002<LINE FEED>0205\"`  `sed ' :a;s/,,/,\\\\N,/g;ta' |clickhouse-client -h host --query \"INSERT INTO [db].table FORMAT CSV\"` 将 `,,` 替换成 `,\\N,` \n\n`python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,` \n\nclean_csv.py参考我另外一篇 [032-csv文件容错处理](https://anjia0532.github.io/2019/07/16/clean-csv/) \n\n<a name=\"JB7MZ\"></a>\n## streamsets\nstreamsets支持从mysql或者读csv全量导入，也支持订阅binlog增量插入，参考我另外一篇 [025-大数据ETL工具之StreamSets安装及订阅mysql binlog](https://anjia0532.github.io/2019/06/10/cdh-streamsets/)。<br />本文只展示从mysql全量导入clickhouse<br />本文假设你已经搭建起streamsets服务<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563437517163-af02c2db-f03b-4884-8f16-4850918ddc0d.png#align=left&display=inline&height=850&name=image.png&originHeight=850&originWidth=1911&size=97265&status=done&width=1911)<br />启用并重启服务<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563437777046-970dff85-960f-48f3-a3e9-0a10002f34b4.png#align=left&display=inline&height=860&name=image.png&originHeight=860&originWidth=1843&size=89828&status=done&width=1843)<br />上传mysql和clickhouse的jdbc jar和依赖包<br />便捷方式，创建pom.xml，使用maven统一下载\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.anjia</groupId>\n  <artifactId>demo</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>demo</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n        <groupId>ru.yandex.clickhouse</groupId>\n        <artifactId>clickhouse-jdbc</artifactId>\n        <version>0.1.54</version>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.47</version>\n  </dependency>\n  </dependencies>\n</project>\n```\n如果本地装有maven，执行如下命令<br />`mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile` <br />所有需要的jar会下载并复制到lib目录下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563438052063-1f073ee5-1c50-4842-8f9e-5f9974867895.png#align=left&display=inline&height=298&name=image.png&originHeight=298&originWidth=391&size=34034&status=done&width=391)<br />然后拷贝到 streamsets `/opt/streamsets-datacollector-3.9.1/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/` 目录下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563442430751-7889c386-014a-417e-bc0c-069414f08b89.png#align=left&display=inline&height=740&name=image.png&originHeight=740&originWidth=751&size=59852&status=done&width=751)<br />重启streamsets服务<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563443529858-b23e198f-a097-4359-ad0b-85768a5c68ec.png#align=left&display=inline&height=320&name=image.png&originHeight=320&originWidth=194&size=13854&status=done&width=194)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563443568159-590b99dc-af61-45d2-8724-b33d08ba7df2.png#align=left&display=inline&height=235&name=image.png&originHeight=235&originWidth=189&size=9943&status=done&width=189)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444143877-060e4c52-53af-42f3-99e2-38cfc2add983.png#align=left&display=inline&height=726&name=image.png&originHeight=726&originWidth=1253&size=83069&status=done&width=1253)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444315768-4295a91d-b610-4df8-8796-196358662c68.png#align=left&display=inline&height=776&name=image.png&originHeight=776&originWidth=1378&size=80345&status=done&width=1378)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444358478-d8bd7c56-c0c0-49a6-903e-1d284d812e5d.png#align=left&display=inline&height=773&name=image.png&originHeight=773&originWidth=1344&size=81650&status=done&width=1344)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444395375-690becdc-1f48-4cfb-b6bd-13d03554cbc1.png#align=left&display=inline&height=785&name=image.png&originHeight=785&originWidth=1629&size=69971&status=done&width=1629)\n<a name=\"ri8A5\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse)\n- [我的掘金](https://juejin.im/post/5d30454ce51d4510bf1d6737)\n- [Building data stream pipelines with CrateDB and StreamSets data collector](https://crate.io/docs/crate/guide/en/latest/tools/streamsets.html)\n- [JDBC Query Consumer](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html)\n- [Data Flow Pipeline Using StreamSets](https://dzone.com/articles/data-flow-pipeline-using-streamsets)\n\n","source":"_posts/mysql-to-clickhouse.md","raw":"\n---\n\ntitle: 033-史上最全-mysql迁移到clickhouse的5种办法\n\ndate: 2019-07-17 22:15:38 +0800\n\ntags: [数据分析,数据处理,mysql,数据库,clickhouse]\n\ncategories: 大数据\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第33篇，定个小目标999，每周最少2篇。\n\n\n数据迁移需要从mysql导入clickhouse, 总结方案如下，包括clickhouse自身支持的三种方式，第三方工具两种。\n\n<!-- more -->\n<a name=\"0nrjs\"></a>\n## create table engin mysql\n\n```sql\nCREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],\n    ...\n    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,\n    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2\n) ENGINE = MySQL('host:port', 'database', 'table', 'user', 'password'[, replace_query, 'on_duplicate_clause']);\n```\n\n> 官方文档: [https://clickhouse.yandex/docs/en/operations/table_engines/mysql/](https://clickhouse.yandex/docs/en/operations/table_engines/mysql/)\n\n注意，实际数据存储在远端mysql数据库中，可以理解成外表。<br />可以通过在mysql增删数据进行验证。\n\n<a name=\"CDYbo\"></a>\n## insert into select from\n\n```sql\n-- 先建表\nCREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n) ENGINE = engine\n-- 导入数据\nINSERT INTO [db.]table [(c1, c2, c3)] select 列或者* from mysql('host:port', 'db', 'table_name', 'user', 'password')\n```\n可以自定义列类型，列数，使用clickhouse函数对数据进行处理，比如 `select toDate(xx) from mysql(\"host:port\",\"db\",\"table_name\",\"user_name\",\"password\")` \n\n<a name=\"jwRVs\"></a>\n## create table as select from\n\n```sql\nCREATE TABLE [IF NOT EXISTS] [db.]table_name\nENGINE =Log\nAS \nSELECT *\nFROM mysql('host:port', 'db', 'article_clientuser_sum', 'user', 'password')\n```\n> 网友文章: [http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/](http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/)\n\n不支持自定义列，参考资料里的博主写的 `ENGIN=MergeTree` 测试失败。<br />可以理解成 create table 和 insert into select 的组合\n\n<a name=\"rbmGL\"></a>\n## Altinity/clickhouse-mysql-data-reader\nAltinity公司开源的一个python工具，用来从mysql迁移数据到clickhouse(支持binlog增量更新和全量导入)，但是官方readme和代码脱节，根据quick start跑不通。\n```bash\n## 创建表\nclickhouse-mysql \\\n    --src-host=127.0.0.1 \\\n    --src-user=reader \\\n    --src-password=Qwerty1# \\\n    --table-templates-with-create-database \\\n    --src-table=airline.ontime > create_clickhouse_table_template.sql\n## 修改脚本\nvim create_clickhouse_table_template.sql\n\n## 导入建表\nclickhouse-client -mn < create_clickhouse_table_template.sql\n\n## 数据导入\nclickhouse-mysql \\\n     --src-host=127.0.0.1 \\\n     --src-user=reader \\\n     --src-password=Qwerty1# \\\n     --table-migrate \\\n     --dst-host=127.0.0.1 \\\n     --dst-table=logunified \\\n     --csvpool\n```\n> 官方文档: [https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1---migrate-existing-data](https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1---migrate-existing-data)\n\n\n注意，上述三种都是从mysql导入clickhouse，如果数据量大，对于mysql压力还是挺大的。下面介绍两种离线方式(streamsets支持实时，也支持离线)<br />csv\n\n```bash\n## 忽略建表\nclickhouse-client \\\n  -h host \\\n  --query=\"INSERT INTO [db].table FORMAT CSV\" < test.csv\n```\n\n但是如果源数据质量不高，往往会有问题，比如包含特殊字符(分隔符，转义符)，或者换行。被坑的很惨。\n\n- 自定义分隔符, `--format_csv_delimiter=\"|\"` \n- 遇到错误跳过而不中止， `--input_format_allow_errors_num=10` 最多允许10行错误, `--input_format_allow_errors_ratio=0.1` 允许10%的错误\n- csv 跳过空值(null) ，报 `Code: 27. DB::Exception: Cannot parse input: expected , before: xxxx: (at row 69) ERROR: garbage after Nullable(Date): \"8,002<LINE FEED>0205\"`  `sed ' :a;s/,,/,\\\\N,/g;ta' |clickhouse-client -h host --query \"INSERT INTO [db].table FORMAT CSV\"` 将 `,,` 替换成 `,\\N,` \n\n`python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,` \n\nclean_csv.py参考我另外一篇 [032-csv文件容错处理](https://anjia0532.github.io/2019/07/16/clean-csv/) \n\n<a name=\"JB7MZ\"></a>\n## streamsets\nstreamsets支持从mysql或者读csv全量导入，也支持订阅binlog增量插入，参考我另外一篇 [025-大数据ETL工具之StreamSets安装及订阅mysql binlog](https://anjia0532.github.io/2019/06/10/cdh-streamsets/)。<br />本文只展示从mysql全量导入clickhouse<br />本文假设你已经搭建起streamsets服务<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563437517163-af02c2db-f03b-4884-8f16-4850918ddc0d.png#align=left&display=inline&height=850&name=image.png&originHeight=850&originWidth=1911&size=97265&status=done&width=1911)<br />启用并重启服务<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563437777046-970dff85-960f-48f3-a3e9-0a10002f34b4.png#align=left&display=inline&height=860&name=image.png&originHeight=860&originWidth=1843&size=89828&status=done&width=1843)<br />上传mysql和clickhouse的jdbc jar和依赖包<br />便捷方式，创建pom.xml，使用maven统一下载\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.anjia</groupId>\n  <artifactId>demo</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>demo</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n        <groupId>ru.yandex.clickhouse</groupId>\n        <artifactId>clickhouse-jdbc</artifactId>\n        <version>0.1.54</version>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.47</version>\n  </dependency>\n  </dependencies>\n</project>\n```\n如果本地装有maven，执行如下命令<br />`mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile` <br />所有需要的jar会下载并复制到lib目录下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563438052063-1f073ee5-1c50-4842-8f9e-5f9974867895.png#align=left&display=inline&height=298&name=image.png&originHeight=298&originWidth=391&size=34034&status=done&width=391)<br />然后拷贝到 streamsets `/opt/streamsets-datacollector-3.9.1/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/` 目录下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563442430751-7889c386-014a-417e-bc0c-069414f08b89.png#align=left&display=inline&height=740&name=image.png&originHeight=740&originWidth=751&size=59852&status=done&width=751)<br />重启streamsets服务<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563443529858-b23e198f-a097-4359-ad0b-85768a5c68ec.png#align=left&display=inline&height=320&name=image.png&originHeight=320&originWidth=194&size=13854&status=done&width=194)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563443568159-590b99dc-af61-45d2-8724-b33d08ba7df2.png#align=left&display=inline&height=235&name=image.png&originHeight=235&originWidth=189&size=9943&status=done&width=189)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444143877-060e4c52-53af-42f3-99e2-38cfc2add983.png#align=left&display=inline&height=726&name=image.png&originHeight=726&originWidth=1253&size=83069&status=done&width=1253)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444315768-4295a91d-b610-4df8-8796-196358662c68.png#align=left&display=inline&height=776&name=image.png&originHeight=776&originWidth=1378&size=80345&status=done&width=1378)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444358478-d8bd7c56-c0c0-49a6-903e-1d284d812e5d.png#align=left&display=inline&height=773&name=image.png&originHeight=773&originWidth=1344&size=81650&status=done&width=1344)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1563444395375-690becdc-1f48-4cfb-b6bd-13d03554cbc1.png#align=left&display=inline&height=785&name=image.png&originHeight=785&originWidth=1629&size=69971&status=done&width=1629)\n<a name=\"ri8A5\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse)\n- [我的掘金](https://juejin.im/post/5d30454ce51d4510bf1d6737)\n- [Building data stream pipelines with CrateDB and StreamSets data collector](https://crate.io/docs/crate/guide/en/latest/tools/streamsets.html)\n- [JDBC Query Consumer](https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html)\n- [Data Flow Pipeline Using StreamSets](https://dzone.com/articles/data-flow-pipeline-using-streamsets)\n\n","slug":"mysql-to-clickhouse","published":1,"updated":"2019-08-16T06:11:14.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojj300dq24doyxr85lqj","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第33篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>数据迁移需要从mysql导入clickhouse, 总结方案如下，包括clickhouse自身支持的三种方式，第三方工具两种。</p>\n<a id=\"more\"></a>\n<p><a name=\"0nrjs\"></a></p>\n<h2 id=\"create-table-engin-mysql\"><a href=\"#create-table-engin-mysql\" class=\"headerlink\" title=\"create table engin mysql\"></a>create table engin mysql</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name [<span class=\"keyword\">ON</span> CLUSTER cluster]</span><br><span class=\"line\">(</span><br><span class=\"line\">    name1 [type1] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr1] [TTL expr1],</span><br><span class=\"line\">    name2 [type2] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr2] [TTL expr2],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name1 expr1 <span class=\"keyword\">TYPE</span> type1(...) GRANULARITY value1,</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name2 expr2 <span class=\"keyword\">TYPE</span> type2(...) GRANULARITY value2</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = MySQL(<span class=\"string\">'host:port'</span>, <span class=\"string\">'database'</span>, <span class=\"string\">'table'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>[, replace_query, <span class=\"string\">'on_duplicate_clause'</span>]);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>官方文档: <a href=\"https://clickhouse.yandex/docs/en/operations/table_engines/mysql/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/en/operations/table_engines/mysql/</a></p>\n</blockquote>\n<p>注意，实际数据存储在远端mysql数据库中，可以理解成外表。<br>可以通过在mysql增删数据进行验证。</p>\n<p><a name=\"CDYbo\"></a></p>\n<h2 id=\"insert-into-select-from\"><a href=\"#insert-into-select-from\" class=\"headerlink\" title=\"insert into select from\"></a>insert into select from</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 先建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name [<span class=\"keyword\">ON</span> CLUSTER cluster]</span><br><span class=\"line\">(</span><br><span class=\"line\">    name1 [type1] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr1],</span><br><span class=\"line\">    name2 [type2] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr2],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">engine</span></span><br><span class=\"line\"><span class=\"comment\">-- 导入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> [db.]<span class=\"keyword\">table</span> [(c1, c2, c3)] <span class=\"keyword\">select</span> 列或者* <span class=\"keyword\">from</span> mysql(<span class=\"string\">'host:port'</span>, <span class=\"string\">'db'</span>, <span class=\"string\">'table_name'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n<p>可以自定义列类型，列数，使用clickhouse函数对数据进行处理，比如 <code>select toDate(xx) from mysql(&quot;host:port&quot;,&quot;db&quot;,&quot;table_name&quot;,&quot;user_name&quot;,&quot;password&quot;)</code> </p>\n<p><a name=\"jwRVs\"></a></p>\n<h2 id=\"create-table-as-select-from\"><a href=\"#create-table-as-select-from\" class=\"headerlink\" title=\"create table as select from\"></a>create table as select from</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> =<span class=\"keyword\">Log</span></span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mysql(<span class=\"string\">'host:port'</span>, <span class=\"string\">'db'</span>, <span class=\"string\">'article_clientuser_sum'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>网友文章: <a href=\"http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/\" target=\"_blank\" rel=\"noopener\">http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/</a></p>\n</blockquote>\n<p>不支持自定义列，参考资料里的博主写的 <code>ENGIN=MergeTree</code> 测试失败。<br>可以理解成 create table 和 insert into select 的组合</p>\n<p><a name=\"rbmGL\"></a></p>\n<h2 id=\"Altinity-clickhouse-mysql-data-reader\"><a href=\"#Altinity-clickhouse-mysql-data-reader\" class=\"headerlink\" title=\"Altinity/clickhouse-mysql-data-reader\"></a>Altinity/clickhouse-mysql-data-reader</h2><p>Altinity公司开源的一个python工具，用来从mysql迁移数据到clickhouse(支持binlog增量更新和全量导入)，但是官方readme和代码脱节，根据quick start跑不通。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建表</span></span><br><span class=\"line\">clickhouse-mysql \\</span><br><span class=\"line\">    --src-host=127.0.0.1 \\</span><br><span class=\"line\">    --src-user=reader \\</span><br><span class=\"line\">    --src-password=Qwerty1<span class=\"comment\"># \\</span></span><br><span class=\"line\">    --table-templates-with-create-database \\</span><br><span class=\"line\">    --src-table=airline.ontime &gt; create_clickhouse_table_template.sql</span><br><span class=\"line\"><span class=\"comment\">## 修改脚本</span></span><br><span class=\"line\">vim create_clickhouse_table_template.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 导入建表</span></span><br><span class=\"line\">clickhouse-client -mn &lt; create_clickhouse_table_template.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 数据导入</span></span><br><span class=\"line\">clickhouse-mysql \\</span><br><span class=\"line\">     --src-host=127.0.0.1 \\</span><br><span class=\"line\">     --src-user=reader \\</span><br><span class=\"line\">     --src-password=Qwerty1<span class=\"comment\"># \\</span></span><br><span class=\"line\">     --table-migrate \\</span><br><span class=\"line\">     --dst-host=127.0.0.1 \\</span><br><span class=\"line\">     --dst-table=logunified \\</span><br><span class=\"line\">     --csvpool</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>官方文档: <a href=\"https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1---migrate-existing-data\" target=\"_blank\" rel=\"noopener\">https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1—migrate-existing-data</a></p>\n</blockquote>\n<p>注意，上述三种都是从mysql导入clickhouse，如果数据量大，对于mysql压力还是挺大的。下面介绍两种离线方式(streamsets支持实时，也支持离线)<br>csv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 忽略建表</span></span><br><span class=\"line\">clickhouse-client \\</span><br><span class=\"line\">  -h host \\</span><br><span class=\"line\">  --query=<span class=\"string\">\"INSERT INTO [db].table FORMAT CSV\"</span> &lt; test.csv</span><br></pre></td></tr></table></figure>\n<p>但是如果源数据质量不高，往往会有问题，比如包含特殊字符(分隔符，转义符)，或者换行。被坑的很惨。</p>\n<ul>\n<li>自定义分隔符, <code>--format_csv_delimiter=&quot;|&quot;</code> </li>\n<li>遇到错误跳过而不中止， <code>--input_format_allow_errors_num=10</code> 最多允许10行错误, <code>--input_format_allow_errors_ratio=0.1</code> 允许10%的错误</li>\n<li>csv 跳过空值(null) ，报 <code>Code: 27. DB::Exception: Cannot parse input: expected , before: xxxx: (at row 69) ERROR: garbage after Nullable(Date): &quot;8,002&lt;LINE FEED&gt;0205&quot;</code>  <code>sed &#39; :a;s/,,/,\\\\N,/g;ta&#39; |clickhouse-client -h host --query &quot;INSERT INTO [db].table FORMAT CSV&quot;</code> 将 <code>,,</code> 替换成 <code>,\\N,</code> </li>\n</ul>\n<p><code>python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,</code> </p>\n<p>clean_csv.py参考我另外一篇 <a href=\"https://anjia0532.github.io/2019/07/16/clean-csv/\">032-csv文件容错处理</a> </p>\n<p><a name=\"JB7MZ\"></a></p>\n<h2 id=\"streamsets\"><a href=\"#streamsets\" class=\"headerlink\" title=\"streamsets\"></a>streamsets</h2><p>streamsets支持从mysql或者读csv全量导入，也支持订阅binlog增量插入，参考我另外一篇 <a href=\"https://anjia0532.github.io/2019/06/10/cdh-streamsets/\">025-大数据ETL工具之StreamSets安装及订阅mysql binlog</a>。<br>本文只展示从mysql全量导入clickhouse<br>本文假设你已经搭建起streamsets服务<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563437517163-af02c2db-f03b-4884-8f16-4850918ddc0d.png#align=left&amp;display=inline&amp;height=850&amp;name=image.png&amp;originHeight=850&amp;originWidth=1911&amp;size=97265&amp;status=done&amp;width=1911\" alt=\"image.png\"><br>启用并重启服务<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563437777046-970dff85-960f-48f3-a3e9-0a10002f34b4.png#align=left&amp;display=inline&amp;height=860&amp;name=image.png&amp;originHeight=860&amp;originWidth=1843&amp;size=89828&amp;status=done&amp;width=1843\" alt=\"image.png\"><br>上传mysql和clickhouse的jdbc jar和依赖包<br>便捷方式，创建pom.xml，使用maven统一下载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.anjia<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ru.yandex.clickhouse<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>clickhouse-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.54<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果本地装有maven，执行如下命令<br><code>mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile</code> <br>所有需要的jar会下载并复制到lib目录下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563438052063-1f073ee5-1c50-4842-8f9e-5f9974867895.png#align=left&amp;display=inline&amp;height=298&amp;name=image.png&amp;originHeight=298&amp;originWidth=391&amp;size=34034&amp;status=done&amp;width=391\" alt=\"image.png\"><br>然后拷贝到 streamsets <code>/opt/streamsets-datacollector-3.9.1/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/</code> 目录下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563442430751-7889c386-014a-417e-bc0c-069414f08b89.png#align=left&amp;display=inline&amp;height=740&amp;name=image.png&amp;originHeight=740&amp;originWidth=751&amp;size=59852&amp;status=done&amp;width=751\" alt=\"image.png\"><br>重启streamsets服务<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563443529858-b23e198f-a097-4359-ad0b-85768a5c68ec.png#align=left&amp;display=inline&amp;height=320&amp;name=image.png&amp;originHeight=320&amp;originWidth=194&amp;size=13854&amp;status=done&amp;width=194\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563443568159-590b99dc-af61-45d2-8724-b33d08ba7df2.png#align=left&amp;display=inline&amp;height=235&amp;name=image.png&amp;originHeight=235&amp;originWidth=189&amp;size=9943&amp;status=done&amp;width=189\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444143877-060e4c52-53af-42f3-99e2-38cfc2add983.png#align=left&amp;display=inline&amp;height=726&amp;name=image.png&amp;originHeight=726&amp;originWidth=1253&amp;size=83069&amp;status=done&amp;width=1253\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444315768-4295a91d-b610-4df8-8796-196358662c68.png#align=left&amp;display=inline&amp;height=776&amp;name=image.png&amp;originHeight=776&amp;originWidth=1378&amp;size=80345&amp;status=done&amp;width=1378\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444358478-d8bd7c56-c0c0-49a6-903e-1d284d812e5d.png#align=left&amp;display=inline&amp;height=773&amp;name=image.png&amp;originHeight=773&amp;originWidth=1344&amp;size=81650&amp;status=done&amp;width=1344\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444395375-690becdc-1f48-4cfb-b6bd-13d03554cbc1.png#align=left&amp;display=inline&amp;height=785&amp;name=image.png&amp;originHeight=785&amp;originWidth=1629&amp;size=69971&amp;status=done&amp;width=1629\" alt=\"image.png\"><br><a name=\"ri8A5\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d30454ce51d4510bf1d6737\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://crate.io/docs/crate/guide/en/latest/tools/streamsets.html\" target=\"_blank\" rel=\"noopener\">Building data stream pipelines with CrateDB and StreamSets data collector</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html\" target=\"_blank\" rel=\"noopener\">JDBC Query Consumer</a></li>\n<li><a href=\"https://dzone.com/articles/data-flow-pipeline-using-streamsets\" target=\"_blank\" rel=\"noopener\">Data Flow Pipeline Using StreamSets</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第33篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>数据迁移需要从mysql导入clickhouse, 总结方案如下，包括clickhouse自身支持的三种方式，第三方工具两种。</p>","more":"<p><a name=\"0nrjs\"></a></p>\n<h2 id=\"create-table-engin-mysql\"><a href=\"#create-table-engin-mysql\" class=\"headerlink\" title=\"create table engin mysql\"></a>create table engin mysql</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name [<span class=\"keyword\">ON</span> CLUSTER cluster]</span><br><span class=\"line\">(</span><br><span class=\"line\">    name1 [type1] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr1] [TTL expr1],</span><br><span class=\"line\">    name2 [type2] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr2] [TTL expr2],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name1 expr1 <span class=\"keyword\">TYPE</span> type1(...) GRANULARITY value1,</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name2 expr2 <span class=\"keyword\">TYPE</span> type2(...) GRANULARITY value2</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = MySQL(<span class=\"string\">'host:port'</span>, <span class=\"string\">'database'</span>, <span class=\"string\">'table'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>[, replace_query, <span class=\"string\">'on_duplicate_clause'</span>]);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>官方文档: <a href=\"https://clickhouse.yandex/docs/en/operations/table_engines/mysql/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/en/operations/table_engines/mysql/</a></p>\n</blockquote>\n<p>注意，实际数据存储在远端mysql数据库中，可以理解成外表。<br>可以通过在mysql增删数据进行验证。</p>\n<p><a name=\"CDYbo\"></a></p>\n<h2 id=\"insert-into-select-from\"><a href=\"#insert-into-select-from\" class=\"headerlink\" title=\"insert into select from\"></a>insert into select from</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 先建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name [<span class=\"keyword\">ON</span> CLUSTER cluster]</span><br><span class=\"line\">(</span><br><span class=\"line\">    name1 [type1] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr1],</span><br><span class=\"line\">    name2 [type2] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr2],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">engine</span></span><br><span class=\"line\"><span class=\"comment\">-- 导入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> [db.]<span class=\"keyword\">table</span> [(c1, c2, c3)] <span class=\"keyword\">select</span> 列或者* <span class=\"keyword\">from</span> mysql(<span class=\"string\">'host:port'</span>, <span class=\"string\">'db'</span>, <span class=\"string\">'table_name'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n<p>可以自定义列类型，列数，使用clickhouse函数对数据进行处理，比如 <code>select toDate(xx) from mysql(&quot;host:port&quot;,&quot;db&quot;,&quot;table_name&quot;,&quot;user_name&quot;,&quot;password&quot;)</code> </p>\n<p><a name=\"jwRVs\"></a></p>\n<h2 id=\"create-table-as-select-from\"><a href=\"#create-table-as-select-from\" class=\"headerlink\" title=\"create table as select from\"></a>create table as select from</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> =<span class=\"keyword\">Log</span></span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mysql(<span class=\"string\">'host:port'</span>, <span class=\"string\">'db'</span>, <span class=\"string\">'article_clientuser_sum'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>网友文章: <a href=\"http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/\" target=\"_blank\" rel=\"noopener\">http://jackpgao.github.io/2018/02/04/ClickHouse-Use-MySQL-Data/</a></p>\n</blockquote>\n<p>不支持自定义列，参考资料里的博主写的 <code>ENGIN=MergeTree</code> 测试失败。<br>可以理解成 create table 和 insert into select 的组合</p>\n<p><a name=\"rbmGL\"></a></p>\n<h2 id=\"Altinity-clickhouse-mysql-data-reader\"><a href=\"#Altinity-clickhouse-mysql-data-reader\" class=\"headerlink\" title=\"Altinity/clickhouse-mysql-data-reader\"></a>Altinity/clickhouse-mysql-data-reader</h2><p>Altinity公司开源的一个python工具，用来从mysql迁移数据到clickhouse(支持binlog增量更新和全量导入)，但是官方readme和代码脱节，根据quick start跑不通。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建表</span></span><br><span class=\"line\">clickhouse-mysql \\</span><br><span class=\"line\">    --src-host=127.0.0.1 \\</span><br><span class=\"line\">    --src-user=reader \\</span><br><span class=\"line\">    --src-password=Qwerty1<span class=\"comment\"># \\</span></span><br><span class=\"line\">    --table-templates-with-create-database \\</span><br><span class=\"line\">    --src-table=airline.ontime &gt; create_clickhouse_table_template.sql</span><br><span class=\"line\"><span class=\"comment\">## 修改脚本</span></span><br><span class=\"line\">vim create_clickhouse_table_template.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 导入建表</span></span><br><span class=\"line\">clickhouse-client -mn &lt; create_clickhouse_table_template.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 数据导入</span></span><br><span class=\"line\">clickhouse-mysql \\</span><br><span class=\"line\">     --src-host=127.0.0.1 \\</span><br><span class=\"line\">     --src-user=reader \\</span><br><span class=\"line\">     --src-password=Qwerty1<span class=\"comment\"># \\</span></span><br><span class=\"line\">     --table-migrate \\</span><br><span class=\"line\">     --dst-host=127.0.0.1 \\</span><br><span class=\"line\">     --dst-table=logunified \\</span><br><span class=\"line\">     --csvpool</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>官方文档: <a href=\"https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1---migrate-existing-data\" target=\"_blank\" rel=\"noopener\">https://github.com/Altinity/clickhouse-mysql-data-reader#mysql-migration-case-1—migrate-existing-data</a></p>\n</blockquote>\n<p>注意，上述三种都是从mysql导入clickhouse，如果数据量大，对于mysql压力还是挺大的。下面介绍两种离线方式(streamsets支持实时，也支持离线)<br>csv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 忽略建表</span></span><br><span class=\"line\">clickhouse-client \\</span><br><span class=\"line\">  -h host \\</span><br><span class=\"line\">  --query=<span class=\"string\">\"INSERT INTO [db].table FORMAT CSV\"</span> &lt; test.csv</span><br></pre></td></tr></table></figure>\n<p>但是如果源数据质量不高，往往会有问题，比如包含特殊字符(分隔符，转义符)，或者换行。被坑的很惨。</p>\n<ul>\n<li>自定义分隔符, <code>--format_csv_delimiter=&quot;|&quot;</code> </li>\n<li>遇到错误跳过而不中止， <code>--input_format_allow_errors_num=10</code> 最多允许10行错误, <code>--input_format_allow_errors_ratio=0.1</code> 允许10%的错误</li>\n<li>csv 跳过空值(null) ，报 <code>Code: 27. DB::Exception: Cannot parse input: expected , before: xxxx: (at row 69) ERROR: garbage after Nullable(Date): &quot;8,002&lt;LINE FEED&gt;0205&quot;</code>  <code>sed &#39; :a;s/,,/,\\\\N,/g;ta&#39; |clickhouse-client -h host --query &quot;INSERT INTO [db].table FORMAT CSV&quot;</code> 将 <code>,,</code> 替换成 <code>,\\N,</code> </li>\n</ul>\n<p><code>python clean_csv.py --src=src.csv --dest=dest.csv --chunksize=50000 --cols --encoding=utf-8 --delimiter=,</code> </p>\n<p>clean_csv.py参考我另外一篇 <a href=\"https://anjia0532.github.io/2019/07/16/clean-csv/\">032-csv文件容错处理</a> </p>\n<p><a name=\"JB7MZ\"></a></p>\n<h2 id=\"streamsets\"><a href=\"#streamsets\" class=\"headerlink\" title=\"streamsets\"></a>streamsets</h2><p>streamsets支持从mysql或者读csv全量导入，也支持订阅binlog增量插入，参考我另外一篇 <a href=\"https://anjia0532.github.io/2019/06/10/cdh-streamsets/\">025-大数据ETL工具之StreamSets安装及订阅mysql binlog</a>。<br>本文只展示从mysql全量导入clickhouse<br>本文假设你已经搭建起streamsets服务<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563437517163-af02c2db-f03b-4884-8f16-4850918ddc0d.png#align=left&amp;display=inline&amp;height=850&amp;name=image.png&amp;originHeight=850&amp;originWidth=1911&amp;size=97265&amp;status=done&amp;width=1911\" alt=\"image.png\"><br>启用并重启服务<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563437777046-970dff85-960f-48f3-a3e9-0a10002f34b4.png#align=left&amp;display=inline&amp;height=860&amp;name=image.png&amp;originHeight=860&amp;originWidth=1843&amp;size=89828&amp;status=done&amp;width=1843\" alt=\"image.png\"><br>上传mysql和clickhouse的jdbc jar和依赖包<br>便捷方式，创建pom.xml，使用maven统一下载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.anjia<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ru.yandex.clickhouse<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>clickhouse-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.54<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果本地装有maven，执行如下命令<br><code>mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile</code> <br>所有需要的jar会下载并复制到lib目录下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563438052063-1f073ee5-1c50-4842-8f9e-5f9974867895.png#align=left&amp;display=inline&amp;height=298&amp;name=image.png&amp;originHeight=298&amp;originWidth=391&amp;size=34034&amp;status=done&amp;width=391\" alt=\"image.png\"><br>然后拷贝到 streamsets <code>/opt/streamsets-datacollector-3.9.1/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/</code> 目录下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563442430751-7889c386-014a-417e-bc0c-069414f08b89.png#align=left&amp;display=inline&amp;height=740&amp;name=image.png&amp;originHeight=740&amp;originWidth=751&amp;size=59852&amp;status=done&amp;width=751\" alt=\"image.png\"><br>重启streamsets服务<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563443529858-b23e198f-a097-4359-ad0b-85768a5c68ec.png#align=left&amp;display=inline&amp;height=320&amp;name=image.png&amp;originHeight=320&amp;originWidth=194&amp;size=13854&amp;status=done&amp;width=194\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563443568159-590b99dc-af61-45d2-8724-b33d08ba7df2.png#align=left&amp;display=inline&amp;height=235&amp;name=image.png&amp;originHeight=235&amp;originWidth=189&amp;size=9943&amp;status=done&amp;width=189\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444143877-060e4c52-53af-42f3-99e2-38cfc2add983.png#align=left&amp;display=inline&amp;height=726&amp;name=image.png&amp;originHeight=726&amp;originWidth=1253&amp;size=83069&amp;status=done&amp;width=1253\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444315768-4295a91d-b610-4df8-8796-196358662c68.png#align=left&amp;display=inline&amp;height=776&amp;name=image.png&amp;originHeight=776&amp;originWidth=1378&amp;size=80345&amp;status=done&amp;width=1378\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444358478-d8bd7c56-c0c0-49a6-903e-1d284d812e5d.png#align=left&amp;display=inline&amp;height=773&amp;name=image.png&amp;originHeight=773&amp;originWidth=1344&amp;size=81650&amp;status=done&amp;width=1344\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1563444395375-690becdc-1f48-4cfb-b6bd-13d03554cbc1.png#align=left&amp;display=inline&amp;height=785&amp;name=image.png&amp;originHeight=785&amp;originWidth=1629&amp;size=69971&amp;status=done&amp;width=1629\" alt=\"image.png\"><br><a name=\"ri8A5\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d30454ce51d4510bf1d6737\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://crate.io/docs/crate/guide/en/latest/tools/streamsets.html\" target=\"_blank\" rel=\"noopener\">Building data stream pipelines with CrateDB and StreamSets data collector</a></li>\n<li><a href=\"https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Origins/JDBCConsumer.html\" target=\"_blank\" rel=\"noopener\">JDBC Query Consumer</a></li>\n<li><a href=\"https://dzone.com/articles/data-flow-pipeline-using-streamsets\" target=\"_blank\" rel=\"noopener\">Data Flow Pipeline Using StreamSets</a></li>\n</ul>"},{"title":"自建私有云Owncloud+Nginx（支持16G大文件上传）","date":"2017-04-05T04:21:25.000Z","_content":"\n## [Owncloud官网](https://owncloud.org/)\n桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry\n\n## 环境\n- Ubuntu-16.04_64\n- Owncloud9.14-2.1\n- SQLite3\n- PHP7\n- Nginx 1.10.0\n\n## 最简单安装\n\n### 根据linux版本选择相应版本\n[owncloud-9.1](http://download.owncloud.org/download/repositories/9.1/owncloud/)\n\n### 安装\n以Ubuntu-16.04 安装owncloud-9.14-2.1为例\n\n#### 用root权限添加owncloud密钥\n\n```bash\nsu root\n\nwget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key\napt-key add - < Release.key\n```\n\n#### 用root权限添加owncloud软件源\n```bash\nsh -c \"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' > /etc/apt/sources.list.d/owncloud.list\"\napt  update -y && apt install owncloud -y\n```\n\n## 源码安装\n\n### 安装PHP7\n\n```bash\nsudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring\n```\n\n### 安装数据库\n```bash\n#mariadb\nsudo apt-get install -y mariadb-server php7.0-mysql\n\n#sqlite3\nsudo apt-get install -y sqlite3 php7.0-sqlite3\n```\n\n### 安装web容器\n```bash\n#apache2\nsudo apt-get install -y apache2 libapache2-mod-php7.0\n\n#nginx\nsudo apt-get install -y nginx php7.0-fpm \n```\n\n### 修改fpm配置文件(nginx)\n```bash\n$ vi /etc/php/7.0/fpm/pool.d/www.conf\n```\n\n修改`listen = /run/php/php7.0-fpm.sock`为`listen=127.0.0.1:9000`(大约36行)\n\n放开`env`的注释(大约384-388行)\n```\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\n```\n\n\n### 下载最新源码\n```bash\n$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  && sudo unzip /tmp/owncloud-latest.zip -d /var/www/ && rm -rf /tmp/owncloud-latest.zip\n```\n\n### 给www-data授权\n```bash\nsudo chown -R www-data:www-data /var/www/owncloud/\n```\n\n### 参考资料\n[官方nginx+https配置](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html)\n\n[支持大文件上传(16G)](https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB)\n\n### 我的nginx配置\n\n#### nginx\n```bash\n$ vi  /etc/nginx/sites-enabled/owncloud.conf\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 10010;\n    server_name 127.0.0.1;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /var/www/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 16400M;\n    fastcgi_buffers 64 4K;\n    fastcgi_read_timeout 600;\n    client_body_buffer_size 1048576k;\n    client_body_temp_path /tmp/owncloud;\n    \n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    #pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        #fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off; #Available since nginx 1.7.11\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n```\n#### php.ini\n```bash\n\n$ sudo vi /etc/php/7.0/fpm/php.ini\n\n##修改以下几个配置参数\n\n; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB\npost_max_size = 16400M\n\n; cannot be bigger than post_max_size\nupload_max_filesize = 16G\n\n; on online servers this could require bigger values (my server is at home)\nmax_input_time = 3600\n\n; from ownCloud documentation - not sure if is required\noutput_buffering = Off\n\n; not sure if it is required [3] but it seems like ownCloud needs time to move the file to it's\n; final place after upload and that can take quite some time for big files\nmax_execution_time = 1800\n\n; you may also want to point this to a folder having enough space for big files being uploaded\nupload_tmp_dir = /tmp/owncloud\n\n```\n\n\n### 启动服务\n```bash\n$ sudo service php7.0-fpm restart\n\n$ sudo service nginx restart\n```\n\n### 配置\n浏览器打开`http://127.0.0.1:10010`,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html 和https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\n\n![owncloud.png](https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png)\n\n### 配置域名\n详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\n```bash\nsudo vi /var/www/owncloud/config/config.php\n```\n修改\n```\n'trusted_domains' => \n  array (\n    0 => '127.0.0.1:10010',\n    1 => '域名',\n  ),\n```\n\n修改\n```\n'overwrite.cli.url' => 'http://域名',\n```\n\n### 创建用户\n\n浏览器访问`http://127.0.0.1:10010/settings/users`,用管理员用户名密码登陆\n\n### 下载客户端\n\n参见 https://owncloud.org/install/#install-clients","source":"_posts/owncloud.md","raw":"---\ntitle: 自建私有云Owncloud+Nginx（支持16G大文件上传）\ndate: 2017-04-05 12:21:25\ntags: [owncloud]\ncategories: [owncloud]\n---\n\n## [Owncloud官网](https://owncloud.org/)\n桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry\n\n## 环境\n- Ubuntu-16.04_64\n- Owncloud9.14-2.1\n- SQLite3\n- PHP7\n- Nginx 1.10.0\n\n## 最简单安装\n\n### 根据linux版本选择相应版本\n[owncloud-9.1](http://download.owncloud.org/download/repositories/9.1/owncloud/)\n\n### 安装\n以Ubuntu-16.04 安装owncloud-9.14-2.1为例\n\n#### 用root权限添加owncloud密钥\n\n```bash\nsu root\n\nwget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key\napt-key add - < Release.key\n```\n\n#### 用root权限添加owncloud软件源\n```bash\nsh -c \"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' > /etc/apt/sources.list.d/owncloud.list\"\napt  update -y && apt install owncloud -y\n```\n\n## 源码安装\n\n### 安装PHP7\n\n```bash\nsudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring\n```\n\n### 安装数据库\n```bash\n#mariadb\nsudo apt-get install -y mariadb-server php7.0-mysql\n\n#sqlite3\nsudo apt-get install -y sqlite3 php7.0-sqlite3\n```\n\n### 安装web容器\n```bash\n#apache2\nsudo apt-get install -y apache2 libapache2-mod-php7.0\n\n#nginx\nsudo apt-get install -y nginx php7.0-fpm \n```\n\n### 修改fpm配置文件(nginx)\n```bash\n$ vi /etc/php/7.0/fpm/pool.d/www.conf\n```\n\n修改`listen = /run/php/php7.0-fpm.sock`为`listen=127.0.0.1:9000`(大约36行)\n\n放开`env`的注释(大约384-388行)\n```\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\n```\n\n\n### 下载最新源码\n```bash\n$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  && sudo unzip /tmp/owncloud-latest.zip -d /var/www/ && rm -rf /tmp/owncloud-latest.zip\n```\n\n### 给www-data授权\n```bash\nsudo chown -R www-data:www-data /var/www/owncloud/\n```\n\n### 参考资料\n[官方nginx+https配置](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html)\n\n[支持大文件上传(16G)](https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB)\n\n### 我的nginx配置\n\n#### nginx\n```bash\n$ vi  /etc/nginx/sites-enabled/owncloud.conf\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 10010;\n    server_name 127.0.0.1;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /var/www/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 16400M;\n    fastcgi_buffers 64 4K;\n    fastcgi_read_timeout 600;\n    client_body_buffer_size 1048576k;\n    client_body_temp_path /tmp/owncloud;\n    \n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    #pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        #fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off; #Available since nginx 1.7.11\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n```\n#### php.ini\n```bash\n\n$ sudo vi /etc/php/7.0/fpm/php.ini\n\n##修改以下几个配置参数\n\n; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB\npost_max_size = 16400M\n\n; cannot be bigger than post_max_size\nupload_max_filesize = 16G\n\n; on online servers this could require bigger values (my server is at home)\nmax_input_time = 3600\n\n; from ownCloud documentation - not sure if is required\noutput_buffering = Off\n\n; not sure if it is required [3] but it seems like ownCloud needs time to move the file to it's\n; final place after upload and that can take quite some time for big files\nmax_execution_time = 1800\n\n; you may also want to point this to a folder having enough space for big files being uploaded\nupload_tmp_dir = /tmp/owncloud\n\n```\n\n\n### 启动服务\n```bash\n$ sudo service php7.0-fpm restart\n\n$ sudo service nginx restart\n```\n\n### 配置\n浏览器打开`http://127.0.0.1:10010`,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html 和https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\n\n![owncloud.png](https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png)\n\n### 配置域名\n详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\n```bash\nsudo vi /var/www/owncloud/config/config.php\n```\n修改\n```\n'trusted_domains' => \n  array (\n    0 => '127.0.0.1:10010',\n    1 => '域名',\n  ),\n```\n\n修改\n```\n'overwrite.cli.url' => 'http://域名',\n```\n\n### 创建用户\n\n浏览器访问`http://127.0.0.1:10010/settings/users`,用管理员用户名密码登陆\n\n### 下载客户端\n\n参见 https://owncloud.org/install/#install-clients","slug":"owncloud","published":1,"updated":"2019-08-16T05:56:21.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojj500dt24doqpm6f1a0","content":"<h2 id=\"Owncloud官网\"><a href=\"#Owncloud官网\" class=\"headerlink\" title=\"Owncloud官网\"></a><a href=\"https://owncloud.org/\" target=\"_blank\" rel=\"noopener\">Owncloud官网</a></h2><p>桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Ubuntu-16.04_64</li>\n<li>Owncloud9.14-2.1</li>\n<li>SQLite3</li>\n<li>PHP7</li>\n<li>Nginx 1.10.0</li>\n</ul>\n<h2 id=\"最简单安装\"><a href=\"#最简单安装\" class=\"headerlink\" title=\"最简单安装\"></a>最简单安装</h2><h3 id=\"根据linux版本选择相应版本\"><a href=\"#根据linux版本选择相应版本\" class=\"headerlink\" title=\"根据linux版本选择相应版本\"></a>根据linux版本选择相应版本</h3><p><a href=\"http://download.owncloud.org/download/repositories/9.1/owncloud/\" target=\"_blank\" rel=\"noopener\">owncloud-9.1</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>以Ubuntu-16.04 安装owncloud-9.14-2.1为例</p>\n<h4 id=\"用root权限添加owncloud密钥\"><a href=\"#用root权限添加owncloud密钥\" class=\"headerlink\" title=\"用root权限添加owncloud密钥\"></a>用root权限添加owncloud密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\"></span><br><span class=\"line\">wget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key</span><br><span class=\"line\">apt-key add - &lt; Release.key</span><br></pre></td></tr></table></figure>\n<h4 id=\"用root权限添加owncloud软件源\"><a href=\"#用root权限添加owncloud软件源\" class=\"headerlink\" title=\"用root权限添加owncloud软件源\"></a>用root权限添加owncloud软件源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' &gt; /etc/apt/sources.list.d/owncloud.list\"</span></span><br><span class=\"line\">apt  update -y &amp;&amp; apt install owncloud -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mariadb</span></span><br><span class=\"line\">sudo apt-get install -y mariadb-server php7.0-mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sqlite3</span></span><br><span class=\"line\">sudo apt-get install -y sqlite3 php7.0-sqlite3</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装web容器\"><a href=\"#安装web容器\" class=\"headerlink\" title=\"安装web容器\"></a>安装web容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#apache2</span></span><br><span class=\"line\">sudo apt-get install -y apache2 libapache2-mod-php7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx</span></span><br><span class=\"line\">sudo apt-get install -y nginx php7.0-fpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改fpm配置文件-nginx\"><a href=\"#修改fpm配置文件-nginx\" class=\"headerlink\" title=\"修改fpm配置文件(nginx)\"></a>修改fpm配置文件(nginx)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi /etc/php/7.0/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure>\n<p>修改<code>listen = /run/php/php7.0-fpm.sock</code>为<code>listen=127.0.0.1:9000</code>(大约36行)</p>\n<p>放开<code>env</code>的注释(大约384-388行)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">env[HOSTNAME] = $HOSTNAME</span><br><span class=\"line\">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class=\"line\">env[TMP] = /tmp</span><br><span class=\"line\">env[TMPDIR] = /tmp</span><br><span class=\"line\">env[TEMP] = /tmp</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载最新源码\"><a href=\"#下载最新源码\" class=\"headerlink\" title=\"下载最新源码\"></a>下载最新源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  &amp;&amp; sudo unzip /tmp/owncloud-latest.zip -d /var/www/ &amp;&amp; rm -rf /tmp/owncloud-latest.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"给www-data授权\"><a href=\"#给www-data授权\" class=\"headerlink\" title=\"给www-data授权\"></a>给www-data授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chown -R www-data:www-data /var/www/owncloud/</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html\" target=\"_blank\" rel=\"noopener\">官方nginx+https配置</a></p>\n<p><a href=\"https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB\" target=\"_blank\" rel=\"noopener\">支持大文件上传(16G)</a></p>\n<h3 id=\"我的nginx配置\"><a href=\"#我的nginx配置\" class=\"headerlink\" title=\"我的nginx配置\"></a>我的nginx配置</h3><h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi  /etc/nginx/sites-enabled/owncloud.conf</span><br><span class=\"line\"></span><br><span class=\"line\">upstream php-handler &#123;</span><br><span class=\"line\">    server 127.0.0.1:9000;</span><br><span class=\"line\">    <span class=\"comment\">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 10010;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Add headers to serve security related headers</span></span><br><span class=\"line\">    <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">    <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">    add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">    add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">    add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">    add_header X-Robots-Tag none;</span><br><span class=\"line\">    add_header X-Download-Options noopen;</span><br><span class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Path to the root of your installation</span></span><br><span class=\"line\">    root /var/www/owncloud/;</span><br><span class=\"line\"></span><br><span class=\"line\">    location = /robots.txt &#123;</span><br><span class=\"line\">        allow all;</span><br><span class=\"line\">        log_not_found off;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment it if you're planning to use this app.</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location = /.well-known/carddav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location = /.well-known/caldav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># set max upload size</span></span><br><span class=\"line\">    client_max_body_size 16400M;</span><br><span class=\"line\">    fastcgi_buffers 64 4K;</span><br><span class=\"line\">    fastcgi_read_timeout 600;</span><br><span class=\"line\">    client_body_buffer_size 1048576k;</span><br><span class=\"line\">    client_body_temp_path /tmp/owncloud;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Disable gzip to avoid the removal of the ETag header</span></span><br><span class=\"line\">    gzip off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class=\"line\">    <span class=\"comment\"># This module is currently not supported.</span></span><br><span class=\"line\">    <span class=\"comment\">#pagespeed off;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 403 /core/templates/403.php;</span><br><span class=\"line\">    error_page 404 /core/templates/404.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^ /index.php<span class=\"variable\">$uri</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</span><br><span class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        fastcgi_param PATH_INFO <span class=\"variable\">$fastcgi_path_info</span>;</span><br><span class=\"line\">        <span class=\"comment\">#fastcgi_param HTTPS on;</span></span><br><span class=\"line\">        fastcgi_param modHeadersAvailable <span class=\"literal\">true</span>; <span class=\"comment\">#Avoid sending the security headers twice</span></span><br><span class=\"line\">        fastcgi_param front_controller_active <span class=\"literal\">true</span>;</span><br><span class=\"line\">        fastcgi_pass php-handler;</span><br><span class=\"line\">        fastcgi_intercept_errors on;</span><br><span class=\"line\">        fastcgi_request_buffering off; <span class=\"comment\">#Available since nginx 1.7.11</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Adding the cache control header for js and css files</span></span><br><span class=\"line\">    <span class=\"comment\"># Make sure it is BELOW the PHP block</span></span><br><span class=\"line\">    location ~* \\.(?:css|js)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        add_header Cache-Control <span class=\"string\">\"public, max-age=7200\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</span></span><br><span class=\"line\">        <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">        <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">        add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">        add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">        add_header X-Robots-Tag none;</span><br><span class=\"line\">        add_header X-Download-Options noopen;</span><br><span class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to other assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"php-ini\"><a href=\"#php-ini\" class=\"headerlink\" title=\"php.ini\"></a>php.ini</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/php/7.0/fpm/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##修改以下几个配置参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB</span><br><span class=\"line\">post_max_size = 16400M</span><br><span class=\"line\"></span><br><span class=\"line\">; cannot be bigger than post_max_size</span><br><span class=\"line\">upload_max_filesize = 16G</span><br><span class=\"line\"></span><br><span class=\"line\">; on online servers this could require bigger values (my server is at home)</span><br><span class=\"line\">max_input_time = 3600</span><br><span class=\"line\"></span><br><span class=\"line\">; from ownCloud documentation - not sure <span class=\"keyword\">if</span> is required</span><br><span class=\"line\">output_buffering = Off</span><br><span class=\"line\"></span><br><span class=\"line\">; not sure <span class=\"keyword\">if</span> it is required [3] but it seems like ownCloud needs time to move the file to it<span class=\"string\">'s</span></span><br><span class=\"line\"><span class=\"string\">; final place after upload and that can take quite some time for big files</span></span><br><span class=\"line\"><span class=\"string\">max_execution_time = 1800</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">; you may also want to point this to a folder having enough space for big files being uploaded</span></span><br><span class=\"line\"><span class=\"string\">upload_tmp_dir = /tmp/owncloud</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service php7.0-fpm restart</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>浏览器打开<code>http://127.0.0.1:10010</code>,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html</a> 和<a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png\" alt=\"owncloud.png\"></p>\n<h3 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h3><p>详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /var/www/owncloud/config/config.php</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;trusted_domains&apos; =&gt; </span><br><span class=\"line\">  array (</span><br><span class=\"line\">    0 =&gt; &apos;127.0.0.1:10010&apos;,</span><br><span class=\"line\">    1 =&gt; &apos;域名&apos;,</span><br><span class=\"line\">  ),</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;overwrite.cli.url&apos; =&gt; &apos;http://域名&apos;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>浏览器访问<code>http://127.0.0.1:10010/settings/users</code>,用管理员用户名密码登陆</p>\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><p>参见 <a href=\"https://owncloud.org/install/#install-clients\" target=\"_blank\" rel=\"noopener\">https://owncloud.org/install/#install-clients</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Owncloud官网\"><a href=\"#Owncloud官网\" class=\"headerlink\" title=\"Owncloud官网\"></a><a href=\"https://owncloud.org/\" target=\"_blank\" rel=\"noopener\">Owncloud官网</a></h2><p>桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Ubuntu-16.04_64</li>\n<li>Owncloud9.14-2.1</li>\n<li>SQLite3</li>\n<li>PHP7</li>\n<li>Nginx 1.10.0</li>\n</ul>\n<h2 id=\"最简单安装\"><a href=\"#最简单安装\" class=\"headerlink\" title=\"最简单安装\"></a>最简单安装</h2><h3 id=\"根据linux版本选择相应版本\"><a href=\"#根据linux版本选择相应版本\" class=\"headerlink\" title=\"根据linux版本选择相应版本\"></a>根据linux版本选择相应版本</h3><p><a href=\"http://download.owncloud.org/download/repositories/9.1/owncloud/\" target=\"_blank\" rel=\"noopener\">owncloud-9.1</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>以Ubuntu-16.04 安装owncloud-9.14-2.1为例</p>\n<h4 id=\"用root权限添加owncloud密钥\"><a href=\"#用root权限添加owncloud密钥\" class=\"headerlink\" title=\"用root权限添加owncloud密钥\"></a>用root权限添加owncloud密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\"></span><br><span class=\"line\">wget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key</span><br><span class=\"line\">apt-key add - &lt; Release.key</span><br></pre></td></tr></table></figure>\n<h4 id=\"用root权限添加owncloud软件源\"><a href=\"#用root权限添加owncloud软件源\" class=\"headerlink\" title=\"用root权限添加owncloud软件源\"></a>用root权限添加owncloud软件源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' &gt; /etc/apt/sources.list.d/owncloud.list\"</span></span><br><span class=\"line\">apt  update -y &amp;&amp; apt install owncloud -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mariadb</span></span><br><span class=\"line\">sudo apt-get install -y mariadb-server php7.0-mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sqlite3</span></span><br><span class=\"line\">sudo apt-get install -y sqlite3 php7.0-sqlite3</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装web容器\"><a href=\"#安装web容器\" class=\"headerlink\" title=\"安装web容器\"></a>安装web容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#apache2</span></span><br><span class=\"line\">sudo apt-get install -y apache2 libapache2-mod-php7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx</span></span><br><span class=\"line\">sudo apt-get install -y nginx php7.0-fpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改fpm配置文件-nginx\"><a href=\"#修改fpm配置文件-nginx\" class=\"headerlink\" title=\"修改fpm配置文件(nginx)\"></a>修改fpm配置文件(nginx)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi /etc/php/7.0/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure>\n<p>修改<code>listen = /run/php/php7.0-fpm.sock</code>为<code>listen=127.0.0.1:9000</code>(大约36行)</p>\n<p>放开<code>env</code>的注释(大约384-388行)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">env[HOSTNAME] = $HOSTNAME</span><br><span class=\"line\">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class=\"line\">env[TMP] = /tmp</span><br><span class=\"line\">env[TMPDIR] = /tmp</span><br><span class=\"line\">env[TEMP] = /tmp</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载最新源码\"><a href=\"#下载最新源码\" class=\"headerlink\" title=\"下载最新源码\"></a>下载最新源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  &amp;&amp; sudo unzip /tmp/owncloud-latest.zip -d /var/www/ &amp;&amp; rm -rf /tmp/owncloud-latest.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"给www-data授权\"><a href=\"#给www-data授权\" class=\"headerlink\" title=\"给www-data授权\"></a>给www-data授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chown -R www-data:www-data /var/www/owncloud/</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html\" target=\"_blank\" rel=\"noopener\">官方nginx+https配置</a></p>\n<p><a href=\"https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB\" target=\"_blank\" rel=\"noopener\">支持大文件上传(16G)</a></p>\n<h3 id=\"我的nginx配置\"><a href=\"#我的nginx配置\" class=\"headerlink\" title=\"我的nginx配置\"></a>我的nginx配置</h3><h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi  /etc/nginx/sites-enabled/owncloud.conf</span><br><span class=\"line\"></span><br><span class=\"line\">upstream php-handler &#123;</span><br><span class=\"line\">    server 127.0.0.1:9000;</span><br><span class=\"line\">    <span class=\"comment\">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 10010;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Add headers to serve security related headers</span></span><br><span class=\"line\">    <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">    <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">    add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">    add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">    add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">    add_header X-Robots-Tag none;</span><br><span class=\"line\">    add_header X-Download-Options noopen;</span><br><span class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Path to the root of your installation</span></span><br><span class=\"line\">    root /var/www/owncloud/;</span><br><span class=\"line\"></span><br><span class=\"line\">    location = /robots.txt &#123;</span><br><span class=\"line\">        allow all;</span><br><span class=\"line\">        log_not_found off;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment it if you're planning to use this app.</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location = /.well-known/carddav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location = /.well-known/caldav &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># set max upload size</span></span><br><span class=\"line\">    client_max_body_size 16400M;</span><br><span class=\"line\">    fastcgi_buffers 64 4K;</span><br><span class=\"line\">    fastcgi_read_timeout 600;</span><br><span class=\"line\">    client_body_buffer_size 1048576k;</span><br><span class=\"line\">    client_body_temp_path /tmp/owncloud;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Disable gzip to avoid the removal of the ETag header</span></span><br><span class=\"line\">    gzip off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class=\"line\">    <span class=\"comment\"># This module is currently not supported.</span></span><br><span class=\"line\">    <span class=\"comment\">#pagespeed off;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 403 /core/templates/403.php;</span><br><span class=\"line\">    error_page 404 /core/templates/404.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^ /index.php<span class=\"variable\">$uri</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</span><br><span class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        fastcgi_param PATH_INFO <span class=\"variable\">$fastcgi_path_info</span>;</span><br><span class=\"line\">        <span class=\"comment\">#fastcgi_param HTTPS on;</span></span><br><span class=\"line\">        fastcgi_param modHeadersAvailable <span class=\"literal\">true</span>; <span class=\"comment\">#Avoid sending the security headers twice</span></span><br><span class=\"line\">        fastcgi_param front_controller_active <span class=\"literal\">true</span>;</span><br><span class=\"line\">        fastcgi_pass php-handler;</span><br><span class=\"line\">        fastcgi_intercept_errors on;</span><br><span class=\"line\">        fastcgi_request_buffering off; <span class=\"comment\">#Available since nginx 1.7.11</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Adding the cache control header for js and css files</span></span><br><span class=\"line\">    <span class=\"comment\"># Make sure it is BELOW the PHP block</span></span><br><span class=\"line\">    location ~* \\.(?:css|js)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        add_header Cache-Control <span class=\"string\">\"public, max-age=7200\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</span></span><br><span class=\"line\">        <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></span><br><span class=\"line\">        <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></span><br><span class=\"line\">        add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</span><br><span class=\"line\">        add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\">        add_header X-Robots-Tag none;</span><br><span class=\"line\">        add_header X-Download-Options noopen;</span><br><span class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Optional: Don't log access to other assets</span></span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"php-ini\"><a href=\"#php-ini\" class=\"headerlink\" title=\"php.ini\"></a>php.ini</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/php/7.0/fpm/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##修改以下几个配置参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB</span><br><span class=\"line\">post_max_size = 16400M</span><br><span class=\"line\"></span><br><span class=\"line\">; cannot be bigger than post_max_size</span><br><span class=\"line\">upload_max_filesize = 16G</span><br><span class=\"line\"></span><br><span class=\"line\">; on online servers this could require bigger values (my server is at home)</span><br><span class=\"line\">max_input_time = 3600</span><br><span class=\"line\"></span><br><span class=\"line\">; from ownCloud documentation - not sure <span class=\"keyword\">if</span> is required</span><br><span class=\"line\">output_buffering = Off</span><br><span class=\"line\"></span><br><span class=\"line\">; not sure <span class=\"keyword\">if</span> it is required [3] but it seems like ownCloud needs time to move the file to it<span class=\"string\">'s</span></span><br><span class=\"line\"><span class=\"string\">; final place after upload and that can take quite some time for big files</span></span><br><span class=\"line\"><span class=\"string\">max_execution_time = 1800</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">; you may also want to point this to a folder having enough space for big files being uploaded</span></span><br><span class=\"line\"><span class=\"string\">upload_tmp_dir = /tmp/owncloud</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service php7.0-fpm restart</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>浏览器打开<code>http://127.0.0.1:10010</code>,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html</a> 和<a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png\" alt=\"owncloud.png\"></p>\n<h3 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h3><p>详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\" target=\"_blank\" rel=\"noopener\">https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /var/www/owncloud/config/config.php</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;trusted_domains&apos; =&gt; </span><br><span class=\"line\">  array (</span><br><span class=\"line\">    0 =&gt; &apos;127.0.0.1:10010&apos;,</span><br><span class=\"line\">    1 =&gt; &apos;域名&apos;,</span><br><span class=\"line\">  ),</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;overwrite.cli.url&apos; =&gt; &apos;http://域名&apos;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>浏览器访问<code>http://127.0.0.1:10010/settings/users</code>,用管理员用户名密码登陆</p>\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><p>参见 <a href=\"https://owncloud.org/install/#install-clients\" target=\"_blank\" rel=\"noopener\">https://owncloud.org/install/#install-clients</a></p>\n"},{"title":"031-数据可视化之redash(支持43种数据源)","date":"2019-07-08T04:30:00.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第31篇，定个小目标999，每周最少2篇。\n\n\n本文是数据可视化系列第二篇,本系列会讲解 [PowerBI/Excel](https://juejin.im/post/5cdfdfa4f265da1bbf68ec4b),[Metabase](https://www.metabase.com/),[Redash](https://anjia0532.github.io/2019/07/08/redash),[Superset](http://superset.apache.org/),[CBoard](https://juejin.im/post/5b4ee1c2f265da0f5d4cc978)\n\n人类都是视觉动物，讲究一图胜千言。如果没了可视化，那么你在跟领导汇报工作时，很大程度会鸡同鸭讲。<br />其实excel2016+已经是一个不错的数据分析及可视化工具了(支持几十种数据源),但是，不方便权限控制，集中，及报警。\n\n我一般将redash作为可视化工具、数据库查询编辑器(类似navicat-premium)、数据挖掘探索工具来用。<br />截止目前，自建redash支持43种数据源<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562561680709-399441ab-b14d-4d93-b797-60925f2eafd6.png#align=left&display=inline&height=944&name=image.png&originHeight=944&originWidth=1133&size=147027&status=done&width=1133)\n\n<!-- more -->\n\n<a name=\"nxb7z\"></a>\n## 安装redash\n\n```bash\n## 安装必要工具\napt install -y pwgen python-pip\npip install pip -U\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\npip install docker-compose\n\n## 生成脚本\ncat << EOF | sudo tee -a ./setup.sh\n#!/usr/bin/env bash\n# This script setups dockerized Redash on Ubuntu 18.04.\nset -eu\n\nREDASH_BASE_PATH=/opt/redash\n\ncreate_directories() {\n    if [[ ! -e $REDASH_BASE_PATH ]]; then\n        sudo mkdir -p $REDASH_BASE_PATH\n        sudo chown $USER:$USER $REDASH_BASE_PATH\n    fi\n\n    if [[ ! -e $REDASH_BASE_PATH/postgres-data ]]; then\n        mkdir $REDASH_BASE_PATH/postgres-data\n    fi\n}\n\ncreate_config() {\n    if [[ -e $REDASH_BASE_PATH/env ]]; then\n        rm $REDASH_BASE_PATH/env\n        touch $REDASH_BASE_PATH/env\n    fi\n\n    COOKIE_SECRET=$(pwgen -1s 32)\n    SECRET_KEY=$(pwgen -1s 32)\n    POSTGRES_PASSWORD=$(pwgen -1s 32)\n    REDASH_DATABASE_URL=\"postgresql://postgres:${POSTGRES_PASSWORD}@postgres/postgres\"\n\n    echo \"PYTHONUNBUFFERED=0\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_LOG_LEVEL=INFO\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_REDIS_URL=redis://redis:6379/0\" >> $REDASH_BASE_PATH/env\n    echo \"POSTGRES_PASSWORD=$POSTGRES_PASSWORD\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_COOKIE_SECRET=$COOKIE_SECRET\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_SECRET_KEY=$SECRET_KEY\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_DATABASE_URL=$REDASH_DATABASE_URL\" >> $REDASH_BASE_PATH/env\n}\n\ncreate_directories\ncreate_config\nEOF\n\n## 生成必要配置文件\nchmod +x ./setup && ./setup\n```\n\ndocker-compose.yml\n```yaml\nversion: '2'\nx-redash-service: &redash-service\n  image: redash/redash:7.0.0.b18042\n  depends_on:\n    - postgres\n    - redis\n  env_file: /opt/redash/env\n  restart: always\nservices:\n  server:\n    <<: *redash-service\n    command: server\n    ports:\n      - \"5000:5000\"\n    environment:\n      REDASH_WEB_WORKERS: 4\n  scheduler:\n    <<: *redash-service\n    command: scheduler\n    environment:\n      QUEUES: \"celery\"\n      WORKERS_COUNT: 1\n  scheduled_worker:\n    <<: *redash-service\n    command: worker\n    environment:\n      QUEUES: \"scheduled_queries,schemas\"\n      WORKERS_COUNT: 1\n  adhoc_worker:\n    <<: *redash-service\n    command: worker\n    environment:\n      QUEUES: \"queries\"\n      WORKERS_COUNT: 2\n  redis:\n    image: redis:5.0-alpine\n    restart: always\n  postgres:\n    image: postgres:9.5-alpine\n    env_file: /opt/redash/env\n    volumes:\n      - /opt/redash/postgres-data:/var/lib/postgresql/data\n    restart: always\n  nginx:\n    image: redash/nginx:latest\n    ports:\n      - \"80:80\"\n    depends_on:\n      - server\n    links:\n      - server:redash\n    restart: always\n```\n\n```bash\n## 配置数据库\nsudo docker-compose run --rm server create_db\n## 启动\nsudo docker-compose up -d\n```\n\n<a name=\"MAfiF\"></a>\n## 配置redash\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562631840989-c6c2d739-b9df-4b95-a3fa-61cdc7b35dde.png#align=left&display=inline&height=626&name=image.png&originHeight=626&originWidth=508&size=35369&status=done&width=508)\n\n创建数据源<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562631903553-80df8657-983c-4d8e-b7a1-d1c6e126fb62.png#align=left&display=inline&height=620&name=image.png&originHeight=620&originWidth=1328&size=93814&status=done&width=1328)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562634341179-6242da8f-b79e-424c-bd1c-4ef8d959b6f2.png#align=left&display=inline&height=616&name=image.png&originHeight=616&originWidth=965&size=35160&status=done&width=965)\n\n> 注意：\n> 为做演示，clickhouse已导入官网提供的2018年航天数据，详见 [https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/](https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/)\n\n\n<a name=\"xjUpG\"></a>\n## 演示redash\n创建查询 **查询2007年各航空公司延误超过10分钟以上的百分比** <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736509902-041060bf-8e40-4025-82a0-cb9b6d2accaf.png#align=left&display=inline&height=480&name=image.png&originHeight=480&originWidth=1340&size=55546&status=done&width=1340)\n\n`SELECT Carrier, avg(DepDelay > 10) * 100 AS c3 FROM ontime WHERE Year = 2018 GROUP BY Carrier ORDER BY Carrier` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736271917-dadece08-87f4-4103-a298-170d115fe073.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=1052&size=28083&status=done&width=1052)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736536023-b44eaf65-9397-4c7a-9574-43ecfede72ef.png#align=left&display=inline&height=254&name=image.png&originHeight=254&originWidth=297&size=6701&status=done&width=297)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736589364-dcb99f35-22ca-47d8-97a5-a98491f45bfe.png#align=left&display=inline&height=609&name=image.png&originHeight=609&originWidth=1347&size=108611&status=done&width=1347)\n\n发布<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736715789-e21eea66-eb35-40a5-8061-100b79f2dac7.png#align=left&display=inline&height=312&name=image.png&originHeight=312&originWidth=1056&size=30412&status=done&width=1056)\n\n\n创建仪表盘(Dashboard)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736796292-ac3b67dd-1d2f-41a2-a1db-a7e9456ba2cd.png#align=left&display=inline&height=557&name=image.png&originHeight=557&originWidth=1342&size=39921&status=done&width=1342)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736761829-08ae709d-eeda-46d7-a3b3-5d17e3eb38fe.png#align=left&display=inline&height=457&name=image.png&originHeight=457&originWidth=1021&size=43007&status=done&width=1021)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736856319-c2134885-f7fe-4468-9609-d1a1e155f220.png#align=left&display=inline&height=477&name=image.png&originHeight=477&originWidth=1359&size=90419&status=done&width=1359)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736915850-1639d58c-faf7-40f9-827b-5ad787fb52fb.png#align=left&display=inline&height=515&name=image.png&originHeight=515&originWidth=1354&size=109611&status=done&width=1354)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736878154-9f97437c-6b4f-419e-89bc-17f45f49947e.png#align=left&display=inline&height=273&name=image.png&originHeight=273&originWidth=551&size=17982&status=done&width=551)<br />分享后的dashboard，在底下有个redash的logo<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736970500-ed1b5503-69c7-40e3-99d8-b5a7cdd58d82.png#align=left&display=inline&height=295&name=image.png&originHeight=295&originWidth=500&size=9731&status=done&width=500)\n\n可以嵌入到已有系统里。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/08/redash/)\n- [我的掘金](https://juejin.im/post/5d25b88cf265da1bc23f9ff3)\n- [Knowledge Base](https://redash.io/help/)\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","source":"_posts/redash.md","raw":"\n---\n\ntitle: 031-数据可视化之redash(支持43种数据源)\n\ndate: 2019-07-08 12:30:00 +0800\n\ntags: [CDH,hadoop,大数据,数据可视化,Superset,redash]\n\ncategories: 大数据\n\n---\n> 这是坚持技术写作计划（含翻译）的第31篇，定个小目标999，每周最少2篇。\n\n\n本文是数据可视化系列第二篇,本系列会讲解 [PowerBI/Excel](https://juejin.im/post/5cdfdfa4f265da1bbf68ec4b),[Metabase](https://www.metabase.com/),[Redash](https://anjia0532.github.io/2019/07/08/redash),[Superset](http://superset.apache.org/),[CBoard](https://juejin.im/post/5b4ee1c2f265da0f5d4cc978)\n\n人类都是视觉动物，讲究一图胜千言。如果没了可视化，那么你在跟领导汇报工作时，很大程度会鸡同鸭讲。<br />其实excel2016+已经是一个不错的数据分析及可视化工具了(支持几十种数据源),但是，不方便权限控制，集中，及报警。\n\n我一般将redash作为可视化工具、数据库查询编辑器(类似navicat-premium)、数据挖掘探索工具来用。<br />截止目前，自建redash支持43种数据源<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562561680709-399441ab-b14d-4d93-b797-60925f2eafd6.png#align=left&display=inline&height=944&name=image.png&originHeight=944&originWidth=1133&size=147027&status=done&width=1133)\n\n<!-- more -->\n\n<a name=\"nxb7z\"></a>\n## 安装redash\n\n```bash\n## 安装必要工具\napt install -y pwgen python-pip\npip install pip -U\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\npip install docker-compose\n\n## 生成脚本\ncat << EOF | sudo tee -a ./setup.sh\n#!/usr/bin/env bash\n# This script setups dockerized Redash on Ubuntu 18.04.\nset -eu\n\nREDASH_BASE_PATH=/opt/redash\n\ncreate_directories() {\n    if [[ ! -e $REDASH_BASE_PATH ]]; then\n        sudo mkdir -p $REDASH_BASE_PATH\n        sudo chown $USER:$USER $REDASH_BASE_PATH\n    fi\n\n    if [[ ! -e $REDASH_BASE_PATH/postgres-data ]]; then\n        mkdir $REDASH_BASE_PATH/postgres-data\n    fi\n}\n\ncreate_config() {\n    if [[ -e $REDASH_BASE_PATH/env ]]; then\n        rm $REDASH_BASE_PATH/env\n        touch $REDASH_BASE_PATH/env\n    fi\n\n    COOKIE_SECRET=$(pwgen -1s 32)\n    SECRET_KEY=$(pwgen -1s 32)\n    POSTGRES_PASSWORD=$(pwgen -1s 32)\n    REDASH_DATABASE_URL=\"postgresql://postgres:${POSTGRES_PASSWORD}@postgres/postgres\"\n\n    echo \"PYTHONUNBUFFERED=0\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_LOG_LEVEL=INFO\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_REDIS_URL=redis://redis:6379/0\" >> $REDASH_BASE_PATH/env\n    echo \"POSTGRES_PASSWORD=$POSTGRES_PASSWORD\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_COOKIE_SECRET=$COOKIE_SECRET\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_SECRET_KEY=$SECRET_KEY\" >> $REDASH_BASE_PATH/env\n    echo \"REDASH_DATABASE_URL=$REDASH_DATABASE_URL\" >> $REDASH_BASE_PATH/env\n}\n\ncreate_directories\ncreate_config\nEOF\n\n## 生成必要配置文件\nchmod +x ./setup && ./setup\n```\n\ndocker-compose.yml\n```yaml\nversion: '2'\nx-redash-service: &redash-service\n  image: redash/redash:7.0.0.b18042\n  depends_on:\n    - postgres\n    - redis\n  env_file: /opt/redash/env\n  restart: always\nservices:\n  server:\n    <<: *redash-service\n    command: server\n    ports:\n      - \"5000:5000\"\n    environment:\n      REDASH_WEB_WORKERS: 4\n  scheduler:\n    <<: *redash-service\n    command: scheduler\n    environment:\n      QUEUES: \"celery\"\n      WORKERS_COUNT: 1\n  scheduled_worker:\n    <<: *redash-service\n    command: worker\n    environment:\n      QUEUES: \"scheduled_queries,schemas\"\n      WORKERS_COUNT: 1\n  adhoc_worker:\n    <<: *redash-service\n    command: worker\n    environment:\n      QUEUES: \"queries\"\n      WORKERS_COUNT: 2\n  redis:\n    image: redis:5.0-alpine\n    restart: always\n  postgres:\n    image: postgres:9.5-alpine\n    env_file: /opt/redash/env\n    volumes:\n      - /opt/redash/postgres-data:/var/lib/postgresql/data\n    restart: always\n  nginx:\n    image: redash/nginx:latest\n    ports:\n      - \"80:80\"\n    depends_on:\n      - server\n    links:\n      - server:redash\n    restart: always\n```\n\n```bash\n## 配置数据库\nsudo docker-compose run --rm server create_db\n## 启动\nsudo docker-compose up -d\n```\n\n<a name=\"MAfiF\"></a>\n## 配置redash\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562631840989-c6c2d739-b9df-4b95-a3fa-61cdc7b35dde.png#align=left&display=inline&height=626&name=image.png&originHeight=626&originWidth=508&size=35369&status=done&width=508)\n\n创建数据源<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562631903553-80df8657-983c-4d8e-b7a1-d1c6e126fb62.png#align=left&display=inline&height=620&name=image.png&originHeight=620&originWidth=1328&size=93814&status=done&width=1328)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562634341179-6242da8f-b79e-424c-bd1c-4ef8d959b6f2.png#align=left&display=inline&height=616&name=image.png&originHeight=616&originWidth=965&size=35160&status=done&width=965)\n\n> 注意：\n> 为做演示，clickhouse已导入官网提供的2018年航天数据，详见 [https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/](https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/)\n\n\n<a name=\"xjUpG\"></a>\n## 演示redash\n创建查询 **查询2007年各航空公司延误超过10分钟以上的百分比** <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736509902-041060bf-8e40-4025-82a0-cb9b6d2accaf.png#align=left&display=inline&height=480&name=image.png&originHeight=480&originWidth=1340&size=55546&status=done&width=1340)\n\n`SELECT Carrier, avg(DepDelay > 10) * 100 AS c3 FROM ontime WHERE Year = 2018 GROUP BY Carrier ORDER BY Carrier` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736271917-dadece08-87f4-4103-a298-170d115fe073.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=1052&size=28083&status=done&width=1052)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736536023-b44eaf65-9397-4c7a-9574-43ecfede72ef.png#align=left&display=inline&height=254&name=image.png&originHeight=254&originWidth=297&size=6701&status=done&width=297)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736589364-dcb99f35-22ca-47d8-97a5-a98491f45bfe.png#align=left&display=inline&height=609&name=image.png&originHeight=609&originWidth=1347&size=108611&status=done&width=1347)\n\n发布<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736715789-e21eea66-eb35-40a5-8061-100b79f2dac7.png#align=left&display=inline&height=312&name=image.png&originHeight=312&originWidth=1056&size=30412&status=done&width=1056)\n\n\n创建仪表盘(Dashboard)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736796292-ac3b67dd-1d2f-41a2-a1db-a7e9456ba2cd.png#align=left&display=inline&height=557&name=image.png&originHeight=557&originWidth=1342&size=39921&status=done&width=1342)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736761829-08ae709d-eeda-46d7-a3b3-5d17e3eb38fe.png#align=left&display=inline&height=457&name=image.png&originHeight=457&originWidth=1021&size=43007&status=done&width=1021)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736856319-c2134885-f7fe-4468-9609-d1a1e155f220.png#align=left&display=inline&height=477&name=image.png&originHeight=477&originWidth=1359&size=90419&status=done&width=1359)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736915850-1639d58c-faf7-40f9-827b-5ad787fb52fb.png#align=left&display=inline&height=515&name=image.png&originHeight=515&originWidth=1354&size=109611&status=done&width=1354)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736878154-9f97437c-6b4f-419e-89bc-17f45f49947e.png#align=left&display=inline&height=273&name=image.png&originHeight=273&originWidth=551&size=17982&status=done&width=551)<br />分享后的dashboard，在底下有个redash的logo<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562736970500-ed1b5503-69c7-40e3-99d8-b5a7cdd58d82.png#align=left&display=inline&height=295&name=image.png&originHeight=295&originWidth=500&size=9731&status=done&width=500)\n\n可以嵌入到已有系统里。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [我的博客](https://anjia0532.github.io/2019/07/08/redash/)\n- [我的掘金](https://juejin.im/post/5d25b88cf265da1bc23f9ff3)\n- [Knowledge Base](https://redash.io/help/)\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。<br />长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n","slug":"redash","published":1,"updated":"2019-08-16T06:11:14.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojj800dx24do7030535m","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第31篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文是数据可视化系列第二篇,本系列会讲解 <a href=\"https://juejin.im/post/5cdfdfa4f265da1bbf68ec4b\" target=\"_blank\" rel=\"noopener\">PowerBI/Excel</a>,<a href=\"https://www.metabase.com/\" target=\"_blank\" rel=\"noopener\">Metabase</a>,<a href=\"https://anjia0532.github.io/2019/07/08/redash\">Redash</a>,<a href=\"http://superset.apache.org/\" target=\"_blank\" rel=\"noopener\">Superset</a>,<a href=\"https://juejin.im/post/5b4ee1c2f265da0f5d4cc978\" target=\"_blank\" rel=\"noopener\">CBoard</a></p>\n<p>人类都是视觉动物，讲究一图胜千言。如果没了可视化，那么你在跟领导汇报工作时，很大程度会鸡同鸭讲。<br>其实excel2016+已经是一个不错的数据分析及可视化工具了(支持几十种数据源),但是，不方便权限控制，集中，及报警。</p>\n<p>我一般将redash作为可视化工具、数据库查询编辑器(类似navicat-premium)、数据挖掘探索工具来用。<br>截止目前，自建redash支持43种数据源<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562561680709-399441ab-b14d-4d93-b797-60925f2eafd6.png#align=left&amp;display=inline&amp;height=944&amp;name=image.png&amp;originHeight=944&amp;originWidth=1133&amp;size=147027&amp;status=done&amp;width=1133\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n<p><a name=\"nxb7z\"></a></p>\n<h2 id=\"安装redash\"><a href=\"#安装redash\" class=\"headerlink\" title=\"安装redash\"></a>安装redash</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装必要工具</span></span><br><span class=\"line\">apt install -y pwgen python-pip</span><br><span class=\"line\">pip install pip -U</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 生成脚本</span></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a ./setup.sh</span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"comment\"># This script setups dockerized Redash on Ubuntu 18.04.</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -eu</span><br><span class=\"line\"></span><br><span class=\"line\">REDASH_BASE_PATH=/opt/redash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">create_directories</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -e <span class=\"variable\">$REDASH_BASE_PATH</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        sudo mkdir -p <span class=\"variable\">$REDASH_BASE_PATH</span></span><br><span class=\"line\">        sudo chown <span class=\"variable\">$USER</span>:<span class=\"variable\">$USER</span> <span class=\"variable\">$REDASH_BASE_PATH</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -e <span class=\"variable\">$REDASH_BASE_PATH</span>/postgres-data ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        mkdir <span class=\"variable\">$REDASH_BASE_PATH</span>/postgres-data</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">create_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -e <span class=\"variable\">$REDASH_BASE_PATH</span>/env ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        rm <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">        touch <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    COOKIE_SECRET=$(pwgen -1s 32)</span><br><span class=\"line\">    SECRET_KEY=$(pwgen -1s 32)</span><br><span class=\"line\">    POSTGRES_PASSWORD=$(pwgen -1s 32)</span><br><span class=\"line\">    REDASH_DATABASE_URL=<span class=\"string\">\"postgresql://postgres:<span class=\"variable\">$&#123;POSTGRES_PASSWORD&#125;</span>@postgres/postgres\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"PYTHONUNBUFFERED=0\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_LOG_LEVEL=INFO\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_REDIS_URL=redis://redis:6379/0\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"POSTGRES_PASSWORD=<span class=\"variable\">$POSTGRES_PASSWORD</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_COOKIE_SECRET=<span class=\"variable\">$COOKIE_SECRET</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_SECRET_KEY=<span class=\"variable\">$SECRET_KEY</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_DATABASE_URL=<span class=\"variable\">$REDASH_DATABASE_URL</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">create_directories</span><br><span class=\"line\">create_config</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 生成必要配置文件</span></span><br><span class=\"line\">chmod +x ./setup &amp;&amp; ./setup</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">x-redash-service:</span> <span class=\"string\">&amp;redash-service</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">redash/redash:7.0.0.b18042</span></span><br><span class=\"line\"><span class=\"attr\">  depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">  env_file:</span> <span class=\"string\">/opt/redash/env</span></span><br><span class=\"line\"><span class=\"attr\">  restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  server:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"5000:5000\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      REDASH_WEB_WORKERS:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  scheduler:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">scheduler</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      QUEUES:</span> <span class=\"string\">\"celery\"</span></span><br><span class=\"line\"><span class=\"attr\">      WORKERS_COUNT:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  scheduled_worker:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">worker</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      QUEUES:</span> <span class=\"string\">\"scheduled_queries,schemas\"</span></span><br><span class=\"line\"><span class=\"attr\">      WORKERS_COUNT:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  adhoc_worker:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">worker</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      QUEUES:</span> <span class=\"string\">\"queries\"</span></span><br><span class=\"line\"><span class=\"attr\">      WORKERS_COUNT:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">redis:5.0-alpine</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">  postgres:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">postgres:9.5-alpine</span></span><br><span class=\"line\"><span class=\"attr\">    env_file:</span> <span class=\"string\">/opt/redash/env</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/redash/postgres-data:/var/lib/postgresql/data</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">  nginx:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redash/nginx:latest</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\"><span class=\"attr\">      - server:</span><span class=\"string\">redash</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 配置数据库</span></span><br><span class=\"line\">sudo docker-compose run --rm server create_db</span><br><span class=\"line\"><span class=\"comment\">## 启动</span></span><br><span class=\"line\">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p><a name=\"MAfiF\"></a></p>\n<h2 id=\"配置redash\"><a href=\"#配置redash\" class=\"headerlink\" title=\"配置redash\"></a>配置redash</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562631840989-c6c2d739-b9df-4b95-a3fa-61cdc7b35dde.png#align=left&amp;display=inline&amp;height=626&amp;name=image.png&amp;originHeight=626&amp;originWidth=508&amp;size=35369&amp;status=done&amp;width=508\" alt=\"image.png\"></p>\n<p>创建数据源<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562631903553-80df8657-983c-4d8e-b7a1-d1c6e126fb62.png#align=left&amp;display=inline&amp;height=620&amp;name=image.png&amp;originHeight=620&amp;originWidth=1328&amp;size=93814&amp;status=done&amp;width=1328\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562634341179-6242da8f-b79e-424c-bd1c-4ef8d959b6f2.png#align=left&amp;display=inline&amp;height=616&amp;name=image.png&amp;originHeight=616&amp;originWidth=965&amp;size=35160&amp;status=done&amp;width=965\" alt=\"image.png\"></p>\n<blockquote>\n<p>注意：<br>为做演示，clickhouse已导入官网提供的2018年航天数据，详见 <a href=\"https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/</a></p>\n</blockquote>\n<p><a name=\"xjUpG\"></a></p>\n<h2 id=\"演示redash\"><a href=\"#演示redash\" class=\"headerlink\" title=\"演示redash\"></a>演示redash</h2><p>创建查询 <strong>查询2007年各航空公司延误超过10分钟以上的百分比</strong> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736509902-041060bf-8e40-4025-82a0-cb9b6d2accaf.png#align=left&amp;display=inline&amp;height=480&amp;name=image.png&amp;originHeight=480&amp;originWidth=1340&amp;size=55546&amp;status=done&amp;width=1340\" alt=\"image.png\"></p>\n<p><code>SELECT Carrier, avg(DepDelay &gt; 10) * 100 AS c3 FROM ontime WHERE Year = 2018 GROUP BY Carrier ORDER BY Carrier</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736271917-dadece08-87f4-4103-a298-170d115fe073.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=1052&amp;size=28083&amp;status=done&amp;width=1052\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736536023-b44eaf65-9397-4c7a-9574-43ecfede72ef.png#align=left&amp;display=inline&amp;height=254&amp;name=image.png&amp;originHeight=254&amp;originWidth=297&amp;size=6701&amp;status=done&amp;width=297\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736589364-dcb99f35-22ca-47d8-97a5-a98491f45bfe.png#align=left&amp;display=inline&amp;height=609&amp;name=image.png&amp;originHeight=609&amp;originWidth=1347&amp;size=108611&amp;status=done&amp;width=1347\" alt=\"image.png\"></p>\n<p>发布<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736715789-e21eea66-eb35-40a5-8061-100b79f2dac7.png#align=left&amp;display=inline&amp;height=312&amp;name=image.png&amp;originHeight=312&amp;originWidth=1056&amp;size=30412&amp;status=done&amp;width=1056\" alt=\"image.png\"></p>\n<p>创建仪表盘(Dashboard)</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736796292-ac3b67dd-1d2f-41a2-a1db-a7e9456ba2cd.png#align=left&amp;display=inline&amp;height=557&amp;name=image.png&amp;originHeight=557&amp;originWidth=1342&amp;size=39921&amp;status=done&amp;width=1342\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736761829-08ae709d-eeda-46d7-a3b3-5d17e3eb38fe.png#align=left&amp;display=inline&amp;height=457&amp;name=image.png&amp;originHeight=457&amp;originWidth=1021&amp;size=43007&amp;status=done&amp;width=1021\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736856319-c2134885-f7fe-4468-9609-d1a1e155f220.png#align=left&amp;display=inline&amp;height=477&amp;name=image.png&amp;originHeight=477&amp;originWidth=1359&amp;size=90419&amp;status=done&amp;width=1359\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736915850-1639d58c-faf7-40f9-827b-5ad787fb52fb.png#align=left&amp;display=inline&amp;height=515&amp;name=image.png&amp;originHeight=515&amp;originWidth=1354&amp;size=109611&amp;status=done&amp;width=1354\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736878154-9f97437c-6b4f-419e-89bc-17f45f49947e.png#align=left&amp;display=inline&amp;height=273&amp;name=image.png&amp;originHeight=273&amp;originWidth=551&amp;size=17982&amp;status=done&amp;width=551\" alt=\"image.png\"><br>分享后的dashboard，在底下有个redash的logo<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736970500-ed1b5503-69c7-40e3-99d8-b5a7cdd58d82.png#align=left&amp;display=inline&amp;height=295&amp;name=image.png&amp;originHeight=295&amp;originWidth=500&amp;size=9731&amp;status=done&amp;width=500\" alt=\"image.png\"></p>\n<p>可以嵌入到已有系统里。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/08/redash/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d25b88cf265da1bc23f9ff3\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://redash.io/help/\" target=\"_blank\" rel=\"noopener\">Knowledge Base</a><br><a name=\"fb674066\"></a><h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2></li>\n</ul>\n<p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第31篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文是数据可视化系列第二篇,本系列会讲解 <a href=\"https://juejin.im/post/5cdfdfa4f265da1bbf68ec4b\" target=\"_blank\" rel=\"noopener\">PowerBI/Excel</a>,<a href=\"https://www.metabase.com/\" target=\"_blank\" rel=\"noopener\">Metabase</a>,<a href=\"https://anjia0532.github.io/2019/07/08/redash\">Redash</a>,<a href=\"http://superset.apache.org/\" target=\"_blank\" rel=\"noopener\">Superset</a>,<a href=\"https://juejin.im/post/5b4ee1c2f265da0f5d4cc978\" target=\"_blank\" rel=\"noopener\">CBoard</a></p>\n<p>人类都是视觉动物，讲究一图胜千言。如果没了可视化，那么你在跟领导汇报工作时，很大程度会鸡同鸭讲。<br>其实excel2016+已经是一个不错的数据分析及可视化工具了(支持几十种数据源),但是，不方便权限控制，集中，及报警。</p>\n<p>我一般将redash作为可视化工具、数据库查询编辑器(类似navicat-premium)、数据挖掘探索工具来用。<br>截止目前，自建redash支持43种数据源<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562561680709-399441ab-b14d-4d93-b797-60925f2eafd6.png#align=left&amp;display=inline&amp;height=944&amp;name=image.png&amp;originHeight=944&amp;originWidth=1133&amp;size=147027&amp;status=done&amp;width=1133\" alt=\"image.png\"></p>","more":"<p><a name=\"nxb7z\"></a></p>\n<h2 id=\"安装redash\"><a href=\"#安装redash\" class=\"headerlink\" title=\"安装redash\"></a>安装redash</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装必要工具</span></span><br><span class=\"line\">apt install -y pwgen python-pip</span><br><span class=\"line\">pip install pip -U</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 生成脚本</span></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a ./setup.sh</span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"comment\"># This script setups dockerized Redash on Ubuntu 18.04.</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -eu</span><br><span class=\"line\"></span><br><span class=\"line\">REDASH_BASE_PATH=/opt/redash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">create_directories</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -e <span class=\"variable\">$REDASH_BASE_PATH</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        sudo mkdir -p <span class=\"variable\">$REDASH_BASE_PATH</span></span><br><span class=\"line\">        sudo chown <span class=\"variable\">$USER</span>:<span class=\"variable\">$USER</span> <span class=\"variable\">$REDASH_BASE_PATH</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -e <span class=\"variable\">$REDASH_BASE_PATH</span>/postgres-data ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        mkdir <span class=\"variable\">$REDASH_BASE_PATH</span>/postgres-data</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">create_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -e <span class=\"variable\">$REDASH_BASE_PATH</span>/env ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        rm <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">        touch <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    COOKIE_SECRET=$(pwgen -1s 32)</span><br><span class=\"line\">    SECRET_KEY=$(pwgen -1s 32)</span><br><span class=\"line\">    POSTGRES_PASSWORD=$(pwgen -1s 32)</span><br><span class=\"line\">    REDASH_DATABASE_URL=<span class=\"string\">\"postgresql://postgres:<span class=\"variable\">$&#123;POSTGRES_PASSWORD&#125;</span>@postgres/postgres\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"PYTHONUNBUFFERED=0\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_LOG_LEVEL=INFO\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_REDIS_URL=redis://redis:6379/0\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"POSTGRES_PASSWORD=<span class=\"variable\">$POSTGRES_PASSWORD</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_COOKIE_SECRET=<span class=\"variable\">$COOKIE_SECRET</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_SECRET_KEY=<span class=\"variable\">$SECRET_KEY</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"REDASH_DATABASE_URL=<span class=\"variable\">$REDASH_DATABASE_URL</span>\"</span> &gt;&gt; <span class=\"variable\">$REDASH_BASE_PATH</span>/env</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">create_directories</span><br><span class=\"line\">create_config</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 生成必要配置文件</span></span><br><span class=\"line\">chmod +x ./setup &amp;&amp; ./setup</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">x-redash-service:</span> <span class=\"string\">&amp;redash-service</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">redash/redash:7.0.0.b18042</span></span><br><span class=\"line\"><span class=\"attr\">  depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">  env_file:</span> <span class=\"string\">/opt/redash/env</span></span><br><span class=\"line\"><span class=\"attr\">  restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  server:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"5000:5000\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      REDASH_WEB_WORKERS:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  scheduler:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">scheduler</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      QUEUES:</span> <span class=\"string\">\"celery\"</span></span><br><span class=\"line\"><span class=\"attr\">      WORKERS_COUNT:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  scheduled_worker:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">worker</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      QUEUES:</span> <span class=\"string\">\"scheduled_queries,schemas\"</span></span><br><span class=\"line\"><span class=\"attr\">      WORKERS_COUNT:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  adhoc_worker:</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*redash-service</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">worker</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      QUEUES:</span> <span class=\"string\">\"queries\"</span></span><br><span class=\"line\"><span class=\"attr\">      WORKERS_COUNT:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">redis:5.0-alpine</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">  postgres:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">postgres:9.5-alpine</span></span><br><span class=\"line\"><span class=\"attr\">    env_file:</span> <span class=\"string\">/opt/redash/env</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/redash/postgres-data:/var/lib/postgresql/data</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">  nginx:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redash/nginx:latest</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\"><span class=\"attr\">      - server:</span><span class=\"string\">redash</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 配置数据库</span></span><br><span class=\"line\">sudo docker-compose run --rm server create_db</span><br><span class=\"line\"><span class=\"comment\">## 启动</span></span><br><span class=\"line\">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p><a name=\"MAfiF\"></a></p>\n<h2 id=\"配置redash\"><a href=\"#配置redash\" class=\"headerlink\" title=\"配置redash\"></a>配置redash</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562631840989-c6c2d739-b9df-4b95-a3fa-61cdc7b35dde.png#align=left&amp;display=inline&amp;height=626&amp;name=image.png&amp;originHeight=626&amp;originWidth=508&amp;size=35369&amp;status=done&amp;width=508\" alt=\"image.png\"></p>\n<p>创建数据源<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562631903553-80df8657-983c-4d8e-b7a1-d1c6e126fb62.png#align=left&amp;display=inline&amp;height=620&amp;name=image.png&amp;originHeight=620&amp;originWidth=1328&amp;size=93814&amp;status=done&amp;width=1328\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562634341179-6242da8f-b79e-424c-bd1c-4ef8d959b6f2.png#align=left&amp;display=inline&amp;height=616&amp;name=image.png&amp;originHeight=616&amp;originWidth=965&amp;size=35160&amp;status=done&amp;width=965\" alt=\"image.png\"></p>\n<blockquote>\n<p>注意：<br>为做演示，clickhouse已导入官网提供的2018年航天数据，详见 <a href=\"https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/</a></p>\n</blockquote>\n<p><a name=\"xjUpG\"></a></p>\n<h2 id=\"演示redash\"><a href=\"#演示redash\" class=\"headerlink\" title=\"演示redash\"></a>演示redash</h2><p>创建查询 <strong>查询2007年各航空公司延误超过10分钟以上的百分比</strong> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736509902-041060bf-8e40-4025-82a0-cb9b6d2accaf.png#align=left&amp;display=inline&amp;height=480&amp;name=image.png&amp;originHeight=480&amp;originWidth=1340&amp;size=55546&amp;status=done&amp;width=1340\" alt=\"image.png\"></p>\n<p><code>SELECT Carrier, avg(DepDelay &gt; 10) * 100 AS c3 FROM ontime WHERE Year = 2018 GROUP BY Carrier ORDER BY Carrier</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736271917-dadece08-87f4-4103-a298-170d115fe073.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=1052&amp;size=28083&amp;status=done&amp;width=1052\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736536023-b44eaf65-9397-4c7a-9574-43ecfede72ef.png#align=left&amp;display=inline&amp;height=254&amp;name=image.png&amp;originHeight=254&amp;originWidth=297&amp;size=6701&amp;status=done&amp;width=297\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736589364-dcb99f35-22ca-47d8-97a5-a98491f45bfe.png#align=left&amp;display=inline&amp;height=609&amp;name=image.png&amp;originHeight=609&amp;originWidth=1347&amp;size=108611&amp;status=done&amp;width=1347\" alt=\"image.png\"></p>\n<p>发布<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736715789-e21eea66-eb35-40a5-8061-100b79f2dac7.png#align=left&amp;display=inline&amp;height=312&amp;name=image.png&amp;originHeight=312&amp;originWidth=1056&amp;size=30412&amp;status=done&amp;width=1056\" alt=\"image.png\"></p>\n<p>创建仪表盘(Dashboard)</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736796292-ac3b67dd-1d2f-41a2-a1db-a7e9456ba2cd.png#align=left&amp;display=inline&amp;height=557&amp;name=image.png&amp;originHeight=557&amp;originWidth=1342&amp;size=39921&amp;status=done&amp;width=1342\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736761829-08ae709d-eeda-46d7-a3b3-5d17e3eb38fe.png#align=left&amp;display=inline&amp;height=457&amp;name=image.png&amp;originHeight=457&amp;originWidth=1021&amp;size=43007&amp;status=done&amp;width=1021\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736856319-c2134885-f7fe-4468-9609-d1a1e155f220.png#align=left&amp;display=inline&amp;height=477&amp;name=image.png&amp;originHeight=477&amp;originWidth=1359&amp;size=90419&amp;status=done&amp;width=1359\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736915850-1639d58c-faf7-40f9-827b-5ad787fb52fb.png#align=left&amp;display=inline&amp;height=515&amp;name=image.png&amp;originHeight=515&amp;originWidth=1354&amp;size=109611&amp;status=done&amp;width=1354\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736878154-9f97437c-6b4f-419e-89bc-17f45f49947e.png#align=left&amp;display=inline&amp;height=273&amp;name=image.png&amp;originHeight=273&amp;originWidth=551&amp;size=17982&amp;status=done&amp;width=551\" alt=\"image.png\"><br>分享后的dashboard，在底下有个redash的logo<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562736970500-ed1b5503-69c7-40e3-99d8-b5a7cdd58d82.png#align=left&amp;display=inline&amp;height=295&amp;name=image.png&amp;originHeight=295&amp;originWidth=500&amp;size=9731&amp;status=done&amp;width=500\" alt=\"image.png\"></p>\n<p>可以嵌入到已有系统里。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/08/redash/\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d25b88cf265da1bc23f9ff3\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://redash.io/help/\" target=\"_blank\" rel=\"noopener\">Knowledge Base</a><br><a name=\"fb674066\"></a><h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2></li>\n</ul>\n<p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。<br>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>"},{"title":"rke安装k8s","date":"2018-01-05T08:56:28.000Z","_content":"\n> 安装Kubernetes是公认的对运维和DevOps而言最棘手的问题之一。因为Kubernetes可以在各种平台和操作系统上运行，所以在安装过程中需要考虑很多因素。\n>\n> 在这篇文章中，我将介绍一种新的、用于在裸机、虚拟机、公私有云上安装Kubernetes的轻量级工具——Rancher Kubernetes Engine（RKE）。RKE是一个用Golang编写的Kubernetes安装程序，极为简单易用，用户不再需要做大量的准备工作，即可拥有闪电般快速的Kubernetes安装部署体验。\n\n<!--more-->\n\nRancher Kubernetes Engine (RKE) 旨在简化k8s的安装。但是根据官方blog和github文档，安装遇到很多问题，遂进行记录，以备查阅。\n\n环境准备(node必须2个+，之前用一个node会报 certificate signed by unknown authority)\n\n| 主机名        | 主机ip         | OS                                   | docker version |\n| ---------- | ------------ | ------------------------------------ | -------------- |\n| k8s-server | 172.60.20.12 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.03.2-ce     |\n| k8s-worker | 172.60.20.13 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.03.2-ce     |\n\n## 下载RKE\n\n最新rke 0.0.9 但是我一直跑不起来，用0.0.8可以\n\n```bash\nwget -O rke https://github.com/rancher/rke/releases/download/v0.0.8-dev/rke_linux-amd64\n\nchmod +x ./rke\n\nwget https://raw.githubusercontent.com/rancher/rke/master/cluster.yml\n```\n\n\n\n## 开启ssh-key\n\n如果未开启ssh-key登陆，会报 \n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn6p3zgd3ej20kz02474n.jpg)\n\n### client 端\n\n如果未安装 ssh-server，则通过 `sudo apt-get install openssh-server -y`安装\n\n```bash\ncd ~/.ssh\nssh-keygen -t rsa -b 2048\nscp  ~/.ssh/id_rsa.pub server_name@server_ip:/path/to/rsa/key/id_rsa.pub\n```\n\n## server 端\n\n```bash\nmkdir ~/.ssh/\ncat /path/to/rsa/key/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod 0600 ~/.ssh/*\nrm -rf /path/to/rsa/key/id_rsa.pub\nsudo service ssh restart\n```\n\n参考 [SSH公钥(public key)验证](http://www.cnblogs.com/xiongmaolinux/p/5345125.html)\n\n\n\n## 禁用swap\n\n[Failed to deploy addon execute job: Failed to get job complete status: <nil>](https://github.com/rancher/rke/issues/130)\n\n```bash\n$ docker logs kubelet\n\nI1212 01:50:20.857798   19652 server.go:422] --cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /\nerror: failed to run Kubelet: Running with swap on is not supported, please disable swap! or set --fail-swap-on flag to false. /proc/swaps contained: [Filename\t\t\t\tType\t\tSize\tUsed\tPriority /dev/sda5                               partition\t1046524\t2000\t-1]\n```\n\n```bash\nsudo swapoff -a\n```\n\n\n\n参考 [升级到Kubernetes1.8.4的配置细节差异以及k8s几个不常见的坑](http://blog.csdn.net/cleverfoxloving/article/details/78424293?locationNum=2&fps=1)\n\n\n\n## 运行\n\ncluster.yml\n\n```yaml\n---\nauth:\n  strategy: x509\n\nnetwork:\n  plugin: flannel\n\nssh_key_path: /home/root/.ssh/id_rsa\n\nnodes:\n  - address: 172.60.20.12\n    user: root\n    role: [controlplane, etcd]\n  - address: 172.60.20.13\n    user: root\n    role: [worker]\n\nservices:\n  etcd:\n    image: quay.io/coreos/etcd:latest\n  kube-api:\n    image: rancher/k8s:v1.8.3-rancher2\n    service_cluster_ip_range: 10.233.0.0/18\n    extra_args:\n      v: 4\n  kube-controller:\n    image: rancher/k8s:v1.8.3-rancher2\n    cluster_cidr: 10.233.64.0/18\n    service_cluster_ip_range: 10.233.0.0/18\n  scheduler:\n    image: rancher/k8s:v1.8.3-rancher2\n  kubelet:\n    image: rancher/k8s:v1.8.3-rancher2\n    cluster_domain: cluster.local\n    cluster_dns_server: 10.233.0.3\n    infra_container_image: anjia0532/pause-amd64:3.0\n  kubeproxy:\n    image: rancher/k8s:v1.8.3-rancher2\n\nsystem_images:\n  alpine: alpine:latest\n  nginx_proxy: rancher/rke-nginx-proxy:0.1.0\n  cert_downloader: rancher/rke-cert-deployer:0.1.0\n  kubedns_image: anjia0532/k8s-dns-kube-dns-amd64:1.14.5\n  dnsmasq_image: anjia0532/k8s-dns-dnsmasq-nanny-amd64:1.14.5\n  kubedns_sidecar_image: anjia0532/k8s-dns-sidecar-amd64:1.14.5\n  kubedns_autoscaler_image: anjia0532/cluster-proportional-autoscaler-amd64:1.0.0\n\naddons: |-\n    ---\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: my-nginx\n      namespace: default\n    spec:\n      containers:\n      - name: my-nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n\n```\n\n```bash\n./rke up --config ./cluster.yml\n```\n\n```\nINFO[0041] [addons] Saving addon ConfigMap to Kubernetes \nINFO[0041] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-network-plugin \nINFO[0041] [addons] Executing deploy job..              \nINFO[0046] [addons] Setting up KubeDNS                  \nINFO[0046] [addons] Saving addon ConfigMap to Kubernetes \nINFO[0046] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-kubedns-addon \nINFO[0046] [addons] Executing deploy job..              \nINFO[0051] [addons] KubeDNS deployed successfully..     \nINFO[0051] [addons] Setting up user addons..            \nINFO[0051] [addons] Saving addon ConfigMap to Kubernetes \nINFO[0051] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-user-addon \nINFO[0051] [addons] Executing deploy job..              \nINFO[0056] [addons] User addon deployed successfully..  \nINFO[0056] Finished building Kubernetes cluster successfully \n```\n\n\n\n```bash\n$ docker ps\nCONTAINER ID        IMAGE                                                                                                                     COMMAND                  CREATED             STATUS              PORTS                              NAMES\n437cde03416b        anjia0532/k8s-dns-sidecar-amd64@sha256:6f49768b598f9b74ee3774c19406a1512567e73f103544cf6bd3e04420ed669a                   \"/sidecar --v=2 --...\"   37 minutes ago      Up 37 minutes                                          k8s_sidecar_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\n08db9a075ecd        nginx@sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb                                             \"nginx -g 'daemon ...\"   37 minutes ago      Up 37 minutes                                          k8s_my-nginx_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0\n05e25488ec1a        anjia0532/k8s-dns-dnsmasq-nanny-amd64@sha256:667c279741b1efe1e667dabc022f04f04ff0d1d35af934c0f2508bee903c6c23             \"/dnsmasq-nanny -v...\"   37 minutes ago      Up 37 minutes                                          k8s_dnsmasq_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\ne7064c9f4738        anjia0532/cluster-proportional-autoscaler-amd64@sha256:03795e1fbcc5ad4071ec969012c60dc53c8dce1b542c94701164b1224c53abaf   \"/cluster-proporti...\"   37 minutes ago      Up 37 minutes                                          k8s_autoscaler_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0\n4b845893a51f        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0\nc2ded5b27a95        anjia0532/k8s-dns-kube-dns-amd64@sha256:d965a1a9b53b254e2bedcbf86d0eba9378ea47084771e20f744cfbf7a1025ba6                  \"/kube-dns --domai...\"   38 minutes ago      Up 38 minutes                                          k8s_kubedns_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\n97736e09c32b        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\n1f16ce846485        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0\ndf03a750637d        quay.io/coreos/flannel-cni@sha256:77bf1017845afb65e2603d8573e9a2d649eb645a4f7fe4843f17e276b8126968                        \"/install-cni.sh\"        38 minutes ago      Up 38 minutes                                          k8s_install-cni_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0\ne4d8b49b1f63        quay.io/coreos/flannel@sha256:60d77552f4ebb6ed4f0562876c6e2e0b0e0ab873cb01808f23f55c8adabd1f59                            \"/opt/bin/flanneld...\"   38 minutes ago      Up 38 minutes                                          k8s_kube-flannel_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0\n90b858291c7f        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0\nfd1fd7b1928c        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-proxy --v=2 ...\"   39 minutes ago      Up 39 minutes                                          kube-proxy\n1d1d03d6de8c        rancher/k8s:v1.8.3-rancher2                                                                                               \"kubelet --v=2 --a...\"   39 minutes ago      Up 39 minutes                                          kubelet\nc8f19935efd4        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-scheduler --...\"   39 minutes ago      Up 39 minutes                                          scheduler\n1d234c5c8247        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-controller-m...\"   39 minutes ago      Up 39 minutes                                          kube-controller\nc3eb4391249f        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-apiserver --...\"   39 minutes ago      Up 39 minutes                                          kube-api\n8ff019fee9d8        quay.io/coreos/etcd:latest                                                                                                \"/usr/local/bin/et...\"   39 minutes ago      Up 39 minutes       0.0.0.0:2379-2380->2379-2380/tcp   etcd\n\n```\n\n```bash\n$ docker images\nREPOSITORY                                        TAG                 IMAGE ID            CREATED             SIZE\nquay.io/coreos/etcd                               latest              30d9f8842f26        3 days ago          37.2 MB\nnginx                                             latest              3f8a4339aadd        10 days ago         108 MB\nrancher/rke-service-sidekick                      0.1.0               0f60235e607e        3 weeks ago         746 B\nalpine                                            latest              e21c333399e0        5 weeks ago         4.14 MB\nrancher/rke-cert-deployer                         0.1.0               c8907e804cfe        5 weeks ago         9.09 MB\nrancher/k8s                                       v1.8.3-rancher2     bbbe40353d71        7 weeks ago         1.54 GB\nquay.io/coreos/flannel                            v0.9.1              2b736d06ca4c        7 weeks ago         51.3 MB\nanjia0532/k8s-dns-sidecar-amd64                   1.14.5              fed89e8b4248        3 months ago        41.8 MB\nanjia0532/k8s-dns-kube-dns-amd64                  1.14.5              512cd7425a73        3 months ago        49.4 MB\nanjia0532/k8s-dns-dnsmasq-nanny-amd64             1.14.5              459944ce8cc4        3 months ago        41.4 MB\nquay.io/coreos/flannel-cni                        v0.2.0              7252edf978c0        4 months ago        49.8 MB\nanjia0532/cluster-proportional-autoscaler-amd64   1.0.0               e183460c484d        14 months ago       48.2 MB\nanjia0532/pause-amd64                             3.0                 99e59f495ffa        20 months ago       747 kB\n```\n\n参考 \n\n- [RKE快速上手指南：开源的轻量级K8S安装程序](https://www.cnrancher.com/an-introduction-to-rke/)\n- [rancher/rke#README.md](https://github.com/rancher/rke/blob/master/README.md)\n- [An Introduction to Rancher Kubernetes Engine (RKE)](https://rancher.com/an-introduction-to-rke/)\n\n","source":"_posts/rke.md","raw":"---\ntitle: rke安装k8s\ndate: 2018-01-05 16:56:28\ntags: [rancher,rke,k8s,kubernetes]\n---\n\n> 安装Kubernetes是公认的对运维和DevOps而言最棘手的问题之一。因为Kubernetes可以在各种平台和操作系统上运行，所以在安装过程中需要考虑很多因素。\n>\n> 在这篇文章中，我将介绍一种新的、用于在裸机、虚拟机、公私有云上安装Kubernetes的轻量级工具——Rancher Kubernetes Engine（RKE）。RKE是一个用Golang编写的Kubernetes安装程序，极为简单易用，用户不再需要做大量的准备工作，即可拥有闪电般快速的Kubernetes安装部署体验。\n\n<!--more-->\n\nRancher Kubernetes Engine (RKE) 旨在简化k8s的安装。但是根据官方blog和github文档，安装遇到很多问题，遂进行记录，以备查阅。\n\n环境准备(node必须2个+，之前用一个node会报 certificate signed by unknown authority)\n\n| 主机名        | 主机ip         | OS                                   | docker version |\n| ---------- | ------------ | ------------------------------------ | -------------- |\n| k8s-server | 172.60.20.12 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.03.2-ce     |\n| k8s-worker | 172.60.20.13 | ubuntu 17.04 4.9.0-12-generic x86_64 | 17.03.2-ce     |\n\n## 下载RKE\n\n最新rke 0.0.9 但是我一直跑不起来，用0.0.8可以\n\n```bash\nwget -O rke https://github.com/rancher/rke/releases/download/v0.0.8-dev/rke_linux-amd64\n\nchmod +x ./rke\n\nwget https://raw.githubusercontent.com/rancher/rke/master/cluster.yml\n```\n\n\n\n## 开启ssh-key\n\n如果未开启ssh-key登陆，会报 \n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn6p3zgd3ej20kz02474n.jpg)\n\n### client 端\n\n如果未安装 ssh-server，则通过 `sudo apt-get install openssh-server -y`安装\n\n```bash\ncd ~/.ssh\nssh-keygen -t rsa -b 2048\nscp  ~/.ssh/id_rsa.pub server_name@server_ip:/path/to/rsa/key/id_rsa.pub\n```\n\n## server 端\n\n```bash\nmkdir ~/.ssh/\ncat /path/to/rsa/key/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod 0600 ~/.ssh/*\nrm -rf /path/to/rsa/key/id_rsa.pub\nsudo service ssh restart\n```\n\n参考 [SSH公钥(public key)验证](http://www.cnblogs.com/xiongmaolinux/p/5345125.html)\n\n\n\n## 禁用swap\n\n[Failed to deploy addon execute job: Failed to get job complete status: <nil>](https://github.com/rancher/rke/issues/130)\n\n```bash\n$ docker logs kubelet\n\nI1212 01:50:20.857798   19652 server.go:422] --cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /\nerror: failed to run Kubelet: Running with swap on is not supported, please disable swap! or set --fail-swap-on flag to false. /proc/swaps contained: [Filename\t\t\t\tType\t\tSize\tUsed\tPriority /dev/sda5                               partition\t1046524\t2000\t-1]\n```\n\n```bash\nsudo swapoff -a\n```\n\n\n\n参考 [升级到Kubernetes1.8.4的配置细节差异以及k8s几个不常见的坑](http://blog.csdn.net/cleverfoxloving/article/details/78424293?locationNum=2&fps=1)\n\n\n\n## 运行\n\ncluster.yml\n\n```yaml\n---\nauth:\n  strategy: x509\n\nnetwork:\n  plugin: flannel\n\nssh_key_path: /home/root/.ssh/id_rsa\n\nnodes:\n  - address: 172.60.20.12\n    user: root\n    role: [controlplane, etcd]\n  - address: 172.60.20.13\n    user: root\n    role: [worker]\n\nservices:\n  etcd:\n    image: quay.io/coreos/etcd:latest\n  kube-api:\n    image: rancher/k8s:v1.8.3-rancher2\n    service_cluster_ip_range: 10.233.0.0/18\n    extra_args:\n      v: 4\n  kube-controller:\n    image: rancher/k8s:v1.8.3-rancher2\n    cluster_cidr: 10.233.64.0/18\n    service_cluster_ip_range: 10.233.0.0/18\n  scheduler:\n    image: rancher/k8s:v1.8.3-rancher2\n  kubelet:\n    image: rancher/k8s:v1.8.3-rancher2\n    cluster_domain: cluster.local\n    cluster_dns_server: 10.233.0.3\n    infra_container_image: anjia0532/pause-amd64:3.0\n  kubeproxy:\n    image: rancher/k8s:v1.8.3-rancher2\n\nsystem_images:\n  alpine: alpine:latest\n  nginx_proxy: rancher/rke-nginx-proxy:0.1.0\n  cert_downloader: rancher/rke-cert-deployer:0.1.0\n  kubedns_image: anjia0532/k8s-dns-kube-dns-amd64:1.14.5\n  dnsmasq_image: anjia0532/k8s-dns-dnsmasq-nanny-amd64:1.14.5\n  kubedns_sidecar_image: anjia0532/k8s-dns-sidecar-amd64:1.14.5\n  kubedns_autoscaler_image: anjia0532/cluster-proportional-autoscaler-amd64:1.0.0\n\naddons: |-\n    ---\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: my-nginx\n      namespace: default\n    spec:\n      containers:\n      - name: my-nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n\n```\n\n```bash\n./rke up --config ./cluster.yml\n```\n\n```\nINFO[0041] [addons] Saving addon ConfigMap to Kubernetes \nINFO[0041] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-network-plugin \nINFO[0041] [addons] Executing deploy job..              \nINFO[0046] [addons] Setting up KubeDNS                  \nINFO[0046] [addons] Saving addon ConfigMap to Kubernetes \nINFO[0046] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-kubedns-addon \nINFO[0046] [addons] Executing deploy job..              \nINFO[0051] [addons] KubeDNS deployed successfully..     \nINFO[0051] [addons] Setting up user addons..            \nINFO[0051] [addons] Saving addon ConfigMap to Kubernetes \nINFO[0051] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-user-addon \nINFO[0051] [addons] Executing deploy job..              \nINFO[0056] [addons] User addon deployed successfully..  \nINFO[0056] Finished building Kubernetes cluster successfully \n```\n\n\n\n```bash\n$ docker ps\nCONTAINER ID        IMAGE                                                                                                                     COMMAND                  CREATED             STATUS              PORTS                              NAMES\n437cde03416b        anjia0532/k8s-dns-sidecar-amd64@sha256:6f49768b598f9b74ee3774c19406a1512567e73f103544cf6bd3e04420ed669a                   \"/sidecar --v=2 --...\"   37 minutes ago      Up 37 minutes                                          k8s_sidecar_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\n08db9a075ecd        nginx@sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb                                             \"nginx -g 'daemon ...\"   37 minutes ago      Up 37 minutes                                          k8s_my-nginx_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0\n05e25488ec1a        anjia0532/k8s-dns-dnsmasq-nanny-amd64@sha256:667c279741b1efe1e667dabc022f04f04ff0d1d35af934c0f2508bee903c6c23             \"/dnsmasq-nanny -v...\"   37 minutes ago      Up 37 minutes                                          k8s_dnsmasq_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\ne7064c9f4738        anjia0532/cluster-proportional-autoscaler-amd64@sha256:03795e1fbcc5ad4071ec969012c60dc53c8dce1b542c94701164b1224c53abaf   \"/cluster-proporti...\"   37 minutes ago      Up 37 minutes                                          k8s_autoscaler_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0\n4b845893a51f        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0\nc2ded5b27a95        anjia0532/k8s-dns-kube-dns-amd64@sha256:d965a1a9b53b254e2bedcbf86d0eba9378ea47084771e20f744cfbf7a1025ba6                  \"/kube-dns --domai...\"   38 minutes ago      Up 38 minutes                                          k8s_kubedns_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\n97736e09c32b        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0\n1f16ce846485        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0\ndf03a750637d        quay.io/coreos/flannel-cni@sha256:77bf1017845afb65e2603d8573e9a2d649eb645a4f7fe4843f17e276b8126968                        \"/install-cni.sh\"        38 minutes ago      Up 38 minutes                                          k8s_install-cni_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0\ne4d8b49b1f63        quay.io/coreos/flannel@sha256:60d77552f4ebb6ed4f0562876c6e2e0b0e0ab873cb01808f23f55c8adabd1f59                            \"/opt/bin/flanneld...\"   38 minutes ago      Up 38 minutes                                          k8s_kube-flannel_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0\n90b858291c7f        anjia0532/pause-amd64:3.0                                                                                                 \"/pause\"                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0\nfd1fd7b1928c        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-proxy --v=2 ...\"   39 minutes ago      Up 39 minutes                                          kube-proxy\n1d1d03d6de8c        rancher/k8s:v1.8.3-rancher2                                                                                               \"kubelet --v=2 --a...\"   39 minutes ago      Up 39 minutes                                          kubelet\nc8f19935efd4        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-scheduler --...\"   39 minutes ago      Up 39 minutes                                          scheduler\n1d234c5c8247        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-controller-m...\"   39 minutes ago      Up 39 minutes                                          kube-controller\nc3eb4391249f        rancher/k8s:v1.8.3-rancher2                                                                                               \"kube-apiserver --...\"   39 minutes ago      Up 39 minutes                                          kube-api\n8ff019fee9d8        quay.io/coreos/etcd:latest                                                                                                \"/usr/local/bin/et...\"   39 minutes ago      Up 39 minutes       0.0.0.0:2379-2380->2379-2380/tcp   etcd\n\n```\n\n```bash\n$ docker images\nREPOSITORY                                        TAG                 IMAGE ID            CREATED             SIZE\nquay.io/coreos/etcd                               latest              30d9f8842f26        3 days ago          37.2 MB\nnginx                                             latest              3f8a4339aadd        10 days ago         108 MB\nrancher/rke-service-sidekick                      0.1.0               0f60235e607e        3 weeks ago         746 B\nalpine                                            latest              e21c333399e0        5 weeks ago         4.14 MB\nrancher/rke-cert-deployer                         0.1.0               c8907e804cfe        5 weeks ago         9.09 MB\nrancher/k8s                                       v1.8.3-rancher2     bbbe40353d71        7 weeks ago         1.54 GB\nquay.io/coreos/flannel                            v0.9.1              2b736d06ca4c        7 weeks ago         51.3 MB\nanjia0532/k8s-dns-sidecar-amd64                   1.14.5              fed89e8b4248        3 months ago        41.8 MB\nanjia0532/k8s-dns-kube-dns-amd64                  1.14.5              512cd7425a73        3 months ago        49.4 MB\nanjia0532/k8s-dns-dnsmasq-nanny-amd64             1.14.5              459944ce8cc4        3 months ago        41.4 MB\nquay.io/coreos/flannel-cni                        v0.2.0              7252edf978c0        4 months ago        49.8 MB\nanjia0532/cluster-proportional-autoscaler-amd64   1.0.0               e183460c484d        14 months ago       48.2 MB\nanjia0532/pause-amd64                             3.0                 99e59f495ffa        20 months ago       747 kB\n```\n\n参考 \n\n- [RKE快速上手指南：开源的轻量级K8S安装程序](https://www.cnrancher.com/an-introduction-to-rke/)\n- [rancher/rke#README.md](https://github.com/rancher/rke/blob/master/README.md)\n- [An Introduction to Rancher Kubernetes Engine (RKE)](https://rancher.com/an-introduction-to-rke/)\n\n","slug":"rke","published":1,"updated":"2019-08-16T05:56:21.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojjb00e124dop7tjh5lg","content":"<blockquote>\n<p>安装Kubernetes是公认的对运维和DevOps而言最棘手的问题之一。因为Kubernetes可以在各种平台和操作系统上运行，所以在安装过程中需要考虑很多因素。</p>\n<p>在这篇文章中，我将介绍一种新的、用于在裸机、虚拟机、公私有云上安装Kubernetes的轻量级工具——Rancher Kubernetes Engine（RKE）。RKE是一个用Golang编写的Kubernetes安装程序，极为简单易用，用户不再需要做大量的准备工作，即可拥有闪电般快速的Kubernetes安装部署体验。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>Rancher Kubernetes Engine (RKE) 旨在简化k8s的安装。但是根据官方blog和github文档，安装遇到很多问题，遂进行记录，以备查阅。</p>\n<p>环境准备(node必须2个+，之前用一个node会报 certificate signed by unknown authority)</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k8s-server</td>\n<td>172.60.20.12</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.03.2-ce</td>\n</tr>\n<tr>\n<td>k8s-worker</td>\n<td>172.60.20.13</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.03.2-ce</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下载RKE\"><a href=\"#下载RKE\" class=\"headerlink\" title=\"下载RKE\"></a>下载RKE</h2><p>最新rke 0.0.9 但是我一直跑不起来，用0.0.8可以</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O rke https://github.com/rancher/rke/releases/download/v0.0.8-dev/rke_linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x ./rke</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://raw.githubusercontent.com/rancher/rke/master/cluster.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启ssh-key\"><a href=\"#开启ssh-key\" class=\"headerlink\" title=\"开启ssh-key\"></a>开启ssh-key</h2><p>如果未开启ssh-key登陆，会报 </p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn6p3zgd3ej20kz02474n.jpg\" alt=\"\"></p>\n<h3 id=\"client-端\"><a href=\"#client-端\" class=\"headerlink\" title=\"client 端\"></a>client 端</h3><p>如果未安装 ssh-server，则通过 <code>sudo apt-get install openssh-server -y</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">ssh-keygen -t rsa -b 2048</span><br><span class=\"line\">scp  ~/.ssh/id_rsa.pub server_name@server_ip:/path/to/rsa/key/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"server-端\"><a href=\"#server-端\" class=\"headerlink\" title=\"server 端\"></a>server 端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir ~/.ssh/</span><br><span class=\"line\">cat /path/to/rsa/key/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 0600 ~/.ssh/*</span><br><span class=\"line\">rm -rf /path/to/rsa/key/id_rsa.pub</span><br><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://www.cnblogs.com/xiongmaolinux/p/5345125.html\" target=\"_blank\" rel=\"noopener\">SSH公钥(public key)验证</a></p>\n<h2 id=\"禁用swap\"><a href=\"#禁用swap\" class=\"headerlink\" title=\"禁用swap\"></a>禁用swap</h2><p><a href=\"https://github.com/rancher/rke/issues/130\" target=\"_blank\" rel=\"noopener\">Failed to deploy addon execute job: Failed to get job complete status: <nil></nil></a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker logs kubelet</span><br><span class=\"line\"></span><br><span class=\"line\">I1212 01:50:20.857798   19652 server.go:422] --cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /</span><br><span class=\"line\">error: failed to run Kubelet: Running with swap on is not supported, please <span class=\"built_in\">disable</span> swap! or <span class=\"built_in\">set</span> --fail-swap-on flag to <span class=\"literal\">false</span>. /proc/swaps contained: [Filename\t\t\t\tType\t\tSize\tUsed\tPriority /dev/sda5                               partition\t1046524\t2000\t-1]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://blog.csdn.net/cleverfoxloving/article/details/78424293?locationNum=2&amp;fps=1\" target=\"_blank\" rel=\"noopener\">升级到Kubernetes1.8.4的配置细节差异以及k8s几个不常见的坑</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>cluster.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">auth:</span></span><br><span class=\"line\"><span class=\"attr\">  strategy:</span> <span class=\"string\">x509</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">network:</span></span><br><span class=\"line\"><span class=\"attr\">  plugin:</span> <span class=\"string\">flannel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ssh_key_path:</span> <span class=\"string\">/home/root/.ssh/id_rsa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nodes:</span></span><br><span class=\"line\"><span class=\"attr\">  - address:</span> <span class=\"number\">172.60</span><span class=\"number\">.20</span><span class=\"number\">.12</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">    role:</span> <span class=\"string\">[controlplane,</span> <span class=\"string\">etcd]</span></span><br><span class=\"line\"><span class=\"attr\">  - address:</span> <span class=\"number\">172.60</span><span class=\"number\">.20</span><span class=\"number\">.13</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">    role:</span> <span class=\"string\">[worker]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  etcd:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">quay.io/coreos/etcd:latest</span></span><br><span class=\"line\"><span class=\"attr\">  kube-api:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">    service_cluster_ip_range:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\"><span class=\"attr\">    extra_args:</span></span><br><span class=\"line\"><span class=\"attr\">      v:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  kube-controller:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">    cluster_cidr:</span> <span class=\"number\">10.233</span><span class=\"number\">.64</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\"><span class=\"attr\">    service_cluster_ip_range:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\"><span class=\"attr\">  scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">  kubelet:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">    cluster_domain:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\"><span class=\"attr\">    cluster_dns_server:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"attr\">    infra_container_image:</span> <span class=\"string\">anjia0532/pause-amd64:3.0</span></span><br><span class=\"line\"><span class=\"attr\">  kubeproxy:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">system_images:</span></span><br><span class=\"line\"><span class=\"attr\">  alpine:</span> <span class=\"attr\">alpine:latest</span></span><br><span class=\"line\"><span class=\"attr\">  nginx_proxy:</span> <span class=\"string\">rancher/rke-nginx-proxy:0.1.0</span></span><br><span class=\"line\"><span class=\"attr\">  cert_downloader:</span> <span class=\"string\">rancher/rke-cert-deployer:0.1.0</span></span><br><span class=\"line\"><span class=\"attr\">  kubedns_image:</span> <span class=\"string\">anjia0532/k8s-dns-kube-dns-amd64:1.14.5</span></span><br><span class=\"line\"><span class=\"attr\">  dnsmasq_image:</span> <span class=\"string\">anjia0532/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span></span><br><span class=\"line\"><span class=\"attr\">  kubedns_sidecar_image:</span> <span class=\"string\">anjia0532/k8s-dns-sidecar-amd64:1.14.5</span></span><br><span class=\"line\"><span class=\"attr\">  kubedns_autoscaler_image:</span> <span class=\"string\">anjia0532/cluster-proportional-autoscaler-amd64:1.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addons:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span><span class=\"bullet\">--</span></span><br><span class=\"line\"><span class=\"attr\">    apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">    kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">my-nginx</span></span><br><span class=\"line\"><span class=\"attr\">      namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">my-nginx</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"attr\">        - containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./rke up --config ./cluster.yml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO[0041] [addons] Saving addon ConfigMap to Kubernetes </span><br><span class=\"line\">INFO[0041] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-network-plugin </span><br><span class=\"line\">INFO[0041] [addons] Executing deploy job..              </span><br><span class=\"line\">INFO[0046] [addons] Setting up KubeDNS                  </span><br><span class=\"line\">INFO[0046] [addons] Saving addon ConfigMap to Kubernetes </span><br><span class=\"line\">INFO[0046] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-kubedns-addon </span><br><span class=\"line\">INFO[0046] [addons] Executing deploy job..              </span><br><span class=\"line\">INFO[0051] [addons] KubeDNS deployed successfully..     </span><br><span class=\"line\">INFO[0051] [addons] Setting up user addons..            </span><br><span class=\"line\">INFO[0051] [addons] Saving addon ConfigMap to Kubernetes </span><br><span class=\"line\">INFO[0051] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-user-addon </span><br><span class=\"line\">INFO[0051] [addons] Executing deploy job..              </span><br><span class=\"line\">INFO[0056] [addons] User addon deployed successfully..  </span><br><span class=\"line\">INFO[0056] Finished building Kubernetes cluster successfully</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                                                                                                                     COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class=\"line\">437cde03416b        anjia0532/k8s-dns-sidecar-amd64@sha256:6f49768b598f9b74ee3774c19406a1512567e73f103544cf6bd3e04420ed669a                   <span class=\"string\">\"/sidecar --v=2 --...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_sidecar_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">08db9a075ecd        nginx@sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb                                             <span class=\"string\">\"nginx -g 'daemon ...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_my-nginx_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">05e25488ec1a        anjia0532/k8s-dns-dnsmasq-nanny-amd64@sha256:667c279741b1efe1e667dabc022f04f04ff0d1d35af934c0f2508bee903c6c23             <span class=\"string\">\"/dnsmasq-nanny -v...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_dnsmasq_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">e7064c9f4738        anjia0532/cluster-proportional-autoscaler-amd64@sha256:03795e1fbcc5ad4071ec969012c60dc53c8dce1b542c94701164b1224c53abaf   <span class=\"string\">\"/cluster-proporti...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_autoscaler_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">4b845893a51f        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">c2ded5b27a95        anjia0532/k8s-dns-kube-dns-amd64@sha256:d965a1a9b53b254e2bedcbf86d0eba9378ea47084771e20f744cfbf7a1025ba6                  <span class=\"string\">\"/kube-dns --domai...\"</span>   38 minutes ago      Up 38 minutes                                          k8s_kubedns_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">97736e09c32b        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">1f16ce846485        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">df03a750637d        quay.io/coreos/flannel-cni@sha256:77bf1017845afb65e2603d8573e9a2d649eb645a4f7fe4843f17e276b8126968                        <span class=\"string\">\"/install-cni.sh\"</span>        38 minutes ago      Up 38 minutes                                          k8s_install-cni_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">e4d8b49b1f63        quay.io/coreos/flannel@sha256:60d77552f4ebb6ed4f0562876c6e2e0b0e0ab873cb01808f23f55c8adabd1f59                            <span class=\"string\">\"/opt/bin/flanneld...\"</span>   38 minutes ago      Up 38 minutes                                          k8s_kube-flannel_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">90b858291c7f        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">fd1fd7b1928c        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-proxy --v=2 ...\"</span>   39 minutes ago      Up 39 minutes                                          kube-proxy</span><br><span class=\"line\">1d1d03d6de8c        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kubelet --v=2 --a...\"</span>   39 minutes ago      Up 39 minutes                                          kubelet</span><br><span class=\"line\">c8f19935efd4        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-scheduler --...\"</span>   39 minutes ago      Up 39 minutes                                          scheduler</span><br><span class=\"line\">1d234c5c8247        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-controller-m...\"</span>   39 minutes ago      Up 39 minutes                                          kube-controller</span><br><span class=\"line\">c3eb4391249f        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-apiserver --...\"</span>   39 minutes ago      Up 39 minutes                                          kube-api</span><br><span class=\"line\">8ff019fee9d8        quay.io/coreos/etcd:latest                                                                                                <span class=\"string\">\"/usr/local/bin/et...\"</span>   39 minutes ago      Up 39 minutes       0.0.0.0:2379-2380-&gt;2379-2380/tcp   etcd</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY                                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">quay.io/coreos/etcd                               latest              30d9f8842f26        3 days ago          37.2 MB</span><br><span class=\"line\">nginx                                             latest              3f8a4339aadd        10 days ago         108 MB</span><br><span class=\"line\">rancher/rke-service-sidekick                      0.1.0               0f60235e607e        3 weeks ago         746 B</span><br><span class=\"line\">alpine                                            latest              e21c333399e0        5 weeks ago         4.14 MB</span><br><span class=\"line\">rancher/rke-cert-deployer                         0.1.0               c8907e804cfe        5 weeks ago         9.09 MB</span><br><span class=\"line\">rancher/k8s                                       v1.8.3-rancher2     bbbe40353d71        7 weeks ago         1.54 GB</span><br><span class=\"line\">quay.io/coreos/flannel                            v0.9.1              2b736d06ca4c        7 weeks ago         51.3 MB</span><br><span class=\"line\">anjia0532/k8s-dns-sidecar-amd64                   1.14.5              fed89e8b4248        3 months ago        41.8 MB</span><br><span class=\"line\">anjia0532/k8s-dns-kube-dns-amd64                  1.14.5              512cd7425a73        3 months ago        49.4 MB</span><br><span class=\"line\">anjia0532/k8s-dns-dnsmasq-nanny-amd64             1.14.5              459944ce8cc4        3 months ago        41.4 MB</span><br><span class=\"line\">quay.io/coreos/flannel-cni                        v0.2.0              7252edf978c0        4 months ago        49.8 MB</span><br><span class=\"line\">anjia0532/cluster-proportional-autoscaler-amd64   1.0.0               e183460c484d        14 months ago       48.2 MB</span><br><span class=\"line\">anjia0532/pause-amd64                             3.0                 99e59f495ffa        20 months ago       747 kB</span><br></pre></td></tr></table></figure>\n<p>参考 </p>\n<ul>\n<li><a href=\"https://www.cnrancher.com/an-introduction-to-rke/\" target=\"_blank\" rel=\"noopener\">RKE快速上手指南：开源的轻量级K8S安装程序</a></li>\n<li><a href=\"https://github.com/rancher/rke/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">rancher/rke#README.md</a></li>\n<li><a href=\"https://rancher.com/an-introduction-to-rke/\" target=\"_blank\" rel=\"noopener\">An Introduction to Rancher Kubernetes Engine (RKE)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>安装Kubernetes是公认的对运维和DevOps而言最棘手的问题之一。因为Kubernetes可以在各种平台和操作系统上运行，所以在安装过程中需要考虑很多因素。</p>\n<p>在这篇文章中，我将介绍一种新的、用于在裸机、虚拟机、公私有云上安装Kubernetes的轻量级工具——Rancher Kubernetes Engine（RKE）。RKE是一个用Golang编写的Kubernetes安装程序，极为简单易用，用户不再需要做大量的准备工作，即可拥有闪电般快速的Kubernetes安装部署体验。</p>\n</blockquote>","more":"<p>Rancher Kubernetes Engine (RKE) 旨在简化k8s的安装。但是根据官方blog和github文档，安装遇到很多问题，遂进行记录，以备查阅。</p>\n<p>环境准备(node必须2个+，之前用一个node会报 certificate signed by unknown authority)</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>主机ip</th>\n<th>OS</th>\n<th>docker version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k8s-server</td>\n<td>172.60.20.12</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.03.2-ce</td>\n</tr>\n<tr>\n<td>k8s-worker</td>\n<td>172.60.20.13</td>\n<td>ubuntu 17.04 4.9.0-12-generic x86_64</td>\n<td>17.03.2-ce</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下载RKE\"><a href=\"#下载RKE\" class=\"headerlink\" title=\"下载RKE\"></a>下载RKE</h2><p>最新rke 0.0.9 但是我一直跑不起来，用0.0.8可以</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O rke https://github.com/rancher/rke/releases/download/v0.0.8-dev/rke_linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x ./rke</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://raw.githubusercontent.com/rancher/rke/master/cluster.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启ssh-key\"><a href=\"#开启ssh-key\" class=\"headerlink\" title=\"开启ssh-key\"></a>开启ssh-key</h2><p>如果未开启ssh-key登陆，会报 </p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn6p3zgd3ej20kz02474n.jpg\" alt=\"\"></p>\n<h3 id=\"client-端\"><a href=\"#client-端\" class=\"headerlink\" title=\"client 端\"></a>client 端</h3><p>如果未安装 ssh-server，则通过 <code>sudo apt-get install openssh-server -y</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">ssh-keygen -t rsa -b 2048</span><br><span class=\"line\">scp  ~/.ssh/id_rsa.pub server_name@server_ip:/path/to/rsa/key/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"server-端\"><a href=\"#server-端\" class=\"headerlink\" title=\"server 端\"></a>server 端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir ~/.ssh/</span><br><span class=\"line\">cat /path/to/rsa/key/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 0600 ~/.ssh/*</span><br><span class=\"line\">rm -rf /path/to/rsa/key/id_rsa.pub</span><br><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://www.cnblogs.com/xiongmaolinux/p/5345125.html\" target=\"_blank\" rel=\"noopener\">SSH公钥(public key)验证</a></p>\n<h2 id=\"禁用swap\"><a href=\"#禁用swap\" class=\"headerlink\" title=\"禁用swap\"></a>禁用swap</h2><p><a href=\"https://github.com/rancher/rke/issues/130\" target=\"_blank\" rel=\"noopener\">Failed to deploy addon execute job: Failed to get job complete status: <nil></nil></a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker logs kubelet</span><br><span class=\"line\"></span><br><span class=\"line\">I1212 01:50:20.857798   19652 server.go:422] --cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /</span><br><span class=\"line\">error: failed to run Kubelet: Running with swap on is not supported, please <span class=\"built_in\">disable</span> swap! or <span class=\"built_in\">set</span> --fail-swap-on flag to <span class=\"literal\">false</span>. /proc/swaps contained: [Filename\t\t\t\tType\t\tSize\tUsed\tPriority /dev/sda5                               partition\t1046524\t2000\t-1]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a</span><br></pre></td></tr></table></figure>\n<p>参考 <a href=\"http://blog.csdn.net/cleverfoxloving/article/details/78424293?locationNum=2&amp;fps=1\" target=\"_blank\" rel=\"noopener\">升级到Kubernetes1.8.4的配置细节差异以及k8s几个不常见的坑</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>cluster.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">auth:</span></span><br><span class=\"line\"><span class=\"attr\">  strategy:</span> <span class=\"string\">x509</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">network:</span></span><br><span class=\"line\"><span class=\"attr\">  plugin:</span> <span class=\"string\">flannel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ssh_key_path:</span> <span class=\"string\">/home/root/.ssh/id_rsa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nodes:</span></span><br><span class=\"line\"><span class=\"attr\">  - address:</span> <span class=\"number\">172.60</span><span class=\"number\">.20</span><span class=\"number\">.12</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">    role:</span> <span class=\"string\">[controlplane,</span> <span class=\"string\">etcd]</span></span><br><span class=\"line\"><span class=\"attr\">  - address:</span> <span class=\"number\">172.60</span><span class=\"number\">.20</span><span class=\"number\">.13</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">    role:</span> <span class=\"string\">[worker]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  etcd:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">quay.io/coreos/etcd:latest</span></span><br><span class=\"line\"><span class=\"attr\">  kube-api:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">    service_cluster_ip_range:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\"><span class=\"attr\">    extra_args:</span></span><br><span class=\"line\"><span class=\"attr\">      v:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  kube-controller:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">    cluster_cidr:</span> <span class=\"number\">10.233</span><span class=\"number\">.64</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\"><span class=\"attr\">    service_cluster_ip_range:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\"><span class=\"attr\">  scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">  kubelet:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"><span class=\"attr\">    cluster_domain:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\"><span class=\"attr\">    cluster_dns_server:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"attr\">    infra_container_image:</span> <span class=\"string\">anjia0532/pause-amd64:3.0</span></span><br><span class=\"line\"><span class=\"attr\">  kubeproxy:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">rancher/k8s:v1.8.3-rancher2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">system_images:</span></span><br><span class=\"line\"><span class=\"attr\">  alpine:</span> <span class=\"attr\">alpine:latest</span></span><br><span class=\"line\"><span class=\"attr\">  nginx_proxy:</span> <span class=\"string\">rancher/rke-nginx-proxy:0.1.0</span></span><br><span class=\"line\"><span class=\"attr\">  cert_downloader:</span> <span class=\"string\">rancher/rke-cert-deployer:0.1.0</span></span><br><span class=\"line\"><span class=\"attr\">  kubedns_image:</span> <span class=\"string\">anjia0532/k8s-dns-kube-dns-amd64:1.14.5</span></span><br><span class=\"line\"><span class=\"attr\">  dnsmasq_image:</span> <span class=\"string\">anjia0532/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span></span><br><span class=\"line\"><span class=\"attr\">  kubedns_sidecar_image:</span> <span class=\"string\">anjia0532/k8s-dns-sidecar-amd64:1.14.5</span></span><br><span class=\"line\"><span class=\"attr\">  kubedns_autoscaler_image:</span> <span class=\"string\">anjia0532/cluster-proportional-autoscaler-amd64:1.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addons:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span><span class=\"bullet\">--</span></span><br><span class=\"line\"><span class=\"attr\">    apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">    kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">my-nginx</span></span><br><span class=\"line\"><span class=\"attr\">      namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">my-nginx</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"attr\">        - containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./rke up --config ./cluster.yml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO[0041] [addons] Saving addon ConfigMap to Kubernetes </span><br><span class=\"line\">INFO[0041] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-network-plugin </span><br><span class=\"line\">INFO[0041] [addons] Executing deploy job..              </span><br><span class=\"line\">INFO[0046] [addons] Setting up KubeDNS                  </span><br><span class=\"line\">INFO[0046] [addons] Saving addon ConfigMap to Kubernetes </span><br><span class=\"line\">INFO[0046] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-kubedns-addon </span><br><span class=\"line\">INFO[0046] [addons] Executing deploy job..              </span><br><span class=\"line\">INFO[0051] [addons] KubeDNS deployed successfully..     </span><br><span class=\"line\">INFO[0051] [addons] Setting up user addons..            </span><br><span class=\"line\">INFO[0051] [addons] Saving addon ConfigMap to Kubernetes </span><br><span class=\"line\">INFO[0051] [addons] Successfully Saved addon to Kubernetes ConfigMap: rke-user-addon </span><br><span class=\"line\">INFO[0051] [addons] Executing deploy job..              </span><br><span class=\"line\">INFO[0056] [addons] User addon deployed successfully..  </span><br><span class=\"line\">INFO[0056] Finished building Kubernetes cluster successfully</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                                                                                                                     COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class=\"line\">437cde03416b        anjia0532/k8s-dns-sidecar-amd64@sha256:6f49768b598f9b74ee3774c19406a1512567e73f103544cf6bd3e04420ed669a                   <span class=\"string\">\"/sidecar --v=2 --...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_sidecar_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">08db9a075ecd        nginx@sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb                                             <span class=\"string\">\"nginx -g 'daemon ...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_my-nginx_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">05e25488ec1a        anjia0532/k8s-dns-dnsmasq-nanny-amd64@sha256:667c279741b1efe1e667dabc022f04f04ff0d1d35af934c0f2508bee903c6c23             <span class=\"string\">\"/dnsmasq-nanny -v...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_dnsmasq_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">e7064c9f4738        anjia0532/cluster-proportional-autoscaler-amd64@sha256:03795e1fbcc5ad4071ec969012c60dc53c8dce1b542c94701164b1224c53abaf   <span class=\"string\">\"/cluster-proporti...\"</span>   37 minutes ago      Up 37 minutes                                          k8s_autoscaler_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">4b845893a51f        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_my-nginx_default_ccc273f2-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">c2ded5b27a95        anjia0532/k8s-dns-kube-dns-amd64@sha256:d965a1a9b53b254e2bedcbf86d0eba9378ea47084771e20f744cfbf7a1025ba6                  <span class=\"string\">\"/kube-dns --domai...\"</span>   38 minutes ago      Up 38 minutes                                          k8s_kubedns_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">97736e09c32b        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-66fc7d58bf-lpps5_kube-system_c9c4615e-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">1f16ce846485        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-dns-autoscaler-84476ff9c8-57sf9_kube-system_c9b608ef-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">df03a750637d        quay.io/coreos/flannel-cni@sha256:77bf1017845afb65e2603d8573e9a2d649eb645a4f7fe4843f17e276b8126968                        <span class=\"string\">\"/install-cni.sh\"</span>        38 minutes ago      Up 38 minutes                                          k8s_install-cni_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">e4d8b49b1f63        quay.io/coreos/flannel@sha256:60d77552f4ebb6ed4f0562876c6e2e0b0e0ab873cb01808f23f55c8adabd1f59                            <span class=\"string\">\"/opt/bin/flanneld...\"</span>   38 minutes ago      Up 38 minutes                                          k8s_kube-flannel_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">90b858291c7f        anjia0532/pause-amd64:3.0                                                                                                 <span class=\"string\">\"/pause\"</span>                 38 minutes ago      Up 38 minutes                                          k8s_POD_kube-flannel-6kff4_kube-system_c78facb9-f288-11e7-8429-000c29218fe1_0</span><br><span class=\"line\">fd1fd7b1928c        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-proxy --v=2 ...\"</span>   39 minutes ago      Up 39 minutes                                          kube-proxy</span><br><span class=\"line\">1d1d03d6de8c        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kubelet --v=2 --a...\"</span>   39 minutes ago      Up 39 minutes                                          kubelet</span><br><span class=\"line\">c8f19935efd4        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-scheduler --...\"</span>   39 minutes ago      Up 39 minutes                                          scheduler</span><br><span class=\"line\">1d234c5c8247        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-controller-m...\"</span>   39 minutes ago      Up 39 minutes                                          kube-controller</span><br><span class=\"line\">c3eb4391249f        rancher/k8s:v1.8.3-rancher2                                                                                               <span class=\"string\">\"kube-apiserver --...\"</span>   39 minutes ago      Up 39 minutes                                          kube-api</span><br><span class=\"line\">8ff019fee9d8        quay.io/coreos/etcd:latest                                                                                                <span class=\"string\">\"/usr/local/bin/et...\"</span>   39 minutes ago      Up 39 minutes       0.0.0.0:2379-2380-&gt;2379-2380/tcp   etcd</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY                                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">quay.io/coreos/etcd                               latest              30d9f8842f26        3 days ago          37.2 MB</span><br><span class=\"line\">nginx                                             latest              3f8a4339aadd        10 days ago         108 MB</span><br><span class=\"line\">rancher/rke-service-sidekick                      0.1.0               0f60235e607e        3 weeks ago         746 B</span><br><span class=\"line\">alpine                                            latest              e21c333399e0        5 weeks ago         4.14 MB</span><br><span class=\"line\">rancher/rke-cert-deployer                         0.1.0               c8907e804cfe        5 weeks ago         9.09 MB</span><br><span class=\"line\">rancher/k8s                                       v1.8.3-rancher2     bbbe40353d71        7 weeks ago         1.54 GB</span><br><span class=\"line\">quay.io/coreos/flannel                            v0.9.1              2b736d06ca4c        7 weeks ago         51.3 MB</span><br><span class=\"line\">anjia0532/k8s-dns-sidecar-amd64                   1.14.5              fed89e8b4248        3 months ago        41.8 MB</span><br><span class=\"line\">anjia0532/k8s-dns-kube-dns-amd64                  1.14.5              512cd7425a73        3 months ago        49.4 MB</span><br><span class=\"line\">anjia0532/k8s-dns-dnsmasq-nanny-amd64             1.14.5              459944ce8cc4        3 months ago        41.4 MB</span><br><span class=\"line\">quay.io/coreos/flannel-cni                        v0.2.0              7252edf978c0        4 months ago        49.8 MB</span><br><span class=\"line\">anjia0532/cluster-proportional-autoscaler-amd64   1.0.0               e183460c484d        14 months ago       48.2 MB</span><br><span class=\"line\">anjia0532/pause-amd64                             3.0                 99e59f495ffa        20 months ago       747 kB</span><br></pre></td></tr></table></figure>\n<p>参考 </p>\n<ul>\n<li><a href=\"https://www.cnrancher.com/an-introduction-to-rke/\" target=\"_blank\" rel=\"noopener\">RKE快速上手指南：开源的轻量级K8S安装程序</a></li>\n<li><a href=\"https://github.com/rancher/rke/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">rancher/rke#README.md</a></li>\n<li><a href=\"https://rancher.com/an-introduction-to-rke/\" target=\"_blank\" rel=\"noopener\">An Introduction to Rancher Kubernetes Engine (RKE)</a></li>\n</ul>"},{"title":"008-Sentinel清洗RESTful的@PathVariable","date":"2019-03-05T10:30:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第8篇，定个小目标999，每周最少2篇。\n\n\n前段时间的文章多是运维方面的，最近放出一波后端相关的。\n\n<a name=\"8e1b944f\"></a>\n## 背景\n最近开始使用Sentinel进行流量保护，但是默认的web servlet filter是拦截全部http请求。在传统的项目中问题不大。但是如果项目中用了Spring MVC，并且用了@PathVariable就尴尬了。<br />比如 uri pattern是  `/foo/{id}` ,而从Sentinel监控看 `/foo/1` 和 `/foo/2` 就是两个资源了，并且Sentinel最大支持6000个资源，再多就不生效了。\n\n<a name=\"81c1dff6\"></a>\n## 解决办法\n\n<a name=\"beee100b\"></a>\n### 官方给的方案是:UrlCleaner\n\n```java\n WebCallbackManager.setUrlCleaner(new UrlCleaner() {\n            @Override\n            public String clean(String originUrl) {\n                if (originUrl.startsWith(fooPrefix)) {\n                    return \"/foo/*\";\n                }\n                return originUrl;\n            }\n        });\n```\n但是想想就吐， `/v1/{foo}/{bar}/qux/{baz}` 这种的来个20来个，截一个我看看。\n\n<a name=\"AOP\"></a>\n### AOP\n换种思路，uri pattern难搞，用笨办法 aop总行吧？答案是可以的。\n\n```java\n@Aspect\npublic class SentinelResourceAspect {\n    @Pointcut(\"within(com.anjia.*.web.rest..*)\")\n    public void sentinelResourcePackagePointcut() {\n        // Method is empty as this is just a Pointcut, the implementations are\n        // in the advices.\n    }\n    @Around(\"sentinelResourcePackagePointcut()\")\n    public Object sentinelResourceAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        Entry entry = null;\n        // 务必保证finally会被执行\n        try {\n          // 资源名可使用任意有业务语义的字符串\n          // 注意此处只是类名#方法名，方法重载是合并的，如果需要进行区分，\n          // 可以获取参数类型加入到资源名称上\n          entry = SphU.entry(joinPoint.getSignature().getDeclaringTypeName()+\n                             \"#\"+joinPoint.getSignature().getName());\n          // 被保护的业务逻辑\n          // do something...\n        } catch (BlockException ex) {\n          // 资源访问阻止，被限流或被降级\n          // 进行相应的处理操作\n        } finally {\n          if (entry != null) {\n            entry.exit();\n          }\n        }\n        return result;\n    }\n}\n```\n\n\n<a name=\"f7ae864d\"></a>\n### 拦截器\n温习一下 Spring mvc的执行流程 `doFilter -> doService -> dispatcher -> preHandle -> controller -> postHandle -> afterCompletion -> filterAfter` \n\n核心的是 `String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);` 但是是在dispatcher阶段才赋值的，所以在CommFilter是取不到的，所以导致使用官方的Filter是不行的。只能用拦截器\n\n```java\n\nimport com.alibaba.csp.sentinel.EntryType;\nimport com.alibaba.csp.sentinel.SphU;\nimport com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;\nimport com.alibaba.csp.sentinel.adapter.servlet.callback.UrlCleaner;\nimport com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;\nimport com.alibaba.csp.sentinel.adapter.servlet.util.FilterUtil;\nimport com.alibaba.csp.sentinel.context.ContextUtil;\nimport com.alibaba.csp.sentinel.log.RecordLog;\nimport com.alibaba.csp.sentinel.slots.block.BlockException;\nimport com.alibaba.csp.sentinel.util.StringUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@Component\npublic class SentinelHandlerInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String origin = parseOrigin(request);\n        String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n        String uriTarget = StringUtils.defaultString(pattern,FilterUtil.filterTarget(request));\n        try {\n            // Clean and unify the URL.\n            // For REST APIs, you have to clean the URL (e.g. `/foo/1` and `/foo/2` -> `/foo/:id`), or\n            // the amount of context and resources will exceed the threshold.\n            UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();\n            if (urlCleaner != null) {\n                uriTarget = urlCleaner.clean(uriTarget);\n            }\n            RecordLog.info(String.format(\"[Sentinel Pre Filter] Origin: %s enter Uri Path: %s\", origin, uriTarget));\n            SphU.entry(uriTarget, EntryType.IN);\n            return true;\n        } catch (BlockException ex) {\n            RecordLog.warn(String.format(\"[Sentinel Pre Filter] Block Exception when Origin: %s enter fall back uri: %s\", origin, uriTarget), ex);\n            WebCallbackManager.getUrlBlockHandler().blocked(request, response, ex);\n            return false;\n        }\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        while (ContextUtil.getContext() != null && ContextUtil.getContext().getCurEntry() != null) {\n            ContextUtil.getContext().getCurEntry().exit();\n        }\n        ContextUtil.exit();\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n\n    private String parseOrigin(HttpServletRequest request) {\n        RequestOriginParser originParser = WebCallbackManager.getRequestOriginParser();\n        String origin = EMPTY_ORIGIN;\n        if (originParser != null) {\n            origin = originParser.parseOrigin(request);\n            if (StringUtil.isEmpty(origin)) {\n                return EMPTY_ORIGIN;\n            }\n        }\n        return origin;\n    }\n\n\n    private static final String EMPTY_ORIGIN = \"\";\n}\n\n```\n\n```java\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter {\n    @Inject\n    SentinelHandlerInterceptor sentinelHandlerInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(sentinelHandlerInterceptor);\n    }\n}\n\n```\n\n<a name=\"999b84d8\"></a>\n## UrlBlockHandler和UrlCleaner和WebServletConfig.setBlockPage(blockPage)\n上面说过，UrlCleaner是为了归并请求，清洗url用的。而UrlBlockHandler是在被拦截后的默认处理器。但是clean和handler都不是链式的，所以如果有多种处理，需要自己在一个方法里，进行逻辑判断。\n\nUrlCleaner\n```java\n WebCallbackManager.setUrlCleaner(new UrlCleaner() {\n            @Override\n            public String clean(String originUrl) {\n                if (originUrl.startsWith(fooPrefix)) {\n                    return \"/foo/*\";\n                }\n                return originUrl;\n            }\n        });\n```\n\nUrlBlockHandler<br />如果通用一点的，可以自己根据request的 content-type进行自适应返回内容(PLAN_TEXT和JSON)\n\n```java\nWebCallbackManager.setUrlBlockHandler((request, response, ex) -> {\n    response.addHeader(\"Content-Type\",\"application/json;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    out.print(\"{\\\"code\\\"\":429,\\\"msg\\\":\\\"系统繁忙，请稍后重试\\\"\"}\");\n    out.flush();\n    out.close();\n});\n```\n\nWebServletConfig.setBlockPage(blockPage)\n```java\nWebServletConfig.setBlockPage(\"http://www.baidu.com\")\n```\n\n注意，三个方法都不是不支持调用链，比如我写两个UrlBlockHandler,只认最后一个。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [wiki/主流框架的适配#web-servlet](https://github.com/alibaba/Sentinel/wiki/主流框架的适配#web-servlet)\n- [issues#](https://github.com/alibaba/Sentinel/issues/286)[REST API pattern UrlCleaner同一处理](https://github.com/alibaba/Sentinel/issues/286)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/sentinel-restful.md","raw":"\n---\n\ntitle: 008-Sentinel清洗RESTful的@PathVariable\n\ndate: 2019-03-05 18:30:00 +0800\n\ntags: [spring boot,spring cloud,sentinel,hystrix,微服务,熔断]\n\ncategories: 微服务\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第8篇，定个小目标999，每周最少2篇。\n\n\n前段时间的文章多是运维方面的，最近放出一波后端相关的。\n\n<a name=\"8e1b944f\"></a>\n## 背景\n最近开始使用Sentinel进行流量保护，但是默认的web servlet filter是拦截全部http请求。在传统的项目中问题不大。但是如果项目中用了Spring MVC，并且用了@PathVariable就尴尬了。<br />比如 uri pattern是  `/foo/{id}` ,而从Sentinel监控看 `/foo/1` 和 `/foo/2` 就是两个资源了，并且Sentinel最大支持6000个资源，再多就不生效了。\n\n<a name=\"81c1dff6\"></a>\n## 解决办法\n\n<a name=\"beee100b\"></a>\n### 官方给的方案是:UrlCleaner\n\n```java\n WebCallbackManager.setUrlCleaner(new UrlCleaner() {\n            @Override\n            public String clean(String originUrl) {\n                if (originUrl.startsWith(fooPrefix)) {\n                    return \"/foo/*\";\n                }\n                return originUrl;\n            }\n        });\n```\n但是想想就吐， `/v1/{foo}/{bar}/qux/{baz}` 这种的来个20来个，截一个我看看。\n\n<a name=\"AOP\"></a>\n### AOP\n换种思路，uri pattern难搞，用笨办法 aop总行吧？答案是可以的。\n\n```java\n@Aspect\npublic class SentinelResourceAspect {\n    @Pointcut(\"within(com.anjia.*.web.rest..*)\")\n    public void sentinelResourcePackagePointcut() {\n        // Method is empty as this is just a Pointcut, the implementations are\n        // in the advices.\n    }\n    @Around(\"sentinelResourcePackagePointcut()\")\n    public Object sentinelResourceAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        Entry entry = null;\n        // 务必保证finally会被执行\n        try {\n          // 资源名可使用任意有业务语义的字符串\n          // 注意此处只是类名#方法名，方法重载是合并的，如果需要进行区分，\n          // 可以获取参数类型加入到资源名称上\n          entry = SphU.entry(joinPoint.getSignature().getDeclaringTypeName()+\n                             \"#\"+joinPoint.getSignature().getName());\n          // 被保护的业务逻辑\n          // do something...\n        } catch (BlockException ex) {\n          // 资源访问阻止，被限流或被降级\n          // 进行相应的处理操作\n        } finally {\n          if (entry != null) {\n            entry.exit();\n          }\n        }\n        return result;\n    }\n}\n```\n\n\n<a name=\"f7ae864d\"></a>\n### 拦截器\n温习一下 Spring mvc的执行流程 `doFilter -> doService -> dispatcher -> preHandle -> controller -> postHandle -> afterCompletion -> filterAfter` \n\n核心的是 `String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);` 但是是在dispatcher阶段才赋值的，所以在CommFilter是取不到的，所以导致使用官方的Filter是不行的。只能用拦截器\n\n```java\n\nimport com.alibaba.csp.sentinel.EntryType;\nimport com.alibaba.csp.sentinel.SphU;\nimport com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;\nimport com.alibaba.csp.sentinel.adapter.servlet.callback.UrlCleaner;\nimport com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;\nimport com.alibaba.csp.sentinel.adapter.servlet.util.FilterUtil;\nimport com.alibaba.csp.sentinel.context.ContextUtil;\nimport com.alibaba.csp.sentinel.log.RecordLog;\nimport com.alibaba.csp.sentinel.slots.block.BlockException;\nimport com.alibaba.csp.sentinel.util.StringUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@Component\npublic class SentinelHandlerInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String origin = parseOrigin(request);\n        String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n        String uriTarget = StringUtils.defaultString(pattern,FilterUtil.filterTarget(request));\n        try {\n            // Clean and unify the URL.\n            // For REST APIs, you have to clean the URL (e.g. `/foo/1` and `/foo/2` -> `/foo/:id`), or\n            // the amount of context and resources will exceed the threshold.\n            UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();\n            if (urlCleaner != null) {\n                uriTarget = urlCleaner.clean(uriTarget);\n            }\n            RecordLog.info(String.format(\"[Sentinel Pre Filter] Origin: %s enter Uri Path: %s\", origin, uriTarget));\n            SphU.entry(uriTarget, EntryType.IN);\n            return true;\n        } catch (BlockException ex) {\n            RecordLog.warn(String.format(\"[Sentinel Pre Filter] Block Exception when Origin: %s enter fall back uri: %s\", origin, uriTarget), ex);\n            WebCallbackManager.getUrlBlockHandler().blocked(request, response, ex);\n            return false;\n        }\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        while (ContextUtil.getContext() != null && ContextUtil.getContext().getCurEntry() != null) {\n            ContextUtil.getContext().getCurEntry().exit();\n        }\n        ContextUtil.exit();\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n\n    private String parseOrigin(HttpServletRequest request) {\n        RequestOriginParser originParser = WebCallbackManager.getRequestOriginParser();\n        String origin = EMPTY_ORIGIN;\n        if (originParser != null) {\n            origin = originParser.parseOrigin(request);\n            if (StringUtil.isEmpty(origin)) {\n                return EMPTY_ORIGIN;\n            }\n        }\n        return origin;\n    }\n\n\n    private static final String EMPTY_ORIGIN = \"\";\n}\n\n```\n\n```java\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter {\n    @Inject\n    SentinelHandlerInterceptor sentinelHandlerInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(sentinelHandlerInterceptor);\n    }\n}\n\n```\n\n<a name=\"999b84d8\"></a>\n## UrlBlockHandler和UrlCleaner和WebServletConfig.setBlockPage(blockPage)\n上面说过，UrlCleaner是为了归并请求，清洗url用的。而UrlBlockHandler是在被拦截后的默认处理器。但是clean和handler都不是链式的，所以如果有多种处理，需要自己在一个方法里，进行逻辑判断。\n\nUrlCleaner\n```java\n WebCallbackManager.setUrlCleaner(new UrlCleaner() {\n            @Override\n            public String clean(String originUrl) {\n                if (originUrl.startsWith(fooPrefix)) {\n                    return \"/foo/*\";\n                }\n                return originUrl;\n            }\n        });\n```\n\nUrlBlockHandler<br />如果通用一点的，可以自己根据request的 content-type进行自适应返回内容(PLAN_TEXT和JSON)\n\n```java\nWebCallbackManager.setUrlBlockHandler((request, response, ex) -> {\n    response.addHeader(\"Content-Type\",\"application/json;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    out.print(\"{\\\"code\\\"\":429,\\\"msg\\\":\\\"系统繁忙，请稍后重试\\\"\"}\");\n    out.flush();\n    out.close();\n});\n```\n\nWebServletConfig.setBlockPage(blockPage)\n```java\nWebServletConfig.setBlockPage(\"http://www.baidu.com\")\n```\n\n注意，三个方法都不是不支持调用链，比如我写两个UrlBlockHandler,只认最后一个。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [wiki/主流框架的适配#web-servlet](https://github.com/alibaba/Sentinel/wiki/主流框架的适配#web-servlet)\n- [issues#](https://github.com/alibaba/Sentinel/issues/286)[REST API pattern UrlCleaner同一处理](https://github.com/alibaba/Sentinel/issues/286)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"sentinel-restful","published":1,"updated":"2019-08-16T06:11:15.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojjc00e524do2yfxyrqv","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第8篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>前段时间的文章多是运维方面的，最近放出一波后端相关的。</p>\n<p><a name=\"8e1b944f\"></a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近开始使用Sentinel进行流量保护，但是默认的web servlet filter是拦截全部http请求。在传统的项目中问题不大。但是如果项目中用了Spring MVC，并且用了@PathVariable就尴尬了。<br>比如 uri pattern是  <code>/foo/{id}</code> ,而从Sentinel监控看 <code>/foo/1</code> 和 <code>/foo/2</code> 就是两个资源了，并且Sentinel最大支持6000个资源，再多就不生效了。</p>\n<p><a name=\"81c1dff6\"></a></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><a name=\"beee100b\"></a></p>\n<h3 id=\"官方给的方案是-UrlCleaner\"><a href=\"#官方给的方案是-UrlCleaner\" class=\"headerlink\" title=\"官方给的方案是:UrlCleaner\"></a>官方给的方案是:UrlCleaner</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebCallbackManager.setUrlCleaner(<span class=\"keyword\">new</span> UrlCleaner() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">clean</span><span class=\"params\">(String originUrl)</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (originUrl.startsWith(fooPrefix)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"string\">\"/foo/*\"</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> originUrl;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<p>但是想想就吐， <code>/v1/{foo}/{bar}/qux/{baz}</code> 这种的来个20来个，截一个我看看。</p>\n<p><a name=\"AOP\"></a></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>换种思路，uri pattern难搞，用笨办法 aop总行吧？答案是可以的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentinelResourceAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"within(com.anjia.*.web.rest..*)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sentinelResourcePackagePointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method is empty as this is just a Pointcut, the implementations are</span></span><br><span class=\"line\">        <span class=\"comment\">// in the advices.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"sentinelResourcePackagePointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">sentinelResourceAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 务必保证finally会被执行</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 资源名可使用任意有业务语义的字符串</span></span><br><span class=\"line\">          <span class=\"comment\">// 注意此处只是类名#方法名，方法重载是合并的，如果需要进行区分，</span></span><br><span class=\"line\">          <span class=\"comment\">// 可以获取参数类型加入到资源名称上</span></span><br><span class=\"line\">          entry = SphU.entry(joinPoint.getSignature().getDeclaringTypeName()+</span><br><span class=\"line\">                             <span class=\"string\">\"#\"</span>+joinPoint.getSignature().getName());</span><br><span class=\"line\">          <span class=\"comment\">// 被保护的业务逻辑</span></span><br><span class=\"line\">          <span class=\"comment\">// do something...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">          <span class=\"comment\">// 进行相应的处理操作</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"f7ae864d\"></a></p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>温习一下 Spring mvc的执行流程 <code>doFilter -&gt; doService -&gt; dispatcher -&gt; preHandle -&gt; controller -&gt; postHandle -&gt; afterCompletion -&gt; filterAfter</code> </p>\n<p>核心的是 <code>String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);</code> 但是是在dispatcher阶段才赋值的，所以在CommFilter是取不到的，所以导致使用官方的Filter是不行的。只能用拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.EntryType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.SphU;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.UrlCleaner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.util.FilterUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.context.ContextUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.log.RecordLog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentinelHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String origin = parseOrigin(request);</span><br><span class=\"line\">        String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);</span><br><span class=\"line\">        String uriTarget = StringUtils.defaultString(pattern,FilterUtil.filterTarget(request));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean and unify the URL.</span></span><br><span class=\"line\">            <span class=\"comment\">// For REST APIs, you have to clean the URL (e.g. `/foo/1` and `/foo/2` -&gt; `/foo/:id`), or</span></span><br><span class=\"line\">            <span class=\"comment\">// the amount of context and resources will exceed the threshold.</span></span><br><span class=\"line\">            UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (urlCleaner != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                uriTarget = urlCleaner.clean(uriTarget);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            RecordLog.info(String.format(<span class=\"string\">\"[Sentinel Pre Filter] Origin: %s enter Uri Path: %s\"</span>, origin, uriTarget));</span><br><span class=\"line\">            SphU.entry(uriTarget, EntryType.IN);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">            RecordLog.warn(String.format(<span class=\"string\">\"[Sentinel Pre Filter] Block Exception when Origin: %s enter fall back uri: %s\"</span>, origin, uriTarget), ex);</span><br><span class=\"line\">            WebCallbackManager.getUrlBlockHandler().blocked(request, response, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ContextUtil.getContext() != <span class=\"keyword\">null</span> &amp;&amp; ContextUtil.getContext().getCurEntry() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ContextUtil.getContext().getCurEntry().exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ContextUtil.exit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseOrigin</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        RequestOriginParser originParser = WebCallbackManager.getRequestOriginParser();</span><br><span class=\"line\">        String origin = EMPTY_ORIGIN;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originParser != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            origin = originParser.parseOrigin(request);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtil.isEmpty(origin)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> EMPTY_ORIGIN;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EMPTY_ORIGIN = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    SentinelHandlerInterceptor sentinelHandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(sentinelHandlerInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"999b84d8\"></a></p>\n<h2 id=\"UrlBlockHandler和UrlCleaner和WebServletConfig-setBlockPage-blockPage\"><a href=\"#UrlBlockHandler和UrlCleaner和WebServletConfig-setBlockPage-blockPage\" class=\"headerlink\" title=\"UrlBlockHandler和UrlCleaner和WebServletConfig.setBlockPage(blockPage)\"></a>UrlBlockHandler和UrlCleaner和WebServletConfig.setBlockPage(blockPage)</h2><p>上面说过，UrlCleaner是为了归并请求，清洗url用的。而UrlBlockHandler是在被拦截后的默认处理器。但是clean和handler都不是链式的，所以如果有多种处理，需要自己在一个方法里，进行逻辑判断。</p>\n<p>UrlCleaner<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebCallbackManager.setUrlCleaner(<span class=\"keyword\">new</span> UrlCleaner() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">clean</span><span class=\"params\">(String originUrl)</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (originUrl.startsWith(fooPrefix)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"string\">\"/foo/*\"</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> originUrl;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>UrlBlockHandler<br>如果通用一点的，可以自己根据request的 content-type进行自适应返回内容(PLAN_TEXT和JSON)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebCallbackManager.setUrlBlockHandler((request, response, ex) -&gt; &#123;</span><br><span class=\"line\">    response.addHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">    PrintWriter out = response.getWriter();</span><br><span class=\"line\">    out.print(<span class=\"string\">\"&#123;\\\"code\\\"\"</span>:<span class=\"number\">429</span>,\\<span class=\"string\">\"msg\\\":\\\"系统繁忙，请稍后重试\\\"\"</span>&#125;<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">    out.flush();</span></span><br><span class=\"line\"><span class=\"string\">    out.close();</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>WebServletConfig.setBlockPage(blockPage)<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebServletConfig.setBlockPage(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>注意，三个方法都不是不支持调用链，比如我写两个UrlBlockHandler,只认最后一个。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/alibaba/Sentinel/wiki/主流框架的适配#web-servlet\" target=\"_blank\" rel=\"noopener\">wiki/主流框架的适配#web-servlet</a></li>\n<li><a href=\"https://github.com/alibaba/Sentinel/issues/286\" target=\"_blank\" rel=\"noopener\">issues#</a><a href=\"https://github.com/alibaba/Sentinel/issues/286\" target=\"_blank\" rel=\"noopener\">REST API pattern UrlCleaner同一处理</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第8篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>前段时间的文章多是运维方面的，最近放出一波后端相关的。</p>\n<p><a name=\"8e1b944f\"></a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近开始使用Sentinel进行流量保护，但是默认的web servlet filter是拦截全部http请求。在传统的项目中问题不大。但是如果项目中用了Spring MVC，并且用了@PathVariable就尴尬了。<br>比如 uri pattern是  <code>/foo/{id}</code> ,而从Sentinel监控看 <code>/foo/1</code> 和 <code>/foo/2</code> 就是两个资源了，并且Sentinel最大支持6000个资源，再多就不生效了。</p>\n<p><a name=\"81c1dff6\"></a></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><a name=\"beee100b\"></a></p>\n<h3 id=\"官方给的方案是-UrlCleaner\"><a href=\"#官方给的方案是-UrlCleaner\" class=\"headerlink\" title=\"官方给的方案是:UrlCleaner\"></a>官方给的方案是:UrlCleaner</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebCallbackManager.setUrlCleaner(<span class=\"keyword\">new</span> UrlCleaner() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">clean</span><span class=\"params\">(String originUrl)</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (originUrl.startsWith(fooPrefix)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"string\">\"/foo/*\"</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> originUrl;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<p>但是想想就吐， <code>/v1/{foo}/{bar}/qux/{baz}</code> 这种的来个20来个，截一个我看看。</p>\n<p><a name=\"AOP\"></a></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>换种思路，uri pattern难搞，用笨办法 aop总行吧？答案是可以的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentinelResourceAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"within(com.anjia.*.web.rest..*)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sentinelResourcePackagePointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method is empty as this is just a Pointcut, the implementations are</span></span><br><span class=\"line\">        <span class=\"comment\">// in the advices.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"sentinelResourcePackagePointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">sentinelResourceAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 务必保证finally会被执行</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 资源名可使用任意有业务语义的字符串</span></span><br><span class=\"line\">          <span class=\"comment\">// 注意此处只是类名#方法名，方法重载是合并的，如果需要进行区分，</span></span><br><span class=\"line\">          <span class=\"comment\">// 可以获取参数类型加入到资源名称上</span></span><br><span class=\"line\">          entry = SphU.entry(joinPoint.getSignature().getDeclaringTypeName()+</span><br><span class=\"line\">                             <span class=\"string\">\"#\"</span>+joinPoint.getSignature().getName());</span><br><span class=\"line\">          <span class=\"comment\">// 被保护的业务逻辑</span></span><br><span class=\"line\">          <span class=\"comment\">// do something...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">          <span class=\"comment\">// 进行相应的处理操作</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"f7ae864d\"></a></p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>温习一下 Spring mvc的执行流程 <code>doFilter -&gt; doService -&gt; dispatcher -&gt; preHandle -&gt; controller -&gt; postHandle -&gt; afterCompletion -&gt; filterAfter</code> </p>\n<p>核心的是 <code>String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);</code> 但是是在dispatcher阶段才赋值的，所以在CommFilter是取不到的，所以导致使用官方的Filter是不行的。只能用拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.EntryType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.SphU;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.UrlCleaner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.servlet.util.FilterUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.context.ContextUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.log.RecordLog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentinelHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String origin = parseOrigin(request);</span><br><span class=\"line\">        String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);</span><br><span class=\"line\">        String uriTarget = StringUtils.defaultString(pattern,FilterUtil.filterTarget(request));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean and unify the URL.</span></span><br><span class=\"line\">            <span class=\"comment\">// For REST APIs, you have to clean the URL (e.g. `/foo/1` and `/foo/2` -&gt; `/foo/:id`), or</span></span><br><span class=\"line\">            <span class=\"comment\">// the amount of context and resources will exceed the threshold.</span></span><br><span class=\"line\">            UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (urlCleaner != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                uriTarget = urlCleaner.clean(uriTarget);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            RecordLog.info(String.format(<span class=\"string\">\"[Sentinel Pre Filter] Origin: %s enter Uri Path: %s\"</span>, origin, uriTarget));</span><br><span class=\"line\">            SphU.entry(uriTarget, EntryType.IN);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">            RecordLog.warn(String.format(<span class=\"string\">\"[Sentinel Pre Filter] Block Exception when Origin: %s enter fall back uri: %s\"</span>, origin, uriTarget), ex);</span><br><span class=\"line\">            WebCallbackManager.getUrlBlockHandler().blocked(request, response, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ContextUtil.getContext() != <span class=\"keyword\">null</span> &amp;&amp; ContextUtil.getContext().getCurEntry() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ContextUtil.getContext().getCurEntry().exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ContextUtil.exit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseOrigin</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        RequestOriginParser originParser = WebCallbackManager.getRequestOriginParser();</span><br><span class=\"line\">        String origin = EMPTY_ORIGIN;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originParser != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            origin = originParser.parseOrigin(request);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtil.isEmpty(origin)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> EMPTY_ORIGIN;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EMPTY_ORIGIN = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    SentinelHandlerInterceptor sentinelHandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(sentinelHandlerInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"999b84d8\"></a></p>\n<h2 id=\"UrlBlockHandler和UrlCleaner和WebServletConfig-setBlockPage-blockPage\"><a href=\"#UrlBlockHandler和UrlCleaner和WebServletConfig-setBlockPage-blockPage\" class=\"headerlink\" title=\"UrlBlockHandler和UrlCleaner和WebServletConfig.setBlockPage(blockPage)\"></a>UrlBlockHandler和UrlCleaner和WebServletConfig.setBlockPage(blockPage)</h2><p>上面说过，UrlCleaner是为了归并请求，清洗url用的。而UrlBlockHandler是在被拦截后的默认处理器。但是clean和handler都不是链式的，所以如果有多种处理，需要自己在一个方法里，进行逻辑判断。</p>\n<p>UrlCleaner<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebCallbackManager.setUrlCleaner(<span class=\"keyword\">new</span> UrlCleaner() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">clean</span><span class=\"params\">(String originUrl)</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (originUrl.startsWith(fooPrefix)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"string\">\"/foo/*\"</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> originUrl;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>UrlBlockHandler<br>如果通用一点的，可以自己根据request的 content-type进行自适应返回内容(PLAN_TEXT和JSON)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebCallbackManager.setUrlBlockHandler((request, response, ex) -&gt; &#123;</span><br><span class=\"line\">    response.addHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">    PrintWriter out = response.getWriter();</span><br><span class=\"line\">    out.print(<span class=\"string\">\"&#123;\\\"code\\\"\"</span>:<span class=\"number\">429</span>,\\<span class=\"string\">\"msg\\\":\\\"系统繁忙，请稍后重试\\\"\"</span>&#125;<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">    out.flush();</span></span><br><span class=\"line\"><span class=\"string\">    out.close();</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>WebServletConfig.setBlockPage(blockPage)<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebServletConfig.setBlockPage(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>注意，三个方法都不是不支持调用链，比如我写两个UrlBlockHandler,只认最后一个。</p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/alibaba/Sentinel/wiki/主流框架的适配#web-servlet\" target=\"_blank\" rel=\"noopener\">wiki/主流框架的适配#web-servlet</a></li>\n<li><a href=\"https://github.com/alibaba/Sentinel/issues/286\" target=\"_blank\" rel=\"noopener\">issues#</a><a href=\"https://github.com/alibaba/Sentinel/issues/286\" target=\"_blank\" rel=\"noopener\">REST API pattern UrlCleaner同一处理</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"Spring3.0 Log4j转logback","date":"2017-02-28T06:54:44.000Z","_content":"公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","source":"_posts/springmvc-log4j-to-logback.md","raw":"---\ntitle: Spring3.0 Log4j转logback\ndate: 2017-02-28 14:54:44\ntags: [springmvc,logback,log4j,log]\ncategories: [编程]\n---\n公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","slug":"springmvc-log4j-to-logback","published":1,"updated":"2019-08-16T05:56:21.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojje00e824dohpp4b1un","content":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\" target=\"_blank\" rel=\"noopener\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jackson-annotations-2.8.0.jar</span><br><span class=\"line\">jackson-core-2.8.6.jar</span><br><span class=\"line\">jackson-databind-2.8.6.jar</span><br><span class=\"line\">jcl-over-slf4j-1.7.24.jar</span><br><span class=\"line\">log4j-over-slf4j-1.7.24.jar</span><br><span class=\"line\">logback-classic-1.2.1.jar</span><br><span class=\"line\">logback-core-1.2.1.jar</span><br><span class=\"line\">logback-ext-spring-0.1.4.jar</span><br><span class=\"line\">logstash-logback-encoder-4.8.jar</span><br><span class=\"line\">slf4j-api-1.7.24.jar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\" target=\"_blank\" rel=\"noopener\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\" target=\"_blank\" rel=\"noopener\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\" target=\"_blank\" rel=\"noopener\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</span><br><span class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</span><br><span class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</span><br><span class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</span><br><span class=\"line\">    .toString()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\" target=\"_blank\" rel=\"noopener\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jackson-annotations-2.8.0.jar</span><br><span class=\"line\">jackson-core-2.8.6.jar</span><br><span class=\"line\">jackson-databind-2.8.6.jar</span><br><span class=\"line\">jcl-over-slf4j-1.7.24.jar</span><br><span class=\"line\">log4j-over-slf4j-1.7.24.jar</span><br><span class=\"line\">logback-classic-1.2.1.jar</span><br><span class=\"line\">logback-core-1.2.1.jar</span><br><span class=\"line\">logback-ext-spring-0.1.4.jar</span><br><span class=\"line\">logstash-logback-encoder-4.8.jar</span><br><span class=\"line\">slf4j-api-1.7.24.jar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\" target=\"_blank\" rel=\"noopener\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\" target=\"_blank\" rel=\"noopener\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\" target=\"_blank\" rel=\"noopener\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</span><br><span class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</span><br><span class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</span><br><span class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</span><br><span class=\"line\">    .toString()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ElkStack之Heartbeat(心跳检测)","date":"2017-03-02T17:20:16.000Z","_content":"\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用->不可用/不可用->可用)时获取到通知即可\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","source":"_posts/heartbeat.md","raw":"---\ntitle: ElkStack之Heartbeat(心跳检测)\ndate: 2017-03-03 01:20:16\ntags: [elk,elkstasck,Heartbeat]\ncategories: [elkstasck]\n---\n\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用->不可用/不可用->可用)时获取到通知即可\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","slug":"heartbeat","published":1,"updated":"2019-08-16T05:56:21.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojkc00h624do7upw51ok","content":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</span><br><span class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</span><br></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</span><br><span class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br><span class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></span><br><span class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\" target=\"_blank\" rel=\"noopener\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">icmp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost:7\"]</span>  <span class=\"comment\"># default TCP Echo Protocol</span></span><br><span class=\"line\"><span class=\"attr\">  mode:</span> <span class=\"string\">any</span>                     <span class=\"comment\">#3</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://localhost:80/service/status\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\" target=\"_blank\" rel=\"noopener\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\" target=\"_blank\" rel=\"noopener\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\">  <span class=\"string\">watch.poll_file:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">&#123;path.config&#125;/monitors/dynamic.json</span></span><br><span class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span><span class=\"string\">s</span></span><br></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</span><br><span class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[7]</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxy_url:</span> <span class=\"attr\">socks5://user:password@socks5-proxy:2233</span></span><br></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">  ssl:</span></span><br><span class=\"line\"><span class=\"attr\">    certificate_authorities:</span> <span class=\"string\">['/etc/ca.crt']</span></span><br><span class=\"line\"><span class=\"attr\">    supported_protocols:</span> <span class=\"string\">[\"TLSv1.0\",</span> <span class=\"string\">\"TLSv1.1\"</span><span class=\"string\">,</span> <span class=\"string\">\"TLSv1.2\"</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.request.method:</span> <span class=\"string\">HEAD</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"https://myhost:80\"]</span></span><br><span class=\"line\"><span class=\"string\">check.request:</span></span><br><span class=\"line\"><span class=\"attr\">  method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\"><span class=\"attr\">  headers:</span></span><br><span class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></span><br><span class=\"line\"><span class=\"string\">check.response:</span></span><br><span class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></span><br></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">output.elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"192.168.1.42:9200\"]</span></span><br><span class=\"line\">  <span class=\"string\">template.name:</span> <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></span><br><span class=\"line\">  <span class=\"string\">template.path:</span> <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></span><br></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\" target=\"_blank\" rel=\"noopener\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\" target=\"_blank\" rel=\"noopener\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/ start</span><br></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/heartbeat start</span><br></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ./heartbeat -e -c heartbeat.yml -d <span class=\"string\">\"publish\"</span></span><br></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start heartbeat</span><br></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\" target=\"_blank\" rel=\"noopener\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\" target=\"_blank\" rel=\"noopener\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\" target=\"_blank\" rel=\"noopener\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\" target=\"_blank\" rel=\"noopener\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\" target=\"_blank\" rel=\"noopener\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\" target=\"_blank\" rel=\"noopener\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\" target=\"_blank\" rel=\"noopener\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用-&gt;不可用/不可用-&gt;可用)时获取到通知即可</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></span><br><span class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch host</span></span><br><span class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch port</span></span><br><span class=\"line\"><span class=\"comment\"># es_port: 14900</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">heartbeat-monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Type of alert.</span></span><br><span class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">change</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">heartbeat-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The field to look for changes in</span></span><br><span class=\"line\"><span class=\"attr\">compare_key:</span> <span class=\"string\">up</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></span><br><span class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></span><br><span class=\"line\"><span class=\"attr\">query_key:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"comment\">#- \"email\"</span></span><br><span class=\"line\"><span class=\"comment\">#- \"debug\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></span><br><span class=\"line\"><span class=\"comment\">#party_id: xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></span><br><span class=\"line\"><span class=\"comment\">#user_id: xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\" target=\"_blank\" rel=\"noopener\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</span><br><span class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</span><br></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</span><br><span class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br><span class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"noopener\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></span><br><span class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\" target=\"_blank\" rel=\"noopener\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\" target=\"_blank\" rel=\"noopener\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">icmp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost:7\"]</span>  <span class=\"comment\"># default TCP Echo Protocol</span></span><br><span class=\"line\"><span class=\"attr\">  mode:</span> <span class=\"string\">any</span>                     <span class=\"comment\">#3</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">\"Check\"</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://localhost:80/service/status\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\" target=\"_blank\" rel=\"noopener\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\" target=\"_blank\" rel=\"noopener\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.monitors:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\">  <span class=\"string\">watch.poll_file:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">&#123;path.config&#125;/monitors/dynamic.json</span></span><br><span class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span><span class=\"string\">s</span></span><br></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</span><br><span class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[7]</span></span><br><span class=\"line\">  <span class=\"string\">check.send:</span> <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">  <span class=\"string\">check.receive:</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxy_url:</span> <span class=\"attr\">socks5://user:password@socks5-proxy:2233</span></span><br></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"myhost\"]</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span> <span class=\"string\">[80,</span> <span class=\"number\">9200</span><span class=\"string\">,</span> <span class=\"number\">5044</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">  ssl:</span></span><br><span class=\"line\"><span class=\"attr\">    certificate_authorities:</span> <span class=\"string\">['/etc/ca.crt']</span></span><br><span class=\"line\"><span class=\"attr\">    supported_protocols:</span> <span class=\"string\">[\"TLSv1.0\",</span> <span class=\"string\">\"TLSv1.1\"</span><span class=\"string\">,</span> <span class=\"string\">\"TLSv1.2\"</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"http://myhost:80\"]</span></span><br><span class=\"line\">  <span class=\"string\">check.request.method:</span> <span class=\"string\">HEAD</span></span><br><span class=\"line\">  <span class=\"string\">check.response.status:</span> <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></span><br><span class=\"line\"><span class=\"attr\">  urls:</span> <span class=\"string\">[\"https://myhost:80\"]</span></span><br><span class=\"line\"><span class=\"string\">check.request:</span></span><br><span class=\"line\"><span class=\"attr\">  method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\"><span class=\"attr\">  headers:</span></span><br><span class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></span><br><span class=\"line\"><span class=\"string\">check.response:</span></span><br><span class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">heartbeat.scheduler:</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></span><br></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">output.elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"192.168.1.42:9200\"]</span></span><br><span class=\"line\">  <span class=\"string\">template.name:</span> <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></span><br><span class=\"line\">  <span class=\"string\">template.path:</span> <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></span><br></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\" target=\"_blank\" rel=\"noopener\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\" target=\"_blank\" rel=\"noopener\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/ start</span><br></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/heartbeat start</span><br></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ./heartbeat -e -c heartbeat.yml -d <span class=\"string\">\"publish\"</span></span><br></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start heartbeat</span><br></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\" target=\"_blank\" rel=\"noopener\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\" target=\"_blank\" rel=\"noopener\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\" target=\"_blank\" rel=\"noopener\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\" target=\"_blank\" rel=\"noopener\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\" target=\"_blank\" rel=\"noopener\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\" target=\"_blank\" rel=\"noopener\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\" target=\"_blank\" rel=\"noopener\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用-&gt;不可用/不可用-&gt;可用)时获取到通知即可</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></span><br><span class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch host</span></span><br><span class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional)</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch port</span></span><br><span class=\"line\"><span class=\"comment\"># es_port: 14900</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#use_ssl: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\">#es_username: someusername</span></span><br><span class=\"line\"><span class=\"comment\">#es_password: somepassword</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">heartbeat-monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Type of alert.</span></span><br><span class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">change</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">heartbeat-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The field to look for changes in</span></span><br><span class=\"line\"><span class=\"attr\">compare_key:</span> <span class=\"string\">up</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></span><br><span class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></span><br><span class=\"line\"><span class=\"attr\">query_key:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required, change specific)</span></span><br><span class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></span><br><span class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">timeframe:</span></span><br><span class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"comment\">#- \"email\"</span></span><br><span class=\"line\"><span class=\"comment\">#- \"debug\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></span><br><span class=\"line\"><span class=\"attr\">corp_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></span><br><span class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></span><br><span class=\"line\"><span class=\"attr\">agent_id:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></span><br><span class=\"line\"><span class=\"comment\">#party_id: xxx</span></span><br><span class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></span><br><span class=\"line\"><span class=\"comment\">#user_id: xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tag_id:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\" target=\"_blank\" rel=\"noopener\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"noopener\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n"},{"title":"让 @HystrixCommand 支持Spring EL实现动态commandKey,groupKey,threadPoolKey,fallbackMethod","date":"2018-09-26T03:59:40.000Z","_content":"\n`hystrix-javanica`  极大的简化了hystrix的开发工作，不用显式的`new`一堆`HystrixCommand`对象，代价就是，`@HystrixCommand` 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 [Changing Annotation Parameters At Runtime](https://www.baeldung.com/java-reflection-change-annotation-params))\n\n\n\n在官方有两个个issues[Netflix/Hystrix/issues#1421](https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783) 和[Netflix/Hystrix/issues#350](https://github.com/Netflix/Hystrix/issues/350) 也在讨论这个问题，但是官方建议针对此场景，用传统的`new HystrixCommand()`解决\n\n\n\n<!--more-->\n\n\n\n## 1. 添加必要依赖\n\n```xml\n\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-core</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-javanica</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n```\n\n\n\n## 2. 新增 HystrixCommandEL 类\n\n```java\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\nimport com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Objects;\n\npublic class HystrixCommandEL implements HystrixCommand {\n\n    private String[] names;\n    private Object[] args;\n\n    ExpressionParser parser = new SpelExpressionParser();\n    StandardEvaluationContext context = new StandardEvaluationContext();\n\n    private HystrixCommand hystrixCommand;\n\n    public HystrixCommandEL(HystrixCommand hystrixCommand, String[] names, Object[] args) {\n        this.hystrixCommand = hystrixCommand;\n        this.args = args;\n        this.names = names;\n    }\n\n    @Override\n    public String groupKey() {\n        return parseEL(hystrixCommand.groupKey());\n    }\n\n    @Override\n    public String commandKey() {\n        return parseEL(hystrixCommand.commandKey());\n    }\n\n    @Override\n    public String threadPoolKey() {\n        return parseEL(hystrixCommand.threadPoolKey());\n    }\n\n    @Override\n    public String fallbackMethod() {\n        return parseEL(hystrixCommand.fallbackMethod());\n    }\n\n    @Override\n    public HystrixProperty[] commandProperties() {\n        return hystrixCommand.commandProperties();\n    }\n\n    @Override\n    public HystrixProperty[] threadPoolProperties() {\n        return hystrixCommand.threadPoolProperties();\n    }\n\n    @Override\n    public Class<? extends Throwable>[] ignoreExceptions() {\n        return hystrixCommand.ignoreExceptions();\n    }\n\n    @Override\n    public ObservableExecutionMode observableExecutionMode() {\n        return hystrixCommand.observableExecutionMode();\n    }\n\n    @Override\n    public HystrixException[] raiseHystrixExceptions() {\n        return hystrixCommand.raiseHystrixExceptions();\n    }\n\n    @Override\n    public String defaultFallback() {\n        return parseEL(hystrixCommand.defaultFallback());\n    }\n\n    @Override\n    public Class<? extends Annotation> annotationType() {\n        return hystrixCommand.annotationType();\n    }\n\n    private String parseEL(String key) {\n        // 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)\n        if (!StringUtils.contains(key, \"#\") || isEmpty(args) || isEmpty(names)) {\n            return key;\n        }\n        for (int i = 0; i < names.length; i++) {\n            context.setVariable(names[i], args[i]);\n        }\n        return parser.parseExpression(key).getValue(context, String.class);\n    }\n\n    private boolean isEmpty(Object [] objs){\n        return Objects.isNull(objs) || objs.length==0;\n    }\n}\n\n```\n\n## 3. 新增 HystrixCommandAspect 类\n\n```java\nimport com.google.common.base.Optional;\nimport com.google.common.collect.ImmutableMap;\nimport com.netflix.hystrix.HystrixInvokable;\nimport com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.command.CommandExecutor;\nimport com.netflix.hystrix.contrib.javanica.command.ExecutionType;\nimport com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;\nimport com.netflix.hystrix.contrib.javanica.command.MetaHolder;\nimport com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;\nimport com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;\nimport com.netflix.hystrix.contrib.javanica.utils.AopUtils;\nimport com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;\nimport com.netflix.hystrix.contrib.javanica.utils.MethodProvider;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.LocalVariableTableParameterNameDiscoverer;\nimport rx.Completable;\nimport rx.Observable;\nimport rx.Single;\nimport rx.functions.Func1;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Future;\n\nimport static com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;\nimport static com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;\nimport static com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;\n\n@Aspect\npublic class HystrixCommandAspect {\n\n    private static final Map<HystrixPointcutType, MetaHolderFactory> META_HOLDER_FACTORY_MAP;\n    // 新增\n    private static LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n    static {\n        META_HOLDER_FACTORY_MAP = ImmutableMap.<HystrixPointcutType, MetaHolderFactory>builder()\n                .put(HystrixPointcutType.COMMAND, new CommandMetaHolderFactory())\n                .put(HystrixPointcutType.COLLAPSER, new CollapserMetaHolderFactory())\n                .build();\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\")\n    public void hystrixCommandAnnotationPointcut() {\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\")\n    public void hystrixCollapserAnnotationPointcut() {\n    }\n\n    @Around(\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\")\n    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable {\n        Method method = getMethodFromTarget(joinPoint);\n        Validate.notNull(method, \"failed to get method from joinPoint: %s\", joinPoint);\n        if (method.isAnnotationPresent(HystrixCommand.class) && method.isAnnotationPresent(HystrixCollapser.class)) {\n            throw new IllegalStateException(\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \" +\n                    \"annotations at the same time\");\n        }\n        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));\n        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);\n        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);\n        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?\n                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();\n\n        Object result;\n        try {\n            if (!metaHolder.isObservable()) {\n                result = CommandExecutor.execute(invokable, executionType, metaHolder);\n            } else {\n                result = executeObservable(invokable, executionType, metaHolder);\n            }\n        } catch (HystrixBadRequestException e) {\n            throw e.getCause() != null ? e.getCause() : e;\n        } catch (HystrixRuntimeException e) {\n            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);\n        }\n        return result;\n    }\n\n    private Object executeObservable(HystrixInvokable invokable, ExecutionType executionType, final MetaHolder metaHolder) {\n        return mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))\n                .onErrorResumeNext(new Func1<Throwable, Observable>() {\n                    @Override\n                    public Observable call(Throwable throwable) {\n                        if (throwable instanceof HystrixBadRequestException) {\n                            return Observable.error(throwable.getCause());\n                        } else if (throwable instanceof HystrixRuntimeException) {\n                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;\n                            return Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));\n                        }\n                        return Observable.error(throwable);\n                    }\n                }), metaHolder);\n    }\n\n    private Object mapObservable(Observable observable, final MetaHolder metaHolder) {\n        if (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toCompletable();\n        } else if (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toSingle();\n        }\n        return observable;\n    }\n\n    private Throwable hystrixRuntimeExceptionToThrowable(MetaHolder metaHolder, HystrixRuntimeException e) {\n        if (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) {\n            return e;\n        }\n        return getCause(e);\n    }\n\n    private Throwable getCause(HystrixRuntimeException e) {\n        if (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) {\n            return e;\n        }\n\n        Throwable cause = e.getCause();\n\n        // latest exception in flow should be propagated to end user\n        if (e.getFallbackException() instanceof FallbackInvocationException) {\n            cause = e.getFallbackException().getCause();\n            if (cause instanceof HystrixRuntimeException) {\n                cause = getCause((HystrixRuntimeException) cause);\n            }\n        } else if (cause instanceof CommandActionExecutionException) { // this situation is possible only if a callee throws an exception which type extends Throwable directly\n            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;\n            cause = commandActionExecutionException.getCause();\n        }\n\n        return Optional.fromNullable(cause).or(e);\n    }\n\n    /**\n     * A factory to create MetaHolder depending on {@link HystrixPointcutType}.\n     */\n    private static abstract class MetaHolderFactory {\n        public MetaHolder create(final ProceedingJoinPoint joinPoint) {\n            Method method = getMethodFromTarget(joinPoint);\n            Object obj = joinPoint.getTarget();\n            Object[] args = joinPoint.getArgs();\n            Object proxy = joinPoint.getThis();\n            return create(proxy, method, obj, args, joinPoint);\n        }\n\n        public abstract MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint);\n\n        MetaHolder.Builder metaHolderBuilder(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            MetaHolder.Builder builder = MetaHolder.builder()\n                    .args(args).method(method).obj(obj).proxyObj(proxy)\n                    .joinPoint(joinPoint);\n\n            setFallbackMethod(builder, obj.getClass(), method);\n            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);\n            return builder;\n        }\n    }\n\n    private static class CollapserMetaHolderFactory extends MetaHolderFactory {\n\n        @Override\n        public MetaHolder create(Object proxy, Method collapserMethod, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);\n            if (collapserMethod.getParameterTypes().length > 1 || collapserMethod.getParameterTypes().length == 0) {\n                throw new IllegalStateException(\"Collapser method must have one argument: \" + collapserMethod);\n            }\n\n            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);\n\n            if (batchCommandMethod == null)\n                throw new IllegalStateException(\"batch method is absent: \" + hystrixCollapser.batchMethod());\n\n            Class<?> batchReturnType = batchCommandMethod.getReturnType();\n            Class<?> collapserReturnType = collapserMethod.getReturnType();\n            boolean observable = collapserReturnType.equals(Observable.class);\n\n            if (!collapserMethod.getParameterTypes()[0]\n                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]))) {\n                throw new IllegalStateException(\"required batch method for collapser is absent, wrong generic type: expected \"\n                        + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]));\n            }\n\n            final Class<?> collapserMethodReturnType = getFirstGenericParameter(\n                    collapserMethod.getGenericReturnType(),\n                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? 1 : 0);\n\n            Class<?> batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());\n            if (!collapserMethodReturnType\n                    .equals(batchCommandActualReturnType)) {\n                throw new IllegalStateException(\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \" +\n                        \"(java.util.List<\" + collapserMethodReturnType + \">)\" + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        batchCommandActualReturnType);\n            }\n\n            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);\n            if (hystrixCommand == null) {\n                throw new IllegalStateException(\"batch method must be annotated with HystrixCommandEL annotation\");\n            }\n            // method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions\n            // that should be invoked upon intercepted method, it's required only for underlying batch command\n\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);\n\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));\n            }\n\n            builder.hystrixCollapser(hystrixCollapser);\n            builder.defaultCollapserKey(collapserMethod.getName());\n            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));\n\n            builder.defaultCommandKey(batchCommandMethod.getName());\n            builder.hystrixCommand(hystrixCommand);\n            builder.executionType(ExecutionType.getExecutionType(batchReturnType));\n            builder.observable(observable);\n            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);\n            if (fallbackMethod.isPresent()) {\n                fallbackMethod.validateReturnType(batchCommandMethod);\n                builder\n                        .fallbackMethod(fallbackMethod.getMethod())\n                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n            }\n            return builder.build();\n        }\n    }\n\n    private static class CommandMetaHolderFactory extends MetaHolderFactory {\n        @Override\n        public MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);\n            // 新增\n            hystrixCommand = new HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);\n            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));\n            }\n\n            return builder.defaultCommandKey(method.getName())\n                    .hystrixCommand(hystrixCommand)\n                    .observableExecutionMode(hystrixCommand.observableExecutionMode())\n                    .executionType(executionType)\n                    .observable(ExecutionType.OBSERVABLE == executionType)\n                    .build();\n        }\n    }\n\n    private enum HystrixPointcutType {\n        COMMAND,\n        COLLAPSER;\n\n        static HystrixPointcutType of(Method method) {\n            if (method.isAnnotationPresent(HystrixCommand.class)) {\n                return COMMAND;\n            } else if (method.isAnnotationPresent(HystrixCollapser.class)) {\n                return COLLAPSER;\n            } else {\n                String methodInfo = getMethodInfo(method);\n                throw new IllegalStateException(\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\" + methodInfo);\n            }\n        }\n    }\n\n    private static Method getAjcMethodFromTarget(JoinPoint joinPoint) {\n        return getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());\n    }\n\n\n    private static Class<?> getFirstGenericParameter(Type type) {\n        return getFirstGenericParameter(type, 1);\n    }\n\n    private static Class<?> getFirstGenericParameter(final Type type, final int nestedDepth) {\n        int cDepth = 0;\n        Type tType = type;\n\n        for (int cDept = 0; cDept < nestedDepth; cDept++) {\n            if (!(tType instanceof ParameterizedType))\n                throw new IllegalStateException(String.format(\"Sub type at nesting level %d of %s is expected to be generic\", cDepth, type));\n            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];\n        }\n\n        if (tType instanceof ParameterizedType)\n            return (Class<?>) ((ParameterizedType) tType).getRawType();\n        else if (tType instanceof Class)\n            return (Class<?>) tType;\n\n        throw new UnsupportedOperationException(\"Unsupported type \" + tType);\n    }\n\n    private static MetaHolder.Builder setDefaultProperties(MetaHolder.Builder builder, Class<?> declaringClass, final ProceedingJoinPoint joinPoint) {\n        Optional<DefaultProperties> defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);\n        builder.defaultGroupKey(declaringClass.getSimpleName());\n        if (defaultPropertiesOpt.isPresent()) {\n            DefaultProperties defaultProperties = defaultPropertiesOpt.get();\n            builder.defaultProperties(defaultProperties);\n            if (StringUtils.isNotBlank(defaultProperties.groupKey())) {\n                builder.defaultGroupKey(defaultProperties.groupKey());\n            }\n            if (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) {\n                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());\n            }\n        }\n        return builder;\n    }\n\n    private static MetaHolder.Builder setFallbackMethod(MetaHolder.Builder builder, Class<?> declaringClass, Method commandMethod) {\n        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);\n        if (fallbackMethod.isPresent()) {\n            fallbackMethod.validateReturnType(commandMethod);\n            builder\n                    .fallbackMethod(fallbackMethod.getMethod())\n                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n        }\n        return builder;\n    }\n}\n\n```\n\n此类99%都是copy自 `com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect`\n\n仅仅新增了两行，分别都注明了`//新增`\n\n\n\n## 使用\n\n要么在`HystrixCommandAspect` 增加`@Configuration`注解，要么在某个带有`@Configuration`的类内（建议用此方式）\n\n```java\n@Bean\npublic HystrixCommandAspect hystrixCommandAspect(){\n    return new HystrixCommandAspect();\n}\n```\n\n\n\n```java\n@Component\npublic class Demo {\n    @HystrixCommand(commandKey = \"#key\",groupKey = \"#key\",fallbackMethod = \"fail\")\n    public String exec(String key){\n        if (RandomUtils.nextBoolean()) {\n            System.out.println(1 / 0);\n        }\n        return key;\n    }\n    public String fail(String key){\n        System.out.println(\"fail:\"+key);\n        return key;\n    }\n}\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Autowired\n    private Demo demo;\n\n    @Test\n    public void testHystrixCommandDynamic(){\n        int i=0;\n        while (i++<5){\n            e.exec(\"this is cmd key\");\n            Thread.sleep(1000);\n            HystrixCommandMetrics.getInstances().forEach(m-> System.out.println(\"cmd:\"+m.getCommandKey()));\n        }\n    }\n}\n```\n\n```\ncmd:this is cmd key\nfail:this is cmd key\ncmd:this is cmd key\nfalse\nkey: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 \ncmd:this is cmd key\ncmd:this is cmd key\ncmd:this is cmd key\n```\n\n\n\n## 放在后边的话\n\n本文只适用于`@HystrixCommand`修饰的，对于`@HystrixCollapser`合并的暂时无效（主要是懒得改），如果有需要自行修改`HystrixCommandAspect` 中的`CollapserMetaHolderFactory`中的`HystrixCollapser`和`HystrixCommand`相关部分\n\n另外目前只适用于`@HystrixCommand` 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持`commandProperties` 和`threadPoolProperties` 也动态，自己尝试修改一下就行了。很简单的\n\n\n\n后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案\n\n\n\n博客 [https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/](https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/)\n\n掘金 [https://juejin.im/post/5bab20fc5188255c980bdc9d](https://juejin.im/post/5bab20fc5188255c980bdc9d)","source":"_posts/hystrixcommand-dynamic-key.md","raw":"---\ntitle: 让 @HystrixCommand 支持Spring EL实现动态commandKey,groupKey,threadPoolKey,fallbackMethod\ndate: 2018-09-26 11:59:40\ntags: [微服务,hystrix,hystrixcommand,hystrix-command,hystrix-command-dynamic]\n---\n\n`hystrix-javanica`  极大的简化了hystrix的开发工作，不用显式的`new`一堆`HystrixCommand`对象，代价就是，`@HystrixCommand` 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 [Changing Annotation Parameters At Runtime](https://www.baeldung.com/java-reflection-change-annotation-params))\n\n\n\n在官方有两个个issues[Netflix/Hystrix/issues#1421](https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783) 和[Netflix/Hystrix/issues#350](https://github.com/Netflix/Hystrix/issues/350) 也在讨论这个问题，但是官方建议针对此场景，用传统的`new HystrixCommand()`解决\n\n\n\n<!--more-->\n\n\n\n## 1. 添加必要依赖\n\n```xml\n\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-core</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-javanica</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n```\n\n\n\n## 2. 新增 HystrixCommandEL 类\n\n```java\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\nimport com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Objects;\n\npublic class HystrixCommandEL implements HystrixCommand {\n\n    private String[] names;\n    private Object[] args;\n\n    ExpressionParser parser = new SpelExpressionParser();\n    StandardEvaluationContext context = new StandardEvaluationContext();\n\n    private HystrixCommand hystrixCommand;\n\n    public HystrixCommandEL(HystrixCommand hystrixCommand, String[] names, Object[] args) {\n        this.hystrixCommand = hystrixCommand;\n        this.args = args;\n        this.names = names;\n    }\n\n    @Override\n    public String groupKey() {\n        return parseEL(hystrixCommand.groupKey());\n    }\n\n    @Override\n    public String commandKey() {\n        return parseEL(hystrixCommand.commandKey());\n    }\n\n    @Override\n    public String threadPoolKey() {\n        return parseEL(hystrixCommand.threadPoolKey());\n    }\n\n    @Override\n    public String fallbackMethod() {\n        return parseEL(hystrixCommand.fallbackMethod());\n    }\n\n    @Override\n    public HystrixProperty[] commandProperties() {\n        return hystrixCommand.commandProperties();\n    }\n\n    @Override\n    public HystrixProperty[] threadPoolProperties() {\n        return hystrixCommand.threadPoolProperties();\n    }\n\n    @Override\n    public Class<? extends Throwable>[] ignoreExceptions() {\n        return hystrixCommand.ignoreExceptions();\n    }\n\n    @Override\n    public ObservableExecutionMode observableExecutionMode() {\n        return hystrixCommand.observableExecutionMode();\n    }\n\n    @Override\n    public HystrixException[] raiseHystrixExceptions() {\n        return hystrixCommand.raiseHystrixExceptions();\n    }\n\n    @Override\n    public String defaultFallback() {\n        return parseEL(hystrixCommand.defaultFallback());\n    }\n\n    @Override\n    public Class<? extends Annotation> annotationType() {\n        return hystrixCommand.annotationType();\n    }\n\n    private String parseEL(String key) {\n        // 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)\n        if (!StringUtils.contains(key, \"#\") || isEmpty(args) || isEmpty(names)) {\n            return key;\n        }\n        for (int i = 0; i < names.length; i++) {\n            context.setVariable(names[i], args[i]);\n        }\n        return parser.parseExpression(key).getValue(context, String.class);\n    }\n\n    private boolean isEmpty(Object [] objs){\n        return Objects.isNull(objs) || objs.length==0;\n    }\n}\n\n```\n\n## 3. 新增 HystrixCommandAspect 类\n\n```java\nimport com.google.common.base.Optional;\nimport com.google.common.collect.ImmutableMap;\nimport com.netflix.hystrix.HystrixInvokable;\nimport com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.command.CommandExecutor;\nimport com.netflix.hystrix.contrib.javanica.command.ExecutionType;\nimport com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;\nimport com.netflix.hystrix.contrib.javanica.command.MetaHolder;\nimport com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;\nimport com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;\nimport com.netflix.hystrix.contrib.javanica.utils.AopUtils;\nimport com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;\nimport com.netflix.hystrix.contrib.javanica.utils.MethodProvider;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.LocalVariableTableParameterNameDiscoverer;\nimport rx.Completable;\nimport rx.Observable;\nimport rx.Single;\nimport rx.functions.Func1;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Future;\n\nimport static com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;\nimport static com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;\nimport static com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;\n\n@Aspect\npublic class HystrixCommandAspect {\n\n    private static final Map<HystrixPointcutType, MetaHolderFactory> META_HOLDER_FACTORY_MAP;\n    // 新增\n    private static LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n    static {\n        META_HOLDER_FACTORY_MAP = ImmutableMap.<HystrixPointcutType, MetaHolderFactory>builder()\n                .put(HystrixPointcutType.COMMAND, new CommandMetaHolderFactory())\n                .put(HystrixPointcutType.COLLAPSER, new CollapserMetaHolderFactory())\n                .build();\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\")\n    public void hystrixCommandAnnotationPointcut() {\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\")\n    public void hystrixCollapserAnnotationPointcut() {\n    }\n\n    @Around(\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\")\n    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable {\n        Method method = getMethodFromTarget(joinPoint);\n        Validate.notNull(method, \"failed to get method from joinPoint: %s\", joinPoint);\n        if (method.isAnnotationPresent(HystrixCommand.class) && method.isAnnotationPresent(HystrixCollapser.class)) {\n            throw new IllegalStateException(\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \" +\n                    \"annotations at the same time\");\n        }\n        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));\n        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);\n        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);\n        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?\n                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();\n\n        Object result;\n        try {\n            if (!metaHolder.isObservable()) {\n                result = CommandExecutor.execute(invokable, executionType, metaHolder);\n            } else {\n                result = executeObservable(invokable, executionType, metaHolder);\n            }\n        } catch (HystrixBadRequestException e) {\n            throw e.getCause() != null ? e.getCause() : e;\n        } catch (HystrixRuntimeException e) {\n            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);\n        }\n        return result;\n    }\n\n    private Object executeObservable(HystrixInvokable invokable, ExecutionType executionType, final MetaHolder metaHolder) {\n        return mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))\n                .onErrorResumeNext(new Func1<Throwable, Observable>() {\n                    @Override\n                    public Observable call(Throwable throwable) {\n                        if (throwable instanceof HystrixBadRequestException) {\n                            return Observable.error(throwable.getCause());\n                        } else if (throwable instanceof HystrixRuntimeException) {\n                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;\n                            return Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));\n                        }\n                        return Observable.error(throwable);\n                    }\n                }), metaHolder);\n    }\n\n    private Object mapObservable(Observable observable, final MetaHolder metaHolder) {\n        if (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toCompletable();\n        } else if (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toSingle();\n        }\n        return observable;\n    }\n\n    private Throwable hystrixRuntimeExceptionToThrowable(MetaHolder metaHolder, HystrixRuntimeException e) {\n        if (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) {\n            return e;\n        }\n        return getCause(e);\n    }\n\n    private Throwable getCause(HystrixRuntimeException e) {\n        if (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) {\n            return e;\n        }\n\n        Throwable cause = e.getCause();\n\n        // latest exception in flow should be propagated to end user\n        if (e.getFallbackException() instanceof FallbackInvocationException) {\n            cause = e.getFallbackException().getCause();\n            if (cause instanceof HystrixRuntimeException) {\n                cause = getCause((HystrixRuntimeException) cause);\n            }\n        } else if (cause instanceof CommandActionExecutionException) { // this situation is possible only if a callee throws an exception which type extends Throwable directly\n            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;\n            cause = commandActionExecutionException.getCause();\n        }\n\n        return Optional.fromNullable(cause).or(e);\n    }\n\n    /**\n     * A factory to create MetaHolder depending on {@link HystrixPointcutType}.\n     */\n    private static abstract class MetaHolderFactory {\n        public MetaHolder create(final ProceedingJoinPoint joinPoint) {\n            Method method = getMethodFromTarget(joinPoint);\n            Object obj = joinPoint.getTarget();\n            Object[] args = joinPoint.getArgs();\n            Object proxy = joinPoint.getThis();\n            return create(proxy, method, obj, args, joinPoint);\n        }\n\n        public abstract MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint);\n\n        MetaHolder.Builder metaHolderBuilder(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            MetaHolder.Builder builder = MetaHolder.builder()\n                    .args(args).method(method).obj(obj).proxyObj(proxy)\n                    .joinPoint(joinPoint);\n\n            setFallbackMethod(builder, obj.getClass(), method);\n            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);\n            return builder;\n        }\n    }\n\n    private static class CollapserMetaHolderFactory extends MetaHolderFactory {\n\n        @Override\n        public MetaHolder create(Object proxy, Method collapserMethod, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);\n            if (collapserMethod.getParameterTypes().length > 1 || collapserMethod.getParameterTypes().length == 0) {\n                throw new IllegalStateException(\"Collapser method must have one argument: \" + collapserMethod);\n            }\n\n            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);\n\n            if (batchCommandMethod == null)\n                throw new IllegalStateException(\"batch method is absent: \" + hystrixCollapser.batchMethod());\n\n            Class<?> batchReturnType = batchCommandMethod.getReturnType();\n            Class<?> collapserReturnType = collapserMethod.getReturnType();\n            boolean observable = collapserReturnType.equals(Observable.class);\n\n            if (!collapserMethod.getParameterTypes()[0]\n                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]))) {\n                throw new IllegalStateException(\"required batch method for collapser is absent, wrong generic type: expected \"\n                        + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]));\n            }\n\n            final Class<?> collapserMethodReturnType = getFirstGenericParameter(\n                    collapserMethod.getGenericReturnType(),\n                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? 1 : 0);\n\n            Class<?> batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());\n            if (!collapserMethodReturnType\n                    .equals(batchCommandActualReturnType)) {\n                throw new IllegalStateException(\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \" +\n                        \"(java.util.List<\" + collapserMethodReturnType + \">)\" + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        batchCommandActualReturnType);\n            }\n\n            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);\n            if (hystrixCommand == null) {\n                throw new IllegalStateException(\"batch method must be annotated with HystrixCommandEL annotation\");\n            }\n            // method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions\n            // that should be invoked upon intercepted method, it's required only for underlying batch command\n\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);\n\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));\n            }\n\n            builder.hystrixCollapser(hystrixCollapser);\n            builder.defaultCollapserKey(collapserMethod.getName());\n            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));\n\n            builder.defaultCommandKey(batchCommandMethod.getName());\n            builder.hystrixCommand(hystrixCommand);\n            builder.executionType(ExecutionType.getExecutionType(batchReturnType));\n            builder.observable(observable);\n            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);\n            if (fallbackMethod.isPresent()) {\n                fallbackMethod.validateReturnType(batchCommandMethod);\n                builder\n                        .fallbackMethod(fallbackMethod.getMethod())\n                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n            }\n            return builder.build();\n        }\n    }\n\n    private static class CommandMetaHolderFactory extends MetaHolderFactory {\n        @Override\n        public MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);\n            // 新增\n            hystrixCommand = new HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);\n            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));\n            }\n\n            return builder.defaultCommandKey(method.getName())\n                    .hystrixCommand(hystrixCommand)\n                    .observableExecutionMode(hystrixCommand.observableExecutionMode())\n                    .executionType(executionType)\n                    .observable(ExecutionType.OBSERVABLE == executionType)\n                    .build();\n        }\n    }\n\n    private enum HystrixPointcutType {\n        COMMAND,\n        COLLAPSER;\n\n        static HystrixPointcutType of(Method method) {\n            if (method.isAnnotationPresent(HystrixCommand.class)) {\n                return COMMAND;\n            } else if (method.isAnnotationPresent(HystrixCollapser.class)) {\n                return COLLAPSER;\n            } else {\n                String methodInfo = getMethodInfo(method);\n                throw new IllegalStateException(\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\" + methodInfo);\n            }\n        }\n    }\n\n    private static Method getAjcMethodFromTarget(JoinPoint joinPoint) {\n        return getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());\n    }\n\n\n    private static Class<?> getFirstGenericParameter(Type type) {\n        return getFirstGenericParameter(type, 1);\n    }\n\n    private static Class<?> getFirstGenericParameter(final Type type, final int nestedDepth) {\n        int cDepth = 0;\n        Type tType = type;\n\n        for (int cDept = 0; cDept < nestedDepth; cDept++) {\n            if (!(tType instanceof ParameterizedType))\n                throw new IllegalStateException(String.format(\"Sub type at nesting level %d of %s is expected to be generic\", cDepth, type));\n            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];\n        }\n\n        if (tType instanceof ParameterizedType)\n            return (Class<?>) ((ParameterizedType) tType).getRawType();\n        else if (tType instanceof Class)\n            return (Class<?>) tType;\n\n        throw new UnsupportedOperationException(\"Unsupported type \" + tType);\n    }\n\n    private static MetaHolder.Builder setDefaultProperties(MetaHolder.Builder builder, Class<?> declaringClass, final ProceedingJoinPoint joinPoint) {\n        Optional<DefaultProperties> defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);\n        builder.defaultGroupKey(declaringClass.getSimpleName());\n        if (defaultPropertiesOpt.isPresent()) {\n            DefaultProperties defaultProperties = defaultPropertiesOpt.get();\n            builder.defaultProperties(defaultProperties);\n            if (StringUtils.isNotBlank(defaultProperties.groupKey())) {\n                builder.defaultGroupKey(defaultProperties.groupKey());\n            }\n            if (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) {\n                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());\n            }\n        }\n        return builder;\n    }\n\n    private static MetaHolder.Builder setFallbackMethod(MetaHolder.Builder builder, Class<?> declaringClass, Method commandMethod) {\n        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);\n        if (fallbackMethod.isPresent()) {\n            fallbackMethod.validateReturnType(commandMethod);\n            builder\n                    .fallbackMethod(fallbackMethod.getMethod())\n                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n        }\n        return builder;\n    }\n}\n\n```\n\n此类99%都是copy自 `com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect`\n\n仅仅新增了两行，分别都注明了`//新增`\n\n\n\n## 使用\n\n要么在`HystrixCommandAspect` 增加`@Configuration`注解，要么在某个带有`@Configuration`的类内（建议用此方式）\n\n```java\n@Bean\npublic HystrixCommandAspect hystrixCommandAspect(){\n    return new HystrixCommandAspect();\n}\n```\n\n\n\n```java\n@Component\npublic class Demo {\n    @HystrixCommand(commandKey = \"#key\",groupKey = \"#key\",fallbackMethod = \"fail\")\n    public String exec(String key){\n        if (RandomUtils.nextBoolean()) {\n            System.out.println(1 / 0);\n        }\n        return key;\n    }\n    public String fail(String key){\n        System.out.println(\"fail:\"+key);\n        return key;\n    }\n}\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Autowired\n    private Demo demo;\n\n    @Test\n    public void testHystrixCommandDynamic(){\n        int i=0;\n        while (i++<5){\n            e.exec(\"this is cmd key\");\n            Thread.sleep(1000);\n            HystrixCommandMetrics.getInstances().forEach(m-> System.out.println(\"cmd:\"+m.getCommandKey()));\n        }\n    }\n}\n```\n\n```\ncmd:this is cmd key\nfail:this is cmd key\ncmd:this is cmd key\nfalse\nkey: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 \ncmd:this is cmd key\ncmd:this is cmd key\ncmd:this is cmd key\n```\n\n\n\n## 放在后边的话\n\n本文只适用于`@HystrixCommand`修饰的，对于`@HystrixCollapser`合并的暂时无效（主要是懒得改），如果有需要自行修改`HystrixCommandAspect` 中的`CollapserMetaHolderFactory`中的`HystrixCollapser`和`HystrixCommand`相关部分\n\n另外目前只适用于`@HystrixCommand` 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持`commandProperties` 和`threadPoolProperties` 也动态，自己尝试修改一下就行了。很简单的\n\n\n\n后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案\n\n\n\n博客 [https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/](https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/)\n\n掘金 [https://juejin.im/post/5bab20fc5188255c980bdc9d](https://juejin.im/post/5bab20fc5188255c980bdc9d)","slug":"hystrixcommand-dynamic-key","published":1,"updated":"2019-08-16T05:56:21.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojkd00h724do65ujbxx3","content":"<p><code>hystrix-javanica</code>  极大的简化了hystrix的开发工作，不用显式的<code>new</code>一堆<code>HystrixCommand</code>对象，代价就是，<code>@HystrixCommand</code> 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 <a href=\"https://www.baeldung.com/java-reflection-change-annotation-params\" target=\"_blank\" rel=\"noopener\">Changing Annotation Parameters At Runtime</a>)</p>\n<p>在官方有两个个issues<a href=\"https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#1421</a> 和<a href=\"https://github.com/Netflix/Hystrix/issues/350\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#350</a> 也在讨论这个问题，但是官方建议针对此场景，用传统的<code>new HystrixCommand()</code>解决</p>\n<a id=\"more\"></a>\n<h2 id=\"1-添加必要依赖\"><a href=\"#1-添加必要依赖\" class=\"headerlink\" title=\"1. 添加必要依赖\"></a>1. 添加必要依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-javanica<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-新增-HystrixCommandEL-类\"><a href=\"#2-新增-HystrixCommandEL-类\" class=\"headerlink\" title=\"2. 新增 HystrixCommandEL 类\"></a>2. 新增 HystrixCommandEL 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.ExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandEL</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixCommand</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] names;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] args;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExpressionParser parser = <span class=\"keyword\">new</span> SpelExpressionParser();</span><br><span class=\"line\">    StandardEvaluationContext context = <span class=\"keyword\">new</span> StandardEvaluationContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HystrixCommand hystrixCommand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HystrixCommandEL</span><span class=\"params\">(HystrixCommand hystrixCommand, String[] names, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hystrixCommand = hystrixCommand;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.names = names;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">groupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.groupKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">commandKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.commandKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">threadPoolKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.threadPoolKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fallbackMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.fallbackMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] commandProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.commandProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] threadPoolProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.threadPoolProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Throwable&gt;[] ignoreExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.ignoreExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObservableExecutionMode <span class=\"title\">observableExecutionMode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.observableExecutionMode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixException[] raiseHystrixExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.raiseHystrixExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.defaultFallback());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Annotation&gt; annotationType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.annotationType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseEL</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.contains(key, <span class=\"string\">\"#\"</span>) || isEmpty(args) || isEmpty(names)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">            context.setVariable(names[i], args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parser.parseExpression(key).getValue(context, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(Object [] objs)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.isNull(objs) || objs.length==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-新增-HystrixCommandAspect-类\"><a href=\"#3-新增-HystrixCommandAspect-类\" class=\"headerlink\" title=\"3. 新增 HystrixCommandAspect 类\"></a>3. 新增 HystrixCommandAspect 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Optional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.ImmutableMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.HystrixInvokable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.CommandExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.ExecutionType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.MetaHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.MethodProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixBadRequestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixRuntimeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.Validate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Completable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Single;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.functions.Func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;HystrixPointcutType, MetaHolderFactory&gt; META_HOLDER_FACTORY_MAP;</span><br><span class=\"line\">    <span class=\"comment\">// 新增</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LocalVariableTableParameterNameDiscoverer u = <span class=\"keyword\">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        META_HOLDER_FACTORY_MAP = ImmutableMap.&lt;HystrixPointcutType, MetaHolderFactory&gt;builder()</span><br><span class=\"line\">                .put(HystrixPointcutType.COMMAND, <span class=\"keyword\">new</span> CommandMetaHolderFactory())</span><br><span class=\"line\">                .put(HystrixPointcutType.COLLAPSER, <span class=\"keyword\">new</span> CollapserMetaHolderFactory())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCommandAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCollapserAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">methodsAnnotatedWithHystrixCommand</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">        Validate.notNull(method, <span class=\"string\">\"failed to get method from joinPoint: %s\"</span>, joinPoint);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class) &amp;&amp; method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"annotations at the same time\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));</span><br><span class=\"line\">        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);</span><br><span class=\"line\">        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);</span><br><span class=\"line\">        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?</span><br><span class=\"line\">                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!metaHolder.isObservable()) &#123;</span><br><span class=\"line\">                result = CommandExecutor.execute(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = executeObservable(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixBadRequestException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e.getCause() != <span class=\"keyword\">null</span> ? e.getCause() : e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> hystrixRuntimeExceptionToThrowable(metaHolder, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">executeObservable</span><span class=\"params\">(HystrixInvokable invokable, ExecutionType executionType, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))</span><br><span class=\"line\">                .onErrorResumeNext(<span class=\"keyword\">new</span> Func1&lt;Throwable, Observable&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Observable <span class=\"title\">call</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(throwable.getCause());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Observable.error(throwable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;), metaHolder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">mapObservable</span><span class=\"params\">(Observable observable, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toCompletable();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toSingle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> observable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">hystrixRuntimeExceptionToThrowable</span><span class=\"params\">(MetaHolder metaHolder, HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getCause(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">getCause</span><span class=\"params\">(HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Throwable cause = e.getCause();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// latest exception in flow should be propagated to end user</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFallbackException() <span class=\"keyword\">instanceof</span> FallbackInvocationException) &#123;</span><br><span class=\"line\">            cause = e.getFallbackException().getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                cause = getCause((HystrixRuntimeException) cause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> CommandActionExecutionException) &#123; <span class=\"comment\">// this situation is possible only if a callee throws an exception which type extends Throwable directly</span></span><br><span class=\"line\">            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;</span><br><span class=\"line\">            cause = commandActionExecutionException.getCause();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.fromNullable(cause).or(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * A factory to create MetaHolder depending on &#123;<span class=\"doctag\">@link</span> HystrixPointcutType&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">            Object obj = joinPoint.getTarget();</span><br><span class=\"line\">            Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">            Object proxy = joinPoint.getThis();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> create(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        MetaHolder.<span class=\"function\">Builder <span class=\"title\">metaHolderBuilder</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            MetaHolder.Builder builder = MetaHolder.builder()</span><br><span class=\"line\">                    .args(args).method(method).obj(obj).proxyObj(proxy)</span><br><span class=\"line\">                    .joinPoint(joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            setFallbackMethod(builder, obj.getClass(), method);</span><br><span class=\"line\">            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollapserMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method collapserMethod, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (collapserMethod.getParameterTypes().length &gt; <span class=\"number\">1</span> || collapserMethod.getParameterTypes().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Collapser method must have one argument: \"</span> + collapserMethod);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (batchCommandMethod == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method is absent: \"</span> + hystrixCollapser.batchMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchReturnType = batchCommandMethod.getReturnType();</span><br><span class=\"line\">            Class&lt;?&gt; collapserReturnType = collapserMethod.getReturnType();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> observable = collapserReturnType.equals(Observable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethod.getParameterTypes()[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"required batch method for collapser is absent, wrong generic type: expected \"</span></span><br><span class=\"line\">                        + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Class&lt;?&gt; collapserMethodReturnType = getFirstGenericParameter(</span><br><span class=\"line\">                    collapserMethod.getGenericReturnType(),</span><br><span class=\"line\">                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethodReturnType</span><br><span class=\"line\">                    .equals(batchCommandActualReturnType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethodReturnType + <span class=\"string\">\"&gt;)\"</span> + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        batchCommandActualReturnType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hystrixCommand == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method must be annotated with HystrixCommandEL annotation\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions</span></span><br><span class=\"line\">            <span class=\"comment\">// that should be invoked upon intercepted method, it's required only for underlying batch command</span></span><br><span class=\"line\"></span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.hystrixCollapser(hystrixCollapser);</span><br><span class=\"line\">            builder.defaultCollapserKey(collapserMethod.getName());</span><br><span class=\"line\">            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.defaultCommandKey(batchCommandMethod.getName());</span><br><span class=\"line\">            builder.hystrixCommand(hystrixCommand);</span><br><span class=\"line\">            builder.executionType(ExecutionType.getExecutionType(batchReturnType));</span><br><span class=\"line\">            builder.observable(observable);</span><br><span class=\"line\">            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">                fallbackMethod.validateReturnType(batchCommandMethod);</span><br><span class=\"line\">                builder</span><br><span class=\"line\">                        .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            hystrixCommand = <span class=\"keyword\">new</span> HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);</span><br><span class=\"line\">            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());</span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.defaultCommandKey(method.getName())</span><br><span class=\"line\">                    .hystrixCommand(hystrixCommand)</span><br><span class=\"line\">                    .observableExecutionMode(hystrixCommand.observableExecutionMode())</span><br><span class=\"line\">                    .executionType(executionType)</span><br><span class=\"line\">                    .observable(ExecutionType.OBSERVABLE == executionType)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> HystrixPointcutType &#123;</span><br><span class=\"line\">        COMMAND,</span><br><span class=\"line\">        COLLAPSER;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> HystrixPointcutType <span class=\"title\">of</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COMMAND;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COLLAPSER;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String methodInfo = getMethodInfo(method);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\"</span> + methodInfo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method <span class=\"title\">getAjcMethodFromTarget</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(Type type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstGenericParameter(type, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(<span class=\"keyword\">final</span> Type type, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> nestedDepth) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Type tType = type;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cDept = <span class=\"number\">0</span>; cDept &lt; nestedDepth; cDept++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(tType <span class=\"keyword\">instanceof</span> ParameterizedType))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(String.format(<span class=\"string\">\"Sub type at nesting level %d of %s is expected to be generic\"</span>, cDepth, type));</span><br><span class=\"line\">            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> ParameterizedType)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) ((ParameterizedType) tType).getRawType();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> Class)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) tType;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Unsupported type \"</span> + tType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setDefaultProperties</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Optional&lt;DefaultProperties&gt; defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);</span><br><span class=\"line\">        builder.defaultGroupKey(declaringClass.getSimpleName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (defaultPropertiesOpt.isPresent()) &#123;</span><br><span class=\"line\">            DefaultProperties defaultProperties = defaultPropertiesOpt.get();</span><br><span class=\"line\">            builder.defaultProperties(defaultProperties);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.groupKey())) &#123;</span><br><span class=\"line\">                builder.defaultGroupKey(defaultProperties.groupKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) &#123;</span><br><span class=\"line\">                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setFallbackMethod</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, Method commandMethod)</span> </span>&#123;</span><br><span class=\"line\">        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">            fallbackMethod.validateReturnType(commandMethod);</span><br><span class=\"line\">            builder</span><br><span class=\"line\">                    .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此类99%都是copy自 <code>com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect</code></p>\n<p>仅仅新增了两行，分别都注明了<code>//新增</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>要么在<code>HystrixCommandAspect</code> 增加<code>@Configuration</code>注解，要么在某个带有<code>@Configuration</code>的类内（建议用此方式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HystrixCommandAspect <span class=\"title\">hystrixCommandAspect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixCommandAspect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(commandKey = <span class=\"string\">\"#key\"</span>,groupKey = <span class=\"string\">\"#key\"</span>,fallbackMethod = <span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">exec</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RandomUtils.nextBoolean()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">1</span> / <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fail</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fail:\"</span>+key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Demo demo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHystrixCommandDynamic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i++&lt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">            e.exec(<span class=\"string\">\"this is cmd key\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            HystrixCommandMetrics.getInstances().forEach(m-&gt; System.out.println(<span class=\"string\">\"cmd:\"</span>+m.getCommandKey()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">fail:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">false</span><br><span class=\"line\">key: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 </span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br></pre></td></tr></table></figure>\n<h2 id=\"放在后边的话\"><a href=\"#放在后边的话\" class=\"headerlink\" title=\"放在后边的话\"></a>放在后边的话</h2><p>本文只适用于<code>@HystrixCommand</code>修饰的，对于<code>@HystrixCollapser</code>合并的暂时无效（主要是懒得改），如果有需要自行修改<code>HystrixCommandAspect</code> 中的<code>CollapserMetaHolderFactory</code>中的<code>HystrixCollapser</code>和<code>HystrixCommand</code>相关部分</p>\n<p>另外目前只适用于<code>@HystrixCommand</code> 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持<code>commandProperties</code> 和<code>threadPoolProperties</code> 也动态，自己尝试修改一下就行了。很简单的</p>\n<p>后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案</p>\n<p>博客 <a href=\"https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/\">https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/</a></p>\n<p>掘金 <a href=\"https://juejin.im/post/5bab20fc5188255c980bdc9d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bab20fc5188255c980bdc9d</a></p>\n","site":{"data":{}},"excerpt":"<p><code>hystrix-javanica</code>  极大的简化了hystrix的开发工作，不用显式的<code>new</code>一堆<code>HystrixCommand</code>对象，代价就是，<code>@HystrixCommand</code> 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 <a href=\"https://www.baeldung.com/java-reflection-change-annotation-params\" target=\"_blank\" rel=\"noopener\">Changing Annotation Parameters At Runtime</a>)</p>\n<p>在官方有两个个issues<a href=\"https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#1421</a> 和<a href=\"https://github.com/Netflix/Hystrix/issues/350\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#350</a> 也在讨论这个问题，但是官方建议针对此场景，用传统的<code>new HystrixCommand()</code>解决</p>","more":"<h2 id=\"1-添加必要依赖\"><a href=\"#1-添加必要依赖\" class=\"headerlink\" title=\"1. 添加必要依赖\"></a>1. 添加必要依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-javanica<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-新增-HystrixCommandEL-类\"><a href=\"#2-新增-HystrixCommandEL-类\" class=\"headerlink\" title=\"2. 新增 HystrixCommandEL 类\"></a>2. 新增 HystrixCommandEL 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.ExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandEL</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixCommand</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] names;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] args;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExpressionParser parser = <span class=\"keyword\">new</span> SpelExpressionParser();</span><br><span class=\"line\">    StandardEvaluationContext context = <span class=\"keyword\">new</span> StandardEvaluationContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HystrixCommand hystrixCommand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HystrixCommandEL</span><span class=\"params\">(HystrixCommand hystrixCommand, String[] names, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hystrixCommand = hystrixCommand;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.names = names;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">groupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.groupKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">commandKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.commandKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">threadPoolKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.threadPoolKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fallbackMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.fallbackMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] commandProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.commandProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] threadPoolProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.threadPoolProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Throwable&gt;[] ignoreExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.ignoreExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObservableExecutionMode <span class=\"title\">observableExecutionMode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.observableExecutionMode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixException[] raiseHystrixExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.raiseHystrixExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.defaultFallback());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Annotation&gt; annotationType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.annotationType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseEL</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.contains(key, <span class=\"string\">\"#\"</span>) || isEmpty(args) || isEmpty(names)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">            context.setVariable(names[i], args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parser.parseExpression(key).getValue(context, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(Object [] objs)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.isNull(objs) || objs.length==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-新增-HystrixCommandAspect-类\"><a href=\"#3-新增-HystrixCommandAspect-类\" class=\"headerlink\" title=\"3. 新增 HystrixCommandAspect 类\"></a>3. 新增 HystrixCommandAspect 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Optional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.ImmutableMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.HystrixInvokable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.CommandExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.ExecutionType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.MetaHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.MethodProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixBadRequestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixRuntimeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.Validate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Completable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Single;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.functions.Func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;HystrixPointcutType, MetaHolderFactory&gt; META_HOLDER_FACTORY_MAP;</span><br><span class=\"line\">    <span class=\"comment\">// 新增</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LocalVariableTableParameterNameDiscoverer u = <span class=\"keyword\">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        META_HOLDER_FACTORY_MAP = ImmutableMap.&lt;HystrixPointcutType, MetaHolderFactory&gt;builder()</span><br><span class=\"line\">                .put(HystrixPointcutType.COMMAND, <span class=\"keyword\">new</span> CommandMetaHolderFactory())</span><br><span class=\"line\">                .put(HystrixPointcutType.COLLAPSER, <span class=\"keyword\">new</span> CollapserMetaHolderFactory())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCommandAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCollapserAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">methodsAnnotatedWithHystrixCommand</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">        Validate.notNull(method, <span class=\"string\">\"failed to get method from joinPoint: %s\"</span>, joinPoint);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class) &amp;&amp; method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"annotations at the same time\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));</span><br><span class=\"line\">        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);</span><br><span class=\"line\">        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);</span><br><span class=\"line\">        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?</span><br><span class=\"line\">                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!metaHolder.isObservable()) &#123;</span><br><span class=\"line\">                result = CommandExecutor.execute(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = executeObservable(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixBadRequestException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e.getCause() != <span class=\"keyword\">null</span> ? e.getCause() : e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> hystrixRuntimeExceptionToThrowable(metaHolder, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">executeObservable</span><span class=\"params\">(HystrixInvokable invokable, ExecutionType executionType, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))</span><br><span class=\"line\">                .onErrorResumeNext(<span class=\"keyword\">new</span> Func1&lt;Throwable, Observable&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Observable <span class=\"title\">call</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(throwable.getCause());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Observable.error(throwable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;), metaHolder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">mapObservable</span><span class=\"params\">(Observable observable, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toCompletable();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toSingle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> observable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">hystrixRuntimeExceptionToThrowable</span><span class=\"params\">(MetaHolder metaHolder, HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getCause(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">getCause</span><span class=\"params\">(HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Throwable cause = e.getCause();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// latest exception in flow should be propagated to end user</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFallbackException() <span class=\"keyword\">instanceof</span> FallbackInvocationException) &#123;</span><br><span class=\"line\">            cause = e.getFallbackException().getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                cause = getCause((HystrixRuntimeException) cause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> CommandActionExecutionException) &#123; <span class=\"comment\">// this situation is possible only if a callee throws an exception which type extends Throwable directly</span></span><br><span class=\"line\">            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;</span><br><span class=\"line\">            cause = commandActionExecutionException.getCause();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.fromNullable(cause).or(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * A factory to create MetaHolder depending on &#123;<span class=\"doctag\">@link</span> HystrixPointcutType&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">            Object obj = joinPoint.getTarget();</span><br><span class=\"line\">            Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">            Object proxy = joinPoint.getThis();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> create(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        MetaHolder.<span class=\"function\">Builder <span class=\"title\">metaHolderBuilder</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            MetaHolder.Builder builder = MetaHolder.builder()</span><br><span class=\"line\">                    .args(args).method(method).obj(obj).proxyObj(proxy)</span><br><span class=\"line\">                    .joinPoint(joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            setFallbackMethod(builder, obj.getClass(), method);</span><br><span class=\"line\">            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollapserMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method collapserMethod, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (collapserMethod.getParameterTypes().length &gt; <span class=\"number\">1</span> || collapserMethod.getParameterTypes().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Collapser method must have one argument: \"</span> + collapserMethod);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (batchCommandMethod == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method is absent: \"</span> + hystrixCollapser.batchMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchReturnType = batchCommandMethod.getReturnType();</span><br><span class=\"line\">            Class&lt;?&gt; collapserReturnType = collapserMethod.getReturnType();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> observable = collapserReturnType.equals(Observable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethod.getParameterTypes()[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"required batch method for collapser is absent, wrong generic type: expected \"</span></span><br><span class=\"line\">                        + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Class&lt;?&gt; collapserMethodReturnType = getFirstGenericParameter(</span><br><span class=\"line\">                    collapserMethod.getGenericReturnType(),</span><br><span class=\"line\">                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethodReturnType</span><br><span class=\"line\">                    .equals(batchCommandActualReturnType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethodReturnType + <span class=\"string\">\"&gt;)\"</span> + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        batchCommandActualReturnType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hystrixCommand == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method must be annotated with HystrixCommandEL annotation\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions</span></span><br><span class=\"line\">            <span class=\"comment\">// that should be invoked upon intercepted method, it's required only for underlying batch command</span></span><br><span class=\"line\"></span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.hystrixCollapser(hystrixCollapser);</span><br><span class=\"line\">            builder.defaultCollapserKey(collapserMethod.getName());</span><br><span class=\"line\">            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.defaultCommandKey(batchCommandMethod.getName());</span><br><span class=\"line\">            builder.hystrixCommand(hystrixCommand);</span><br><span class=\"line\">            builder.executionType(ExecutionType.getExecutionType(batchReturnType));</span><br><span class=\"line\">            builder.observable(observable);</span><br><span class=\"line\">            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">                fallbackMethod.validateReturnType(batchCommandMethod);</span><br><span class=\"line\">                builder</span><br><span class=\"line\">                        .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            hystrixCommand = <span class=\"keyword\">new</span> HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);</span><br><span class=\"line\">            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());</span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.defaultCommandKey(method.getName())</span><br><span class=\"line\">                    .hystrixCommand(hystrixCommand)</span><br><span class=\"line\">                    .observableExecutionMode(hystrixCommand.observableExecutionMode())</span><br><span class=\"line\">                    .executionType(executionType)</span><br><span class=\"line\">                    .observable(ExecutionType.OBSERVABLE == executionType)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> HystrixPointcutType &#123;</span><br><span class=\"line\">        COMMAND,</span><br><span class=\"line\">        COLLAPSER;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> HystrixPointcutType <span class=\"title\">of</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COMMAND;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COLLAPSER;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String methodInfo = getMethodInfo(method);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\"</span> + methodInfo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method <span class=\"title\">getAjcMethodFromTarget</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(Type type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstGenericParameter(type, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(<span class=\"keyword\">final</span> Type type, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> nestedDepth) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Type tType = type;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cDept = <span class=\"number\">0</span>; cDept &lt; nestedDepth; cDept++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(tType <span class=\"keyword\">instanceof</span> ParameterizedType))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(String.format(<span class=\"string\">\"Sub type at nesting level %d of %s is expected to be generic\"</span>, cDepth, type));</span><br><span class=\"line\">            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> ParameterizedType)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) ((ParameterizedType) tType).getRawType();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> Class)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) tType;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Unsupported type \"</span> + tType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setDefaultProperties</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Optional&lt;DefaultProperties&gt; defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);</span><br><span class=\"line\">        builder.defaultGroupKey(declaringClass.getSimpleName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (defaultPropertiesOpt.isPresent()) &#123;</span><br><span class=\"line\">            DefaultProperties defaultProperties = defaultPropertiesOpt.get();</span><br><span class=\"line\">            builder.defaultProperties(defaultProperties);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.groupKey())) &#123;</span><br><span class=\"line\">                builder.defaultGroupKey(defaultProperties.groupKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) &#123;</span><br><span class=\"line\">                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setFallbackMethod</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, Method commandMethod)</span> </span>&#123;</span><br><span class=\"line\">        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">            fallbackMethod.validateReturnType(commandMethod);</span><br><span class=\"line\">            builder</span><br><span class=\"line\">                    .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此类99%都是copy自 <code>com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect</code></p>\n<p>仅仅新增了两行，分别都注明了<code>//新增</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>要么在<code>HystrixCommandAspect</code> 增加<code>@Configuration</code>注解，要么在某个带有<code>@Configuration</code>的类内（建议用此方式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HystrixCommandAspect <span class=\"title\">hystrixCommandAspect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixCommandAspect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(commandKey = <span class=\"string\">\"#key\"</span>,groupKey = <span class=\"string\">\"#key\"</span>,fallbackMethod = <span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">exec</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RandomUtils.nextBoolean()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">1</span> / <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fail</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fail:\"</span>+key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Demo demo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHystrixCommandDynamic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i++&lt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">            e.exec(<span class=\"string\">\"this is cmd key\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            HystrixCommandMetrics.getInstances().forEach(m-&gt; System.out.println(<span class=\"string\">\"cmd:\"</span>+m.getCommandKey()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">fail:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">false</span><br><span class=\"line\">key: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 </span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br></pre></td></tr></table></figure>\n<h2 id=\"放在后边的话\"><a href=\"#放在后边的话\" class=\"headerlink\" title=\"放在后边的话\"></a>放在后边的话</h2><p>本文只适用于<code>@HystrixCommand</code>修饰的，对于<code>@HystrixCollapser</code>合并的暂时无效（主要是懒得改），如果有需要自行修改<code>HystrixCommandAspect</code> 中的<code>CollapserMetaHolderFactory</code>中的<code>HystrixCollapser</code>和<code>HystrixCommand</code>相关部分</p>\n<p>另外目前只适用于<code>@HystrixCommand</code> 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持<code>commandProperties</code> 和<code>threadPoolProperties</code> 也动态，自己尝试修改一下就行了。很简单的</p>\n<p>后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案</p>\n<p>博客 <a href=\"https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/\">https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/</a></p>\n<p>掘金 <a href=\"https://juejin.im/post/5bab20fc5188255c980bdc9d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bab20fc5188255c980bdc9d</a></p>"},{"title":"让 @HystrixCommand 支持Spring EL实现动态commandKey,groupKey,threadPoolKey,fallbackMethod","date":"2018-09-26T03:59:40.000Z","_content":"\n`hystrix-javanica`  极大的简化了hystrix的开发工作，不用显式的`new`一堆`HystrixCommand`对象，代价就是，`@HystrixCommand` 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 [Changing Annotation Parameters At Runtime](https://www.baeldung.com/java-reflection-change-annotation-params))\n\n\n\n在官方有两个个issues[Netflix/Hystrix/issues#1421](https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783) 和[Netflix/Hystrix/issues#350](https://github.com/Netflix/Hystrix/issues/350) 也在讨论这个问题，但是官方建议针对此场景，用传统的`new HystrixCommand()`解决\n\n\n\n<!--more-->\n\n\n\n## 1. 添加必要依赖\n\n```xml\n\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-core</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-javanica</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n```\n\n\n\n## 2. 新增 HystrixCommandEL 类\n\n```java\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\nimport com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Objects;\n\npublic class HystrixCommandEL implements HystrixCommand {\n\n    private String[] names;\n    private Object[] args;\n\n    ExpressionParser parser = new SpelExpressionParser();\n    StandardEvaluationContext context = new StandardEvaluationContext();\n\n    private HystrixCommand hystrixCommand;\n\n    public HystrixCommandEL(HystrixCommand hystrixCommand, String[] names, Object[] args) {\n        this.hystrixCommand = hystrixCommand;\n        this.args = args;\n        this.names = names;\n    }\n\n    @Override\n    public String groupKey() {\n        return parseEL(hystrixCommand.groupKey());\n    }\n\n    @Override\n    public String commandKey() {\n        return parseEL(hystrixCommand.commandKey());\n    }\n\n    @Override\n    public String threadPoolKey() {\n        return parseEL(hystrixCommand.threadPoolKey());\n    }\n\n    @Override\n    public String fallbackMethod() {\n        return parseEL(hystrixCommand.fallbackMethod());\n    }\n\n    @Override\n    public HystrixProperty[] commandProperties() {\n        return hystrixCommand.commandProperties();\n    }\n\n    @Override\n    public HystrixProperty[] threadPoolProperties() {\n        return hystrixCommand.threadPoolProperties();\n    }\n\n    @Override\n    public Class<? extends Throwable>[] ignoreExceptions() {\n        return hystrixCommand.ignoreExceptions();\n    }\n\n    @Override\n    public ObservableExecutionMode observableExecutionMode() {\n        return hystrixCommand.observableExecutionMode();\n    }\n\n    @Override\n    public HystrixException[] raiseHystrixExceptions() {\n        return hystrixCommand.raiseHystrixExceptions();\n    }\n\n    @Override\n    public String defaultFallback() {\n        return parseEL(hystrixCommand.defaultFallback());\n    }\n\n    @Override\n    public Class<? extends Annotation> annotationType() {\n        return hystrixCommand.annotationType();\n    }\n\n    private String parseEL(String key) {\n        // 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)\n        if (!StringUtils.contains(key, \"#\") || isEmpty(args) || isEmpty(names)) {\n            return key;\n        }\n        for (int i = 0; i < names.length; i++) {\n            context.setVariable(names[i], args[i]);\n        }\n        return parser.parseExpression(key).getValue(context, String.class);\n    }\n\n    private boolean isEmpty(Object [] objs){\n        return Objects.isNull(objs) || objs.length==0;\n    }\n}\n\n```\n\n## 3. 新增 HystrixCommandAspect 类\n\n```java\nimport com.google.common.base.Optional;\nimport com.google.common.collect.ImmutableMap;\nimport com.netflix.hystrix.HystrixInvokable;\nimport com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.command.CommandExecutor;\nimport com.netflix.hystrix.contrib.javanica.command.ExecutionType;\nimport com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;\nimport com.netflix.hystrix.contrib.javanica.command.MetaHolder;\nimport com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;\nimport com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;\nimport com.netflix.hystrix.contrib.javanica.utils.AopUtils;\nimport com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;\nimport com.netflix.hystrix.contrib.javanica.utils.MethodProvider;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.LocalVariableTableParameterNameDiscoverer;\nimport rx.Completable;\nimport rx.Observable;\nimport rx.Single;\nimport rx.functions.Func1;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Future;\n\nimport static com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;\nimport static com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;\nimport static com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;\n\n@Aspect\npublic class HystrixCommandAspect {\n\n    private static final Map<HystrixPointcutType, MetaHolderFactory> META_HOLDER_FACTORY_MAP;\n    // 新增\n    private static LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n    static {\n        META_HOLDER_FACTORY_MAP = ImmutableMap.<HystrixPointcutType, MetaHolderFactory>builder()\n                .put(HystrixPointcutType.COMMAND, new CommandMetaHolderFactory())\n                .put(HystrixPointcutType.COLLAPSER, new CollapserMetaHolderFactory())\n                .build();\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\")\n    public void hystrixCommandAnnotationPointcut() {\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\")\n    public void hystrixCollapserAnnotationPointcut() {\n    }\n\n    @Around(\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\")\n    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable {\n        Method method = getMethodFromTarget(joinPoint);\n        Validate.notNull(method, \"failed to get method from joinPoint: %s\", joinPoint);\n        if (method.isAnnotationPresent(HystrixCommand.class) && method.isAnnotationPresent(HystrixCollapser.class)) {\n            throw new IllegalStateException(\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \" +\n                    \"annotations at the same time\");\n        }\n        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));\n        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);\n        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);\n        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?\n                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();\n\n        Object result;\n        try {\n            if (!metaHolder.isObservable()) {\n                result = CommandExecutor.execute(invokable, executionType, metaHolder);\n            } else {\n                result = executeObservable(invokable, executionType, metaHolder);\n            }\n        } catch (HystrixBadRequestException e) {\n            throw e.getCause() != null ? e.getCause() : e;\n        } catch (HystrixRuntimeException e) {\n            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);\n        }\n        return result;\n    }\n\n    private Object executeObservable(HystrixInvokable invokable, ExecutionType executionType, final MetaHolder metaHolder) {\n        return mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))\n                .onErrorResumeNext(new Func1<Throwable, Observable>() {\n                    @Override\n                    public Observable call(Throwable throwable) {\n                        if (throwable instanceof HystrixBadRequestException) {\n                            return Observable.error(throwable.getCause());\n                        } else if (throwable instanceof HystrixRuntimeException) {\n                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;\n                            return Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));\n                        }\n                        return Observable.error(throwable);\n                    }\n                }), metaHolder);\n    }\n\n    private Object mapObservable(Observable observable, final MetaHolder metaHolder) {\n        if (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toCompletable();\n        } else if (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toSingle();\n        }\n        return observable;\n    }\n\n    private Throwable hystrixRuntimeExceptionToThrowable(MetaHolder metaHolder, HystrixRuntimeException e) {\n        if (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) {\n            return e;\n        }\n        return getCause(e);\n    }\n\n    private Throwable getCause(HystrixRuntimeException e) {\n        if (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) {\n            return e;\n        }\n\n        Throwable cause = e.getCause();\n\n        // latest exception in flow should be propagated to end user\n        if (e.getFallbackException() instanceof FallbackInvocationException) {\n            cause = e.getFallbackException().getCause();\n            if (cause instanceof HystrixRuntimeException) {\n                cause = getCause((HystrixRuntimeException) cause);\n            }\n        } else if (cause instanceof CommandActionExecutionException) { // this situation is possible only if a callee throws an exception which type extends Throwable directly\n            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;\n            cause = commandActionExecutionException.getCause();\n        }\n\n        return Optional.fromNullable(cause).or(e);\n    }\n\n    /**\n     * A factory to create MetaHolder depending on {@link HystrixPointcutType}.\n     */\n    private static abstract class MetaHolderFactory {\n        public MetaHolder create(final ProceedingJoinPoint joinPoint) {\n            Method method = getMethodFromTarget(joinPoint);\n            Object obj = joinPoint.getTarget();\n            Object[] args = joinPoint.getArgs();\n            Object proxy = joinPoint.getThis();\n            return create(proxy, method, obj, args, joinPoint);\n        }\n\n        public abstract MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint);\n\n        MetaHolder.Builder metaHolderBuilder(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            MetaHolder.Builder builder = MetaHolder.builder()\n                    .args(args).method(method).obj(obj).proxyObj(proxy)\n                    .joinPoint(joinPoint);\n\n            setFallbackMethod(builder, obj.getClass(), method);\n            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);\n            return builder;\n        }\n    }\n\n    private static class CollapserMetaHolderFactory extends MetaHolderFactory {\n\n        @Override\n        public MetaHolder create(Object proxy, Method collapserMethod, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);\n            if (collapserMethod.getParameterTypes().length > 1 || collapserMethod.getParameterTypes().length == 0) {\n                throw new IllegalStateException(\"Collapser method must have one argument: \" + collapserMethod);\n            }\n\n            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);\n\n            if (batchCommandMethod == null)\n                throw new IllegalStateException(\"batch method is absent: \" + hystrixCollapser.batchMethod());\n\n            Class<?> batchReturnType = batchCommandMethod.getReturnType();\n            Class<?> collapserReturnType = collapserMethod.getReturnType();\n            boolean observable = collapserReturnType.equals(Observable.class);\n\n            if (!collapserMethod.getParameterTypes()[0]\n                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]))) {\n                throw new IllegalStateException(\"required batch method for collapser is absent, wrong generic type: expected \"\n                        + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]));\n            }\n\n            final Class<?> collapserMethodReturnType = getFirstGenericParameter(\n                    collapserMethod.getGenericReturnType(),\n                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? 1 : 0);\n\n            Class<?> batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());\n            if (!collapserMethodReturnType\n                    .equals(batchCommandActualReturnType)) {\n                throw new IllegalStateException(\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \" +\n                        \"(java.util.List<\" + collapserMethodReturnType + \">)\" + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        batchCommandActualReturnType);\n            }\n\n            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);\n            if (hystrixCommand == null) {\n                throw new IllegalStateException(\"batch method must be annotated with HystrixCommandEL annotation\");\n            }\n            // method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions\n            // that should be invoked upon intercepted method, it's required only for underlying batch command\n\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);\n\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));\n            }\n\n            builder.hystrixCollapser(hystrixCollapser);\n            builder.defaultCollapserKey(collapserMethod.getName());\n            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));\n\n            builder.defaultCommandKey(batchCommandMethod.getName());\n            builder.hystrixCommand(hystrixCommand);\n            builder.executionType(ExecutionType.getExecutionType(batchReturnType));\n            builder.observable(observable);\n            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);\n            if (fallbackMethod.isPresent()) {\n                fallbackMethod.validateReturnType(batchCommandMethod);\n                builder\n                        .fallbackMethod(fallbackMethod.getMethod())\n                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n            }\n            return builder.build();\n        }\n    }\n\n    private static class CommandMetaHolderFactory extends MetaHolderFactory {\n        @Override\n        public MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);\n            // 新增\n            hystrixCommand = new HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);\n            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));\n            }\n\n            return builder.defaultCommandKey(method.getName())\n                    .hystrixCommand(hystrixCommand)\n                    .observableExecutionMode(hystrixCommand.observableExecutionMode())\n                    .executionType(executionType)\n                    .observable(ExecutionType.OBSERVABLE == executionType)\n                    .build();\n        }\n    }\n\n    private enum HystrixPointcutType {\n        COMMAND,\n        COLLAPSER;\n\n        static HystrixPointcutType of(Method method) {\n            if (method.isAnnotationPresent(HystrixCommand.class)) {\n                return COMMAND;\n            } else if (method.isAnnotationPresent(HystrixCollapser.class)) {\n                return COLLAPSER;\n            } else {\n                String methodInfo = getMethodInfo(method);\n                throw new IllegalStateException(\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\" + methodInfo);\n            }\n        }\n    }\n\n    private static Method getAjcMethodFromTarget(JoinPoint joinPoint) {\n        return getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());\n    }\n\n\n    private static Class<?> getFirstGenericParameter(Type type) {\n        return getFirstGenericParameter(type, 1);\n    }\n\n    private static Class<?> getFirstGenericParameter(final Type type, final int nestedDepth) {\n        int cDepth = 0;\n        Type tType = type;\n\n        for (int cDept = 0; cDept < nestedDepth; cDept++) {\n            if (!(tType instanceof ParameterizedType))\n                throw new IllegalStateException(String.format(\"Sub type at nesting level %d of %s is expected to be generic\", cDepth, type));\n            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];\n        }\n\n        if (tType instanceof ParameterizedType)\n            return (Class<?>) ((ParameterizedType) tType).getRawType();\n        else if (tType instanceof Class)\n            return (Class<?>) tType;\n\n        throw new UnsupportedOperationException(\"Unsupported type \" + tType);\n    }\n\n    private static MetaHolder.Builder setDefaultProperties(MetaHolder.Builder builder, Class<?> declaringClass, final ProceedingJoinPoint joinPoint) {\n        Optional<DefaultProperties> defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);\n        builder.defaultGroupKey(declaringClass.getSimpleName());\n        if (defaultPropertiesOpt.isPresent()) {\n            DefaultProperties defaultProperties = defaultPropertiesOpt.get();\n            builder.defaultProperties(defaultProperties);\n            if (StringUtils.isNotBlank(defaultProperties.groupKey())) {\n                builder.defaultGroupKey(defaultProperties.groupKey());\n            }\n            if (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) {\n                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());\n            }\n        }\n        return builder;\n    }\n\n    private static MetaHolder.Builder setFallbackMethod(MetaHolder.Builder builder, Class<?> declaringClass, Method commandMethod) {\n        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);\n        if (fallbackMethod.isPresent()) {\n            fallbackMethod.validateReturnType(commandMethod);\n            builder\n                    .fallbackMethod(fallbackMethod.getMethod())\n                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n        }\n        return builder;\n    }\n}\n\n```\n\n此类99%都是copy自 `com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect`\n\n仅仅新增了两行，分别都注明了`//新增`\n\n\n\n## 使用\n\n要么在`HystrixCommandAspect` 增加`@Configuration`注解，要么在某个带有`@Configuration`的类内（建议用此方式）\n\n```java\n@Bean\npublic HystrixCommandAspect hystrixCommandAspect(){\n    return new HystrixCommandAspect();\n}\n```\n\n\n\n```java\n@Component\npublic class Demo {\n    @HystrixCommand(commandKey = \"#key\",groupKey = \"#key\",fallbackMethod = \"fail\")\n    public String exec(String key){\n        if (RandomUtils.nextBoolean()) {\n            System.out.println(1 / 0);\n        }\n        return key;\n    }\n    public String fail(String key){\n        System.out.println(\"fail:\"+key);\n        return key;\n    }\n}\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Autowired\n    private Demo demo;\n\n    @Test\n    public void testHystrixCommandDynamic(){\n        int i=0;\n        while (i++<5){\n            e.exec(\"this is cmd key\");\n            Thread.sleep(1000);\n            HystrixCommandMetrics.getInstances().forEach(m-> System.out.println(\"cmd:\"+m.getCommandKey()));\n        }\n    }\n}\n```\n\n```\ncmd:this is cmd key\nfail:this is cmd key\ncmd:this is cmd key\nfalse\nkey: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 \ncmd:this is cmd key\ncmd:this is cmd key\ncmd:this is cmd key\n```\n\n\n\n## 放在后边的话\n\n本文只适用于`@HystrixCommand`修饰的，对于`@HystrixCollapser`合并的暂时无效（主要是懒得改），如果有需要自行修改`HystrixCommandAspect` 中的`CollapserMetaHolderFactory`中的`HystrixCollapser`和`HystrixCommand`相关部分\n\n另外目前只适用于`@HystrixCommand` 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持`commandProperties` 和`threadPoolProperties` 也动态，自己尝试修改一下就行了。很简单的\n\n\n\n后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案\n\n\n\n博客 [https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/](https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/)\n\n掘金 [https://juejin.im/post/5bab20fc5188255c980bdc9d](https://juejin.im/post/5bab20fc5188255c980bdc9d)","source":"_posts/hystrixcommand_dynamic_key.md","raw":"---\ntitle: 让 @HystrixCommand 支持Spring EL实现动态commandKey,groupKey,threadPoolKey,fallbackMethod\ndate: 2018-09-26 11:59:40\ntags: [微服务,hystrix,hystrixcommand,hystrix-command,hystrix-command-dynamic]\n---\n\n`hystrix-javanica`  极大的简化了hystrix的开发工作，不用显式的`new`一堆`HystrixCommand`对象，代价就是，`@HystrixCommand` 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 [Changing Annotation Parameters At Runtime](https://www.baeldung.com/java-reflection-change-annotation-params))\n\n\n\n在官方有两个个issues[Netflix/Hystrix/issues#1421](https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783) 和[Netflix/Hystrix/issues#350](https://github.com/Netflix/Hystrix/issues/350) 也在讨论这个问题，但是官方建议针对此场景，用传统的`new HystrixCommand()`解决\n\n\n\n<!--more-->\n\n\n\n## 1. 添加必要依赖\n\n```xml\n\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-core</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n        <dependency>\n            <groupId>com.netflix.hystrix</groupId>\n            <artifactId>hystrix-javanica</artifactId>\n            <version>1.5.12</version>\n        </dependency>\n```\n\n\n\n## 2. 新增 HystrixCommandEL 类\n\n```java\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\nimport com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Objects;\n\npublic class HystrixCommandEL implements HystrixCommand {\n\n    private String[] names;\n    private Object[] args;\n\n    ExpressionParser parser = new SpelExpressionParser();\n    StandardEvaluationContext context = new StandardEvaluationContext();\n\n    private HystrixCommand hystrixCommand;\n\n    public HystrixCommandEL(HystrixCommand hystrixCommand, String[] names, Object[] args) {\n        this.hystrixCommand = hystrixCommand;\n        this.args = args;\n        this.names = names;\n    }\n\n    @Override\n    public String groupKey() {\n        return parseEL(hystrixCommand.groupKey());\n    }\n\n    @Override\n    public String commandKey() {\n        return parseEL(hystrixCommand.commandKey());\n    }\n\n    @Override\n    public String threadPoolKey() {\n        return parseEL(hystrixCommand.threadPoolKey());\n    }\n\n    @Override\n    public String fallbackMethod() {\n        return parseEL(hystrixCommand.fallbackMethod());\n    }\n\n    @Override\n    public HystrixProperty[] commandProperties() {\n        return hystrixCommand.commandProperties();\n    }\n\n    @Override\n    public HystrixProperty[] threadPoolProperties() {\n        return hystrixCommand.threadPoolProperties();\n    }\n\n    @Override\n    public Class<? extends Throwable>[] ignoreExceptions() {\n        return hystrixCommand.ignoreExceptions();\n    }\n\n    @Override\n    public ObservableExecutionMode observableExecutionMode() {\n        return hystrixCommand.observableExecutionMode();\n    }\n\n    @Override\n    public HystrixException[] raiseHystrixExceptions() {\n        return hystrixCommand.raiseHystrixExceptions();\n    }\n\n    @Override\n    public String defaultFallback() {\n        return parseEL(hystrixCommand.defaultFallback());\n    }\n\n    @Override\n    public Class<? extends Annotation> annotationType() {\n        return hystrixCommand.annotationType();\n    }\n\n    private String parseEL(String key) {\n        // 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)\n        if (!StringUtils.contains(key, \"#\") || isEmpty(args) || isEmpty(names)) {\n            return key;\n        }\n        for (int i = 0; i < names.length; i++) {\n            context.setVariable(names[i], args[i]);\n        }\n        return parser.parseExpression(key).getValue(context, String.class);\n    }\n\n    private boolean isEmpty(Object [] objs){\n        return Objects.isNull(objs) || objs.length==0;\n    }\n}\n\n```\n\n## 3. 新增 HystrixCommandAspect 类\n\n```java\nimport com.google.common.base.Optional;\nimport com.google.common.collect.ImmutableMap;\nimport com.netflix.hystrix.HystrixInvokable;\nimport com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixException;\nimport com.netflix.hystrix.contrib.javanica.command.CommandExecutor;\nimport com.netflix.hystrix.contrib.javanica.command.ExecutionType;\nimport com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;\nimport com.netflix.hystrix.contrib.javanica.command.MetaHolder;\nimport com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;\nimport com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;\nimport com.netflix.hystrix.contrib.javanica.utils.AopUtils;\nimport com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;\nimport com.netflix.hystrix.contrib.javanica.utils.MethodProvider;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.LocalVariableTableParameterNameDiscoverer;\nimport rx.Completable;\nimport rx.Observable;\nimport rx.Single;\nimport rx.functions.Func1;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Future;\n\nimport static com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;\nimport static com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;\nimport static com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;\n\n@Aspect\npublic class HystrixCommandAspect {\n\n    private static final Map<HystrixPointcutType, MetaHolderFactory> META_HOLDER_FACTORY_MAP;\n    // 新增\n    private static LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n    static {\n        META_HOLDER_FACTORY_MAP = ImmutableMap.<HystrixPointcutType, MetaHolderFactory>builder()\n                .put(HystrixPointcutType.COMMAND, new CommandMetaHolderFactory())\n                .put(HystrixPointcutType.COLLAPSER, new CollapserMetaHolderFactory())\n                .build();\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\")\n    public void hystrixCommandAnnotationPointcut() {\n    }\n\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\")\n    public void hystrixCollapserAnnotationPointcut() {\n    }\n\n    @Around(\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\")\n    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable {\n        Method method = getMethodFromTarget(joinPoint);\n        Validate.notNull(method, \"failed to get method from joinPoint: %s\", joinPoint);\n        if (method.isAnnotationPresent(HystrixCommand.class) && method.isAnnotationPresent(HystrixCollapser.class)) {\n            throw new IllegalStateException(\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \" +\n                    \"annotations at the same time\");\n        }\n        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));\n        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);\n        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);\n        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?\n                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();\n\n        Object result;\n        try {\n            if (!metaHolder.isObservable()) {\n                result = CommandExecutor.execute(invokable, executionType, metaHolder);\n            } else {\n                result = executeObservable(invokable, executionType, metaHolder);\n            }\n        } catch (HystrixBadRequestException e) {\n            throw e.getCause() != null ? e.getCause() : e;\n        } catch (HystrixRuntimeException e) {\n            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);\n        }\n        return result;\n    }\n\n    private Object executeObservable(HystrixInvokable invokable, ExecutionType executionType, final MetaHolder metaHolder) {\n        return mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))\n                .onErrorResumeNext(new Func1<Throwable, Observable>() {\n                    @Override\n                    public Observable call(Throwable throwable) {\n                        if (throwable instanceof HystrixBadRequestException) {\n                            return Observable.error(throwable.getCause());\n                        } else if (throwable instanceof HystrixRuntimeException) {\n                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;\n                            return Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));\n                        }\n                        return Observable.error(throwable);\n                    }\n                }), metaHolder);\n    }\n\n    private Object mapObservable(Observable observable, final MetaHolder metaHolder) {\n        if (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toCompletable();\n        } else if (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) {\n            return observable.toSingle();\n        }\n        return observable;\n    }\n\n    private Throwable hystrixRuntimeExceptionToThrowable(MetaHolder metaHolder, HystrixRuntimeException e) {\n        if (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) {\n            return e;\n        }\n        return getCause(e);\n    }\n\n    private Throwable getCause(HystrixRuntimeException e) {\n        if (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) {\n            return e;\n        }\n\n        Throwable cause = e.getCause();\n\n        // latest exception in flow should be propagated to end user\n        if (e.getFallbackException() instanceof FallbackInvocationException) {\n            cause = e.getFallbackException().getCause();\n            if (cause instanceof HystrixRuntimeException) {\n                cause = getCause((HystrixRuntimeException) cause);\n            }\n        } else if (cause instanceof CommandActionExecutionException) { // this situation is possible only if a callee throws an exception which type extends Throwable directly\n            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;\n            cause = commandActionExecutionException.getCause();\n        }\n\n        return Optional.fromNullable(cause).or(e);\n    }\n\n    /**\n     * A factory to create MetaHolder depending on {@link HystrixPointcutType}.\n     */\n    private static abstract class MetaHolderFactory {\n        public MetaHolder create(final ProceedingJoinPoint joinPoint) {\n            Method method = getMethodFromTarget(joinPoint);\n            Object obj = joinPoint.getTarget();\n            Object[] args = joinPoint.getArgs();\n            Object proxy = joinPoint.getThis();\n            return create(proxy, method, obj, args, joinPoint);\n        }\n\n        public abstract MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint);\n\n        MetaHolder.Builder metaHolderBuilder(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            MetaHolder.Builder builder = MetaHolder.builder()\n                    .args(args).method(method).obj(obj).proxyObj(proxy)\n                    .joinPoint(joinPoint);\n\n            setFallbackMethod(builder, obj.getClass(), method);\n            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);\n            return builder;\n        }\n    }\n\n    private static class CollapserMetaHolderFactory extends MetaHolderFactory {\n\n        @Override\n        public MetaHolder create(Object proxy, Method collapserMethod, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);\n            if (collapserMethod.getParameterTypes().length > 1 || collapserMethod.getParameterTypes().length == 0) {\n                throw new IllegalStateException(\"Collapser method must have one argument: \" + collapserMethod);\n            }\n\n            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);\n\n            if (batchCommandMethod == null)\n                throw new IllegalStateException(\"batch method is absent: \" + hystrixCollapser.batchMethod());\n\n            Class<?> batchReturnType = batchCommandMethod.getReturnType();\n            Class<?> collapserReturnType = collapserMethod.getReturnType();\n            boolean observable = collapserReturnType.equals(Observable.class);\n\n            if (!collapserMethod.getParameterTypes()[0]\n                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]))) {\n                throw new IllegalStateException(\"required batch method for collapser is absent, wrong generic type: expected \"\n                        + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[0]));\n            }\n\n            final Class<?> collapserMethodReturnType = getFirstGenericParameter(\n                    collapserMethod.getGenericReturnType(),\n                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? 1 : 0);\n\n            Class<?> batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());\n            if (!collapserMethodReturnType\n                    .equals(batchCommandActualReturnType)) {\n                throw new IllegalStateException(\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \" +\n                        \"(java.util.List<\" + collapserMethodReturnType + \">)\" + obj.getClass().getCanonicalName() + \".\" +\n                        hystrixCollapser.batchMethod() + \"(java.util.List<\" + collapserMethod.getParameterTypes()[0] + \">), but it's \" +\n                        batchCommandActualReturnType);\n            }\n\n            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);\n            if (hystrixCommand == null) {\n                throw new IllegalStateException(\"batch method must be annotated with HystrixCommandEL annotation\");\n            }\n            // method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions\n            // that should be invoked upon intercepted method, it's required only for underlying batch command\n\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);\n\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));\n            }\n\n            builder.hystrixCollapser(hystrixCollapser);\n            builder.defaultCollapserKey(collapserMethod.getName());\n            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));\n\n            builder.defaultCommandKey(batchCommandMethod.getName());\n            builder.hystrixCommand(hystrixCommand);\n            builder.executionType(ExecutionType.getExecutionType(batchReturnType));\n            builder.observable(observable);\n            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);\n            if (fallbackMethod.isPresent()) {\n                fallbackMethod.validateReturnType(batchCommandMethod);\n                builder\n                        .fallbackMethod(fallbackMethod.getMethod())\n                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n            }\n            return builder.build();\n        }\n    }\n\n    private static class CommandMetaHolderFactory extends MetaHolderFactory {\n        @Override\n        public MetaHolder create(Object proxy, Method method, Object obj, Object[] args, final ProceedingJoinPoint joinPoint) {\n            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);\n            // 新增\n            hystrixCommand = new HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);\n            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());\n            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);\n            if (isCompileWeaving()) {\n                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));\n            }\n\n            return builder.defaultCommandKey(method.getName())\n                    .hystrixCommand(hystrixCommand)\n                    .observableExecutionMode(hystrixCommand.observableExecutionMode())\n                    .executionType(executionType)\n                    .observable(ExecutionType.OBSERVABLE == executionType)\n                    .build();\n        }\n    }\n\n    private enum HystrixPointcutType {\n        COMMAND,\n        COLLAPSER;\n\n        static HystrixPointcutType of(Method method) {\n            if (method.isAnnotationPresent(HystrixCommand.class)) {\n                return COMMAND;\n            } else if (method.isAnnotationPresent(HystrixCollapser.class)) {\n                return COLLAPSER;\n            } else {\n                String methodInfo = getMethodInfo(method);\n                throw new IllegalStateException(\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\" + methodInfo);\n            }\n        }\n    }\n\n    private static Method getAjcMethodFromTarget(JoinPoint joinPoint) {\n        return getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());\n    }\n\n\n    private static Class<?> getFirstGenericParameter(Type type) {\n        return getFirstGenericParameter(type, 1);\n    }\n\n    private static Class<?> getFirstGenericParameter(final Type type, final int nestedDepth) {\n        int cDepth = 0;\n        Type tType = type;\n\n        for (int cDept = 0; cDept < nestedDepth; cDept++) {\n            if (!(tType instanceof ParameterizedType))\n                throw new IllegalStateException(String.format(\"Sub type at nesting level %d of %s is expected to be generic\", cDepth, type));\n            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];\n        }\n\n        if (tType instanceof ParameterizedType)\n            return (Class<?>) ((ParameterizedType) tType).getRawType();\n        else if (tType instanceof Class)\n            return (Class<?>) tType;\n\n        throw new UnsupportedOperationException(\"Unsupported type \" + tType);\n    }\n\n    private static MetaHolder.Builder setDefaultProperties(MetaHolder.Builder builder, Class<?> declaringClass, final ProceedingJoinPoint joinPoint) {\n        Optional<DefaultProperties> defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);\n        builder.defaultGroupKey(declaringClass.getSimpleName());\n        if (defaultPropertiesOpt.isPresent()) {\n            DefaultProperties defaultProperties = defaultPropertiesOpt.get();\n            builder.defaultProperties(defaultProperties);\n            if (StringUtils.isNotBlank(defaultProperties.groupKey())) {\n                builder.defaultGroupKey(defaultProperties.groupKey());\n            }\n            if (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) {\n                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());\n            }\n        }\n        return builder;\n    }\n\n    private static MetaHolder.Builder setFallbackMethod(MetaHolder.Builder builder, Class<?> declaringClass, Method commandMethod) {\n        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);\n        if (fallbackMethod.isPresent()) {\n            fallbackMethod.validateReturnType(commandMethod);\n            builder\n                    .fallbackMethod(fallbackMethod.getMethod())\n                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));\n        }\n        return builder;\n    }\n}\n\n```\n\n此类99%都是copy自 `com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect`\n\n仅仅新增了两行，分别都注明了`//新增`\n\n\n\n## 使用\n\n要么在`HystrixCommandAspect` 增加`@Configuration`注解，要么在某个带有`@Configuration`的类内（建议用此方式）\n\n```java\n@Bean\npublic HystrixCommandAspect hystrixCommandAspect(){\n    return new HystrixCommandAspect();\n}\n```\n\n\n\n```java\n@Component\npublic class Demo {\n    @HystrixCommand(commandKey = \"#key\",groupKey = \"#key\",fallbackMethod = \"fail\")\n    public String exec(String key){\n        if (RandomUtils.nextBoolean()) {\n            System.out.println(1 / 0);\n        }\n        return key;\n    }\n    public String fail(String key){\n        System.out.println(\"fail:\"+key);\n        return key;\n    }\n}\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Autowired\n    private Demo demo;\n\n    @Test\n    public void testHystrixCommandDynamic(){\n        int i=0;\n        while (i++<5){\n            e.exec(\"this is cmd key\");\n            Thread.sleep(1000);\n            HystrixCommandMetrics.getInstances().forEach(m-> System.out.println(\"cmd:\"+m.getCommandKey()));\n        }\n    }\n}\n```\n\n```\ncmd:this is cmd key\nfail:this is cmd key\ncmd:this is cmd key\nfalse\nkey: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 \ncmd:this is cmd key\ncmd:this is cmd key\ncmd:this is cmd key\n```\n\n\n\n## 放在后边的话\n\n本文只适用于`@HystrixCommand`修饰的，对于`@HystrixCollapser`合并的暂时无效（主要是懒得改），如果有需要自行修改`HystrixCommandAspect` 中的`CollapserMetaHolderFactory`中的`HystrixCollapser`和`HystrixCommand`相关部分\n\n另外目前只适用于`@HystrixCommand` 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持`commandProperties` 和`threadPoolProperties` 也动态，自己尝试修改一下就行了。很简单的\n\n\n\n后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案\n\n\n\n博客 [https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/](https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/)\n\n掘金 [https://juejin.im/post/5bab20fc5188255c980bdc9d](https://juejin.im/post/5bab20fc5188255c980bdc9d)","slug":"hystrixcommand_dynamic_key","published":1,"updated":"2019-08-16T05:56:21.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojkf00h924doonizl41l","content":"<p><code>hystrix-javanica</code>  极大的简化了hystrix的开发工作，不用显式的<code>new</code>一堆<code>HystrixCommand</code>对象，代价就是，<code>@HystrixCommand</code> 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 <a href=\"https://www.baeldung.com/java-reflection-change-annotation-params\" target=\"_blank\" rel=\"noopener\">Changing Annotation Parameters At Runtime</a>)</p>\n<p>在官方有两个个issues<a href=\"https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#1421</a> 和<a href=\"https://github.com/Netflix/Hystrix/issues/350\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#350</a> 也在讨论这个问题，但是官方建议针对此场景，用传统的<code>new HystrixCommand()</code>解决</p>\n<a id=\"more\"></a>\n<h2 id=\"1-添加必要依赖\"><a href=\"#1-添加必要依赖\" class=\"headerlink\" title=\"1. 添加必要依赖\"></a>1. 添加必要依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-javanica<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-新增-HystrixCommandEL-类\"><a href=\"#2-新增-HystrixCommandEL-类\" class=\"headerlink\" title=\"2. 新增 HystrixCommandEL 类\"></a>2. 新增 HystrixCommandEL 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.ExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandEL</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixCommand</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] names;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] args;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExpressionParser parser = <span class=\"keyword\">new</span> SpelExpressionParser();</span><br><span class=\"line\">    StandardEvaluationContext context = <span class=\"keyword\">new</span> StandardEvaluationContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HystrixCommand hystrixCommand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HystrixCommandEL</span><span class=\"params\">(HystrixCommand hystrixCommand, String[] names, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hystrixCommand = hystrixCommand;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.names = names;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">groupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.groupKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">commandKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.commandKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">threadPoolKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.threadPoolKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fallbackMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.fallbackMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] commandProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.commandProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] threadPoolProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.threadPoolProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Throwable&gt;[] ignoreExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.ignoreExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObservableExecutionMode <span class=\"title\">observableExecutionMode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.observableExecutionMode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixException[] raiseHystrixExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.raiseHystrixExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.defaultFallback());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Annotation&gt; annotationType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.annotationType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseEL</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.contains(key, <span class=\"string\">\"#\"</span>) || isEmpty(args) || isEmpty(names)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">            context.setVariable(names[i], args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parser.parseExpression(key).getValue(context, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(Object [] objs)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.isNull(objs) || objs.length==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-新增-HystrixCommandAspect-类\"><a href=\"#3-新增-HystrixCommandAspect-类\" class=\"headerlink\" title=\"3. 新增 HystrixCommandAspect 类\"></a>3. 新增 HystrixCommandAspect 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Optional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.ImmutableMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.HystrixInvokable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.CommandExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.ExecutionType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.MetaHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.MethodProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixBadRequestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixRuntimeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.Validate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Completable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Single;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.functions.Func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;HystrixPointcutType, MetaHolderFactory&gt; META_HOLDER_FACTORY_MAP;</span><br><span class=\"line\">    <span class=\"comment\">// 新增</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LocalVariableTableParameterNameDiscoverer u = <span class=\"keyword\">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        META_HOLDER_FACTORY_MAP = ImmutableMap.&lt;HystrixPointcutType, MetaHolderFactory&gt;builder()</span><br><span class=\"line\">                .put(HystrixPointcutType.COMMAND, <span class=\"keyword\">new</span> CommandMetaHolderFactory())</span><br><span class=\"line\">                .put(HystrixPointcutType.COLLAPSER, <span class=\"keyword\">new</span> CollapserMetaHolderFactory())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCommandAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCollapserAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">methodsAnnotatedWithHystrixCommand</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">        Validate.notNull(method, <span class=\"string\">\"failed to get method from joinPoint: %s\"</span>, joinPoint);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class) &amp;&amp; method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"annotations at the same time\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));</span><br><span class=\"line\">        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);</span><br><span class=\"line\">        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);</span><br><span class=\"line\">        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?</span><br><span class=\"line\">                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!metaHolder.isObservable()) &#123;</span><br><span class=\"line\">                result = CommandExecutor.execute(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = executeObservable(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixBadRequestException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e.getCause() != <span class=\"keyword\">null</span> ? e.getCause() : e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> hystrixRuntimeExceptionToThrowable(metaHolder, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">executeObservable</span><span class=\"params\">(HystrixInvokable invokable, ExecutionType executionType, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))</span><br><span class=\"line\">                .onErrorResumeNext(<span class=\"keyword\">new</span> Func1&lt;Throwable, Observable&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Observable <span class=\"title\">call</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(throwable.getCause());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Observable.error(throwable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;), metaHolder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">mapObservable</span><span class=\"params\">(Observable observable, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toCompletable();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toSingle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> observable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">hystrixRuntimeExceptionToThrowable</span><span class=\"params\">(MetaHolder metaHolder, HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getCause(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">getCause</span><span class=\"params\">(HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Throwable cause = e.getCause();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// latest exception in flow should be propagated to end user</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFallbackException() <span class=\"keyword\">instanceof</span> FallbackInvocationException) &#123;</span><br><span class=\"line\">            cause = e.getFallbackException().getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                cause = getCause((HystrixRuntimeException) cause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> CommandActionExecutionException) &#123; <span class=\"comment\">// this situation is possible only if a callee throws an exception which type extends Throwable directly</span></span><br><span class=\"line\">            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;</span><br><span class=\"line\">            cause = commandActionExecutionException.getCause();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.fromNullable(cause).or(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * A factory to create MetaHolder depending on &#123;<span class=\"doctag\">@link</span> HystrixPointcutType&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">            Object obj = joinPoint.getTarget();</span><br><span class=\"line\">            Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">            Object proxy = joinPoint.getThis();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> create(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        MetaHolder.<span class=\"function\">Builder <span class=\"title\">metaHolderBuilder</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            MetaHolder.Builder builder = MetaHolder.builder()</span><br><span class=\"line\">                    .args(args).method(method).obj(obj).proxyObj(proxy)</span><br><span class=\"line\">                    .joinPoint(joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            setFallbackMethod(builder, obj.getClass(), method);</span><br><span class=\"line\">            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollapserMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method collapserMethod, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (collapserMethod.getParameterTypes().length &gt; <span class=\"number\">1</span> || collapserMethod.getParameterTypes().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Collapser method must have one argument: \"</span> + collapserMethod);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (batchCommandMethod == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method is absent: \"</span> + hystrixCollapser.batchMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchReturnType = batchCommandMethod.getReturnType();</span><br><span class=\"line\">            Class&lt;?&gt; collapserReturnType = collapserMethod.getReturnType();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> observable = collapserReturnType.equals(Observable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethod.getParameterTypes()[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"required batch method for collapser is absent, wrong generic type: expected \"</span></span><br><span class=\"line\">                        + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Class&lt;?&gt; collapserMethodReturnType = getFirstGenericParameter(</span><br><span class=\"line\">                    collapserMethod.getGenericReturnType(),</span><br><span class=\"line\">                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethodReturnType</span><br><span class=\"line\">                    .equals(batchCommandActualReturnType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethodReturnType + <span class=\"string\">\"&gt;)\"</span> + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        batchCommandActualReturnType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hystrixCommand == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method must be annotated with HystrixCommandEL annotation\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions</span></span><br><span class=\"line\">            <span class=\"comment\">// that should be invoked upon intercepted method, it's required only for underlying batch command</span></span><br><span class=\"line\"></span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.hystrixCollapser(hystrixCollapser);</span><br><span class=\"line\">            builder.defaultCollapserKey(collapserMethod.getName());</span><br><span class=\"line\">            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.defaultCommandKey(batchCommandMethod.getName());</span><br><span class=\"line\">            builder.hystrixCommand(hystrixCommand);</span><br><span class=\"line\">            builder.executionType(ExecutionType.getExecutionType(batchReturnType));</span><br><span class=\"line\">            builder.observable(observable);</span><br><span class=\"line\">            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">                fallbackMethod.validateReturnType(batchCommandMethod);</span><br><span class=\"line\">                builder</span><br><span class=\"line\">                        .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            hystrixCommand = <span class=\"keyword\">new</span> HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);</span><br><span class=\"line\">            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());</span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.defaultCommandKey(method.getName())</span><br><span class=\"line\">                    .hystrixCommand(hystrixCommand)</span><br><span class=\"line\">                    .observableExecutionMode(hystrixCommand.observableExecutionMode())</span><br><span class=\"line\">                    .executionType(executionType)</span><br><span class=\"line\">                    .observable(ExecutionType.OBSERVABLE == executionType)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> HystrixPointcutType &#123;</span><br><span class=\"line\">        COMMAND,</span><br><span class=\"line\">        COLLAPSER;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> HystrixPointcutType <span class=\"title\">of</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COMMAND;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COLLAPSER;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String methodInfo = getMethodInfo(method);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\"</span> + methodInfo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method <span class=\"title\">getAjcMethodFromTarget</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(Type type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstGenericParameter(type, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(<span class=\"keyword\">final</span> Type type, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> nestedDepth) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Type tType = type;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cDept = <span class=\"number\">0</span>; cDept &lt; nestedDepth; cDept++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(tType <span class=\"keyword\">instanceof</span> ParameterizedType))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(String.format(<span class=\"string\">\"Sub type at nesting level %d of %s is expected to be generic\"</span>, cDepth, type));</span><br><span class=\"line\">            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> ParameterizedType)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) ((ParameterizedType) tType).getRawType();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> Class)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) tType;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Unsupported type \"</span> + tType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setDefaultProperties</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Optional&lt;DefaultProperties&gt; defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);</span><br><span class=\"line\">        builder.defaultGroupKey(declaringClass.getSimpleName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (defaultPropertiesOpt.isPresent()) &#123;</span><br><span class=\"line\">            DefaultProperties defaultProperties = defaultPropertiesOpt.get();</span><br><span class=\"line\">            builder.defaultProperties(defaultProperties);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.groupKey())) &#123;</span><br><span class=\"line\">                builder.defaultGroupKey(defaultProperties.groupKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) &#123;</span><br><span class=\"line\">                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setFallbackMethod</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, Method commandMethod)</span> </span>&#123;</span><br><span class=\"line\">        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">            fallbackMethod.validateReturnType(commandMethod);</span><br><span class=\"line\">            builder</span><br><span class=\"line\">                    .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此类99%都是copy自 <code>com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect</code></p>\n<p>仅仅新增了两行，分别都注明了<code>//新增</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>要么在<code>HystrixCommandAspect</code> 增加<code>@Configuration</code>注解，要么在某个带有<code>@Configuration</code>的类内（建议用此方式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HystrixCommandAspect <span class=\"title\">hystrixCommandAspect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixCommandAspect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(commandKey = <span class=\"string\">\"#key\"</span>,groupKey = <span class=\"string\">\"#key\"</span>,fallbackMethod = <span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">exec</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RandomUtils.nextBoolean()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">1</span> / <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fail</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fail:\"</span>+key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Demo demo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHystrixCommandDynamic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i++&lt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">            e.exec(<span class=\"string\">\"this is cmd key\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            HystrixCommandMetrics.getInstances().forEach(m-&gt; System.out.println(<span class=\"string\">\"cmd:\"</span>+m.getCommandKey()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">fail:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">false</span><br><span class=\"line\">key: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 </span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br></pre></td></tr></table></figure>\n<h2 id=\"放在后边的话\"><a href=\"#放在后边的话\" class=\"headerlink\" title=\"放在后边的话\"></a>放在后边的话</h2><p>本文只适用于<code>@HystrixCommand</code>修饰的，对于<code>@HystrixCollapser</code>合并的暂时无效（主要是懒得改），如果有需要自行修改<code>HystrixCommandAspect</code> 中的<code>CollapserMetaHolderFactory</code>中的<code>HystrixCollapser</code>和<code>HystrixCommand</code>相关部分</p>\n<p>另外目前只适用于<code>@HystrixCommand</code> 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持<code>commandProperties</code> 和<code>threadPoolProperties</code> 也动态，自己尝试修改一下就行了。很简单的</p>\n<p>后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案</p>\n<p>博客 <a href=\"https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/\">https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/</a></p>\n<p>掘金 <a href=\"https://juejin.im/post/5bab20fc5188255c980bdc9d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bab20fc5188255c980bdc9d</a></p>\n","site":{"data":{}},"excerpt":"<p><code>hystrix-javanica</code>  极大的简化了hystrix的开发工作，不用显式的<code>new</code>一堆<code>HystrixCommand</code>对象，代价就是，<code>@HystrixCommand</code> 一旦添加到方法后就固定了，没法根据入参动态修改注解内容(如果运行时，全局修改注解，请参见 <a href=\"https://www.baeldung.com/java-reflection-change-annotation-params\" target=\"_blank\" rel=\"noopener\">Changing Annotation Parameters At Runtime</a>)</p>\n<p>在官方有两个个issues<a href=\"https://github.com/Netflix/Hystrix/issues/1421#issuecomment-262018783\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#1421</a> 和<a href=\"https://github.com/Netflix/Hystrix/issues/350\" target=\"_blank\" rel=\"noopener\">Netflix/Hystrix/issues#350</a> 也在讨论这个问题，但是官方建议针对此场景，用传统的<code>new HystrixCommand()</code>解决</p>","more":"<h2 id=\"1-添加必要依赖\"><a href=\"#1-添加必要依赖\" class=\"headerlink\" title=\"1. 添加必要依赖\"></a>1. 添加必要依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.netflix.hystrix<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hystrix-javanica<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-新增-HystrixCommandEL-类\"><a href=\"#2-新增-HystrixCommandEL-类\" class=\"headerlink\" title=\"2. 新增 HystrixCommandEL 类\"></a>2. 新增 HystrixCommandEL 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.ObservableExecutionMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.ExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandEL</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixCommand</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] names;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] args;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExpressionParser parser = <span class=\"keyword\">new</span> SpelExpressionParser();</span><br><span class=\"line\">    StandardEvaluationContext context = <span class=\"keyword\">new</span> StandardEvaluationContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HystrixCommand hystrixCommand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HystrixCommandEL</span><span class=\"params\">(HystrixCommand hystrixCommand, String[] names, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hystrixCommand = hystrixCommand;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.names = names;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">groupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.groupKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">commandKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.commandKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">threadPoolKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.threadPoolKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fallbackMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.fallbackMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] commandProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.commandProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixProperty[] threadPoolProperties() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.threadPoolProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Throwable&gt;[] ignoreExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.ignoreExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObservableExecutionMode <span class=\"title\">observableExecutionMode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.observableExecutionMode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HystrixException[] raiseHystrixExceptions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.raiseHystrixExceptions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseEL(hystrixCommand.defaultFallback());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Annotation&gt; annotationType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hystrixCommand.annotationType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseEL</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为了效率和安全考虑目前只允许包含#的属性调用，如果想支持全部SpEl,将这个if全部去掉就行(比如，如果无参数，只是做计算，判断names,args就不合适了)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.contains(key, <span class=\"string\">\"#\"</span>) || isEmpty(args) || isEmpty(names)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">            context.setVariable(names[i], args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parser.parseExpression(key).getValue(context, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(Object [] objs)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.isNull(objs) || objs.length==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-新增-HystrixCommandAspect-类\"><a href=\"#3-新增-HystrixCommandAspect-类\" class=\"headerlink\" title=\"3. 新增 HystrixCommandAspect 类\"></a>3. 新增 HystrixCommandAspect 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Optional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.ImmutableMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.HystrixInvokable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.CommandExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.ExecutionType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.command.MetaHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.CommandActionExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.exception.FallbackInvocationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.FallbackMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.utils.MethodProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixBadRequestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.exception.HystrixRuntimeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.Validate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Completable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.Single;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rx.functions.Func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.AopUtils.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.EnvUtils.isCompileWeaving;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.netflix.hystrix.contrib.javanica.utils.ajc.AjcUtils.getAjcMethodAroundAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCommandAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;HystrixPointcutType, MetaHolderFactory&gt; META_HOLDER_FACTORY_MAP;</span><br><span class=\"line\">    <span class=\"comment\">// 新增</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LocalVariableTableParameterNameDiscoverer u = <span class=\"keyword\">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        META_HOLDER_FACTORY_MAP = ImmutableMap.&lt;HystrixPointcutType, MetaHolderFactory&gt;builder()</span><br><span class=\"line\">                .put(HystrixPointcutType.COMMAND, <span class=\"keyword\">new</span> CommandMetaHolderFactory())</span><br><span class=\"line\">                .put(HystrixPointcutType.COLLAPSER, <span class=\"keyword\">new</span> CollapserMetaHolderFactory())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCommandAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hystrixCollapserAnnotationPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">methodsAnnotatedWithHystrixCommand</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">        Validate.notNull(method, <span class=\"string\">\"failed to get method from joinPoint: %s\"</span>, joinPoint);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class) &amp;&amp; method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"method cannot be annotated with HystrixCommandEL and HystrixCollapser \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"annotations at the same time\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));</span><br><span class=\"line\">        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);</span><br><span class=\"line\">        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);</span><br><span class=\"line\">        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?</span><br><span class=\"line\">                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!metaHolder.isObservable()) &#123;</span><br><span class=\"line\">                result = CommandExecutor.execute(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = executeObservable(invokable, executionType, metaHolder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixBadRequestException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e.getCause() != <span class=\"keyword\">null</span> ? e.getCause() : e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> hystrixRuntimeExceptionToThrowable(metaHolder, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">executeObservable</span><span class=\"params\">(HystrixInvokable invokable, ExecutionType executionType, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapObservable(((Observable) CommandExecutor.execute(invokable, executionType, metaHolder))</span><br><span class=\"line\">                .onErrorResumeNext(<span class=\"keyword\">new</span> Func1&lt;Throwable, Observable&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Observable <span class=\"title\">call</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(throwable.getCause());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                            HystrixRuntimeException hystrixRuntimeException = (HystrixRuntimeException) throwable;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Observable.error(hystrixRuntimeExceptionToThrowable(metaHolder, hystrixRuntimeException));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Observable.error(throwable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;), metaHolder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">mapObservable</span><span class=\"params\">(Observable observable, <span class=\"keyword\">final</span> MetaHolder metaHolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Completable.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toCompletable();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Single.class.isAssignableFrom(metaHolder.getMethod().getReturnType())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> observable.toSingle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> observable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">hystrixRuntimeExceptionToThrowable</span><span class=\"params\">(MetaHolder metaHolder, HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (metaHolder.raiseHystrixExceptionsContains(HystrixException.RUNTIME_EXCEPTION)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getCause(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Throwable <span class=\"title\">getCause</span><span class=\"params\">(HystrixRuntimeException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFailureType() != HystrixRuntimeException.FailureType.COMMAND_EXCEPTION) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Throwable cause = e.getCause();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// latest exception in flow should be propagated to end user</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getFallbackException() <span class=\"keyword\">instanceof</span> FallbackInvocationException) &#123;</span><br><span class=\"line\">            cause = e.getFallbackException().getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class=\"line\">                cause = getCause((HystrixRuntimeException) cause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> CommandActionExecutionException) &#123; <span class=\"comment\">// this situation is possible only if a callee throws an exception which type extends Throwable directly</span></span><br><span class=\"line\">            CommandActionExecutionException commandActionExecutionException = (CommandActionExecutionException) cause;</span><br><span class=\"line\">            cause = commandActionExecutionException.getCause();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.fromNullable(cause).or(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * A factory to create MetaHolder depending on &#123;<span class=\"doctag\">@link</span> HystrixPointcutType&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            Method method = getMethodFromTarget(joinPoint);</span><br><span class=\"line\">            Object obj = joinPoint.getTarget();</span><br><span class=\"line\">            Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">            Object proxy = joinPoint.getThis();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> create(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        MetaHolder.<span class=\"function\">Builder <span class=\"title\">metaHolderBuilder</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            MetaHolder.Builder builder = MetaHolder.builder()</span><br><span class=\"line\">                    .args(args).method(method).obj(obj).proxyObj(proxy)</span><br><span class=\"line\">                    .joinPoint(joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            setFallbackMethod(builder, obj.getClass(), method);</span><br><span class=\"line\">            builder = setDefaultProperties(builder, obj.getClass(), joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollapserMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method collapserMethod, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCollapser hystrixCollapser = collapserMethod.getAnnotation(HystrixCollapser.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (collapserMethod.getParameterTypes().length &gt; <span class=\"number\">1</span> || collapserMethod.getParameterTypes().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Collapser method must have one argument: \"</span> + collapserMethod);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Method batchCommandMethod = getDeclaredMethod(obj.getClass(), hystrixCollapser.batchMethod(), List.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (batchCommandMethod == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method is absent: \"</span> + hystrixCollapser.batchMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchReturnType = batchCommandMethod.getReturnType();</span><br><span class=\"line\">            Class&lt;?&gt; collapserReturnType = collapserMethod.getReturnType();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> observable = collapserReturnType.equals(Observable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethod.getParameterTypes()[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    .equals(getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"required batch method for collapser is absent, wrong generic type: expected \"</span></span><br><span class=\"line\">                        + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        getFirstGenericParameter(batchCommandMethod.getGenericParameterTypes()[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Class&lt;?&gt; collapserMethodReturnType = getFirstGenericParameter(</span><br><span class=\"line\">                    collapserMethod.getGenericReturnType(),</span><br><span class=\"line\">                    Future.class.isAssignableFrom(collapserReturnType) || Observable.class.isAssignableFrom(collapserReturnType) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; batchCommandActualReturnType = getFirstGenericParameter(batchCommandMethod.getGenericReturnType());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collapserMethodReturnType</span><br><span class=\"line\">                    .equals(batchCommandActualReturnType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Return type of batch method must be java.util.List parametrized with corresponding type: expected \"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethodReturnType + <span class=\"string\">\"&gt;)\"</span> + obj.getClass().getCanonicalName() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                        hystrixCollapser.batchMethod() + <span class=\"string\">\"(java.util.List&lt;\"</span> + collapserMethod.getParameterTypes()[<span class=\"number\">0</span>] + <span class=\"string\">\"&gt;), but it's \"</span> +</span><br><span class=\"line\">                        batchCommandActualReturnType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            HystrixCommand hystrixCommand = batchCommandMethod.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hystrixCommand == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"batch method must be annotated with HystrixCommandEL annotation\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// method of batch hystrix command must be passed to metaholder because basically collapser doesn't have any actions</span></span><br><span class=\"line\">            <span class=\"comment\">// that should be invoked upon intercepted method, it's required only for underlying batch command</span></span><br><span class=\"line\"></span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, batchCommandMethod, obj, args, joinPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodAroundAdvice(obj.getClass(), batchCommandMethod.getName(), List.class));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.hystrixCollapser(hystrixCollapser);</span><br><span class=\"line\">            builder.defaultCollapserKey(collapserMethod.getName());</span><br><span class=\"line\">            builder.collapserExecutionType(ExecutionType.getExecutionType(collapserReturnType));</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.defaultCommandKey(batchCommandMethod.getName());</span><br><span class=\"line\">            builder.hystrixCommand(hystrixCommand);</span><br><span class=\"line\">            builder.executionType(ExecutionType.getExecutionType(batchReturnType));</span><br><span class=\"line\">            builder.observable(observable);</span><br><span class=\"line\">            FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(obj.getClass(), batchCommandMethod);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">                fallbackMethod.validateReturnType(batchCommandMethod);</span><br><span class=\"line\">                builder</span><br><span class=\"line\">                        .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                        .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandMetaHolderFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">MetaHolderFactory</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MetaHolder <span class=\"title\">create</span><span class=\"params\">(Object proxy, Method method, Object obj, Object[] args, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">            HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);</span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            hystrixCommand = <span class=\"keyword\">new</span> HystrixCommandEL(hystrixCommand,u.getParameterNames(method),args);</span><br><span class=\"line\">            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());</span><br><span class=\"line\">            MetaHolder.Builder builder = metaHolderBuilder(proxy, method, obj, args, joinPoint);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCompileWeaving()) &#123;</span><br><span class=\"line\">                builder.ajcMethod(getAjcMethodFromTarget(joinPoint));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.defaultCommandKey(method.getName())</span><br><span class=\"line\">                    .hystrixCommand(hystrixCommand)</span><br><span class=\"line\">                    .observableExecutionMode(hystrixCommand.observableExecutionMode())</span><br><span class=\"line\">                    .executionType(executionType)</span><br><span class=\"line\">                    .observable(ExecutionType.OBSERVABLE == executionType)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> HystrixPointcutType &#123;</span><br><span class=\"line\">        COMMAND,</span><br><span class=\"line\">        COLLAPSER;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> HystrixPointcutType <span class=\"title\">of</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCommand.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COMMAND;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.isAnnotationPresent(HystrixCollapser.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> COLLAPSER;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String methodInfo = getMethodInfo(method);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"'https://github.com/Netflix/Hystrix/issues/1458' - no valid annotation found for: \\n\"</span> + methodInfo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method <span class=\"title\">getAjcMethodFromTarget</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getAjcMethodAroundAdvice(joinPoint.getTarget().getClass(), (MethodSignature) joinPoint.getSignature());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(Type type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstGenericParameter(type, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getFirstGenericParameter(<span class=\"keyword\">final</span> Type type, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> nestedDepth) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Type tType = type;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cDept = <span class=\"number\">0</span>; cDept &lt; nestedDepth; cDept++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(tType <span class=\"keyword\">instanceof</span> ParameterizedType))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(String.format(<span class=\"string\">\"Sub type at nesting level %d of %s is expected to be generic\"</span>, cDepth, type));</span><br><span class=\"line\">            tType = ((ParameterizedType) tType).getActualTypeArguments()[cDept];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> ParameterizedType)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) ((ParameterizedType) tType).getRawType();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tType <span class=\"keyword\">instanceof</span> Class)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Class&lt;?&gt;) tType;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Unsupported type \"</span> + tType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setDefaultProperties</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, <span class=\"keyword\">final</span> ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Optional&lt;DefaultProperties&gt; defaultPropertiesOpt = AopUtils.getAnnotation(joinPoint, DefaultProperties.class);</span><br><span class=\"line\">        builder.defaultGroupKey(declaringClass.getSimpleName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (defaultPropertiesOpt.isPresent()) &#123;</span><br><span class=\"line\">            DefaultProperties defaultProperties = defaultPropertiesOpt.get();</span><br><span class=\"line\">            builder.defaultProperties(defaultProperties);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.groupKey())) &#123;</span><br><span class=\"line\">                builder.defaultGroupKey(defaultProperties.groupKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotBlank(defaultProperties.threadPoolKey())) &#123;</span><br><span class=\"line\">                builder.defaultThreadPoolKey(defaultProperties.threadPoolKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MetaHolder.<span class=\"function\">Builder <span class=\"title\">setFallbackMethod</span><span class=\"params\">(MetaHolder.Builder builder, Class&lt;?&gt; declaringClass, Method commandMethod)</span> </span>&#123;</span><br><span class=\"line\">        FallbackMethod fallbackMethod = MethodProvider.getInstance().getFallbackMethod(declaringClass, commandMethod);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fallbackMethod.isPresent()) &#123;</span><br><span class=\"line\">            fallbackMethod.validateReturnType(commandMethod);</span><br><span class=\"line\">            builder</span><br><span class=\"line\">                    .fallbackMethod(fallbackMethod.getMethod())</span><br><span class=\"line\">                    .fallbackExecutionType(ExecutionType.getExecutionType(fallbackMethod.getMethod().getReturnType()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此类99%都是copy自 <code>com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect</code></p>\n<p>仅仅新增了两行，分别都注明了<code>//新增</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>要么在<code>HystrixCommandAspect</code> 增加<code>@Configuration</code>注解，要么在某个带有<code>@Configuration</code>的类内（建议用此方式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HystrixCommandAspect <span class=\"title\">hystrixCommandAspect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixCommandAspect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(commandKey = <span class=\"string\">\"#key\"</span>,groupKey = <span class=\"string\">\"#key\"</span>,fallbackMethod = <span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">exec</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RandomUtils.nextBoolean()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">1</span> / <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fail</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fail:\"</span>+key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Demo demo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHystrixCommandDynamic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i++&lt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">            e.exec(<span class=\"string\">\"this is cmd key\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            HystrixCommandMetrics.getInstances().forEach(m-&gt; System.out.println(<span class=\"string\">\"cmd:\"</span>+m.getCommandKey()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">fail:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">false</span><br><span class=\"line\">key: this is cmd key Requests: 2 Errors: 1 (50%)   Avg: 0 75th: 0 99th: 0 99.5th: 0 99.9th: 0 </span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br><span class=\"line\">cmd:this is cmd key</span><br></pre></td></tr></table></figure>\n<h2 id=\"放在后边的话\"><a href=\"#放在后边的话\" class=\"headerlink\" title=\"放在后边的话\"></a>放在后边的话</h2><p>本文只适用于<code>@HystrixCommand</code>修饰的，对于<code>@HystrixCollapser</code>合并的暂时无效（主要是懒得改），如果有需要自行修改<code>HystrixCommandAspect</code> 中的<code>CollapserMetaHolderFactory</code>中的<code>HystrixCollapser</code>和<code>HystrixCommand</code>相关部分</p>\n<p>另外目前只适用于<code>@HystrixCommand</code> 中类型是String的字段(groupKey,commandKey,threadPoolKey,fallbackMethod,defaultFallback),如果要支持<code>commandProperties</code> 和<code>threadPoolProperties</code> 也动态，自己尝试修改一下就行了。很简单的</p>\n<p>后续有时间，可能会写一下，基于redis的hystrix集群共享metrics的方案</p>\n<p>博客 <a href=\"https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/\">https://anjia0532.github.io/2018/09/26/hystrixcommand-dynamic-key/</a></p>\n<p>掘金 <a href=\"https://juejin.im/post/5bab20fc5188255c980bdc9d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bab20fc5188255c980bdc9d</a></p>"},{"title":"OpenResty编译安装以及安全加固(WAF)","date":"2017-07-19T08:04:57.000Z","_content":"\n## [Nginx][] 还是[Tengine][Tengine]\n\nTengine是阿里巴巴的深度定制的nginx，目前最新版本[Tengine-2.2.0.tar.gz][] , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是`2016-12-02`截止到目前，已经半年多没更新了。https://github.com/alibaba/tengine 上已经有137条未关闭的issus和39条pull request\n\n下面是官网自述\n\n>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。\n\n但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架[dubbo][] 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了[dubbox][], 淘宝家的玉伯的[seajs][]\n\n补充 [alibaba/tengine/issues/921#Tengine future][linkAlibaba/tengine/issues/921#tengine] 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。\n\n而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。\n\nnginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和[security][]来考虑是否有必要升级\n\n如果不差钱，可以考虑一下 `nginx plus` ,价格很感人，[Pricing - Application Delivery for the Modern Web | NGINX][pricing]\n\n如果不差钱，其实可以考虑用 `openresty edge` ([openresty的商业版][]) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。\n<!--more-->\n## nginx\n\n**本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。**\n\nnginx本身提供编译好的二进制文件，linux的参见 [prebuilt][] ，windows的从 [download][] 下载`nginx/Windows-VERSION`相关`zip`包，建议生产环境使用 `stable`(稳定版本)\n\n如果是想从源码编译的话，从[download][] 下载`nginx-VERSION` 的`tar.gz`包，一般格式为`http://nginx.org/download/nginx-VERSION.tar.gz` 注意将`VERSION`替换成实际版本号，e.g. `1.12.1`\n\n\n### nginx编译参数\n\nubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`nginx -V`是查看构建参数，`nginx -v`是查看版本号\n```bash\n/usr/sbin/nginx -V\n\nnginx version: nginx/1.13.0\nbuilt by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) \nbuilt with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n--user=nginx  \\\n--group=nginx  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_dav_module  \\\n--with-http_flv_module  \\\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n--with-http_mp4_module  \\\n--with-http_random_index_module  \\\n--with-http_realip_module  \\\n--with-http_secure_link_module  \\\n--with-http_slice_module  \\\n--with-http_ssl_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-http_v2_module  \\\n--with-mail  \\\n--with-mail_ssl_module  \\\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n```\n\n具体参数含义可 参考官网 [Building nginx from Sources][linkBuildingNginxFromSources] 和 [梦想远航#nginx安装及编译参数详解][5225895], 如果要构建`nginx for windows`参见 [Building nginx on the Win32 platform with Visual C][linkBuildingNginxOnTheWin32Platform]\n\n### 编译nginx\n参考 官方文档 [INSTALLING NGINX OPEN SOURCE][linkInstallingNginxOpenSource]\n\n```bash\n# pcre 正则库 \n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz\n$ tar -zxf pcre-*.tar.gz\n$ cd pcre-*\n$ ./configure\n$ make && sudo make install\n\n# zlib gzip 库\n$ wget http://zlib.net/zlib-1.2.11.tar.gz\n$ tar -zxf zlib-1.2.11.tar.gz\n$ cd zlib-1.2.11\n$ ./configure\n$ make && sudo make install\n\n# openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 \n\n$ wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz\n$ tar -zxf openssl-*.tar.gz\n$ cd openssl-*\n$ ./config --prefix=/usr/local/openssl/\n$ make && sudo make install\n\n\n#主线和稳定二选一\n# 主线版本\n$ wget http://nginx.org/download/nginx-1.13.3.tar.gz\n\n#稳定版本\n$ wget http://nginx.org/download/nginx-1.12.1.tar.gz\n\n$ tar zxf nginx-*.tar.gz\n\n$ cd nginx-*\n\n$ ./configure --prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_realip_module  \\\n--with-http_slice_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n\n--with-http_v2_module  \\\n--with-http_ssl_module  \\\n\n--with-pcre=../pcre-8.41  \\\n--with-zlib=../zlib-1.2.11 \\\n\n--without-http_autoindex_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module\n\n$ make && sudo make install\n\n# 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块\n# 临时文件相关\n#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n\n# dav，媒体相关\n#--with-http_dav_module  \\\n#--with-http_flv_module  \\\n#--with-http_mp4_module  \\\n\n#随机首页，安全连接相关\n#--with-http_random_index_module  \\\n#--with-http_secure_link_module  \\\n\n#email相关\n#--with-mail  \\\n#--with-mail_ssl_module  \\\n\n#gcc相关\n#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n\n#组，用户相关\n#--user=nginx \n#--group=nginx \n#如果指定user和group 则通过此命令创建用户\n#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx\n\n#如果用不到https，可以把ssl和http2模块也禁掉\n\n#禁用未用模块，减少安全风险\n#--without-http_autoindex_module \\\n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module\n$ nginx -t && nginx\n\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n```\n\n至此nginx编译完成。可以通过`curl localhost`或者浏览器打开`localhost` 查看nginx默认页面\n\n### nginx init.d 脚本\n\n详见 [anjia0532/nginx][]\n\n## openresty\n\n学习资料 官网 [openresty][] ，开涛博客 [使用Nginx+Lua(OpenResty)开发高性能Web应用][] ，温铭的gitbook [OpenResty 最佳实践][linkOpenresty最佳实践] 温铭的stuq视频教程[OpenResty 系列课程][linkOpenresty系列课程]\n\n### 安装预编译包\n\n详见官方文档 [OpenResty® Linux 包][linkOpenresty®Linux包]\n[linkOpenresty®Linux包]: https://openresty.org/cn/linux-packages.html\n\n\n### openresty编译参数\nubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`resty -V`是查看构建参数，`resty -v`是查看版本号\n\n[openresty官方组件][] ,[nginx 模块][linkNginx模块]\n\n```bash\nnginx version: openresty/1.11.2.4\nbuilt with OpenSSL 1.0.2k  26 Jan 2017\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/usr/local/openresty/nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--add-module=../ngx_devel_kit-0.3.0 \\\n--add-module=../echo-nginx-module-0.60 \\\n--add-module=../xss-nginx-module-0.05 \\\n--add-module=../ngx_coolkit-0.2rc3 \\\n--add-module=../set-misc-nginx-module-0.31 \\\n--add-module=../form-input-nginx-module-0.12 \\\n--add-module=../encrypted-session-nginx-module-0.06 \\\n--add-module=../srcache-nginx-module-0.31 \\\n--add-module=../ngx_lua-0.10.8 \\\n--add-module=../ngx_lua_upstream-0.06 \\\n--add-module=../headers-more-nginx-module-0.32 \\\n--add-module=../array-var-nginx-module-0.05 \\\n--add-module=../memc-nginx-module-0.18 \\\n--add-module=../redis2-nginx-module-0.14 \\\n--add-module=../redis-nginx-module-0.3.7 \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-ipv6 \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_auth_request_module \\\n--with-http_secure_link_module \\\n--with-http_random_index_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-dtrace-probes \\\n--with-http_ssl_module\n```\n\n### 构建openresty\n\n参见 [构建openresty][]\n\n```bash\n$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial\n$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz\n$ tar zxf openresty-1.11.2.4.tar.gz\n\n# 或者直接从github clone 一份自行编译\n# git clone https://github.com/openresty/openresty \n# cd openresty \n# make -j4\n\n$ cd openresty-*\n\n# 查看所有编译参数\n$ ./configure --help \n\n#进行编译\n./configure --prefix=/etc/openresty \\\n--user=nginx \\\n--group=nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-dtrace-probes \\\n--with-pcre-opt=-g \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-http_ssl_module \\\n--with-http_auth_request_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_autoindex_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module \\\n--without-http_ssi_module \\\n--without-http_userid_module \\\n--without-http_browser_module \\\n--without-http_rds_json_module \\\n--without-http_rds_csv_module \\\n--without-http_memc_module \\\n--without-http_redis2_module \\\n--without-lua_resty_memcached \\\n--without-lua_resty_mysql \\\n-j4\n\n#禁用memcached模块\n#--without-http_memc_module \\\n#禁用redis模块(保留redis2模块)\n#--without-http_redis_module \\\n#禁用email相关模块\n#--without-mail_pop3_module \\\n#--without-mail_imap_module \\\n#--without-mail_smtp_module \\\n#禁用rds模块\n#--without-http_rds_json_module \\\n#--without-http_rds_csv_module  \\\n#禁用cgi \n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_autoindex_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module \\\n$ make -j4 && sudo make install\n\n#确保80端口没被占用\n$ lsof -i:80\n\n$ /opt/openresty/nginx/nginx/sbin/nginx -t && /opt/openresty/nginx/nginx/sbin/nginx\n\n$ curl localhost\n```\n\n### openresty init.d 脚本\n\n详见 [anjia0532/openresty][]\n\n```bash\n$ chmod +x /etc/init.d/openresty\n#$ systemctl mask openresty\n#$ systemctl unmask openresty\n```\n\n一般来说，只需要修改 `OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx` 为实际的应用目录即可(需要确保该有的目录都存在)\n```bash\nnginx/\n├── client_body_temp\n├── conf\n├── html\n├── logs\n└── proxy_temp\n```\n\n可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建\n\n\n\nwaf 部分暂时先搁置\n\n## WAF 基于[ModSecurity][]\n\n参考资料 [Ubuntu 15.04][linkUbuntu15.04]\n\n```bash\n$ git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1\n$ cd ModSecurity/\n$ git checkout -b v3/master origin/v3/master\n$ sh build.sh\n$ git submodule init\n$ git submodule update #[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]\n$ ./configure\n$ make\n$ sudo make install\n\n#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx\n\n$ export MODSECURITY_INC=\"/home/anjia/openresty/ModSecurity/headers\"\n$ export MODSECURITY_LIB=\"/home/anjia/openresty/ModSecurity/src/.libs\"\n$ git clone https://github.com/SpiderLabs/ModSecurity-nginx --depth=1\n$ git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1\n$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf \n$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf\n$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h\nttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping\n$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled\n#使用www-data用户\n$ sudo sed -i '1s/^/user www-data;\\n/' /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf\n#删除36-116行，即server{}段，可以在英文输入法状态按     :36,166d  然后 :wq\n#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo sed '$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; ' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n#嫌费事，也可以直接用下面的配置文件\nuser www-data;\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;\n}\n\n$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf\n\n#Load OWASP Config \nInclude crs-setup.conf \n#Load all other Rules \nInclude rules/*.conf \n#Disable rule by ID from error message \n#SecRuleRemoveById 920350\n\n$ sudo sed  s/\"SecRuleEngine DetectionOnly\"/\"SecRuleEngine On\"/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t && sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload\n$ curl \"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&searchsubmit=Buscar&page=nsp_search\"\n# 返回403 Forbidden\n```\n\n[Nginx]: http://nginx.org/\n[Tengine]: http://tengine.taobao.org/\n[Tengine-2.2.0.tar.gz]: http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\n[dubbo]: http://dubbo.io/\n[dubbox]: https://github.com/dangdangdotcom/dubbox\n[seajs]: https://github.com/seajs/seajs\n[change]: http://nginx.org/en/CHANGES\n[security]: http://nginx.org/en/security_advisories.html\n[prebuilt]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\n[download]: http://nginx.org/en/download.html\n[linkBuildingNginxFromSources]: http://nginx.org/en/docs/configure.html\n[pricing]: https://www.nginx.com/products/pricing/\n[5225895]: http://www.cnblogs.com/HKUI/p/5225895.html\n[linkBuildingNginxOnTheWin32Platform]: http://nginx.org/en/docs/howto_build_on_win32.html\n[linkInstallingNginxOpenSource]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n[openresty]: https://openresty.org/cn/\n[使用Nginx+Lua(OpenResty)开发高性能Web应用]: http://jinnianshilongnian.iteye.com/blog/2280928\n[linkOpenresty最佳实践]: https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\n[构建openresty]: https://openresty.org/cn/installation.html#-openresty\n[linkOpenresty系列课程]: http://www.stuq.org/course/1015\n[ModSecurity]: https://github.com/SpiderLabs/ModSecurity\n[linkUbuntu15.04]: https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\n[openresty官方组件]: https://openresty.org/en/components.html\n[anjia0532/openresty]: https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\n[anjia0532/nginx]: https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\n[linkAlibaba/tengine/issues/921#tengine]: https://github.com/alibaba/tengine/issues/921\n[openresty的商业版]: https://openresty.com/cn/\n[linkNginx模块]: https://www.nginx.com/resources/wiki/modules/","source":"_posts/openresty.md","raw":"---\ntitle: OpenResty编译安装以及安全加固(WAF)\ndate: 2017-07-19 16:04:57\ntags: [nginx,openresty,waf,firewall]\n---\n\n## [Nginx][] 还是[Tengine][Tengine]\n\nTengine是阿里巴巴的深度定制的nginx，目前最新版本[Tengine-2.2.0.tar.gz][] , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是`2016-12-02`截止到目前，已经半年多没更新了。https://github.com/alibaba/tengine 上已经有137条未关闭的issus和39条pull request\n\n下面是官网自述\n\n>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。\n\n但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架[dubbo][] 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了[dubbox][], 淘宝家的玉伯的[seajs][]\n\n补充 [alibaba/tengine/issues/921#Tengine future][linkAlibaba/tengine/issues/921#tengine] 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。\n\n而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。\n\nnginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和[security][]来考虑是否有必要升级\n\n如果不差钱，可以考虑一下 `nginx plus` ,价格很感人，[Pricing - Application Delivery for the Modern Web | NGINX][pricing]\n\n如果不差钱，其实可以考虑用 `openresty edge` ([openresty的商业版][]) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。\n<!--more-->\n## nginx\n\n**本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。**\n\nnginx本身提供编译好的二进制文件，linux的参见 [prebuilt][] ，windows的从 [download][] 下载`nginx/Windows-VERSION`相关`zip`包，建议生产环境使用 `stable`(稳定版本)\n\n如果是想从源码编译的话，从[download][] 下载`nginx-VERSION` 的`tar.gz`包，一般格式为`http://nginx.org/download/nginx-VERSION.tar.gz` 注意将`VERSION`替换成实际版本号，e.g. `1.12.1`\n\n\n### nginx编译参数\n\nubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`nginx -V`是查看构建参数，`nginx -v`是查看版本号\n```bash\n/usr/sbin/nginx -V\n\nnginx version: nginx/1.13.0\nbuilt by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) \nbuilt with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n--user=nginx  \\\n--group=nginx  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_dav_module  \\\n--with-http_flv_module  \\\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n--with-http_mp4_module  \\\n--with-http_random_index_module  \\\n--with-http_realip_module  \\\n--with-http_secure_link_module  \\\n--with-http_slice_module  \\\n--with-http_ssl_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-http_v2_module  \\\n--with-mail  \\\n--with-mail_ssl_module  \\\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n```\n\n具体参数含义可 参考官网 [Building nginx from Sources][linkBuildingNginxFromSources] 和 [梦想远航#nginx安装及编译参数详解][5225895], 如果要构建`nginx for windows`参见 [Building nginx on the Win32 platform with Visual C][linkBuildingNginxOnTheWin32Platform]\n\n### 编译nginx\n参考 官方文档 [INSTALLING NGINX OPEN SOURCE][linkInstallingNginxOpenSource]\n\n```bash\n# pcre 正则库 \n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz\n$ tar -zxf pcre-*.tar.gz\n$ cd pcre-*\n$ ./configure\n$ make && sudo make install\n\n# zlib gzip 库\n$ wget http://zlib.net/zlib-1.2.11.tar.gz\n$ tar -zxf zlib-1.2.11.tar.gz\n$ cd zlib-1.2.11\n$ ./configure\n$ make && sudo make install\n\n# openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 \n\n$ wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz\n$ tar -zxf openssl-*.tar.gz\n$ cd openssl-*\n$ ./config --prefix=/usr/local/openssl/\n$ make && sudo make install\n\n\n#主线和稳定二选一\n# 主线版本\n$ wget http://nginx.org/download/nginx-1.13.3.tar.gz\n\n#稳定版本\n$ wget http://nginx.org/download/nginx-1.12.1.tar.gz\n\n$ tar zxf nginx-*.tar.gz\n\n$ cd nginx-*\n\n$ ./configure --prefix=/etc/nginx  \\\n--sbin-path=/usr/sbin/nginx  \\\n--modules-path=/usr/lib/nginx/modules  \\\n--conf-path=/etc/nginx/nginx.conf  \\\n--error-log-path=/var/log/nginx/error.log  \\\n--http-log-path=/var/log/nginx/access.log  \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock  \\\n\n--with-http_gunzip_module  \\\n--with-http_gzip_static_module  \\\n\n--with-http_addition_module  \\\n--with-http_auth_request_module  \\\n--with-http_realip_module  \\\n--with-http_slice_module  \\\n--with-http_stub_status_module  \\\n--with-http_sub_module  \\\n--with-compat  \\\n--with-file-aio  \\\n--with-threads  \\\n\n--with-stream  \\\n--with-stream_realip_module  \\\n--with-stream_ssl_module  \\\n--with-stream_ssl_preread_module  \\\n\n--with-http_v2_module  \\\n--with-http_ssl_module  \\\n\n--with-pcre=../pcre-8.41  \\\n--with-zlib=../zlib-1.2.11 \\\n\n--without-http_autoindex_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module\n\n$ make && sudo make install\n\n# 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块\n# 临时文件相关\n#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\\n#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\\n#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\\n#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\\n#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\\n\n# dav，媒体相关\n#--with-http_dav_module  \\\n#--with-http_flv_module  \\\n#--with-http_mp4_module  \\\n\n#随机首页，安全连接相关\n#--with-http_random_index_module  \\\n#--with-http_secure_link_module  \\\n\n#email相关\n#--with-mail  \\\n#--with-mail_ssl_module  \\\n\n#gcc相关\n#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\\n#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'\n\n#组，用户相关\n#--user=nginx \n#--group=nginx \n#如果指定user和group 则通过此命令创建用户\n#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx\n\n#如果用不到https，可以把ssl和http2模块也禁掉\n\n#禁用未用模块，减少安全风险\n#--without-http_autoindex_module \\\n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module\n$ nginx -t && nginx\n\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n```\n\n至此nginx编译完成。可以通过`curl localhost`或者浏览器打开`localhost` 查看nginx默认页面\n\n### nginx init.d 脚本\n\n详见 [anjia0532/nginx][]\n\n## openresty\n\n学习资料 官网 [openresty][] ，开涛博客 [使用Nginx+Lua(OpenResty)开发高性能Web应用][] ，温铭的gitbook [OpenResty 最佳实践][linkOpenresty最佳实践] 温铭的stuq视频教程[OpenResty 系列课程][linkOpenresty系列课程]\n\n### 安装预编译包\n\n详见官方文档 [OpenResty® Linux 包][linkOpenresty®Linux包]\n[linkOpenresty®Linux包]: https://openresty.org/cn/linux-packages.html\n\n\n### openresty编译参数\nubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),`resty -V`是查看构建参数，`resty -v`是查看版本号\n\n[openresty官方组件][] ,[nginx 模块][linkNginx模块]\n\n```bash\nnginx version: openresty/1.11.2.4\nbuilt with OpenSSL 1.0.2k  26 Jan 2017\nTLS SNI support enabled\nconfigure arguments: \n--prefix=/usr/local/openresty/nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--add-module=../ngx_devel_kit-0.3.0 \\\n--add-module=../echo-nginx-module-0.60 \\\n--add-module=../xss-nginx-module-0.05 \\\n--add-module=../ngx_coolkit-0.2rc3 \\\n--add-module=../set-misc-nginx-module-0.31 \\\n--add-module=../form-input-nginx-module-0.12 \\\n--add-module=../encrypted-session-nginx-module-0.06 \\\n--add-module=../srcache-nginx-module-0.31 \\\n--add-module=../ngx_lua-0.10.8 \\\n--add-module=../ngx_lua_upstream-0.06 \\\n--add-module=../headers-more-nginx-module-0.32 \\\n--add-module=../array-var-nginx-module-0.05 \\\n--add-module=../memc-nginx-module-0.18 \\\n--add-module=../redis2-nginx-module-0.14 \\\n--add-module=../redis-nginx-module-0.3.7 \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-ipv6 \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_auth_request_module \\\n--with-http_secure_link_module \\\n--with-http_random_index_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-dtrace-probes \\\n--with-http_ssl_module\n```\n\n### 构建openresty\n\n参见 [构建openresty][]\n\n```bash\n$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial\n$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz\n$ tar zxf openresty-1.11.2.4.tar.gz\n\n# 或者直接从github clone 一份自行编译\n# git clone https://github.com/openresty/openresty \n# cd openresty \n# make -j4\n\n$ cd openresty-*\n\n# 查看所有编译参数\n$ ./configure --help \n\n#进行编译\n./configure --prefix=/etc/openresty \\\n--user=nginx \\\n--group=nginx \\\n--with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n--with-pcre-jit \\\n--with-dtrace-probes \\\n--with-pcre-opt=-g \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-http_v2_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_gzip_static_module \\\n--with-http_sub_module \\\n--with-http_gunzip_module \\\n--with-threads \\\n--with-file-aio \\\n--with-http_ssl_module \\\n--with-http_auth_request_module \\\n--without-mail_pop3_module \\\n--without-mail_imap_module \\\n--without-mail_smtp_module \\\n--without-http_fastcgi_module \\\n--without-http_uwsgi_module \\\n--without-http_scgi_module \\\n--without-http_autoindex_module \\\n--without-http_memcached_module \\\n--without-http_empty_gif_module \\\n--without-http_ssi_module \\\n--without-http_userid_module \\\n--without-http_browser_module \\\n--without-http_rds_json_module \\\n--without-http_rds_csv_module \\\n--without-http_memc_module \\\n--without-http_redis2_module \\\n--without-lua_resty_memcached \\\n--without-lua_resty_mysql \\\n-j4\n\n#禁用memcached模块\n#--without-http_memc_module \\\n#禁用redis模块(保留redis2模块)\n#--without-http_redis_module \\\n#禁用email相关模块\n#--without-mail_pop3_module \\\n#--without-mail_imap_module \\\n#--without-mail_smtp_module \\\n#禁用rds模块\n#--without-http_rds_json_module \\\n#--without-http_rds_csv_module  \\\n#禁用cgi \n#--without-http_fastcgi_module \\\n#--without-http_uwsgi_module \\\n#--without-http_scgi_module \\\n#--without-http_autoindex_module \\\n#--without-http_memcached_module \\\n#--without-http_empty_gif_module \\\n$ make -j4 && sudo make install\n\n#确保80端口没被占用\n$ lsof -i:80\n\n$ /opt/openresty/nginx/nginx/sbin/nginx -t && /opt/openresty/nginx/nginx/sbin/nginx\n\n$ curl localhost\n```\n\n### openresty init.d 脚本\n\n详见 [anjia0532/openresty][]\n\n```bash\n$ chmod +x /etc/init.d/openresty\n#$ systemctl mask openresty\n#$ systemctl unmask openresty\n```\n\n一般来说，只需要修改 `OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx` 为实际的应用目录即可(需要确保该有的目录都存在)\n```bash\nnginx/\n├── client_body_temp\n├── conf\n├── html\n├── logs\n└── proxy_temp\n```\n\n可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建\n\n\n\nwaf 部分暂时先搁置\n\n## WAF 基于[ModSecurity][]\n\n参考资料 [Ubuntu 15.04][linkUbuntu15.04]\n\n```bash\n$ git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1\n$ cd ModSecurity/\n$ git checkout -b v3/master origin/v3/master\n$ sh build.sh\n$ git submodule init\n$ git submodule update #[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]\n$ ./configure\n$ make\n$ sudo make install\n\n#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx\n\n$ export MODSECURITY_INC=\"/home/anjia/openresty/ModSecurity/headers\"\n$ export MODSECURITY_LIB=\"/home/anjia/openresty/ModSecurity/src/.libs\"\n$ git clone https://github.com/SpiderLabs/ModSecurity-nginx --depth=1\n$ git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1\n$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf \n$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf\n$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h\nttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping\n$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled\n#使用www-data用户\n$ sudo sed -i '1s/^/user www-data;\\n/' /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf\n#删除36-116行，即server{}段，可以在英文输入法状态按     :36,166d  然后 :wq\n#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n$ sudo sed '$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; ' -i /opt/openresty/nginx/nginx/conf/nginx.conf\n#嫌费事，也可以直接用下面的配置文件\nuser www-data;\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;\n}\n\n$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf\n\n#Load OWASP Config \nInclude crs-setup.conf \n#Load all other Rules \nInclude rules/*.conf \n#Disable rule by ID from error message \n#SecRuleRemoveById 920350\n\n$ sudo sed  s/\"SecRuleEngine DetectionOnly\"/\"SecRuleEngine On\"/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf\n$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t && sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload\n$ curl \"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&searchsubmit=Buscar&page=nsp_search\"\n# 返回403 Forbidden\n```\n\n[Nginx]: http://nginx.org/\n[Tengine]: http://tengine.taobao.org/\n[Tengine-2.2.0.tar.gz]: http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\n[dubbo]: http://dubbo.io/\n[dubbox]: https://github.com/dangdangdotcom/dubbox\n[seajs]: https://github.com/seajs/seajs\n[change]: http://nginx.org/en/CHANGES\n[security]: http://nginx.org/en/security_advisories.html\n[prebuilt]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\n[download]: http://nginx.org/en/download.html\n[linkBuildingNginxFromSources]: http://nginx.org/en/docs/configure.html\n[pricing]: https://www.nginx.com/products/pricing/\n[5225895]: http://www.cnblogs.com/HKUI/p/5225895.html\n[linkBuildingNginxOnTheWin32Platform]: http://nginx.org/en/docs/howto_build_on_win32.html\n[linkInstallingNginxOpenSource]: https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n[openresty]: https://openresty.org/cn/\n[使用Nginx+Lua(OpenResty)开发高性能Web应用]: http://jinnianshilongnian.iteye.com/blog/2280928\n[linkOpenresty最佳实践]: https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\n[构建openresty]: https://openresty.org/cn/installation.html#-openresty\n[linkOpenresty系列课程]: http://www.stuq.org/course/1015\n[ModSecurity]: https://github.com/SpiderLabs/ModSecurity\n[linkUbuntu15.04]: https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\n[openresty官方组件]: https://openresty.org/en/components.html\n[anjia0532/openresty]: https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\n[anjia0532/nginx]: https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\n[linkAlibaba/tengine/issues/921#tengine]: https://github.com/alibaba/tengine/issues/921\n[openresty的商业版]: https://openresty.com/cn/\n[linkNginx模块]: https://www.nginx.com/resources/wiki/modules/","slug":"openresty","published":1,"updated":"2019-08-16T05:56:21.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojkh00ha24doy05lsbxh","content":"<h2 id=\"Nginx-还是Tengine\"><a href=\"#Nginx-还是Tengine\" class=\"headerlink\" title=\"Nginx 还是Tengine\"></a><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">Nginx</a> 还是<a href=\"http://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener\">Tengine</a></h2><p>Tengine是阿里巴巴的深度定制的nginx，目前最新版本<a href=\"http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\" target=\"_blank\" rel=\"noopener\">Tengine-2.2.0.tar.gz</a> , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是<code>2016-12-02</code>截止到目前，已经半年多没更新了。<a href=\"https://github.com/alibaba/tengine\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/tengine</a> 上已经有137条未关闭的issus和39条pull request</p>\n<p>下面是官网自述</p>\n<blockquote>\n<p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p>\n</blockquote>\n<p>但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架<a href=\"http://dubbo.io/\" target=\"_blank\" rel=\"noopener\">dubbo</a> 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">dubbox</a>, 淘宝家的玉伯的<a href=\"https://github.com/seajs/seajs\" target=\"_blank\" rel=\"noopener\">seajs</a></p>\n<p>补充 <a href=\"https://github.com/alibaba/tengine/issues/921\" target=\"_blank\" rel=\"noopener\">alibaba/tengine/issues/921#Tengine future</a> 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。</p>\n<p>而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。</p>\n<p>nginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和<a href=\"http://nginx.org/en/security_advisories.html\" target=\"_blank\" rel=\"noopener\">security</a>来考虑是否有必要升级</p>\n<p>如果不差钱，可以考虑一下 <code>nginx plus</code> ,价格很感人，<a href=\"https://www.nginx.com/products/pricing/\" target=\"_blank\" rel=\"noopener\">Pricing - Application Delivery for the Modern Web | NGINX</a></p>\n<p>如果不差钱，其实可以考虑用 <code>openresty edge</code> (<a href=\"https://openresty.com/cn/\" target=\"_blank\" rel=\"noopener\">openresty的商业版</a>) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。<br><a id=\"more\"></a></p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p><strong>本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。</strong></p>\n<p>nginx本身提供编译好的二进制文件，linux的参见 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\" target=\"_blank\" rel=\"noopener\">prebuilt</a> ，windows的从 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx/Windows-VERSION</code>相关<code>zip</code>包，建议生产环境使用 <code>stable</code>(稳定版本)</p>\n<p>如果是想从源码编译的话，从<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx-VERSION</code> 的<code>tar.gz</code>包，一般格式为<code>http://nginx.org/download/nginx-VERSION.tar.gz</code> 注意将<code>VERSION</code>替换成实际版本号，e.g. <code>1.12.1</code></p>\n<h3 id=\"nginx编译参数\"><a href=\"#nginx编译参数\" class=\"headerlink\" title=\"nginx编译参数\"></a>nginx编译参数</h3><p>ubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>nginx -V</code>是查看构建参数，<code>nginx -v</code>是查看版本号<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\">nginx version: nginx/1.13.0</span><br><span class=\"line\">built by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) </span><br><span class=\"line\">built with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span><br><span class=\"line\">--user=nginx  \\</span><br><span class=\"line\">--group=nginx  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_dav_module  \\</span><br><span class=\"line\">--with-http_flv_module  \\</span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\">--with-http_mp4_module  \\</span><br><span class=\"line\">--with-http_random_index_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_secure_link_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-mail  \\</span><br><span class=\"line\">--with-mail_ssl_module  \\</span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'</span>  \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br></pre></td></tr></table></figure></p>\n<p>具体参数含义可 参考官网 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a> 和 <a href=\"http://www.cnblogs.com/HKUI/p/5225895.html\" target=\"_blank\" rel=\"noopener\">梦想远航#nginx安装及编译参数详解</a>, 如果要构建<code>nginx for windows</code>参见 <a href=\"http://nginx.org/en/docs/howto_build_on_win32.html\" target=\"_blank\" rel=\"noopener\">Building nginx on the Win32 platform with Visual C</a></p>\n<h3 id=\"编译nginx\"><a href=\"#编译nginx\" class=\"headerlink\" title=\"编译nginx\"></a>编译nginx</h3><p>参考 官方文档 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"noopener\">INSTALLING NGINX OPEN SOURCE</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pcre 正则库 </span></span><br><span class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz</span><br><span class=\"line\">$ tar -zxf pcre-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> pcre-*</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zlib gzip 库</span></span><br><span class=\"line\">$ wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ tar -zxf zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.11</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$ wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2l.tar.gz</span><br><span class=\"line\">$ tar -zxf openssl-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openssl-*</span><br><span class=\"line\">$ ./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl/</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主线和稳定二选一</span></span><br><span class=\"line\"><span class=\"comment\"># 主线版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#稳定版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ tar zxf nginx-*.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-*</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-pcre=../pcre-8.41  \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module</span><br><span class=\"line\"></span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块</span></span><br><span class=\"line\"><span class=\"comment\"># 临时文件相关</span></span><br><span class=\"line\"><span class=\"comment\">#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dav，媒体相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_dav_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_flv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_mp4_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#随机首页，安全连接相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_random_index_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_secure_link_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#email相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail_ssl_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gcc相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#组，用户相关</span></span><br><span class=\"line\"><span class=\"comment\">#--user=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#--group=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#如果指定user和group 则通过此命令创建用户</span></span><br><span class=\"line\"><span class=\"comment\">#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果用不到https，可以把ssl和http2模块也禁掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用未用模块，减少安全风险</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module</span></span><br><span class=\"line\">$ nginx -t &amp;&amp; nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n<p>至此nginx编译完成。可以通过<code>curl localhost</code>或者浏览器打开<code>localhost</code> 查看nginx默认页面</p>\n<h3 id=\"nginx-init-d-脚本\"><a href=\"#nginx-init-d-脚本\" class=\"headerlink\" title=\"nginx init.d 脚本\"></a>nginx init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\" target=\"_blank\" rel=\"noopener\">anjia0532/nginx</a></p>\n<h2 id=\"openresty\"><a href=\"#openresty\" class=\"headerlink\" title=\"openresty\"></a>openresty</h2><p>学习资料 官网 <a href=\"https://openresty.org/cn/\" target=\"_blank\" rel=\"noopener\">openresty</a> ，开涛博客 <a href=\"http://jinnianshilongnian.iteye.com/blog/2280928\" target=\"_blank\" rel=\"noopener\">使用Nginx+Lua(OpenResty)开发高性能Web应用</a> ，温铭的gitbook <a href=\"https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\" target=\"_blank\" rel=\"noopener\">OpenResty 最佳实践</a> 温铭的stuq视频教程<a href=\"http://www.stuq.org/course/1015\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a></p>\n<h3 id=\"安装预编译包\"><a href=\"#安装预编译包\" class=\"headerlink\" title=\"安装预编译包\"></a>安装预编译包</h3><p>详见官方文档 <a href=\"https://openresty.org/cn/linux-packages.html\" target=\"_blank\" rel=\"noopener\">OpenResty® Linux 包</a></p>\n<h3 id=\"openresty编译参数\"><a href=\"#openresty编译参数\" class=\"headerlink\" title=\"openresty编译参数\"></a>openresty编译参数</h3><p>ubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>resty -V</code>是查看构建参数，<code>resty -v</code>是查看版本号</p>\n<p><a href=\"https://openresty.org/en/components.html\" target=\"_blank\" rel=\"noopener\">openresty官方组件</a> ,<a href=\"https://www.nginx.com/resources/wiki/modules/\" target=\"_blank\" rel=\"noopener\">nginx 模块</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx version: openresty/1.11.2.4</span><br><span class=\"line\">built with OpenSSL 1.0.2k  26 Jan 2017</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/openresty/nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--add-module=../ngx_devel_kit-0.3.0 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">echo</span>-nginx-module-0.60 \\</span><br><span class=\"line\">--add-module=../xss-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../ngx_coolkit-0.2rc3 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">set</span>-misc-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../form-input-nginx-module-0.12 \\</span><br><span class=\"line\">--add-module=../encrypted-session-nginx-module-0.06 \\</span><br><span class=\"line\">--add-module=../srcache-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../ngx_lua-0.10.8 \\</span><br><span class=\"line\">--add-module=../ngx_lua_upstream-0.06 \\</span><br><span class=\"line\">--add-module=../headers-more-nginx-module-0.32 \\</span><br><span class=\"line\">--add-module=../array-var-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../memc-nginx-module-0.18 \\</span><br><span class=\"line\">--add-module=../redis2-nginx-module-0.14 \\</span><br><span class=\"line\">--add-module=../redis-nginx-module-0.3.7 \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-ipv6 \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_addition_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_random_index_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_dav_module \\</span><br><span class=\"line\">--with-http_flv_module \\</span><br><span class=\"line\">--with-http_mp4_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-http_ssl_module</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建openresty\"><a href=\"#构建openresty\" class=\"headerlink\" title=\"构建openresty\"></a>构建openresty</h3><p>参见 <a href=\"https://openresty.org/cn/installation.html#-openresty\" target=\"_blank\" rel=\"noopener\">构建openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial</span><br><span class=\"line\">$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz</span><br><span class=\"line\">$ tar zxf openresty-1.11.2.4.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者直接从github clone 一份自行编译</span></span><br><span class=\"line\"><span class=\"comment\"># git clone https://github.com/openresty/openresty </span></span><br><span class=\"line\"><span class=\"comment\"># cd openresty </span></span><br><span class=\"line\"><span class=\"comment\"># make -j4</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openresty-*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有编译参数</span></span><br><span class=\"line\">$ ./configure --<span class=\"built_in\">help</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进行编译</span></span><br><span class=\"line\">./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-pcre-opt=-g \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module \\</span><br><span class=\"line\">--without-http_ssi_module \\</span><br><span class=\"line\">--without-http_userid_module \\</span><br><span class=\"line\">--without-http_browser_module \\</span><br><span class=\"line\">--without-http_rds_json_module \\</span><br><span class=\"line\">--without-http_rds_csv_module \\</span><br><span class=\"line\">--without-http_memc_module \\</span><br><span class=\"line\">--without-http_redis2_module \\</span><br><span class=\"line\">--without-lua_resty_memcached \\</span><br><span class=\"line\">--without-lua_resty_mysql \\</span><br><span class=\"line\">-j4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用memcached模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memc_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用redis模块(保留redis2模块)</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_redis_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用email相关模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_pop3_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_imap_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_smtp_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用rds模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_json_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_csv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用cgi </span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module \\</span></span><br><span class=\"line\">$ make -j4 &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保80端口没被占用</span></span><br><span class=\"line\">$ lsof -i:80</span><br><span class=\"line\"></span><br><span class=\"line\">$ /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; /opt/openresty/nginx/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl localhost</span><br></pre></td></tr></table></figure>\n<h3 id=\"openresty-init-d-脚本\"><a href=\"#openresty-init-d-脚本\" class=\"headerlink\" title=\"openresty init.d 脚本\"></a>openresty init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\" target=\"_blank\" rel=\"noopener\">anjia0532/openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ chmod +x /etc/init.d/openresty</span><br><span class=\"line\"><span class=\"comment\">#$ systemctl mask openresty</span></span><br><span class=\"line\"><span class=\"comment\">#$ systemctl unmask openresty</span></span><br></pre></td></tr></table></figure>\n<p>一般来说，只需要修改 <code>OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx</code> 为实际的应用目录即可(需要确保该有的目录都存在)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx/</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── proxy_temp</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建</p>\n<p>waf 部分暂时先搁置</p>\n<h2 id=\"WAF-基于ModSecurity\"><a href=\"#WAF-基于ModSecurity\" class=\"headerlink\" title=\"WAF 基于ModSecurity\"></a>WAF 基于<a href=\"https://github.com/SpiderLabs/ModSecurity\" target=\"_blank\" rel=\"noopener\">ModSecurity</a></h2><p>参考资料 <a href=\"https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\" target=\"_blank\" rel=\"noopener\">Ubuntu 15.04</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ModSecurity/</span><br><span class=\"line\">$ git checkout -b v3/master origin/v3/master</span><br><span class=\"line\">$ sh build.sh</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update <span class=\"comment\">#[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]</span></span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_INC=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/headers\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_LIB=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/src/.libs\"</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/ModSecurity-nginx --depth=1</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1</span><br><span class=\"line\">$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf </span><br><span class=\"line\">$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf</span><br><span class=\"line\">$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h</span><br><span class=\"line\">ttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping</span><br><span class=\"line\">$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled</span><br><span class=\"line\"><span class=\"comment\">#使用www-data用户</span></span><br><span class=\"line\">$ sudo sed -i <span class=\"string\">'1s/^/user www-data;\\n/'</span> /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\">$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#删除36-116行，即server&#123;&#125;段，可以在英文输入法状态按     :36,166d  然后 :wq</span></span><br><span class=\"line\"><span class=\"comment\">#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf</span></span><br><span class=\"line\">$ sudo sed <span class=\"string\">'$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; '</span> -i /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#嫌费事，也可以直接用下面的配置文件</span></span><br><span class=\"line\">user www-data;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Load OWASP Config </span></span><br><span class=\"line\">Include crs-setup.conf </span><br><span class=\"line\"><span class=\"comment\">#Load all other Rules </span></span><br><span class=\"line\">Include rules/*.conf </span><br><span class=\"line\"><span class=\"comment\">#Disable rule by ID from error message </span></span><br><span class=\"line\"><span class=\"comment\">#SecRuleRemoveById 920350</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo sed  s/<span class=\"string\">\"SecRuleEngine DetectionOnly\"</span>/<span class=\"string\">\"SecRuleEngine On\"</span>/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload</span><br><span class=\"line\">$ curl <span class=\"string\">\"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&amp;searchsubmit=Buscar&amp;page=nsp_search\"</span></span><br><span class=\"line\"><span class=\"comment\"># 返回403 Forbidden</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Nginx-还是Tengine\"><a href=\"#Nginx-还是Tengine\" class=\"headerlink\" title=\"Nginx 还是Tengine\"></a><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">Nginx</a> 还是<a href=\"http://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener\">Tengine</a></h2><p>Tengine是阿里巴巴的深度定制的nginx，目前最新版本<a href=\"http://tengine.taobao.org/download/tengine-2.2.0.tar.gz\" target=\"_blank\" rel=\"noopener\">Tengine-2.2.0.tar.gz</a> , 继承了nginx 1.8.1的所有特性，并且兼容nginx的配置，但是最后一次更新是<code>2016-12-02</code>截止到目前，已经半年多没更新了。<a href=\"https://github.com/alibaba/tengine\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/tengine</a> 上已经有137条未关闭的issus和39条pull request</p>\n<p>下面是官网自述</p>\n<blockquote>\n<p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p>\n</blockquote>\n<p>但是鉴于阿里有很多看似不错的项目最后都人走政息的传统(KPI驱动的项目),比如 微服务框架<a href=\"http://dubbo.io/\" target=\"_blank\" rel=\"noopener\">dubbo</a> 长期不维护，后来被坑的几家(当当，韩都衣舍)为了自身需要，又在他基础上搞了<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">dubbox</a>, 淘宝家的玉伯的<a href=\"https://github.com/seajs/seajs\" target=\"_blank\" rel=\"noopener\">seajs</a></p>\n<p>补充 <a href=\"https://github.com/alibaba/tengine/issues/921\" target=\"_blank\" rel=\"noopener\">alibaba/tengine/issues/921#Tengine future</a> 一个老外在tengine上发的讨论帖，以及国人的回复，挺热闹。看样子最近有重新启动的迹象，但是，很难说。</p>\n<p>而且Tengine还不支持Windows,网上文档比nginx少很多，所以如无特殊必要，还是建议用nginx。</p>\n<p>nginx 最新主线版本1.13.3，稳定版本1.12.1，基本保持1月一更甚至3更的频率，响应很快，堪称版本帝，可以参考 [changes][] 和<a href=\"http://nginx.org/en/security_advisories.html\" target=\"_blank\" rel=\"noopener\">security</a>来考虑是否有必要升级</p>\n<p>如果不差钱，可以考虑一下 <code>nginx plus</code> ,价格很感人，<a href=\"https://www.nginx.com/products/pricing/\" target=\"_blank\" rel=\"noopener\">Pricing - Application Delivery for the Modern Web | NGINX</a></p>\n<p>如果不差钱，其实可以考虑用 <code>openresty edge</code> (<a href=\"https://openresty.com/cn/\" target=\"_blank\" rel=\"noopener\">openresty的商业版</a>) ,按照实例数收费，一般1-2个微小企业，一次交买3年，平均每月1000左右人民币。<br>","more":"</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p><strong>本文主要讲解openresty编译安装以及加固，对于nginx只做简单描述。</strong></p>\n<p>nginx本身提供编译好的二进制文件，linux的参见 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#prebuilt\" target=\"_blank\" rel=\"noopener\">prebuilt</a> ，windows的从 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx/Windows-VERSION</code>相关<code>zip</code>包，建议生产环境使用 <code>stable</code>(稳定版本)</p>\n<p>如果是想从源码编译的话，从<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">download</a> 下载<code>nginx-VERSION</code> 的<code>tar.gz</code>包，一般格式为<code>http://nginx.org/download/nginx-VERSION.tar.gz</code> 注意将<code>VERSION</code>替换成实际版本号，e.g. <code>1.12.1</code></p>\n<h3 id=\"nginx编译参数\"><a href=\"#nginx编译参数\" class=\"headerlink\" title=\"nginx编译参数\"></a>nginx编译参数</h3><p>ubuntu nginx 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>nginx -V</code>是查看构建参数，<code>nginx -v</code>是查看版本号<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\">nginx version: nginx/1.13.0</span><br><span class=\"line\">built by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) </span><br><span class=\"line\">built with OpenSSL 1.0.2g-fips  1 Mar 2016 (running with OpenSSL 1.0.2g  1 Mar 2016)</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span><br><span class=\"line\">--user=nginx  \\</span><br><span class=\"line\">--group=nginx  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_dav_module  \\</span><br><span class=\"line\">--with-http_flv_module  \\</span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\">--with-http_mp4_module  \\</span><br><span class=\"line\">--with-http_random_index_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_secure_link_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-mail  \\</span><br><span class=\"line\">--with-mail_ssl_module  \\</span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'</span>  \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br></pre></td></tr></table></figure></p>\n<p>具体参数含义可 参考官网 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"noopener\">Building nginx from Sources</a> 和 <a href=\"http://www.cnblogs.com/HKUI/p/5225895.html\" target=\"_blank\" rel=\"noopener\">梦想远航#nginx安装及编译参数详解</a>, 如果要构建<code>nginx for windows</code>参见 <a href=\"http://nginx.org/en/docs/howto_build_on_win32.html\" target=\"_blank\" rel=\"noopener\">Building nginx on the Win32 platform with Visual C</a></p>\n<h3 id=\"编译nginx\"><a href=\"#编译nginx\" class=\"headerlink\" title=\"编译nginx\"></a>编译nginx</h3><p>参考 官方文档 <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"noopener\">INSTALLING NGINX OPEN SOURCE</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pcre 正则库 </span></span><br><span class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz</span><br><span class=\"line\">$ tar -zxf pcre-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> pcre-*</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zlib gzip 库</span></span><br><span class=\"line\">$ wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ tar -zxf zlib-1.2.11.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.11</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># openssl https库 注意官网代码是mac编译，建议如果失败，搜索一下openssl 编译 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$ wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2l.tar.gz</span><br><span class=\"line\">$ tar -zxf openssl-*.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openssl-*</span><br><span class=\"line\">$ ./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl/</span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主线和稳定二选一</span></span><br><span class=\"line\"><span class=\"comment\"># 主线版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#稳定版本</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ tar zxf nginx-*.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-*</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./configure --prefix=/etc/nginx  \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx  \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules  \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf  \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log  \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log  \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid  \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_gunzip_module  \\</span><br><span class=\"line\">--with-http_gzip_static_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_addition_module  \\</span><br><span class=\"line\">--with-http_auth_request_module  \\</span><br><span class=\"line\">--with-http_realip_module  \\</span><br><span class=\"line\">--with-http_slice_module  \\</span><br><span class=\"line\">--with-http_stub_status_module  \\</span><br><span class=\"line\">--with-http_sub_module  \\</span><br><span class=\"line\">--with-compat  \\</span><br><span class=\"line\">--with-file-aio  \\</span><br><span class=\"line\">--with-threads  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-stream  \\</span><br><span class=\"line\">--with-stream_realip_module  \\</span><br><span class=\"line\">--with-stream_ssl_module  \\</span><br><span class=\"line\">--with-stream_ssl_preread_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-http_v2_module  \\</span><br><span class=\"line\">--with-http_ssl_module  \\</span><br><span class=\"line\"></span><br><span class=\"line\">--with-pcre=../pcre-8.41  \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module</span><br><span class=\"line\"></span><br><span class=\"line\">$ make &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从官方标准参数中去除不用的模块，并新增了pcre和zlib模块</span></span><br><span class=\"line\"><span class=\"comment\"># 临时文件相关</span></span><br><span class=\"line\"><span class=\"comment\">#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-scgi-temp-path=/var/cache/nginx/scgi_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-client-body-temp-path=/var/cache/nginx/client_temp  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--http-proxy-temp-path=/var/cache/nginx/proxy_temp  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dav，媒体相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_dav_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_flv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_mp4_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#随机首页，安全连接相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_random_index_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-http_secure_link_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#email相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-mail_ssl_module  \\</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gcc相关</span></span><br><span class=\"line\"><span class=\"comment\">#--with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'  \\</span></span><br><span class=\"line\"><span class=\"comment\">#--with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#组，用户相关</span></span><br><span class=\"line\"><span class=\"comment\">#--user=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#--group=nginx </span></span><br><span class=\"line\"><span class=\"comment\">#如果指定user和group 则通过此命令创建用户</span></span><br><span class=\"line\"><span class=\"comment\">#$ sudo adduser --system --no-create-home --shell /bin/false --group --disabled-login nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果用不到https，可以把ssl和http2模块也禁掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用未用模块，减少安全风险</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module</span></span><br><span class=\"line\">$ nginx -t &amp;&amp; nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n<p>至此nginx编译完成。可以通过<code>curl localhost</code>或者浏览器打开<code>localhost</code> 查看nginx默认页面</p>\n<h3 id=\"nginx-init-d-脚本\"><a href=\"#nginx-init-d-脚本\" class=\"headerlink\" title=\"nginx init.d 脚本\"></a>nginx init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/826bc5b8d465289ea9a1ed46bf0ff6e6\" target=\"_blank\" rel=\"noopener\">anjia0532/nginx</a></p>\n<h2 id=\"openresty\"><a href=\"#openresty\" class=\"headerlink\" title=\"openresty\"></a>openresty</h2><p>学习资料 官网 <a href=\"https://openresty.org/cn/\" target=\"_blank\" rel=\"noopener\">openresty</a> ，开涛博客 <a href=\"http://jinnianshilongnian.iteye.com/blog/2280928\" target=\"_blank\" rel=\"noopener\">使用Nginx+Lua(OpenResty)开发高性能Web应用</a> ，温铭的gitbook <a href=\"https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details\" target=\"_blank\" rel=\"noopener\">OpenResty 最佳实践</a> 温铭的stuq视频教程<a href=\"http://www.stuq.org/course/1015\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a></p>\n<h3 id=\"安装预编译包\"><a href=\"#安装预编译包\" class=\"headerlink\" title=\"安装预编译包\"></a>安装预编译包</h3><p>详见官方文档 <a href=\"https://openresty.org/cn/linux-packages.html\" target=\"_blank\" rel=\"noopener\">OpenResty® Linux 包</a></p>\n<h3 id=\"openresty编译参数\"><a href=\"#openresty编译参数\" class=\"headerlink\" title=\"openresty编译参数\"></a>openresty编译参数</h3><p>ubuntu openresty 默认编译参数如下(为了便于阅读，将一行的编译参数展开成多行),<code>resty -V</code>是查看构建参数，<code>resty -v</code>是查看版本号</p>\n<p><a href=\"https://openresty.org/en/components.html\" target=\"_blank\" rel=\"noopener\">openresty官方组件</a> ,<a href=\"https://www.nginx.com/resources/wiki/modules/\" target=\"_blank\" rel=\"noopener\">nginx 模块</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx version: openresty/1.11.2.4</span><br><span class=\"line\">built with OpenSSL 1.0.2k  26 Jan 2017</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: </span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/openresty/nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--add-module=../ngx_devel_kit-0.3.0 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">echo</span>-nginx-module-0.60 \\</span><br><span class=\"line\">--add-module=../xss-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../ngx_coolkit-0.2rc3 \\</span><br><span class=\"line\">--add-module=../<span class=\"built_in\">set</span>-misc-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../form-input-nginx-module-0.12 \\</span><br><span class=\"line\">--add-module=../encrypted-session-nginx-module-0.06 \\</span><br><span class=\"line\">--add-module=../srcache-nginx-module-0.31 \\</span><br><span class=\"line\">--add-module=../ngx_lua-0.10.8 \\</span><br><span class=\"line\">--add-module=../ngx_lua_upstream-0.06 \\</span><br><span class=\"line\">--add-module=../headers-more-nginx-module-0.32 \\</span><br><span class=\"line\">--add-module=../array-var-nginx-module-0.05 \\</span><br><span class=\"line\">--add-module=../memc-nginx-module-0.18 \\</span><br><span class=\"line\">--add-module=../redis2-nginx-module-0.14 \\</span><br><span class=\"line\">--add-module=../redis-nginx-module-0.3.7 \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-ipv6 \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_addition_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_random_index_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_dav_module \\</span><br><span class=\"line\">--with-http_flv_module \\</span><br><span class=\"line\">--with-http_mp4_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-http_ssl_module</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建openresty\"><a href=\"#构建openresty\" class=\"headerlink\" title=\"构建openresty\"></a>构建openresty</h3><p>参见 <a href=\"https://openresty.org/cn/installation.html#-openresty\" target=\"_blank\" rel=\"noopener\">构建openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential dos2unix mercurial</span><br><span class=\"line\">$ wget https://openresty.org/download/openresty-1.11.2.4.tar.gz</span><br><span class=\"line\">$ tar zxf openresty-1.11.2.4.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者直接从github clone 一份自行编译</span></span><br><span class=\"line\"><span class=\"comment\"># git clone https://github.com/openresty/openresty </span></span><br><span class=\"line\"><span class=\"comment\"># cd openresty </span></span><br><span class=\"line\"><span class=\"comment\"># make -j4</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openresty-*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有编译参数</span></span><br><span class=\"line\">$ ./configure --<span class=\"built_in\">help</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进行编译</span></span><br><span class=\"line\">./configure --prefix=/etc/openresty \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include'</span> \\</span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">'-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib'</span> \\</span><br><span class=\"line\">--with-pcre-jit \\</span><br><span class=\"line\">--with-dtrace-probes \\</span><br><span class=\"line\">--with-pcre-opt=-g \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--without-mail_pop3_module \\</span><br><span class=\"line\">--without-mail_imap_module \\</span><br><span class=\"line\">--without-mail_smtp_module \\</span><br><span class=\"line\">--without-http_fastcgi_module \\</span><br><span class=\"line\">--without-http_uwsgi_module \\</span><br><span class=\"line\">--without-http_scgi_module \\</span><br><span class=\"line\">--without-http_autoindex_module \\</span><br><span class=\"line\">--without-http_memcached_module \\</span><br><span class=\"line\">--without-http_empty_gif_module \\</span><br><span class=\"line\">--without-http_ssi_module \\</span><br><span class=\"line\">--without-http_userid_module \\</span><br><span class=\"line\">--without-http_browser_module \\</span><br><span class=\"line\">--without-http_rds_json_module \\</span><br><span class=\"line\">--without-http_rds_csv_module \\</span><br><span class=\"line\">--without-http_memc_module \\</span><br><span class=\"line\">--without-http_redis2_module \\</span><br><span class=\"line\">--without-lua_resty_memcached \\</span><br><span class=\"line\">--without-lua_resty_mysql \\</span><br><span class=\"line\">-j4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用memcached模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memc_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用redis模块(保留redis2模块)</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_redis_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用email相关模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_pop3_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_imap_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-mail_smtp_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用rds模块</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_json_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_rds_csv_module  \\</span></span><br><span class=\"line\"><span class=\"comment\">#禁用cgi </span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_fastcgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_uwsgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_scgi_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_autoindex_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_memcached_module \\</span></span><br><span class=\"line\"><span class=\"comment\">#--without-http_empty_gif_module \\</span></span><br><span class=\"line\">$ make -j4 &amp;&amp; sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保80端口没被占用</span></span><br><span class=\"line\">$ lsof -i:80</span><br><span class=\"line\"></span><br><span class=\"line\">$ /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; /opt/openresty/nginx/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl localhost</span><br></pre></td></tr></table></figure>\n<h3 id=\"openresty-init-d-脚本\"><a href=\"#openresty-init-d-脚本\" class=\"headerlink\" title=\"openresty init.d 脚本\"></a>openresty init.d 脚本</h3><p>详见 <a href=\"https://gist.github.com/anjia0532/4bb10b59909da367cd857de6bd88d05b\" target=\"_blank\" rel=\"noopener\">anjia0532/openresty</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ chmod +x /etc/init.d/openresty</span><br><span class=\"line\"><span class=\"comment\">#$ systemctl mask openresty</span></span><br><span class=\"line\"><span class=\"comment\">#$ systemctl unmask openresty</span></span><br></pre></td></tr></table></figure>\n<p>一般来说，只需要修改 <code>OPENRESTY_WORKSPACE=${OPENRESTY_HOME}/nginx</code> 为实际的应用目录即可(需要确保该有的目录都存在)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx/</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── proxy_temp</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 mkdir -p ${OPENRESTY_WORKSPACE}/{client_body_temp,conf,html,logs,proxy_temp} 进行批量创建</p>\n<p>waf 部分暂时先搁置</p>\n<h2 id=\"WAF-基于ModSecurity\"><a href=\"#WAF-基于ModSecurity\" class=\"headerlink\" title=\"WAF 基于ModSecurity\"></a>WAF 基于<a href=\"https://github.com/SpiderLabs/ModSecurity\" target=\"_blank\" rel=\"noopener\">ModSecurity</a></h2><p>参考资料 <a href=\"https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504\" target=\"_blank\" rel=\"noopener\">Ubuntu 15.04</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity.git --depth=1</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ModSecurity/</span><br><span class=\"line\">$ git checkout -b v3/master origin/v3/master</span><br><span class=\"line\">$ sh build.sh</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update <span class=\"comment\">#[for bindings/python, others/libinjection, test/test-cases/secrules-language-tests]</span></span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用 ModSecurity-nginx 而不是网上流传的独立版 详见 https://github.com/SpiderLabs/ModSecurity-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_INC=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/headers\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> MODSECURITY_LIB=<span class=\"string\">\"/home/anjia/openresty/ModSecurity/src/.libs\"</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/ModSecurity-nginx --depth=1</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/SpiderLabs/owasp-modsecurity-crs.git --depth=1</span><br><span class=\"line\">$ sudo cp -R owasp-modsecurity-crs/rules /opt/openresty/nginx/nginx/conf </span><br><span class=\"line\">$ cp owasp-modsecurity-crs/crs-setup.conf.example /opt/openresty/nginx/nginx/conf/crs-setup.conf</span><br><span class=\"line\">$ sudo wget -P /opt/openresty/nginx/nginx/conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended h</span><br><span class=\"line\">ttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/unicode.mapping</span><br><span class=\"line\">$ sudo mv /opt/openresty/nginx/nginx/conf/modsecurity.conf-recommended /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo mkdir /opt/openresty/nginx/nginx/conf/sites-enabled</span><br><span class=\"line\"><span class=\"comment\">#使用www-data用户</span></span><br><span class=\"line\">$ sudo sed -i <span class=\"string\">'1s/^/user www-data;\\n/'</span> /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\">$ sudo vim /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#删除36-116行，即server&#123;&#125;段，可以在英文输入法状态按     :36,166d  然后 :wq</span></span><br><span class=\"line\"><span class=\"comment\">#如果确认行数没问题，也可以用sudo sed '35,116d' -i /opt/openresty/nginx/nginx/conf/nginx.conf</span></span><br><span class=\"line\">$ sudo sed <span class=\"string\">'$i include /opt/openresty/nginx/nginx/conf/sites-enabled/*; '</span> -i /opt/openresty/nginx/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\">#嫌费事，也可以直接用下面的配置文件</span></span><br><span class=\"line\">user www-data;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    include /opt/openresty/nginx/nginx/conf/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Load OWASP Config </span></span><br><span class=\"line\">Include crs-setup.conf </span><br><span class=\"line\"><span class=\"comment\">#Load all other Rules </span></span><br><span class=\"line\">Include rules/*.conf </span><br><span class=\"line\"><span class=\"comment\">#Disable rule by ID from error message </span></span><br><span class=\"line\"><span class=\"comment\">#SecRuleRemoveById 920350</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo sed  s/<span class=\"string\">\"SecRuleEngine DetectionOnly\"</span>/<span class=\"string\">\"SecRuleEngine On\"</span>/g -i /opt/openresty/nginx/nginx/conf/modsecurity.conf</span><br><span class=\"line\">$ sudo /opt/openresty/nginx/nginx/sbin/nginx -t &amp;&amp; sudo /opt/openresty/nginx/nginx/sbin/nginx -s reload</span><br><span class=\"line\">$ curl <span class=\"string\">\"http://localhost/wp-admin/admin.php?where1=%3Cscript%3Ealert(String.fromCharCode(88,+83,+83))%3C/script%3E&amp;searchsubmit=Buscar&amp;page=nsp_search\"</span></span><br><span class=\"line\"><span class=\"comment\"># 返回403 Forbidden</span></span><br></pre></td></tr></table></figure>"},{"title":"030-前端错误日志上报及网站统计(sentry+matomo)","date":"2019-07-07T07:00:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第30篇，定个小目标999，每周最少2篇。\n\n\n本文配合rancher1.6(手头一个测试集群没升级到最新的2.x)讲解如何搭建并配置日志错误上报框架[Sentry](https://sentry.io)及网站统计分析框架[matomo](https://matomo.org/) 的搭建及接入vue(本文以[iview-admin](https://github.com/iview/iview-admin)为例)项目。\n\n<a name=\"3suXa\"></a>\n## 背景简述\n\n- sentry 项目运行过程中，难免出现bug，前端不像后端可以很方便的采集项目日志(比如log4j + elk)，导致每次出问题后还原车祸现场费时费力。另外现在随着vue等兴起，构建项目时打成min.js，无疑又加大了前端定位问题的难度。而sentry是一款专注于错误采集的框架，支持常见的主流语言![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562489039361-12bbbf21-c134-424c-a4ef-24a8d5ed536b.png#align=left&display=inline&height=544&name=image.png&originHeight=544&originWidth=1779&size=112141&status=done&width=1779)采集，聚合，并推送错误信息。注意，sentry并不是日志平台(e.g. log4j + elk)，也不是监控平台，sentry专注于项目中的Error信息的采集，聚合，报警。\n- matomo 前身Pwiki，是一款开源的web网站分析利器。类似于Google Analytics。具体的特性，参见 [Premium Web Analytics](https://matomo.org/feature-overview/) ，比如绘制页面热力图，录制会话，访问漏斗，A/B Test等(这几样都是收费插件功能)。\n\n> 注意：本文假设你已经有rancher1.6的环境\n\n\n<!-- more -->\n\n<a name=\"LmUTY\"></a>\n## 安装\n<a name=\"Z2rjL\"></a>\n### matomo\n<a name=\"RXPnQ\"></a>\n#### rancher 创建matomo\n\n在rancher主机上\n\n```bash\n## 创建必要文件夹\nmkdir -p /data/matomo/{config,logs,php,maxmind}/\n\n## 安装maxmind ip数据库\nwget -P /tmp/ https://github.com/maxmind/geoipupdate/releases/download/v4.0.3/geoipupdate_4.0.3_linux_amd64.deb\ndpkg -i /tmp/geoipupdate_4.0.3_linux_amd64.deb\nmv /etc/GeoIP.conf{,.bak}\ncat << EOF | sudo tee -a /etc/GeoIP.conf\nAccountID 0\nLicenseKey 000000000000\nEditionIDs GeoLite2-Country GeoLite2-City GeoLite2-ASN\nDatabaseDirectory /data/matomo/maxmind\nEOF\n\n## 下载最新maxmind数据库\ngeoipupdate\nls -lah /data/matomo/maxmind/\n总用量 67M\ndrwxr-xr-x 2 root root 4.0K 7月   7 17:25 .\ndrwxr-xr-x 6 root root 4.0K 7月   7 17:23 ..\n-rw------- 1 root root    0 7月   7 17:25 .geoipupdate.lock\n-rw-r--r-- 1 root root 6.3M 7月   7 17:25 GeoLite2-ASN.mmdb\n-rw-r--r-- 1 root root  57M 7月   7 17:25 GeoLite2-City.mmdb\n-rw-r--r-- 1 root root 3.7M 7月   7 17:25 GeoLite2-Country.mmdb\n\n## 定时更新ip数据库\ncat << EOF | sudo tee -a /etc/cron.d/geoipupdate\n50 2 * * 4 root /usr/bin/geoipupdate\nEOF\n\n## 设置php.ini\ncat << EOF | sudo tee -a /data/matomo/php/php.ini\nupload_max_filesize = 128M\npost_max_size = 128M\nmax_execution_time = 200\nmemory_limit = 256M\nEOF\n```\n\ndocker-compose.yaml\n```yaml\nversion: '2'\nservices:\n  matomo:\n    image: matomo:latest\n    stdin_open: true\n    volumes:\n    - /data/matomo/config:/var/www/html/config\n    - /data/matomo/logs:/var/www/html/logs\n    - /data/matomo/php/php.ini:/usr/local/etc/php/php.ini\n    - /data/matomo/maxmind/GeoLite2-City.mmdb:/var/www/html/misc/GeoLite2-City.mmdb\n    - /data/matomo/maxmind/GeoLite2-Country.mmdb:/var/www/html/misc/GeoLite2-Country.mmdb\n    - /data/matomo/maxmind/GeoLite2-ASN.mmdb:/var/www/html/misc/GeoLite2-ASN.mmdb\n    tty: true\n    ports:\n    - 80:80/tcp\n    - 443:443/tcp\n```\n\nrancher-compose.yaml\n```yaml\nversion: '2'\nservices:\n  matomo:\n    scale: 1\n    start_on_create: true\n    health_check:\n      response_timeout: 2000\n      healthy_threshold: 2\n      port: 80\n      unhealthy_threshold: 3\n      initializing_timeout: 60000\n      interval: 2000\n      strategy: recreate\n      reinitializing_timeout: 60000\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562492855584-f8bc4414-c57b-4780-94ee-60f0c42258fb.png#align=left&display=inline&height=588&name=image.png&originHeight=588&originWidth=1884&size=72142&status=done&width=1884)\n\n<a name=\"5Sk9s\"></a>\n#### 配置matomo\n选择中文<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562474861136-8a51035c-9f3d-45c9-b560-17a8d251f21b.png#align=left&display=inline&height=508&name=image.png&originHeight=508&originWidth=606&size=39934&status=done&width=606)<br />系统检查<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562474876102-d3669793-8f7c-4884-a7c8-57c6892b0a63.png#align=left&display=inline&height=602&name=image.png&originHeight=602&originWidth=1361&size=59313&status=done&width=1361)<br />配置数据库<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475009264-1585cc06-9880-4eb3-9908-70e78cf9012e.png#align=left&display=inline&height=830&name=image.png&originHeight=830&originWidth=823&size=53486&status=done&width=823)<br />自动建表完成<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475051907-56c50bd2-4e8a-4696-9e99-929d43bd60c8.png#align=left&display=inline&height=520&name=image.png&originHeight=520&originWidth=1348&size=46284&status=done&width=1348)<br />创建管理员用户(忘记截图了)<br />设置分析网站(可以随便创建，后边再进行修改),注意跟进实际情况修改时区<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475212464-ed37c762-0452-4ae2-9976-c4a90d8eadda.png#align=left&display=inline&height=711&name=image.png&originHeight=711&originWidth=936&size=51354&status=done&width=936)<br />复制跟踪代码<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475254242-9a8baee0-dc7e-47ff-a913-cca4bcecf018.png#align=left&display=inline&height=844&name=image.png&originHeight=844&originWidth=1396&size=113598&status=done&width=1396)<br />配置matomo<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475288189-d137a11a-cb01-4311-955e-d42788988f21.png#align=left&display=inline&height=843&name=image.png&originHeight=843&originWidth=1172&size=109853&status=done&width=1172)<br />登陆<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475319066-c88fd562-3712-4022-a040-f64b1cbbafbe.png#align=left&display=inline&height=668&name=image.png&originHeight=668&originWidth=798&size=26965&status=done&width=798)\n\n<a name=\"uErEW\"></a>\n### Sentry\n<a name=\"FH6Ax\"></a>\n#### rancher 创建Sentry\ndocker-compose.yml\n```yaml\nversion: '2'\nservices:\n  cron:\n    image: sentry:9\n    environment:\n      SENTRY_MEMCACHED_HOST: memcached\n      SENTRY_REDIS_HOST: redis\n      SENTRY_POSTGRES_HOST: postgres\n      SENTRY_EMAIL_HOST: smtp\n      SENTRY_SECRET_KEY: SENTRY_SECRET_KEY_XXX\n    stdin_open: true\n    volumes:\n    - /data/sentry-data:/var/lib/sentry/files\n    - /data/sentry-data/config.yml:/etc/sentry/config.yml\n    tty: true\n    command:\n    - run\n    - cron\n  memcached:\n    image: memcached:1.5-alpine\n  web:\n    image: sentry:9\n    environment:\n      SENTRY_MEMCACHED_HOST: memcached\n      SENTRY_REDIS_HOST: redis\n      SENTRY_POSTGRES_HOST: postgres\n      SENTRY_EMAIL_HOST: smtp\n      SENTRY_SECRET_KEY: SENTRY_SECRET_KEY_XXX\n    stdin_open: true\n    volumes:\n    - /data/sentry-data:/var/lib/sentry/files\n    - /data/sentry-data/config.yml:/etc/sentry/config.yml\n    tty: true\n    ports:\n    - 9000:9000/tcp\n  worker:\n    image: sentry:9\n    environment:\n      SENTRY_MEMCACHED_HOST: memcached\n      SENTRY_REDIS_HOST: redis\n      SENTRY_POSTGRES_HOST: postgres\n      SENTRY_EMAIL_HOST: smtp\n      SENTRY_SECRET_KEY: SENTRY_SECRET_KEY_XXX\n    stdin_open: true\n    volumes:\n    - /data/sentry-data:/var/lib/sentry/files\n    - /data/sentry-data/config.yml:/etc/sentry/config.yml\n    tty: true\n    command:\n    - run\n    - worker\n  redis:\n    image: redis:3.2-alpine\n  postgres:\n    restart: unless-stopped\n    image: postgres:9.5\n    volumes:\n    - /data/postgresql/data:/var/lib/postgresql/data\n    ports:\n    - 5432:5432/tcp\n```\n> 注意把  SENTRY_SECRET_KEY 换成 sentry的实际secret key\n\n\nrancher-compose.yml\n```yaml\nversion: '2'\nservices:\n  cron:\n    scale: 1\n    start_on_create: true\n  memcached:\n    scale: 1\n    start_on_create: true\n  web:\n    scale: 1\n    start_on_create: true\n    health_check:\n      response_timeout: 2000\n      healthy_threshold: 2\n      port: 9000\n      unhealthy_threshold: 3\n      initializing_timeout: 60000\n      interval: 2000\n      strategy: recreate\n      reinitializing_timeout: 60000\n  worker:\n    scale: 1\n    start_on_create: true\n  redis:\n    scale: 1\n    start_on_create: true\n  postgres:\n    scale: 1\n    start_on_create: true\n    health_check:\n      response_timeout: 2000\n      healthy_threshold: 2\n      port: 5432\n      unhealthy_threshold: 3\n      initializing_timeout: 60000\n      interval: 2000\n      strategy: recreate\n      reinitializing_timeout: 60000\n```\n先将docker-compose.yml 保存到服务器上，用来初始化db和创建账号\n\n```bash\ndocker-compose run --rm web upgrade\nWould you like to create a user account now? [Y/n]: y\nEmail: anjia0532@gmail.com\nPassword: \nRepeat for confirmation: \nShould this user be a superuser? [y/N]: y\n## 直到输出\nMigrated:\n - sentry\n - sentry.nodestore\n - sentry.search\n - social_auth\n - sentry.tagstore\n - sentry_plugins.hipchat_ac\n - sentry_plugins.jira_ac\nCreating missing DSNs\nCorrecting Group.num_comments counter\n## 并退出\n```\n\n<a name=\"13XYc\"></a>\n#### 配置Sentry\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562504762029-c863b8c3-4b57-4260-b370-e538cce436e7.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=716&size=44203&status=done&width=716)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562504816401-106637ac-f528-4985-bcd1-f5649f00cc18.png#align=left&display=inline&height=712&name=image.png&originHeight=712&originWidth=656&size=148457&status=done&width=656)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562504900957-00a0a900-8276-47cf-b33a-52fe87cdd130.png#align=left&display=inline&height=804&name=image.png&originHeight=804&originWidth=1501&size=130999&status=done&width=1501)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505169347-a858daf1-bd4d-4101-97d5-aa071564a8db.png#align=left&display=inline&height=222&name=image.png&originHeight=222&originWidth=258&size=5513&status=done&width=258)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505136746-68d7b0e7-932e-4aef-be34-12da8cc9bbf7.png#align=left&display=inline&height=575&name=image.png&originHeight=575&originWidth=1029&size=69263&status=done&width=1029)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505216529-4a3b7152-0b37-4014-a9e2-266cff0b72d7.png#align=left&display=inline&height=620&name=image.png&originHeight=620&originWidth=1281&size=95572&status=done&width=1281)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505244285-e97409c9-7565-4b53-b4da-d669bf2db3ad.png#align=left&display=inline&height=894&name=image.png&originHeight=894&originWidth=1272&size=139045&status=done&width=1272)\n\n<a name=\"jFXcp\"></a>\n## 配置vue\n本文以iview-admin为例\n\n```bash\ngit clone https://gitee.com/anjia/iview-admin.git\ncd iview-admin\n```\n\n<a name=\"e7gJY\"></a>\n### sentry\n注意，网上很多文档，以讹传讹的使用过时的工具，raven-js .从5.x后官方建议使用@sentry/browser和@sentry/integrations\n```bash\nnpm install --save @sentry/integrations\nnpm install --save @sentry/browser\n```\n\n修改 `iview-admin\\src\\main.js` \n\n```javascript\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\nimport iView from 'iview'\nimport i18n from '@/locale'\nimport config from '@/config'\nimport importDirective from '@/directive'\nimport { directive as clickOutside } from 'v-click-outside-x'\nimport installPlugin from '@/plugin'\nimport './index.less'\nimport '@/assets/icons/iconfont.css'\nimport TreeTable from 'tree-table-vue'\nimport VOrgTree from 'v-org-tree'\nimport 'v-org-tree/dist/v-org-tree.css'\nimport * as Sentry from '@sentry/browser';\nimport * as Integrations from '@sentry/integrations';\n// 实际打包时应该不引入mock\n/* eslint-disable */\nif (process.env.NODE_ENV !== 'production') require('@/mock')\n\nVue.use(iView, {\n  i18n: (key, value) => i18n.t(key, value)\n})\nVue.use(TreeTable)\nVue.use(VOrgTree)\n/**\n * @description 注册admin内置插件\n */\ninstallPlugin(Vue)\n/**\n * @description 生产环境关掉提示\n */\nVue.config.productionTip = false\n/**\n * @description 全局注册应用配置\n */\nVue.prototype.$config = config\n/**\n * 注册指令\n */\nimportDirective(Vue)\nVue.directive('clickOutside', clickOutside)\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  i18n,\n  store,\n  render: h => h(App)\n})\n\nSentry.init({\n  dsn: 'https://xxx@xxx.xxx.com/xxx',\n  integrations: [\n    new Integrations.Vue({\n      Vue,\n      attachProps: true,\n    }),\n  ],\n});\n```\n\n```bash\nnpm install\nnpm run dev\n```\n\n打开 [http://localhost:8080/error_store/error_store_page](http://localhost:8080/error_store/error_store_page)<br />分别点击两个按钮，模拟出错<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507067736-b37abeba-06bb-48cf-9421-7229b0250070.png#align=left&display=inline&height=797&name=image.png&originHeight=797&originWidth=913&size=108137&status=done&width=913)<br />打开sentry发现已经有错误上报了，并且对错误进行聚合。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507097119-284acf63-b1df-4004-9027-512dad7b3af3.png#align=left&display=inline&height=464&name=image.png&originHeight=464&originWidth=1783&size=102500&status=done&width=1783)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507211900-c2fcf0a4-2265-43e5-8ed4-d41ce849b37c.png#align=left&display=inline&height=927&name=image.png&originHeight=927&originWidth=1533&size=181472&status=done&width=1533)点开查看详细内容。\n\n如果需要生成source-map ,可以参考官方文档 [https://docs.sentry.io/platforms/javascript/sourcemaps/](https://docs.sentry.io/platforms/javascript/sourcemaps/)\n\n<a name=\"cwyoX\"></a>\n### matomo\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507978926-cd3d0612-a601-4294-bd27-afe1aa95e76f.png#align=left&display=inline&height=615&name=image.png&originHeight=615&originWidth=1843&size=53616&status=done&width=1843)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508055404-00bd3ea6-b9d9-4911-9d73-84e9b40d3499.png#align=left&display=inline&height=277&name=image.png&originHeight=277&originWidth=1084&size=18426&status=done&width=1084)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508079973-2f10991b-1f19-4403-bc6f-3d62694e0abd.png#align=left&display=inline&height=559&name=image.png&originHeight=559&originWidth=633&size=35279&status=done&width=633)\n\n```bash\nnpm install --save vue-matomo\n```\n修改 `iview-admin\\src\\main.js` \n\n```javascript\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\nimport iView from 'iview'\nimport i18n from '@/locale'\nimport config from '@/config'\nimport importDirective from '@/directive'\nimport { directive as clickOutside } from 'v-click-outside-x'\nimport installPlugin from '@/plugin'\nimport './index.less'\nimport '@/assets/icons/iconfont.css'\nimport TreeTable from 'tree-table-vue'\nimport VOrgTree from 'v-org-tree'\nimport 'v-org-tree/dist/v-org-tree.css'\nimport * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\nimport VueMatomo from 'vue-matomo'\n\n// 实际打包时应该不引入mock\n/* eslint-disable */\nif (process.env.NODE_ENV !== 'production') require('@/mock')\n\nVue.use(iView, {\n  i18n: (key, value) => i18n.t(key, value)\n})\nVue.use(TreeTable)\nVue.use(VOrgTree)\n/**\n * @description 注册admin内置插件\n */\ninstallPlugin(Vue)\n/**\n * @description 生产环境关掉提示\n */\nVue.config.productionTip = false\n/**\n * @description 全局注册应用配置\n */\nVue.prototype.$config = config\n/**\n * 注册指令\n */\nimportDirective(Vue)\nVue.directive('clickOutside', clickOutside)\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  i18n,\n  store,\n  render: h => h(App)\n})\n\nSentry.init({\n  dsn: 'https://xxx@xxx.xxx.com/xxx',\n  integrations: [\n    new Integrations.Vue({\n      Vue,\n      attachProps: true,\n    }),\n  ],\n});\nVue.use(VueMatomo, {\n  // Configure your matomo server and site by providing\n  host: '//xxxx.xxxx.com/',\n  siteId: xx,\n \n  // Changes the default .js and .php endpoint's filename\n  // Default: 'piwik'\n  trackerFileName: 'matomo.js',\n \n  // Overrides the autogenerated tracker endpoint entirely\n  // Default: undefined\n  trackerUrl: '//xxxx.xxxx.com/matomo.php',\n \n  // Enables automatically registering pageviews on the router\n  router: router,\n \n  // Enables link tracking on regular links. Note that this won't\n  // work for routing links (ie. internal Vue router links)\n  // Default: true\n  enableLinkTracking: true,\n \n  // Require consent before sending tracking information to matomo\n  // Default: false\n  requireConsent: false,\n \n  // Whether to track the initial page view\n  // Default: true\n  trackInitialView: true,\n \n  // Whether or not to log debug information\n  // Default: false\n  debug: false\n});\n \n \n// or\nwindow._paq.push\n \n// or through\nwindow.Piwik.getTracker\n```\n\n打开 http://localhost:8080, 随便访问几个菜单,然后打开matomo<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508801909-af15cc0f-180a-4cfc-86ec-768bfd892d67.png#align=left&display=inline&height=515&name=image.png&originHeight=515&originWidth=880&size=45838&status=done&width=880)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508853543-f7592d90-ff5e-4f58-974a-e1f37b230e2c.png#align=left&display=inline&height=727&name=image.png&originHeight=727&originWidth=1416&size=69029&status=done&width=1416)<br />路由已经有数据了<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508892758-378acda5-d8ee-44a1-81f9-7ac7933da610.png#align=left&display=inline&height=749&name=image.png&originHeight=749&originWidth=1553&size=122920&status=done&width=1553)<br />并且将用户的常规数据聚合起来\n\n<a name=\"9yhO5\"></a>\n## 更多\n其实本文只是sentry和matomo简单介绍<br />更深入的使用，比如sentry，推送邮件，文中一带而过的sourcemap，单点登录(集成内部的权限认证)，自定义上报内容(将错误与用户id关联起来)，,敏感数据脱敏等<br />比如matomo, 每日发送分析报表，增加kafka插件，进行更深层次的挖掘，自定义上报内容(购物车等),大数据量情况下的优化，优化用户设备指纹，使用了nginx等反代软件后，如何正确识别真实ip，热力图，A/B test,漏斗图等\n<a name=\"ND8RQ\"></a>\n## 参考资料\n\n- [我的个人博客](https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install)\n- [我的掘金](https://juejin.im/post/5d22013de51d45775a700395)\n- [matomo官网](https://matomo.org/)\n- [INSTALLING MATOMO](https://matomo.org/docs/installation/)\n- [Sentry官网](https://sentry.io)\n- [Installation with Docker](https://docs.sentry.io/server/installation/docker/)\n- [Automatic Updates for GeoIP2 and GeoIP Legacy Databases](https://dev.maxmind.com/geoip/geoipupdate/)\n- [vue中如何使用sentry对错误日志进行监控](https://segmentfault.com/a/1190000016309667)\n\n","source":"_posts/sentry-and-matomo-install.md","raw":"\n---\n\ntitle: 030-前端错误日志上报及网站统计(sentry+matomo)\n\ndate: 2019-07-07 15:00:00 +0800\n\ntags: [sentry,运维,日志,前端,vuejs,matomo,网站分析]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第30篇，定个小目标999，每周最少2篇。\n\n\n本文配合rancher1.6(手头一个测试集群没升级到最新的2.x)讲解如何搭建并配置日志错误上报框架[Sentry](https://sentry.io)及网站统计分析框架[matomo](https://matomo.org/) 的搭建及接入vue(本文以[iview-admin](https://github.com/iview/iview-admin)为例)项目。\n\n<a name=\"3suXa\"></a>\n## 背景简述\n\n- sentry 项目运行过程中，难免出现bug，前端不像后端可以很方便的采集项目日志(比如log4j + elk)，导致每次出问题后还原车祸现场费时费力。另外现在随着vue等兴起，构建项目时打成min.js，无疑又加大了前端定位问题的难度。而sentry是一款专注于错误采集的框架，支持常见的主流语言![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562489039361-12bbbf21-c134-424c-a4ef-24a8d5ed536b.png#align=left&display=inline&height=544&name=image.png&originHeight=544&originWidth=1779&size=112141&status=done&width=1779)采集，聚合，并推送错误信息。注意，sentry并不是日志平台(e.g. log4j + elk)，也不是监控平台，sentry专注于项目中的Error信息的采集，聚合，报警。\n- matomo 前身Pwiki，是一款开源的web网站分析利器。类似于Google Analytics。具体的特性，参见 [Premium Web Analytics](https://matomo.org/feature-overview/) ，比如绘制页面热力图，录制会话，访问漏斗，A/B Test等(这几样都是收费插件功能)。\n\n> 注意：本文假设你已经有rancher1.6的环境\n\n\n<!-- more -->\n\n<a name=\"LmUTY\"></a>\n## 安装\n<a name=\"Z2rjL\"></a>\n### matomo\n<a name=\"RXPnQ\"></a>\n#### rancher 创建matomo\n\n在rancher主机上\n\n```bash\n## 创建必要文件夹\nmkdir -p /data/matomo/{config,logs,php,maxmind}/\n\n## 安装maxmind ip数据库\nwget -P /tmp/ https://github.com/maxmind/geoipupdate/releases/download/v4.0.3/geoipupdate_4.0.3_linux_amd64.deb\ndpkg -i /tmp/geoipupdate_4.0.3_linux_amd64.deb\nmv /etc/GeoIP.conf{,.bak}\ncat << EOF | sudo tee -a /etc/GeoIP.conf\nAccountID 0\nLicenseKey 000000000000\nEditionIDs GeoLite2-Country GeoLite2-City GeoLite2-ASN\nDatabaseDirectory /data/matomo/maxmind\nEOF\n\n## 下载最新maxmind数据库\ngeoipupdate\nls -lah /data/matomo/maxmind/\n总用量 67M\ndrwxr-xr-x 2 root root 4.0K 7月   7 17:25 .\ndrwxr-xr-x 6 root root 4.0K 7月   7 17:23 ..\n-rw------- 1 root root    0 7月   7 17:25 .geoipupdate.lock\n-rw-r--r-- 1 root root 6.3M 7月   7 17:25 GeoLite2-ASN.mmdb\n-rw-r--r-- 1 root root  57M 7月   7 17:25 GeoLite2-City.mmdb\n-rw-r--r-- 1 root root 3.7M 7月   7 17:25 GeoLite2-Country.mmdb\n\n## 定时更新ip数据库\ncat << EOF | sudo tee -a /etc/cron.d/geoipupdate\n50 2 * * 4 root /usr/bin/geoipupdate\nEOF\n\n## 设置php.ini\ncat << EOF | sudo tee -a /data/matomo/php/php.ini\nupload_max_filesize = 128M\npost_max_size = 128M\nmax_execution_time = 200\nmemory_limit = 256M\nEOF\n```\n\ndocker-compose.yaml\n```yaml\nversion: '2'\nservices:\n  matomo:\n    image: matomo:latest\n    stdin_open: true\n    volumes:\n    - /data/matomo/config:/var/www/html/config\n    - /data/matomo/logs:/var/www/html/logs\n    - /data/matomo/php/php.ini:/usr/local/etc/php/php.ini\n    - /data/matomo/maxmind/GeoLite2-City.mmdb:/var/www/html/misc/GeoLite2-City.mmdb\n    - /data/matomo/maxmind/GeoLite2-Country.mmdb:/var/www/html/misc/GeoLite2-Country.mmdb\n    - /data/matomo/maxmind/GeoLite2-ASN.mmdb:/var/www/html/misc/GeoLite2-ASN.mmdb\n    tty: true\n    ports:\n    - 80:80/tcp\n    - 443:443/tcp\n```\n\nrancher-compose.yaml\n```yaml\nversion: '2'\nservices:\n  matomo:\n    scale: 1\n    start_on_create: true\n    health_check:\n      response_timeout: 2000\n      healthy_threshold: 2\n      port: 80\n      unhealthy_threshold: 3\n      initializing_timeout: 60000\n      interval: 2000\n      strategy: recreate\n      reinitializing_timeout: 60000\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562492855584-f8bc4414-c57b-4780-94ee-60f0c42258fb.png#align=left&display=inline&height=588&name=image.png&originHeight=588&originWidth=1884&size=72142&status=done&width=1884)\n\n<a name=\"5Sk9s\"></a>\n#### 配置matomo\n选择中文<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562474861136-8a51035c-9f3d-45c9-b560-17a8d251f21b.png#align=left&display=inline&height=508&name=image.png&originHeight=508&originWidth=606&size=39934&status=done&width=606)<br />系统检查<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562474876102-d3669793-8f7c-4884-a7c8-57c6892b0a63.png#align=left&display=inline&height=602&name=image.png&originHeight=602&originWidth=1361&size=59313&status=done&width=1361)<br />配置数据库<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475009264-1585cc06-9880-4eb3-9908-70e78cf9012e.png#align=left&display=inline&height=830&name=image.png&originHeight=830&originWidth=823&size=53486&status=done&width=823)<br />自动建表完成<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475051907-56c50bd2-4e8a-4696-9e99-929d43bd60c8.png#align=left&display=inline&height=520&name=image.png&originHeight=520&originWidth=1348&size=46284&status=done&width=1348)<br />创建管理员用户(忘记截图了)<br />设置分析网站(可以随便创建，后边再进行修改),注意跟进实际情况修改时区<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475212464-ed37c762-0452-4ae2-9976-c4a90d8eadda.png#align=left&display=inline&height=711&name=image.png&originHeight=711&originWidth=936&size=51354&status=done&width=936)<br />复制跟踪代码<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475254242-9a8baee0-dc7e-47ff-a913-cca4bcecf018.png#align=left&display=inline&height=844&name=image.png&originHeight=844&originWidth=1396&size=113598&status=done&width=1396)<br />配置matomo<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475288189-d137a11a-cb01-4311-955e-d42788988f21.png#align=left&display=inline&height=843&name=image.png&originHeight=843&originWidth=1172&size=109853&status=done&width=1172)<br />登陆<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562475319066-c88fd562-3712-4022-a040-f64b1cbbafbe.png#align=left&display=inline&height=668&name=image.png&originHeight=668&originWidth=798&size=26965&status=done&width=798)\n\n<a name=\"uErEW\"></a>\n### Sentry\n<a name=\"FH6Ax\"></a>\n#### rancher 创建Sentry\ndocker-compose.yml\n```yaml\nversion: '2'\nservices:\n  cron:\n    image: sentry:9\n    environment:\n      SENTRY_MEMCACHED_HOST: memcached\n      SENTRY_REDIS_HOST: redis\n      SENTRY_POSTGRES_HOST: postgres\n      SENTRY_EMAIL_HOST: smtp\n      SENTRY_SECRET_KEY: SENTRY_SECRET_KEY_XXX\n    stdin_open: true\n    volumes:\n    - /data/sentry-data:/var/lib/sentry/files\n    - /data/sentry-data/config.yml:/etc/sentry/config.yml\n    tty: true\n    command:\n    - run\n    - cron\n  memcached:\n    image: memcached:1.5-alpine\n  web:\n    image: sentry:9\n    environment:\n      SENTRY_MEMCACHED_HOST: memcached\n      SENTRY_REDIS_HOST: redis\n      SENTRY_POSTGRES_HOST: postgres\n      SENTRY_EMAIL_HOST: smtp\n      SENTRY_SECRET_KEY: SENTRY_SECRET_KEY_XXX\n    stdin_open: true\n    volumes:\n    - /data/sentry-data:/var/lib/sentry/files\n    - /data/sentry-data/config.yml:/etc/sentry/config.yml\n    tty: true\n    ports:\n    - 9000:9000/tcp\n  worker:\n    image: sentry:9\n    environment:\n      SENTRY_MEMCACHED_HOST: memcached\n      SENTRY_REDIS_HOST: redis\n      SENTRY_POSTGRES_HOST: postgres\n      SENTRY_EMAIL_HOST: smtp\n      SENTRY_SECRET_KEY: SENTRY_SECRET_KEY_XXX\n    stdin_open: true\n    volumes:\n    - /data/sentry-data:/var/lib/sentry/files\n    - /data/sentry-data/config.yml:/etc/sentry/config.yml\n    tty: true\n    command:\n    - run\n    - worker\n  redis:\n    image: redis:3.2-alpine\n  postgres:\n    restart: unless-stopped\n    image: postgres:9.5\n    volumes:\n    - /data/postgresql/data:/var/lib/postgresql/data\n    ports:\n    - 5432:5432/tcp\n```\n> 注意把  SENTRY_SECRET_KEY 换成 sentry的实际secret key\n\n\nrancher-compose.yml\n```yaml\nversion: '2'\nservices:\n  cron:\n    scale: 1\n    start_on_create: true\n  memcached:\n    scale: 1\n    start_on_create: true\n  web:\n    scale: 1\n    start_on_create: true\n    health_check:\n      response_timeout: 2000\n      healthy_threshold: 2\n      port: 9000\n      unhealthy_threshold: 3\n      initializing_timeout: 60000\n      interval: 2000\n      strategy: recreate\n      reinitializing_timeout: 60000\n  worker:\n    scale: 1\n    start_on_create: true\n  redis:\n    scale: 1\n    start_on_create: true\n  postgres:\n    scale: 1\n    start_on_create: true\n    health_check:\n      response_timeout: 2000\n      healthy_threshold: 2\n      port: 5432\n      unhealthy_threshold: 3\n      initializing_timeout: 60000\n      interval: 2000\n      strategy: recreate\n      reinitializing_timeout: 60000\n```\n先将docker-compose.yml 保存到服务器上，用来初始化db和创建账号\n\n```bash\ndocker-compose run --rm web upgrade\nWould you like to create a user account now? [Y/n]: y\nEmail: anjia0532@gmail.com\nPassword: \nRepeat for confirmation: \nShould this user be a superuser? [y/N]: y\n## 直到输出\nMigrated:\n - sentry\n - sentry.nodestore\n - sentry.search\n - social_auth\n - sentry.tagstore\n - sentry_plugins.hipchat_ac\n - sentry_plugins.jira_ac\nCreating missing DSNs\nCorrecting Group.num_comments counter\n## 并退出\n```\n\n<a name=\"13XYc\"></a>\n#### 配置Sentry\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562504762029-c863b8c3-4b57-4260-b370-e538cce436e7.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=716&size=44203&status=done&width=716)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562504816401-106637ac-f528-4985-bcd1-f5649f00cc18.png#align=left&display=inline&height=712&name=image.png&originHeight=712&originWidth=656&size=148457&status=done&width=656)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562504900957-00a0a900-8276-47cf-b33a-52fe87cdd130.png#align=left&display=inline&height=804&name=image.png&originHeight=804&originWidth=1501&size=130999&status=done&width=1501)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505169347-a858daf1-bd4d-4101-97d5-aa071564a8db.png#align=left&display=inline&height=222&name=image.png&originHeight=222&originWidth=258&size=5513&status=done&width=258)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505136746-68d7b0e7-932e-4aef-be34-12da8cc9bbf7.png#align=left&display=inline&height=575&name=image.png&originHeight=575&originWidth=1029&size=69263&status=done&width=1029)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505216529-4a3b7152-0b37-4014-a9e2-266cff0b72d7.png#align=left&display=inline&height=620&name=image.png&originHeight=620&originWidth=1281&size=95572&status=done&width=1281)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562505244285-e97409c9-7565-4b53-b4da-d669bf2db3ad.png#align=left&display=inline&height=894&name=image.png&originHeight=894&originWidth=1272&size=139045&status=done&width=1272)\n\n<a name=\"jFXcp\"></a>\n## 配置vue\n本文以iview-admin为例\n\n```bash\ngit clone https://gitee.com/anjia/iview-admin.git\ncd iview-admin\n```\n\n<a name=\"e7gJY\"></a>\n### sentry\n注意，网上很多文档，以讹传讹的使用过时的工具，raven-js .从5.x后官方建议使用@sentry/browser和@sentry/integrations\n```bash\nnpm install --save @sentry/integrations\nnpm install --save @sentry/browser\n```\n\n修改 `iview-admin\\src\\main.js` \n\n```javascript\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\nimport iView from 'iview'\nimport i18n from '@/locale'\nimport config from '@/config'\nimport importDirective from '@/directive'\nimport { directive as clickOutside } from 'v-click-outside-x'\nimport installPlugin from '@/plugin'\nimport './index.less'\nimport '@/assets/icons/iconfont.css'\nimport TreeTable from 'tree-table-vue'\nimport VOrgTree from 'v-org-tree'\nimport 'v-org-tree/dist/v-org-tree.css'\nimport * as Sentry from '@sentry/browser';\nimport * as Integrations from '@sentry/integrations';\n// 实际打包时应该不引入mock\n/* eslint-disable */\nif (process.env.NODE_ENV !== 'production') require('@/mock')\n\nVue.use(iView, {\n  i18n: (key, value) => i18n.t(key, value)\n})\nVue.use(TreeTable)\nVue.use(VOrgTree)\n/**\n * @description 注册admin内置插件\n */\ninstallPlugin(Vue)\n/**\n * @description 生产环境关掉提示\n */\nVue.config.productionTip = false\n/**\n * @description 全局注册应用配置\n */\nVue.prototype.$config = config\n/**\n * 注册指令\n */\nimportDirective(Vue)\nVue.directive('clickOutside', clickOutside)\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  i18n,\n  store,\n  render: h => h(App)\n})\n\nSentry.init({\n  dsn: 'https://xxx@xxx.xxx.com/xxx',\n  integrations: [\n    new Integrations.Vue({\n      Vue,\n      attachProps: true,\n    }),\n  ],\n});\n```\n\n```bash\nnpm install\nnpm run dev\n```\n\n打开 [http://localhost:8080/error_store/error_store_page](http://localhost:8080/error_store/error_store_page)<br />分别点击两个按钮，模拟出错<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507067736-b37abeba-06bb-48cf-9421-7229b0250070.png#align=left&display=inline&height=797&name=image.png&originHeight=797&originWidth=913&size=108137&status=done&width=913)<br />打开sentry发现已经有错误上报了，并且对错误进行聚合。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507097119-284acf63-b1df-4004-9027-512dad7b3af3.png#align=left&display=inline&height=464&name=image.png&originHeight=464&originWidth=1783&size=102500&status=done&width=1783)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507211900-c2fcf0a4-2265-43e5-8ed4-d41ce849b37c.png#align=left&display=inline&height=927&name=image.png&originHeight=927&originWidth=1533&size=181472&status=done&width=1533)点开查看详细内容。\n\n如果需要生成source-map ,可以参考官方文档 [https://docs.sentry.io/platforms/javascript/sourcemaps/](https://docs.sentry.io/platforms/javascript/sourcemaps/)\n\n<a name=\"cwyoX\"></a>\n### matomo\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562507978926-cd3d0612-a601-4294-bd27-afe1aa95e76f.png#align=left&display=inline&height=615&name=image.png&originHeight=615&originWidth=1843&size=53616&status=done&width=1843)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508055404-00bd3ea6-b9d9-4911-9d73-84e9b40d3499.png#align=left&display=inline&height=277&name=image.png&originHeight=277&originWidth=1084&size=18426&status=done&width=1084)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508079973-2f10991b-1f19-4403-bc6f-3d62694e0abd.png#align=left&display=inline&height=559&name=image.png&originHeight=559&originWidth=633&size=35279&status=done&width=633)\n\n```bash\nnpm install --save vue-matomo\n```\n修改 `iview-admin\\src\\main.js` \n\n```javascript\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\nimport iView from 'iview'\nimport i18n from '@/locale'\nimport config from '@/config'\nimport importDirective from '@/directive'\nimport { directive as clickOutside } from 'v-click-outside-x'\nimport installPlugin from '@/plugin'\nimport './index.less'\nimport '@/assets/icons/iconfont.css'\nimport TreeTable from 'tree-table-vue'\nimport VOrgTree from 'v-org-tree'\nimport 'v-org-tree/dist/v-org-tree.css'\nimport * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\nimport VueMatomo from 'vue-matomo'\n\n// 实际打包时应该不引入mock\n/* eslint-disable */\nif (process.env.NODE_ENV !== 'production') require('@/mock')\n\nVue.use(iView, {\n  i18n: (key, value) => i18n.t(key, value)\n})\nVue.use(TreeTable)\nVue.use(VOrgTree)\n/**\n * @description 注册admin内置插件\n */\ninstallPlugin(Vue)\n/**\n * @description 生产环境关掉提示\n */\nVue.config.productionTip = false\n/**\n * @description 全局注册应用配置\n */\nVue.prototype.$config = config\n/**\n * 注册指令\n */\nimportDirective(Vue)\nVue.directive('clickOutside', clickOutside)\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  i18n,\n  store,\n  render: h => h(App)\n})\n\nSentry.init({\n  dsn: 'https://xxx@xxx.xxx.com/xxx',\n  integrations: [\n    new Integrations.Vue({\n      Vue,\n      attachProps: true,\n    }),\n  ],\n});\nVue.use(VueMatomo, {\n  // Configure your matomo server and site by providing\n  host: '//xxxx.xxxx.com/',\n  siteId: xx,\n \n  // Changes the default .js and .php endpoint's filename\n  // Default: 'piwik'\n  trackerFileName: 'matomo.js',\n \n  // Overrides the autogenerated tracker endpoint entirely\n  // Default: undefined\n  trackerUrl: '//xxxx.xxxx.com/matomo.php',\n \n  // Enables automatically registering pageviews on the router\n  router: router,\n \n  // Enables link tracking on regular links. Note that this won't\n  // work for routing links (ie. internal Vue router links)\n  // Default: true\n  enableLinkTracking: true,\n \n  // Require consent before sending tracking information to matomo\n  // Default: false\n  requireConsent: false,\n \n  // Whether to track the initial page view\n  // Default: true\n  trackInitialView: true,\n \n  // Whether or not to log debug information\n  // Default: false\n  debug: false\n});\n \n \n// or\nwindow._paq.push\n \n// or through\nwindow.Piwik.getTracker\n```\n\n打开 http://localhost:8080, 随便访问几个菜单,然后打开matomo<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508801909-af15cc0f-180a-4cfc-86ec-768bfd892d67.png#align=left&display=inline&height=515&name=image.png&originHeight=515&originWidth=880&size=45838&status=done&width=880)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508853543-f7592d90-ff5e-4f58-974a-e1f37b230e2c.png#align=left&display=inline&height=727&name=image.png&originHeight=727&originWidth=1416&size=69029&status=done&width=1416)<br />路由已经有数据了<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1562508892758-378acda5-d8ee-44a1-81f9-7ac7933da610.png#align=left&display=inline&height=749&name=image.png&originHeight=749&originWidth=1553&size=122920&status=done&width=1553)<br />并且将用户的常规数据聚合起来\n\n<a name=\"9yhO5\"></a>\n## 更多\n其实本文只是sentry和matomo简单介绍<br />更深入的使用，比如sentry，推送邮件，文中一带而过的sourcemap，单点登录(集成内部的权限认证)，自定义上报内容(将错误与用户id关联起来)，,敏感数据脱敏等<br />比如matomo, 每日发送分析报表，增加kafka插件，进行更深层次的挖掘，自定义上报内容(购物车等),大数据量情况下的优化，优化用户设备指纹，使用了nginx等反代软件后，如何正确识别真实ip，热力图，A/B test,漏斗图等\n<a name=\"ND8RQ\"></a>\n## 参考资料\n\n- [我的个人博客](https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install)\n- [我的掘金](https://juejin.im/post/5d22013de51d45775a700395)\n- [matomo官网](https://matomo.org/)\n- [INSTALLING MATOMO](https://matomo.org/docs/installation/)\n- [Sentry官网](https://sentry.io)\n- [Installation with Docker](https://docs.sentry.io/server/installation/docker/)\n- [Automatic Updates for GeoIP2 and GeoIP Legacy Databases](https://dev.maxmind.com/geoip/geoipupdate/)\n- [vue中如何使用sentry对错误日志进行监控](https://segmentfault.com/a/1190000016309667)\n\n","slug":"sentry-and-matomo-install","published":1,"updated":"2019-08-16T06:11:14.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojkj00hc24doov2p01fz","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第30篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文配合rancher1.6(手头一个测试集群没升级到最新的2.x)讲解如何搭建并配置日志错误上报框架<a href=\"https://sentry.io\" target=\"_blank\" rel=\"noopener\">Sentry</a>及网站统计分析框架<a href=\"https://matomo.org/\" target=\"_blank\" rel=\"noopener\">matomo</a> 的搭建及接入vue(本文以<a href=\"https://github.com/iview/iview-admin\" target=\"_blank\" rel=\"noopener\">iview-admin</a>为例)项目。</p>\n<p><a name=\"3suXa\"></a></p>\n<h2 id=\"背景简述\"><a href=\"#背景简述\" class=\"headerlink\" title=\"背景简述\"></a>背景简述</h2><ul>\n<li>sentry 项目运行过程中，难免出现bug，前端不像后端可以很方便的采集项目日志(比如log4j + elk)，导致每次出问题后还原车祸现场费时费力。另外现在随着vue等兴起，构建项目时打成min.js，无疑又加大了前端定位问题的难度。而sentry是一款专注于错误采集的框架，支持常见的主流语言<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562489039361-12bbbf21-c134-424c-a4ef-24a8d5ed536b.png#align=left&amp;display=inline&amp;height=544&amp;name=image.png&amp;originHeight=544&amp;originWidth=1779&amp;size=112141&amp;status=done&amp;width=1779\" alt=\"image.png\">采集，聚合，并推送错误信息。注意，sentry并不是日志平台(e.g. log4j + elk)，也不是监控平台，sentry专注于项目中的Error信息的采集，聚合，报警。</li>\n<li>matomo 前身Pwiki，是一款开源的web网站分析利器。类似于Google Analytics。具体的特性，参见 <a href=\"https://matomo.org/feature-overview/\" target=\"_blank\" rel=\"noopener\">Premium Web Analytics</a> ，比如绘制页面热力图，录制会话，访问漏斗，A/B Test等(这几样都是收费插件功能)。</li>\n</ul>\n<blockquote>\n<p>注意：本文假设你已经有rancher1.6的环境</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><a name=\"LmUTY\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a name=\"Z2rjL\"></a></p>\n<h3 id=\"matomo\"><a href=\"#matomo\" class=\"headerlink\" title=\"matomo\"></a>matomo</h3><p><a name=\"RXPnQ\"></a></p>\n<h4 id=\"rancher-创建matomo\"><a href=\"#rancher-创建matomo\" class=\"headerlink\" title=\"rancher 创建matomo\"></a>rancher 创建matomo</h4><p>在rancher主机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建必要文件夹</span></span><br><span class=\"line\">mkdir -p /data/matomo/&#123;config,logs,php,maxmind&#125;/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装maxmind ip数据库</span></span><br><span class=\"line\">wget -P /tmp/ https://github.com/maxmind/geoipupdate/releases/download/v4.0.3/geoipupdate_4.0.3_linux_amd64.deb</span><br><span class=\"line\">dpkg -i /tmp/geoipupdate_4.0.3_linux_amd64.deb</span><br><span class=\"line\">mv /etc/GeoIP.conf&#123;,.bak&#125;</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/GeoIP.conf</span><br><span class=\"line\">AccountID 0</span><br><span class=\"line\">LicenseKey 000000000000</span><br><span class=\"line\">EditionIDs GeoLite2-Country GeoLite2-City GeoLite2-ASN</span><br><span class=\"line\">DatabaseDirectory /data/matomo/maxmind</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 下载最新maxmind数据库</span></span><br><span class=\"line\">geoipupdate</span><br><span class=\"line\">ls -lah /data/matomo/maxmind/</span><br><span class=\"line\">总用量 67M</span><br><span class=\"line\">drwxr-xr-x 2 root root 4.0K 7月   7 17:25 .</span><br><span class=\"line\">drwxr-xr-x 6 root root 4.0K 7月   7 17:23 ..</span><br><span class=\"line\">-rw------- 1 root root    0 7月   7 17:25 .geoipupdate.lock</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.3M 7月   7 17:25 GeoLite2-ASN.mmdb</span><br><span class=\"line\">-rw-r--r-- 1 root root  57M 7月   7 17:25 GeoLite2-City.mmdb</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.7M 7月   7 17:25 GeoLite2-Country.mmdb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 定时更新ip数据库</span></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/cron.d/geoipupdate</span><br><span class=\"line\">50 2 * * 4 root /usr/bin/geoipupdate</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置php.ini</span></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /data/matomo/php/php.ini</span><br><span class=\"line\">upload_max_filesize = 128M</span><br><span class=\"line\">post_max_size = 128M</span><br><span class=\"line\">max_execution_time = 200</span><br><span class=\"line\">memory_limit = 256M</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yaml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  matomo:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">matomo:latest</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/config:/var/www/html/config</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/logs:/var/www/html/logs</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/php/php.ini:/usr/local/etc/php/php.ini</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/maxmind/GeoLite2-City.mmdb:/var/www/html/misc/GeoLite2-City.mmdb</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/maxmind/GeoLite2-Country.mmdb:/var/www/html/misc/GeoLite2-Country.mmdb</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/maxmind/GeoLite2-ASN.mmdb:/var/www/html/misc/GeoLite2-ASN.mmdb</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">80</span><span class=\"string\">:80/tcp</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">443</span><span class=\"string\">:443/tcp</span></span><br></pre></td></tr></table></figure></p>\n<p>rancher-compose.yaml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  matomo:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    health_check:</span></span><br><span class=\"line\"><span class=\"attr\">      response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">      unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      initializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      strategy:</span> <span class=\"string\">recreate</span></span><br><span class=\"line\"><span class=\"attr\">      reinitializing_timeout:</span> <span class=\"number\">60000</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562492855584-f8bc4414-c57b-4780-94ee-60f0c42258fb.png#align=left&amp;display=inline&amp;height=588&amp;name=image.png&amp;originHeight=588&amp;originWidth=1884&amp;size=72142&amp;status=done&amp;width=1884\" alt=\"image.png\"></p>\n<p><a name=\"5Sk9s\"></a></p>\n<h4 id=\"配置matomo\"><a href=\"#配置matomo\" class=\"headerlink\" title=\"配置matomo\"></a>配置matomo</h4><p>选择中文<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562474861136-8a51035c-9f3d-45c9-b560-17a8d251f21b.png#align=left&amp;display=inline&amp;height=508&amp;name=image.png&amp;originHeight=508&amp;originWidth=606&amp;size=39934&amp;status=done&amp;width=606\" alt=\"image.png\"><br>系统检查<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562474876102-d3669793-8f7c-4884-a7c8-57c6892b0a63.png#align=left&amp;display=inline&amp;height=602&amp;name=image.png&amp;originHeight=602&amp;originWidth=1361&amp;size=59313&amp;status=done&amp;width=1361\" alt=\"image.png\"><br>配置数据库<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475009264-1585cc06-9880-4eb3-9908-70e78cf9012e.png#align=left&amp;display=inline&amp;height=830&amp;name=image.png&amp;originHeight=830&amp;originWidth=823&amp;size=53486&amp;status=done&amp;width=823\" alt=\"image.png\"><br>自动建表完成<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475051907-56c50bd2-4e8a-4696-9e99-929d43bd60c8.png#align=left&amp;display=inline&amp;height=520&amp;name=image.png&amp;originHeight=520&amp;originWidth=1348&amp;size=46284&amp;status=done&amp;width=1348\" alt=\"image.png\"><br>创建管理员用户(忘记截图了)<br>设置分析网站(可以随便创建，后边再进行修改),注意跟进实际情况修改时区<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475212464-ed37c762-0452-4ae2-9976-c4a90d8eadda.png#align=left&amp;display=inline&amp;height=711&amp;name=image.png&amp;originHeight=711&amp;originWidth=936&amp;size=51354&amp;status=done&amp;width=936\" alt=\"image.png\"><br>复制跟踪代码<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475254242-9a8baee0-dc7e-47ff-a913-cca4bcecf018.png#align=left&amp;display=inline&amp;height=844&amp;name=image.png&amp;originHeight=844&amp;originWidth=1396&amp;size=113598&amp;status=done&amp;width=1396\" alt=\"image.png\"><br>配置matomo<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475288189-d137a11a-cb01-4311-955e-d42788988f21.png#align=left&amp;display=inline&amp;height=843&amp;name=image.png&amp;originHeight=843&amp;originWidth=1172&amp;size=109853&amp;status=done&amp;width=1172\" alt=\"image.png\"><br>登陆<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475319066-c88fd562-3712-4022-a040-f64b1cbbafbe.png#align=left&amp;display=inline&amp;height=668&amp;name=image.png&amp;originHeight=668&amp;originWidth=798&amp;size=26965&amp;status=done&amp;width=798\" alt=\"image.png\"></p>\n<p><a name=\"uErEW\"></a></p>\n<h3 id=\"Sentry\"><a href=\"#Sentry\" class=\"headerlink\" title=\"Sentry\"></a>Sentry</h3><p><a name=\"FH6Ax\"></a></p>\n<h4 id=\"rancher-创建Sentry\"><a href=\"#rancher-创建Sentry\" class=\"headerlink\" title=\"rancher 创建Sentry\"></a>rancher 创建Sentry</h4><p>docker-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  cron:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">sentry:9</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_MEMCACHED_HOST:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_REDIS_HOST:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_POSTGRES_HOST:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_EMAIL_HOST:</span> <span class=\"string\">smtp</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_SECRET_KEY:</span> <span class=\"string\">SENTRY_SECRET_KEY_XXX</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data:/var/lib/sentry/files</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data/config.yml:/etc/sentry/config.yml</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">run</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">cron</span></span><br><span class=\"line\"><span class=\"attr\">  memcached:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">memcached:1.5-alpine</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">sentry:9</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_MEMCACHED_HOST:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_REDIS_HOST:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_POSTGRES_HOST:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_EMAIL_HOST:</span> <span class=\"string\">smtp</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_SECRET_KEY:</span> <span class=\"string\">SENTRY_SECRET_KEY_XXX</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data:/var/lib/sentry/files</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data/config.yml:/etc/sentry/config.yml</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">9000</span><span class=\"string\">:9000/tcp</span></span><br><span class=\"line\"><span class=\"attr\">  worker:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">sentry:9</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_MEMCACHED_HOST:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_REDIS_HOST:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_POSTGRES_HOST:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_EMAIL_HOST:</span> <span class=\"string\">smtp</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_SECRET_KEY:</span> <span class=\"string\">SENTRY_SECRET_KEY_XXX</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data:/var/lib/sentry/files</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data/config.yml:/etc/sentry/config.yml</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">run</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">worker</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">redis:3.2-alpine</span></span><br><span class=\"line\"><span class=\"attr\">  postgres:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">postgres:9.5</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/postgresql/data:/var/lib/postgresql/data</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">5432</span><span class=\"string\">:5432/tcp</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意把  SENTRY_SECRET_KEY 换成 sentry的实际secret key</p>\n</blockquote>\n<p>rancher-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  cron:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  memcached:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    health_check:</span></span><br><span class=\"line\"><span class=\"attr\">      response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">      unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      initializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      strategy:</span> <span class=\"string\">recreate</span></span><br><span class=\"line\"><span class=\"attr\">      reinitializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">  worker:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  postgres:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    health_check:</span></span><br><span class=\"line\"><span class=\"attr\">      response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">      unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      initializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      strategy:</span> <span class=\"string\">recreate</span></span><br><span class=\"line\"><span class=\"attr\">      reinitializing_timeout:</span> <span class=\"number\">60000</span></span><br></pre></td></tr></table></figure></p>\n<p>先将docker-compose.yml 保存到服务器上，用来初始化db和创建账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br><span class=\"line\">Would you like to create a user account now? [Y/n]: y</span><br><span class=\"line\">Email: anjia0532@gmail.com</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Repeat <span class=\"keyword\">for</span> confirmation: </span><br><span class=\"line\">Should this user be a superuser? [y/N]: y</span><br><span class=\"line\"><span class=\"comment\">## 直到输出</span></span><br><span class=\"line\">Migrated:</span><br><span class=\"line\"> - sentry</span><br><span class=\"line\"> - sentry.nodestore</span><br><span class=\"line\"> - sentry.search</span><br><span class=\"line\"> - social_auth</span><br><span class=\"line\"> - sentry.tagstore</span><br><span class=\"line\"> - sentry_plugins.hipchat_ac</span><br><span class=\"line\"> - sentry_plugins.jira_ac</span><br><span class=\"line\">Creating missing DSNs</span><br><span class=\"line\">Correcting Group.num_comments counter</span><br><span class=\"line\"><span class=\"comment\">## 并退出</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"13XYc\"></a></p>\n<h4 id=\"配置Sentry\"><a href=\"#配置Sentry\" class=\"headerlink\" title=\"配置Sentry\"></a>配置Sentry</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562504762029-c863b8c3-4b57-4260-b370-e538cce436e7.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=716&amp;size=44203&amp;status=done&amp;width=716\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562504816401-106637ac-f528-4985-bcd1-f5649f00cc18.png#align=left&amp;display=inline&amp;height=712&amp;name=image.png&amp;originHeight=712&amp;originWidth=656&amp;size=148457&amp;status=done&amp;width=656\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562504900957-00a0a900-8276-47cf-b33a-52fe87cdd130.png#align=left&amp;display=inline&amp;height=804&amp;name=image.png&amp;originHeight=804&amp;originWidth=1501&amp;size=130999&amp;status=done&amp;width=1501\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505169347-a858daf1-bd4d-4101-97d5-aa071564a8db.png#align=left&amp;display=inline&amp;height=222&amp;name=image.png&amp;originHeight=222&amp;originWidth=258&amp;size=5513&amp;status=done&amp;width=258\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505136746-68d7b0e7-932e-4aef-be34-12da8cc9bbf7.png#align=left&amp;display=inline&amp;height=575&amp;name=image.png&amp;originHeight=575&amp;originWidth=1029&amp;size=69263&amp;status=done&amp;width=1029\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505216529-4a3b7152-0b37-4014-a9e2-266cff0b72d7.png#align=left&amp;display=inline&amp;height=620&amp;name=image.png&amp;originHeight=620&amp;originWidth=1281&amp;size=95572&amp;status=done&amp;width=1281\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505244285-e97409c9-7565-4b53-b4da-d669bf2db3ad.png#align=left&amp;display=inline&amp;height=894&amp;name=image.png&amp;originHeight=894&amp;originWidth=1272&amp;size=139045&amp;status=done&amp;width=1272\" alt=\"image.png\"></p>\n<p><a name=\"jFXcp\"></a></p>\n<h2 id=\"配置vue\"><a href=\"#配置vue\" class=\"headerlink\" title=\"配置vue\"></a>配置vue</h2><p>本文以iview-admin为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://gitee.com/anjia/iview-admin.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> iview-admin</span><br></pre></td></tr></table></figure>\n<p><a name=\"e7gJY\"></a></p>\n<h3 id=\"sentry\"><a href=\"#sentry\" class=\"headerlink\" title=\"sentry\"></a>sentry</h3><p>注意，网上很多文档，以讹传讹的使用过时的工具，raven-js .从5.x后官方建议使用@sentry/browser和@sentry/integrations<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save @sentry/integrations</span><br><span class=\"line\">npm install --save @sentry/browser</span><br></pre></td></tr></table></figure></p>\n<p>修改 <code>iview-admin\\src\\main.js</code> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> iView <span class=\"keyword\">from</span> <span class=\"string\">'iview'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> i18n <span class=\"keyword\">from</span> <span class=\"string\">'@/locale'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> importDirective <span class=\"keyword\">from</span> <span class=\"string\">'@/directive'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; directive <span class=\"keyword\">as</span> clickOutside &#125; <span class=\"keyword\">from</span> <span class=\"string\">'v-click-outside-x'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> installPlugin <span class=\"keyword\">from</span> <span class=\"string\">'@/plugin'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.less'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@/assets/icons/iconfont.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TreeTable <span class=\"keyword\">from</span> <span class=\"string\">'tree-table-vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VOrgTree <span class=\"keyword\">from</span> <span class=\"string\">'v-org-tree'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'v-org-tree/dist/v-org-tree.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/integrations'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际打包时应该不引入mock</span></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) <span class=\"built_in\">require</span>(<span class=\"string\">'@/mock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(iView, &#123;</span><br><span class=\"line\">  i18n: <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.use(TreeTable)</span><br><span class=\"line\">Vue.use(VOrgTree)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 注册admin内置插件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">installPlugin(Vue)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 生产环境关掉提示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 全局注册应用配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.prototype.$config = config</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注册指令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">importDirective(Vue)</span><br><span class=\"line\">Vue.directive(<span class=\"string\">'clickOutside'</span>, clickOutside)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">  dsn: <span class=\"string\">'https://xxx@xxx.xxx.com/xxx'</span>,</span><br><span class=\"line\">  integrations: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Integrations.Vue(&#123;</span><br><span class=\"line\">      Vue,</span><br><span class=\"line\">      attachProps: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:8080/error_store/error_store_page\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/error_store/error_store_page</a><br>分别点击两个按钮，模拟出错<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507067736-b37abeba-06bb-48cf-9421-7229b0250070.png#align=left&amp;display=inline&amp;height=797&amp;name=image.png&amp;originHeight=797&amp;originWidth=913&amp;size=108137&amp;status=done&amp;width=913\" alt=\"image.png\"><br>打开sentry发现已经有错误上报了，并且对错误进行聚合。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507097119-284acf63-b1df-4004-9027-512dad7b3af3.png#align=left&amp;display=inline&amp;height=464&amp;name=image.png&amp;originHeight=464&amp;originWidth=1783&amp;size=102500&amp;status=done&amp;width=1783\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507211900-c2fcf0a4-2265-43e5-8ed4-d41ce849b37c.png#align=left&amp;display=inline&amp;height=927&amp;name=image.png&amp;originHeight=927&amp;originWidth=1533&amp;size=181472&amp;status=done&amp;width=1533\" alt=\"image.png\">点开查看详细内容。</p>\n<p>如果需要生成source-map ,可以参考官方文档 <a href=\"https://docs.sentry.io/platforms/javascript/sourcemaps/\" target=\"_blank\" rel=\"noopener\">https://docs.sentry.io/platforms/javascript/sourcemaps/</a></p>\n<p><a name=\"cwyoX\"></a></p>\n<h3 id=\"matomo-1\"><a href=\"#matomo-1\" class=\"headerlink\" title=\"matomo\"></a>matomo</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507978926-cd3d0612-a601-4294-bd27-afe1aa95e76f.png#align=left&amp;display=inline&amp;height=615&amp;name=image.png&amp;originHeight=615&amp;originWidth=1843&amp;size=53616&amp;status=done&amp;width=1843\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508055404-00bd3ea6-b9d9-4911-9d73-84e9b40d3499.png#align=left&amp;display=inline&amp;height=277&amp;name=image.png&amp;originHeight=277&amp;originWidth=1084&amp;size=18426&amp;status=done&amp;width=1084\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508079973-2f10991b-1f19-4403-bc6f-3d62694e0abd.png#align=left&amp;display=inline&amp;height=559&amp;name=image.png&amp;originHeight=559&amp;originWidth=633&amp;size=35279&amp;status=done&amp;width=633\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save vue-matomo</span><br></pre></td></tr></table></figure>\n<p>修改 <code>iview-admin\\src\\main.js</code> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> iView <span class=\"keyword\">from</span> <span class=\"string\">'iview'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> i18n <span class=\"keyword\">from</span> <span class=\"string\">'@/locale'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> importDirective <span class=\"keyword\">from</span> <span class=\"string\">'@/directive'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; directive <span class=\"keyword\">as</span> clickOutside &#125; <span class=\"keyword\">from</span> <span class=\"string\">'v-click-outside-x'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> installPlugin <span class=\"keyword\">from</span> <span class=\"string\">'@/plugin'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.less'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@/assets/icons/iconfont.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TreeTable <span class=\"keyword\">from</span> <span class=\"string\">'tree-table-vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VOrgTree <span class=\"keyword\">from</span> <span class=\"string\">'v-org-tree'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'v-org-tree/dist/v-org-tree.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/browser'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/integrations'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueMatomo <span class=\"keyword\">from</span> <span class=\"string\">'vue-matomo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际打包时应该不引入mock</span></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) <span class=\"built_in\">require</span>(<span class=\"string\">'@/mock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(iView, &#123;</span><br><span class=\"line\">  i18n: <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.use(TreeTable)</span><br><span class=\"line\">Vue.use(VOrgTree)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 注册admin内置插件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">installPlugin(Vue)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 生产环境关掉提示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 全局注册应用配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.prototype.$config = config</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注册指令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">importDirective(Vue)</span><br><span class=\"line\">Vue.directive(<span class=\"string\">'clickOutside'</span>, clickOutside)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">  dsn: <span class=\"string\">'https://xxx@xxx.xxx.com/xxx'</span>,</span><br><span class=\"line\">  integrations: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Integrations.Vue(&#123;</span><br><span class=\"line\">      Vue,</span><br><span class=\"line\">      attachProps: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.use(VueMatomo, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Configure your matomo server and site by providing</span></span><br><span class=\"line\">  host: <span class=\"string\">'//xxxx.xxxx.com/'</span>,</span><br><span class=\"line\">  siteId: xx,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Changes the default .js and .php endpoint's filename</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: 'piwik'</span></span><br><span class=\"line\">  trackerFileName: <span class=\"string\">'matomo.js'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Overrides the autogenerated tracker endpoint entirely</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: undefined</span></span><br><span class=\"line\">  trackerUrl: <span class=\"string\">'//xxxx.xxxx.com/matomo.php'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Enables automatically registering pageviews on the router</span></span><br><span class=\"line\">  router: router,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Enables link tracking on regular links. Note that this won't</span></span><br><span class=\"line\">  <span class=\"comment\">// work for routing links (ie. internal Vue router links)</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">  enableLinkTracking: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Require consent before sending tracking information to matomo</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: false</span></span><br><span class=\"line\">  requireConsent: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Whether to track the initial page view</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">  trackInitialView: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Whether or not to log debug information</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: false</span></span><br><span class=\"line\">  debug: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>._paq.push</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or through</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.Piwik.getTracker</span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>, 随便访问几个菜单,然后打开matomo<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508801909-af15cc0f-180a-4cfc-86ec-768bfd892d67.png#align=left&amp;display=inline&amp;height=515&amp;name=image.png&amp;originHeight=515&amp;originWidth=880&amp;size=45838&amp;status=done&amp;width=880\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508853543-f7592d90-ff5e-4f58-974a-e1f37b230e2c.png#align=left&amp;display=inline&amp;height=727&amp;name=image.png&amp;originHeight=727&amp;originWidth=1416&amp;size=69029&amp;status=done&amp;width=1416\" alt=\"image.png\"><br>路由已经有数据了<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508892758-378acda5-d8ee-44a1-81f9-7ac7933da610.png#align=left&amp;display=inline&amp;height=749&amp;name=image.png&amp;originHeight=749&amp;originWidth=1553&amp;size=122920&amp;status=done&amp;width=1553\" alt=\"image.png\"><br>并且将用户的常规数据聚合起来</p>\n<p><a name=\"9yhO5\"></a></p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>其实本文只是sentry和matomo简单介绍<br>更深入的使用，比如sentry，推送邮件，文中一带而过的sourcemap，单点登录(集成内部的权限认证)，自定义上报内容(将错误与用户id关联起来)，,敏感数据脱敏等<br>比如matomo, 每日发送分析报表，增加kafka插件，进行更深层次的挖掘，自定义上报内容(购物车等),大数据量情况下的优化，优化用户设备指纹，使用了nginx等反代软件后，如何正确识别真实ip，热力图，A/B test,漏斗图等<br><a name=\"ND8RQ\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install\">我的个人博客</a></li>\n<li><a href=\"https://juejin.im/post/5d22013de51d45775a700395\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://matomo.org/\" target=\"_blank\" rel=\"noopener\">matomo官网</a></li>\n<li><a href=\"https://matomo.org/docs/installation/\" target=\"_blank\" rel=\"noopener\">INSTALLING MATOMO</a></li>\n<li><a href=\"https://sentry.io\" target=\"_blank\" rel=\"noopener\">Sentry官网</a></li>\n<li><a href=\"https://docs.sentry.io/server/installation/docker/\" target=\"_blank\" rel=\"noopener\">Installation with Docker</a></li>\n<li><a href=\"https://dev.maxmind.com/geoip/geoipupdate/\" target=\"_blank\" rel=\"noopener\">Automatic Updates for GeoIP2 and GeoIP Legacy Databases</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000016309667\" target=\"_blank\" rel=\"noopener\">vue中如何使用sentry对错误日志进行监控</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第30篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文配合rancher1.6(手头一个测试集群没升级到最新的2.x)讲解如何搭建并配置日志错误上报框架<a href=\"https://sentry.io\" target=\"_blank\" rel=\"noopener\">Sentry</a>及网站统计分析框架<a href=\"https://matomo.org/\" target=\"_blank\" rel=\"noopener\">matomo</a> 的搭建及接入vue(本文以<a href=\"https://github.com/iview/iview-admin\" target=\"_blank\" rel=\"noopener\">iview-admin</a>为例)项目。</p>\n<p><a name=\"3suXa\"></a></p>\n<h2 id=\"背景简述\"><a href=\"#背景简述\" class=\"headerlink\" title=\"背景简述\"></a>背景简述</h2><ul>\n<li>sentry 项目运行过程中，难免出现bug，前端不像后端可以很方便的采集项目日志(比如log4j + elk)，导致每次出问题后还原车祸现场费时费力。另外现在随着vue等兴起，构建项目时打成min.js，无疑又加大了前端定位问题的难度。而sentry是一款专注于错误采集的框架，支持常见的主流语言<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562489039361-12bbbf21-c134-424c-a4ef-24a8d5ed536b.png#align=left&amp;display=inline&amp;height=544&amp;name=image.png&amp;originHeight=544&amp;originWidth=1779&amp;size=112141&amp;status=done&amp;width=1779\" alt=\"image.png\">采集，聚合，并推送错误信息。注意，sentry并不是日志平台(e.g. log4j + elk)，也不是监控平台，sentry专注于项目中的Error信息的采集，聚合，报警。</li>\n<li>matomo 前身Pwiki，是一款开源的web网站分析利器。类似于Google Analytics。具体的特性，参见 <a href=\"https://matomo.org/feature-overview/\" target=\"_blank\" rel=\"noopener\">Premium Web Analytics</a> ，比如绘制页面热力图，录制会话，访问漏斗，A/B Test等(这几样都是收费插件功能)。</li>\n</ul>\n<blockquote>\n<p>注意：本文假设你已经有rancher1.6的环境</p>\n</blockquote>","more":"<p><a name=\"LmUTY\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a name=\"Z2rjL\"></a></p>\n<h3 id=\"matomo\"><a href=\"#matomo\" class=\"headerlink\" title=\"matomo\"></a>matomo</h3><p><a name=\"RXPnQ\"></a></p>\n<h4 id=\"rancher-创建matomo\"><a href=\"#rancher-创建matomo\" class=\"headerlink\" title=\"rancher 创建matomo\"></a>rancher 创建matomo</h4><p>在rancher主机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建必要文件夹</span></span><br><span class=\"line\">mkdir -p /data/matomo/&#123;config,logs,php,maxmind&#125;/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装maxmind ip数据库</span></span><br><span class=\"line\">wget -P /tmp/ https://github.com/maxmind/geoipupdate/releases/download/v4.0.3/geoipupdate_4.0.3_linux_amd64.deb</span><br><span class=\"line\">dpkg -i /tmp/geoipupdate_4.0.3_linux_amd64.deb</span><br><span class=\"line\">mv /etc/GeoIP.conf&#123;,.bak&#125;</span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/GeoIP.conf</span><br><span class=\"line\">AccountID 0</span><br><span class=\"line\">LicenseKey 000000000000</span><br><span class=\"line\">EditionIDs GeoLite2-Country GeoLite2-City GeoLite2-ASN</span><br><span class=\"line\">DatabaseDirectory /data/matomo/maxmind</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 下载最新maxmind数据库</span></span><br><span class=\"line\">geoipupdate</span><br><span class=\"line\">ls -lah /data/matomo/maxmind/</span><br><span class=\"line\">总用量 67M</span><br><span class=\"line\">drwxr-xr-x 2 root root 4.0K 7月   7 17:25 .</span><br><span class=\"line\">drwxr-xr-x 6 root root 4.0K 7月   7 17:23 ..</span><br><span class=\"line\">-rw------- 1 root root    0 7月   7 17:25 .geoipupdate.lock</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.3M 7月   7 17:25 GeoLite2-ASN.mmdb</span><br><span class=\"line\">-rw-r--r-- 1 root root  57M 7月   7 17:25 GeoLite2-City.mmdb</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.7M 7月   7 17:25 GeoLite2-Country.mmdb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 定时更新ip数据库</span></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /etc/cron.d/geoipupdate</span><br><span class=\"line\">50 2 * * 4 root /usr/bin/geoipupdate</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置php.ini</span></span><br><span class=\"line\">cat &lt;&lt; EOF | sudo tee -a /data/matomo/php/php.ini</span><br><span class=\"line\">upload_max_filesize = 128M</span><br><span class=\"line\">post_max_size = 128M</span><br><span class=\"line\">max_execution_time = 200</span><br><span class=\"line\">memory_limit = 256M</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yaml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  matomo:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">matomo:latest</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/config:/var/www/html/config</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/logs:/var/www/html/logs</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/php/php.ini:/usr/local/etc/php/php.ini</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/maxmind/GeoLite2-City.mmdb:/var/www/html/misc/GeoLite2-City.mmdb</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/maxmind/GeoLite2-Country.mmdb:/var/www/html/misc/GeoLite2-Country.mmdb</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/matomo/maxmind/GeoLite2-ASN.mmdb:/var/www/html/misc/GeoLite2-ASN.mmdb</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">80</span><span class=\"string\">:80/tcp</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">443</span><span class=\"string\">:443/tcp</span></span><br></pre></td></tr></table></figure></p>\n<p>rancher-compose.yaml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  matomo:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    health_check:</span></span><br><span class=\"line\"><span class=\"attr\">      response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">      unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      initializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      strategy:</span> <span class=\"string\">recreate</span></span><br><span class=\"line\"><span class=\"attr\">      reinitializing_timeout:</span> <span class=\"number\">60000</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562492855584-f8bc4414-c57b-4780-94ee-60f0c42258fb.png#align=left&amp;display=inline&amp;height=588&amp;name=image.png&amp;originHeight=588&amp;originWidth=1884&amp;size=72142&amp;status=done&amp;width=1884\" alt=\"image.png\"></p>\n<p><a name=\"5Sk9s\"></a></p>\n<h4 id=\"配置matomo\"><a href=\"#配置matomo\" class=\"headerlink\" title=\"配置matomo\"></a>配置matomo</h4><p>选择中文<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562474861136-8a51035c-9f3d-45c9-b560-17a8d251f21b.png#align=left&amp;display=inline&amp;height=508&amp;name=image.png&amp;originHeight=508&amp;originWidth=606&amp;size=39934&amp;status=done&amp;width=606\" alt=\"image.png\"><br>系统检查<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562474876102-d3669793-8f7c-4884-a7c8-57c6892b0a63.png#align=left&amp;display=inline&amp;height=602&amp;name=image.png&amp;originHeight=602&amp;originWidth=1361&amp;size=59313&amp;status=done&amp;width=1361\" alt=\"image.png\"><br>配置数据库<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475009264-1585cc06-9880-4eb3-9908-70e78cf9012e.png#align=left&amp;display=inline&amp;height=830&amp;name=image.png&amp;originHeight=830&amp;originWidth=823&amp;size=53486&amp;status=done&amp;width=823\" alt=\"image.png\"><br>自动建表完成<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475051907-56c50bd2-4e8a-4696-9e99-929d43bd60c8.png#align=left&amp;display=inline&amp;height=520&amp;name=image.png&amp;originHeight=520&amp;originWidth=1348&amp;size=46284&amp;status=done&amp;width=1348\" alt=\"image.png\"><br>创建管理员用户(忘记截图了)<br>设置分析网站(可以随便创建，后边再进行修改),注意跟进实际情况修改时区<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475212464-ed37c762-0452-4ae2-9976-c4a90d8eadda.png#align=left&amp;display=inline&amp;height=711&amp;name=image.png&amp;originHeight=711&amp;originWidth=936&amp;size=51354&amp;status=done&amp;width=936\" alt=\"image.png\"><br>复制跟踪代码<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475254242-9a8baee0-dc7e-47ff-a913-cca4bcecf018.png#align=left&amp;display=inline&amp;height=844&amp;name=image.png&amp;originHeight=844&amp;originWidth=1396&amp;size=113598&amp;status=done&amp;width=1396\" alt=\"image.png\"><br>配置matomo<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475288189-d137a11a-cb01-4311-955e-d42788988f21.png#align=left&amp;display=inline&amp;height=843&amp;name=image.png&amp;originHeight=843&amp;originWidth=1172&amp;size=109853&amp;status=done&amp;width=1172\" alt=\"image.png\"><br>登陆<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562475319066-c88fd562-3712-4022-a040-f64b1cbbafbe.png#align=left&amp;display=inline&amp;height=668&amp;name=image.png&amp;originHeight=668&amp;originWidth=798&amp;size=26965&amp;status=done&amp;width=798\" alt=\"image.png\"></p>\n<p><a name=\"uErEW\"></a></p>\n<h3 id=\"Sentry\"><a href=\"#Sentry\" class=\"headerlink\" title=\"Sentry\"></a>Sentry</h3><p><a name=\"FH6Ax\"></a></p>\n<h4 id=\"rancher-创建Sentry\"><a href=\"#rancher-创建Sentry\" class=\"headerlink\" title=\"rancher 创建Sentry\"></a>rancher 创建Sentry</h4><p>docker-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  cron:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">sentry:9</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_MEMCACHED_HOST:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_REDIS_HOST:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_POSTGRES_HOST:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_EMAIL_HOST:</span> <span class=\"string\">smtp</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_SECRET_KEY:</span> <span class=\"string\">SENTRY_SECRET_KEY_XXX</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data:/var/lib/sentry/files</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data/config.yml:/etc/sentry/config.yml</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">run</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">cron</span></span><br><span class=\"line\"><span class=\"attr\">  memcached:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">memcached:1.5-alpine</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">sentry:9</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_MEMCACHED_HOST:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_REDIS_HOST:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_POSTGRES_HOST:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_EMAIL_HOST:</span> <span class=\"string\">smtp</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_SECRET_KEY:</span> <span class=\"string\">SENTRY_SECRET_KEY_XXX</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data:/var/lib/sentry/files</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data/config.yml:/etc/sentry/config.yml</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">9000</span><span class=\"string\">:9000/tcp</span></span><br><span class=\"line\"><span class=\"attr\">  worker:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">sentry:9</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_MEMCACHED_HOST:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_REDIS_HOST:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_POSTGRES_HOST:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_EMAIL_HOST:</span> <span class=\"string\">smtp</span></span><br><span class=\"line\"><span class=\"attr\">      SENTRY_SECRET_KEY:</span> <span class=\"string\">SENTRY_SECRET_KEY_XXX</span></span><br><span class=\"line\"><span class=\"attr\">    stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data:/var/lib/sentry/files</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/sentry-data/config.yml:/etc/sentry/config.yml</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">run</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">worker</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">redis:3.2-alpine</span></span><br><span class=\"line\"><span class=\"attr\">  postgres:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">postgres:9.5</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/postgresql/data:/var/lib/postgresql/data</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">5432</span><span class=\"string\">:5432/tcp</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意把  SENTRY_SECRET_KEY 换成 sentry的实际secret key</p>\n</blockquote>\n<p>rancher-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  cron:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  memcached:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    health_check:</span></span><br><span class=\"line\"><span class=\"attr\">      response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">      unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      initializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      strategy:</span> <span class=\"string\">recreate</span></span><br><span class=\"line\"><span class=\"attr\">      reinitializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">  worker:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  postgres:</span></span><br><span class=\"line\"><span class=\"attr\">    scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    start_on_create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    health_check:</span></span><br><span class=\"line\"><span class=\"attr\">      response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">      unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      initializing_timeout:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">      strategy:</span> <span class=\"string\">recreate</span></span><br><span class=\"line\"><span class=\"attr\">      reinitializing_timeout:</span> <span class=\"number\">60000</span></span><br></pre></td></tr></table></figure></p>\n<p>先将docker-compose.yml 保存到服务器上，用来初始化db和创建账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br><span class=\"line\">Would you like to create a user account now? [Y/n]: y</span><br><span class=\"line\">Email: anjia0532@gmail.com</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Repeat <span class=\"keyword\">for</span> confirmation: </span><br><span class=\"line\">Should this user be a superuser? [y/N]: y</span><br><span class=\"line\"><span class=\"comment\">## 直到输出</span></span><br><span class=\"line\">Migrated:</span><br><span class=\"line\"> - sentry</span><br><span class=\"line\"> - sentry.nodestore</span><br><span class=\"line\"> - sentry.search</span><br><span class=\"line\"> - social_auth</span><br><span class=\"line\"> - sentry.tagstore</span><br><span class=\"line\"> - sentry_plugins.hipchat_ac</span><br><span class=\"line\"> - sentry_plugins.jira_ac</span><br><span class=\"line\">Creating missing DSNs</span><br><span class=\"line\">Correcting Group.num_comments counter</span><br><span class=\"line\"><span class=\"comment\">## 并退出</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"13XYc\"></a></p>\n<h4 id=\"配置Sentry\"><a href=\"#配置Sentry\" class=\"headerlink\" title=\"配置Sentry\"></a>配置Sentry</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562504762029-c863b8c3-4b57-4260-b370-e538cce436e7.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=716&amp;size=44203&amp;status=done&amp;width=716\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562504816401-106637ac-f528-4985-bcd1-f5649f00cc18.png#align=left&amp;display=inline&amp;height=712&amp;name=image.png&amp;originHeight=712&amp;originWidth=656&amp;size=148457&amp;status=done&amp;width=656\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562504900957-00a0a900-8276-47cf-b33a-52fe87cdd130.png#align=left&amp;display=inline&amp;height=804&amp;name=image.png&amp;originHeight=804&amp;originWidth=1501&amp;size=130999&amp;status=done&amp;width=1501\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505169347-a858daf1-bd4d-4101-97d5-aa071564a8db.png#align=left&amp;display=inline&amp;height=222&amp;name=image.png&amp;originHeight=222&amp;originWidth=258&amp;size=5513&amp;status=done&amp;width=258\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505136746-68d7b0e7-932e-4aef-be34-12da8cc9bbf7.png#align=left&amp;display=inline&amp;height=575&amp;name=image.png&amp;originHeight=575&amp;originWidth=1029&amp;size=69263&amp;status=done&amp;width=1029\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505216529-4a3b7152-0b37-4014-a9e2-266cff0b72d7.png#align=left&amp;display=inline&amp;height=620&amp;name=image.png&amp;originHeight=620&amp;originWidth=1281&amp;size=95572&amp;status=done&amp;width=1281\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562505244285-e97409c9-7565-4b53-b4da-d669bf2db3ad.png#align=left&amp;display=inline&amp;height=894&amp;name=image.png&amp;originHeight=894&amp;originWidth=1272&amp;size=139045&amp;status=done&amp;width=1272\" alt=\"image.png\"></p>\n<p><a name=\"jFXcp\"></a></p>\n<h2 id=\"配置vue\"><a href=\"#配置vue\" class=\"headerlink\" title=\"配置vue\"></a>配置vue</h2><p>本文以iview-admin为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://gitee.com/anjia/iview-admin.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> iview-admin</span><br></pre></td></tr></table></figure>\n<p><a name=\"e7gJY\"></a></p>\n<h3 id=\"sentry\"><a href=\"#sentry\" class=\"headerlink\" title=\"sentry\"></a>sentry</h3><p>注意，网上很多文档，以讹传讹的使用过时的工具，raven-js .从5.x后官方建议使用@sentry/browser和@sentry/integrations<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save @sentry/integrations</span><br><span class=\"line\">npm install --save @sentry/browser</span><br></pre></td></tr></table></figure></p>\n<p>修改 <code>iview-admin\\src\\main.js</code> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> iView <span class=\"keyword\">from</span> <span class=\"string\">'iview'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> i18n <span class=\"keyword\">from</span> <span class=\"string\">'@/locale'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> importDirective <span class=\"keyword\">from</span> <span class=\"string\">'@/directive'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; directive <span class=\"keyword\">as</span> clickOutside &#125; <span class=\"keyword\">from</span> <span class=\"string\">'v-click-outside-x'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> installPlugin <span class=\"keyword\">from</span> <span class=\"string\">'@/plugin'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.less'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@/assets/icons/iconfont.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TreeTable <span class=\"keyword\">from</span> <span class=\"string\">'tree-table-vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VOrgTree <span class=\"keyword\">from</span> <span class=\"string\">'v-org-tree'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'v-org-tree/dist/v-org-tree.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/integrations'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际打包时应该不引入mock</span></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) <span class=\"built_in\">require</span>(<span class=\"string\">'@/mock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(iView, &#123;</span><br><span class=\"line\">  i18n: <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.use(TreeTable)</span><br><span class=\"line\">Vue.use(VOrgTree)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 注册admin内置插件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">installPlugin(Vue)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 生产环境关掉提示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 全局注册应用配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.prototype.$config = config</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注册指令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">importDirective(Vue)</span><br><span class=\"line\">Vue.directive(<span class=\"string\">'clickOutside'</span>, clickOutside)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">  dsn: <span class=\"string\">'https://xxx@xxx.xxx.com/xxx'</span>,</span><br><span class=\"line\">  integrations: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Integrations.Vue(&#123;</span><br><span class=\"line\">      Vue,</span><br><span class=\"line\">      attachProps: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:8080/error_store/error_store_page\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/error_store/error_store_page</a><br>分别点击两个按钮，模拟出错<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507067736-b37abeba-06bb-48cf-9421-7229b0250070.png#align=left&amp;display=inline&amp;height=797&amp;name=image.png&amp;originHeight=797&amp;originWidth=913&amp;size=108137&amp;status=done&amp;width=913\" alt=\"image.png\"><br>打开sentry发现已经有错误上报了，并且对错误进行聚合。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507097119-284acf63-b1df-4004-9027-512dad7b3af3.png#align=left&amp;display=inline&amp;height=464&amp;name=image.png&amp;originHeight=464&amp;originWidth=1783&amp;size=102500&amp;status=done&amp;width=1783\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507211900-c2fcf0a4-2265-43e5-8ed4-d41ce849b37c.png#align=left&amp;display=inline&amp;height=927&amp;name=image.png&amp;originHeight=927&amp;originWidth=1533&amp;size=181472&amp;status=done&amp;width=1533\" alt=\"image.png\">点开查看详细内容。</p>\n<p>如果需要生成source-map ,可以参考官方文档 <a href=\"https://docs.sentry.io/platforms/javascript/sourcemaps/\" target=\"_blank\" rel=\"noopener\">https://docs.sentry.io/platforms/javascript/sourcemaps/</a></p>\n<p><a name=\"cwyoX\"></a></p>\n<h3 id=\"matomo-1\"><a href=\"#matomo-1\" class=\"headerlink\" title=\"matomo\"></a>matomo</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562507978926-cd3d0612-a601-4294-bd27-afe1aa95e76f.png#align=left&amp;display=inline&amp;height=615&amp;name=image.png&amp;originHeight=615&amp;originWidth=1843&amp;size=53616&amp;status=done&amp;width=1843\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508055404-00bd3ea6-b9d9-4911-9d73-84e9b40d3499.png#align=left&amp;display=inline&amp;height=277&amp;name=image.png&amp;originHeight=277&amp;originWidth=1084&amp;size=18426&amp;status=done&amp;width=1084\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508079973-2f10991b-1f19-4403-bc6f-3d62694e0abd.png#align=left&amp;display=inline&amp;height=559&amp;name=image.png&amp;originHeight=559&amp;originWidth=633&amp;size=35279&amp;status=done&amp;width=633\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save vue-matomo</span><br></pre></td></tr></table></figure>\n<p>修改 <code>iview-admin\\src\\main.js</code> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> iView <span class=\"keyword\">from</span> <span class=\"string\">'iview'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> i18n <span class=\"keyword\">from</span> <span class=\"string\">'@/locale'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> importDirective <span class=\"keyword\">from</span> <span class=\"string\">'@/directive'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; directive <span class=\"keyword\">as</span> clickOutside &#125; <span class=\"keyword\">from</span> <span class=\"string\">'v-click-outside-x'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> installPlugin <span class=\"keyword\">from</span> <span class=\"string\">'@/plugin'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.less'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@/assets/icons/iconfont.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TreeTable <span class=\"keyword\">from</span> <span class=\"string\">'tree-table-vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VOrgTree <span class=\"keyword\">from</span> <span class=\"string\">'v-org-tree'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'v-org-tree/dist/v-org-tree.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/browser'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/integrations'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueMatomo <span class=\"keyword\">from</span> <span class=\"string\">'vue-matomo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际打包时应该不引入mock</span></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) <span class=\"built_in\">require</span>(<span class=\"string\">'@/mock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(iView, &#123;</span><br><span class=\"line\">  i18n: <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.use(TreeTable)</span><br><span class=\"line\">Vue.use(VOrgTree)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 注册admin内置插件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">installPlugin(Vue)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 生产环境关掉提示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 全局注册应用配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Vue.prototype.$config = config</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注册指令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">importDirective(Vue)</span><br><span class=\"line\">Vue.directive(<span class=\"string\">'clickOutside'</span>, clickOutside)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">  dsn: <span class=\"string\">'https://xxx@xxx.xxx.com/xxx'</span>,</span><br><span class=\"line\">  integrations: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Integrations.Vue(&#123;</span><br><span class=\"line\">      Vue,</span><br><span class=\"line\">      attachProps: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.use(VueMatomo, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Configure your matomo server and site by providing</span></span><br><span class=\"line\">  host: <span class=\"string\">'//xxxx.xxxx.com/'</span>,</span><br><span class=\"line\">  siteId: xx,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Changes the default .js and .php endpoint's filename</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: 'piwik'</span></span><br><span class=\"line\">  trackerFileName: <span class=\"string\">'matomo.js'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Overrides the autogenerated tracker endpoint entirely</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: undefined</span></span><br><span class=\"line\">  trackerUrl: <span class=\"string\">'//xxxx.xxxx.com/matomo.php'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Enables automatically registering pageviews on the router</span></span><br><span class=\"line\">  router: router,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Enables link tracking on regular links. Note that this won't</span></span><br><span class=\"line\">  <span class=\"comment\">// work for routing links (ie. internal Vue router links)</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">  enableLinkTracking: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Require consent before sending tracking information to matomo</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: false</span></span><br><span class=\"line\">  requireConsent: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Whether to track the initial page view</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">  trackInitialView: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// Whether or not to log debug information</span></span><br><span class=\"line\">  <span class=\"comment\">// Default: false</span></span><br><span class=\"line\">  debug: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>._paq.push</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or through</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.Piwik.getTracker</span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>, 随便访问几个菜单,然后打开matomo<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508801909-af15cc0f-180a-4cfc-86ec-768bfd892d67.png#align=left&amp;display=inline&amp;height=515&amp;name=image.png&amp;originHeight=515&amp;originWidth=880&amp;size=45838&amp;status=done&amp;width=880\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508853543-f7592d90-ff5e-4f58-974a-e1f37b230e2c.png#align=left&amp;display=inline&amp;height=727&amp;name=image.png&amp;originHeight=727&amp;originWidth=1416&amp;size=69029&amp;status=done&amp;width=1416\" alt=\"image.png\"><br>路由已经有数据了<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1562508892758-378acda5-d8ee-44a1-81f9-7ac7933da610.png#align=left&amp;display=inline&amp;height=749&amp;name=image.png&amp;originHeight=749&amp;originWidth=1553&amp;size=122920&amp;status=done&amp;width=1553\" alt=\"image.png\"><br>并且将用户的常规数据聚合起来</p>\n<p><a name=\"9yhO5\"></a></p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>其实本文只是sentry和matomo简单介绍<br>更深入的使用，比如sentry，推送邮件，文中一带而过的sourcemap，单点登录(集成内部的权限认证)，自定义上报内容(将错误与用户id关联起来)，,敏感数据脱敏等<br>比如matomo, 每日发送分析报表，增加kafka插件，进行更深层次的挖掘，自定义上报内容(购物车等),大数据量情况下的优化，优化用户设备指纹，使用了nginx等反代软件后，如何正确识别真实ip，热力图，A/B test,漏斗图等<br><a name=\"ND8RQ\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/07/sentry-and-matomo-install\">我的个人博客</a></li>\n<li><a href=\"https://juejin.im/post/5d22013de51d45775a700395\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://matomo.org/\" target=\"_blank\" rel=\"noopener\">matomo官网</a></li>\n<li><a href=\"https://matomo.org/docs/installation/\" target=\"_blank\" rel=\"noopener\">INSTALLING MATOMO</a></li>\n<li><a href=\"https://sentry.io\" target=\"_blank\" rel=\"noopener\">Sentry官网</a></li>\n<li><a href=\"https://docs.sentry.io/server/installation/docker/\" target=\"_blank\" rel=\"noopener\">Installation with Docker</a></li>\n<li><a href=\"https://dev.maxmind.com/geoip/geoipupdate/\" target=\"_blank\" rel=\"noopener\">Automatic Updates for GeoIP2 and GeoIP Legacy Databases</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000016309667\" target=\"_blank\" rel=\"noopener\">vue中如何使用sentry对错误日志进行监控</a></li>\n</ul>"},{"title":"038-拯救大兵瑞恩之Tidb如何在Tikv损坏的情况下恢复","date":"2019-08-01T14:35:41.000Z","_content":"> 这是坚持技术写作计划（含翻译）的第38篇，定个小目标999，每周最少2篇。\n\n\n很喜欢TiDB的设计哲学，比如，数据库就活该要么OLAP，要么OLTP么，为嘛就不能兼顾一下？数据量大了后，就一定要反人类的分库分表么？你当分库分表好玩么？分库一时爽，维护火葬场！\n\n尤其在一些中小型团队里，为了数据分析搞一套hadoop，约等于为了喝牛奶，从牛崽开始养一头奶牛。一路上明坑暗坑不断。\n\n考虑到学习成本，迁移成本(高度兼容MySQL-但不是100%)，运维成本(支持Ansible-团队有ansible运维经验)，使用成本(相比hadoop)，硬件成本(相比hadoop)，收益(不用分开分表，支持olap和oltp，支持分布式事务,支持TiSpark,支持tikv，自带同步工具)等。\n\n好了，疑似广告的一段话说完了，回归正题，介绍是如何悲催的遇上整栋大厦停电，并且恰好tikv文件损坏，以及如何在Tidb各位大佬的远程文字指导下，一步步把心态从删库跑路，转变成说不定还有救，以及，我擦，真救回来的坎坷心路旅程。\n\n因为Tidb之前是别的同事负责，刚接过来不久，对Tidb整个的掌握还很初级。真·面向故障学习！\n\n全文主要是对本次事故的回溯，琐碎细节较多，介意的可以直接看最后。\n\n<!-- more -->\n\n集群环境\n\n| name | ip | service |\n| --- | --- | --- |\n| tikv-1 | 192.168.1.200 | tikv |\n| tikv-2 | 192.168.1.201 | tikv |\n| tikv-3 | 192.168.1.202 | tikv(有坏region) |\n| pd | 192.168.1.203 | pd |\n| tidb | 192.168.1.204 | tidb,monitoring |\n| sn-data-node-1 | 192.168.1.216 | tidb |\n| sn-data-node-2 | 192.168.1.217 | tidb |\n| tikv-4 | 192.168.1.218 | tikv(有坏region) |\n\n\n<a name=\"H7w7e\"></a>\n## 悲催之始\n\n上午coding正嗨，突发性停电<br />来电后 ssh 到 tidb的ansible主控机 `ansible-playbook start.yml` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564644740298-54b52606-d594-4ba7-b98c-0cb6c21137df.png#align=left&display=inline&height=527&name=image.png&originHeight=527&originWidth=1329&size=82800&status=done&width=1329)\n\n事情有点不妙，但是扔不死心的， `stop and start` 一通后，仍是这个结果。事情有点大条。\n\n好在之前偷偷潜伏到TiDB的官方群里，没事就听各位大佬吹水打屁，多少受了点熏陶。撸起袖子，开搞。\n\n<a name=\"TCaY3\"></a>\n## 定位问题\n<a name=\"ckulg\"></a>\n### Round 1 懵逼树上懵逼果\n先看官方文档<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564648950258-956bb3fb-25de-467f-b6cf-82a7df480f49.png#align=left&display=inline&height=604&name=image.png&originHeight=604&originWidth=1261&size=102094&status=done&width=1261)<br />好吧，跟没看区别不大。\n\n既然是tidb起不来，就先看tidb的日志(实际上应该看http://prometheus:9090/targets ，因为不太熟悉，所以走了弯路，为嘛不看grafana,是因为tidb那卡到后，ansible就自动退出了，没有起grafana)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564648871805-b912a3d1-b5bd-456a-9d4c-8e7db9a47678.png#align=left&display=inline&height=558&name=image.png&originHeight=558&originWidth=1206&size=122785&status=done&width=1206)<br />暴露的是连接两个tikv报错，这是前期比较关键的线索，起码有初步排查方向了。<br />另外从日志看到，疑似报空间不足，实际上没意义，在两台tikv执行 `df -i` `df -h` 来看，都很充足。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649022668-c8585d09-5958-4143-8314-05fd56deccb4.png#align=left&display=inline&height=88&name=image.png&originHeight=88&originWidth=1538&size=21191&status=done&width=1538)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649493786-8d8b7428-0cde-447a-a69f-8b4eeeff6f19.png#align=left&display=inline&height=806&name=image.png&originHeight=806&originWidth=556&size=109795&status=done&width=556)<br />群内 @张曾钧@PingCAP 大佬开始介入，并且开始了将近8个小时的细心和耐心的指导，讲真，PingCAP团队是我见过最热心耐心的团队，素未蒙面，但乐于助人[呲牙]\n\n此时，通过看官方文档，尝试性，试了下Prometheus可以打开，<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649685360-a05e8e44-b756-4fdd-ab74-1032893b8820.png#align=left&display=inline&height=522&name=image.png&originHeight=522&originWidth=497&size=38639&status=done&width=497)<br />能看出有两个TiKV down掉，正好是上面两个。PS ,我是事后才发现的，当时我一直认为TiKV是起来的[捂脸]<br />插播一下，[TiDB 整体架构](https://pingcap.com/docs-cn/v3.0/architecture/) ，不多解释。建议看看，可以了解一下TiDB的架构原理，比如，TiDB,TiKV,PD等的职责。<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649874173-be2c66cd-022a-446b-bed8-fadd92e8c0fa.png#align=left&display=inline&height=1112&originHeight=1112&originWidth=1996&size=0&status=done&width=1996)\n> 小结： Round 1 以找出两个TiKV down结束，效率低到羞愧。\n\n\n<a name=\"wnRsx\"></a>\n### Round 2 懵逼树前排排坐\n注意，下面如无特殊说明，一律是TiKV关掉状态下，执行命令。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650252340-21759119-1843-4434-867a-9963ea765209.png#align=left&display=inline&height=905&name=image.png&originHeight=905&originWidth=547&size=98917&status=done&width=547)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650290157-89fc6eec-843d-4e59-a186-c45f21487c44.png#align=left&display=inline&height=856&name=image.png&originHeight=856&originWidth=552&size=112176&status=done&width=552)<br />使用@唐刘@PingCAP的方法 `grep -B 50 Welcome` ,开始接触事发原因了。\n> 更多的grep的方法(-A -B -C)，参考 man grep 或者 [GREP(1)](http://man7.org/linux/man-pages/man1/grep.1.html) ，因为tikv启动会打印Welcome，所以有理由认为，每次的Welcome之前的，肯定是上次退出的原因。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650861003-ced69111-e25b-4e7a-91fa-1e07eeead844.png#align=left&display=inline&height=850&name=image.png&originHeight=850&originWidth=1530&size=211744&status=done&width=1530)<br />至此，出现了第一个坏掉的region。<br />当时执行了 `./pd-ctl store -d -u http://127.0.0.1:2379` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651001470-549e9680-0b9f-47dd-9713-3e4833167f6e.png#align=left&display=inline&height=554&name=image.png&originHeight=554&originWidth=1059&size=55248&status=done&width=1059)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650935734-5b346583-f35d-4b50-a788-0bc7840a30d3.png#align=left&display=inline&height=448&name=image.png&originHeight=448&originWidth=399&size=18168&status=done&width=399)<br />找到挂掉的两个TiKV的store id，跟上图的![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651146956-35cba4a9-55f6-4577-b434-264f20faea47.png#align=left&display=inline&height=46&name=image.png&originHeight=46&originWidth=125&size=3516&status=done&width=125) 68935能对起来。\n\n此时救苦救难的  大佬 提供了 [TiKV Control 使用说明#恢复损坏的-mvcc-数据](https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/#恢复损坏的-mvcc-数据)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651249500-2b1a9f82-1b58-4969-8601-1bc01e2402e8.png#align=left&display=inline&height=675&name=image.png&originHeight=675&originWidth=551&size=81077&status=done&width=551)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651219522-f6219985-567d-487c-bafd-71983748cb57.png#align=left&display=inline&height=682&name=image.png&originHeight=682&originWidth=1248&size=108238&status=done&width=1248)<br />实际上执行后，没啥效果，后来发现是因为此region超过一半副本出问题了，recover-mvcc 没法恢复。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652211716-e27ec913-9262-4429-a3bb-9a9043625b65.png#align=left&display=inline&height=49&name=image.png&originHeight=49&originWidth=857&size=7616&status=done&width=857)\n> Round 2 结束，找到了救命稻草，TiKV Control 和PD Control,但是，事情远没这么简单。\n\n\n<a name=\"EyoeN\"></a>\n### Round 3 渐入佳境\n中间出了个差点搞死自己的小插曲<br />`/home/tidb/tidb-ansible/resources/bin/pd-ctl -u \"http://172.16.10.1:2379\" -d store delete 10` 自作聪明的以为，TiKV 已经没救了，执行了store delete 操作。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651626772-b211f752-e5e4-4786-b1bd-0ba2b23557cb.png#align=left&display=inline&height=602&name=image.png&originHeight=602&originWidth=1301&size=92940&status=done&width=1301)<br />但是实际上还有救，所以又变成了，如何把已经delete掉的store，再度挂上去。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651566804-822ec7d1-84f8-41f5-936f-7ed676bd83d0.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=552&size=62399&status=done&width=552)<br />根据  大佬的 `curl -X POST http://${pd_ip}:2379/pd/api/v1/store/${store_id}/state?state=Up` 成功挂上，当然还是down的状态。\n\n根据![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652020901-07018aee-c4fa-49b8-bc3c-fbf3e6c79338.png#align=left&display=inline&height=352&name=image.png&originHeight=352&originWidth=1269&size=68592&status=done&width=1269)<br />`tikv-ctl --db /path/to/tikv/db bad-regions` 两台坏的，分别如下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651955786-839ddeb4-24c4-48ea-ac4c-5388070ad861.png#align=left&display=inline&height=84&name=image.png&originHeight=84&originWidth=1008&size=15053&status=done&width=1008)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652396271-4b1eb843-e26f-49e4-99c3-b69dfb1ca5f3.png#align=left&display=inline&height=53&name=image.png&originHeight=53&originWidth=813&size=9564&status=done&width=813)<br />发现坏掉的 region是 31101（实际上因为用的是2.1.4，每次只显示一个，处理完后，才会显示下一个，效率很低，后来在 [@戚铮](#) 大佬的指导下，换用tikv-ctl 3.x ，每次可以显示全部的坏的region ）<br />在好的节点上执行，也不是文中的all regions are healthy ，实际上是因为，数据文件被占用，没法获取句柄，停掉就行 `ansible-playbook stop.yml  -l tikv_servers` 停掉全部tikv节点<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652278072-088aa64f-abf6-422e-bb3d-8f48911b1bcc.png#align=left&display=inline&height=150&name=image.png&originHeight=150&originWidth=1328&size=26658&status=done&width=1328)\n\n此时@张曾钧@PingCAP 提示用 `tikv-ctl --db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r`   把坏的 region 设置为tombstone ，但是报错<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652514513-9392a0eb-14f1-4db0-9b53-913755ab9c2e.png#align=left&display=inline&height=55&name=image.png&originHeight=55&originWidth=984&size=12889&status=done&width=984)\n\n通过执行 pd-ctl region 31101 发现<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652666941-f219b6a8-177d-49fe-97cd-0c4b598c9b6f.png#align=left&display=inline&height=471&name=image.png&originHeight=471&originWidth=920&size=44057&status=done&width=920)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652692433-3691b53b-baf4-4a07-b48b-04baffb296a5.png#align=left&display=inline&height=252&name=image.png&originHeight=252&originWidth=339&size=8996&status=done&width=339)<br />这个region有两个副本是在坏节点上，超过一半损坏（剧透一下，实际上最后发现，出问题的都是损坏超过1半的，1/3的都自己恢复了）\n\n尝试执行 operator add remove-peer 发现删不掉。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652808996-cc279c2f-ba16-411e-8eb5-c00c43839a64.png#align=left&display=inline&height=501&name=image.png&originHeight=501&originWidth=992&size=89355&status=done&width=992)\n\n此时 戚铮 大佬出场。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652991806-2c3f7356-46a3-4661-8d94-fe002d67e420.png#align=left&display=inline&height=724&name=image.png&originHeight=724&originWidth=530&size=86534&status=done&width=530)<br />经过一番测试，发现 region31101很坚挺，使用 `recover-mvcc`  恢复不了，前面说了是因为损失超过一半副本的原因，使用 `operator add remove-peer` 删不了，估计也是。\n\n<a name=\"zvbGH\"></a>\n### Round 4 貌似解决\n不能因为一颗老鼠屎，坏了一锅汤，部分region坏掉了，先尝试强制恢复试试，保证别的正常吧。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653280296-469366c4-a6ae-47a8-a497-40bd7ce7fa06.png#align=left&display=inline&height=582&name=image.png&originHeight=582&originWidth=1256&size=110748&status=done&width=1256)<br />注意此命令是在好的store上执行<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653489333-def691f2-726e-475c-a4ca-8cd7ee40e793.png#align=left&display=inline&height=45&name=image.png&originHeight=45&originWidth=610&size=6467&status=done&width=610)<br />此时启动TiKV集群，执行region 31101，坏掉的已经删掉了，但是服务还是起不来。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653530458-02c011c8-20fd-4a2f-a05f-8c93515c609f.png#align=left&display=inline&height=495&name=image.png&originHeight=495&originWidth=523&size=27235&status=done&width=523)<br />此时执行 ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653616113-ab0e4831-4813-4e58-b7d5-ee49b9e86b87.png#align=left&display=inline&height=78&name=image.png&originHeight=78&originWidth=1035&size=12329&status=done&width=1035)\n\n此时在 [@戚铮](#) 老大的指导下，升级 tikv-ctl ,<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653856567-a2abc9d6-4f8f-4cf6-bd5f-96fa3a2f6e0a.png#align=left&display=inline&height=695&name=image.png&originHeight=695&originWidth=1322&size=117796&status=done&width=1322)<br />结果202这台，一共三个region坏了，处理了俩，感觉遥遥无期，下了tikv-ctl 3.x后发现，就还有一个坏的。胜利在望。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653924392-b0be58c8-e5f3-4d82-97f7-f5e9e21e6340.png#align=left&display=inline&height=83&name=image.png&originHeight=83&originWidth=682&size=9300&status=done&width=682)\n\n重复上述操作后，此节点终于up了<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653986410-df4091d6-436f-4f1c-ba65-0b86d4012df0.png#align=left&display=inline&height=369&name=image.png&originHeight=369&originWidth=488&size=23247&status=done&width=488)\n\n218这个有6个坏的<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654011573-d22aa7a1-cddd-4e14-9537-31dd02f76212.png#align=left&display=inline&height=154&name=image.png&originHeight=154&originWidth=749&size=20993&status=done&width=749)<br />`unsafe-recover remove-fail-stores`  一通后，终于起来服务了。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654127217-6f3318f9-1f93-4cee-b64f-649125144a59.png#align=left&display=inline&height=783&name=image.png&originHeight=783&originWidth=697&size=76233&status=done&width=697)\n\n> Round 4 服务已可以启动，总结一下\n> 1. 先stop tikv\n> 1. 如果坏的region少于一半，可以尝试 recover-mvcc\n> 1. 如果超过一半，就玄乎了，是在不行就 unsafe-recover remove-fail-stores,然后再 tikv-ctl --db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r 31101,xx,xx,xx \n> 1. 再start tikv\n\n\n<a name=\"58Wno\"></a>\n### Round 5 最终局\n你以为万事大吉了？命运就是爱捉弄人。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654457090-8b4b7bc1-c86b-46f9-bd8c-770334b1581a.png#align=left&display=inline&height=520&name=image.png&originHeight=520&originWidth=549&size=59936&status=done&width=549)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654496584-e2f090a0-2837-4979-9d1e-ba278925441f.png#align=left&display=inline&height=637&name=image.png&originHeight=637&originWidth=1459&size=107875&status=done&width=1459)<br />回到原点。\n\n最后还是损失了部分，但是量不大。\n\n<a name=\"mYLTJ\"></a>\n## 总结\n\n1. 对TiDB不够熟悉，很多流于表面\n1. 对TiDB的文档和工具使用不熟练\n1. TiDB的文档不太清晰，比如在故障处理里，没有内链像是pd-ctl,tikv-ctl，甚至都没有提，在pd-ctl和tikv-ctl等工具没有提如何下载，在工具下载里，没有提包含啥工具。很佛系\n1. 多亏了群内各位大佬的热心指导\n1. 如果是tikv有问题，先stop tikv\n1. 如果对于损坏数小于半数的，可以尝试 recover-mvcc\n1. 对于超过半数的，可以尝试 unsafe-recover remove-fail-stores ，再 将store设置 tombstone\n1. 再start tikv\n1. 可以结合 [tidb损坏tikv节点怎么恢复集群](https://www.cnblogs.com/vansky/p/9415551.html) 来做。\n1. 多试验，尤其是做极限测试，并且尝试处理，会积累很多经验。\n1. 虽然没有瑞恩没有全须全尾的拯救回来，但是缺胳膊少腿总好过没命啊。\n\n<a name=\"Gf6U8\"></a>\n## 一点小广告\n其实如果不考虑OLTP的场景，还可以尝试使用clickhouse。这是之前整理的clickhouse的一些文章。\n\n- [031-数据可视化之redash(支持43种数据源)](https://anjia0532.github.io/2019/07/08/redash/)\n- [033-史上最全-mysql迁移到clickhouse的5种办法](https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/)\n- [035-解决streamsets jdbc全量模式数据重复问题](https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode/)\n\n<a name=\"7y7Px\"></a>\n## 参考资料\n\n- [我的博客](http://anjia0532.github.io/2019/08/01/tidb-tikv-bad-regions)\n- [我的掘金](https://juejin.im/post/5d42f942f265da03d60ee060)\n- [failed to write to engine #10596](https://github.com/pingcap/tidb/issues/10596)\n- [使用 TiDB-Ansible 扩容缩容 TiDB 集群](https://pingcap.com/docs-cn/v3.0/how-to/scale/with-ansible/)\n- [TiDB 集群故障诊断](https://pingcap.com/docs-cn/v3.0/how-to/troubleshoot/cluster-setup/)\n- [PD Control 使用说明](https://pingcap.com/docs-cn/v3.0/reference/tools/pd-control/)\n- [TiKV Control 使用说明](https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/)\n- [TiDB 工具下载](https://pingcap.com/docs-cn/v3.0/reference/tools/download/)\n- [tidb损坏tikv节点怎么恢复集群](https://www.cnblogs.com/vansky/p/9415551.html)\n- [Tidb用户案例](https://pingcap.com/cases-cn/)\n\n","source":"_posts/tidb-tikv-bad-regions.md","raw":"\n---\n\ntitle: 038-拯救大兵瑞恩之Tidb如何在Tikv损坏的情况下恢复\n\ndate: 2019-08-01 22:35:41 +0800\n\ntags: [数据库,mysql,database,tidb,tikv,dba]\n\ncategories: 数据库\n\n---\n> 这是坚持技术写作计划（含翻译）的第38篇，定个小目标999，每周最少2篇。\n\n\n很喜欢TiDB的设计哲学，比如，数据库就活该要么OLAP，要么OLTP么，为嘛就不能兼顾一下？数据量大了后，就一定要反人类的分库分表么？你当分库分表好玩么？分库一时爽，维护火葬场！\n\n尤其在一些中小型团队里，为了数据分析搞一套hadoop，约等于为了喝牛奶，从牛崽开始养一头奶牛。一路上明坑暗坑不断。\n\n考虑到学习成本，迁移成本(高度兼容MySQL-但不是100%)，运维成本(支持Ansible-团队有ansible运维经验)，使用成本(相比hadoop)，硬件成本(相比hadoop)，收益(不用分开分表，支持olap和oltp，支持分布式事务,支持TiSpark,支持tikv，自带同步工具)等。\n\n好了，疑似广告的一段话说完了，回归正题，介绍是如何悲催的遇上整栋大厦停电，并且恰好tikv文件损坏，以及如何在Tidb各位大佬的远程文字指导下，一步步把心态从删库跑路，转变成说不定还有救，以及，我擦，真救回来的坎坷心路旅程。\n\n因为Tidb之前是别的同事负责，刚接过来不久，对Tidb整个的掌握还很初级。真·面向故障学习！\n\n全文主要是对本次事故的回溯，琐碎细节较多，介意的可以直接看最后。\n\n<!-- more -->\n\n集群环境\n\n| name | ip | service |\n| --- | --- | --- |\n| tikv-1 | 192.168.1.200 | tikv |\n| tikv-2 | 192.168.1.201 | tikv |\n| tikv-3 | 192.168.1.202 | tikv(有坏region) |\n| pd | 192.168.1.203 | pd |\n| tidb | 192.168.1.204 | tidb,monitoring |\n| sn-data-node-1 | 192.168.1.216 | tidb |\n| sn-data-node-2 | 192.168.1.217 | tidb |\n| tikv-4 | 192.168.1.218 | tikv(有坏region) |\n\n\n<a name=\"H7w7e\"></a>\n## 悲催之始\n\n上午coding正嗨，突发性停电<br />来电后 ssh 到 tidb的ansible主控机 `ansible-playbook start.yml` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564644740298-54b52606-d594-4ba7-b98c-0cb6c21137df.png#align=left&display=inline&height=527&name=image.png&originHeight=527&originWidth=1329&size=82800&status=done&width=1329)\n\n事情有点不妙，但是扔不死心的， `stop and start` 一通后，仍是这个结果。事情有点大条。\n\n好在之前偷偷潜伏到TiDB的官方群里，没事就听各位大佬吹水打屁，多少受了点熏陶。撸起袖子，开搞。\n\n<a name=\"TCaY3\"></a>\n## 定位问题\n<a name=\"ckulg\"></a>\n### Round 1 懵逼树上懵逼果\n先看官方文档<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564648950258-956bb3fb-25de-467f-b6cf-82a7df480f49.png#align=left&display=inline&height=604&name=image.png&originHeight=604&originWidth=1261&size=102094&status=done&width=1261)<br />好吧，跟没看区别不大。\n\n既然是tidb起不来，就先看tidb的日志(实际上应该看http://prometheus:9090/targets ，因为不太熟悉，所以走了弯路，为嘛不看grafana,是因为tidb那卡到后，ansible就自动退出了，没有起grafana)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564648871805-b912a3d1-b5bd-456a-9d4c-8e7db9a47678.png#align=left&display=inline&height=558&name=image.png&originHeight=558&originWidth=1206&size=122785&status=done&width=1206)<br />暴露的是连接两个tikv报错，这是前期比较关键的线索，起码有初步排查方向了。<br />另外从日志看到，疑似报空间不足，实际上没意义，在两台tikv执行 `df -i` `df -h` 来看，都很充足。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649022668-c8585d09-5958-4143-8314-05fd56deccb4.png#align=left&display=inline&height=88&name=image.png&originHeight=88&originWidth=1538&size=21191&status=done&width=1538)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649493786-8d8b7428-0cde-447a-a69f-8b4eeeff6f19.png#align=left&display=inline&height=806&name=image.png&originHeight=806&originWidth=556&size=109795&status=done&width=556)<br />群内 @张曾钧@PingCAP 大佬开始介入，并且开始了将近8个小时的细心和耐心的指导，讲真，PingCAP团队是我见过最热心耐心的团队，素未蒙面，但乐于助人[呲牙]\n\n此时，通过看官方文档，尝试性，试了下Prometheus可以打开，<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649685360-a05e8e44-b756-4fdd-ab74-1032893b8820.png#align=left&display=inline&height=522&name=image.png&originHeight=522&originWidth=497&size=38639&status=done&width=497)<br />能看出有两个TiKV down掉，正好是上面两个。PS ,我是事后才发现的，当时我一直认为TiKV是起来的[捂脸]<br />插播一下，[TiDB 整体架构](https://pingcap.com/docs-cn/v3.0/architecture/) ，不多解释。建议看看，可以了解一下TiDB的架构原理，比如，TiDB,TiKV,PD等的职责。<br />![](https://cdn.nlark.com/yuque/0/2019/png/226273/1564649874173-be2c66cd-022a-446b-bed8-fadd92e8c0fa.png#align=left&display=inline&height=1112&originHeight=1112&originWidth=1996&size=0&status=done&width=1996)\n> 小结： Round 1 以找出两个TiKV down结束，效率低到羞愧。\n\n\n<a name=\"wnRsx\"></a>\n### Round 2 懵逼树前排排坐\n注意，下面如无特殊说明，一律是TiKV关掉状态下，执行命令。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650252340-21759119-1843-4434-867a-9963ea765209.png#align=left&display=inline&height=905&name=image.png&originHeight=905&originWidth=547&size=98917&status=done&width=547)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650290157-89fc6eec-843d-4e59-a186-c45f21487c44.png#align=left&display=inline&height=856&name=image.png&originHeight=856&originWidth=552&size=112176&status=done&width=552)<br />使用@唐刘@PingCAP的方法 `grep -B 50 Welcome` ,开始接触事发原因了。\n> 更多的grep的方法(-A -B -C)，参考 man grep 或者 [GREP(1)](http://man7.org/linux/man-pages/man1/grep.1.html) ，因为tikv启动会打印Welcome，所以有理由认为，每次的Welcome之前的，肯定是上次退出的原因。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650861003-ced69111-e25b-4e7a-91fa-1e07eeead844.png#align=left&display=inline&height=850&name=image.png&originHeight=850&originWidth=1530&size=211744&status=done&width=1530)<br />至此，出现了第一个坏掉的region。<br />当时执行了 `./pd-ctl store -d -u http://127.0.0.1:2379` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651001470-549e9680-0b9f-47dd-9713-3e4833167f6e.png#align=left&display=inline&height=554&name=image.png&originHeight=554&originWidth=1059&size=55248&status=done&width=1059)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564650935734-5b346583-f35d-4b50-a788-0bc7840a30d3.png#align=left&display=inline&height=448&name=image.png&originHeight=448&originWidth=399&size=18168&status=done&width=399)<br />找到挂掉的两个TiKV的store id，跟上图的![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651146956-35cba4a9-55f6-4577-b434-264f20faea47.png#align=left&display=inline&height=46&name=image.png&originHeight=46&originWidth=125&size=3516&status=done&width=125) 68935能对起来。\n\n此时救苦救难的  大佬 提供了 [TiKV Control 使用说明#恢复损坏的-mvcc-数据](https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/#恢复损坏的-mvcc-数据)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651249500-2b1a9f82-1b58-4969-8601-1bc01e2402e8.png#align=left&display=inline&height=675&name=image.png&originHeight=675&originWidth=551&size=81077&status=done&width=551)![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651219522-f6219985-567d-487c-bafd-71983748cb57.png#align=left&display=inline&height=682&name=image.png&originHeight=682&originWidth=1248&size=108238&status=done&width=1248)<br />实际上执行后，没啥效果，后来发现是因为此region超过一半副本出问题了，recover-mvcc 没法恢复。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652211716-e27ec913-9262-4429-a3bb-9a9043625b65.png#align=left&display=inline&height=49&name=image.png&originHeight=49&originWidth=857&size=7616&status=done&width=857)\n> Round 2 结束，找到了救命稻草，TiKV Control 和PD Control,但是，事情远没这么简单。\n\n\n<a name=\"EyoeN\"></a>\n### Round 3 渐入佳境\n中间出了个差点搞死自己的小插曲<br />`/home/tidb/tidb-ansible/resources/bin/pd-ctl -u \"http://172.16.10.1:2379\" -d store delete 10` 自作聪明的以为，TiKV 已经没救了，执行了store delete 操作。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651626772-b211f752-e5e4-4786-b1bd-0ba2b23557cb.png#align=left&display=inline&height=602&name=image.png&originHeight=602&originWidth=1301&size=92940&status=done&width=1301)<br />但是实际上还有救，所以又变成了，如何把已经delete掉的store，再度挂上去。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651566804-822ec7d1-84f8-41f5-936f-7ed676bd83d0.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=552&size=62399&status=done&width=552)<br />根据  大佬的 `curl -X POST http://${pd_ip}:2379/pd/api/v1/store/${store_id}/state?state=Up` 成功挂上，当然还是down的状态。\n\n根据![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652020901-07018aee-c4fa-49b8-bc3c-fbf3e6c79338.png#align=left&display=inline&height=352&name=image.png&originHeight=352&originWidth=1269&size=68592&status=done&width=1269)<br />`tikv-ctl --db /path/to/tikv/db bad-regions` 两台坏的，分别如下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564651955786-839ddeb4-24c4-48ea-ac4c-5388070ad861.png#align=left&display=inline&height=84&name=image.png&originHeight=84&originWidth=1008&size=15053&status=done&width=1008)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652396271-4b1eb843-e26f-49e4-99c3-b69dfb1ca5f3.png#align=left&display=inline&height=53&name=image.png&originHeight=53&originWidth=813&size=9564&status=done&width=813)<br />发现坏掉的 region是 31101（实际上因为用的是2.1.4，每次只显示一个，处理完后，才会显示下一个，效率很低，后来在 [@戚铮](#) 大佬的指导下，换用tikv-ctl 3.x ，每次可以显示全部的坏的region ）<br />在好的节点上执行，也不是文中的all regions are healthy ，实际上是因为，数据文件被占用，没法获取句柄，停掉就行 `ansible-playbook stop.yml  -l tikv_servers` 停掉全部tikv节点<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652278072-088aa64f-abf6-422e-bb3d-8f48911b1bcc.png#align=left&display=inline&height=150&name=image.png&originHeight=150&originWidth=1328&size=26658&status=done&width=1328)\n\n此时@张曾钧@PingCAP 提示用 `tikv-ctl --db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r`   把坏的 region 设置为tombstone ，但是报错<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652514513-9392a0eb-14f1-4db0-9b53-913755ab9c2e.png#align=left&display=inline&height=55&name=image.png&originHeight=55&originWidth=984&size=12889&status=done&width=984)\n\n通过执行 pd-ctl region 31101 发现<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652666941-f219b6a8-177d-49fe-97cd-0c4b598c9b6f.png#align=left&display=inline&height=471&name=image.png&originHeight=471&originWidth=920&size=44057&status=done&width=920)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652692433-3691b53b-baf4-4a07-b48b-04baffb296a5.png#align=left&display=inline&height=252&name=image.png&originHeight=252&originWidth=339&size=8996&status=done&width=339)<br />这个region有两个副本是在坏节点上，超过一半损坏（剧透一下，实际上最后发现，出问题的都是损坏超过1半的，1/3的都自己恢复了）\n\n尝试执行 operator add remove-peer 发现删不掉。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652808996-cc279c2f-ba16-411e-8eb5-c00c43839a64.png#align=left&display=inline&height=501&name=image.png&originHeight=501&originWidth=992&size=89355&status=done&width=992)\n\n此时 戚铮 大佬出场。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564652991806-2c3f7356-46a3-4661-8d94-fe002d67e420.png#align=left&display=inline&height=724&name=image.png&originHeight=724&originWidth=530&size=86534&status=done&width=530)<br />经过一番测试，发现 region31101很坚挺，使用 `recover-mvcc`  恢复不了，前面说了是因为损失超过一半副本的原因，使用 `operator add remove-peer` 删不了，估计也是。\n\n<a name=\"zvbGH\"></a>\n### Round 4 貌似解决\n不能因为一颗老鼠屎，坏了一锅汤，部分region坏掉了，先尝试强制恢复试试，保证别的正常吧。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653280296-469366c4-a6ae-47a8-a497-40bd7ce7fa06.png#align=left&display=inline&height=582&name=image.png&originHeight=582&originWidth=1256&size=110748&status=done&width=1256)<br />注意此命令是在好的store上执行<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653489333-def691f2-726e-475c-a4ca-8cd7ee40e793.png#align=left&display=inline&height=45&name=image.png&originHeight=45&originWidth=610&size=6467&status=done&width=610)<br />此时启动TiKV集群，执行region 31101，坏掉的已经删掉了，但是服务还是起不来。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653530458-02c011c8-20fd-4a2f-a05f-8c93515c609f.png#align=left&display=inline&height=495&name=image.png&originHeight=495&originWidth=523&size=27235&status=done&width=523)<br />此时执行 ![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653616113-ab0e4831-4813-4e58-b7d5-ee49b9e86b87.png#align=left&display=inline&height=78&name=image.png&originHeight=78&originWidth=1035&size=12329&status=done&width=1035)\n\n此时在 [@戚铮](#) 老大的指导下，升级 tikv-ctl ,<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653856567-a2abc9d6-4f8f-4cf6-bd5f-96fa3a2f6e0a.png#align=left&display=inline&height=695&name=image.png&originHeight=695&originWidth=1322&size=117796&status=done&width=1322)<br />结果202这台，一共三个region坏了，处理了俩，感觉遥遥无期，下了tikv-ctl 3.x后发现，就还有一个坏的。胜利在望。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653924392-b0be58c8-e5f3-4d82-97f7-f5e9e21e6340.png#align=left&display=inline&height=83&name=image.png&originHeight=83&originWidth=682&size=9300&status=done&width=682)\n\n重复上述操作后，此节点终于up了<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564653986410-df4091d6-436f-4f1c-ba65-0b86d4012df0.png#align=left&display=inline&height=369&name=image.png&originHeight=369&originWidth=488&size=23247&status=done&width=488)\n\n218这个有6个坏的<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654011573-d22aa7a1-cddd-4e14-9537-31dd02f76212.png#align=left&display=inline&height=154&name=image.png&originHeight=154&originWidth=749&size=20993&status=done&width=749)<br />`unsafe-recover remove-fail-stores`  一通后，终于起来服务了。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654127217-6f3318f9-1f93-4cee-b64f-649125144a59.png#align=left&display=inline&height=783&name=image.png&originHeight=783&originWidth=697&size=76233&status=done&width=697)\n\n> Round 4 服务已可以启动，总结一下\n> 1. 先stop tikv\n> 1. 如果坏的region少于一半，可以尝试 recover-mvcc\n> 1. 如果超过一半，就玄乎了，是在不行就 unsafe-recover remove-fail-stores,然后再 tikv-ctl --db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r 31101,xx,xx,xx \n> 1. 再start tikv\n\n\n<a name=\"58Wno\"></a>\n### Round 5 最终局\n你以为万事大吉了？命运就是爱捉弄人。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654457090-8b4b7bc1-c86b-46f9-bd8c-770334b1581a.png#align=left&display=inline&height=520&name=image.png&originHeight=520&originWidth=549&size=59936&status=done&width=549)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1564654496584-e2f090a0-2837-4979-9d1e-ba278925441f.png#align=left&display=inline&height=637&name=image.png&originHeight=637&originWidth=1459&size=107875&status=done&width=1459)<br />回到原点。\n\n最后还是损失了部分，但是量不大。\n\n<a name=\"mYLTJ\"></a>\n## 总结\n\n1. 对TiDB不够熟悉，很多流于表面\n1. 对TiDB的文档和工具使用不熟练\n1. TiDB的文档不太清晰，比如在故障处理里，没有内链像是pd-ctl,tikv-ctl，甚至都没有提，在pd-ctl和tikv-ctl等工具没有提如何下载，在工具下载里，没有提包含啥工具。很佛系\n1. 多亏了群内各位大佬的热心指导\n1. 如果是tikv有问题，先stop tikv\n1. 如果对于损坏数小于半数的，可以尝试 recover-mvcc\n1. 对于超过半数的，可以尝试 unsafe-recover remove-fail-stores ，再 将store设置 tombstone\n1. 再start tikv\n1. 可以结合 [tidb损坏tikv节点怎么恢复集群](https://www.cnblogs.com/vansky/p/9415551.html) 来做。\n1. 多试验，尤其是做极限测试，并且尝试处理，会积累很多经验。\n1. 虽然没有瑞恩没有全须全尾的拯救回来，但是缺胳膊少腿总好过没命啊。\n\n<a name=\"Gf6U8\"></a>\n## 一点小广告\n其实如果不考虑OLTP的场景，还可以尝试使用clickhouse。这是之前整理的clickhouse的一些文章。\n\n- [031-数据可视化之redash(支持43种数据源)](https://anjia0532.github.io/2019/07/08/redash/)\n- [033-史上最全-mysql迁移到clickhouse的5种办法](https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/)\n- [035-解决streamsets jdbc全量模式数据重复问题](https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode/)\n\n<a name=\"7y7Px\"></a>\n## 参考资料\n\n- [我的博客](http://anjia0532.github.io/2019/08/01/tidb-tikv-bad-regions)\n- [我的掘金](https://juejin.im/post/5d42f942f265da03d60ee060)\n- [failed to write to engine #10596](https://github.com/pingcap/tidb/issues/10596)\n- [使用 TiDB-Ansible 扩容缩容 TiDB 集群](https://pingcap.com/docs-cn/v3.0/how-to/scale/with-ansible/)\n- [TiDB 集群故障诊断](https://pingcap.com/docs-cn/v3.0/how-to/troubleshoot/cluster-setup/)\n- [PD Control 使用说明](https://pingcap.com/docs-cn/v3.0/reference/tools/pd-control/)\n- [TiKV Control 使用说明](https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/)\n- [TiDB 工具下载](https://pingcap.com/docs-cn/v3.0/reference/tools/download/)\n- [tidb损坏tikv节点怎么恢复集群](https://www.cnblogs.com/vansky/p/9415551.html)\n- [Tidb用户案例](https://pingcap.com/cases-cn/)\n\n","slug":"tidb-tikv-bad-regions","published":1,"updated":"2019-08-16T06:11:14.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojkl00hf24do28hmjmla","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第38篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>很喜欢TiDB的设计哲学，比如，数据库就活该要么OLAP，要么OLTP么，为嘛就不能兼顾一下？数据量大了后，就一定要反人类的分库分表么？你当分库分表好玩么？分库一时爽，维护火葬场！</p>\n<p>尤其在一些中小型团队里，为了数据分析搞一套hadoop，约等于为了喝牛奶，从牛崽开始养一头奶牛。一路上明坑暗坑不断。</p>\n<p>考虑到学习成本，迁移成本(高度兼容MySQL-但不是100%)，运维成本(支持Ansible-团队有ansible运维经验)，使用成本(相比hadoop)，硬件成本(相比hadoop)，收益(不用分开分表，支持olap和oltp，支持分布式事务,支持TiSpark,支持tikv，自带同步工具)等。</p>\n<p>好了，疑似广告的一段话说完了，回归正题，介绍是如何悲催的遇上整栋大厦停电，并且恰好tikv文件损坏，以及如何在Tidb各位大佬的远程文字指导下，一步步把心态从删库跑路，转变成说不定还有救，以及，我擦，真救回来的坎坷心路旅程。</p>\n<p>因为Tidb之前是别的同事负责，刚接过来不久，对Tidb整个的掌握还很初级。真·面向故障学习！</p>\n<p>全文主要是对本次事故的回溯，琐碎细节较多，介意的可以直接看最后。</p>\n<a id=\"more\"></a>\n<p>集群环境</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>ip</th>\n<th>service</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tikv-1</td>\n<td>192.168.1.200</td>\n<td>tikv</td>\n</tr>\n<tr>\n<td>tikv-2</td>\n<td>192.168.1.201</td>\n<td>tikv</td>\n</tr>\n<tr>\n<td>tikv-3</td>\n<td>192.168.1.202</td>\n<td>tikv(有坏region)</td>\n</tr>\n<tr>\n<td>pd</td>\n<td>192.168.1.203</td>\n<td>pd</td>\n</tr>\n<tr>\n<td>tidb</td>\n<td>192.168.1.204</td>\n<td>tidb,monitoring</td>\n</tr>\n<tr>\n<td>sn-data-node-1</td>\n<td>192.168.1.216</td>\n<td>tidb</td>\n</tr>\n<tr>\n<td>sn-data-node-2</td>\n<td>192.168.1.217</td>\n<td>tidb</td>\n</tr>\n<tr>\n<td>tikv-4</td>\n<td>192.168.1.218</td>\n<td>tikv(有坏region)</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"H7w7e\"></a></p>\n<h2 id=\"悲催之始\"><a href=\"#悲催之始\" class=\"headerlink\" title=\"悲催之始\"></a>悲催之始</h2><p>上午coding正嗨，突发性停电<br>来电后 ssh 到 tidb的ansible主控机 <code>ansible-playbook start.yml</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564644740298-54b52606-d594-4ba7-b98c-0cb6c21137df.png#align=left&amp;display=inline&amp;height=527&amp;name=image.png&amp;originHeight=527&amp;originWidth=1329&amp;size=82800&amp;status=done&amp;width=1329\" alt=\"image.png\"></p>\n<p>事情有点不妙，但是扔不死心的， <code>stop and start</code> 一通后，仍是这个结果。事情有点大条。</p>\n<p>好在之前偷偷潜伏到TiDB的官方群里，没事就听各位大佬吹水打屁，多少受了点熏陶。撸起袖子，开搞。</p>\n<p><a name=\"TCaY3\"></a></p>\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p><a name=\"ckulg\"></a></p>\n<h3 id=\"Round-1-懵逼树上懵逼果\"><a href=\"#Round-1-懵逼树上懵逼果\" class=\"headerlink\" title=\"Round 1 懵逼树上懵逼果\"></a>Round 1 懵逼树上懵逼果</h3><p>先看官方文档<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564648950258-956bb3fb-25de-467f-b6cf-82a7df480f49.png#align=left&amp;display=inline&amp;height=604&amp;name=image.png&amp;originHeight=604&amp;originWidth=1261&amp;size=102094&amp;status=done&amp;width=1261\" alt=\"image.png\"><br>好吧，跟没看区别不大。</p>\n<p>既然是tidb起不来，就先看tidb的日志(实际上应该看<a href=\"http://prometheus:9090/targets\" target=\"_blank\" rel=\"noopener\">http://prometheus:9090/targets</a> ，因为不太熟悉，所以走了弯路，为嘛不看grafana,是因为tidb那卡到后，ansible就自动退出了，没有起grafana)<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564648871805-b912a3d1-b5bd-456a-9d4c-8e7db9a47678.png#align=left&amp;display=inline&amp;height=558&amp;name=image.png&amp;originHeight=558&amp;originWidth=1206&amp;size=122785&amp;status=done&amp;width=1206\" alt=\"image.png\"><br>暴露的是连接两个tikv报错，这是前期比较关键的线索，起码有初步排查方向了。<br>另外从日志看到，疑似报空间不足，实际上没意义，在两台tikv执行 <code>df -i</code> <code>df -h</code> 来看，都很充足。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649022668-c8585d09-5958-4143-8314-05fd56deccb4.png#align=left&amp;display=inline&amp;height=88&amp;name=image.png&amp;originHeight=88&amp;originWidth=1538&amp;size=21191&amp;status=done&amp;width=1538\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649493786-8d8b7428-0cde-447a-a69f-8b4eeeff6f19.png#align=left&amp;display=inline&amp;height=806&amp;name=image.png&amp;originHeight=806&amp;originWidth=556&amp;size=109795&amp;status=done&amp;width=556\" alt=\"image.png\"><br>群内 @张曾钧@PingCAP 大佬开始介入，并且开始了将近8个小时的细心和耐心的指导，讲真，PingCAP团队是我见过最热心耐心的团队，素未蒙面，但乐于助人[呲牙]</p>\n<p>此时，通过看官方文档，尝试性，试了下Prometheus可以打开，<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649685360-a05e8e44-b756-4fdd-ab74-1032893b8820.png#align=left&amp;display=inline&amp;height=522&amp;name=image.png&amp;originHeight=522&amp;originWidth=497&amp;size=38639&amp;status=done&amp;width=497\" alt=\"image.png\"><br>能看出有两个TiKV down掉，正好是上面两个。PS ,我是事后才发现的，当时我一直认为TiKV是起来的[捂脸]<br>插播一下，<a href=\"https://pingcap.com/docs-cn/v3.0/architecture/\" target=\"_blank\" rel=\"noopener\">TiDB 整体架构</a> ，不多解释。建议看看，可以了解一下TiDB的架构原理，比如，TiDB,TiKV,PD等的职责。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649874173-be2c66cd-022a-446b-bed8-fadd92e8c0fa.png#align=left&amp;display=inline&amp;height=1112&amp;originHeight=1112&amp;originWidth=1996&amp;size=0&amp;status=done&amp;width=1996\" alt=\"\"></p>\n<blockquote>\n<p>小结： Round 1 以找出两个TiKV down结束，效率低到羞愧。</p>\n</blockquote>\n<p><a name=\"wnRsx\"></a></p>\n<h3 id=\"Round-2-懵逼树前排排坐\"><a href=\"#Round-2-懵逼树前排排坐\" class=\"headerlink\" title=\"Round 2 懵逼树前排排坐\"></a>Round 2 懵逼树前排排坐</h3><p>注意，下面如无特殊说明，一律是TiKV关掉状态下，执行命令。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650252340-21759119-1843-4434-867a-9963ea765209.png#align=left&amp;display=inline&amp;height=905&amp;name=image.png&amp;originHeight=905&amp;originWidth=547&amp;size=98917&amp;status=done&amp;width=547\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650290157-89fc6eec-843d-4e59-a186-c45f21487c44.png#align=left&amp;display=inline&amp;height=856&amp;name=image.png&amp;originHeight=856&amp;originWidth=552&amp;size=112176&amp;status=done&amp;width=552\" alt=\"image.png\"><br>使用@唐刘@PingCAP的方法 <code>grep -B 50 Welcome</code> ,开始接触事发原因了。</p>\n<blockquote>\n<p>更多的grep的方法(-A -B -C)，参考 man grep 或者 <a href=\"http://man7.org/linux/man-pages/man1/grep.1.html\" target=\"_blank\" rel=\"noopener\">GREP(1)</a> ，因为tikv启动会打印Welcome，所以有理由认为，每次的Welcome之前的，肯定是上次退出的原因。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650861003-ced69111-e25b-4e7a-91fa-1e07eeead844.png#align=left&amp;display=inline&amp;height=850&amp;name=image.png&amp;originHeight=850&amp;originWidth=1530&amp;size=211744&amp;status=done&amp;width=1530\" alt=\"image.png\"><br>至此，出现了第一个坏掉的region。<br>当时执行了 <code>./pd-ctl store -d -u http://127.0.0.1:2379</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651001470-549e9680-0b9f-47dd-9713-3e4833167f6e.png#align=left&amp;display=inline&amp;height=554&amp;name=image.png&amp;originHeight=554&amp;originWidth=1059&amp;size=55248&amp;status=done&amp;width=1059\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650935734-5b346583-f35d-4b50-a788-0bc7840a30d3.png#align=left&amp;display=inline&amp;height=448&amp;name=image.png&amp;originHeight=448&amp;originWidth=399&amp;size=18168&amp;status=done&amp;width=399\" alt=\"image.png\"><br>找到挂掉的两个TiKV的store id，跟上图的<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651146956-35cba4a9-55f6-4577-b434-264f20faea47.png#align=left&amp;display=inline&amp;height=46&amp;name=image.png&amp;originHeight=46&amp;originWidth=125&amp;size=3516&amp;status=done&amp;width=125\" alt=\"image.png\"> 68935能对起来。</p>\n<p>此时救苦救难的  大佬 提供了 <a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/#恢复损坏的-mvcc-数据\" target=\"_blank\" rel=\"noopener\">TiKV Control 使用说明#恢复损坏的-mvcc-数据</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651249500-2b1a9f82-1b58-4969-8601-1bc01e2402e8.png#align=left&amp;display=inline&amp;height=675&amp;name=image.png&amp;originHeight=675&amp;originWidth=551&amp;size=81077&amp;status=done&amp;width=551\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651219522-f6219985-567d-487c-bafd-71983748cb57.png#align=left&amp;display=inline&amp;height=682&amp;name=image.png&amp;originHeight=682&amp;originWidth=1248&amp;size=108238&amp;status=done&amp;width=1248\" alt=\"image.png\"><br>实际上执行后，没啥效果，后来发现是因为此region超过一半副本出问题了，recover-mvcc 没法恢复。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652211716-e27ec913-9262-4429-a3bb-9a9043625b65.png#align=left&amp;display=inline&amp;height=49&amp;name=image.png&amp;originHeight=49&amp;originWidth=857&amp;size=7616&amp;status=done&amp;width=857\" alt=\"image.png\"></p>\n<blockquote>\n<p>Round 2 结束，找到了救命稻草，TiKV Control 和PD Control,但是，事情远没这么简单。</p>\n</blockquote>\n<p><a name=\"EyoeN\"></a></p>\n<h3 id=\"Round-3-渐入佳境\"><a href=\"#Round-3-渐入佳境\" class=\"headerlink\" title=\"Round 3 渐入佳境\"></a>Round 3 渐入佳境</h3><p>中间出了个差点搞死自己的小插曲<br><code>/home/tidb/tidb-ansible/resources/bin/pd-ctl -u &quot;http://172.16.10.1:2379&quot; -d store delete 10</code> 自作聪明的以为，TiKV 已经没救了，执行了store delete 操作。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651626772-b211f752-e5e4-4786-b1bd-0ba2b23557cb.png#align=left&amp;display=inline&amp;height=602&amp;name=image.png&amp;originHeight=602&amp;originWidth=1301&amp;size=92940&amp;status=done&amp;width=1301\" alt=\"image.png\"><br>但是实际上还有救，所以又变成了，如何把已经delete掉的store，再度挂上去。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651566804-822ec7d1-84f8-41f5-936f-7ed676bd83d0.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=552&amp;size=62399&amp;status=done&amp;width=552\" alt=\"image.png\"><br>根据  大佬的 <code>curl -X POST http://${pd_ip}:2379/pd/api/v1/store/${store_id}/state?state=Up</code> 成功挂上，当然还是down的状态。</p>\n<p>根据<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652020901-07018aee-c4fa-49b8-bc3c-fbf3e6c79338.png#align=left&amp;display=inline&amp;height=352&amp;name=image.png&amp;originHeight=352&amp;originWidth=1269&amp;size=68592&amp;status=done&amp;width=1269\" alt=\"image.png\"><br><code>tikv-ctl --db /path/to/tikv/db bad-regions</code> 两台坏的，分别如下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651955786-839ddeb4-24c4-48ea-ac4c-5388070ad861.png#align=left&amp;display=inline&amp;height=84&amp;name=image.png&amp;originHeight=84&amp;originWidth=1008&amp;size=15053&amp;status=done&amp;width=1008\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652396271-4b1eb843-e26f-49e4-99c3-b69dfb1ca5f3.png#align=left&amp;display=inline&amp;height=53&amp;name=image.png&amp;originHeight=53&amp;originWidth=813&amp;size=9564&amp;status=done&amp;width=813\" alt=\"image.png\"><br>发现坏掉的 region是 31101（实际上因为用的是2.1.4，每次只显示一个，处理完后，才会显示下一个，效率很低，后来在 <a href=\"#\">@戚铮</a> 大佬的指导下，换用tikv-ctl 3.x ，每次可以显示全部的坏的region ）<br>在好的节点上执行，也不是文中的all regions are healthy ，实际上是因为，数据文件被占用，没法获取句柄，停掉就行 <code>ansible-playbook stop.yml  -l tikv_servers</code> 停掉全部tikv节点<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652278072-088aa64f-abf6-422e-bb3d-8f48911b1bcc.png#align=left&amp;display=inline&amp;height=150&amp;name=image.png&amp;originHeight=150&amp;originWidth=1328&amp;size=26658&amp;status=done&amp;width=1328\" alt=\"image.png\"></p>\n<p>此时@张曾钧@PingCAP 提示用 <code>tikv-ctl --db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r</code>   把坏的 region 设置为tombstone ，但是报错<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652514513-9392a0eb-14f1-4db0-9b53-913755ab9c2e.png#align=left&amp;display=inline&amp;height=55&amp;name=image.png&amp;originHeight=55&amp;originWidth=984&amp;size=12889&amp;status=done&amp;width=984\" alt=\"image.png\"></p>\n<p>通过执行 pd-ctl region 31101 发现<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652666941-f219b6a8-177d-49fe-97cd-0c4b598c9b6f.png#align=left&amp;display=inline&amp;height=471&amp;name=image.png&amp;originHeight=471&amp;originWidth=920&amp;size=44057&amp;status=done&amp;width=920\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652692433-3691b53b-baf4-4a07-b48b-04baffb296a5.png#align=left&amp;display=inline&amp;height=252&amp;name=image.png&amp;originHeight=252&amp;originWidth=339&amp;size=8996&amp;status=done&amp;width=339\" alt=\"image.png\"><br>这个region有两个副本是在坏节点上，超过一半损坏（剧透一下，实际上最后发现，出问题的都是损坏超过1半的，1/3的都自己恢复了）</p>\n<p>尝试执行 operator add remove-peer 发现删不掉。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652808996-cc279c2f-ba16-411e-8eb5-c00c43839a64.png#align=left&amp;display=inline&amp;height=501&amp;name=image.png&amp;originHeight=501&amp;originWidth=992&amp;size=89355&amp;status=done&amp;width=992\" alt=\"image.png\"></p>\n<p>此时 戚铮 大佬出场。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652991806-2c3f7356-46a3-4661-8d94-fe002d67e420.png#align=left&amp;display=inline&amp;height=724&amp;name=image.png&amp;originHeight=724&amp;originWidth=530&amp;size=86534&amp;status=done&amp;width=530\" alt=\"image.png\"><br>经过一番测试，发现 region31101很坚挺，使用 <code>recover-mvcc</code>  恢复不了，前面说了是因为损失超过一半副本的原因，使用 <code>operator add remove-peer</code> 删不了，估计也是。</p>\n<p><a name=\"zvbGH\"></a></p>\n<h3 id=\"Round-4-貌似解决\"><a href=\"#Round-4-貌似解决\" class=\"headerlink\" title=\"Round 4 貌似解决\"></a>Round 4 貌似解决</h3><p>不能因为一颗老鼠屎，坏了一锅汤，部分region坏掉了，先尝试强制恢复试试，保证别的正常吧。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653280296-469366c4-a6ae-47a8-a497-40bd7ce7fa06.png#align=left&amp;display=inline&amp;height=582&amp;name=image.png&amp;originHeight=582&amp;originWidth=1256&amp;size=110748&amp;status=done&amp;width=1256\" alt=\"image.png\"><br>注意此命令是在好的store上执行<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653489333-def691f2-726e-475c-a4ca-8cd7ee40e793.png#align=left&amp;display=inline&amp;height=45&amp;name=image.png&amp;originHeight=45&amp;originWidth=610&amp;size=6467&amp;status=done&amp;width=610\" alt=\"image.png\"><br>此时启动TiKV集群，执行region 31101，坏掉的已经删掉了，但是服务还是起不来。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653530458-02c011c8-20fd-4a2f-a05f-8c93515c609f.png#align=left&amp;display=inline&amp;height=495&amp;name=image.png&amp;originHeight=495&amp;originWidth=523&amp;size=27235&amp;status=done&amp;width=523\" alt=\"image.png\"><br>此时执行 <img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653616113-ab0e4831-4813-4e58-b7d5-ee49b9e86b87.png#align=left&amp;display=inline&amp;height=78&amp;name=image.png&amp;originHeight=78&amp;originWidth=1035&amp;size=12329&amp;status=done&amp;width=1035\" alt=\"image.png\"></p>\n<p>此时在 <a href=\"#\">@戚铮</a> 老大的指导下，升级 tikv-ctl ,<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653856567-a2abc9d6-4f8f-4cf6-bd5f-96fa3a2f6e0a.png#align=left&amp;display=inline&amp;height=695&amp;name=image.png&amp;originHeight=695&amp;originWidth=1322&amp;size=117796&amp;status=done&amp;width=1322\" alt=\"image.png\"><br>结果202这台，一共三个region坏了，处理了俩，感觉遥遥无期，下了tikv-ctl 3.x后发现，就还有一个坏的。胜利在望。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653924392-b0be58c8-e5f3-4d82-97f7-f5e9e21e6340.png#align=left&amp;display=inline&amp;height=83&amp;name=image.png&amp;originHeight=83&amp;originWidth=682&amp;size=9300&amp;status=done&amp;width=682\" alt=\"image.png\"></p>\n<p>重复上述操作后，此节点终于up了<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653986410-df4091d6-436f-4f1c-ba65-0b86d4012df0.png#align=left&amp;display=inline&amp;height=369&amp;name=image.png&amp;originHeight=369&amp;originWidth=488&amp;size=23247&amp;status=done&amp;width=488\" alt=\"image.png\"></p>\n<p>218这个有6个坏的<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654011573-d22aa7a1-cddd-4e14-9537-31dd02f76212.png#align=left&amp;display=inline&amp;height=154&amp;name=image.png&amp;originHeight=154&amp;originWidth=749&amp;size=20993&amp;status=done&amp;width=749\" alt=\"image.png\"><br><code>unsafe-recover remove-fail-stores</code>  一通后，终于起来服务了。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654127217-6f3318f9-1f93-4cee-b64f-649125144a59.png#align=left&amp;display=inline&amp;height=783&amp;name=image.png&amp;originHeight=783&amp;originWidth=697&amp;size=76233&amp;status=done&amp;width=697\" alt=\"image.png\"></p>\n<blockquote>\n<p>Round 4 服务已可以启动，总结一下</p>\n<ol>\n<li>先stop tikv</li>\n<li>如果坏的region少于一半，可以尝试 recover-mvcc</li>\n<li>如果超过一半，就玄乎了，是在不行就 unsafe-recover remove-fail-stores,然后再 tikv-ctl –db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r 31101,xx,xx,xx </li>\n<li>再start tikv</li>\n</ol>\n</blockquote>\n<p><a name=\"58Wno\"></a></p>\n<h3 id=\"Round-5-最终局\"><a href=\"#Round-5-最终局\" class=\"headerlink\" title=\"Round 5 最终局\"></a>Round 5 最终局</h3><p>你以为万事大吉了？命运就是爱捉弄人。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654457090-8b4b7bc1-c86b-46f9-bd8c-770334b1581a.png#align=left&amp;display=inline&amp;height=520&amp;name=image.png&amp;originHeight=520&amp;originWidth=549&amp;size=59936&amp;status=done&amp;width=549\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654496584-e2f090a0-2837-4979-9d1e-ba278925441f.png#align=left&amp;display=inline&amp;height=637&amp;name=image.png&amp;originHeight=637&amp;originWidth=1459&amp;size=107875&amp;status=done&amp;width=1459\" alt=\"image.png\"><br>回到原点。</p>\n<p>最后还是损失了部分，但是量不大。</p>\n<p><a name=\"mYLTJ\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>对TiDB不够熟悉，很多流于表面</li>\n<li>对TiDB的文档和工具使用不熟练</li>\n<li>TiDB的文档不太清晰，比如在故障处理里，没有内链像是pd-ctl,tikv-ctl，甚至都没有提，在pd-ctl和tikv-ctl等工具没有提如何下载，在工具下载里，没有提包含啥工具。很佛系</li>\n<li>多亏了群内各位大佬的热心指导</li>\n<li>如果是tikv有问题，先stop tikv</li>\n<li>如果对于损坏数小于半数的，可以尝试 recover-mvcc</li>\n<li>对于超过半数的，可以尝试 unsafe-recover remove-fail-stores ，再 将store设置 tombstone</li>\n<li>再start tikv</li>\n<li>可以结合 <a href=\"https://www.cnblogs.com/vansky/p/9415551.html\" target=\"_blank\" rel=\"noopener\">tidb损坏tikv节点怎么恢复集群</a> 来做。</li>\n<li>多试验，尤其是做极限测试，并且尝试处理，会积累很多经验。</li>\n<li>虽然没有瑞恩没有全须全尾的拯救回来，但是缺胳膊少腿总好过没命啊。</li>\n</ol>\n<p><a name=\"Gf6U8\"></a></p>\n<h2 id=\"一点小广告\"><a href=\"#一点小广告\" class=\"headerlink\" title=\"一点小广告\"></a>一点小广告</h2><p>其实如果不考虑OLTP的场景，还可以尝试使用clickhouse。这是之前整理的clickhouse的一些文章。</p>\n<ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/08/redash/\">031-数据可视化之redash(支持43种数据源)</a></li>\n<li><a href=\"https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/\">033-史上最全-mysql迁移到clickhouse的5种办法</a></li>\n<li><a href=\"https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode/\">035-解决streamsets jdbc全量模式数据重复问题</a></li>\n</ul>\n<p><a name=\"7y7Px\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://anjia0532.github.io/2019/08/01/tidb-tikv-bad-regions\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d42f942f265da03d60ee060\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://github.com/pingcap/tidb/issues/10596\" target=\"_blank\" rel=\"noopener\">failed to write to engine #10596</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/how-to/scale/with-ansible/\" target=\"_blank\" rel=\"noopener\">使用 TiDB-Ansible 扩容缩容 TiDB 集群</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/how-to/troubleshoot/cluster-setup/\" target=\"_blank\" rel=\"noopener\">TiDB 集群故障诊断</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/pd-control/\" target=\"_blank\" rel=\"noopener\">PD Control 使用说明</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/\" target=\"_blank\" rel=\"noopener\">TiKV Control 使用说明</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/download/\" target=\"_blank\" rel=\"noopener\">TiDB 工具下载</a></li>\n<li><a href=\"https://www.cnblogs.com/vansky/p/9415551.html\" target=\"_blank\" rel=\"noopener\">tidb损坏tikv节点怎么恢复集群</a></li>\n<li><a href=\"https://pingcap.com/cases-cn/\" target=\"_blank\" rel=\"noopener\">Tidb用户案例</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第38篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>很喜欢TiDB的设计哲学，比如，数据库就活该要么OLAP，要么OLTP么，为嘛就不能兼顾一下？数据量大了后，就一定要反人类的分库分表么？你当分库分表好玩么？分库一时爽，维护火葬场！</p>\n<p>尤其在一些中小型团队里，为了数据分析搞一套hadoop，约等于为了喝牛奶，从牛崽开始养一头奶牛。一路上明坑暗坑不断。</p>\n<p>考虑到学习成本，迁移成本(高度兼容MySQL-但不是100%)，运维成本(支持Ansible-团队有ansible运维经验)，使用成本(相比hadoop)，硬件成本(相比hadoop)，收益(不用分开分表，支持olap和oltp，支持分布式事务,支持TiSpark,支持tikv，自带同步工具)等。</p>\n<p>好了，疑似广告的一段话说完了，回归正题，介绍是如何悲催的遇上整栋大厦停电，并且恰好tikv文件损坏，以及如何在Tidb各位大佬的远程文字指导下，一步步把心态从删库跑路，转变成说不定还有救，以及，我擦，真救回来的坎坷心路旅程。</p>\n<p>因为Tidb之前是别的同事负责，刚接过来不久，对Tidb整个的掌握还很初级。真·面向故障学习！</p>\n<p>全文主要是对本次事故的回溯，琐碎细节较多，介意的可以直接看最后。</p>","more":"<p>集群环境</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>ip</th>\n<th>service</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tikv-1</td>\n<td>192.168.1.200</td>\n<td>tikv</td>\n</tr>\n<tr>\n<td>tikv-2</td>\n<td>192.168.1.201</td>\n<td>tikv</td>\n</tr>\n<tr>\n<td>tikv-3</td>\n<td>192.168.1.202</td>\n<td>tikv(有坏region)</td>\n</tr>\n<tr>\n<td>pd</td>\n<td>192.168.1.203</td>\n<td>pd</td>\n</tr>\n<tr>\n<td>tidb</td>\n<td>192.168.1.204</td>\n<td>tidb,monitoring</td>\n</tr>\n<tr>\n<td>sn-data-node-1</td>\n<td>192.168.1.216</td>\n<td>tidb</td>\n</tr>\n<tr>\n<td>sn-data-node-2</td>\n<td>192.168.1.217</td>\n<td>tidb</td>\n</tr>\n<tr>\n<td>tikv-4</td>\n<td>192.168.1.218</td>\n<td>tikv(有坏region)</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"H7w7e\"></a></p>\n<h2 id=\"悲催之始\"><a href=\"#悲催之始\" class=\"headerlink\" title=\"悲催之始\"></a>悲催之始</h2><p>上午coding正嗨，突发性停电<br>来电后 ssh 到 tidb的ansible主控机 <code>ansible-playbook start.yml</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564644740298-54b52606-d594-4ba7-b98c-0cb6c21137df.png#align=left&amp;display=inline&amp;height=527&amp;name=image.png&amp;originHeight=527&amp;originWidth=1329&amp;size=82800&amp;status=done&amp;width=1329\" alt=\"image.png\"></p>\n<p>事情有点不妙，但是扔不死心的， <code>stop and start</code> 一通后，仍是这个结果。事情有点大条。</p>\n<p>好在之前偷偷潜伏到TiDB的官方群里，没事就听各位大佬吹水打屁，多少受了点熏陶。撸起袖子，开搞。</p>\n<p><a name=\"TCaY3\"></a></p>\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p><a name=\"ckulg\"></a></p>\n<h3 id=\"Round-1-懵逼树上懵逼果\"><a href=\"#Round-1-懵逼树上懵逼果\" class=\"headerlink\" title=\"Round 1 懵逼树上懵逼果\"></a>Round 1 懵逼树上懵逼果</h3><p>先看官方文档<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564648950258-956bb3fb-25de-467f-b6cf-82a7df480f49.png#align=left&amp;display=inline&amp;height=604&amp;name=image.png&amp;originHeight=604&amp;originWidth=1261&amp;size=102094&amp;status=done&amp;width=1261\" alt=\"image.png\"><br>好吧，跟没看区别不大。</p>\n<p>既然是tidb起不来，就先看tidb的日志(实际上应该看<a href=\"http://prometheus:9090/targets\" target=\"_blank\" rel=\"noopener\">http://prometheus:9090/targets</a> ，因为不太熟悉，所以走了弯路，为嘛不看grafana,是因为tidb那卡到后，ansible就自动退出了，没有起grafana)<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564648871805-b912a3d1-b5bd-456a-9d4c-8e7db9a47678.png#align=left&amp;display=inline&amp;height=558&amp;name=image.png&amp;originHeight=558&amp;originWidth=1206&amp;size=122785&amp;status=done&amp;width=1206\" alt=\"image.png\"><br>暴露的是连接两个tikv报错，这是前期比较关键的线索，起码有初步排查方向了。<br>另外从日志看到，疑似报空间不足，实际上没意义，在两台tikv执行 <code>df -i</code> <code>df -h</code> 来看，都很充足。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649022668-c8585d09-5958-4143-8314-05fd56deccb4.png#align=left&amp;display=inline&amp;height=88&amp;name=image.png&amp;originHeight=88&amp;originWidth=1538&amp;size=21191&amp;status=done&amp;width=1538\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649493786-8d8b7428-0cde-447a-a69f-8b4eeeff6f19.png#align=left&amp;display=inline&amp;height=806&amp;name=image.png&amp;originHeight=806&amp;originWidth=556&amp;size=109795&amp;status=done&amp;width=556\" alt=\"image.png\"><br>群内 @张曾钧@PingCAP 大佬开始介入，并且开始了将近8个小时的细心和耐心的指导，讲真，PingCAP团队是我见过最热心耐心的团队，素未蒙面，但乐于助人[呲牙]</p>\n<p>此时，通过看官方文档，尝试性，试了下Prometheus可以打开，<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649685360-a05e8e44-b756-4fdd-ab74-1032893b8820.png#align=left&amp;display=inline&amp;height=522&amp;name=image.png&amp;originHeight=522&amp;originWidth=497&amp;size=38639&amp;status=done&amp;width=497\" alt=\"image.png\"><br>能看出有两个TiKV down掉，正好是上面两个。PS ,我是事后才发现的，当时我一直认为TiKV是起来的[捂脸]<br>插播一下，<a href=\"https://pingcap.com/docs-cn/v3.0/architecture/\" target=\"_blank\" rel=\"noopener\">TiDB 整体架构</a> ，不多解释。建议看看，可以了解一下TiDB的架构原理，比如，TiDB,TiKV,PD等的职责。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564649874173-be2c66cd-022a-446b-bed8-fadd92e8c0fa.png#align=left&amp;display=inline&amp;height=1112&amp;originHeight=1112&amp;originWidth=1996&amp;size=0&amp;status=done&amp;width=1996\" alt=\"\"></p>\n<blockquote>\n<p>小结： Round 1 以找出两个TiKV down结束，效率低到羞愧。</p>\n</blockquote>\n<p><a name=\"wnRsx\"></a></p>\n<h3 id=\"Round-2-懵逼树前排排坐\"><a href=\"#Round-2-懵逼树前排排坐\" class=\"headerlink\" title=\"Round 2 懵逼树前排排坐\"></a>Round 2 懵逼树前排排坐</h3><p>注意，下面如无特殊说明，一律是TiKV关掉状态下，执行命令。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650252340-21759119-1843-4434-867a-9963ea765209.png#align=left&amp;display=inline&amp;height=905&amp;name=image.png&amp;originHeight=905&amp;originWidth=547&amp;size=98917&amp;status=done&amp;width=547\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650290157-89fc6eec-843d-4e59-a186-c45f21487c44.png#align=left&amp;display=inline&amp;height=856&amp;name=image.png&amp;originHeight=856&amp;originWidth=552&amp;size=112176&amp;status=done&amp;width=552\" alt=\"image.png\"><br>使用@唐刘@PingCAP的方法 <code>grep -B 50 Welcome</code> ,开始接触事发原因了。</p>\n<blockquote>\n<p>更多的grep的方法(-A -B -C)，参考 man grep 或者 <a href=\"http://man7.org/linux/man-pages/man1/grep.1.html\" target=\"_blank\" rel=\"noopener\">GREP(1)</a> ，因为tikv启动会打印Welcome，所以有理由认为，每次的Welcome之前的，肯定是上次退出的原因。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650861003-ced69111-e25b-4e7a-91fa-1e07eeead844.png#align=left&amp;display=inline&amp;height=850&amp;name=image.png&amp;originHeight=850&amp;originWidth=1530&amp;size=211744&amp;status=done&amp;width=1530\" alt=\"image.png\"><br>至此，出现了第一个坏掉的region。<br>当时执行了 <code>./pd-ctl store -d -u http://127.0.0.1:2379</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651001470-549e9680-0b9f-47dd-9713-3e4833167f6e.png#align=left&amp;display=inline&amp;height=554&amp;name=image.png&amp;originHeight=554&amp;originWidth=1059&amp;size=55248&amp;status=done&amp;width=1059\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564650935734-5b346583-f35d-4b50-a788-0bc7840a30d3.png#align=left&amp;display=inline&amp;height=448&amp;name=image.png&amp;originHeight=448&amp;originWidth=399&amp;size=18168&amp;status=done&amp;width=399\" alt=\"image.png\"><br>找到挂掉的两个TiKV的store id，跟上图的<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651146956-35cba4a9-55f6-4577-b434-264f20faea47.png#align=left&amp;display=inline&amp;height=46&amp;name=image.png&amp;originHeight=46&amp;originWidth=125&amp;size=3516&amp;status=done&amp;width=125\" alt=\"image.png\"> 68935能对起来。</p>\n<p>此时救苦救难的  大佬 提供了 <a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/#恢复损坏的-mvcc-数据\" target=\"_blank\" rel=\"noopener\">TiKV Control 使用说明#恢复损坏的-mvcc-数据</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651249500-2b1a9f82-1b58-4969-8601-1bc01e2402e8.png#align=left&amp;display=inline&amp;height=675&amp;name=image.png&amp;originHeight=675&amp;originWidth=551&amp;size=81077&amp;status=done&amp;width=551\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651219522-f6219985-567d-487c-bafd-71983748cb57.png#align=left&amp;display=inline&amp;height=682&amp;name=image.png&amp;originHeight=682&amp;originWidth=1248&amp;size=108238&amp;status=done&amp;width=1248\" alt=\"image.png\"><br>实际上执行后，没啥效果，后来发现是因为此region超过一半副本出问题了，recover-mvcc 没法恢复。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652211716-e27ec913-9262-4429-a3bb-9a9043625b65.png#align=left&amp;display=inline&amp;height=49&amp;name=image.png&amp;originHeight=49&amp;originWidth=857&amp;size=7616&amp;status=done&amp;width=857\" alt=\"image.png\"></p>\n<blockquote>\n<p>Round 2 结束，找到了救命稻草，TiKV Control 和PD Control,但是，事情远没这么简单。</p>\n</blockquote>\n<p><a name=\"EyoeN\"></a></p>\n<h3 id=\"Round-3-渐入佳境\"><a href=\"#Round-3-渐入佳境\" class=\"headerlink\" title=\"Round 3 渐入佳境\"></a>Round 3 渐入佳境</h3><p>中间出了个差点搞死自己的小插曲<br><code>/home/tidb/tidb-ansible/resources/bin/pd-ctl -u &quot;http://172.16.10.1:2379&quot; -d store delete 10</code> 自作聪明的以为，TiKV 已经没救了，执行了store delete 操作。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651626772-b211f752-e5e4-4786-b1bd-0ba2b23557cb.png#align=left&amp;display=inline&amp;height=602&amp;name=image.png&amp;originHeight=602&amp;originWidth=1301&amp;size=92940&amp;status=done&amp;width=1301\" alt=\"image.png\"><br>但是实际上还有救，所以又变成了，如何把已经delete掉的store，再度挂上去。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651566804-822ec7d1-84f8-41f5-936f-7ed676bd83d0.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=552&amp;size=62399&amp;status=done&amp;width=552\" alt=\"image.png\"><br>根据  大佬的 <code>curl -X POST http://${pd_ip}:2379/pd/api/v1/store/${store_id}/state?state=Up</code> 成功挂上，当然还是down的状态。</p>\n<p>根据<img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652020901-07018aee-c4fa-49b8-bc3c-fbf3e6c79338.png#align=left&amp;display=inline&amp;height=352&amp;name=image.png&amp;originHeight=352&amp;originWidth=1269&amp;size=68592&amp;status=done&amp;width=1269\" alt=\"image.png\"><br><code>tikv-ctl --db /path/to/tikv/db bad-regions</code> 两台坏的，分别如下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564651955786-839ddeb4-24c4-48ea-ac4c-5388070ad861.png#align=left&amp;display=inline&amp;height=84&amp;name=image.png&amp;originHeight=84&amp;originWidth=1008&amp;size=15053&amp;status=done&amp;width=1008\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652396271-4b1eb843-e26f-49e4-99c3-b69dfb1ca5f3.png#align=left&amp;display=inline&amp;height=53&amp;name=image.png&amp;originHeight=53&amp;originWidth=813&amp;size=9564&amp;status=done&amp;width=813\" alt=\"image.png\"><br>发现坏掉的 region是 31101（实际上因为用的是2.1.4，每次只显示一个，处理完后，才会显示下一个，效率很低，后来在 <a href=\"#\">@戚铮</a> 大佬的指导下，换用tikv-ctl 3.x ，每次可以显示全部的坏的region ）<br>在好的节点上执行，也不是文中的all regions are healthy ，实际上是因为，数据文件被占用，没法获取句柄，停掉就行 <code>ansible-playbook stop.yml  -l tikv_servers</code> 停掉全部tikv节点<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652278072-088aa64f-abf6-422e-bb3d-8f48911b1bcc.png#align=left&amp;display=inline&amp;height=150&amp;name=image.png&amp;originHeight=150&amp;originWidth=1328&amp;size=26658&amp;status=done&amp;width=1328\" alt=\"image.png\"></p>\n<p>此时@张曾钧@PingCAP 提示用 <code>tikv-ctl --db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r</code>   把坏的 region 设置为tombstone ，但是报错<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652514513-9392a0eb-14f1-4db0-9b53-913755ab9c2e.png#align=left&amp;display=inline&amp;height=55&amp;name=image.png&amp;originHeight=55&amp;originWidth=984&amp;size=12889&amp;status=done&amp;width=984\" alt=\"image.png\"></p>\n<p>通过执行 pd-ctl region 31101 发现<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652666941-f219b6a8-177d-49fe-97cd-0c4b598c9b6f.png#align=left&amp;display=inline&amp;height=471&amp;name=image.png&amp;originHeight=471&amp;originWidth=920&amp;size=44057&amp;status=done&amp;width=920\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652692433-3691b53b-baf4-4a07-b48b-04baffb296a5.png#align=left&amp;display=inline&amp;height=252&amp;name=image.png&amp;originHeight=252&amp;originWidth=339&amp;size=8996&amp;status=done&amp;width=339\" alt=\"image.png\"><br>这个region有两个副本是在坏节点上，超过一半损坏（剧透一下，实际上最后发现，出问题的都是损坏超过1半的，1/3的都自己恢复了）</p>\n<p>尝试执行 operator add remove-peer 发现删不掉。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652808996-cc279c2f-ba16-411e-8eb5-c00c43839a64.png#align=left&amp;display=inline&amp;height=501&amp;name=image.png&amp;originHeight=501&amp;originWidth=992&amp;size=89355&amp;status=done&amp;width=992\" alt=\"image.png\"></p>\n<p>此时 戚铮 大佬出场。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564652991806-2c3f7356-46a3-4661-8d94-fe002d67e420.png#align=left&amp;display=inline&amp;height=724&amp;name=image.png&amp;originHeight=724&amp;originWidth=530&amp;size=86534&amp;status=done&amp;width=530\" alt=\"image.png\"><br>经过一番测试，发现 region31101很坚挺，使用 <code>recover-mvcc</code>  恢复不了，前面说了是因为损失超过一半副本的原因，使用 <code>operator add remove-peer</code> 删不了，估计也是。</p>\n<p><a name=\"zvbGH\"></a></p>\n<h3 id=\"Round-4-貌似解决\"><a href=\"#Round-4-貌似解决\" class=\"headerlink\" title=\"Round 4 貌似解决\"></a>Round 4 貌似解决</h3><p>不能因为一颗老鼠屎，坏了一锅汤，部分region坏掉了，先尝试强制恢复试试，保证别的正常吧。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653280296-469366c4-a6ae-47a8-a497-40bd7ce7fa06.png#align=left&amp;display=inline&amp;height=582&amp;name=image.png&amp;originHeight=582&amp;originWidth=1256&amp;size=110748&amp;status=done&amp;width=1256\" alt=\"image.png\"><br>注意此命令是在好的store上执行<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653489333-def691f2-726e-475c-a4ca-8cd7ee40e793.png#align=left&amp;display=inline&amp;height=45&amp;name=image.png&amp;originHeight=45&amp;originWidth=610&amp;size=6467&amp;status=done&amp;width=610\" alt=\"image.png\"><br>此时启动TiKV集群，执行region 31101，坏掉的已经删掉了，但是服务还是起不来。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653530458-02c011c8-20fd-4a2f-a05f-8c93515c609f.png#align=left&amp;display=inline&amp;height=495&amp;name=image.png&amp;originHeight=495&amp;originWidth=523&amp;size=27235&amp;status=done&amp;width=523\" alt=\"image.png\"><br>此时执行 <img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653616113-ab0e4831-4813-4e58-b7d5-ee49b9e86b87.png#align=left&amp;display=inline&amp;height=78&amp;name=image.png&amp;originHeight=78&amp;originWidth=1035&amp;size=12329&amp;status=done&amp;width=1035\" alt=\"image.png\"></p>\n<p>此时在 <a href=\"#\">@戚铮</a> 老大的指导下，升级 tikv-ctl ,<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653856567-a2abc9d6-4f8f-4cf6-bd5f-96fa3a2f6e0a.png#align=left&amp;display=inline&amp;height=695&amp;name=image.png&amp;originHeight=695&amp;originWidth=1322&amp;size=117796&amp;status=done&amp;width=1322\" alt=\"image.png\"><br>结果202这台，一共三个region坏了，处理了俩，感觉遥遥无期，下了tikv-ctl 3.x后发现，就还有一个坏的。胜利在望。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653924392-b0be58c8-e5f3-4d82-97f7-f5e9e21e6340.png#align=left&amp;display=inline&amp;height=83&amp;name=image.png&amp;originHeight=83&amp;originWidth=682&amp;size=9300&amp;status=done&amp;width=682\" alt=\"image.png\"></p>\n<p>重复上述操作后，此节点终于up了<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564653986410-df4091d6-436f-4f1c-ba65-0b86d4012df0.png#align=left&amp;display=inline&amp;height=369&amp;name=image.png&amp;originHeight=369&amp;originWidth=488&amp;size=23247&amp;status=done&amp;width=488\" alt=\"image.png\"></p>\n<p>218这个有6个坏的<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654011573-d22aa7a1-cddd-4e14-9537-31dd02f76212.png#align=left&amp;display=inline&amp;height=154&amp;name=image.png&amp;originHeight=154&amp;originWidth=749&amp;size=20993&amp;status=done&amp;width=749\" alt=\"image.png\"><br><code>unsafe-recover remove-fail-stores</code>  一通后，终于起来服务了。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654127217-6f3318f9-1f93-4cee-b64f-649125144a59.png#align=left&amp;display=inline&amp;height=783&amp;name=image.png&amp;originHeight=783&amp;originWidth=697&amp;size=76233&amp;status=done&amp;width=697\" alt=\"image.png\"></p>\n<blockquote>\n<p>Round 4 服务已可以启动，总结一下</p>\n<ol>\n<li>先stop tikv</li>\n<li>如果坏的region少于一半，可以尝试 recover-mvcc</li>\n<li>如果超过一半，就玄乎了，是在不行就 unsafe-recover remove-fail-stores,然后再 tikv-ctl –db /path/to/tikv/db tombstone -p 127.0.0.1:2379 -r 31101,xx,xx,xx </li>\n<li>再start tikv</li>\n</ol>\n</blockquote>\n<p><a name=\"58Wno\"></a></p>\n<h3 id=\"Round-5-最终局\"><a href=\"#Round-5-最终局\" class=\"headerlink\" title=\"Round 5 最终局\"></a>Round 5 最终局</h3><p>你以为万事大吉了？命运就是爱捉弄人。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654457090-8b4b7bc1-c86b-46f9-bd8c-770334b1581a.png#align=left&amp;display=inline&amp;height=520&amp;name=image.png&amp;originHeight=520&amp;originWidth=549&amp;size=59936&amp;status=done&amp;width=549\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1564654496584-e2f090a0-2837-4979-9d1e-ba278925441f.png#align=left&amp;display=inline&amp;height=637&amp;name=image.png&amp;originHeight=637&amp;originWidth=1459&amp;size=107875&amp;status=done&amp;width=1459\" alt=\"image.png\"><br>回到原点。</p>\n<p>最后还是损失了部分，但是量不大。</p>\n<p><a name=\"mYLTJ\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>对TiDB不够熟悉，很多流于表面</li>\n<li>对TiDB的文档和工具使用不熟练</li>\n<li>TiDB的文档不太清晰，比如在故障处理里，没有内链像是pd-ctl,tikv-ctl，甚至都没有提，在pd-ctl和tikv-ctl等工具没有提如何下载，在工具下载里，没有提包含啥工具。很佛系</li>\n<li>多亏了群内各位大佬的热心指导</li>\n<li>如果是tikv有问题，先stop tikv</li>\n<li>如果对于损坏数小于半数的，可以尝试 recover-mvcc</li>\n<li>对于超过半数的，可以尝试 unsafe-recover remove-fail-stores ，再 将store设置 tombstone</li>\n<li>再start tikv</li>\n<li>可以结合 <a href=\"https://www.cnblogs.com/vansky/p/9415551.html\" target=\"_blank\" rel=\"noopener\">tidb损坏tikv节点怎么恢复集群</a> 来做。</li>\n<li>多试验，尤其是做极限测试，并且尝试处理，会积累很多经验。</li>\n<li>虽然没有瑞恩没有全须全尾的拯救回来，但是缺胳膊少腿总好过没命啊。</li>\n</ol>\n<p><a name=\"Gf6U8\"></a></p>\n<h2 id=\"一点小广告\"><a href=\"#一点小广告\" class=\"headerlink\" title=\"一点小广告\"></a>一点小广告</h2><p>其实如果不考虑OLTP的场景，还可以尝试使用clickhouse。这是之前整理的clickhouse的一些文章。</p>\n<ul>\n<li><a href=\"https://anjia0532.github.io/2019/07/08/redash/\">031-数据可视化之redash(支持43种数据源)</a></li>\n<li><a href=\"https://anjia0532.github.io/2019/07/17/mysql-to-clickhouse/\">033-史上最全-mysql迁移到clickhouse的5种办法</a></li>\n<li><a href=\"https://anjia0532.github.io/2019/07/22/sdc-jdbc-full-mode/\">035-解决streamsets jdbc全量模式数据重复问题</a></li>\n</ul>\n<p><a name=\"7y7Px\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://anjia0532.github.io/2019/08/01/tidb-tikv-bad-regions\">我的博客</a></li>\n<li><a href=\"https://juejin.im/post/5d42f942f265da03d60ee060\" target=\"_blank\" rel=\"noopener\">我的掘金</a></li>\n<li><a href=\"https://github.com/pingcap/tidb/issues/10596\" target=\"_blank\" rel=\"noopener\">failed to write to engine #10596</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/how-to/scale/with-ansible/\" target=\"_blank\" rel=\"noopener\">使用 TiDB-Ansible 扩容缩容 TiDB 集群</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/how-to/troubleshoot/cluster-setup/\" target=\"_blank\" rel=\"noopener\">TiDB 集群故障诊断</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/pd-control/\" target=\"_blank\" rel=\"noopener\">PD Control 使用说明</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/tikv-control/\" target=\"_blank\" rel=\"noopener\">TiKV Control 使用说明</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/v3.0/reference/tools/download/\" target=\"_blank\" rel=\"noopener\">TiDB 工具下载</a></li>\n<li><a href=\"https://www.cnblogs.com/vansky/p/9415551.html\" target=\"_blank\" rel=\"noopener\">tidb损坏tikv节点怎么恢复集群</a></li>\n<li><a href=\"https://pingcap.com/cases-cn/\" target=\"_blank\" rel=\"noopener\">Tidb用户案例</a></li>\n</ul>"},{"title":"006-Cobbler批量自动化部署CentOS/Ubuntu/Windows","date":"2019-02-22T07:46:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第6篇，定个小目标999，每周最少2篇。\n\n\n本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows\n\n<a name=\"424a2ad8\"></a>\n## 准备\n从阿里镜像站，下载 [CentOS-7-x86_64-Minimal-1810.iso](https://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso) 和 [ubuntu-16.04.5-desktop-amd64.iso](https://mirrors.aliyun.com/ubuntu-releases/releases/releases/16.04.5/ubuntu-16.04.5-desktop-amd64.iso) ，使用VMware创建一台CentOS7的虚拟机。\n\n<a name=\"eb49d426\"></a>\n### 环境初始化\n1.改为阿里源\n\n```bash\n# yum源\n# 备份系统默认源\n[root@localhost ~]# mkdir /etc/yum.repos.d/old && mv /etc/yum.repos.d/C* /etc/yum.repos.d/old/\n[root@localhost ~]# yum clean all\n# 设置阿里yum源\n[root@localhost ~]# curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n[root@localhost ~]# curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\n\n# pip源(2.8.4的bug)\n[root@localhost ~]# mkdir ~/.pip\n[root@localhost ~]# cat > ~/.pip/pip.conf << EOF\n[global]\ntrusted-host=mirrors.aliyun.com\nindex-url=https://mirrors.aliyun.com/pypi/simple/\nEOF\n```\n\n2.配置ssh\n\n默认ssh_config启用了DNS解析，导致每次远程ssh时都特别慢\n```bash\n[root@localhost ~]# sed -i 's%#UseDNS yes%UseDNS no%' /etc/ssh/sshd_config \n[root@localhost ~]# service sshd restart\n```\n~~3.~~[~~配置SElinux~~](https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-selinux)<br />~~如果要在Centos上开启Cobbler的支持，需要用root用户运行 `setsebool` ，注意 `-P` 参数确保重启仍然生效。~~<br />~~同时需要配置SELinux上下文规则(CentOS 7 Minimal默认不安装 `semanage` )，用于提供引导镜像。~~<br />按照红帽的5.4的教程，设置不生效，所以，禁用SELinux\n```bash\n#//.. setsebool -P httpd_can_network_connect true\n#//.. yum provides semanage\n#//.. yum -y install policycoreutils-python.x86_64\n#//.. semanage fcontext -a -t public_content_t \"/var/lib/tftpboot/.*\"\n[root@localhost ~]# sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config  \n[root@localhost ~]# setenforce 0\n```\n4.[配置防火墙](https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables)\n\n```bash\n# TFTP\n[root@localhost ~]# firewall-cmd --zone=public --add-port=69/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=69/udp --permanent\n\n# HTTPD\n[root@localhost ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=443/tcp --permanent\n\n# Cobbler\n[root@localhost ~]# firewall-cmd --zone=public --add-port=25150/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=25150/udp --permanent\n\n# Koan 如果未用到，可以不开放\n[root@localhost ~]# firewall-cmd --zone=public --add-port=25151/tcp --permanent\n\n# samba window安装需要用到samba,否则可以不开放\n[root@localhost ~]# firewall-cmd --zone=public --add-port=139/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=445/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=137/udp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=138/udp --permanent\n\n# 更新防火墙规则\n[root@localhost ~]# firewall-cmd --reload\n\n# 查看所有打开的端口\n[root@localhost ~]# firewall-cmd --zone=public --list-ports\n```\n\n<a name=\"7abcbeda\"></a>\n## 安装Cobbler\n\n<a name=\"5fc688fa\"></a>\n### 安装依赖软件\n\n```bash\n[root@localhost ~]# yum install -y cobbler cobbler-web dhcp tftp-server pykickstart httpd xinetd\n```\n\n<a name=\"9d785a63\"></a>\n### 设置开机自启动\n\n```bash\n[root@localhost ~]# systemctl enable httpd\n[root@localhost ~]# systemctl enable xinetd\n[root@localhost ~]# systemctl enable rsyncd\n[root@localhost ~]# systemctl enable tftp\n[root@localhost ~]# systemctl enable cobblerd\n```\n\n<a name=\"33d81c9d\"></a>\n### 启动服务\n\n```bash\n[root@localhost ~]# systemctl start httpd\n[root@localhost ~]# systemctl start xinetd\n[root@localhost ~]# systemctl start tftp\n[root@localhost ~]# systemctl start cobblerd\n```\n\n<a name=\"239c3f37\"></a>\n### 检查配置\n\n```bash\n[root@localhost ~]# cobbler check\nThe following are potential configuration items that you may want to fix:\n\n1 : The 'server' field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.\n2 : For PXE to be functional, the 'next_server' field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.\n3 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:\n    https://github.com/cobbler/cobbler/wiki/Selinux\n4 : change 'disable' to 'no' in /etc/xinetd.d/tftp\n5 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.\n6 : debmirror package is not installed, it will be required to manage debian deployments and repositories\n7 : The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to 'cobbler' and should be changed, try: \"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'\" to generate new one\n8 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them\n\nRestart cobblerd and then run 'cobbler sync' to apply changes.\n```\n\n1,2：<br />`cobbler_ip` 为cobbler主机ip<br />`next_server` 是dhcp主机ip，但是本实验dhcp和cobbler是一台\n```bash\n[root@localhost ~]# export cobbler_ip=192.168.0.12\n[root@localhost ~]# sed -i \"s%^server: 127.0.0.1%server: ${cobbler_ip}%g\" /etc/cobbler/settings\n[root@localhost ~]# sed -i \"s%^next_server: 127.0.0.1%next_server: ${cobbler_ip}%g\" /etc/cobbler/settings\n```\n\n3： 可以忽略，因为已经配置SELinux和防火墙了\n\n4：开启tftp功能\n```bash\n[root@localhost ~]# sed -i '/disable\\>/s/\\<yes\\>/no/' /etc/xinetd.d/tftp\n```\n\n5：下载bootload\n```bash\n[root@localhost ~]# cobbler get-loaders\n```\n\n6：下载ubuntu本地包镜像（不装ubuntu的，可以不用改）\n```bash\n[root@localhost ~]# yum install -y debmirror\n[root@localhost ~]# sed -i 's%^@dists=\"sid\"%#@dists=\"sid\"%g;s%@arches=\"i386\"%#@arches=\"i386\"%g' /etc/debmirror.conf\n```\n\n7：设置安装系统后的root密码\n```bash\n[root@localhost ~]# export root_pwd=$(openssl passwd -1 -salt `openssl rand 15 -base64` 'Abcd1234!@#$')\n[root@localhost ~]# sed -i \"s%^default_password_crypted.*%default_password_crypted: \\\"${root_pwd}\\\"%g\" /etc/cobbler/settings\n```\n\n8：电源管理模块(非必选)，cman和ence-agents二选一即可,此处忽略\n\n其余修改：\n```bash\n[root@localhost ~]# sed -i \"s%manage_dhcp: 0%manage_dhcp: 1%g\" /etc/cobbler/settings\n[root@localhost ~]# sed -i \"s%pxe_just_once: 0%pxe_just_once: 1%g\" /etc/cobbler/settings\n```\n\n修改dhcp\n\n```bash\n[root@localhost ~]# vi /etc/cobbler/dhcp.template\n\\#仅列出修改过的部分\n\\......\nsubnet 192.168.0.0 netmask 255.255.255.0 {\n     option routers             192.168.0.1;\n     option domain-name-servers 192.168.0.1;\n     option subnet-mask         255.255.255.0;\n     range dynamic-bootp        192.168.0.100 192.168.0.200;\n\\......\n```\n\n重启服务\n\n```bash\n[root@localhost ~]# systemctl restart httpd\n[root@localhost ~]# systemctl restart xinetd\n[root@localhost ~]# systemctl restart tftp\n[root@localhost ~]# systemctl restart cobblerd\n```\n\n再次校验,发现只有两条信息了，忽略即可。\n```bash\n[root@localhost ~]# cobbler check\nThe following are potential configuration items that you may want to fix:\n\n1 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:\n    https://github.com/cobbler/cobbler/wiki/Selinux\n2 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them\n\nRestart cobblerd and then run 'cobbler sync' to apply changes.\n```\n\n执行 `cobbler sync` 同步信息\n```bash\n[root@localhost ~]# cobbler sync\ntask started: 2019-02-22_184309_sync\ntask started (id=Sync, time=Fri Feb 22 18:43:09 2019)\nrunning pre-sync triggers\n# ....忽略\nrunning python trigger cobbler.modules.scm_track\nrunning shell triggers from /var/lib/cobbler/triggers/change/*\n*** TASK COMPLETE ***\n```\n\n<a name=\"cobbler-web\"></a>\n### cobbler-web\n<a name=\"8ac7b7b1\"></a>\n#### 修复2.8.4 bug\n打开 `https://${cobbler_ip}/cobbler_web` 注意是 `https` 但是2.8.4有个bug，会导致打开后报500 `Internal Server Error` 错误 ,是因为  `django` 版本太高了 (参加 [cobbler 2.8.4/2.8.0 on centos 7 error ](https://github.com/cobbler/cobbler/issues/1959))\n\n```bash\n[root@localhost ~]# yum install -y python-pip\n[root@localhost ~]# pip2.7 install -U django==1.9.13\n[root@localhost ~]# systemctl restart cobblerd\n```\n\n<a name=\"545e05cf\"></a>\n#### 设置用户名密码\n默认用户名密码是 cobbler/cobbler\n```bash\n[root@localhost ~]# htdigest -c /etc/cobbler/users.digest Cobbler cobbler # 后边这个是用户名\n[root@localhost ~]# systemctl restart cobblerd\n```\n\n再次打开 `https://${cobbler_ip}/cobbler_web` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550854050621-8cd8b769-08c5-457e-9e1f-e85d64c10479.png#align=left&display=inline&height=519&name=image.png&originHeight=519&originWidth=543&size=42554&status=done&width=543)\n\n<a name=\"2074d2c5\"></a>\n### 挂载镜像\n通过 winscp,mobaxterm等将ubuntu和centos镜像上传到Cobbler服务器上的 `/tmp/` 目录下,其中 `net.ifnames=0 biosdevname=0 noipv6` 是让网卡统一命名成 `eth0` \n\n```bash\n[root@localhost ~]# mount -t iso9660 -o loop /tmp/CentOS-7-x86_64-Minimal-1810.iso /mnt/\n[root@localhost ~]# cobbler import --name=CentOS-7.6.1810-x86_64 --path=/mnt/ --arch=x86_64\n[root@localhost ~]# cobbler profile edit --name=CentOS-7.6.1810-x86_64 --kopts='net.ifnames=0 biosdevname=0'\n[root@localhost ~]# mount -t iso9660 -o loop /tmp/ubuntu-16.04.5-server-amd64.iso /mnt/\n[root@localhost ~]# cobbler import --name=ubuntu-16.04.5-server-x86_64 --path=/mnt/ --arch=x86_64\n```\n\n<a name=\"9135d7d4\"></a>\n### 测试PXE安装系统\n在vmware创建两个虚拟机(选择空白盘),内存2G，CPU2核，磁盘20G，创建完后，记得打个快照，后边做实验失败后，直接恢复即可。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550853771456-0e9b5af8-6bfe-44e0-83ed-22cf06deb895.png#align=left&display=inline&height=400&name=image.png&originHeight=400&originWidth=720&size=11329&status=done&width=720)<br />选择CentOS，然后回车，系统将自动安装\n\n<a name=\"11e7dd08\"></a>\n## 优化配置\n\n<a name=\"332f378a\"></a>\n### CentOS ks\n\n```bash\n[root@localhost ~]# cobbler profile report --name CentOS-7.6.1810-x86_64\nName                           : CentOS-7.6.1810-x86_64\n#//...忽略\nKickstart                      : /var/lib/cobbler/kickstarts/sample_end.ks\n#//...忽略\n#//复制一份ks，并且进行修改\n[root@localhost ~]# cp /var/lib/cobbler/kickstarts/sample_end.ks /var/lib/cobbler/kickstarts/centos-7-6.ks\n[root@localhost ~]# cobbler profile edit --name CentOS-7.6.1810-x86_64  --kickstart=/var/lib/cobbler/kickstarts/centos-7-6.ks\n[root@localhost ~]# cp /var/lib/cobbler/kickstarts/sample.seed /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed\n[root@localhost ~]# cobbler profile edit --name ubuntu-16.04.5-server-x86_64  --kickstart=/var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed \n```\n\n具体CentOS的ks语法可以参考这里：[KICKSTART 语法参考](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax)。另外可以参考 [运维工作笔记-Cobbler 配置文件](https://www.kancloud.cn/devops-centos/centos-linux-devops/392369)<br />具体Ubuntu的Preseed可以参考这里：[Preseed语法参考](https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn)。\n\n吐槽一下，cobbler代码中检测到是ubuntu时，会自动将ks换成url(强制走preseed)，而用惯了ks的，用preseed还是很不习惯的，可以看一下 [Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) ](https://github.com/cobbler/cobbler/issues/1262)和 [Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles](https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html)<br />此处贴一下 /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed \n\n```bash\n# Mostly based on the Ubuntu installation guide\n# https://help.ubuntu.com/16.04/installation-guide/\n# Debian sample\n# https://www.debian.org/releases/stable/example-preseed.txt\n\n## Part 1. Localization\n\n# Preseeding only locale sets language, country and locale.\nd-i debian-installer/locale string en_US\n\n# Keyboard selection.\n# Disable automatic (interactive) keymap detection.\nd-i console-setup/ask_detect boolean false\nd-i keyboard-configuration/toggle select No toggling\nd-i keyboard-configuration/layoutcode string us\nd-i keyboard-configuration/variantcode string\n\n## Part 2. Network configuration\n# netcfg will choose an interface that has link if possible. This makes it\n# skip displaying a list if there is more than one interface.\n#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace(\"_\",\"-\")\nd-i netcfg/choose_interface select auto\nd-i netcfg/get_hostname string $myhostname\n\n# If non-free firmware is needed for the network or other hardware, you can\n# configure the installer to always try to load it, without prompting. Or\n# change to false to disable asking.\n# d-i hw-detect/load_firmware boolean true\n\n## Part 3 NTP/Time\n# NTP/Time Setup\nd-i time/zone string Asia/Shanghai\nd-i clock-setup/utc boolean true\nd-i clock-setup/ntp boolean true\nd-i clock-setup/ntp-server  string ntp1.aliyun.com\n\n## Part 4. Mirror settings\n# Setup the installation source\nd-i mirror/country string manual\nd-i mirror/http/hostname string $http_server\nd-i mirror/http/directory string $install_source_directory\nd-i mirror/http/proxy string\n\n#set $os_v = $getVar('os_version','')\n#if $breed == \"ubuntu\" and $os_v and ($os_v.lower()[0] > 'p' or $os_v.lower()[0] < 'd')\n# Required at least for ubuntu 12.10+ , so test os_v is higher than precise and lower than drapper\nd-i live-installer/net-image string http://$http_server/cobbler/links/$distro_name/install/filesystem.squashfs\n#end if\n\n# Suite to install.\n# d-i mirror/suite string precise\n# d-i mirror/udeb/suite string precise\n\n# Components to use for loading installer components (optional).\n#d-i mirror/udeb/components multiselect main, restricted\n\n## Part 4. Partitioning\n\n# Disk Partitioning\n# Use LVM, and wipe out anything that already exists\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\nd-i partman-auto/method string lvm\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman-md/device_remove_md boolean true\nd-i partman-partitioning/confirm_write_new_label boolean true\n\n# You can choose one of the three predefined partitioning recipes:\n# - atomic: all files in one partition\n# - home:   separate /home partition\n# - multi:  separate /home, /usr, /var, and /tmp partitions\nd-i partman-auto/choose_recipe select atomic\n\n# If you just want to change the default filesystem from ext3 to something\n# else, you can do that without providing a full recipe.\n# d-i partman/default_filesystem string ext4\n\n## Part 5. Account setup\n\n# root account and password\nd-i passwd/root-login boolean true\nd-i passwd/root-password-crypted password $default_password_crypted\n\n# skip creation of a normal user account.\nd-i passwd/make-user boolean true\nd-i passwd/user-fullname  string anjia\nd-i passwd/username       string anjia\nd-i passwd/user-password-crypted password $default_password_crypted\n\n## Part 6. Apt setup\n\n# You can choose to install restricted and universe software, or to install\n# software from the backports repository.\n# d-i apt-setup/restricted boolean true\n# d-i apt-setup/universe boolean true\n# d-i apt-setup/backports boolean true\n\n# Uncomment this if you don't want to use a network mirror.\n# d-i apt-setup/use_mirror boolean true\n\n# Select which update services to use; define the mirrors to be used.\n# Values shown below are the normal defaults.\n# d-i apt-setup/services-select multiselect security\n# d-i apt-setup/security_host string mirrors.aliyun.com\n# d-i apt-setup/security_path string /ubuntu\n\n$SNIPPET('preseed_apt_repo_config')\n\n# Enable deb-src lines\n# d-i apt-setup/local0/source boolean true\n\n# URL to the public key of the local repository; you must provide a key or\n# apt will complain about the unauthenticated repository and so the\n# sources.list line will be left commented out\n# d-i apt-setup/local0/key string http://local.server/key\n\n# By default the installer requires that repositories be authenticated\n# using a known gpg key. This setting can be used to disable that\n# authentication. Warning: Insecure, not recommended.\n# d-i debian-installer/allow_unauthenticated boolean true\n\n## Part 7. Package selection\n# Default for minimal\ntasksel tasksel/first multiselect standard\n# Default for server\n# tasksel tasksel/first multiselect standard, web-server\n# Default for gnome-desktop\n# tasksel tasksel/first multiselect standard, gnome-desktop\n\n# Individual additional packages to install\n# wget is REQUIRED otherwise quite a few things won't work\n# later in the build (like late-command scripts)\nd-i pkgsel/include string ntp ssh wget \n\n# Debian needs this for the installer to avoid any question for grub\n# Please verify that it suit your needs as it may overwrite any usb stick\n#if $breed == \"debian\"\nd-i grub-installer/grub2_instead_of_grub_legacy boolean true\nd-i grub-installer/bootdev string default\n#end if\n\n# Use the following option to add additional boot parameters for the\n# installed system (if supported by the bootloader installer).\n# Note: options passed to the installer will be added automatically.\nd-i debian-installer/add-kernel-opts string $kernel_options_post\n\n# Avoid that last message about the install being complete.\nd-i finish-install/reboot_in_progress note\n\n## Figure out if we're kickstarting a system or a profile\n#if $getVar('system_name','') != ''\n#set $what = \"system\"\n#else\n#set $what = \"profile\"\n#end if\n\n# This first command is run as early as possible, just after preseeding is read.\n# d-i preseed/early_command string [command]\nd-i preseed/early_command string wget -O- \\\n   http://$http_server/cblr/svc/op/script/$what/$name/?script=preseed_early_default | \\\n   /bin/sh -s\n\n# This command is run immediately before the partitioner starts. It may be\n# useful to apply dynamic partitioner preseeding that depends on the state\n# of the disks (which may not be visible when preseed/early_command runs).\n# d-i partman/early_command \\\n#       string debconf-set partman-auto/disk \"\\$(list-devices disk | head -n1)\"\n\n# This command is run just before the install finishes, but when there is\n# still a usable /target directory. You can chroot to /target and use it\n# directly, or use the apt-install and in-target commands to easily install\n# packages and run commands in the target system.\n# d-i preseed/late_command string [command]\nd-i preseed/late_command string wget -O- \\\n   http://$http_server/cblr/svc/op/script/$what/$name/?script=preseed_late_default | \\\n   chroot /target /bin/sh -s\n```\n\n<a name=\"516808f3\"></a>\n### 创建snippets\n\n安装完后，自动安装软件,参考 [Using template scripts for Debian and Ubuntu seeds](https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds)\n```bash\n[root@localhost ~]# tee /var/lib/cobbler/snippets/ubuntu_apt_install_soft <<-'EOF'\n\napt-get update\napt-get install -y language-pack-zh-hans apt-transport-https ca-certificates software-properties-common  git ansible openssh-server vim curl htop iotop iftop ncdu\n\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\napt-get update\n\napt-get install -y docker-ce=18.06.2~ce~3-0~ubuntu\napt-mark hold docker-ce\nsystemctl enable docker\nEOF\n\n## // d-i preseed/late_command 阶段执行\n[root@localhost ~]# echo '$SNIPPET(\"ubuntu_apt_install_soft\") >> /var/lib/cobbler/snippets/late_apt_repo_config\n```\n \n<a name=\"2a68d258\"></a>\n### 设置ubuntu package repo\n\n```bash\n[root@localhost ~]# cobbler repo edit --name=ubuntu-16.04.5-server-x86_64 --arch=x86_64 --breed=apt --mirror=http://mirrors.aliyun.com/ubuntu --owners=admin --mirror-locally=False --apt-components='main universe' --apt-dists='xenial xenial-updates xenial-security'\n[root@localhost ~]# cobbler profile edit --name=ubuntu-16.04.5-server-x86_64 --repos=ubuntu-16.04.5-server-x86_64\n```\n\n限于篇幅，下一篇，将介绍Cobbler安装Windows\n\n<a name=\"a08138fa\"></a>\n## 常见错误\n\n```bash\n[root@localhost ~]# cobbler check\ncobblerd does not appear to be running/accessible: error(111, 'Connection refused') \n```\n\n原因：未启动相关服务\n\n```bash\n[root@localhost ~]# cobbler check\nhttpd does not appear to be running and proxying cobbler, or SELinux is in the way. Original traceback:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/cobbler/cli.py\", line 251, in check_setup\n    s.ping()\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1233, in __call__\n    return self.__send(self.__name, args)\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1591, in __request\n    verbose=self.__verbose\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1273, in request\n    return self.single_request(host, handler, request_body, verbose)\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1321, in single_request\n    response.msg,\nProtocolError: <ProtocolError for 127.0.0.1:80/cobbler_api: 503 Service Unavailable>\n```\n未关闭防火墙\n\n```bash\n[root@localhost ~]# cobbler sync\nreceived on stderr: Redirecting to /bin/systemctl restart dhcpd.service\nJob for dhcpd.service failed because the control process exited with error code. See \"systemctl status dhcpd.service\" and \"journalctl -xe\" for details.\n\nException occured: <class 'cobbler.cexceptions.CX'>\nException value: 'cobbler trigger failed: cobbler.modules.sync_post_restart_services'\nException Info:\n  File \"/usr/lib/python2.7/site-packages/cobbler/remote.py\", line 82, in run\n    rc = self._run(self)\n   File \"/usr/lib/python2.7/site-packages/cobbler/remote.py\", line 181, in runner\n    return self.remote.api.sync(self.options.get(\"verbose\",False),logger=self.logger)\n   File \"/usr/lib/python2.7/site-packages/cobbler/api.py\", line 763, in sync\n    return sync.run()\n   File \"/usr/lib/python2.7/site-packages/cobbler/action_sync.py\", line 144, in run\n    utils.run_triggers(self.api, None, \"/var/lib/cobbler/triggers/sync/post/*\", logger=self.logger)\n   File \"/usr/lib/python2.7/site-packages/cobbler/utils.py\", line 928, in run_triggers\n    raise CX(\"cobbler trigger failed: %s\" % m.__name__)\n\n!!! TASK FAILED !!!\n```\n没改dhcp模板，导致sync同步出问题\n\n\n```bash\n[root@localhost ~]# cat /var/log/httpd/ssl_error_log\n[Fri Feb 22 20:07:49.460442 2019] [:error] [pid 6910] [remote 127.0.0.1:204] mod_wsgi (pid=6910): Exception occurred processing WSGI script '/usr/share/cobbler/web/cobbler.wsgi'.\n[Fri Feb 22 20:07:49.460559 2019] [:error] [pid 6910] [remote 127.0.0.1:204] Traceback (most recent call last):\n[Fri Feb 22 20:07:49.460605 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/share/cobbler/web/cobbler.wsgi\", line 26, in application\n[Fri Feb 22 20:07:49.460668 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     _application = get_wsgi_application()\n[Fri Feb 22 20:07:49.460684 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/core/wsgi.py\", line 13, in get_wsgi_application\n[Fri Feb 22 20:07:49.460723 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     django.setup(set_prefix=False)\n[Fri Feb 22 20:07:49.460737 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/__init__.py\", line 22, in setup\n[Fri Feb 22 20:07:49.460768 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n[Fri Feb 22 20:07:49.460781 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/conf/__init__.py\", line 56, in __getattr__\n[Fri Feb 22 20:07:49.460812 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._setup(name)\n[Fri Feb 22 20:07:49.460824 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/conf/__init__.py\", line 41, in _setup\n[Fri Feb 22 20:07:49.460852 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._wrapped = Settings(settings_module)\n[Fri Feb 22 20:07:49.460871 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/conf/__init__.py\", line 110, in __init__\n[Fri Feb 22 20:07:49.460900 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     mod = importlib.import_module(self.SETTINGS_MODULE)\n[Fri Feb 22 20:07:49.460911 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib64/python2.7/importlib/__init__.py\", line 37, in import_module\n[Fri Feb 22 20:07:49.460953 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     __import__(name)\n[Fri Feb 22 20:07:49.460973 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/share/cobbler/web/settings.py\", line 89, in <module>\n[Fri Feb 22 20:07:49.460995 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS\n[Fri Feb 22 20:07:49.461043 2019] [:error] [pid 6910] [remote 127.0.0.1:204] ImportError: cannot import name TEMPLATE_CONTEXT_PROCESSORS\n```\n`pip2.7 install -U django==1.9.13` \n\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [配置防火墙](https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables)\n- [cobbler 2.8.4/2.8.0 on centos 7 error](https://github.com/cobbler/cobbler/issues/1959)\n- [KICKSTART 语法参考](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax)\n- [运维工作笔记-Cobbler 配置文件](https://www.kancloud.cn/devops-centos/centos-linux-devops/392369)\n- [Preseed语法参考](https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn)\n- [Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) ](https://github.com/cobbler/cobbler/issues/1262)\n- [Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles](https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html)\n- [Using template scripts for Debian and Ubuntu seeds](https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/cobbler.md","raw":"\n---\n\ntitle: 006-Cobbler批量自动化部署CentOS/Ubuntu/Windows\n\ndate: 2019-02-22 15:46:00 +0800\n\ntags: [pxe,dhcp,cobbler,centos,ubuntu,windows,tftp]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第6篇，定个小目标999，每周最少2篇。\n\n\n本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows\n\n<a name=\"424a2ad8\"></a>\n## 准备\n从阿里镜像站，下载 [CentOS-7-x86_64-Minimal-1810.iso](https://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso) 和 [ubuntu-16.04.5-desktop-amd64.iso](https://mirrors.aliyun.com/ubuntu-releases/releases/releases/16.04.5/ubuntu-16.04.5-desktop-amd64.iso) ，使用VMware创建一台CentOS7的虚拟机。\n\n<a name=\"eb49d426\"></a>\n### 环境初始化\n1.改为阿里源\n\n```bash\n# yum源\n# 备份系统默认源\n[root@localhost ~]# mkdir /etc/yum.repos.d/old && mv /etc/yum.repos.d/C* /etc/yum.repos.d/old/\n[root@localhost ~]# yum clean all\n# 设置阿里yum源\n[root@localhost ~]# curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n[root@localhost ~]# curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\n\n# pip源(2.8.4的bug)\n[root@localhost ~]# mkdir ~/.pip\n[root@localhost ~]# cat > ~/.pip/pip.conf << EOF\n[global]\ntrusted-host=mirrors.aliyun.com\nindex-url=https://mirrors.aliyun.com/pypi/simple/\nEOF\n```\n\n2.配置ssh\n\n默认ssh_config启用了DNS解析，导致每次远程ssh时都特别慢\n```bash\n[root@localhost ~]# sed -i 's%#UseDNS yes%UseDNS no%' /etc/ssh/sshd_config \n[root@localhost ~]# service sshd restart\n```\n~~3.~~[~~配置SElinux~~](https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-selinux)<br />~~如果要在Centos上开启Cobbler的支持，需要用root用户运行 `setsebool` ，注意 `-P` 参数确保重启仍然生效。~~<br />~~同时需要配置SELinux上下文规则(CentOS 7 Minimal默认不安装 `semanage` )，用于提供引导镜像。~~<br />按照红帽的5.4的教程，设置不生效，所以，禁用SELinux\n```bash\n#//.. setsebool -P httpd_can_network_connect true\n#//.. yum provides semanage\n#//.. yum -y install policycoreutils-python.x86_64\n#//.. semanage fcontext -a -t public_content_t \"/var/lib/tftpboot/.*\"\n[root@localhost ~]# sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config  \n[root@localhost ~]# setenforce 0\n```\n4.[配置防火墙](https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables)\n\n```bash\n# TFTP\n[root@localhost ~]# firewall-cmd --zone=public --add-port=69/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=69/udp --permanent\n\n# HTTPD\n[root@localhost ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=443/tcp --permanent\n\n# Cobbler\n[root@localhost ~]# firewall-cmd --zone=public --add-port=25150/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=25150/udp --permanent\n\n# Koan 如果未用到，可以不开放\n[root@localhost ~]# firewall-cmd --zone=public --add-port=25151/tcp --permanent\n\n# samba window安装需要用到samba,否则可以不开放\n[root@localhost ~]# firewall-cmd --zone=public --add-port=139/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=445/tcp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=137/udp --permanent\n[root@localhost ~]# firewall-cmd --zone=public --add-port=138/udp --permanent\n\n# 更新防火墙规则\n[root@localhost ~]# firewall-cmd --reload\n\n# 查看所有打开的端口\n[root@localhost ~]# firewall-cmd --zone=public --list-ports\n```\n\n<a name=\"7abcbeda\"></a>\n## 安装Cobbler\n\n<a name=\"5fc688fa\"></a>\n### 安装依赖软件\n\n```bash\n[root@localhost ~]# yum install -y cobbler cobbler-web dhcp tftp-server pykickstart httpd xinetd\n```\n\n<a name=\"9d785a63\"></a>\n### 设置开机自启动\n\n```bash\n[root@localhost ~]# systemctl enable httpd\n[root@localhost ~]# systemctl enable xinetd\n[root@localhost ~]# systemctl enable rsyncd\n[root@localhost ~]# systemctl enable tftp\n[root@localhost ~]# systemctl enable cobblerd\n```\n\n<a name=\"33d81c9d\"></a>\n### 启动服务\n\n```bash\n[root@localhost ~]# systemctl start httpd\n[root@localhost ~]# systemctl start xinetd\n[root@localhost ~]# systemctl start tftp\n[root@localhost ~]# systemctl start cobblerd\n```\n\n<a name=\"239c3f37\"></a>\n### 检查配置\n\n```bash\n[root@localhost ~]# cobbler check\nThe following are potential configuration items that you may want to fix:\n\n1 : The 'server' field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.\n2 : For PXE to be functional, the 'next_server' field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.\n3 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:\n    https://github.com/cobbler/cobbler/wiki/Selinux\n4 : change 'disable' to 'no' in /etc/xinetd.d/tftp\n5 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.\n6 : debmirror package is not installed, it will be required to manage debian deployments and repositories\n7 : The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to 'cobbler' and should be changed, try: \"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'\" to generate new one\n8 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them\n\nRestart cobblerd and then run 'cobbler sync' to apply changes.\n```\n\n1,2：<br />`cobbler_ip` 为cobbler主机ip<br />`next_server` 是dhcp主机ip，但是本实验dhcp和cobbler是一台\n```bash\n[root@localhost ~]# export cobbler_ip=192.168.0.12\n[root@localhost ~]# sed -i \"s%^server: 127.0.0.1%server: ${cobbler_ip}%g\" /etc/cobbler/settings\n[root@localhost ~]# sed -i \"s%^next_server: 127.0.0.1%next_server: ${cobbler_ip}%g\" /etc/cobbler/settings\n```\n\n3： 可以忽略，因为已经配置SELinux和防火墙了\n\n4：开启tftp功能\n```bash\n[root@localhost ~]# sed -i '/disable\\>/s/\\<yes\\>/no/' /etc/xinetd.d/tftp\n```\n\n5：下载bootload\n```bash\n[root@localhost ~]# cobbler get-loaders\n```\n\n6：下载ubuntu本地包镜像（不装ubuntu的，可以不用改）\n```bash\n[root@localhost ~]# yum install -y debmirror\n[root@localhost ~]# sed -i 's%^@dists=\"sid\"%#@dists=\"sid\"%g;s%@arches=\"i386\"%#@arches=\"i386\"%g' /etc/debmirror.conf\n```\n\n7：设置安装系统后的root密码\n```bash\n[root@localhost ~]# export root_pwd=$(openssl passwd -1 -salt `openssl rand 15 -base64` 'Abcd1234!@#$')\n[root@localhost ~]# sed -i \"s%^default_password_crypted.*%default_password_crypted: \\\"${root_pwd}\\\"%g\" /etc/cobbler/settings\n```\n\n8：电源管理模块(非必选)，cman和ence-agents二选一即可,此处忽略\n\n其余修改：\n```bash\n[root@localhost ~]# sed -i \"s%manage_dhcp: 0%manage_dhcp: 1%g\" /etc/cobbler/settings\n[root@localhost ~]# sed -i \"s%pxe_just_once: 0%pxe_just_once: 1%g\" /etc/cobbler/settings\n```\n\n修改dhcp\n\n```bash\n[root@localhost ~]# vi /etc/cobbler/dhcp.template\n\\#仅列出修改过的部分\n\\......\nsubnet 192.168.0.0 netmask 255.255.255.0 {\n     option routers             192.168.0.1;\n     option domain-name-servers 192.168.0.1;\n     option subnet-mask         255.255.255.0;\n     range dynamic-bootp        192.168.0.100 192.168.0.200;\n\\......\n```\n\n重启服务\n\n```bash\n[root@localhost ~]# systemctl restart httpd\n[root@localhost ~]# systemctl restart xinetd\n[root@localhost ~]# systemctl restart tftp\n[root@localhost ~]# systemctl restart cobblerd\n```\n\n再次校验,发现只有两条信息了，忽略即可。\n```bash\n[root@localhost ~]# cobbler check\nThe following are potential configuration items that you may want to fix:\n\n1 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:\n    https://github.com/cobbler/cobbler/wiki/Selinux\n2 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them\n\nRestart cobblerd and then run 'cobbler sync' to apply changes.\n```\n\n执行 `cobbler sync` 同步信息\n```bash\n[root@localhost ~]# cobbler sync\ntask started: 2019-02-22_184309_sync\ntask started (id=Sync, time=Fri Feb 22 18:43:09 2019)\nrunning pre-sync triggers\n# ....忽略\nrunning python trigger cobbler.modules.scm_track\nrunning shell triggers from /var/lib/cobbler/triggers/change/*\n*** TASK COMPLETE ***\n```\n\n<a name=\"cobbler-web\"></a>\n### cobbler-web\n<a name=\"8ac7b7b1\"></a>\n#### 修复2.8.4 bug\n打开 `https://${cobbler_ip}/cobbler_web` 注意是 `https` 但是2.8.4有个bug，会导致打开后报500 `Internal Server Error` 错误 ,是因为  `django` 版本太高了 (参加 [cobbler 2.8.4/2.8.0 on centos 7 error ](https://github.com/cobbler/cobbler/issues/1959))\n\n```bash\n[root@localhost ~]# yum install -y python-pip\n[root@localhost ~]# pip2.7 install -U django==1.9.13\n[root@localhost ~]# systemctl restart cobblerd\n```\n\n<a name=\"545e05cf\"></a>\n#### 设置用户名密码\n默认用户名密码是 cobbler/cobbler\n```bash\n[root@localhost ~]# htdigest -c /etc/cobbler/users.digest Cobbler cobbler # 后边这个是用户名\n[root@localhost ~]# systemctl restart cobblerd\n```\n\n再次打开 `https://${cobbler_ip}/cobbler_web` <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550854050621-8cd8b769-08c5-457e-9e1f-e85d64c10479.png#align=left&display=inline&height=519&name=image.png&originHeight=519&originWidth=543&size=42554&status=done&width=543)\n\n<a name=\"2074d2c5\"></a>\n### 挂载镜像\n通过 winscp,mobaxterm等将ubuntu和centos镜像上传到Cobbler服务器上的 `/tmp/` 目录下,其中 `net.ifnames=0 biosdevname=0 noipv6` 是让网卡统一命名成 `eth0` \n\n```bash\n[root@localhost ~]# mount -t iso9660 -o loop /tmp/CentOS-7-x86_64-Minimal-1810.iso /mnt/\n[root@localhost ~]# cobbler import --name=CentOS-7.6.1810-x86_64 --path=/mnt/ --arch=x86_64\n[root@localhost ~]# cobbler profile edit --name=CentOS-7.6.1810-x86_64 --kopts='net.ifnames=0 biosdevname=0'\n[root@localhost ~]# mount -t iso9660 -o loop /tmp/ubuntu-16.04.5-server-amd64.iso /mnt/\n[root@localhost ~]# cobbler import --name=ubuntu-16.04.5-server-x86_64 --path=/mnt/ --arch=x86_64\n```\n\n<a name=\"9135d7d4\"></a>\n### 测试PXE安装系统\n在vmware创建两个虚拟机(选择空白盘),内存2G，CPU2核，磁盘20G，创建完后，记得打个快照，后边做实验失败后，直接恢复即可。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1550853771456-0e9b5af8-6bfe-44e0-83ed-22cf06deb895.png#align=left&display=inline&height=400&name=image.png&originHeight=400&originWidth=720&size=11329&status=done&width=720)<br />选择CentOS，然后回车，系统将自动安装\n\n<a name=\"11e7dd08\"></a>\n## 优化配置\n\n<a name=\"332f378a\"></a>\n### CentOS ks\n\n```bash\n[root@localhost ~]# cobbler profile report --name CentOS-7.6.1810-x86_64\nName                           : CentOS-7.6.1810-x86_64\n#//...忽略\nKickstart                      : /var/lib/cobbler/kickstarts/sample_end.ks\n#//...忽略\n#//复制一份ks，并且进行修改\n[root@localhost ~]# cp /var/lib/cobbler/kickstarts/sample_end.ks /var/lib/cobbler/kickstarts/centos-7-6.ks\n[root@localhost ~]# cobbler profile edit --name CentOS-7.6.1810-x86_64  --kickstart=/var/lib/cobbler/kickstarts/centos-7-6.ks\n[root@localhost ~]# cp /var/lib/cobbler/kickstarts/sample.seed /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed\n[root@localhost ~]# cobbler profile edit --name ubuntu-16.04.5-server-x86_64  --kickstart=/var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed \n```\n\n具体CentOS的ks语法可以参考这里：[KICKSTART 语法参考](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax)。另外可以参考 [运维工作笔记-Cobbler 配置文件](https://www.kancloud.cn/devops-centos/centos-linux-devops/392369)<br />具体Ubuntu的Preseed可以参考这里：[Preseed语法参考](https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn)。\n\n吐槽一下，cobbler代码中检测到是ubuntu时，会自动将ks换成url(强制走preseed)，而用惯了ks的，用preseed还是很不习惯的，可以看一下 [Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) ](https://github.com/cobbler/cobbler/issues/1262)和 [Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles](https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html)<br />此处贴一下 /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed \n\n```bash\n# Mostly based on the Ubuntu installation guide\n# https://help.ubuntu.com/16.04/installation-guide/\n# Debian sample\n# https://www.debian.org/releases/stable/example-preseed.txt\n\n## Part 1. Localization\n\n# Preseeding only locale sets language, country and locale.\nd-i debian-installer/locale string en_US\n\n# Keyboard selection.\n# Disable automatic (interactive) keymap detection.\nd-i console-setup/ask_detect boolean false\nd-i keyboard-configuration/toggle select No toggling\nd-i keyboard-configuration/layoutcode string us\nd-i keyboard-configuration/variantcode string\n\n## Part 2. Network configuration\n# netcfg will choose an interface that has link if possible. This makes it\n# skip displaying a list if there is more than one interface.\n#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace(\"_\",\"-\")\nd-i netcfg/choose_interface select auto\nd-i netcfg/get_hostname string $myhostname\n\n# If non-free firmware is needed for the network or other hardware, you can\n# configure the installer to always try to load it, without prompting. Or\n# change to false to disable asking.\n# d-i hw-detect/load_firmware boolean true\n\n## Part 3 NTP/Time\n# NTP/Time Setup\nd-i time/zone string Asia/Shanghai\nd-i clock-setup/utc boolean true\nd-i clock-setup/ntp boolean true\nd-i clock-setup/ntp-server  string ntp1.aliyun.com\n\n## Part 4. Mirror settings\n# Setup the installation source\nd-i mirror/country string manual\nd-i mirror/http/hostname string $http_server\nd-i mirror/http/directory string $install_source_directory\nd-i mirror/http/proxy string\n\n#set $os_v = $getVar('os_version','')\n#if $breed == \"ubuntu\" and $os_v and ($os_v.lower()[0] > 'p' or $os_v.lower()[0] < 'd')\n# Required at least for ubuntu 12.10+ , so test os_v is higher than precise and lower than drapper\nd-i live-installer/net-image string http://$http_server/cobbler/links/$distro_name/install/filesystem.squashfs\n#end if\n\n# Suite to install.\n# d-i mirror/suite string precise\n# d-i mirror/udeb/suite string precise\n\n# Components to use for loading installer components (optional).\n#d-i mirror/udeb/components multiselect main, restricted\n\n## Part 4. Partitioning\n\n# Disk Partitioning\n# Use LVM, and wipe out anything that already exists\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\nd-i partman-auto/method string lvm\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman-md/device_remove_md boolean true\nd-i partman-partitioning/confirm_write_new_label boolean true\n\n# You can choose one of the three predefined partitioning recipes:\n# - atomic: all files in one partition\n# - home:   separate /home partition\n# - multi:  separate /home, /usr, /var, and /tmp partitions\nd-i partman-auto/choose_recipe select atomic\n\n# If you just want to change the default filesystem from ext3 to something\n# else, you can do that without providing a full recipe.\n# d-i partman/default_filesystem string ext4\n\n## Part 5. Account setup\n\n# root account and password\nd-i passwd/root-login boolean true\nd-i passwd/root-password-crypted password $default_password_crypted\n\n# skip creation of a normal user account.\nd-i passwd/make-user boolean true\nd-i passwd/user-fullname  string anjia\nd-i passwd/username       string anjia\nd-i passwd/user-password-crypted password $default_password_crypted\n\n## Part 6. Apt setup\n\n# You can choose to install restricted and universe software, or to install\n# software from the backports repository.\n# d-i apt-setup/restricted boolean true\n# d-i apt-setup/universe boolean true\n# d-i apt-setup/backports boolean true\n\n# Uncomment this if you don't want to use a network mirror.\n# d-i apt-setup/use_mirror boolean true\n\n# Select which update services to use; define the mirrors to be used.\n# Values shown below are the normal defaults.\n# d-i apt-setup/services-select multiselect security\n# d-i apt-setup/security_host string mirrors.aliyun.com\n# d-i apt-setup/security_path string /ubuntu\n\n$SNIPPET('preseed_apt_repo_config')\n\n# Enable deb-src lines\n# d-i apt-setup/local0/source boolean true\n\n# URL to the public key of the local repository; you must provide a key or\n# apt will complain about the unauthenticated repository and so the\n# sources.list line will be left commented out\n# d-i apt-setup/local0/key string http://local.server/key\n\n# By default the installer requires that repositories be authenticated\n# using a known gpg key. This setting can be used to disable that\n# authentication. Warning: Insecure, not recommended.\n# d-i debian-installer/allow_unauthenticated boolean true\n\n## Part 7. Package selection\n# Default for minimal\ntasksel tasksel/first multiselect standard\n# Default for server\n# tasksel tasksel/first multiselect standard, web-server\n# Default for gnome-desktop\n# tasksel tasksel/first multiselect standard, gnome-desktop\n\n# Individual additional packages to install\n# wget is REQUIRED otherwise quite a few things won't work\n# later in the build (like late-command scripts)\nd-i pkgsel/include string ntp ssh wget \n\n# Debian needs this for the installer to avoid any question for grub\n# Please verify that it suit your needs as it may overwrite any usb stick\n#if $breed == \"debian\"\nd-i grub-installer/grub2_instead_of_grub_legacy boolean true\nd-i grub-installer/bootdev string default\n#end if\n\n# Use the following option to add additional boot parameters for the\n# installed system (if supported by the bootloader installer).\n# Note: options passed to the installer will be added automatically.\nd-i debian-installer/add-kernel-opts string $kernel_options_post\n\n# Avoid that last message about the install being complete.\nd-i finish-install/reboot_in_progress note\n\n## Figure out if we're kickstarting a system or a profile\n#if $getVar('system_name','') != ''\n#set $what = \"system\"\n#else\n#set $what = \"profile\"\n#end if\n\n# This first command is run as early as possible, just after preseeding is read.\n# d-i preseed/early_command string [command]\nd-i preseed/early_command string wget -O- \\\n   http://$http_server/cblr/svc/op/script/$what/$name/?script=preseed_early_default | \\\n   /bin/sh -s\n\n# This command is run immediately before the partitioner starts. It may be\n# useful to apply dynamic partitioner preseeding that depends on the state\n# of the disks (which may not be visible when preseed/early_command runs).\n# d-i partman/early_command \\\n#       string debconf-set partman-auto/disk \"\\$(list-devices disk | head -n1)\"\n\n# This command is run just before the install finishes, but when there is\n# still a usable /target directory. You can chroot to /target and use it\n# directly, or use the apt-install and in-target commands to easily install\n# packages and run commands in the target system.\n# d-i preseed/late_command string [command]\nd-i preseed/late_command string wget -O- \\\n   http://$http_server/cblr/svc/op/script/$what/$name/?script=preseed_late_default | \\\n   chroot /target /bin/sh -s\n```\n\n<a name=\"516808f3\"></a>\n### 创建snippets\n\n安装完后，自动安装软件,参考 [Using template scripts for Debian and Ubuntu seeds](https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds)\n```bash\n[root@localhost ~]# tee /var/lib/cobbler/snippets/ubuntu_apt_install_soft <<-'EOF'\n\napt-get update\napt-get install -y language-pack-zh-hans apt-transport-https ca-certificates software-properties-common  git ansible openssh-server vim curl htop iotop iftop ncdu\n\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\napt-get update\n\napt-get install -y docker-ce=18.06.2~ce~3-0~ubuntu\napt-mark hold docker-ce\nsystemctl enable docker\nEOF\n\n## // d-i preseed/late_command 阶段执行\n[root@localhost ~]# echo '$SNIPPET(\"ubuntu_apt_install_soft\") >> /var/lib/cobbler/snippets/late_apt_repo_config\n```\n \n<a name=\"2a68d258\"></a>\n### 设置ubuntu package repo\n\n```bash\n[root@localhost ~]# cobbler repo edit --name=ubuntu-16.04.5-server-x86_64 --arch=x86_64 --breed=apt --mirror=http://mirrors.aliyun.com/ubuntu --owners=admin --mirror-locally=False --apt-components='main universe' --apt-dists='xenial xenial-updates xenial-security'\n[root@localhost ~]# cobbler profile edit --name=ubuntu-16.04.5-server-x86_64 --repos=ubuntu-16.04.5-server-x86_64\n```\n\n限于篇幅，下一篇，将介绍Cobbler安装Windows\n\n<a name=\"a08138fa\"></a>\n## 常见错误\n\n```bash\n[root@localhost ~]# cobbler check\ncobblerd does not appear to be running/accessible: error(111, 'Connection refused') \n```\n\n原因：未启动相关服务\n\n```bash\n[root@localhost ~]# cobbler check\nhttpd does not appear to be running and proxying cobbler, or SELinux is in the way. Original traceback:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/cobbler/cli.py\", line 251, in check_setup\n    s.ping()\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1233, in __call__\n    return self.__send(self.__name, args)\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1591, in __request\n    verbose=self.__verbose\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1273, in request\n    return self.single_request(host, handler, request_body, verbose)\n  File \"/usr/lib64/python2.7/xmlrpclib.py\", line 1321, in single_request\n    response.msg,\nProtocolError: <ProtocolError for 127.0.0.1:80/cobbler_api: 503 Service Unavailable>\n```\n未关闭防火墙\n\n```bash\n[root@localhost ~]# cobbler sync\nreceived on stderr: Redirecting to /bin/systemctl restart dhcpd.service\nJob for dhcpd.service failed because the control process exited with error code. See \"systemctl status dhcpd.service\" and \"journalctl -xe\" for details.\n\nException occured: <class 'cobbler.cexceptions.CX'>\nException value: 'cobbler trigger failed: cobbler.modules.sync_post_restart_services'\nException Info:\n  File \"/usr/lib/python2.7/site-packages/cobbler/remote.py\", line 82, in run\n    rc = self._run(self)\n   File \"/usr/lib/python2.7/site-packages/cobbler/remote.py\", line 181, in runner\n    return self.remote.api.sync(self.options.get(\"verbose\",False),logger=self.logger)\n   File \"/usr/lib/python2.7/site-packages/cobbler/api.py\", line 763, in sync\n    return sync.run()\n   File \"/usr/lib/python2.7/site-packages/cobbler/action_sync.py\", line 144, in run\n    utils.run_triggers(self.api, None, \"/var/lib/cobbler/triggers/sync/post/*\", logger=self.logger)\n   File \"/usr/lib/python2.7/site-packages/cobbler/utils.py\", line 928, in run_triggers\n    raise CX(\"cobbler trigger failed: %s\" % m.__name__)\n\n!!! TASK FAILED !!!\n```\n没改dhcp模板，导致sync同步出问题\n\n\n```bash\n[root@localhost ~]# cat /var/log/httpd/ssl_error_log\n[Fri Feb 22 20:07:49.460442 2019] [:error] [pid 6910] [remote 127.0.0.1:204] mod_wsgi (pid=6910): Exception occurred processing WSGI script '/usr/share/cobbler/web/cobbler.wsgi'.\n[Fri Feb 22 20:07:49.460559 2019] [:error] [pid 6910] [remote 127.0.0.1:204] Traceback (most recent call last):\n[Fri Feb 22 20:07:49.460605 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/share/cobbler/web/cobbler.wsgi\", line 26, in application\n[Fri Feb 22 20:07:49.460668 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     _application = get_wsgi_application()\n[Fri Feb 22 20:07:49.460684 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/core/wsgi.py\", line 13, in get_wsgi_application\n[Fri Feb 22 20:07:49.460723 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     django.setup(set_prefix=False)\n[Fri Feb 22 20:07:49.460737 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/__init__.py\", line 22, in setup\n[Fri Feb 22 20:07:49.460768 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n[Fri Feb 22 20:07:49.460781 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/conf/__init__.py\", line 56, in __getattr__\n[Fri Feb 22 20:07:49.460812 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._setup(name)\n[Fri Feb 22 20:07:49.460824 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/conf/__init__.py\", line 41, in _setup\n[Fri Feb 22 20:07:49.460852 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._wrapped = Settings(settings_module)\n[Fri Feb 22 20:07:49.460871 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib/python2.7/site-packages/django/conf/__init__.py\", line 110, in __init__\n[Fri Feb 22 20:07:49.460900 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     mod = importlib.import_module(self.SETTINGS_MODULE)\n[Fri Feb 22 20:07:49.460911 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/lib64/python2.7/importlib/__init__.py\", line 37, in import_module\n[Fri Feb 22 20:07:49.460953 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     __import__(name)\n[Fri Feb 22 20:07:49.460973 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File \"/usr/share/cobbler/web/settings.py\", line 89, in <module>\n[Fri Feb 22 20:07:49.460995 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS\n[Fri Feb 22 20:07:49.461043 2019] [:error] [pid 6910] [remote 127.0.0.1:204] ImportError: cannot import name TEMPLATE_CONTEXT_PROCESSORS\n```\n`pip2.7 install -U django==1.9.13` \n\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [配置防火墙](https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables)\n- [cobbler 2.8.4/2.8.0 on centos 7 error](https://github.com/cobbler/cobbler/issues/1959)\n- [KICKSTART 语法参考](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax)\n- [运维工作笔记-Cobbler 配置文件](https://www.kancloud.cn/devops-centos/centos-linux-devops/392369)\n- [Preseed语法参考](https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn)\n- [Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) ](https://github.com/cobbler/cobbler/issues/1262)\n- [Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles](https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html)\n- [Using template scripts for Debian and Ubuntu seeds](https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"cobbler","published":1,"updated":"2019-08-16T06:11:15.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojl500ir24dorbxjrfq3","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第6篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows</p>\n<p><a name=\"424a2ad8\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>从阿里镜像站，下载 <a href=\"https://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso\" target=\"_blank\" rel=\"noopener\">CentOS-7-x86_64-Minimal-1810.iso</a> 和 <a href=\"https://mirrors.aliyun.com/ubuntu-releases/releases/releases/16.04.5/ubuntu-16.04.5-desktop-amd64.iso\" target=\"_blank\" rel=\"noopener\">ubuntu-16.04.5-desktop-amd64.iso</a> ，使用VMware创建一台CentOS7的虚拟机。</p>\n<p><a name=\"eb49d426\"></a></p>\n<h3 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h3><p>1.改为阿里源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum源</span></span><br><span class=\"line\"><span class=\"comment\"># 备份系统默认源</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /etc/yum.repos.d/old &amp;&amp; mv /etc/yum.repos.d/C* /etc/yum.repos.d/old/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum clean all</span></span><br><span class=\"line\"><span class=\"comment\"># 设置阿里yum源</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pip源(2.8.4的bug)</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir ~/.pip</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat &gt; ~/.pip/pip.conf &lt;&lt; EOF</span></span><br><span class=\"line\">[global]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br><span class=\"line\">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>2.配置ssh</p>\n<p>默认ssh_config启用了DNS解析，导致每次远程ssh时都特别慢<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i 's%#UseDNS yes%UseDNS no%' /etc/ssh/sshd_config </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># service sshd restart</span></span><br></pre></td></tr></table></figure></p>\n<p><del>3.</del><a href=\"https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-selinux\" target=\"_blank\" rel=\"noopener\"><del>配置SElinux</del></a><br><del>如果要在Centos上开启Cobbler的支持，需要用root用户运行 <code>setsebool</code> ，注意 <code>-P</code> 参数确保重启仍然生效。</del><br><del>同时需要配置SELinux上下文规则(CentOS 7 Minimal默认不安装 <code>semanage</code> )，用于提供引导镜像。</del><br>按照红帽的5.4的教程，设置不生效，所以，禁用SELinux<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#//.. setsebool -P httpd_can_network_connect true</span></span><br><span class=\"line\"><span class=\"comment\">#//.. yum provides semanage</span></span><br><span class=\"line\"><span class=\"comment\">#//.. yum -y install policycoreutils-python.x86_64</span></span><br><span class=\"line\"><span class=\"comment\">#//.. semanage fcontext -a -t public_content_t \"/var/lib/tftpboot/.*\"</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config  </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># setenforce 0</span></span><br></pre></td></tr></table></figure></p>\n<p>4.<a href=\"https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables\" target=\"_blank\" rel=\"noopener\">配置防火墙</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TFTP</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=69/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=69/udp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTPD</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=80/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=443/tcp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Cobbler</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=25150/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=25150/udp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Koan 如果未用到，可以不开放</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=25151/tcp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># samba window安装需要用到samba,否则可以不开放</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=139/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=445/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=137/udp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=138/udp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新防火墙规则</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --reload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有打开的端口</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --list-ports</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"7abcbeda\"></a></p>\n<h2 id=\"安装Cobbler\"><a href=\"#安装Cobbler\" class=\"headerlink\" title=\"安装Cobbler\"></a>安装Cobbler</h2><p><a name=\"5fc688fa\"></a></p>\n<h3 id=\"安装依赖软件\"><a href=\"#安装依赖软件\" class=\"headerlink\" title=\"安装依赖软件\"></a>安装依赖软件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y cobbler cobbler-web dhcp tftp-server pykickstart httpd xinetd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"9d785a63\"></a></p>\n<h3 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable httpd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable xinetd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable rsyncd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable tftp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable cobblerd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"33d81c9d\"></a></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start httpd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start xinetd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start tftp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start cobblerd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"239c3f37\"></a></p>\n<h3 id=\"检查配置\"><a href=\"#检查配置\" class=\"headerlink\" title=\"检查配置\"></a>检查配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">The following are potential configuration items that you may want to fix:</span><br><span class=\"line\"></span><br><span class=\"line\">1 : The <span class=\"string\">'server'</span> field <span class=\"keyword\">in</span> /etc/cobbler/settings must be <span class=\"built_in\">set</span> to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP <span class=\"keyword\">for</span> the boot server as reachable by all machines that will use it.</span><br><span class=\"line\">2 : For PXE to be functional, the <span class=\"string\">'next_server'</span> field <span class=\"keyword\">in</span> /etc/cobbler/settings must be <span class=\"built_in\">set</span> to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class=\"line\">3 : SELinux is enabled. Please review the following wiki page <span class=\"keyword\">for</span> details on ensuring cobbler works correctly <span class=\"keyword\">in</span> your SELinux environment:</span><br><span class=\"line\">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class=\"line\">4 : change <span class=\"string\">'disable'</span> to <span class=\"string\">'no'</span> <span class=\"keyword\">in</span> /etc/xinetd.d/tftp</span><br><span class=\"line\">5 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class=\"string\">'cobbler get-loaders'</span> to download them, or, <span class=\"keyword\">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class=\"keyword\">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class=\"string\">'cobbler get-loaders'</span> <span class=\"built_in\">command</span> is the easiest way to resolve these requirements.</span><br><span class=\"line\">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class=\"line\">7 : The default password used by the sample templates <span class=\"keyword\">for</span> newly installed machines (default_password_crypted <span class=\"keyword\">in</span> /etc/cobbler/settings) is still <span class=\"built_in\">set</span> to <span class=\"string\">'cobbler'</span> and should be changed, try: <span class=\"string\">\"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'\"</span> to generate new one</span><br><span class=\"line\">8 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class=\"line\"></span><br><span class=\"line\">Restart cobblerd and <span class=\"keyword\">then</span> run <span class=\"string\">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure>\n<p>1,2：<br><code>cobbler_ip</code> 为cobbler主机ip<br><code>next_server</code> 是dhcp主机ip，但是本实验dhcp和cobbler是一台<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># export cobbler_ip=192.168.0.12</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%^server: 127.0.0.1%server: $&#123;cobbler_ip&#125;%g\" /etc/cobbler/settings</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%^next_server: 127.0.0.1%next_server: $&#123;cobbler_ip&#125;%g\" /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p>\n<p>3： 可以忽略，因为已经配置SELinux和防火墙了</p>\n<p>4：开启tftp功能<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i '/disable\\&gt;/s/\\&lt;yes\\&gt;/no/' /etc/xinetd.d/tftp</span></span><br></pre></td></tr></table></figure></p>\n<p>5：下载bootload<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler get-loaders</span></span><br></pre></td></tr></table></figure></p>\n<p>6：下载ubuntu本地包镜像（不装ubuntu的，可以不用改）<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y debmirror</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i 's%^@dists=\"sid\"%#@dists=\"sid\"%g;s%@arches=\"i386\"%#@arches=\"i386\"%g' /etc/debmirror.conf</span></span><br></pre></td></tr></table></figure></p>\n<p>7：设置安装系统后的root密码<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># export root_pwd=$(openssl passwd -1 -salt `openssl rand 15 -base64` 'Abcd1234!@#$')</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%^default_password_crypted.*%default_password_crypted: \\\"$&#123;root_pwd&#125;\\\"%g\" /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p>\n<p>8：电源管理模块(非必选)，cman和ence-agents二选一即可,此处忽略</p>\n<p>其余修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%manage_dhcp: 0%manage_dhcp: 1%g\" /etc/cobbler/settings</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%pxe_just_once: 0%pxe_just_once: 1%g\" /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p>\n<p>修改dhcp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/cobbler/dhcp.template</span></span><br><span class=\"line\">\\<span class=\"comment\">#仅列出修改过的部分</span></span><br><span class=\"line\">\\......</span><br><span class=\"line\">subnet 192.168.0.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">     option routers             192.168.0.1;</span><br><span class=\"line\">     option domain-name-servers 192.168.0.1;</span><br><span class=\"line\">     option subnet-mask         255.255.255.0;</span><br><span class=\"line\">     range dynamic-bootp        192.168.0.100 192.168.0.200;</span><br><span class=\"line\">\\......</span><br></pre></td></tr></table></figure>\n<p>重启服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart httpd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart xinetd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart tftp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart cobblerd</span></span><br></pre></td></tr></table></figure>\n<p>再次校验,发现只有两条信息了，忽略即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">The following are potential configuration items that you may want to fix:</span><br><span class=\"line\"></span><br><span class=\"line\">1 : SELinux is enabled. Please review the following wiki page <span class=\"keyword\">for</span> details on ensuring cobbler works correctly <span class=\"keyword\">in</span> your SELinux environment:</span><br><span class=\"line\">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class=\"line\">2 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class=\"line\"></span><br><span class=\"line\">Restart cobblerd and <span class=\"keyword\">then</span> run <span class=\"string\">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure></p>\n<p>执行 <code>cobbler sync</code> 同步信息<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler sync</span></span><br><span class=\"line\">task started: 2019-02-22_184309_sync</span><br><span class=\"line\">task started (id=Sync, time=Fri Feb 22 18:43:09 2019)</span><br><span class=\"line\">running pre-sync triggers</span><br><span class=\"line\"><span class=\"comment\"># ....忽略</span></span><br><span class=\"line\">running python trigger cobbler.modules.scm_track</span><br><span class=\"line\">running shell triggers from /var/lib/cobbler/triggers/change/*</span><br><span class=\"line\">*** TASK COMPLETE ***</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"cobbler-web\"></a></p>\n<h3 id=\"cobbler-web\"><a href=\"#cobbler-web\" class=\"headerlink\" title=\"cobbler-web\"></a>cobbler-web</h3><p><a name=\"8ac7b7b1\"></a></p>\n<h4 id=\"修复2-8-4-bug\"><a href=\"#修复2-8-4-bug\" class=\"headerlink\" title=\"修复2.8.4 bug\"></a>修复2.8.4 bug</h4><p>打开 <code>https://${cobbler_ip}/cobbler_web</code> 注意是 <code>https</code> 但是2.8.4有个bug，会导致打开后报500 <code>Internal Server Error</code> 错误 ,是因为  <code>django</code> 版本太高了 (参加 <a href=\"https://github.com/cobbler/cobbler/issues/1959\" target=\"_blank\" rel=\"noopener\">cobbler 2.8.4/2.8.0 on centos 7 error </a>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y python-pip</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pip2.7 install -U django==1.9.13</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart cobblerd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"545e05cf\"></a></p>\n<h4 id=\"设置用户名密码\"><a href=\"#设置用户名密码\" class=\"headerlink\" title=\"设置用户名密码\"></a>设置用户名密码</h4><p>默认用户名密码是 cobbler/cobbler<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># htdigest -c /etc/cobbler/users.digest Cobbler cobbler # 后边这个是用户名</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart cobblerd</span></span><br></pre></td></tr></table></figure></p>\n<p>再次打开 <code>https://${cobbler_ip}/cobbler_web</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550854050621-8cd8b769-08c5-457e-9e1f-e85d64c10479.png#align=left&amp;display=inline&amp;height=519&amp;name=image.png&amp;originHeight=519&amp;originWidth=543&amp;size=42554&amp;status=done&amp;width=543\" alt=\"image.png\"></p>\n<p><a name=\"2074d2c5\"></a></p>\n<h3 id=\"挂载镜像\"><a href=\"#挂载镜像\" class=\"headerlink\" title=\"挂载镜像\"></a>挂载镜像</h3><p>通过 winscp,mobaxterm等将ubuntu和centos镜像上传到Cobbler服务器上的 <code>/tmp/</code> 目录下,其中 <code>net.ifnames=0 biosdevname=0 noipv6</code> 是让网卡统一命名成 <code>eth0</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount -t iso9660 -o loop /tmp/CentOS-7-x86_64-Minimal-1810.iso /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler import --name=CentOS-7.6.1810-x86_64 --path=/mnt/ --arch=x86_64</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name=CentOS-7.6.1810-x86_64 --kopts='net.ifnames=0 biosdevname=0'</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount -t iso9660 -o loop /tmp/ubuntu-16.04.5-server-amd64.iso /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler import --name=ubuntu-16.04.5-server-x86_64 --path=/mnt/ --arch=x86_64</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"9135d7d4\"></a></p>\n<h3 id=\"测试PXE安装系统\"><a href=\"#测试PXE安装系统\" class=\"headerlink\" title=\"测试PXE安装系统\"></a>测试PXE安装系统</h3><p>在vmware创建两个虚拟机(选择空白盘),内存2G，CPU2核，磁盘20G，创建完后，记得打个快照，后边做实验失败后，直接恢复即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550853771456-0e9b5af8-6bfe-44e0-83ed-22cf06deb895.png#align=left&amp;display=inline&amp;height=400&amp;name=image.png&amp;originHeight=400&amp;originWidth=720&amp;size=11329&amp;status=done&amp;width=720\" alt=\"image.png\"><br>选择CentOS，然后回车，系统将自动安装</p>\n<p><a name=\"11e7dd08\"></a></p>\n<h2 id=\"优化配置\"><a href=\"#优化配置\" class=\"headerlink\" title=\"优化配置\"></a>优化配置</h2><p><a name=\"332f378a\"></a></p>\n<h3 id=\"CentOS-ks\"><a href=\"#CentOS-ks\" class=\"headerlink\" title=\"CentOS ks\"></a>CentOS ks</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile report --name CentOS-7.6.1810-x86_64</span></span><br><span class=\"line\">Name                           : CentOS-7.6.1810-x86_64</span><br><span class=\"line\"><span class=\"comment\">#//...忽略</span></span><br><span class=\"line\">Kickstart                      : /var/lib/cobbler/kickstarts/sample_end.ks</span><br><span class=\"line\"><span class=\"comment\">#//...忽略</span></span><br><span class=\"line\"><span class=\"comment\">#//复制一份ks，并且进行修改</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp /var/lib/cobbler/kickstarts/sample_end.ks /var/lib/cobbler/kickstarts/centos-7-6.ks</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name CentOS-7.6.1810-x86_64  --kickstart=/var/lib/cobbler/kickstarts/centos-7-6.ks</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp /var/lib/cobbler/kickstarts/sample.seed /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name ubuntu-16.04.5-server-x86_64  --kickstart=/var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed</span></span><br></pre></td></tr></table></figure>\n<p>具体CentOS的ks语法可以参考这里：<a href=\"https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax\" target=\"_blank\" rel=\"noopener\">KICKSTART 语法参考</a>。另外可以参考 <a href=\"https://www.kancloud.cn/devops-centos/centos-linux-devops/392369\" target=\"_blank\" rel=\"noopener\">运维工作笔记-Cobbler 配置文件</a><br>具体Ubuntu的Preseed可以参考这里：<a href=\"https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn\" target=\"_blank\" rel=\"noopener\">Preseed语法参考</a>。</p>\n<p>吐槽一下，cobbler代码中检测到是ubuntu时，会自动将ks换成url(强制走preseed)，而用惯了ks的，用preseed还是很不习惯的，可以看一下 <a href=\"https://github.com/cobbler/cobbler/issues/1262\" target=\"_blank\" rel=\"noopener\">Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) </a>和 <a href=\"https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html\" target=\"_blank\" rel=\"noopener\">Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles</a><br>此处贴一下 /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mostly based on the Ubuntu installation guide</span></span><br><span class=\"line\"><span class=\"comment\"># https://help.ubuntu.com/16.04/installation-guide/</span></span><br><span class=\"line\"><span class=\"comment\"># Debian sample</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.debian.org/releases/stable/example-preseed.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 1. Localization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Preseeding only locale sets language, country and locale.</span></span><br><span class=\"line\">d-i debian-installer/locale string en_US</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keyboard selection.</span></span><br><span class=\"line\"><span class=\"comment\"># Disable automatic (interactive) keymap detection.</span></span><br><span class=\"line\">d-i console-setup/ask_detect boolean <span class=\"literal\">false</span></span><br><span class=\"line\">d-i keyboard-configuration/toggle select No toggling</span><br><span class=\"line\">d-i keyboard-configuration/layoutcode string us</span><br><span class=\"line\">d-i keyboard-configuration/variantcode string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 2. Network configuration</span></span><br><span class=\"line\"><span class=\"comment\"># netcfg will choose an interface that has link if possible. This makes it</span></span><br><span class=\"line\"><span class=\"comment\"># skip displaying a list if there is more than one interface.</span></span><br><span class=\"line\"><span class=\"comment\">#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace(\"_\",\"-\")</span></span><br><span class=\"line\">d-i netcfg/choose_interface select auto</span><br><span class=\"line\">d-i netcfg/get_hostname string <span class=\"variable\">$myhostname</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If non-free firmware is needed for the network or other hardware, you can</span></span><br><span class=\"line\"><span class=\"comment\"># configure the installer to always try to load it, without prompting. Or</span></span><br><span class=\"line\"><span class=\"comment\"># change to false to disable asking.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i hw-detect/load_firmware boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 3 NTP/Time</span></span><br><span class=\"line\"><span class=\"comment\"># NTP/Time Setup</span></span><br><span class=\"line\">d-i time/zone string Asia/Shanghai</span><br><span class=\"line\">d-i clock-setup/utc boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i clock-setup/ntp boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i clock-setup/ntp-server  string ntp1.aliyun.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 4. Mirror settings</span></span><br><span class=\"line\"><span class=\"comment\"># Setup the installation source</span></span><br><span class=\"line\">d-i mirror/country string manual</span><br><span class=\"line\">d-i mirror/http/hostname string <span class=\"variable\">$http_server</span></span><br><span class=\"line\">d-i mirror/http/directory string <span class=\"variable\">$install_source_directory</span></span><br><span class=\"line\">d-i mirror/http/proxy string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#set $os_v = $getVar('os_version','')</span></span><br><span class=\"line\"><span class=\"comment\">#if $breed == \"ubuntu\" and $os_v and ($os_v.lower()[0] &gt; 'p' or $os_v.lower()[0] &lt; 'd')</span></span><br><span class=\"line\"><span class=\"comment\"># Required at least for ubuntu 12.10+ , so test os_v is higher than precise and lower than drapper</span></span><br><span class=\"line\">d-i live-installer/net-image string http://<span class=\"variable\">$http_server</span>/cobbler/links/<span class=\"variable\">$distro_name</span>/install/filesystem.squashfs</span><br><span class=\"line\"><span class=\"comment\">#end if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Suite to install.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i mirror/suite string precise</span></span><br><span class=\"line\"><span class=\"comment\"># d-i mirror/udeb/suite string precise</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Components to use for loading installer components (optional).</span></span><br><span class=\"line\"><span class=\"comment\">#d-i mirror/udeb/components multiselect main, restricted</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 4. Partitioning</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disk Partitioning</span></span><br><span class=\"line\"><span class=\"comment\"># Use LVM, and wipe out anything that already exists</span></span><br><span class=\"line\">d-i partman/choose_partition select finish</span><br><span class=\"line\">d-i partman/confirm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman/confirm_nooverwrite boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-auto/method string lvm</span><br><span class=\"line\">d-i partman-lvm/device_remove_lvm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-lvm/confirm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-lvm/confirm_nooverwrite boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-md/device_remove_md boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-partitioning/confirm_write_new_label boolean <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can choose one of the three predefined partitioning recipes:</span></span><br><span class=\"line\"><span class=\"comment\"># - atomic: all files in one partition</span></span><br><span class=\"line\"><span class=\"comment\"># - home:   separate /home partition</span></span><br><span class=\"line\"><span class=\"comment\"># - multi:  separate /home, /usr, /var, and /tmp partitions</span></span><br><span class=\"line\">d-i partman-auto/choose_recipe select atomic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you just want to change the default filesystem from ext3 to something</span></span><br><span class=\"line\"><span class=\"comment\"># else, you can do that without providing a full recipe.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i partman/default_filesystem string ext4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 5. Account setup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># root account and password</span></span><br><span class=\"line\">d-i passwd/root-login boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i passwd/root-password-crypted password <span class=\"variable\">$default_password_crypted</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># skip creation of a normal user account.</span></span><br><span class=\"line\">d-i passwd/make-user boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i passwd/user-fullname  string anjia</span><br><span class=\"line\">d-i passwd/username       string anjia</span><br><span class=\"line\">d-i passwd/user-password-crypted password <span class=\"variable\">$default_password_crypted</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 6. Apt setup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can choose to install restricted and universe software, or to install</span></span><br><span class=\"line\"><span class=\"comment\"># software from the backports repository.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/restricted boolean true</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/universe boolean true</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/backports boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you don't want to use a network mirror.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/use_mirror boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Select which update services to use; define the mirrors to be used.</span></span><br><span class=\"line\"><span class=\"comment\"># Values shown below are the normal defaults.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/services-select multiselect security</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/security_host string mirrors.aliyun.com</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/security_path string /ubuntu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$SNIPPET</span>(<span class=\"string\">'preseed_apt_repo_config'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable deb-src lines</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/local0/source boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL to the public key of the local repository; you must provide a key or</span></span><br><span class=\"line\"><span class=\"comment\"># apt will complain about the unauthenticated repository and so the</span></span><br><span class=\"line\"><span class=\"comment\"># sources.list line will be left commented out</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/local0/key string http://local.server/key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># By default the installer requires that repositories be authenticated</span></span><br><span class=\"line\"><span class=\"comment\"># using a known gpg key. This setting can be used to disable that</span></span><br><span class=\"line\"><span class=\"comment\"># authentication. Warning: Insecure, not recommended.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i debian-installer/allow_unauthenticated boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 7. Package selection</span></span><br><span class=\"line\"><span class=\"comment\"># Default for minimal</span></span><br><span class=\"line\">tasksel tasksel/first multiselect standard</span><br><span class=\"line\"><span class=\"comment\"># Default for server</span></span><br><span class=\"line\"><span class=\"comment\"># tasksel tasksel/first multiselect standard, web-server</span></span><br><span class=\"line\"><span class=\"comment\"># Default for gnome-desktop</span></span><br><span class=\"line\"><span class=\"comment\"># tasksel tasksel/first multiselect standard, gnome-desktop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Individual additional packages to install</span></span><br><span class=\"line\"><span class=\"comment\"># wget is REQUIRED otherwise quite a few things won't work</span></span><br><span class=\"line\"><span class=\"comment\"># later in the build (like late-command scripts)</span></span><br><span class=\"line\">d-i pkgsel/include string ntp ssh wget </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Debian needs this for the installer to avoid any question for grub</span></span><br><span class=\"line\"><span class=\"comment\"># Please verify that it suit your needs as it may overwrite any usb stick</span></span><br><span class=\"line\"><span class=\"comment\">#if $breed == \"debian\"</span></span><br><span class=\"line\">d-i grub-installer/grub2_instead_of_grub_legacy boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i grub-installer/bootdev string default</span><br><span class=\"line\"><span class=\"comment\">#end if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Use the following option to add additional boot parameters for the</span></span><br><span class=\"line\"><span class=\"comment\"># installed system (if supported by the bootloader installer).</span></span><br><span class=\"line\"><span class=\"comment\"># Note: options passed to the installer will be added automatically.</span></span><br><span class=\"line\">d-i debian-installer/add-kernel-opts string <span class=\"variable\">$kernel_options_post</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Avoid that last message about the install being complete.</span></span><br><span class=\"line\">d-i finish-install/reboot_in_progress note</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Figure out if we're kickstarting a system or a profile</span></span><br><span class=\"line\"><span class=\"comment\">#if $getVar('system_name','') != ''</span></span><br><span class=\"line\"><span class=\"comment\">#set $what = \"system\"</span></span><br><span class=\"line\"><span class=\"comment\">#else</span></span><br><span class=\"line\"><span class=\"comment\">#set $what = \"profile\"</span></span><br><span class=\"line\"><span class=\"comment\">#end if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This first command is run as early as possible, just after preseeding is read.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i preseed/early_command string [command]</span></span><br><span class=\"line\">d-i preseed/early_command string wget -O- \\</span><br><span class=\"line\">   http://<span class=\"variable\">$http_server</span>/cblr/svc/op/script/<span class=\"variable\">$what</span>/<span class=\"variable\">$name</span>/?script=preseed_early_default | \\</span><br><span class=\"line\">   /bin/sh -s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This command is run immediately before the partitioner starts. It may be</span></span><br><span class=\"line\"><span class=\"comment\"># useful to apply dynamic partitioner preseeding that depends on the state</span></span><br><span class=\"line\"><span class=\"comment\"># of the disks (which may not be visible when preseed/early_command runs).</span></span><br><span class=\"line\"><span class=\"comment\"># d-i partman/early_command \\</span></span><br><span class=\"line\"><span class=\"comment\">#       string debconf-set partman-auto/disk \"\\$(list-devices disk | head -n1)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This command is run just before the install finishes, but when there is</span></span><br><span class=\"line\"><span class=\"comment\"># still a usable /target directory. You can chroot to /target and use it</span></span><br><span class=\"line\"><span class=\"comment\"># directly, or use the apt-install and in-target commands to easily install</span></span><br><span class=\"line\"><span class=\"comment\"># packages and run commands in the target system.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i preseed/late_command string [command]</span></span><br><span class=\"line\">d-i preseed/late_command string wget -O- \\</span><br><span class=\"line\">   http://<span class=\"variable\">$http_server</span>/cblr/svc/op/script/<span class=\"variable\">$what</span>/<span class=\"variable\">$name</span>/?script=preseed_late_default | \\</span><br><span class=\"line\">   chroot /target /bin/sh -s</span><br></pre></td></tr></table></figure>\n<p><a name=\"516808f3\"></a></p>\n<h3 id=\"创建snippets\"><a href=\"#创建snippets\" class=\"headerlink\" title=\"创建snippets\"></a>创建snippets</h3><p>安装完后，自动安装软件,参考 <a href=\"https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds\" target=\"_blank\" rel=\"noopener\">Using template scripts for Debian and Ubuntu seeds</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tee /var/lib/cobbler/snippets/ubuntu_apt_install_soft &lt;&lt;-'EOF'</span></span><br><span class=\"line\"></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y language-pack-zh-hans apt-transport-https ca-certificates software-properties-common  git ansible openssh-server vim curl htop iotop iftop ncdu</span><br><span class=\"line\"></span><br><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">\"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"variable\">$(lsb_release -cs)</span> stable\"</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install -y docker-ce=18.06.2~ce~3-0~ubuntu</span><br><span class=\"line\">apt-mark hold docker-ce</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## // d-i preseed/late_command 阶段执行</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># echo '$SNIPPET(\"ubuntu_apt_install_soft\") &gt;&gt; /var/lib/cobbler/snippets/late_apt_repo_config</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"2a68d258\"></a></p>\n<h3 id=\"设置ubuntu-package-repo\"><a href=\"#设置ubuntu-package-repo\" class=\"headerlink\" title=\"设置ubuntu package repo\"></a>设置ubuntu package repo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler repo edit --name=ubuntu-16.04.5-server-x86_64 --arch=x86_64 --breed=apt --mirror=http://mirrors.aliyun.com/ubuntu --owners=admin --mirror-locally=False --apt-components='main universe' --apt-dists='xenial xenial-updates xenial-security'</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name=ubuntu-16.04.5-server-x86_64 --repos=ubuntu-16.04.5-server-x86_64</span></span><br></pre></td></tr></table></figure>\n<p>限于篇幅，下一篇，将介绍Cobbler安装Windows</p>\n<p><a name=\"a08138fa\"></a></p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">cobblerd does not appear to be running/accessible: error(111, <span class=\"string\">'Connection refused'</span>)</span><br></pre></td></tr></table></figure>\n<p>原因：未启动相关服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">httpd does not appear to be running and proxying cobbler, or SELinux is <span class=\"keyword\">in</span> the way. Original traceback:</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/cli.py\"</span>, line 251, <span class=\"keyword\">in</span> check_setup</span><br><span class=\"line\">    s.ping()</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1233, <span class=\"keyword\">in</span> __call__</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self.__send(self.__name, args)</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1591, <span class=\"keyword\">in</span> __request</span><br><span class=\"line\">    verbose=self.__verbose</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1273, <span class=\"keyword\">in</span> request</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self.single_request(host, handler, request_body, verbose)</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1321, <span class=\"keyword\">in</span> single_request</span><br><span class=\"line\">    response.msg,</span><br><span class=\"line\">ProtocolError: &lt;ProtocolError <span class=\"keyword\">for</span> 127.0.0.1:80/cobbler_api: 503 Service Unavailable&gt;</span><br></pre></td></tr></table></figure>\n<p>未关闭防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler sync</span></span><br><span class=\"line\">received on stderr: Redirecting to /bin/systemctl restart dhcpd.service</span><br><span class=\"line\">Job <span class=\"keyword\">for</span> dhcpd.service failed because the control process exited with error code. See <span class=\"string\">\"systemctl status dhcpd.service\"</span> and <span class=\"string\">\"journalctl -xe\"</span> <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br><span class=\"line\">Exception occured: &lt;class <span class=\"string\">'cobbler.cexceptions.CX'</span>&gt;</span><br><span class=\"line\">Exception value: <span class=\"string\">'cobbler trigger failed: cobbler.modules.sync_post_restart_services'</span></span><br><span class=\"line\">Exception Info:</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/remote.py\"</span>, line 82, <span class=\"keyword\">in</span> run</span><br><span class=\"line\">    rc = self._run(self)</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/remote.py\"</span>, line 181, <span class=\"keyword\">in</span> runner</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self.remote.api.sync(self.options.get(<span class=\"string\">\"verbose\"</span>,False),logger=self.logger)</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/api.py\"</span>, line 763, <span class=\"keyword\">in</span> sync</span><br><span class=\"line\">    <span class=\"built_in\">return</span> sync.run()</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/action_sync.py\"</span>, line 144, <span class=\"keyword\">in</span> run</span><br><span class=\"line\">    utils.run_triggers(self.api, None, <span class=\"string\">\"/var/lib/cobbler/triggers/sync/post/*\"</span>, logger=self.logger)</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/utils.py\"</span>, line 928, <span class=\"keyword\">in</span> run_triggers</span><br><span class=\"line\">    raise CX(<span class=\"string\">\"cobbler trigger failed: %s\"</span> % m.__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">!!! TASK FAILED !!!</span><br></pre></td></tr></table></figure>\n<p>没改dhcp模板，导致sync同步出问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /var/log/httpd/ssl_error_log</span></span><br><span class=\"line\">[Fri Feb 22 20:07:49.460442 2019] [:error] [pid 6910] [remote 127.0.0.1:204] mod_wsgi (pid=6910): Exception occurred processing WSGI script <span class=\"string\">'/usr/share/cobbler/web/cobbler.wsgi'</span>.</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460559 2019] [:error] [pid 6910] [remote 127.0.0.1:204] Traceback (most recent call last):</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460605 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/share/cobbler/web/cobbler.wsgi\"</span>, line 26, <span class=\"keyword\">in</span> application</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460668 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     _application = get_wsgi_application()</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460684 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/core/wsgi.py\"</span>, line 13, <span class=\"keyword\">in</span> get_wsgi_application</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460723 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     django.setup(set_prefix=False)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460737 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/__init__.py\"</span>, line 22, <span class=\"keyword\">in</span> setup</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460768 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460781 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/conf/__init__.py\"</span>, line 56, <span class=\"keyword\">in</span> __getattr__</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460812 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._setup(name)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460824 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/conf/__init__.py\"</span>, line 41, <span class=\"keyword\">in</span> _setup</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460852 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._wrapped = Settings(settings_module)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460871 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/conf/__init__.py\"</span>, line 110, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460900 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     mod = importlib.import_module(self.SETTINGS_MODULE)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460911 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib64/python2.7/importlib/__init__.py\"</span>, line 37, <span class=\"keyword\">in</span> import_module</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460953 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     __import__(name)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460973 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/share/cobbler/web/settings.py\"</span>, line 89, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460995 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS</span><br><span class=\"line\">[Fri Feb 22 20:07:49.461043 2019] [:error] [pid 6910] [remote 127.0.0.1:204] ImportError: cannot import name TEMPLATE_CONTEXT_PROCESSORS</span><br></pre></td></tr></table></figure>\n<p><code>pip2.7 install -U django==1.9.13</code> </p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables\" target=\"_blank\" rel=\"noopener\">配置防火墙</a></li>\n<li><a href=\"https://github.com/cobbler/cobbler/issues/1959\" target=\"_blank\" rel=\"noopener\">cobbler 2.8.4/2.8.0 on centos 7 error</a></li>\n<li><a href=\"https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax\" target=\"_blank\" rel=\"noopener\">KICKSTART 语法参考</a></li>\n<li><a href=\"https://www.kancloud.cn/devops-centos/centos-linux-devops/392369\" target=\"_blank\" rel=\"noopener\">运维工作笔记-Cobbler 配置文件</a></li>\n<li><a href=\"https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn\" target=\"_blank\" rel=\"noopener\">Preseed语法参考</a></li>\n<li><a href=\"https://github.com/cobbler/cobbler/issues/1262\" target=\"_blank\" rel=\"noopener\">Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) </a></li>\n<li><a href=\"https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html\" target=\"_blank\" rel=\"noopener\">Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles</a></li>\n<li><a href=\"https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds\" target=\"_blank\" rel=\"noopener\">Using template scripts for Debian and Ubuntu seeds</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第6篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows</p>\n<p><a name=\"424a2ad8\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>从阿里镜像站，下载 <a href=\"https://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso\" target=\"_blank\" rel=\"noopener\">CentOS-7-x86_64-Minimal-1810.iso</a> 和 <a href=\"https://mirrors.aliyun.com/ubuntu-releases/releases/releases/16.04.5/ubuntu-16.04.5-desktop-amd64.iso\" target=\"_blank\" rel=\"noopener\">ubuntu-16.04.5-desktop-amd64.iso</a> ，使用VMware创建一台CentOS7的虚拟机。</p>\n<p><a name=\"eb49d426\"></a></p>\n<h3 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h3><p>1.改为阿里源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum源</span></span><br><span class=\"line\"><span class=\"comment\"># 备份系统默认源</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /etc/yum.repos.d/old &amp;&amp; mv /etc/yum.repos.d/C* /etc/yum.repos.d/old/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum clean all</span></span><br><span class=\"line\"><span class=\"comment\"># 设置阿里yum源</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pip源(2.8.4的bug)</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir ~/.pip</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat &gt; ~/.pip/pip.conf &lt;&lt; EOF</span></span><br><span class=\"line\">[global]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br><span class=\"line\">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>2.配置ssh</p>\n<p>默认ssh_config启用了DNS解析，导致每次远程ssh时都特别慢<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i 's%#UseDNS yes%UseDNS no%' /etc/ssh/sshd_config </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># service sshd restart</span></span><br></pre></td></tr></table></figure></p>\n<p><del>3.</del><a href=\"https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-selinux\" target=\"_blank\" rel=\"noopener\"><del>配置SElinux</del></a><br><del>如果要在Centos上开启Cobbler的支持，需要用root用户运行 <code>setsebool</code> ，注意 <code>-P</code> 参数确保重启仍然生效。</del><br><del>同时需要配置SELinux上下文规则(CentOS 7 Minimal默认不安装 <code>semanage</code> )，用于提供引导镜像。</del><br>按照红帽的5.4的教程，设置不生效，所以，禁用SELinux<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#//.. setsebool -P httpd_can_network_connect true</span></span><br><span class=\"line\"><span class=\"comment\">#//.. yum provides semanage</span></span><br><span class=\"line\"><span class=\"comment\">#//.. yum -y install policycoreutils-python.x86_64</span></span><br><span class=\"line\"><span class=\"comment\">#//.. semanage fcontext -a -t public_content_t \"/var/lib/tftpboot/.*\"</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config  </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># setenforce 0</span></span><br></pre></td></tr></table></figure></p>\n<p>4.<a href=\"https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables\" target=\"_blank\" rel=\"noopener\">配置防火墙</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TFTP</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=69/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=69/udp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTPD</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=80/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=443/tcp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Cobbler</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=25150/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=25150/udp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Koan 如果未用到，可以不开放</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=25151/tcp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># samba window安装需要用到samba,否则可以不开放</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=139/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=445/tcp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=137/udp --permanent</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --add-port=138/udp --permanent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新防火墙规则</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --reload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有打开的端口</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --zone=public --list-ports</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"7abcbeda\"></a></p>\n<h2 id=\"安装Cobbler\"><a href=\"#安装Cobbler\" class=\"headerlink\" title=\"安装Cobbler\"></a>安装Cobbler</h2><p><a name=\"5fc688fa\"></a></p>\n<h3 id=\"安装依赖软件\"><a href=\"#安装依赖软件\" class=\"headerlink\" title=\"安装依赖软件\"></a>安装依赖软件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y cobbler cobbler-web dhcp tftp-server pykickstart httpd xinetd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"9d785a63\"></a></p>\n<h3 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable httpd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable xinetd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable rsyncd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable tftp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable cobblerd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"33d81c9d\"></a></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start httpd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start xinetd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start tftp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start cobblerd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"239c3f37\"></a></p>\n<h3 id=\"检查配置\"><a href=\"#检查配置\" class=\"headerlink\" title=\"检查配置\"></a>检查配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">The following are potential configuration items that you may want to fix:</span><br><span class=\"line\"></span><br><span class=\"line\">1 : The <span class=\"string\">'server'</span> field <span class=\"keyword\">in</span> /etc/cobbler/settings must be <span class=\"built_in\">set</span> to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP <span class=\"keyword\">for</span> the boot server as reachable by all machines that will use it.</span><br><span class=\"line\">2 : For PXE to be functional, the <span class=\"string\">'next_server'</span> field <span class=\"keyword\">in</span> /etc/cobbler/settings must be <span class=\"built_in\">set</span> to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class=\"line\">3 : SELinux is enabled. Please review the following wiki page <span class=\"keyword\">for</span> details on ensuring cobbler works correctly <span class=\"keyword\">in</span> your SELinux environment:</span><br><span class=\"line\">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class=\"line\">4 : change <span class=\"string\">'disable'</span> to <span class=\"string\">'no'</span> <span class=\"keyword\">in</span> /etc/xinetd.d/tftp</span><br><span class=\"line\">5 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class=\"string\">'cobbler get-loaders'</span> to download them, or, <span class=\"keyword\">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class=\"keyword\">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class=\"string\">'cobbler get-loaders'</span> <span class=\"built_in\">command</span> is the easiest way to resolve these requirements.</span><br><span class=\"line\">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class=\"line\">7 : The default password used by the sample templates <span class=\"keyword\">for</span> newly installed machines (default_password_crypted <span class=\"keyword\">in</span> /etc/cobbler/settings) is still <span class=\"built_in\">set</span> to <span class=\"string\">'cobbler'</span> and should be changed, try: <span class=\"string\">\"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'\"</span> to generate new one</span><br><span class=\"line\">8 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class=\"line\"></span><br><span class=\"line\">Restart cobblerd and <span class=\"keyword\">then</span> run <span class=\"string\">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure>\n<p>1,2：<br><code>cobbler_ip</code> 为cobbler主机ip<br><code>next_server</code> 是dhcp主机ip，但是本实验dhcp和cobbler是一台<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># export cobbler_ip=192.168.0.12</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%^server: 127.0.0.1%server: $&#123;cobbler_ip&#125;%g\" /etc/cobbler/settings</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%^next_server: 127.0.0.1%next_server: $&#123;cobbler_ip&#125;%g\" /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p>\n<p>3： 可以忽略，因为已经配置SELinux和防火墙了</p>\n<p>4：开启tftp功能<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i '/disable\\&gt;/s/\\&lt;yes\\&gt;/no/' /etc/xinetd.d/tftp</span></span><br></pre></td></tr></table></figure></p>\n<p>5：下载bootload<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler get-loaders</span></span><br></pre></td></tr></table></figure></p>\n<p>6：下载ubuntu本地包镜像（不装ubuntu的，可以不用改）<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y debmirror</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i 's%^@dists=\"sid\"%#@dists=\"sid\"%g;s%@arches=\"i386\"%#@arches=\"i386\"%g' /etc/debmirror.conf</span></span><br></pre></td></tr></table></figure></p>\n<p>7：设置安装系统后的root密码<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># export root_pwd=$(openssl passwd -1 -salt `openssl rand 15 -base64` 'Abcd1234!@#$')</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%^default_password_crypted.*%default_password_crypted: \\\"$&#123;root_pwd&#125;\\\"%g\" /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p>\n<p>8：电源管理模块(非必选)，cman和ence-agents二选一即可,此处忽略</p>\n<p>其余修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%manage_dhcp: 0%manage_dhcp: 1%g\" /etc/cobbler/settings</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># sed -i \"s%pxe_just_once: 0%pxe_just_once: 1%g\" /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p>\n<p>修改dhcp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/cobbler/dhcp.template</span></span><br><span class=\"line\">\\<span class=\"comment\">#仅列出修改过的部分</span></span><br><span class=\"line\">\\......</span><br><span class=\"line\">subnet 192.168.0.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">     option routers             192.168.0.1;</span><br><span class=\"line\">     option domain-name-servers 192.168.0.1;</span><br><span class=\"line\">     option subnet-mask         255.255.255.0;</span><br><span class=\"line\">     range dynamic-bootp        192.168.0.100 192.168.0.200;</span><br><span class=\"line\">\\......</span><br></pre></td></tr></table></figure>\n<p>重启服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart httpd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart xinetd</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart tftp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart cobblerd</span></span><br></pre></td></tr></table></figure>\n<p>再次校验,发现只有两条信息了，忽略即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">The following are potential configuration items that you may want to fix:</span><br><span class=\"line\"></span><br><span class=\"line\">1 : SELinux is enabled. Please review the following wiki page <span class=\"keyword\">for</span> details on ensuring cobbler works correctly <span class=\"keyword\">in</span> your SELinux environment:</span><br><span class=\"line\">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class=\"line\">2 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class=\"line\"></span><br><span class=\"line\">Restart cobblerd and <span class=\"keyword\">then</span> run <span class=\"string\">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure></p>\n<p>执行 <code>cobbler sync</code> 同步信息<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler sync</span></span><br><span class=\"line\">task started: 2019-02-22_184309_sync</span><br><span class=\"line\">task started (id=Sync, time=Fri Feb 22 18:43:09 2019)</span><br><span class=\"line\">running pre-sync triggers</span><br><span class=\"line\"><span class=\"comment\"># ....忽略</span></span><br><span class=\"line\">running python trigger cobbler.modules.scm_track</span><br><span class=\"line\">running shell triggers from /var/lib/cobbler/triggers/change/*</span><br><span class=\"line\">*** TASK COMPLETE ***</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"cobbler-web\"></a></p>\n<h3 id=\"cobbler-web\"><a href=\"#cobbler-web\" class=\"headerlink\" title=\"cobbler-web\"></a>cobbler-web</h3><p><a name=\"8ac7b7b1\"></a></p>\n<h4 id=\"修复2-8-4-bug\"><a href=\"#修复2-8-4-bug\" class=\"headerlink\" title=\"修复2.8.4 bug\"></a>修复2.8.4 bug</h4><p>打开 <code>https://${cobbler_ip}/cobbler_web</code> 注意是 <code>https</code> 但是2.8.4有个bug，会导致打开后报500 <code>Internal Server Error</code> 错误 ,是因为  <code>django</code> 版本太高了 (参加 <a href=\"https://github.com/cobbler/cobbler/issues/1959\" target=\"_blank\" rel=\"noopener\">cobbler 2.8.4/2.8.0 on centos 7 error </a>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y python-pip</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pip2.7 install -U django==1.9.13</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart cobblerd</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"545e05cf\"></a></p>\n<h4 id=\"设置用户名密码\"><a href=\"#设置用户名密码\" class=\"headerlink\" title=\"设置用户名密码\"></a>设置用户名密码</h4><p>默认用户名密码是 cobbler/cobbler<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># htdigest -c /etc/cobbler/users.digest Cobbler cobbler # 后边这个是用户名</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart cobblerd</span></span><br></pre></td></tr></table></figure></p>\n<p>再次打开 <code>https://${cobbler_ip}/cobbler_web</code> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550854050621-8cd8b769-08c5-457e-9e1f-e85d64c10479.png#align=left&amp;display=inline&amp;height=519&amp;name=image.png&amp;originHeight=519&amp;originWidth=543&amp;size=42554&amp;status=done&amp;width=543\" alt=\"image.png\"></p>\n<p><a name=\"2074d2c5\"></a></p>\n<h3 id=\"挂载镜像\"><a href=\"#挂载镜像\" class=\"headerlink\" title=\"挂载镜像\"></a>挂载镜像</h3><p>通过 winscp,mobaxterm等将ubuntu和centos镜像上传到Cobbler服务器上的 <code>/tmp/</code> 目录下,其中 <code>net.ifnames=0 biosdevname=0 noipv6</code> 是让网卡统一命名成 <code>eth0</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount -t iso9660 -o loop /tmp/CentOS-7-x86_64-Minimal-1810.iso /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler import --name=CentOS-7.6.1810-x86_64 --path=/mnt/ --arch=x86_64</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name=CentOS-7.6.1810-x86_64 --kopts='net.ifnames=0 biosdevname=0'</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount -t iso9660 -o loop /tmp/ubuntu-16.04.5-server-amd64.iso /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler import --name=ubuntu-16.04.5-server-x86_64 --path=/mnt/ --arch=x86_64</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"9135d7d4\"></a></p>\n<h3 id=\"测试PXE安装系统\"><a href=\"#测试PXE安装系统\" class=\"headerlink\" title=\"测试PXE安装系统\"></a>测试PXE安装系统</h3><p>在vmware创建两个虚拟机(选择空白盘),内存2G，CPU2核，磁盘20G，创建完后，记得打个快照，后边做实验失败后，直接恢复即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1550853771456-0e9b5af8-6bfe-44e0-83ed-22cf06deb895.png#align=left&amp;display=inline&amp;height=400&amp;name=image.png&amp;originHeight=400&amp;originWidth=720&amp;size=11329&amp;status=done&amp;width=720\" alt=\"image.png\"><br>选择CentOS，然后回车，系统将自动安装</p>\n<p><a name=\"11e7dd08\"></a></p>\n<h2 id=\"优化配置\"><a href=\"#优化配置\" class=\"headerlink\" title=\"优化配置\"></a>优化配置</h2><p><a name=\"332f378a\"></a></p>\n<h3 id=\"CentOS-ks\"><a href=\"#CentOS-ks\" class=\"headerlink\" title=\"CentOS ks\"></a>CentOS ks</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile report --name CentOS-7.6.1810-x86_64</span></span><br><span class=\"line\">Name                           : CentOS-7.6.1810-x86_64</span><br><span class=\"line\"><span class=\"comment\">#//...忽略</span></span><br><span class=\"line\">Kickstart                      : /var/lib/cobbler/kickstarts/sample_end.ks</span><br><span class=\"line\"><span class=\"comment\">#//...忽略</span></span><br><span class=\"line\"><span class=\"comment\">#//复制一份ks，并且进行修改</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp /var/lib/cobbler/kickstarts/sample_end.ks /var/lib/cobbler/kickstarts/centos-7-6.ks</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name CentOS-7.6.1810-x86_64  --kickstart=/var/lib/cobbler/kickstarts/centos-7-6.ks</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp /var/lib/cobbler/kickstarts/sample.seed /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name ubuntu-16.04.5-server-x86_64  --kickstart=/var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed</span></span><br></pre></td></tr></table></figure>\n<p>具体CentOS的ks语法可以参考这里：<a href=\"https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax\" target=\"_blank\" rel=\"noopener\">KICKSTART 语法参考</a>。另外可以参考 <a href=\"https://www.kancloud.cn/devops-centos/centos-linux-devops/392369\" target=\"_blank\" rel=\"noopener\">运维工作笔记-Cobbler 配置文件</a><br>具体Ubuntu的Preseed可以参考这里：<a href=\"https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn\" target=\"_blank\" rel=\"noopener\">Preseed语法参考</a>。</p>\n<p>吐槽一下，cobbler代码中检测到是ubuntu时，会自动将ks换成url(强制走preseed)，而用惯了ks的，用preseed还是很不习惯的，可以看一下 <a href=\"https://github.com/cobbler/cobbler/issues/1262\" target=\"_blank\" rel=\"noopener\">Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) </a>和 <a href=\"https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html\" target=\"_blank\" rel=\"noopener\">Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles</a><br>此处贴一下 /var/lib/cobbler/kickstarts/ubuntu-16-4-5.seed </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mostly based on the Ubuntu installation guide</span></span><br><span class=\"line\"><span class=\"comment\"># https://help.ubuntu.com/16.04/installation-guide/</span></span><br><span class=\"line\"><span class=\"comment\"># Debian sample</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.debian.org/releases/stable/example-preseed.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 1. Localization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Preseeding only locale sets language, country and locale.</span></span><br><span class=\"line\">d-i debian-installer/locale string en_US</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keyboard selection.</span></span><br><span class=\"line\"><span class=\"comment\"># Disable automatic (interactive) keymap detection.</span></span><br><span class=\"line\">d-i console-setup/ask_detect boolean <span class=\"literal\">false</span></span><br><span class=\"line\">d-i keyboard-configuration/toggle select No toggling</span><br><span class=\"line\">d-i keyboard-configuration/layoutcode string us</span><br><span class=\"line\">d-i keyboard-configuration/variantcode string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 2. Network configuration</span></span><br><span class=\"line\"><span class=\"comment\"># netcfg will choose an interface that has link if possible. This makes it</span></span><br><span class=\"line\"><span class=\"comment\"># skip displaying a list if there is more than one interface.</span></span><br><span class=\"line\"><span class=\"comment\">#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace(\"_\",\"-\")</span></span><br><span class=\"line\">d-i netcfg/choose_interface select auto</span><br><span class=\"line\">d-i netcfg/get_hostname string <span class=\"variable\">$myhostname</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If non-free firmware is needed for the network or other hardware, you can</span></span><br><span class=\"line\"><span class=\"comment\"># configure the installer to always try to load it, without prompting. Or</span></span><br><span class=\"line\"><span class=\"comment\"># change to false to disable asking.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i hw-detect/load_firmware boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 3 NTP/Time</span></span><br><span class=\"line\"><span class=\"comment\"># NTP/Time Setup</span></span><br><span class=\"line\">d-i time/zone string Asia/Shanghai</span><br><span class=\"line\">d-i clock-setup/utc boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i clock-setup/ntp boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i clock-setup/ntp-server  string ntp1.aliyun.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 4. Mirror settings</span></span><br><span class=\"line\"><span class=\"comment\"># Setup the installation source</span></span><br><span class=\"line\">d-i mirror/country string manual</span><br><span class=\"line\">d-i mirror/http/hostname string <span class=\"variable\">$http_server</span></span><br><span class=\"line\">d-i mirror/http/directory string <span class=\"variable\">$install_source_directory</span></span><br><span class=\"line\">d-i mirror/http/proxy string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#set $os_v = $getVar('os_version','')</span></span><br><span class=\"line\"><span class=\"comment\">#if $breed == \"ubuntu\" and $os_v and ($os_v.lower()[0] &gt; 'p' or $os_v.lower()[0] &lt; 'd')</span></span><br><span class=\"line\"><span class=\"comment\"># Required at least for ubuntu 12.10+ , so test os_v is higher than precise and lower than drapper</span></span><br><span class=\"line\">d-i live-installer/net-image string http://<span class=\"variable\">$http_server</span>/cobbler/links/<span class=\"variable\">$distro_name</span>/install/filesystem.squashfs</span><br><span class=\"line\"><span class=\"comment\">#end if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Suite to install.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i mirror/suite string precise</span></span><br><span class=\"line\"><span class=\"comment\"># d-i mirror/udeb/suite string precise</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Components to use for loading installer components (optional).</span></span><br><span class=\"line\"><span class=\"comment\">#d-i mirror/udeb/components multiselect main, restricted</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 4. Partitioning</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disk Partitioning</span></span><br><span class=\"line\"><span class=\"comment\"># Use LVM, and wipe out anything that already exists</span></span><br><span class=\"line\">d-i partman/choose_partition select finish</span><br><span class=\"line\">d-i partman/confirm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman/confirm_nooverwrite boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-auto/method string lvm</span><br><span class=\"line\">d-i partman-lvm/device_remove_lvm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-lvm/confirm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-lvm/confirm_nooverwrite boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-md/device_remove_md boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-partitioning/confirm_write_new_label boolean <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can choose one of the three predefined partitioning recipes:</span></span><br><span class=\"line\"><span class=\"comment\"># - atomic: all files in one partition</span></span><br><span class=\"line\"><span class=\"comment\"># - home:   separate /home partition</span></span><br><span class=\"line\"><span class=\"comment\"># - multi:  separate /home, /usr, /var, and /tmp partitions</span></span><br><span class=\"line\">d-i partman-auto/choose_recipe select atomic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you just want to change the default filesystem from ext3 to something</span></span><br><span class=\"line\"><span class=\"comment\"># else, you can do that without providing a full recipe.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i partman/default_filesystem string ext4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 5. Account setup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># root account and password</span></span><br><span class=\"line\">d-i passwd/root-login boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i passwd/root-password-crypted password <span class=\"variable\">$default_password_crypted</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># skip creation of a normal user account.</span></span><br><span class=\"line\">d-i passwd/make-user boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i passwd/user-fullname  string anjia</span><br><span class=\"line\">d-i passwd/username       string anjia</span><br><span class=\"line\">d-i passwd/user-password-crypted password <span class=\"variable\">$default_password_crypted</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 6. Apt setup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can choose to install restricted and universe software, or to install</span></span><br><span class=\"line\"><span class=\"comment\"># software from the backports repository.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/restricted boolean true</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/universe boolean true</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/backports boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you don't want to use a network mirror.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/use_mirror boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Select which update services to use; define the mirrors to be used.</span></span><br><span class=\"line\"><span class=\"comment\"># Values shown below are the normal defaults.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/services-select multiselect security</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/security_host string mirrors.aliyun.com</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/security_path string /ubuntu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$SNIPPET</span>(<span class=\"string\">'preseed_apt_repo_config'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable deb-src lines</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/local0/source boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL to the public key of the local repository; you must provide a key or</span></span><br><span class=\"line\"><span class=\"comment\"># apt will complain about the unauthenticated repository and so the</span></span><br><span class=\"line\"><span class=\"comment\"># sources.list line will be left commented out</span></span><br><span class=\"line\"><span class=\"comment\"># d-i apt-setup/local0/key string http://local.server/key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># By default the installer requires that repositories be authenticated</span></span><br><span class=\"line\"><span class=\"comment\"># using a known gpg key. This setting can be used to disable that</span></span><br><span class=\"line\"><span class=\"comment\"># authentication. Warning: Insecure, not recommended.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i debian-installer/allow_unauthenticated boolean true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Part 7. Package selection</span></span><br><span class=\"line\"><span class=\"comment\"># Default for minimal</span></span><br><span class=\"line\">tasksel tasksel/first multiselect standard</span><br><span class=\"line\"><span class=\"comment\"># Default for server</span></span><br><span class=\"line\"><span class=\"comment\"># tasksel tasksel/first multiselect standard, web-server</span></span><br><span class=\"line\"><span class=\"comment\"># Default for gnome-desktop</span></span><br><span class=\"line\"><span class=\"comment\"># tasksel tasksel/first multiselect standard, gnome-desktop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Individual additional packages to install</span></span><br><span class=\"line\"><span class=\"comment\"># wget is REQUIRED otherwise quite a few things won't work</span></span><br><span class=\"line\"><span class=\"comment\"># later in the build (like late-command scripts)</span></span><br><span class=\"line\">d-i pkgsel/include string ntp ssh wget </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Debian needs this for the installer to avoid any question for grub</span></span><br><span class=\"line\"><span class=\"comment\"># Please verify that it suit your needs as it may overwrite any usb stick</span></span><br><span class=\"line\"><span class=\"comment\">#if $breed == \"debian\"</span></span><br><span class=\"line\">d-i grub-installer/grub2_instead_of_grub_legacy boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i grub-installer/bootdev string default</span><br><span class=\"line\"><span class=\"comment\">#end if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Use the following option to add additional boot parameters for the</span></span><br><span class=\"line\"><span class=\"comment\"># installed system (if supported by the bootloader installer).</span></span><br><span class=\"line\"><span class=\"comment\"># Note: options passed to the installer will be added automatically.</span></span><br><span class=\"line\">d-i debian-installer/add-kernel-opts string <span class=\"variable\">$kernel_options_post</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Avoid that last message about the install being complete.</span></span><br><span class=\"line\">d-i finish-install/reboot_in_progress note</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Figure out if we're kickstarting a system or a profile</span></span><br><span class=\"line\"><span class=\"comment\">#if $getVar('system_name','') != ''</span></span><br><span class=\"line\"><span class=\"comment\">#set $what = \"system\"</span></span><br><span class=\"line\"><span class=\"comment\">#else</span></span><br><span class=\"line\"><span class=\"comment\">#set $what = \"profile\"</span></span><br><span class=\"line\"><span class=\"comment\">#end if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This first command is run as early as possible, just after preseeding is read.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i preseed/early_command string [command]</span></span><br><span class=\"line\">d-i preseed/early_command string wget -O- \\</span><br><span class=\"line\">   http://<span class=\"variable\">$http_server</span>/cblr/svc/op/script/<span class=\"variable\">$what</span>/<span class=\"variable\">$name</span>/?script=preseed_early_default | \\</span><br><span class=\"line\">   /bin/sh -s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This command is run immediately before the partitioner starts. It may be</span></span><br><span class=\"line\"><span class=\"comment\"># useful to apply dynamic partitioner preseeding that depends on the state</span></span><br><span class=\"line\"><span class=\"comment\"># of the disks (which may not be visible when preseed/early_command runs).</span></span><br><span class=\"line\"><span class=\"comment\"># d-i partman/early_command \\</span></span><br><span class=\"line\"><span class=\"comment\">#       string debconf-set partman-auto/disk \"\\$(list-devices disk | head -n1)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This command is run just before the install finishes, but when there is</span></span><br><span class=\"line\"><span class=\"comment\"># still a usable /target directory. You can chroot to /target and use it</span></span><br><span class=\"line\"><span class=\"comment\"># directly, or use the apt-install and in-target commands to easily install</span></span><br><span class=\"line\"><span class=\"comment\"># packages and run commands in the target system.</span></span><br><span class=\"line\"><span class=\"comment\"># d-i preseed/late_command string [command]</span></span><br><span class=\"line\">d-i preseed/late_command string wget -O- \\</span><br><span class=\"line\">   http://<span class=\"variable\">$http_server</span>/cblr/svc/op/script/<span class=\"variable\">$what</span>/<span class=\"variable\">$name</span>/?script=preseed_late_default | \\</span><br><span class=\"line\">   chroot /target /bin/sh -s</span><br></pre></td></tr></table></figure>\n<p><a name=\"516808f3\"></a></p>\n<h3 id=\"创建snippets\"><a href=\"#创建snippets\" class=\"headerlink\" title=\"创建snippets\"></a>创建snippets</h3><p>安装完后，自动安装软件,参考 <a href=\"https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds\" target=\"_blank\" rel=\"noopener\">Using template scripts for Debian and Ubuntu seeds</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tee /var/lib/cobbler/snippets/ubuntu_apt_install_soft &lt;&lt;-'EOF'</span></span><br><span class=\"line\"></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y language-pack-zh-hans apt-transport-https ca-certificates software-properties-common  git ansible openssh-server vim curl htop iotop iftop ncdu</span><br><span class=\"line\"></span><br><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">\"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"variable\">$(lsb_release -cs)</span> stable\"</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install -y docker-ce=18.06.2~ce~3-0~ubuntu</span><br><span class=\"line\">apt-mark hold docker-ce</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## // d-i preseed/late_command 阶段执行</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># echo '$SNIPPET(\"ubuntu_apt_install_soft\") &gt;&gt; /var/lib/cobbler/snippets/late_apt_repo_config</span></span><br></pre></td></tr></table></figure></p>\n<p><a name=\"2a68d258\"></a></p>\n<h3 id=\"设置ubuntu-package-repo\"><a href=\"#设置ubuntu-package-repo\" class=\"headerlink\" title=\"设置ubuntu package repo\"></a>设置ubuntu package repo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler repo edit --name=ubuntu-16.04.5-server-x86_64 --arch=x86_64 --breed=apt --mirror=http://mirrors.aliyun.com/ubuntu --owners=admin --mirror-locally=False --apt-components='main universe' --apt-dists='xenial xenial-updates xenial-security'</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile edit --name=ubuntu-16.04.5-server-x86_64 --repos=ubuntu-16.04.5-server-x86_64</span></span><br></pre></td></tr></table></figure>\n<p>限于篇幅，下一篇，将介绍Cobbler安装Windows</p>\n<p><a name=\"a08138fa\"></a></p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">cobblerd does not appear to be running/accessible: error(111, <span class=\"string\">'Connection refused'</span>)</span><br></pre></td></tr></table></figure>\n<p>原因：未启动相关服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler check</span></span><br><span class=\"line\">httpd does not appear to be running and proxying cobbler, or SELinux is <span class=\"keyword\">in</span> the way. Original traceback:</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/cli.py\"</span>, line 251, <span class=\"keyword\">in</span> check_setup</span><br><span class=\"line\">    s.ping()</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1233, <span class=\"keyword\">in</span> __call__</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self.__send(self.__name, args)</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1591, <span class=\"keyword\">in</span> __request</span><br><span class=\"line\">    verbose=self.__verbose</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1273, <span class=\"keyword\">in</span> request</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self.single_request(host, handler, request_body, verbose)</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib64/python2.7/xmlrpclib.py\"</span>, line 1321, <span class=\"keyword\">in</span> single_request</span><br><span class=\"line\">    response.msg,</span><br><span class=\"line\">ProtocolError: &lt;ProtocolError <span class=\"keyword\">for</span> 127.0.0.1:80/cobbler_api: 503 Service Unavailable&gt;</span><br></pre></td></tr></table></figure>\n<p>未关闭防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler sync</span></span><br><span class=\"line\">received on stderr: Redirecting to /bin/systemctl restart dhcpd.service</span><br><span class=\"line\">Job <span class=\"keyword\">for</span> dhcpd.service failed because the control process exited with error code. See <span class=\"string\">\"systemctl status dhcpd.service\"</span> and <span class=\"string\">\"journalctl -xe\"</span> <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br><span class=\"line\">Exception occured: &lt;class <span class=\"string\">'cobbler.cexceptions.CX'</span>&gt;</span><br><span class=\"line\">Exception value: <span class=\"string\">'cobbler trigger failed: cobbler.modules.sync_post_restart_services'</span></span><br><span class=\"line\">Exception Info:</span><br><span class=\"line\">  File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/remote.py\"</span>, line 82, <span class=\"keyword\">in</span> run</span><br><span class=\"line\">    rc = self._run(self)</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/remote.py\"</span>, line 181, <span class=\"keyword\">in</span> runner</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self.remote.api.sync(self.options.get(<span class=\"string\">\"verbose\"</span>,False),logger=self.logger)</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/api.py\"</span>, line 763, <span class=\"keyword\">in</span> sync</span><br><span class=\"line\">    <span class=\"built_in\">return</span> sync.run()</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/action_sync.py\"</span>, line 144, <span class=\"keyword\">in</span> run</span><br><span class=\"line\">    utils.run_triggers(self.api, None, <span class=\"string\">\"/var/lib/cobbler/triggers/sync/post/*\"</span>, logger=self.logger)</span><br><span class=\"line\">   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/cobbler/utils.py\"</span>, line 928, <span class=\"keyword\">in</span> run_triggers</span><br><span class=\"line\">    raise CX(<span class=\"string\">\"cobbler trigger failed: %s\"</span> % m.__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">!!! TASK FAILED !!!</span><br></pre></td></tr></table></figure>\n<p>没改dhcp模板，导致sync同步出问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /var/log/httpd/ssl_error_log</span></span><br><span class=\"line\">[Fri Feb 22 20:07:49.460442 2019] [:error] [pid 6910] [remote 127.0.0.1:204] mod_wsgi (pid=6910): Exception occurred processing WSGI script <span class=\"string\">'/usr/share/cobbler/web/cobbler.wsgi'</span>.</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460559 2019] [:error] [pid 6910] [remote 127.0.0.1:204] Traceback (most recent call last):</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460605 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/share/cobbler/web/cobbler.wsgi\"</span>, line 26, <span class=\"keyword\">in</span> application</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460668 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     _application = get_wsgi_application()</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460684 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/core/wsgi.py\"</span>, line 13, <span class=\"keyword\">in</span> get_wsgi_application</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460723 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     django.setup(set_prefix=False)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460737 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/__init__.py\"</span>, line 22, <span class=\"keyword\">in</span> setup</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460768 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460781 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/conf/__init__.py\"</span>, line 56, <span class=\"keyword\">in</span> __getattr__</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460812 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._setup(name)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460824 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/conf/__init__.py\"</span>, line 41, <span class=\"keyword\">in</span> _setup</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460852 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     self._wrapped = Settings(settings_module)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460871 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib/python2.7/site-packages/django/conf/__init__.py\"</span>, line 110, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460900 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     mod = importlib.import_module(self.SETTINGS_MODULE)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460911 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/lib64/python2.7/importlib/__init__.py\"</span>, line 37, <span class=\"keyword\">in</span> import_module</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460953 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     __import__(name)</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460973 2019] [:error] [pid 6910] [remote 127.0.0.1:204]   File <span class=\"string\">\"/usr/share/cobbler/web/settings.py\"</span>, line 89, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">[Fri Feb 22 20:07:49.460995 2019] [:error] [pid 6910] [remote 127.0.0.1:204]     from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS</span><br><span class=\"line\">[Fri Feb 22 20:07:49.461043 2019] [:error] [pid 6910] [remote 127.0.0.1:204] ImportError: cannot import name TEMPLATE_CONTEXT_PROCESSORS</span><br></pre></td></tr></table></figure>\n<p><code>pip2.7 install -U django==1.9.13</code> </p>\n<p><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://access.redhat.com/documentation/en-us/red_hat_network_satellite/5.3/html/reference_guide/ch-cobbler#s3-cobbler-reqs-security-iptables\" target=\"_blank\" rel=\"noopener\">配置防火墙</a></li>\n<li><a href=\"https://github.com/cobbler/cobbler/issues/1959\" target=\"_blank\" rel=\"noopener\">cobbler 2.8.4/2.8.0 on centos 7 error</a></li>\n<li><a href=\"https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax\" target=\"_blank\" rel=\"noopener\">KICKSTART 语法参考</a></li>\n<li><a href=\"https://www.kancloud.cn/devops-centos/centos-linux-devops/392369\" target=\"_blank\" rel=\"noopener\">运维工作笔记-Cobbler 配置文件</a></li>\n<li><a href=\"https://www.debian.org/releases/stable/amd64/apbs04.html.zh-cn\" target=\"_blank\" rel=\"noopener\">Preseed语法参考</a></li>\n<li><a href=\"https://github.com/cobbler/cobbler/issues/1262\" target=\"_blank\" rel=\"noopener\">Support selection of automatic installation file format in distros which allow it (Debian/Ubuntu allows kickstart and preseed) </a></li>\n<li><a href=\"https://thornelabs.blog/posts/problems-provisioning-ubuntu-with-cobbler-and-kickstart-profiles.html\" target=\"_blank\" rel=\"noopener\">Problems Provisioning Ubuntu with Cobbler and Kickstart Profiles</a></li>\n<li><a href=\"https://github.com/cobbler/cobbler/wiki/Using%20template%20scripts%20for%20Debian%20and%20Ubuntu%20seeds\" target=\"_blank\" rel=\"noopener\">Using template scripts for Debian and Ubuntu seeds</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"007-Cobbler批量自动化部署Windows10和Server 2019","date":"2019-02-22T07:46:00.000Z","_content":"\n> 这是坚持技术写作计划（含翻译）的第7篇，定个小目标999，每周最少2篇。\n\n\n本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows 10 和 Windows Server 2019。\n\n请注意，一般安装windows是用[MDT](https://docs.microsoft.com/zh-cn/windows/deployment/deploy-windows-mdt/deploy-a-windows-10-image-using-mdt)或者WDS居多，毕竟是巨硬自己家的，而且WDT还支持分布式镜像传输（主要是巨硬家的OS，动辄超过4G，万兆网卡也会卡啊）。本文不涉及到WDT或者WDS相关操作，感兴趣的可自行百度或者msdn。\n\n<a name=\"424a2ad8\"></a>\n## 准备\n\n- [Windows ADK](https://docs.microsoft.com/zh-cn/windows-hardware/get-started/adk-install#winADK) (分别下载 [Download the Windows ADK for Windows 10, version 1809](https://go.microsoft.com/fwlink/?linkid=2026036) 和 [Download the Windows PE add-on for the ADK](https://go.microsoft.com/fwlink/?linkid=2022233))\n- 下载 [Windows 10 (business edition), version 1809 (Updated Feb 2019) (x64) - DVD (Chinese-Simplified)](http://msdn.itellyou.cn/)[ ](http://msdn.itellyou.cn/)\n- 下载 [Windows Server 2019 (x64) - DVD (Chinese-Simplified)](http://msdn.itellyou.cn/)\n\n注意，adk的两个都要下载，这俩都是引导包，真正的安装程序会由这俩软件进行下载。其中WinPE需要用到5G左右的磁盘空间，简直不能忍受。。。<br />msdn i tell u 堪称良心站，是windows装机神站啊，不过，没有直达页面挺不爽。为了防止下错，特意截图。<br />![Snipaste_2019-02-25_22-18-07.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551104465714-66f42f29-fbcf-476f-b2e7-b1f3a6fb319b.png#align=left&display=inline&height=365&name=Snipaste_2019-02-25_22-18-07.png&originHeight=573&originWidth=1171&size=143092&status=done&width=746)\n\n<a name=\"9639c173\"></a>\n## 安装ADK和WinPE\n我已经装过，且忘记截图了，这是事后补图，只需要勾选必须的就行<br />![Snipaste_2019-02-25_22-32-48.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181245-e9b47d7d-e1b3-48f8-918e-42cdff955406.png#align=left&display=inline&height=548&name=Snipaste_2019-02-25_22-32-48.png&originHeight=548&originWidth=746&size=36472&status=done&width=746)![Snipaste_2019-02-25_22-32-20.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181277-4477f2fc-1cfe-414c-9178-c30ae74e725c.png#align=left&display=inline&height=548&name=Snipaste_2019-02-25_22-32-20.png&originHeight=548&originWidth=746&size=52141&status=done&width=746)\n\n安装完后，以管理员身份打开部署和映像工具环境\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551105055491-d302cb36-bb44-4359-8fb5-c7342e9854fa.png#align=left&display=inline&height=425&name=image.png&originHeight=425&originWidth=613&size=193121&status=done&width=613)\n\n定制Win 10 PE \n\n```bash\ncopype amd64 C:\\winpe\n\nDism /mount-image /imagefile:C:\\winpe\\media\\sources\\boot.wim /index:1 /mountdir:C:\\winpe\\mount\n\necho net use z: \\\\192.168.0.253\\share >> C:\\winpe\\mount\\Windows\\System32\\startnet.cmd\necho z:\\win\\setup.exe /unattend:z:\\win\\win10_x64_bios_auto.xml >> C:\\winpe\\mount\\Windows\\System32\\startnet.cmd\n\nDism /unmount-image /mountdir:C:\\winpe\\mount /commit\nMakeWinPEMedia /ISO C:\\winpe C:\\winpe\\winpe_win10_amd64.iso\n```\n\n1. 本地生成winpe文件目录\n1. dism 挂载 winpe的启动文件到winpe的mount目录\n1. 将启动命令硬编码写死到winpe的startnet.cmd文件里\n1. 无人值守安装\n1. 卸载winpe的挂载（一定要执行，否则直接强制删除文件夹会出一些稀奇古怪的问题）\n1. 制作win10镜像，名为 winpe_win10_amd64.iso\n\n第三步的硬编码是无奈之举，因为要想挂载共享文件夹，必须要知道smb主机，但是这个参数又很难传递进来。<br />如果是U盘启动，可以写死U盘路径，大不了插上U盘后，手动改卷标(当然因为U盘挂载顺序不一致，可以通过for循环A-Z盘，挨个盘访问某个文件名，如果存在，即认为此盘是自己U盘，设置环境变量)。而网上说的，startnet.cmd调用另外一个bat，多是基于这个原理。\n\n而如果PXE要达到跟上述要求，动态设置smb主机，要么写死域名，然后劫持或者配置域名，加上bat文件，在winpe启动时，通过startnet.cmd下载，并执行。要么找办法，看看能不能在启动时，传入参数（目前我还没找到），当然还可以用MDT方案，看着比PXE+无人应答文件简单很多。\n\n<a name=\"d36faa4b\"></a>\n## 配置Cobbler Server\n\n<a name=\"42b542e5\"></a>\n### 导入Cobbler\n使用WinScp 等工具，将 winpe_win10_amd64.iso 上传到 Cobbler 服务器上\n\n```bash\n[root@localhost ~]# cobbler distro add --name=windows_10_x64 --kernel=/var/lib/tftpboot/memdisk --initrd=/root/winpe_win10_amd64.iso --kopts=\"raw iso\"\n[root@localhost ~]# touch /var/lib/cobbler/kickstarts/winpe.xml\n[root@localhost ~]# cobbler profile add --name=windows_10_x64 --distro=windows_10_x64 --kickstart=/var/lib/cobbler/kickstarts/winpe.xml\n```\n\n\n<a name=\"b15fbfd6\"></a>\n### 创建自动应答文件\n直接从 [Windows Answer File Generator#win10_x86_64](http://www.windowsafg.com/win10x86_x64.html) 通过简单配置后，下载即可（只支持简单操作，比如，装系统，格式化磁盘，设置密码等）。当然也可以使用 【Windows系统映像管理器】，不过挺难用的，具体用法可以参考 [How to create an unattended installation of Windows 10](https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10)。也可以通过MDT简化操作。\n\n但是如果使用直接生成的，有点问题，即使页面设置了安装语言，但是仍旧需要手动选择，经过多方研究，发现<br />主要卡在UILanguage和Inputlocale上，全写zh-CN无效。\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<component 此处忽略>\n  <SetupUILanguage>\n    <UILanguage>en-US</UILanguage>\n  </SetupUILanguage>\n  <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale> \n  <SystemLocale>zh-CN</SystemLocale>\n  <UILanguage>zh-CN</UILanguage>\n  <UILanguageFallback>zh-CN</UILanguageFallback>\n  <UserLocale>zh-CN</UserLocale>\n</component>\n\n```\n\n另外就是安装密钥,统一替换为 VK7JG-NPHTM-C97JM-9MPGT-3V66T\n\n下面是我的应答文件，仅做参考。\n\n```bash\n<!--*************************************************\nWindows 10 Answer File Generator\nCreated using Windows AFG found at:\n;http://www.windowsafg.com\n\nInstallation Notes\nLocation: zh-CN\nNotes: Enter your comments here...\n**************************************************-->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend\n    xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SetupUILanguage>\n                <UILanguage>en-US</UILanguage>\n            </SetupUILanguage>\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SetupUILanguage>\n                <UILanguage>en-US</UILanguage>\n            </SetupUILanguage>\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <DiskConfiguration>\n                <Disk wcm:action=\"add\">\n                    <CreatePartitions>\n                        <CreatePartition wcm:action=\"add\">\n                            <Order>1</Order>\n                            <Type>Primary</Type>\n                            <Size>100</Size>\n                        </CreatePartition>\n                        <CreatePartition wcm:action=\"add\">\n                            <Extend>true</Extend>\n                            <Order>2</Order>\n                            <Type>Primary</Type>\n                        </CreatePartition>\n                    </CreatePartitions>\n                    <ModifyPartitions>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>System Reserved</Label>\n                            <Order>1</Order>\n                            <PartitionID>1</PartitionID>\n                            <TypeID>0x27</TypeID>\n                        </ModifyPartition>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>OS</Label>\n                            <Letter>C</Letter>\n                            <Order>2</Order>\n                            <PartitionID>2</PartitionID>\n                        </ModifyPartition>\n                    </ModifyPartitions>\n                    <DiskID>0</DiskID>\n                    <WillWipeDisk>true</WillWipeDisk>\n                </Disk>\n            </DiskConfiguration>\n            <ImageInstall>\n                <OSImage>\n                    <InstallTo>\n                        <DiskID>0</DiskID>\n                        <PartitionID>2</PartitionID>\n                    </InstallTo>\n                    <InstallToAvailablePartition>false</InstallToAvailablePartition>\n                </OSImage>\n            </ImageInstall>\n            <UserData>\n                <AcceptEula>true</AcceptEula>\n                <FullName>AnJia</FullName>\n                <Organization>AnJia</Organization>\n                <ProductKey>\n                    <Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>\n                </ProductKey>\n            </UserData>\n        </component>\n        <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <DiskConfiguration>\n                <Disk wcm:action=\"add\">\n                    <CreatePartitions>\n                        <CreatePartition wcm:action=\"add\">\n                            <Order>1</Order>\n                            <Type>Primary</Type>\n                            <Size>100</Size>\n                        </CreatePartition>\n                        <CreatePartition wcm:action=\"add\">\n                            <Extend>true</Extend>\n                            <Order>2</Order>\n                            <Type>Primary</Type>\n                        </CreatePartition>\n                    </CreatePartitions>\n                    <ModifyPartitions>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>System Reserved</Label>\n                            <Order>1</Order>\n                            <PartitionID>1</PartitionID>\n                            <TypeID>0x27</TypeID>\n                        </ModifyPartition>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>OS</Label>\n                            <Letter>C</Letter>\n                            <Order>2</Order>\n                            <PartitionID>2</PartitionID>\n                        </ModifyPartition>\n                    </ModifyPartitions>\n                    <DiskID>0</DiskID>\n                    <WillWipeDisk>true</WillWipeDisk>\n                </Disk>\n            </DiskConfiguration>\n            <ImageInstall>\n                <OSImage>\n                    <InstallTo>\n                        <DiskID>0</DiskID>\n                        <PartitionID>2</PartitionID>\n                    </InstallTo>\n                    <InstallToAvailablePartition>false</InstallToAvailablePartition>\n                </OSImage>\n            </ImageInstall>\n            <UserData>\n                <AcceptEula>true</AcceptEula>\n                <FullName>AnJia</FullName>\n                <Organization>AnJia</Organization>\n                <ProductKey>\n                    <Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>\n                </ProductKey>\n            </UserData>\n        </component>\n    </settings>\n    <settings pass=\"offlineServicing\">\n        <component name=\"Microsoft-Windows-LUA-Settings\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <EnableLUA>false</EnableLUA>\n        </component>\n    </settings>\n    <settings pass=\"offlineServicing\">\n        <component name=\"Microsoft-Windows-LUA-Settings\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <EnableLUA>false</EnableLUA>\n        </component>\n    </settings>\n    <settings pass=\"generalize\">\n        <component name=\"Microsoft-Windows-Security-SPP\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipRearm>1</SkipRearm>\n        </component>\n    </settings>\n    <settings pass=\"generalize\">\n        <component name=\"Microsoft-Windows-Security-SPP\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipRearm>1</SkipRearm>\n        </component>\n    </settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipAutoActivation>true</SkipAutoActivation>\n        </component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipAutoActivation>true</SkipAutoActivation>\n        </component>\n        <component name=\"Microsoft-Windows-SQMApi\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <CEIPEnabled>0</CEIPEnabled>\n        </component>\n        <component name=\"Microsoft-Windows-SQMApi\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <CEIPEnabled>0</CEIPEnabled>\n        </component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <ComputerName>AnJia-PC</ComputerName>\n            <ProductKey>VK7JG-NPHTM-C97JM-9MPGT-3V66T</ProductKey>\n        </component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <ComputerName>AnJia-PC</ComputerName>\n            <ProductKey>VK7JG-NPHTM-C97JM-9MPGT-3V66T</ProductKey>\n        </component>\n    </settings>\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <AutoLogon>\n                <Password>\n                    <Value></Value>\n                    <PlainText>true</PlainText>\n                </Password>\n                <Enabled>true</Enabled>\n                <Username>AnJia</Username>\n            </AutoLogon>\n            <OOBE>\n                <HideEULAPage>true</HideEULAPage>\n                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>\n                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>\n                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>\n                <NetworkLocation>Work</NetworkLocation>\n                <SkipUserOOBE>true</SkipUserOOBE>\n                <SkipMachineOOBE>true</SkipMachineOOBE>\n                <ProtectYourPC>1</ProtectYourPC>\n            </OOBE>\n            <UserAccounts>\n                <LocalAccounts>\n                    <LocalAccount wcm:action=\"add\">\n                        <Password>\n                            <Value></Value>\n                            <PlainText>true</PlainText>\n                        </Password>\n                        <Description>AnJia</Description>\n                        <DisplayName>AnJia</DisplayName>\n                        <Group>Administrators</Group>\n                        <Name>AnJia</Name>\n                    </LocalAccount>\n                </LocalAccounts>\n            </UserAccounts>\n            <RegisteredOrganization>AnJia</RegisteredOrganization>\n            <RegisteredOwner>AnJia</RegisteredOwner>\n            <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Description>Control Panel View</Description>\n                    <Order>1</Order>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v StartupPage /t REG_DWORD /d 1 /f</CommandLine>\n                    <RequiresUserInput>true</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2</Order>\n                    <Description>Control Panel Icon Size</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v AllItemsIconView /t REG_DWORD /d 0 /f</CommandLine>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>3</Order>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>cmd /C wmic useraccount where name=\"AnJia\" set PasswordExpires=false</CommandLine>\n                    <Description>Password Never Expires</Description>\n                </SynchronousCommand>\n            </FirstLogonCommands>\n            <TimeZone>China Standard Time</TimeZone>\n        </component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <AutoLogon>\n                <Password>\n                    <Value></Value>\n                    <PlainText>true</PlainText>\n                </Password>\n                <Enabled>true</Enabled>\n                <Username>AnJia</Username>\n            </AutoLogon>\n            <OOBE>\n                <HideEULAPage>true</HideEULAPage>\n                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>\n                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>\n                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>\n                <NetworkLocation>Work</NetworkLocation>\n                <SkipUserOOBE>true</SkipUserOOBE>\n                <SkipMachineOOBE>true</SkipMachineOOBE>\n                <ProtectYourPC>1</ProtectYourPC>\n            </OOBE>\n            <UserAccounts>\n                <LocalAccounts>\n                    <LocalAccount wcm:action=\"add\">\n                        <Password>\n                            <Value></Value>\n                            <PlainText>true</PlainText>\n                        </Password>\n                        <Description>AnJia</Description>\n                        <DisplayName>AnJia</DisplayName>\n                        <Group>Administrators</Group>\n                        <Name>AnJia</Name>\n                    </LocalAccount>\n                </LocalAccounts>\n            </UserAccounts>\n            <RegisteredOrganization>AnJia</RegisteredOrganization>\n            <RegisteredOwner>AnJia</RegisteredOwner>\n            <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Description>Control Panel View</Description>\n                    <Order>1</Order>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v StartupPage /t REG_DWORD /d 1 /f</CommandLine>\n                    <RequiresUserInput>true</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2</Order>\n                    <Description>Control Panel Icon Size</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v AllItemsIconView /t REG_DWORD /d 0 /f</CommandLine>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>3</Order>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>cmd /C wmic useraccount where name=\"AnJia\" set PasswordExpires=false</CommandLine>\n                    <Description>Password Never Expires</Description>\n                </SynchronousCommand>\n            </FirstLogonCommands>\n            <TimeZone>China Standard Time</TimeZone>\n        </component>\n    </settings>\n</unattend>\n```\n\n<a name=\"727af9d3\"></a>\n### 配置samba\n在Cobbler上执行\n<a name=\"0125c65d\"></a>\n#### 安装samba\n```bash\n[root@localhost ~]# yum install samba -y\n```\n<a name=\"6f1032ee\"></a>\n#### 修改smb config\n\n```bash\n[root@localhost ~]# vi /etc/samba/smb.conf\n \n# /etc/samba/smb.conf\n[global]\nlog file = /var/log/samba/log.%m\nmax log size = 5000\nsecurity = user\nguest account = nobody\nmap to guest = Bad User\nload printers = yes\ncups options = raw\n \n[share]\ncomment = share directory目录\npath = /smb/\ndirectory mask = 0755\ncreate mask = 0755\nguest ok=yes\nwritable=yes\n```\n\n<a name=\"9b9fd94f\"></a>\n#### 启动smb服务\n\n```bash\n[root@localhost ~]# service smb start\n[root@localhost ~]# systemctl enable smb\n```\n\n<a name=\"6e499122\"></a>\n#### 挂载win10系统\n通过winscp等软件将 cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso 上传到cobbler服务器上,并将创建的应答文件，上传到cobbler `/smb/win/win10_x64_bios_auto.xml` \n\n```bash\n[root@localhost ~]# mkdir -p /smb/win\n[root@localhost ~]# mount -o loop,ro /tmp/cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso /mnt/\n[root@localhost ~]# cp -r /mnt/* /smb/win\n[root@localhost ~]# umount /mnt/\n```\n\n<a name=\"a23d1d1f\"></a>\n### 自动化安装Windows10\n从vmware创建一台内存4G，cpu2核，磁盘60G的空盘，win10虚拟机，然后开机。记得选BIOS，别选UEFI。<br />![Snipaste_2019-02-26_00-05-00.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551110723753-c7785e92-60be-4a90-a606-96bc92306aaa.png#align=left&display=inline&height=400&name=Snipaste_2019-02-26_00-05-00.png&originHeight=400&originWidth=720&size=5025&status=done&width=720)\n\n![Snipaste_2019-02-25_23-44-27.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551110627345-af185562-5a0f-4b4c-98ef-68974880a6a3.png#align=left&display=inline&height=560&name=Snipaste_2019-02-25_23-44-27.png&originHeight=768&originWidth=1024&size=19684&status=done&width=746)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551112320786-fc312bb1-ce6c-4771-864f-e8900a1aed58.png#align=left&display=inline&height=768&name=image.png&originHeight=768&originWidth=1024&size=233953&status=done&width=1024)\n\n至于如何激活，参考  [vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发](http://bbs.pcbeta.com/viewthread-1796113-1-1.html)\n\n<a name=\"31f87578\"></a>\n## Windows Server 2019\n因为2019用的也是1809版本的，所以制作步骤一样的，在此不再赘述。\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [使用Cobbler批量部署Linux和Windows：Windows系统批量安装（三）](https://www.cnblogs.com/pluse/p/8508538.html)\n- [WINPE镜像制作-startnet.cmd详解](https://blog.csdn.net/greless/article/details/52815716)\n- [Windows 中的默认输入配置文件（输入区域设置）](https://msdn.microsoft.com/zh-cn/library/windows/hardware/dn898524(v=vs.85).aspx)\n- [Answer files (unattend.xml)](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs)\n- [Windows Answer File Generator#win10_x86_64](http://www.windowsafg.com/win10x86_x64.html)\n- [WinPE: Mount and Customize](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-mount-and-customize)\n- [Components](https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/components-b-unattend)\n- [How to create an unattended installation of Windows 10](https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10)\n-  [vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发](http://bbs.pcbeta.com/viewthread-1796113-1-1.html)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","source":"_posts/cobbler-win10-win-server-2019.md","raw":"\n---\n\ntitle: 007-Cobbler批量自动化部署Windows10和Server 2019\n\ndate: 2019-02-22 15:46:00 +0800\n\ntags: [pxe,dhcp,cobbler,centos,ubuntu,windows,tftp,win10,server-2019]\n\ncategories: 运维\n\n---\n\n> 这是坚持技术写作计划（含翻译）的第7篇，定个小目标999，每周最少2篇。\n\n\n本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows 10 和 Windows Server 2019。\n\n请注意，一般安装windows是用[MDT](https://docs.microsoft.com/zh-cn/windows/deployment/deploy-windows-mdt/deploy-a-windows-10-image-using-mdt)或者WDS居多，毕竟是巨硬自己家的，而且WDT还支持分布式镜像传输（主要是巨硬家的OS，动辄超过4G，万兆网卡也会卡啊）。本文不涉及到WDT或者WDS相关操作，感兴趣的可自行百度或者msdn。\n\n<a name=\"424a2ad8\"></a>\n## 准备\n\n- [Windows ADK](https://docs.microsoft.com/zh-cn/windows-hardware/get-started/adk-install#winADK) (分别下载 [Download the Windows ADK for Windows 10, version 1809](https://go.microsoft.com/fwlink/?linkid=2026036) 和 [Download the Windows PE add-on for the ADK](https://go.microsoft.com/fwlink/?linkid=2022233))\n- 下载 [Windows 10 (business edition), version 1809 (Updated Feb 2019) (x64) - DVD (Chinese-Simplified)](http://msdn.itellyou.cn/)[ ](http://msdn.itellyou.cn/)\n- 下载 [Windows Server 2019 (x64) - DVD (Chinese-Simplified)](http://msdn.itellyou.cn/)\n\n注意，adk的两个都要下载，这俩都是引导包，真正的安装程序会由这俩软件进行下载。其中WinPE需要用到5G左右的磁盘空间，简直不能忍受。。。<br />msdn i tell u 堪称良心站，是windows装机神站啊，不过，没有直达页面挺不爽。为了防止下错，特意截图。<br />![Snipaste_2019-02-25_22-18-07.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551104465714-66f42f29-fbcf-476f-b2e7-b1f3a6fb319b.png#align=left&display=inline&height=365&name=Snipaste_2019-02-25_22-18-07.png&originHeight=573&originWidth=1171&size=143092&status=done&width=746)\n\n<a name=\"9639c173\"></a>\n## 安装ADK和WinPE\n我已经装过，且忘记截图了，这是事后补图，只需要勾选必须的就行<br />![Snipaste_2019-02-25_22-32-48.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181245-e9b47d7d-e1b3-48f8-918e-42cdff955406.png#align=left&display=inline&height=548&name=Snipaste_2019-02-25_22-32-48.png&originHeight=548&originWidth=746&size=36472&status=done&width=746)![Snipaste_2019-02-25_22-32-20.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181277-4477f2fc-1cfe-414c-9178-c30ae74e725c.png#align=left&display=inline&height=548&name=Snipaste_2019-02-25_22-32-20.png&originHeight=548&originWidth=746&size=52141&status=done&width=746)\n\n安装完后，以管理员身份打开部署和映像工具环境\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551105055491-d302cb36-bb44-4359-8fb5-c7342e9854fa.png#align=left&display=inline&height=425&name=image.png&originHeight=425&originWidth=613&size=193121&status=done&width=613)\n\n定制Win 10 PE \n\n```bash\ncopype amd64 C:\\winpe\n\nDism /mount-image /imagefile:C:\\winpe\\media\\sources\\boot.wim /index:1 /mountdir:C:\\winpe\\mount\n\necho net use z: \\\\192.168.0.253\\share >> C:\\winpe\\mount\\Windows\\System32\\startnet.cmd\necho z:\\win\\setup.exe /unattend:z:\\win\\win10_x64_bios_auto.xml >> C:\\winpe\\mount\\Windows\\System32\\startnet.cmd\n\nDism /unmount-image /mountdir:C:\\winpe\\mount /commit\nMakeWinPEMedia /ISO C:\\winpe C:\\winpe\\winpe_win10_amd64.iso\n```\n\n1. 本地生成winpe文件目录\n1. dism 挂载 winpe的启动文件到winpe的mount目录\n1. 将启动命令硬编码写死到winpe的startnet.cmd文件里\n1. 无人值守安装\n1. 卸载winpe的挂载（一定要执行，否则直接强制删除文件夹会出一些稀奇古怪的问题）\n1. 制作win10镜像，名为 winpe_win10_amd64.iso\n\n第三步的硬编码是无奈之举，因为要想挂载共享文件夹，必须要知道smb主机，但是这个参数又很难传递进来。<br />如果是U盘启动，可以写死U盘路径，大不了插上U盘后，手动改卷标(当然因为U盘挂载顺序不一致，可以通过for循环A-Z盘，挨个盘访问某个文件名，如果存在，即认为此盘是自己U盘，设置环境变量)。而网上说的，startnet.cmd调用另外一个bat，多是基于这个原理。\n\n而如果PXE要达到跟上述要求，动态设置smb主机，要么写死域名，然后劫持或者配置域名，加上bat文件，在winpe启动时，通过startnet.cmd下载，并执行。要么找办法，看看能不能在启动时，传入参数（目前我还没找到），当然还可以用MDT方案，看着比PXE+无人应答文件简单很多。\n\n<a name=\"d36faa4b\"></a>\n## 配置Cobbler Server\n\n<a name=\"42b542e5\"></a>\n### 导入Cobbler\n使用WinScp 等工具，将 winpe_win10_amd64.iso 上传到 Cobbler 服务器上\n\n```bash\n[root@localhost ~]# cobbler distro add --name=windows_10_x64 --kernel=/var/lib/tftpboot/memdisk --initrd=/root/winpe_win10_amd64.iso --kopts=\"raw iso\"\n[root@localhost ~]# touch /var/lib/cobbler/kickstarts/winpe.xml\n[root@localhost ~]# cobbler profile add --name=windows_10_x64 --distro=windows_10_x64 --kickstart=/var/lib/cobbler/kickstarts/winpe.xml\n```\n\n\n<a name=\"b15fbfd6\"></a>\n### 创建自动应答文件\n直接从 [Windows Answer File Generator#win10_x86_64](http://www.windowsafg.com/win10x86_x64.html) 通过简单配置后，下载即可（只支持简单操作，比如，装系统，格式化磁盘，设置密码等）。当然也可以使用 【Windows系统映像管理器】，不过挺难用的，具体用法可以参考 [How to create an unattended installation of Windows 10](https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10)。也可以通过MDT简化操作。\n\n但是如果使用直接生成的，有点问题，即使页面设置了安装语言，但是仍旧需要手动选择，经过多方研究，发现<br />主要卡在UILanguage和Inputlocale上，全写zh-CN无效。\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<component 此处忽略>\n  <SetupUILanguage>\n    <UILanguage>en-US</UILanguage>\n  </SetupUILanguage>\n  <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale> \n  <SystemLocale>zh-CN</SystemLocale>\n  <UILanguage>zh-CN</UILanguage>\n  <UILanguageFallback>zh-CN</UILanguageFallback>\n  <UserLocale>zh-CN</UserLocale>\n</component>\n\n```\n\n另外就是安装密钥,统一替换为 VK7JG-NPHTM-C97JM-9MPGT-3V66T\n\n下面是我的应答文件，仅做参考。\n\n```bash\n<!--*************************************************\nWindows 10 Answer File Generator\nCreated using Windows AFG found at:\n;http://www.windowsafg.com\n\nInstallation Notes\nLocation: zh-CN\nNotes: Enter your comments here...\n**************************************************-->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend\n    xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SetupUILanguage>\n                <UILanguage>en-US</UILanguage>\n            </SetupUILanguage>\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SetupUILanguage>\n                <UILanguage>en-US</UILanguage>\n            </SetupUILanguage>\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <DiskConfiguration>\n                <Disk wcm:action=\"add\">\n                    <CreatePartitions>\n                        <CreatePartition wcm:action=\"add\">\n                            <Order>1</Order>\n                            <Type>Primary</Type>\n                            <Size>100</Size>\n                        </CreatePartition>\n                        <CreatePartition wcm:action=\"add\">\n                            <Extend>true</Extend>\n                            <Order>2</Order>\n                            <Type>Primary</Type>\n                        </CreatePartition>\n                    </CreatePartitions>\n                    <ModifyPartitions>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>System Reserved</Label>\n                            <Order>1</Order>\n                            <PartitionID>1</PartitionID>\n                            <TypeID>0x27</TypeID>\n                        </ModifyPartition>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>OS</Label>\n                            <Letter>C</Letter>\n                            <Order>2</Order>\n                            <PartitionID>2</PartitionID>\n                        </ModifyPartition>\n                    </ModifyPartitions>\n                    <DiskID>0</DiskID>\n                    <WillWipeDisk>true</WillWipeDisk>\n                </Disk>\n            </DiskConfiguration>\n            <ImageInstall>\n                <OSImage>\n                    <InstallTo>\n                        <DiskID>0</DiskID>\n                        <PartitionID>2</PartitionID>\n                    </InstallTo>\n                    <InstallToAvailablePartition>false</InstallToAvailablePartition>\n                </OSImage>\n            </ImageInstall>\n            <UserData>\n                <AcceptEula>true</AcceptEula>\n                <FullName>AnJia</FullName>\n                <Organization>AnJia</Organization>\n                <ProductKey>\n                    <Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>\n                </ProductKey>\n            </UserData>\n        </component>\n        <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <DiskConfiguration>\n                <Disk wcm:action=\"add\">\n                    <CreatePartitions>\n                        <CreatePartition wcm:action=\"add\">\n                            <Order>1</Order>\n                            <Type>Primary</Type>\n                            <Size>100</Size>\n                        </CreatePartition>\n                        <CreatePartition wcm:action=\"add\">\n                            <Extend>true</Extend>\n                            <Order>2</Order>\n                            <Type>Primary</Type>\n                        </CreatePartition>\n                    </CreatePartitions>\n                    <ModifyPartitions>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>System Reserved</Label>\n                            <Order>1</Order>\n                            <PartitionID>1</PartitionID>\n                            <TypeID>0x27</TypeID>\n                        </ModifyPartition>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Format>NTFS</Format>\n                            <Label>OS</Label>\n                            <Letter>C</Letter>\n                            <Order>2</Order>\n                            <PartitionID>2</PartitionID>\n                        </ModifyPartition>\n                    </ModifyPartitions>\n                    <DiskID>0</DiskID>\n                    <WillWipeDisk>true</WillWipeDisk>\n                </Disk>\n            </DiskConfiguration>\n            <ImageInstall>\n                <OSImage>\n                    <InstallTo>\n                        <DiskID>0</DiskID>\n                        <PartitionID>2</PartitionID>\n                    </InstallTo>\n                    <InstallToAvailablePartition>false</InstallToAvailablePartition>\n                </OSImage>\n            </ImageInstall>\n            <UserData>\n                <AcceptEula>true</AcceptEula>\n                <FullName>AnJia</FullName>\n                <Organization>AnJia</Organization>\n                <ProductKey>\n                    <Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>\n                </ProductKey>\n            </UserData>\n        </component>\n    </settings>\n    <settings pass=\"offlineServicing\">\n        <component name=\"Microsoft-Windows-LUA-Settings\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <EnableLUA>false</EnableLUA>\n        </component>\n    </settings>\n    <settings pass=\"offlineServicing\">\n        <component name=\"Microsoft-Windows-LUA-Settings\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <EnableLUA>false</EnableLUA>\n        </component>\n    </settings>\n    <settings pass=\"generalize\">\n        <component name=\"Microsoft-Windows-Security-SPP\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipRearm>1</SkipRearm>\n        </component>\n    </settings>\n    <settings pass=\"generalize\">\n        <component name=\"Microsoft-Windows-Security-SPP\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipRearm>1</SkipRearm>\n        </component>\n    </settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <InputLocale>0804:{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}{FA550B04-5AD7-411f-A5AC-CA038EC515D7}</InputLocale>\n            <SystemLocale>zh-CN</SystemLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <UILanguageFallback>zh-CN</UILanguageFallback>\n            <UserLocale>zh-CN</UserLocale>\n        </component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipAutoActivation>true</SkipAutoActivation>\n        </component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SkipAutoActivation>true</SkipAutoActivation>\n        </component>\n        <component name=\"Microsoft-Windows-SQMApi\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <CEIPEnabled>0</CEIPEnabled>\n        </component>\n        <component name=\"Microsoft-Windows-SQMApi\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <CEIPEnabled>0</CEIPEnabled>\n        </component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <ComputerName>AnJia-PC</ComputerName>\n            <ProductKey>VK7JG-NPHTM-C97JM-9MPGT-3V66T</ProductKey>\n        </component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <ComputerName>AnJia-PC</ComputerName>\n            <ProductKey>VK7JG-NPHTM-C97JM-9MPGT-3V66T</ProductKey>\n        </component>\n    </settings>\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <AutoLogon>\n                <Password>\n                    <Value></Value>\n                    <PlainText>true</PlainText>\n                </Password>\n                <Enabled>true</Enabled>\n                <Username>AnJia</Username>\n            </AutoLogon>\n            <OOBE>\n                <HideEULAPage>true</HideEULAPage>\n                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>\n                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>\n                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>\n                <NetworkLocation>Work</NetworkLocation>\n                <SkipUserOOBE>true</SkipUserOOBE>\n                <SkipMachineOOBE>true</SkipMachineOOBE>\n                <ProtectYourPC>1</ProtectYourPC>\n            </OOBE>\n            <UserAccounts>\n                <LocalAccounts>\n                    <LocalAccount wcm:action=\"add\">\n                        <Password>\n                            <Value></Value>\n                            <PlainText>true</PlainText>\n                        </Password>\n                        <Description>AnJia</Description>\n                        <DisplayName>AnJia</DisplayName>\n                        <Group>Administrators</Group>\n                        <Name>AnJia</Name>\n                    </LocalAccount>\n                </LocalAccounts>\n            </UserAccounts>\n            <RegisteredOrganization>AnJia</RegisteredOrganization>\n            <RegisteredOwner>AnJia</RegisteredOwner>\n            <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Description>Control Panel View</Description>\n                    <Order>1</Order>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v StartupPage /t REG_DWORD /d 1 /f</CommandLine>\n                    <RequiresUserInput>true</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2</Order>\n                    <Description>Control Panel Icon Size</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v AllItemsIconView /t REG_DWORD /d 0 /f</CommandLine>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>3</Order>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>cmd /C wmic useraccount where name=\"AnJia\" set PasswordExpires=false</CommandLine>\n                    <Description>Password Never Expires</Description>\n                </SynchronousCommand>\n            </FirstLogonCommands>\n            <TimeZone>China Standard Time</TimeZone>\n        </component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\n            xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <AutoLogon>\n                <Password>\n                    <Value></Value>\n                    <PlainText>true</PlainText>\n                </Password>\n                <Enabled>true</Enabled>\n                <Username>AnJia</Username>\n            </AutoLogon>\n            <OOBE>\n                <HideEULAPage>true</HideEULAPage>\n                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>\n                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>\n                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>\n                <NetworkLocation>Work</NetworkLocation>\n                <SkipUserOOBE>true</SkipUserOOBE>\n                <SkipMachineOOBE>true</SkipMachineOOBE>\n                <ProtectYourPC>1</ProtectYourPC>\n            </OOBE>\n            <UserAccounts>\n                <LocalAccounts>\n                    <LocalAccount wcm:action=\"add\">\n                        <Password>\n                            <Value></Value>\n                            <PlainText>true</PlainText>\n                        </Password>\n                        <Description>AnJia</Description>\n                        <DisplayName>AnJia</DisplayName>\n                        <Group>Administrators</Group>\n                        <Name>AnJia</Name>\n                    </LocalAccount>\n                </LocalAccounts>\n            </UserAccounts>\n            <RegisteredOrganization>AnJia</RegisteredOrganization>\n            <RegisteredOwner>AnJia</RegisteredOwner>\n            <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Description>Control Panel View</Description>\n                    <Order>1</Order>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v StartupPage /t REG_DWORD /d 1 /f</CommandLine>\n                    <RequiresUserInput>true</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2</Order>\n                    <Description>Control Panel Icon Size</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\" /v AllItemsIconView /t REG_DWORD /d 0 /f</CommandLine>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>3</Order>\n                    <RequiresUserInput>false</RequiresUserInput>\n                    <CommandLine>cmd /C wmic useraccount where name=\"AnJia\" set PasswordExpires=false</CommandLine>\n                    <Description>Password Never Expires</Description>\n                </SynchronousCommand>\n            </FirstLogonCommands>\n            <TimeZone>China Standard Time</TimeZone>\n        </component>\n    </settings>\n</unattend>\n```\n\n<a name=\"727af9d3\"></a>\n### 配置samba\n在Cobbler上执行\n<a name=\"0125c65d\"></a>\n#### 安装samba\n```bash\n[root@localhost ~]# yum install samba -y\n```\n<a name=\"6f1032ee\"></a>\n#### 修改smb config\n\n```bash\n[root@localhost ~]# vi /etc/samba/smb.conf\n \n# /etc/samba/smb.conf\n[global]\nlog file = /var/log/samba/log.%m\nmax log size = 5000\nsecurity = user\nguest account = nobody\nmap to guest = Bad User\nload printers = yes\ncups options = raw\n \n[share]\ncomment = share directory目录\npath = /smb/\ndirectory mask = 0755\ncreate mask = 0755\nguest ok=yes\nwritable=yes\n```\n\n<a name=\"9b9fd94f\"></a>\n#### 启动smb服务\n\n```bash\n[root@localhost ~]# service smb start\n[root@localhost ~]# systemctl enable smb\n```\n\n<a name=\"6e499122\"></a>\n#### 挂载win10系统\n通过winscp等软件将 cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso 上传到cobbler服务器上,并将创建的应答文件，上传到cobbler `/smb/win/win10_x64_bios_auto.xml` \n\n```bash\n[root@localhost ~]# mkdir -p /smb/win\n[root@localhost ~]# mount -o loop,ro /tmp/cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso /mnt/\n[root@localhost ~]# cp -r /mnt/* /smb/win\n[root@localhost ~]# umount /mnt/\n```\n\n<a name=\"a23d1d1f\"></a>\n### 自动化安装Windows10\n从vmware创建一台内存4G，cpu2核，磁盘60G的空盘，win10虚拟机，然后开机。记得选BIOS，别选UEFI。<br />![Snipaste_2019-02-26_00-05-00.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551110723753-c7785e92-60be-4a90-a606-96bc92306aaa.png#align=left&display=inline&height=400&name=Snipaste_2019-02-26_00-05-00.png&originHeight=400&originWidth=720&size=5025&status=done&width=720)\n\n![Snipaste_2019-02-25_23-44-27.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551110627345-af185562-5a0f-4b4c-98ef-68974880a6a3.png#align=left&display=inline&height=560&name=Snipaste_2019-02-25_23-44-27.png&originHeight=768&originWidth=1024&size=19684&status=done&width=746)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/226273/1551112320786-fc312bb1-ce6c-4771-864f-e8900a1aed58.png#align=left&display=inline&height=768&name=image.png&originHeight=768&originWidth=1024&size=233953&status=done&width=1024)\n\n至于如何激活，参考  [vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发](http://bbs.pcbeta.com/viewthread-1796113-1-1.html)\n\n<a name=\"31f87578\"></a>\n## Windows Server 2019\n因为2019用的也是1809版本的，所以制作步骤一样的，在此不再赘述。\n<a name=\"35808e79\"></a>\n## 参考资料\n\n- [使用Cobbler批量部署Linux和Windows：Windows系统批量安装（三）](https://www.cnblogs.com/pluse/p/8508538.html)\n- [WINPE镜像制作-startnet.cmd详解](https://blog.csdn.net/greless/article/details/52815716)\n- [Windows 中的默认输入配置文件（输入区域设置）](https://msdn.microsoft.com/zh-cn/library/windows/hardware/dn898524(v=vs.85).aspx)\n- [Answer files (unattend.xml)](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs)\n- [Windows Answer File Generator#win10_x86_64](http://www.windowsafg.com/win10x86_x64.html)\n- [WinPE: Mount and Customize](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-mount-and-customize)\n- [Components](https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/components-b-unattend)\n- [How to create an unattended installation of Windows 10](https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10)\n-  [vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发](http://bbs.pcbeta.com/viewthread-1796113-1-1.html)\n\n<a name=\"fb674066\"></a>\n## 招聘小广告\n\n山东济南的小伙伴欢迎投简历啊 [加入我们](https://www.shunnengnet.com/index.php/Home/Contact/join.html) , 一起搞事情。\n\n长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。\n\n\n","slug":"cobbler-win10-win-server-2019","published":1,"updated":"2019-08-16T06:11:15.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojl500is24do5x44zj46","content":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第7篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows 10 和 Windows Server 2019。</p>\n<p>请注意，一般安装windows是用<a href=\"https://docs.microsoft.com/zh-cn/windows/deployment/deploy-windows-mdt/deploy-a-windows-10-image-using-mdt\" target=\"_blank\" rel=\"noopener\">MDT</a>或者WDS居多，毕竟是巨硬自己家的，而且WDT还支持分布式镜像传输（主要是巨硬家的OS，动辄超过4G，万兆网卡也会卡啊）。本文不涉及到WDT或者WDS相关操作，感兴趣的可自行百度或者msdn。</p>\n<p><a name=\"424a2ad8\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows-hardware/get-started/adk-install#winADK\" target=\"_blank\" rel=\"noopener\">Windows ADK</a> (分别下载 <a href=\"https://go.microsoft.com/fwlink/?linkid=2026036\" target=\"_blank\" rel=\"noopener\">Download the Windows ADK for Windows 10, version 1809</a> 和 <a href=\"https://go.microsoft.com/fwlink/?linkid=2022233\" target=\"_blank\" rel=\"noopener\">Download the Windows PE add-on for the ADK</a>)</li>\n<li>下载 <a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">Windows 10 (business edition), version 1809 (Updated Feb 2019) (x64) - DVD (Chinese-Simplified)</a><a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\"> </a></li>\n<li>下载 <a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">Windows Server 2019 (x64) - DVD (Chinese-Simplified)</a></li>\n</ul>\n<p>注意，adk的两个都要下载，这俩都是引导包，真正的安装程序会由这俩软件进行下载。其中WinPE需要用到5G左右的磁盘空间，简直不能忍受。。。<br>msdn i tell u 堪称良心站，是windows装机神站啊，不过，没有直达页面挺不爽。为了防止下错，特意截图。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551104465714-66f42f29-fbcf-476f-b2e7-b1f3a6fb319b.png#align=left&amp;display=inline&amp;height=365&amp;name=Snipaste_2019-02-25_22-18-07.png&amp;originHeight=573&amp;originWidth=1171&amp;size=143092&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_22-18-07.png\"></p>\n<p><a name=\"9639c173\"></a></p>\n<h2 id=\"安装ADK和WinPE\"><a href=\"#安装ADK和WinPE\" class=\"headerlink\" title=\"安装ADK和WinPE\"></a>安装ADK和WinPE</h2><p>我已经装过，且忘记截图了，这是事后补图，只需要勾选必须的就行<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181245-e9b47d7d-e1b3-48f8-918e-42cdff955406.png#align=left&amp;display=inline&amp;height=548&amp;name=Snipaste_2019-02-25_22-32-48.png&amp;originHeight=548&amp;originWidth=746&amp;size=36472&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_22-32-48.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181277-4477f2fc-1cfe-414c-9178-c30ae74e725c.png#align=left&amp;display=inline&amp;height=548&amp;name=Snipaste_2019-02-25_22-32-20.png&amp;originHeight=548&amp;originWidth=746&amp;size=52141&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_22-32-20.png\"></p>\n<p>安装完后，以管理员身份打开部署和映像工具环境</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551105055491-d302cb36-bb44-4359-8fb5-c7342e9854fa.png#align=left&amp;display=inline&amp;height=425&amp;name=image.png&amp;originHeight=425&amp;originWidth=613&amp;size=193121&amp;status=done&amp;width=613\" alt=\"image.png\"></p>\n<p>定制Win 10 PE </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copype amd64 C:\\winpe</span><br><span class=\"line\"></span><br><span class=\"line\">Dism /mount-image /imagefile:C:\\winpe\\media\\sources\\boot.wim /index:1 /mountdir:C:\\winpe\\mount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> net use z: \\\\192.168.0.253\\share &gt;&gt; C:\\winpe\\mount\\Windows\\System32\\startnet.cmd</span><br><span class=\"line\"><span class=\"built_in\">echo</span> z:\\win\\setup.exe /unattend:z:\\win\\win10_x64_bios_auto.xml &gt;&gt; C:\\winpe\\mount\\Windows\\System32\\startnet.cmd</span><br><span class=\"line\"></span><br><span class=\"line\">Dism /unmount-image /mountdir:C:\\winpe\\mount /commit</span><br><span class=\"line\">MakeWinPEMedia /ISO C:\\winpe C:\\winpe\\winpe_win10_amd64.iso</span><br></pre></td></tr></table></figure>\n<ol>\n<li>本地生成winpe文件目录</li>\n<li>dism 挂载 winpe的启动文件到winpe的mount目录</li>\n<li>将启动命令硬编码写死到winpe的startnet.cmd文件里</li>\n<li>无人值守安装</li>\n<li>卸载winpe的挂载（一定要执行，否则直接强制删除文件夹会出一些稀奇古怪的问题）</li>\n<li>制作win10镜像，名为 winpe_win10_amd64.iso</li>\n</ol>\n<p>第三步的硬编码是无奈之举，因为要想挂载共享文件夹，必须要知道smb主机，但是这个参数又很难传递进来。<br>如果是U盘启动，可以写死U盘路径，大不了插上U盘后，手动改卷标(当然因为U盘挂载顺序不一致，可以通过for循环A-Z盘，挨个盘访问某个文件名，如果存在，即认为此盘是自己U盘，设置环境变量)。而网上说的，startnet.cmd调用另外一个bat，多是基于这个原理。</p>\n<p>而如果PXE要达到跟上述要求，动态设置smb主机，要么写死域名，然后劫持或者配置域名，加上bat文件，在winpe启动时，通过startnet.cmd下载，并执行。要么找办法，看看能不能在启动时，传入参数（目前我还没找到），当然还可以用MDT方案，看着比PXE+无人应答文件简单很多。</p>\n<p><a name=\"d36faa4b\"></a></p>\n<h2 id=\"配置Cobbler-Server\"><a href=\"#配置Cobbler-Server\" class=\"headerlink\" title=\"配置Cobbler Server\"></a>配置Cobbler Server</h2><p><a name=\"42b542e5\"></a></p>\n<h3 id=\"导入Cobbler\"><a href=\"#导入Cobbler\" class=\"headerlink\" title=\"导入Cobbler\"></a>导入Cobbler</h3><p>使用WinScp 等工具，将 winpe_win10_amd64.iso 上传到 Cobbler 服务器上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler distro add --name=windows_10_x64 --kernel=/var/lib/tftpboot/memdisk --initrd=/root/winpe_win10_amd64.iso --kopts=\"raw iso\"</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch /var/lib/cobbler/kickstarts/winpe.xml</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile add --name=windows_10_x64 --distro=windows_10_x64 --kickstart=/var/lib/cobbler/kickstarts/winpe.xml</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b15fbfd6\"></a></p>\n<h3 id=\"创建自动应答文件\"><a href=\"#创建自动应答文件\" class=\"headerlink\" title=\"创建自动应答文件\"></a>创建自动应答文件</h3><p>直接从 <a href=\"http://www.windowsafg.com/win10x86_x64.html\" target=\"_blank\" rel=\"noopener\">Windows Answer File Generator#win10_x86_64</a> 通过简单配置后，下载即可（只支持简单操作，比如，装系统，格式化磁盘，设置密码等）。当然也可以使用 【Windows系统映像管理器】，不过挺难用的，具体用法可以参考 <a href=\"https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10\" target=\"_blank\" rel=\"noopener\">How to create an unattended installation of Windows 10</a>。也可以通过MDT简化操作。</p>\n<p>但是如果使用直接生成的，有点问题，即使页面设置了安装语言，但是仍旧需要手动选择，经过多方研究，发现<br>主要卡在UILanguage和Inputlocale上，全写zh-CN无效。<br><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> 此处忽略&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">SetupUILanguage</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">UILanguage</span>&gt;</span>en-US<span class=\"tag\">&lt;/<span class=\"name\">UILanguage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">SetupUILanguage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">InputLocale</span>&gt;</span>0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;<span class=\"tag\">&lt;/<span class=\"name\">InputLocale</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">SystemLocale</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">SystemLocale</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">UILanguage</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">UILanguage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">UILanguageFallback</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">UILanguageFallback</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">UserLocale</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">UserLocale</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>另外就是安装密钥,统一替换为 VK7JG-NPHTM-C97JM-9MPGT-3V66T</p>\n<p>下面是我的应答文件，仅做参考。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--*************************************************</span><br><span class=\"line\">Windows 10 Answer File Generator</span><br><span class=\"line\">Created using Windows AFG found at:</span><br><span class=\"line\">;http://www.windowsafg.com</span><br><span class=\"line\"></span><br><span class=\"line\">Installation Notes</span><br><span class=\"line\">Location: zh-CN</span><br><span class=\"line\">Notes: Enter your comments here...</span><br><span class=\"line\">**************************************************--&gt;</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;unattend</span><br><span class=\"line\">    xmlns=<span class=\"string\">\"urn:schemas-microsoft-com:unattend\"</span>&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"windowsPE\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core-WinPE\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SetupUILanguage&gt;</span><br><span class=\"line\">                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;/SetupUILanguage&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core-WinPE\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SetupUILanguage&gt;</span><br><span class=\"line\">                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;/SetupUILanguage&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Setup\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;DiskConfiguration&gt;</span><br><span class=\"line\">                &lt;Disk wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;CreatePartitions&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                            &lt;Size&gt;100&lt;/Size&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Extend&gt;<span class=\"literal\">true</span>&lt;/Extend&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                    &lt;/CreatePartitions&gt;</span><br><span class=\"line\">                    &lt;ModifyPartitions&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;System Reserved&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;</span><br><span class=\"line\">                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;OS&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Letter&gt;C&lt;/Letter&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                    &lt;/ModifyPartitions&gt;</span><br><span class=\"line\">                    &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                    &lt;WillWipeDisk&gt;<span class=\"literal\">true</span>&lt;/WillWipeDisk&gt;</span><br><span class=\"line\">                &lt;/Disk&gt;</span><br><span class=\"line\">            &lt;/DiskConfiguration&gt;</span><br><span class=\"line\">            &lt;ImageInstall&gt;</span><br><span class=\"line\">                &lt;OSImage&gt;</span><br><span class=\"line\">                    &lt;InstallTo&gt;</span><br><span class=\"line\">                        &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                    &lt;/InstallTo&gt;</span><br><span class=\"line\">                    &lt;InstallToAvailablePartition&gt;<span class=\"literal\">false</span>&lt;/InstallToAvailablePartition&gt;</span><br><span class=\"line\">                &lt;/OSImage&gt;</span><br><span class=\"line\">            &lt;/ImageInstall&gt;</span><br><span class=\"line\">            &lt;UserData&gt;</span><br><span class=\"line\">                &lt;AcceptEula&gt;<span class=\"literal\">true</span>&lt;/AcceptEula&gt;</span><br><span class=\"line\">                &lt;FullName&gt;AnJia&lt;/FullName&gt;</span><br><span class=\"line\">                &lt;Organization&gt;AnJia&lt;/Organization&gt;</span><br><span class=\"line\">                &lt;ProductKey&gt;</span><br><span class=\"line\">                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;</span><br><span class=\"line\">                &lt;/ProductKey&gt;</span><br><span class=\"line\">            &lt;/UserData&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Setup\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;DiskConfiguration&gt;</span><br><span class=\"line\">                &lt;Disk wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;CreatePartitions&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                            &lt;Size&gt;100&lt;/Size&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Extend&gt;<span class=\"literal\">true</span>&lt;/Extend&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                    &lt;/CreatePartitions&gt;</span><br><span class=\"line\">                    &lt;ModifyPartitions&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;System Reserved&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;</span><br><span class=\"line\">                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;OS&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Letter&gt;C&lt;/Letter&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                    &lt;/ModifyPartitions&gt;</span><br><span class=\"line\">                    &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                    &lt;WillWipeDisk&gt;<span class=\"literal\">true</span>&lt;/WillWipeDisk&gt;</span><br><span class=\"line\">                &lt;/Disk&gt;</span><br><span class=\"line\">            &lt;/DiskConfiguration&gt;</span><br><span class=\"line\">            &lt;ImageInstall&gt;</span><br><span class=\"line\">                &lt;OSImage&gt;</span><br><span class=\"line\">                    &lt;InstallTo&gt;</span><br><span class=\"line\">                        &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                    &lt;/InstallTo&gt;</span><br><span class=\"line\">                    &lt;InstallToAvailablePartition&gt;<span class=\"literal\">false</span>&lt;/InstallToAvailablePartition&gt;</span><br><span class=\"line\">                &lt;/OSImage&gt;</span><br><span class=\"line\">            &lt;/ImageInstall&gt;</span><br><span class=\"line\">            &lt;UserData&gt;</span><br><span class=\"line\">                &lt;AcceptEula&gt;<span class=\"literal\">true</span>&lt;/AcceptEula&gt;</span><br><span class=\"line\">                &lt;FullName&gt;AnJia&lt;/FullName&gt;</span><br><span class=\"line\">                &lt;Organization&gt;AnJia&lt;/Organization&gt;</span><br><span class=\"line\">                &lt;ProductKey&gt;</span><br><span class=\"line\">                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;</span><br><span class=\"line\">                &lt;/ProductKey&gt;</span><br><span class=\"line\">            &lt;/UserData&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"offlineServicing\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-LUA-Settings\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;EnableLUA&gt;<span class=\"literal\">false</span>&lt;/EnableLUA&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"offlineServicing\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-LUA-Settings\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;EnableLUA&gt;<span class=\"literal\">false</span>&lt;/EnableLUA&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"generalize\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"generalize\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"specialize\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP-UX\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipAutoActivation&gt;<span class=\"literal\">true</span>&lt;/SkipAutoActivation&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP-UX\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipAutoActivation&gt;<span class=\"literal\">true</span>&lt;/SkipAutoActivation&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-SQMApi\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-SQMApi\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;</span><br><span class=\"line\">            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;</span><br><span class=\"line\">            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"oobeSystem\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;AutoLogon&gt;</span><br><span class=\"line\">                &lt;Password&gt;</span><br><span class=\"line\">                    &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                    &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                &lt;/Password&gt;</span><br><span class=\"line\">                &lt;Enabled&gt;<span class=\"literal\">true</span>&lt;/Enabled&gt;</span><br><span class=\"line\">                &lt;Username&gt;AnJia&lt;/Username&gt;</span><br><span class=\"line\">            &lt;/AutoLogon&gt;</span><br><span class=\"line\">            &lt;OOBE&gt;</span><br><span class=\"line\">                &lt;HideEULAPage&gt;<span class=\"literal\">true</span>&lt;/HideEULAPage&gt;</span><br><span class=\"line\">                &lt;HideOEMRegistrationScreen&gt;<span class=\"literal\">true</span>&lt;/HideOEMRegistrationScreen&gt;</span><br><span class=\"line\">                &lt;HideOnlineAccountScreens&gt;<span class=\"literal\">true</span>&lt;/HideOnlineAccountScreens&gt;</span><br><span class=\"line\">                &lt;HideWirelessSetupInOOBE&gt;<span class=\"literal\">true</span>&lt;/HideWirelessSetupInOOBE&gt;</span><br><span class=\"line\">                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;</span><br><span class=\"line\">                &lt;SkipUserOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipUserOOBE&gt;</span><br><span class=\"line\">                &lt;SkipMachineOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipMachineOOBE&gt;</span><br><span class=\"line\">                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;</span><br><span class=\"line\">            &lt;/OOBE&gt;</span><br><span class=\"line\">            &lt;UserAccounts&gt;</span><br><span class=\"line\">                &lt;LocalAccounts&gt;</span><br><span class=\"line\">                    &lt;LocalAccount wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                        &lt;Password&gt;</span><br><span class=\"line\">                            &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                            &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                        &lt;/Password&gt;</span><br><span class=\"line\">                        &lt;Description&gt;AnJia&lt;/Description&gt;</span><br><span class=\"line\">                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;</span><br><span class=\"line\">                        &lt;Group&gt;Administrators&lt;/Group&gt;</span><br><span class=\"line\">                        &lt;Name&gt;AnJia&lt;/Name&gt;</span><br><span class=\"line\">                    &lt;/LocalAccount&gt;</span><br><span class=\"line\">                &lt;/LocalAccounts&gt;</span><br><span class=\"line\">            &lt;/UserAccounts&gt;</span><br><span class=\"line\">            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;</span><br><span class=\"line\">            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;</span><br><span class=\"line\">            &lt;DisableAutoDaylightTimeSet&gt;<span class=\"literal\">false</span>&lt;/DisableAutoDaylightTimeSet&gt;</span><br><span class=\"line\">            &lt;FirstLogonCommands&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel View&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">true</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;3&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class=\"built_in\">where</span> name=<span class=\"string\">\"AnJia\"</span> <span class=\"built_in\">set</span> PasswordExpires=<span class=\"literal\">false</span>&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">            &lt;/FirstLogonCommands&gt;</span><br><span class=\"line\">            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;AutoLogon&gt;</span><br><span class=\"line\">                &lt;Password&gt;</span><br><span class=\"line\">                    &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                    &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                &lt;/Password&gt;</span><br><span class=\"line\">                &lt;Enabled&gt;<span class=\"literal\">true</span>&lt;/Enabled&gt;</span><br><span class=\"line\">                &lt;Username&gt;AnJia&lt;/Username&gt;</span><br><span class=\"line\">            &lt;/AutoLogon&gt;</span><br><span class=\"line\">            &lt;OOBE&gt;</span><br><span class=\"line\">                &lt;HideEULAPage&gt;<span class=\"literal\">true</span>&lt;/HideEULAPage&gt;</span><br><span class=\"line\">                &lt;HideOEMRegistrationScreen&gt;<span class=\"literal\">true</span>&lt;/HideOEMRegistrationScreen&gt;</span><br><span class=\"line\">                &lt;HideOnlineAccountScreens&gt;<span class=\"literal\">true</span>&lt;/HideOnlineAccountScreens&gt;</span><br><span class=\"line\">                &lt;HideWirelessSetupInOOBE&gt;<span class=\"literal\">true</span>&lt;/HideWirelessSetupInOOBE&gt;</span><br><span class=\"line\">                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;</span><br><span class=\"line\">                &lt;SkipUserOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipUserOOBE&gt;</span><br><span class=\"line\">                &lt;SkipMachineOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipMachineOOBE&gt;</span><br><span class=\"line\">                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;</span><br><span class=\"line\">            &lt;/OOBE&gt;</span><br><span class=\"line\">            &lt;UserAccounts&gt;</span><br><span class=\"line\">                &lt;LocalAccounts&gt;</span><br><span class=\"line\">                    &lt;LocalAccount wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                        &lt;Password&gt;</span><br><span class=\"line\">                            &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                            &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                        &lt;/Password&gt;</span><br><span class=\"line\">                        &lt;Description&gt;AnJia&lt;/Description&gt;</span><br><span class=\"line\">                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;</span><br><span class=\"line\">                        &lt;Group&gt;Administrators&lt;/Group&gt;</span><br><span class=\"line\">                        &lt;Name&gt;AnJia&lt;/Name&gt;</span><br><span class=\"line\">                    &lt;/LocalAccount&gt;</span><br><span class=\"line\">                &lt;/LocalAccounts&gt;</span><br><span class=\"line\">            &lt;/UserAccounts&gt;</span><br><span class=\"line\">            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;</span><br><span class=\"line\">            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;</span><br><span class=\"line\">            &lt;DisableAutoDaylightTimeSet&gt;<span class=\"literal\">false</span>&lt;/DisableAutoDaylightTimeSet&gt;</span><br><span class=\"line\">            &lt;FirstLogonCommands&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel View&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">true</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;3&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class=\"built_in\">where</span> name=<span class=\"string\">\"AnJia\"</span> <span class=\"built_in\">set</span> PasswordExpires=<span class=\"literal\">false</span>&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">            &lt;/FirstLogonCommands&gt;</span><br><span class=\"line\">            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">&lt;/unattend&gt;</span><br></pre></td></tr></table></figure>\n<p><a name=\"727af9d3\"></a></p>\n<h3 id=\"配置samba\"><a href=\"#配置samba\" class=\"headerlink\" title=\"配置samba\"></a>配置samba</h3><p>在Cobbler上执行<br><a name=\"0125c65d\"></a></p>\n<h4 id=\"安装samba\"><a href=\"#安装samba\" class=\"headerlink\" title=\"安装samba\"></a>安装samba</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install samba -y</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"6f1032ee\"></a></p>\n<h4 id=\"修改smb-config\"><a href=\"#修改smb-config\" class=\"headerlink\" title=\"修改smb config\"></a>修改smb config</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/samba/smb.conf</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># /etc/samba/smb.conf</span></span><br><span class=\"line\">[global]</span><br><span class=\"line\"><span class=\"built_in\">log</span> file = /var/<span class=\"built_in\">log</span>/samba/<span class=\"built_in\">log</span>.%m</span><br><span class=\"line\">max <span class=\"built_in\">log</span> size = 5000</span><br><span class=\"line\">security = user</span><br><span class=\"line\">guest account = nobody</span><br><span class=\"line\">map to guest = Bad User</span><br><span class=\"line\">load printers = yes</span><br><span class=\"line\">cups options = raw</span><br><span class=\"line\"> </span><br><span class=\"line\">[share]</span><br><span class=\"line\">comment = share directory目录</span><br><span class=\"line\">path = /smb/</span><br><span class=\"line\">directory mask = 0755</span><br><span class=\"line\">create mask = 0755</span><br><span class=\"line\">guest ok=yes</span><br><span class=\"line\">writable=yes</span><br></pre></td></tr></table></figure>\n<p><a name=\"9b9fd94f\"></a></p>\n<h4 id=\"启动smb服务\"><a href=\"#启动smb服务\" class=\"headerlink\" title=\"启动smb服务\"></a>启动smb服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># service smb start</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable smb</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"6e499122\"></a></p>\n<h4 id=\"挂载win10系统\"><a href=\"#挂载win10系统\" class=\"headerlink\" title=\"挂载win10系统\"></a>挂载win10系统</h4><p>通过winscp等软件将 cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso 上传到cobbler服务器上,并将创建的应答文件，上传到cobbler <code>/smb/win/win10_x64_bios_auto.xml</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir -p /smb/win</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount -o loop,ro /tmp/cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp -r /mnt/* /smb/win</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># umount /mnt/</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"a23d1d1f\"></a></p>\n<h3 id=\"自动化安装Windows10\"><a href=\"#自动化安装Windows10\" class=\"headerlink\" title=\"自动化安装Windows10\"></a>自动化安装Windows10</h3><p>从vmware创建一台内存4G，cpu2核，磁盘60G的空盘，win10虚拟机，然后开机。记得选BIOS，别选UEFI。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551110723753-c7785e92-60be-4a90-a606-96bc92306aaa.png#align=left&amp;display=inline&amp;height=400&amp;name=Snipaste_2019-02-26_00-05-00.png&amp;originHeight=400&amp;originWidth=720&amp;size=5025&amp;status=done&amp;width=720\" alt=\"Snipaste_2019-02-26_00-05-00.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551110627345-af185562-5a0f-4b4c-98ef-68974880a6a3.png#align=left&amp;display=inline&amp;height=560&amp;name=Snipaste_2019-02-25_23-44-27.png&amp;originHeight=768&amp;originWidth=1024&amp;size=19684&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_23-44-27.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551112320786-fc312bb1-ce6c-4771-864f-e8900a1aed58.png#align=left&amp;display=inline&amp;height=768&amp;name=image.png&amp;originHeight=768&amp;originWidth=1024&amp;size=233953&amp;status=done&amp;width=1024\" alt=\"image.png\"></p>\n<p>至于如何激活，参考  <a href=\"http://bbs.pcbeta.com/viewthread-1796113-1-1.html\" target=\"_blank\" rel=\"noopener\">vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发</a></p>\n<p><a name=\"31f87578\"></a></p>\n<h2 id=\"Windows-Server-2019\"><a href=\"#Windows-Server-2019\" class=\"headerlink\" title=\"Windows Server 2019\"></a>Windows Server 2019</h2><p>因为2019用的也是1809版本的，所以制作步骤一样的，在此不再赘述。<br><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.cnblogs.com/pluse/p/8508538.html\" target=\"_blank\" rel=\"noopener\">使用Cobbler批量部署Linux和Windows：Windows系统批量安装（三）</a></li>\n<li><a href=\"https://blog.csdn.net/greless/article/details/52815716\" target=\"_blank\" rel=\"noopener\">WINPE镜像制作-startnet.cmd详解</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-cn/library/windows/hardware/dn898524(v=vs.85\" target=\"_blank\" rel=\"noopener\">Windows 中的默认输入配置文件（输入区域设置）</a>.aspx)</li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs\" target=\"_blank\" rel=\"noopener\">Answer files (unattend.xml)</a></li>\n<li><a href=\"http://www.windowsafg.com/win10x86_x64.html\" target=\"_blank\" rel=\"noopener\">Windows Answer File Generator#win10_x86_64</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-mount-and-customize\" target=\"_blank\" rel=\"noopener\">WinPE: Mount and Customize</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/components-b-unattend\" target=\"_blank\" rel=\"noopener\">Components</a></li>\n<li><a href=\"https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10\" target=\"_blank\" rel=\"noopener\">How to create an unattended installation of Windows 10</a></li>\n<li><a href=\"http://bbs.pcbeta.com/viewthread-1796113-1-1.html\" target=\"_blank\" rel=\"noopener\">vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是坚持技术写作计划（含翻译）的第7篇，定个小目标999，每周最少2篇。</p>\n</blockquote>\n<p>本文主要讲解通过CentOS7.6 Minimal + Cobbler 自动化安装CentOS,Ubuntu,Windows 10 和 Windows Server 2019。</p>\n<p>请注意，一般安装windows是用<a href=\"https://docs.microsoft.com/zh-cn/windows/deployment/deploy-windows-mdt/deploy-a-windows-10-image-using-mdt\" target=\"_blank\" rel=\"noopener\">MDT</a>或者WDS居多，毕竟是巨硬自己家的，而且WDT还支持分布式镜像传输（主要是巨硬家的OS，动辄超过4G，万兆网卡也会卡啊）。本文不涉及到WDT或者WDS相关操作，感兴趣的可自行百度或者msdn。</p>\n<p><a name=\"424a2ad8\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows-hardware/get-started/adk-install#winADK\" target=\"_blank\" rel=\"noopener\">Windows ADK</a> (分别下载 <a href=\"https://go.microsoft.com/fwlink/?linkid=2026036\" target=\"_blank\" rel=\"noopener\">Download the Windows ADK for Windows 10, version 1809</a> 和 <a href=\"https://go.microsoft.com/fwlink/?linkid=2022233\" target=\"_blank\" rel=\"noopener\">Download the Windows PE add-on for the ADK</a>)</li>\n<li>下载 <a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">Windows 10 (business edition), version 1809 (Updated Feb 2019) (x64) - DVD (Chinese-Simplified)</a><a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\"> </a></li>\n<li>下载 <a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">Windows Server 2019 (x64) - DVD (Chinese-Simplified)</a></li>\n</ul>\n<p>注意，adk的两个都要下载，这俩都是引导包，真正的安装程序会由这俩软件进行下载。其中WinPE需要用到5G左右的磁盘空间，简直不能忍受。。。<br>msdn i tell u 堪称良心站，是windows装机神站啊，不过，没有直达页面挺不爽。为了防止下错，特意截图。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551104465714-66f42f29-fbcf-476f-b2e7-b1f3a6fb319b.png#align=left&amp;display=inline&amp;height=365&amp;name=Snipaste_2019-02-25_22-18-07.png&amp;originHeight=573&amp;originWidth=1171&amp;size=143092&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_22-18-07.png\"></p>\n<p><a name=\"9639c173\"></a></p>\n<h2 id=\"安装ADK和WinPE\"><a href=\"#安装ADK和WinPE\" class=\"headerlink\" title=\"安装ADK和WinPE\"></a>安装ADK和WinPE</h2><p>我已经装过，且忘记截图了，这是事后补图，只需要勾选必须的就行<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181245-e9b47d7d-e1b3-48f8-918e-42cdff955406.png#align=left&amp;display=inline&amp;height=548&amp;name=Snipaste_2019-02-25_22-32-48.png&amp;originHeight=548&amp;originWidth=746&amp;size=36472&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_22-32-48.png\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551105181277-4477f2fc-1cfe-414c-9178-c30ae74e725c.png#align=left&amp;display=inline&amp;height=548&amp;name=Snipaste_2019-02-25_22-32-20.png&amp;originHeight=548&amp;originWidth=746&amp;size=52141&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_22-32-20.png\"></p>\n<p>安装完后，以管理员身份打开部署和映像工具环境</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551105055491-d302cb36-bb44-4359-8fb5-c7342e9854fa.png#align=left&amp;display=inline&amp;height=425&amp;name=image.png&amp;originHeight=425&amp;originWidth=613&amp;size=193121&amp;status=done&amp;width=613\" alt=\"image.png\"></p>\n<p>定制Win 10 PE </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copype amd64 C:\\winpe</span><br><span class=\"line\"></span><br><span class=\"line\">Dism /mount-image /imagefile:C:\\winpe\\media\\sources\\boot.wim /index:1 /mountdir:C:\\winpe\\mount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> net use z: \\\\192.168.0.253\\share &gt;&gt; C:\\winpe\\mount\\Windows\\System32\\startnet.cmd</span><br><span class=\"line\"><span class=\"built_in\">echo</span> z:\\win\\setup.exe /unattend:z:\\win\\win10_x64_bios_auto.xml &gt;&gt; C:\\winpe\\mount\\Windows\\System32\\startnet.cmd</span><br><span class=\"line\"></span><br><span class=\"line\">Dism /unmount-image /mountdir:C:\\winpe\\mount /commit</span><br><span class=\"line\">MakeWinPEMedia /ISO C:\\winpe C:\\winpe\\winpe_win10_amd64.iso</span><br></pre></td></tr></table></figure>\n<ol>\n<li>本地生成winpe文件目录</li>\n<li>dism 挂载 winpe的启动文件到winpe的mount目录</li>\n<li>将启动命令硬编码写死到winpe的startnet.cmd文件里</li>\n<li>无人值守安装</li>\n<li>卸载winpe的挂载（一定要执行，否则直接强制删除文件夹会出一些稀奇古怪的问题）</li>\n<li>制作win10镜像，名为 winpe_win10_amd64.iso</li>\n</ol>\n<p>第三步的硬编码是无奈之举，因为要想挂载共享文件夹，必须要知道smb主机，但是这个参数又很难传递进来。<br>如果是U盘启动，可以写死U盘路径，大不了插上U盘后，手动改卷标(当然因为U盘挂载顺序不一致，可以通过for循环A-Z盘，挨个盘访问某个文件名，如果存在，即认为此盘是自己U盘，设置环境变量)。而网上说的，startnet.cmd调用另外一个bat，多是基于这个原理。</p>\n<p>而如果PXE要达到跟上述要求，动态设置smb主机，要么写死域名，然后劫持或者配置域名，加上bat文件，在winpe启动时，通过startnet.cmd下载，并执行。要么找办法，看看能不能在启动时，传入参数（目前我还没找到），当然还可以用MDT方案，看着比PXE+无人应答文件简单很多。</p>\n<p><a name=\"d36faa4b\"></a></p>\n<h2 id=\"配置Cobbler-Server\"><a href=\"#配置Cobbler-Server\" class=\"headerlink\" title=\"配置Cobbler Server\"></a>配置Cobbler Server</h2><p><a name=\"42b542e5\"></a></p>\n<h3 id=\"导入Cobbler\"><a href=\"#导入Cobbler\" class=\"headerlink\" title=\"导入Cobbler\"></a>导入Cobbler</h3><p>使用WinScp 等工具，将 winpe_win10_amd64.iso 上传到 Cobbler 服务器上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler distro add --name=windows_10_x64 --kernel=/var/lib/tftpboot/memdisk --initrd=/root/winpe_win10_amd64.iso --kopts=\"raw iso\"</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch /var/lib/cobbler/kickstarts/winpe.xml</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cobbler profile add --name=windows_10_x64 --distro=windows_10_x64 --kickstart=/var/lib/cobbler/kickstarts/winpe.xml</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b15fbfd6\"></a></p>\n<h3 id=\"创建自动应答文件\"><a href=\"#创建自动应答文件\" class=\"headerlink\" title=\"创建自动应答文件\"></a>创建自动应答文件</h3><p>直接从 <a href=\"http://www.windowsafg.com/win10x86_x64.html\" target=\"_blank\" rel=\"noopener\">Windows Answer File Generator#win10_x86_64</a> 通过简单配置后，下载即可（只支持简单操作，比如，装系统，格式化磁盘，设置密码等）。当然也可以使用 【Windows系统映像管理器】，不过挺难用的，具体用法可以参考 <a href=\"https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10\" target=\"_blank\" rel=\"noopener\">How to create an unattended installation of Windows 10</a>。也可以通过MDT简化操作。</p>\n<p>但是如果使用直接生成的，有点问题，即使页面设置了安装语言，但是仍旧需要手动选择，经过多方研究，发现<br>主要卡在UILanguage和Inputlocale上，全写zh-CN无效。<br><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> 此处忽略&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">SetupUILanguage</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">UILanguage</span>&gt;</span>en-US<span class=\"tag\">&lt;/<span class=\"name\">UILanguage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">SetupUILanguage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">InputLocale</span>&gt;</span>0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;<span class=\"tag\">&lt;/<span class=\"name\">InputLocale</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">SystemLocale</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">SystemLocale</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">UILanguage</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">UILanguage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">UILanguageFallback</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">UILanguageFallback</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">UserLocale</span>&gt;</span>zh-CN<span class=\"tag\">&lt;/<span class=\"name\">UserLocale</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>另外就是安装密钥,统一替换为 VK7JG-NPHTM-C97JM-9MPGT-3V66T</p>\n<p>下面是我的应答文件，仅做参考。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--*************************************************</span><br><span class=\"line\">Windows 10 Answer File Generator</span><br><span class=\"line\">Created using Windows AFG found at:</span><br><span class=\"line\">;http://www.windowsafg.com</span><br><span class=\"line\"></span><br><span class=\"line\">Installation Notes</span><br><span class=\"line\">Location: zh-CN</span><br><span class=\"line\">Notes: Enter your comments here...</span><br><span class=\"line\">**************************************************--&gt;</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;unattend</span><br><span class=\"line\">    xmlns=<span class=\"string\">\"urn:schemas-microsoft-com:unattend\"</span>&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"windowsPE\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core-WinPE\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SetupUILanguage&gt;</span><br><span class=\"line\">                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;/SetupUILanguage&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core-WinPE\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SetupUILanguage&gt;</span><br><span class=\"line\">                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;/SetupUILanguage&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Setup\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;DiskConfiguration&gt;</span><br><span class=\"line\">                &lt;Disk wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;CreatePartitions&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                            &lt;Size&gt;100&lt;/Size&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Extend&gt;<span class=\"literal\">true</span>&lt;/Extend&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                    &lt;/CreatePartitions&gt;</span><br><span class=\"line\">                    &lt;ModifyPartitions&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;System Reserved&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;</span><br><span class=\"line\">                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;OS&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Letter&gt;C&lt;/Letter&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                    &lt;/ModifyPartitions&gt;</span><br><span class=\"line\">                    &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                    &lt;WillWipeDisk&gt;<span class=\"literal\">true</span>&lt;/WillWipeDisk&gt;</span><br><span class=\"line\">                &lt;/Disk&gt;</span><br><span class=\"line\">            &lt;/DiskConfiguration&gt;</span><br><span class=\"line\">            &lt;ImageInstall&gt;</span><br><span class=\"line\">                &lt;OSImage&gt;</span><br><span class=\"line\">                    &lt;InstallTo&gt;</span><br><span class=\"line\">                        &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                    &lt;/InstallTo&gt;</span><br><span class=\"line\">                    &lt;InstallToAvailablePartition&gt;<span class=\"literal\">false</span>&lt;/InstallToAvailablePartition&gt;</span><br><span class=\"line\">                &lt;/OSImage&gt;</span><br><span class=\"line\">            &lt;/ImageInstall&gt;</span><br><span class=\"line\">            &lt;UserData&gt;</span><br><span class=\"line\">                &lt;AcceptEula&gt;<span class=\"literal\">true</span>&lt;/AcceptEula&gt;</span><br><span class=\"line\">                &lt;FullName&gt;AnJia&lt;/FullName&gt;</span><br><span class=\"line\">                &lt;Organization&gt;AnJia&lt;/Organization&gt;</span><br><span class=\"line\">                &lt;ProductKey&gt;</span><br><span class=\"line\">                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;</span><br><span class=\"line\">                &lt;/ProductKey&gt;</span><br><span class=\"line\">            &lt;/UserData&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Setup\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;DiskConfiguration&gt;</span><br><span class=\"line\">                &lt;Disk wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;CreatePartitions&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                            &lt;Size&gt;100&lt;/Size&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                        &lt;CreatePartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Extend&gt;<span class=\"literal\">true</span>&lt;/Extend&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;Type&gt;Primary&lt;/Type&gt;</span><br><span class=\"line\">                        &lt;/CreatePartition&gt;</span><br><span class=\"line\">                    &lt;/CreatePartitions&gt;</span><br><span class=\"line\">                    &lt;ModifyPartitions&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;System Reserved&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;</span><br><span class=\"line\">                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                        &lt;ModifyPartition wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                            &lt;Active&gt;<span class=\"literal\">true</span>&lt;/Active&gt;</span><br><span class=\"line\">                            &lt;Format&gt;NTFS&lt;/Format&gt;</span><br><span class=\"line\">                            &lt;Label&gt;OS&lt;/Label&gt;</span><br><span class=\"line\">                            &lt;Letter&gt;C&lt;/Letter&gt;</span><br><span class=\"line\">                            &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                        &lt;/ModifyPartition&gt;</span><br><span class=\"line\">                    &lt;/ModifyPartitions&gt;</span><br><span class=\"line\">                    &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                    &lt;WillWipeDisk&gt;<span class=\"literal\">true</span>&lt;/WillWipeDisk&gt;</span><br><span class=\"line\">                &lt;/Disk&gt;</span><br><span class=\"line\">            &lt;/DiskConfiguration&gt;</span><br><span class=\"line\">            &lt;ImageInstall&gt;</span><br><span class=\"line\">                &lt;OSImage&gt;</span><br><span class=\"line\">                    &lt;InstallTo&gt;</span><br><span class=\"line\">                        &lt;DiskID&gt;0&lt;/DiskID&gt;</span><br><span class=\"line\">                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;</span><br><span class=\"line\">                    &lt;/InstallTo&gt;</span><br><span class=\"line\">                    &lt;InstallToAvailablePartition&gt;<span class=\"literal\">false</span>&lt;/InstallToAvailablePartition&gt;</span><br><span class=\"line\">                &lt;/OSImage&gt;</span><br><span class=\"line\">            &lt;/ImageInstall&gt;</span><br><span class=\"line\">            &lt;UserData&gt;</span><br><span class=\"line\">                &lt;AcceptEula&gt;<span class=\"literal\">true</span>&lt;/AcceptEula&gt;</span><br><span class=\"line\">                &lt;FullName&gt;AnJia&lt;/FullName&gt;</span><br><span class=\"line\">                &lt;Organization&gt;AnJia&lt;/Organization&gt;</span><br><span class=\"line\">                &lt;ProductKey&gt;</span><br><span class=\"line\">                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;</span><br><span class=\"line\">                &lt;/ProductKey&gt;</span><br><span class=\"line\">            &lt;/UserData&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"offlineServicing\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-LUA-Settings\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;EnableLUA&gt;<span class=\"literal\">false</span>&lt;/EnableLUA&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"offlineServicing\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-LUA-Settings\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;EnableLUA&gt;<span class=\"literal\">false</span>&lt;/EnableLUA&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"generalize\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"generalize\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"specialize\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-International-Core\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;</span><br><span class=\"line\">            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;</span><br><span class=\"line\">            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;</span><br><span class=\"line\">            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;</span><br><span class=\"line\">            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP-UX\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipAutoActivation&gt;<span class=\"literal\">true</span>&lt;/SkipAutoActivation&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Security-SPP-UX\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;SkipAutoActivation&gt;<span class=\"literal\">true</span>&lt;/SkipAutoActivation&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-SQMApi\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-SQMApi\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;</span><br><span class=\"line\">            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;</span><br><span class=\"line\">            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">    &lt;settings pass=<span class=\"string\">\"oobeSystem\"</span>&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"x86\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;AutoLogon&gt;</span><br><span class=\"line\">                &lt;Password&gt;</span><br><span class=\"line\">                    &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                    &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                &lt;/Password&gt;</span><br><span class=\"line\">                &lt;Enabled&gt;<span class=\"literal\">true</span>&lt;/Enabled&gt;</span><br><span class=\"line\">                &lt;Username&gt;AnJia&lt;/Username&gt;</span><br><span class=\"line\">            &lt;/AutoLogon&gt;</span><br><span class=\"line\">            &lt;OOBE&gt;</span><br><span class=\"line\">                &lt;HideEULAPage&gt;<span class=\"literal\">true</span>&lt;/HideEULAPage&gt;</span><br><span class=\"line\">                &lt;HideOEMRegistrationScreen&gt;<span class=\"literal\">true</span>&lt;/HideOEMRegistrationScreen&gt;</span><br><span class=\"line\">                &lt;HideOnlineAccountScreens&gt;<span class=\"literal\">true</span>&lt;/HideOnlineAccountScreens&gt;</span><br><span class=\"line\">                &lt;HideWirelessSetupInOOBE&gt;<span class=\"literal\">true</span>&lt;/HideWirelessSetupInOOBE&gt;</span><br><span class=\"line\">                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;</span><br><span class=\"line\">                &lt;SkipUserOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipUserOOBE&gt;</span><br><span class=\"line\">                &lt;SkipMachineOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipMachineOOBE&gt;</span><br><span class=\"line\">                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;</span><br><span class=\"line\">            &lt;/OOBE&gt;</span><br><span class=\"line\">            &lt;UserAccounts&gt;</span><br><span class=\"line\">                &lt;LocalAccounts&gt;</span><br><span class=\"line\">                    &lt;LocalAccount wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                        &lt;Password&gt;</span><br><span class=\"line\">                            &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                            &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                        &lt;/Password&gt;</span><br><span class=\"line\">                        &lt;Description&gt;AnJia&lt;/Description&gt;</span><br><span class=\"line\">                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;</span><br><span class=\"line\">                        &lt;Group&gt;Administrators&lt;/Group&gt;</span><br><span class=\"line\">                        &lt;Name&gt;AnJia&lt;/Name&gt;</span><br><span class=\"line\">                    &lt;/LocalAccount&gt;</span><br><span class=\"line\">                &lt;/LocalAccounts&gt;</span><br><span class=\"line\">            &lt;/UserAccounts&gt;</span><br><span class=\"line\">            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;</span><br><span class=\"line\">            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;</span><br><span class=\"line\">            &lt;DisableAutoDaylightTimeSet&gt;<span class=\"literal\">false</span>&lt;/DisableAutoDaylightTimeSet&gt;</span><br><span class=\"line\">            &lt;FirstLogonCommands&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel View&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">true</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;3&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class=\"built_in\">where</span> name=<span class=\"string\">\"AnJia\"</span> <span class=\"built_in\">set</span> PasswordExpires=<span class=\"literal\">false</span>&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">            &lt;/FirstLogonCommands&gt;</span><br><span class=\"line\">            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">        &lt;component name=<span class=\"string\">\"Microsoft-Windows-Shell-Setup\"</span> processorArchitecture=<span class=\"string\">\"amd64\"</span> publicKeyToken=<span class=\"string\">\"31bf3856ad364e35\"</span> language=<span class=\"string\">\"neutral\"</span> versionScope=<span class=\"string\">\"nonSxS\"</span></span><br><span class=\"line\">            xmlns:wcm=<span class=\"string\">\"http://schemas.microsoft.com/WMIConfig/2002/State\"</span></span><br><span class=\"line\">            xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span><br><span class=\"line\">            &lt;AutoLogon&gt;</span><br><span class=\"line\">                &lt;Password&gt;</span><br><span class=\"line\">                    &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                    &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                &lt;/Password&gt;</span><br><span class=\"line\">                &lt;Enabled&gt;<span class=\"literal\">true</span>&lt;/Enabled&gt;</span><br><span class=\"line\">                &lt;Username&gt;AnJia&lt;/Username&gt;</span><br><span class=\"line\">            &lt;/AutoLogon&gt;</span><br><span class=\"line\">            &lt;OOBE&gt;</span><br><span class=\"line\">                &lt;HideEULAPage&gt;<span class=\"literal\">true</span>&lt;/HideEULAPage&gt;</span><br><span class=\"line\">                &lt;HideOEMRegistrationScreen&gt;<span class=\"literal\">true</span>&lt;/HideOEMRegistrationScreen&gt;</span><br><span class=\"line\">                &lt;HideOnlineAccountScreens&gt;<span class=\"literal\">true</span>&lt;/HideOnlineAccountScreens&gt;</span><br><span class=\"line\">                &lt;HideWirelessSetupInOOBE&gt;<span class=\"literal\">true</span>&lt;/HideWirelessSetupInOOBE&gt;</span><br><span class=\"line\">                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;</span><br><span class=\"line\">                &lt;SkipUserOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipUserOOBE&gt;</span><br><span class=\"line\">                &lt;SkipMachineOOBE&gt;<span class=\"literal\">true</span>&lt;/SkipMachineOOBE&gt;</span><br><span class=\"line\">                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;</span><br><span class=\"line\">            &lt;/OOBE&gt;</span><br><span class=\"line\">            &lt;UserAccounts&gt;</span><br><span class=\"line\">                &lt;LocalAccounts&gt;</span><br><span class=\"line\">                    &lt;LocalAccount wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                        &lt;Password&gt;</span><br><span class=\"line\">                            &lt;Value&gt;&lt;/Value&gt;</span><br><span class=\"line\">                            &lt;PlainText&gt;<span class=\"literal\">true</span>&lt;/PlainText&gt;</span><br><span class=\"line\">                        &lt;/Password&gt;</span><br><span class=\"line\">                        &lt;Description&gt;AnJia&lt;/Description&gt;</span><br><span class=\"line\">                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;</span><br><span class=\"line\">                        &lt;Group&gt;Administrators&lt;/Group&gt;</span><br><span class=\"line\">                        &lt;Name&gt;AnJia&lt;/Name&gt;</span><br><span class=\"line\">                    &lt;/LocalAccount&gt;</span><br><span class=\"line\">                &lt;/LocalAccounts&gt;</span><br><span class=\"line\">            &lt;/UserAccounts&gt;</span><br><span class=\"line\">            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;</span><br><span class=\"line\">            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;</span><br><span class=\"line\">            &lt;DisableAutoDaylightTimeSet&gt;<span class=\"literal\">false</span>&lt;/DisableAutoDaylightTimeSet&gt;</span><br><span class=\"line\">            &lt;FirstLogonCommands&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel View&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;Order&gt;1&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">true</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;2&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;reg add <span class=\"string\">\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\"</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">                &lt;SynchronousCommand wcm:action=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">                    &lt;Order&gt;3&lt;/Order&gt;</span><br><span class=\"line\">                    &lt;RequiresUserInput&gt;<span class=\"literal\">false</span>&lt;/RequiresUserInput&gt;</span><br><span class=\"line\">                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class=\"built_in\">where</span> name=<span class=\"string\">\"AnJia\"</span> <span class=\"built_in\">set</span> PasswordExpires=<span class=\"literal\">false</span>&lt;/CommandLine&gt;</span><br><span class=\"line\">                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;</span><br><span class=\"line\">                &lt;/SynchronousCommand&gt;</span><br><span class=\"line\">            &lt;/FirstLogonCommands&gt;</span><br><span class=\"line\">            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;</span><br><span class=\"line\">        &lt;/component&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">&lt;/unattend&gt;</span><br></pre></td></tr></table></figure>\n<p><a name=\"727af9d3\"></a></p>\n<h3 id=\"配置samba\"><a href=\"#配置samba\" class=\"headerlink\" title=\"配置samba\"></a>配置samba</h3><p>在Cobbler上执行<br><a name=\"0125c65d\"></a></p>\n<h4 id=\"安装samba\"><a href=\"#安装samba\" class=\"headerlink\" title=\"安装samba\"></a>安装samba</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install samba -y</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"6f1032ee\"></a></p>\n<h4 id=\"修改smb-config\"><a href=\"#修改smb-config\" class=\"headerlink\" title=\"修改smb config\"></a>修改smb config</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/samba/smb.conf</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># /etc/samba/smb.conf</span></span><br><span class=\"line\">[global]</span><br><span class=\"line\"><span class=\"built_in\">log</span> file = /var/<span class=\"built_in\">log</span>/samba/<span class=\"built_in\">log</span>.%m</span><br><span class=\"line\">max <span class=\"built_in\">log</span> size = 5000</span><br><span class=\"line\">security = user</span><br><span class=\"line\">guest account = nobody</span><br><span class=\"line\">map to guest = Bad User</span><br><span class=\"line\">load printers = yes</span><br><span class=\"line\">cups options = raw</span><br><span class=\"line\"> </span><br><span class=\"line\">[share]</span><br><span class=\"line\">comment = share directory目录</span><br><span class=\"line\">path = /smb/</span><br><span class=\"line\">directory mask = 0755</span><br><span class=\"line\">create mask = 0755</span><br><span class=\"line\">guest ok=yes</span><br><span class=\"line\">writable=yes</span><br></pre></td></tr></table></figure>\n<p><a name=\"9b9fd94f\"></a></p>\n<h4 id=\"启动smb服务\"><a href=\"#启动smb服务\" class=\"headerlink\" title=\"启动smb服务\"></a>启动smb服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># service smb start</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl enable smb</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"6e499122\"></a></p>\n<h4 id=\"挂载win10系统\"><a href=\"#挂载win10系统\" class=\"headerlink\" title=\"挂载win10系统\"></a>挂载win10系统</h4><p>通过winscp等软件将 cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso 上传到cobbler服务器上,并将创建的应答文件，上传到cobbler <code>/smb/win/win10_x64_bios_auto.xml</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir -p /smb/win</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount -o loop,ro /tmp/cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp -r /mnt/* /smb/win</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># umount /mnt/</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"a23d1d1f\"></a></p>\n<h3 id=\"自动化安装Windows10\"><a href=\"#自动化安装Windows10\" class=\"headerlink\" title=\"自动化安装Windows10\"></a>自动化安装Windows10</h3><p>从vmware创建一台内存4G，cpu2核，磁盘60G的空盘，win10虚拟机，然后开机。记得选BIOS，别选UEFI。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551110723753-c7785e92-60be-4a90-a606-96bc92306aaa.png#align=left&amp;display=inline&amp;height=400&amp;name=Snipaste_2019-02-26_00-05-00.png&amp;originHeight=400&amp;originWidth=720&amp;size=5025&amp;status=done&amp;width=720\" alt=\"Snipaste_2019-02-26_00-05-00.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551110627345-af185562-5a0f-4b4c-98ef-68974880a6a3.png#align=left&amp;display=inline&amp;height=560&amp;name=Snipaste_2019-02-25_23-44-27.png&amp;originHeight=768&amp;originWidth=1024&amp;size=19684&amp;status=done&amp;width=746\" alt=\"Snipaste_2019-02-25_23-44-27.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/226273/1551112320786-fc312bb1-ce6c-4771-864f-e8900a1aed58.png#align=left&amp;display=inline&amp;height=768&amp;name=image.png&amp;originHeight=768&amp;originWidth=1024&amp;size=233953&amp;status=done&amp;width=1024\" alt=\"image.png\"></p>\n<p>至于如何激活，参考  <a href=\"http://bbs.pcbeta.com/viewthread-1796113-1-1.html\" target=\"_blank\" rel=\"noopener\">vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发</a></p>\n<p><a name=\"31f87578\"></a></p>\n<h2 id=\"Windows-Server-2019\"><a href=\"#Windows-Server-2019\" class=\"headerlink\" title=\"Windows Server 2019\"></a>Windows Server 2019</h2><p>因为2019用的也是1809版本的，所以制作步骤一样的，在此不再赘述。<br><a name=\"35808e79\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.cnblogs.com/pluse/p/8508538.html\" target=\"_blank\" rel=\"noopener\">使用Cobbler批量部署Linux和Windows：Windows系统批量安装（三）</a></li>\n<li><a href=\"https://blog.csdn.net/greless/article/details/52815716\" target=\"_blank\" rel=\"noopener\">WINPE镜像制作-startnet.cmd详解</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-cn/library/windows/hardware/dn898524(v=vs.85\" target=\"_blank\" rel=\"noopener\">Windows 中的默认输入配置文件（输入区域设置）</a>.aspx)</li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs\" target=\"_blank\" rel=\"noopener\">Answer files (unattend.xml)</a></li>\n<li><a href=\"http://www.windowsafg.com/win10x86_x64.html\" target=\"_blank\" rel=\"noopener\">Windows Answer File Generator#win10_x86_64</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-mount-and-customize\" target=\"_blank\" rel=\"noopener\">WinPE: Mount and Customize</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/components-b-unattend\" target=\"_blank\" rel=\"noopener\">Components</a></li>\n<li><a href=\"https://www.windowscentral.com/how-create-unattended-media-do-automated-installation-windows-10\" target=\"_blank\" rel=\"noopener\">How to create an unattended installation of Windows 10</a></li>\n<li><a href=\"http://bbs.pcbeta.com/viewthread-1796113-1-1.html\" target=\"_blank\" rel=\"noopener\">vlmcsd搭建KMS服务器，成功激活Server 2019数据中心版本，全网应是我首发</a></li>\n</ul>\n<p><a name=\"fb674066\"></a></p>\n<h2 id=\"招聘小广告\"><a href=\"#招聘小广告\" class=\"headerlink\" title=\"招聘小广告\"></a>招聘小广告</h2><p>山东济南的小伙伴欢迎投简历啊 <a href=\"https://www.shunnengnet.com/index.php/Home/Contact/join.html\" target=\"_blank\" rel=\"noopener\">加入我们</a> , 一起搞事情。</p>\n<p>长期招聘，Java程序员，大数据工程师，运维工程师，前端工程师。</p>\n"},{"title":"基于spring cloud的微服务实践","date":"2017-12-26T09:44:28.000Z","_content":"\n初创团队如何快速落地微服务--基于spring cloud/jhipster的微服务实践\n---\n\n本次分享主要是针对，小公司及初创团队如何用较低成本落地微服务，拥抱变化，快速交付\n\n<!--more-->\n\n## 微服务概述\n\n### 相关趋势图\n\n从[百度指数](http://index.baidu.com/)搜索 `微服务`、`spring boot`、`spring cloud`、`dubbo` 相关关键词，得到如下趋势（微服务的概念源于2014年3月Martin Fowler所写的一篇文章[Microservices](http://martinfowler.com/articles/microservices.html) ,所以选择从2014.03至今）\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fmtclday7oj20y309rgnr.jpg)\n\n从图中可见，`dubbo`的搜索量增势放缓，而`Spring Boot`从16年中下旬开始发力，一路高涨。而学习了`Spring boot` 再学习`Spring Cloud`  几乎顺理成章。\n\n\n\nspring boot旨在解决Spring越来越臃肿的全家桶方案的`配置地狱`（讽刺的是，Spring刚出道是扯着轻量化解决方案大旗一路冲杀，现在自己也开始慢慢胖起来了）,提供了很多简单易用的`starter`。特点是预定大于配置。\n\n\n\ndubbo放缓是源于，阿里巴巴中间断更将近三年([dubbo-2.4.11](https://github.com/alibaba/dubbo/releases/tag/dubbo-2.4.11) 2014-10-30, [dubbo-2.5.4](https://github.com/alibaba/dubbo/releases/tag/dubbo-2.5.4) 2017-09-07),很多依赖框架和技术都较为陈旧，也不接纳社区的PR(当然，从17年九月份开始恢复更新，后面会有说到)，导致当当另起炉灶，fork了一个[dangdangdotcom/dubbox](https://github.com/dangdangdotcom/dubbox) 当然，现在也已断更。而且dubbo仅相当于Spring cloud的一个子集，参考 [微服务架构的基础框架选择：Spring Cloud还是Dubbo？](http://blog.csdn.net/kobejayandy/article/details/52078275) (此处说的是dubbo2.x,最新的3.x变化较大，后边会说到)\n\n\n\n `k8s`、`kubernetes` 、`docker` 的搜索趋势\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fmtcqtu6ejj20ye08bq3u.jpg)\n\n\n\n### 微服务vs单体应用\n\n下面是我整理的一些关于单体服务和微服务的对比\n\n单体应用好处\n\n- 开发简单\n- 容易测试\n- 易于部署\n- 事务回滚容易\n- 无分布式管理，调用开销\n- 重复功能/代码较少\n\n单体应用缺点\n\n- 迭代缓慢\n- 维护困难\n- 持续部署困难：微小改动，必须重启，不相干功能无法提供服务\n- 牵一发而动全身：依赖项冲突，变更后，需要大量测试，防止影响其他功能\n- 基础语言、框架升级缓慢\n- 框架语言单一，无法灵活选用\n\n\n微服务好处\n\n- 敏捷性：按功能拆分，快速迭代\n- 自主性：团队技术选型灵活(PHP,python,java,C#,nodejs,golang)，设计自主\n- 可靠性：微服务故障只影响此服务消费者，而单体式应用会导致整个服务不可用\n- 持续集成持续交付\n- 可扩展性：热点功能容易扩展\n\n微服务的缺点\n\n- 性能降低：服务间通过网络调用\n- 管理难度增大：增加了项目的复杂性\n- 事务一致性\n\n扩展阅读 [Introduction to Microservices](https://www.nginx.com/blog/introduction-to-microservices/)\n\n\n\n### 框架选型\n\n下面讲一下，我司在落地微服务时的框架选型方面的一些经验。\n\n\n\n公司主要使用java，所以决定使用spring 框架中的`spring cloud`作为微服务基础框架，但是原生 spring cloud 学习曲线比较陡峭，需要学习`feign`,`zuul`,`eureka`,`hystrix`,`zipkin`,`ribbon`... 所谓的Spring Cloud全家桶\n\n综合考虑团队的技术水平和学习成本，最后采用了国外的开源框架 [jhipster官网](http://www.jhipster.tech/)  [jhipster github](https://github.com/jhipster)，登记在册的，使用jhipster的企业有224家(截止2018-01-11)，包括埃森哲，google，adobe等大厂。\n\njhipster 是由2013年由法国Java专家 Julien Dubois (朱利安 杜波尔斯)率先倡导，至今已有快5年了，积累了大量丰富经验。 采用Java 8(目前尚不支持java9,但是有开发计划)，特色是多用注解, 不用XML 配置的组态，配备了全方位的工作环境，从开发，测试，监控到制成，以及云部署。\n\n国内用dubbo的较多，用jhipster的较少，起码很多群里交流的时候，很多表示没听过，或者是我加的假群？至于为啥不用dubbo，前面提到过，一个是中间断更，以及阿里说不更就不更的优良传统，还有dubbo从功能来说，只是Spring Cloud的一个子集(dubbo 2.x) 。\n\n列举一下 jhipster 给的技术栈 ，参见 [Technology stack](http://www.jhipster.tech/tech-stack/)\n\n#### 客户端技术栈\n\n- angular4,5 or angularv1.x\n- Bootstrap\n- [HTML5 Boilerplate](http://html5boilerplate.com/)\n- 兼容IE11+及现代浏览器\n- 支持国际化\n- 支持sass\n- 支持spring websocket\n- 支持yarn、bower管理js库\n- 支持webpack、gulp.js构建，优化，应用\n- 支持[Karma](http://karma-runner.github.io/), [Headless Chrome](https://github.com/GoogleChrome/puppeteer) 和 [Protractor](http://www.protractortest.org/) 进行前端单元测试测试\n- 支持[Thymeleaf](http://www.thymeleaf.org/) 模板引擎，从服务端渲染页面\n\n#### 服务端技术栈\n\n- 支持spring boot 简化spring配置\n- 支持maven、gradle，构建、测试、运行程序\n- 支持多配置文件(默认`dev`,`prod`)\n- spring security\n- spring mvc REST + jackson\n- spring websocket\n- spring data jpa + Bean Validation\n- 使用liquibase管理数据库表结构变更版本\n- 支持elasticsearch，进行应用内搜素\n- 支持mongoDB 、Couchbase、Cassandra等NoSQL\n- 支持h2db,pgsql,mysql,meriadb,sqlserver,oracle等关系型sql\n- 支持kafka mq\n- 使用 zuul或者traefik作为http理由\n- 使用eureka或consul进行服务发现\n- 支持ehcache,hazelcast,infinispan等缓存框架\n- 支持基于hazelcast的httpsession集群\n- 数据源使用HikariCP连接池\n- 生成Dockerfile,docker-compose.yml\n- 支持云服务商,AWS,Cloud Foundry,Heroku,Kubernetes,Openshift,Docker ...\n- 支持统一配置中心\n\n\n\n其实真正用过就会发现，jhipster支持的不止列表中描述的这些。\n\n如果不会用yarn或者不方便用命令行生成项目，可以使用[jhipster online](https://start.jhipster.tech/)\n\n如果想学习jhipster，可以参考我在公司推广jhipster时写的一本gitbook [jhipster开发笔记](https://jh.jiankangsn.com/)\n\n同时，值得一提的是，jhipster也支持通过 `jhipster rancher-compose` 命令来生成`rancher-compose.yml`和`docker-compose.yml` 参见 [[BETA] Deploying to Rancher](http://www.jhipster.tech/rancher/)\n\n\n\n对于小团队落地微服务，可以考虑使用jhipster来生成项目，能够极大的提高效率。基本上可以视作jhipster是一套基于spring boot的最佳实践(不仅支持微服务，也支持单体式应用)。\n\n对于想学习spring boot或者spring cloud的也建议了解一下jhipster，好过独自摸索\n\n\n\njhipster依赖的技术框架版本基本都是最新稳定版，版本更新比较及时，基本上一月一个版本，对github上的issues和pr响应比较及时(一般在24小时内)\n\n\n\n## 10分钟搭建微服务\n\n### [安装node,yarn](https://jh.jiankangsn.com/install.html)\n\n**注意**\n\n如果是windows nodejs 需要安装v7.x，因为注册中心和网关需要用到node-sass@4.5.0，但是github上的node-sass的rebuild只有v7.x(process 51) 版本的，而自己构建太反人类了。如果是linux，可以尝试高版本的。\n\n安装完 node,yarn后，执行下面代码，使用npm的淘宝镜像，加速构建。\n\n```bash\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\nyarn config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/\nyarn config set registry https://registry.npm.taobao.org\n```\n\n安装 jdk8,maven,maven加速，请自行百度。\n\n## 安装jhipster\n\n\n\n### 下载注册中心\n\n下载并运行 [注册中心-jhipster-registry](https://github.com/jhipster/jhipster-registry) 详细文档，参见 [The JHipster Registry](http://www.jhipster.tech/jhipster-registry/)\n\n```bash\n$ git clone https://github.com/jhipster/jhipster-registry.git\n$ cd jhipster-registry\n$ yarn install\n$ mvnw\n##....\n----------------------------------------------------------\n        Application 'jhipster-registry' is running! Access URLs:\n        Local:          http://localhost:8761\n        External:       http://xx.xx.xx.xx:8761\n        Profile(s):     [swagger, dev, native]\n----------------------------------------------------------\n```\n\n浏览器访问 `http://localhost:8761`  初始用户名密码均为 `admin`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofaf2j21fe0q4wgt.jpg)\n\n\n\nspring config server,统一配置中心，可以统一管理不同环境的数据库地址，用户名，密码等敏感数据\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofbxjj21fp0ofta7.jpg)\n\njhipster registry 对应SC(Spring Cloud)的eurake+spring config server，想想自己用原生的SC自己搞的辛酸泪吧，再牛逼，刚学，也得10min+才能跑起来吧？\n\n### 创建网关\n\n创建api网关，参见 [Creating an application](http://www.jhipster.tech/creating-an-app/) 和[The JHipster API Gateway](http://www.jhipster.tech/api-gateway/)\n\n```bash\n$ yarn global add generator-jhipster\n$ mkdir gateway\n$ cd gateway\n$ yo jhipster\n\n\n        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗\n        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗\n        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝\n  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║\n  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗\n   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝\n\n                            http://www.jhipster.tech\n\nWelcome to the JHipster Generator v4.13.2\n _______________________________________________________________________________________________________________\n\n  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster\n  Documentation for creating an application: http://www.jhipster.tech/creating-an-app/\n _______________________________________________________________________________________________________________\n\nApplication files will be generated in folder: G:\\jh\\gateway\n? Which *type* of application would you like to create? Microservice gateway\n? What is the base name of your application? gateway\n? As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 8080\n? What is your default Java package name? com.anjia.gateway\n? Which service discovery server do you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)\n? Which *type* of authentication would you like to use? JWT authentication (stateless, with a token)\n? Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)\n? Which *production* database would you like to use? MySQL\n? Which *development* database would you like to use? H2 with disk-based persistence\n? Do you want to use Hibernate 2nd level cache? Yes\n? Would you like to use Maven or Gradle for building the backend? Maven\n? Which other technologies would you like to use?\n? Which *Framework* would you like to use for the client? Angular 5\n? Would you like to enable *SASS* support using the LibSass stylesheet preprocessor? No\n? Would you like to enable internationalization support? Yes\n? Please choose the native language of the application English\n? Please choose additional languages to install\n? Besides JUnit and Karma, which testing frameworks would you like to use?\n? Would you like to install other generators from the JHipster Marketplace? No\n$ mvnw\n\n----------------------------------------------------------\n        Application 'gateway' is running! Access URLs:\n        Local:          http://localhost:8080\n        External:       http://xx.xx.xx.xx:8080\n        Profile(s):     [swagger, dev]\n----------------------------------------------------------\n```\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fncq2fhhg5j20yf0pwjv9.jpg)\n\n访问 `http://localhost:8080/` 默认用户名密码均为 `admin`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fncq3xeiuqj21gs0irac3.jpg)\n\n\n\n### 创建服务\n\n创建服务 参考 [Creating an application](http://www.jhipster.tech/creating-an-app/)\n\n```bash\n$ mkdir foo\n$ cd foo\n$ yo jhipster\n\n\n        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗\n        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗\n        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝\n  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║\n  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗\n   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝\n\n                            http://www.jhipster.tech\n\nWelcome to the JHipster Generator v4.13.2\n _______________________________________________________________________________________________________________\n\n  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster\n  Documentation for creating an application: http://www.jhipster.tech/creating-an-app/\n _______________________________________________________________________________________________________________\n\nApplication files will be generated in folder: G:\\jh\\foo\n? Which *type* of application would you like to create? Microservice application\n? What is the base name of your application? foo\n? As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 8081\n? What is your default Java package name? com.anjia.foo\n? Which service discovery server do you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)\n? Which *type* of authentication would you like to use? JWT authentication (stateless, with a token)\n? Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)\n? Which *production* database would you like to use? MySQL\n? Which *development* database would you like to use? H2 with disk-based persistence\n? Do you want to use the Spring cache abstraction? Yes, with the Hazelcast implementation (distributed cache, for multiple nodes)\n? Do you want to use Hibernate 2nd level cache? Yes\n? Would you like to use Maven or Gradle for building the backend? Maven\n? Which other technologies would you like to use?\n? Would you like to enable internationalization support? Yes\n? Please choose the native language of the application Chinese (Simplified)\n? Please choose additional languages to install\n? Besides JUnit and Karma, which testing frameworks would you like to use?\n? Would you like to install other generators from the JHipster Marketplace? No\n\n$ mvnw\n----------------------------------------------------------\n        Application 'foo' is running! Access URLs:\n        Local:          http://localhost:8081\n        External:       http://xx.xx.xx.xx:8081\n        Profile(s):     [swagger, dev]\n----------------------------------------------------------\n```\n\n\n\n访问 `http://localhost:8080/#/docs` 默认用户名密码均为 `admin` ，使用`swagger`管理api文档，开发时，仅需要添加对应的注解，即可自动生成文档，解决了传统通过word，pdf等管理接口时，文档更新不及时等问题。并且可以通过`try it`可以直接调用接口，避免了接口调试时使用`curl`,`postman`等工具\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofjgkj20y40l7dgs.jpg)\n\n\n至此，已经创建了一个简单微服务（jhipster-registry是注册中心，gateway是网关，foo是具体的功能模块）。\n\n### 创建实体\n\n参考文档 [Creating an entity](http://www.jhipster.tech/creating-an-entity/)\n\n\n\njhipster支持通过命令行创建实体，也支持uml或jdl生成实体，为了省事，此处使用 官方`jdl-studio` 的默认jdl文件 https://start.jhipster.tech/jdl-studio/\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn81m4vh86j20dy02kdfu.jpg)\n\n\n\n```bash\n$ yo jhipster:import-jdl /path/to/jdl-studio/jhipster-jdl.jh\nThe jdl is being parsed.\nWriting entity JSON files.\nUpdated entities are: Region,Country,Location,Department,Task,Employee,Job,JobHistory\nGenerating entities.\n\nFound the .jhipster/Region.json configuration file, entity can be automatically generated!\n\n\nThe entity Region is being updated.\n\n\nFound the .jhipster/Country.json configuration file, entity can be automatically generated!\n\n\nThe entity Country is being updated.\n\n\nFound the .jhipster/Location.json configuration file, entity can be automatically generated!\n\n\nThe entity Location is being updated.\n\n\nFound the .jhipster/Department.json configuration file, entity can be automatically generated!\n\n\nThe entity Department is being updated.\n\n\nFound the .jhipster/Task.json configuration file, entity can be automatically generated!\n\n\nThe entity Task is being updated.\n\n\nFound the .jhipster/Employee.json configuration file, entity can be automatically generated!\n\n\nThe entity Employee is being updated.\n\n\nFound the .jhipster/Job.json configuration file, entity can be automatically generated!\n\n\nThe entity Job is being updated.\n\n\nFound the .jhipster/JobHistory.json configuration file, entity can be automatically generated!\n\n\nThe entity JobHistory is being updated.\n\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064934_added_entity_Region.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Region.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\RegionRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\RegionResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\RegionService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\RegionServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\RegionDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EntityMapper.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\RegionMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\RegionResourceIntTest.java\n conflict src\\main\\resources\\config\\liquibase\\master.xml\n? Overwrite src\\main\\resources\\config\\liquibase\\master.xml? overwrite\n    force src\\main\\resources\\config\\liquibase\\master.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_Country.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_constraints_Country.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Country.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\CountryRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\CountryResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\CountryService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\CountryServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\CountryDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\CountryMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\CountryResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_Location.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_constraints_Location.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Location.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\LocationRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\LocationResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\LocationService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\LocationServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\LocationDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\LocationMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\LocationResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_Department.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_constraints_Department.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Department.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\DepartmentRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\DepartmentService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\DepartmentServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\DepartmentDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\DepartmentMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064938_added_entity_Task.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Task.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\TaskRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\TaskResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\TaskService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\TaskServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\TaskDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\TaskMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\TaskResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_Employee.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_constraints_Employee.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Employee.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\EmployeeRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\EmployeeDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EmployeeMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_Job.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_constraints_Job.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Job.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\JobRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\JobResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_JobHistory.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_constraints_JobHistory.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\JobHistory.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\JobHistoryRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\JobHistoryService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\JobHistoryServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobHistoryDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobHistoryMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResourceIntTest.java\n   create src\\main\\java\\com\\anjia\\foo\\domain\\enumeration\\Language.java\n```\n\n重启 `foo`服务,再次访问 `http://localhost:8080/#/docs` 发现多了很多接口\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn81x40lzzj21240oo412.jpg)\n\n\n\n通过swagger ui，找到 `region-resource` 找到 `POST /api/regions ` 创建一个名为`test`的`regison`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn8249j1itj20rj0mtaax.jpg)\n\n点 `try it out!` 然后浏览器打开 `h2 数据库` `http://localhost:8081/h2-console` \n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn825ejmpxj20g90b3t8x.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn825ehnhnj20op0bp755.jpg)\n\n查询 `REGION`表，数据已经插入成功。\n\n至此，一个虽然简单，但是可用的微服务已经弄好。\n\n\n\n## 将服务发布到rancher\n\n参见文档 [[BETA] Deploying to Rancher](http://www.jhipster.tech/rancher/) ,jhipster支持发布到 [Cloud Foundry](http://www.jhipster.tech/cloudfoundry/) ,[Heroku](http://www.jhipster.tech/heroku/),[Kubernetes](http://www.jhipster.tech/kubernetes/),[Openshift](http://www.jhipster.tech/openshift/),[Rancher](http://www.jhipster.tech/rancher/),[AWS](http://www.jhipster.tech/aws/),[Boxfuse](http://www.jhipster.tech/boxfuse/)\n\n建议使用rancher，原因，  [Cloud Foundry](http://www.jhipster.tech/cloudfoundry/) ,[Heroku](http://www.jhipster.tech/heroku/),[AWS](http://www.jhipster.tech/aws/),[Boxfuse](http://www.jhipster.tech/boxfuse/) 都是云环境，k8s和openshift origin太复杂了，而rancher很容易上手，其联合创始人成为CNCF的理事会成员。\n\n附上一张 CNCF天梯图 \n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fncqh707snj247p2dcb2b.jpg)\n\n\n\n```bash\n $ mkdir docker\n $ cd docker\n $ yo jhipster rancher-rancher\n\n\n        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗\n        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗\n        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝\n  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║\n  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗\n   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝\n\n                            http://www.jhipster.tech\n\nWelcome to the JHipster Generator v4.13.2\n _______________________________________________________________________________________________________________\n\n  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster\n  Documentation for creating an application: http://www.jhipster.tech/creating-an-app/\n _______________________________________________________________________________________________________________\n\nApplication files will be generated in folder: G:\\jh\\docker\n? What is the base name of your application? (docker)\nG:\\jh\\docker\nλ  jhipster rancher-compose\nUsing JHipster version installed globally\nExecuting jhipster:rancher-compose\nOptions:\n🐮 [BETA] Welcome to the JHipster Rancher Compose Generator 🐮\nFiles will be generated in folder: G:\\jh\\docker\n? Which *type* of application would you like to deploy? Microservice application\n? Enter the root directory where your gateway(s) and microservices are located ../\n2 applications found at G:\\jh\\\n\n? Which applications do you want to include in your configuration? foo, gateway\n? Do you want to setup monitoring for your applications ? Yes, for logs and metrics with the JHipster Console (based on ELK and Zipkin)\nJHipster registry detected as the service discovery and configuration provider used by your apps\n? Enter the admin password used to secure the JHipster Registry admin\n? Would you like to enable rancher load balancing support? Yes\n? What should we use for the base Docker repository name?\n? What command should we use for push Docker image to repository? docker push\n\nChecking Docker images in applications' directories...\nls: no such file or directory: G:/jh/foo/target/docker\nls: no such file or directory: G:/jh/gateway/target/docker\n   create rancher-compose.yml\n   create docker-compose.yml\n   create registry-config-sidekick\\Dockerfile\n   create registry-config-sidekick\\application.yml\n\n\nRancher Compose configuration generated with missing images!\nTo generate the missing Docker image(s), please run:\n  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\foo\n  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\gateway\n\nWARNING! You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:\ndocker push foo\ndocker push gateway\nCongratulations, JHipster execution is complete!\n```\n\n\n\n#### rancher-compose.yml\n\n```yaml\nversion: '2'\nservices:\n    lb:\n        # load balancer container\n        scale: 1\n        load_balancer_config:\n          name: lb config\n        health_check:\n          port: 42\n          interval: 2000\n          unhealthy_threshold: 3\n          healthy_threshold: 2\n          response_timeout: 2000\n    foo-app:\n        scale: 1\n    foo-mysql:\n        scale: 1\n    \n    gateway-app:\n        scale: 1\n    gateway-mysql:\n        scale: 1\n    \n\n    jhipster-registry:\n        scale: 1\n\n\n    jhipster-elasticsearch:\n        scale: 1\n    jhipster-logstash:\n        scale: 1\n    jhipster-console:\n        scale: 1\n    # Uncomment this section to enable Zipkin\n    #jhipster-zipkin:\n    #    scale: 1\n\n```\n\n\n\n#### docker-compose.yml\n\n```yaml\nversion: '2'\nservices:\n    lb:\n      image: rancher/load-balancer-service\n      ports:\n        # Listen on public port 80 and direct traffic to private port 8080 of the service\n        - 80:8080\n      links:\n        # Target services in the same stack will be listed as a link\n        - gateway-app:gateway-app\n    foo-app:\n        image: foo\n        environment:\n            - SPRING_PROFILES_ACTIVE=prod,swagger\n            - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/eureka\n            - SPRING_CLOUD_CONFIG_URI=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/config\n            - SPRING_DATASOURCE_URL=jdbc:mysql://foo-mysql:3306/foo?useUnicode=true&characterEncoding=utf8&useSSL=false\n            - JHIPSTER_SLEEP=30\n            - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true\n            - JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash\n            - JHIPSTER_METRICS_LOGS_ENABLED=true\n            - JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60\n            - JHIPSTER_REGISTRY_PASSWORD=admin\n    foo-mysql:\n        image: mysql:5.7.20\n        environment:\n            - MYSQL_USER=root\n            - MYSQL_ALLOW_EMPTY_PASSWORD=yes\n            - MYSQL_DATABASE=foo\n        command: >-\n            mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8\n            --explicit_defaults_for_timestamp\n    \n    gateway-app:\n        image: gateway\n        environment:\n            - SPRING_PROFILES_ACTIVE=prod,swagger\n            - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/eureka\n            - SPRING_CLOUD_CONFIG_URI=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/config\n            - SPRING_DATASOURCE_URL=jdbc:mysql://gateway-mysql:3306/gateway?useUnicode=true&characterEncoding=utf8&useSSL=false\n            - JHIPSTER_SLEEP=30\n            - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true\n            - JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash\n            - JHIPSTER_METRICS_LOGS_ENABLED=true\n            - JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60\n            - JHIPSTER_REGISTRY_PASSWORD=admin\n        ports:\n            - 8080:8080\n    gateway-mysql:\n        image: mysql:5.7.20\n        environment:\n            - MYSQL_USER=root\n            - MYSQL_ALLOW_EMPTY_PASSWORD=yes\n            - MYSQL_DATABASE=gateway\n        command: >-\n            mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8\n            --explicit_defaults_for_timestamp\n    \n    jhipster-registry:\n        image: jhipster/jhipster-registry:v3.2.4\n        #volumes:\n        #    - ./central-server-config:/central-config\n        # By default the JHipster Registry runs with the \"dev\" and \"native\"\n        # Spring profiles.\n        # \"native\" profile means the filesystem is used to store data, see\n        # http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html\n        environment:\n            - SPRING_PROFILES_ACTIVE=dev,native\n            - SECURITY_USER_PASSWORD=admin\n            - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true\n            - JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash\n            - JHIPSTER_METRICS_LOGS_ENABLED=true\n            - JHIPSTER_METRICS_LOGS_REPORTFREQUENCY=60\n            - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:./config/\n            # Uncomment to use a Git configuration source instead of the local filesystem\n            # mounted from the registry-config-sidekick volume\n            # - GIT_URI=https://github.com/jhipster/jhipster-registry/\n            # - GIT_SEARCH_PATHS=central-config\n        ports:\n            - 8761:8761\n        volumes:\n          - /config\n        volumes_from:\n          - registry-config-sidekick\n        labels:\n          io.rancher.sidekicks: registry-config-sidekick\n    registry-config-sidekick:\n        # this docker image must be built with:\n        # docker build -t registry-config-sidekick registry-config-sidekick\n        image: registry-config-sidekick\n        tty: true\n        stdin_open: true\n        command:\n          - cat\n        volumes:\n          - config:/config\n    jhipster-elasticsearch:\n        image: jhipster/jhipster-elasticsearch:v2.2.1\n        ports:\n            - 9200:9200\n            - 9300:9300\n        # Uncomment this section to have elasticsearch data persisted to a volume\n        #volumes:\n        #   - ./log-data:/usr/share/elasticsearch/data\n    jhipster-logstash:\n        image: jhipster/jhipster-logstash:v2.2.1\n        command: logstash -f /conf/logstash.conf\n        ports:\n            - 5000:5000/udp\n        # Uncomment this section to have logstash config loaded from a volume\n        #volumes:\n        #    - ./log-conf/:/conf\n    jhipster-console:\n        image: jhipster/jhipster-console:v2.2.1\n        ports:\n            - 5601:5601\n    # Uncomment this section to enable Zipkin\n    #jhipster-zipkin:\n    #    image: jhipster/jhipster-zipkin:v2.2.1\n    #    ports:\n    #        - 9411:9411\n    #    environment:\n    #        - ES_HOSTS=http://jhipster-elasticsearch:9200\n    #        - ZIPKIN_UI_LOGS_URL=http://localhost:5601/app/kibana#/dashboard/logs-dashboard?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-1h,mode:quick,to:now))&_a=(filters:!(),options:(darkTheme:!f),panels:!((col:1,id:logs-levels,panelIndex:2,row:1,size_x:6,size_y:3,type:visualization),(col:7,columns:!(stack_trace),id:Stacktraces,panelIndex:7,row:1,size_x:4,size_y:3,sort:!('@timestamp',desc),type:search),(col:11,id:Log-forwarding-instructions,panelIndex:8,row:1,size_x:2,size_y:3,type:visualization),(col:1,columns:!(app_name,level,message),id:All-logs,panelIndex:9,row:4,size_x:12,size_y:7,sort:!('@timestamp',asc),type:search)),query:(query_string:(analyze_wildcard:!t,query:'{traceId}')),title:logs-dashboard,uiState:())\n\n```\n\n`docker-compose.yml`中给的`jhipster-registry`是本地模式的，可以根据注释部分内容，改成从git拉。好处是维护方便，坏处是，容易造成单点故障。使用git模式，就可以将 `registry-config-sidekick` 部分去掉。\n\n\n\njhipster使用[liquibase](http://www.liquibase.org/) 进行数据库版本管理，便于数据库版本变更记录管理和迁移。(rancher server 也用的liquibase)\n\n把docker-compose.yml和rancher-compose.yml贴到rancher上，就能创建一个应用 stack了。\n\n不过，好像漏了点啥，少了CICD，rancher和docker的compsoe.yml有了，但是，还没构建镜像呢，镜像还没push到registry呢，对吧\n\n## 自建gitlab\n\n我司用gitlab管理源码，我在docker hub上发布了一个汉化的gitlab  https://hub.docker.com/r/gitlab/gitlab-ce/tags/,如果要用官方镜像，参见 https://hub.docker.com/r/gitlab/gitlab-ce/tags/\n\n```yaml\nversion: '2'\nservices:\n  gitlab:\n    mem_limit: 5368709120 #限制内存最大 5G = 5*1024*1024*1024\n    image: anjia0532/gitlab-ce-zh:10.3.3-ce.0\n    volumes:\n    - /data/gitlab/config:/etc/gitlab\n    - /data/gitlab/data:/var/opt/gitlab\n    - /data/gitlab/log:/var/log/gitlab\n    ports:\n    - 80:80/tcp\n    - 443:443/tcp\n\n```\n\n\n## gitlab ci \n\n参见文档 [GitLab Continuous Integration (GitLab CI)](https://docs.gitlab.com/ce/ci/README.html)\n\n为啥不用jenkins？\n\n这个萝卜白菜各有所爱，我是出于压缩技术栈的考虑，\n\n1. gitlab-ci够简单，也够用，\n2. 根gitlab配套，不用多学习jenkins，毕竟多一套，就多一套的学习成本\n\n\n## 搭建镜像伺服\n\n- 老牌 [sonatype nexus oss](https://www.sonatype.com/download-oss-sonatype) 可以管理 Bower,Docker,Git LFS,Maven,npm,NuGet,PyPI,Ruby Gems,Yum Proxy,功能丰富\n\n- [GitLab Container Registry administration](https://docs.gitlab.com/ce/administration/container_registry.html#gitlab-container-registry-administration) gitlab registry跟gitlab集成，不需要额外安装服务\n\n- [harbor](http://vmware.github.io/harbor/) rancher应用商店就有，安装方便，号称企业级registry，功能强大。\n\n还是那句话，看需求，我司有部署maven和npm的需要，所以用了nexus oss，顺便管理docker registry。\n\n\n\n## Service Mesh--下一代微服务\n\n我司是从16年八九月份开始拆分单体服务，彼时国内spring cloud，微服务等相关资料较少，国内流行dubbo(那会已经断更1年多了，虽然现在复更，但是对其前景不太看好)\n\n从17年开始，圈内讨论spring cloud的渐渐多起来了，同时市面上也有了介绍spring cloud的书籍，比如周立的[Spring Cloud与Docker微服务架构实战](https://item.jd.com/12168358.html), 翟永超的[Spring Cloud微服务实战](https://item.jd.com/12172344.html) 等\n\n\n\n但是用了spring cloud后，感觉spring cloud太复杂了(如果用了jhipster情况会好点)，并没有实现微服务的初衷\n\n- 跟语言，框架无关:局限于java\n- 隐藏底层细节，需要学习zuul路由，eureka注册中心，configserver配置中心，需要熔断，降级，需要实现分布式跟踪...\n\n\n在这种情况下，16年，国外buoyant公司提出Service Mesh概念，基于scala创建了linkerd项目。\n\nservice mesh 的设想就是，让开发人员专注于业务，不再分心于基础设施。\n\n\n目前主流框架\n\n1. [istio](https://istio.io/) 背靠google，ibm，后台硬，前景广阔\n2. [conduit ](https://conduit.io/) 跟linkerd是一个公司的，使用Rust语言开发，proxy消耗不到10M内存，p99控制在毫秒内\n3. [linkerd](https://linkerd.io/) 商用企业较多，国内我知道的有豆瓣\n4. [envoy](https://www.envoyproxy.io/) 国内腾讯在用\n\n\n其中istio和conduit都不太成熟，而linkerd和envoy都有商用案例，较为成熟。长远来看，更看好 istio和conduit\n\n\n\n在此 分享一个dubbo的老用户的利好消息，据说 dubbo3 将兼容2，并且支持service mesh，并且支持反应式编程。参见 重大革新！[Dubbo 3.0来了](http://mp.weixin.qq.com/s/eVYx-tUIMYtAk5wP-qkdkw)\n\n\n\n扩展阅读资料\n\n\n[官方文档|ServiceMesh服务网格Istio面板组件&设计目标](http://blog.shurenyun.com/untitled-102/)\n\n[演讲实录 | Service Mesh 时代的选边与站队（附PPT下载）](http://www.servicemesh.cn/?/article/25)\n\n[Service Mesh：下一代微服务](https://servicemesh.gitbooks.io/awesome-servicemesh/mesh/2017/service-mesh-next-generation-of-microservice/)\n\n[Service Mesh 在华为公有云的实践](http://gitbook.cn/books/5a1e7dca387c5b4ee351790b/index.html)\n\n[明星分分合合的洪荒点击量，微博Mesh服务化改造如何支撑？（附PPT下载）](https://mp.weixin.qq.com/s/XZVCHZZzCX8wwgNKZtsmcA)\n\n**注意**\n\n需要根据公司、团队实际情况理性选择框架，目前service mesh还处于垦荒阶段，而spring cloud或者dubbo还没到彻底过时的程度，建议持续关注，不建议立刻上马，如果已经落地了相关的微服务技术，不要盲目跟风，在可接受学习成本和开发成本情况下，可以考虑研究一下service mesh。\n\n如果使用的是spring框架的话，建议抛开spring cloud，直接spring boot+service mesh，更清爽一些\n\n\n\n","source":"_posts/rancher-wechat-18-01-10.md","raw":"---\ntitle: 基于spring cloud的微服务实践\ndate: 2017-12-26 17:44:28\ntags: [jhipster,spring,spring-boot,spring-cloud,微服务,microservices,service-mesh,k8s,kubernetes]\n---\n\n初创团队如何快速落地微服务--基于spring cloud/jhipster的微服务实践\n---\n\n本次分享主要是针对，小公司及初创团队如何用较低成本落地微服务，拥抱变化，快速交付\n\n<!--more-->\n\n## 微服务概述\n\n### 相关趋势图\n\n从[百度指数](http://index.baidu.com/)搜索 `微服务`、`spring boot`、`spring cloud`、`dubbo` 相关关键词，得到如下趋势（微服务的概念源于2014年3月Martin Fowler所写的一篇文章[Microservices](http://martinfowler.com/articles/microservices.html) ,所以选择从2014.03至今）\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fmtclday7oj20y309rgnr.jpg)\n\n从图中可见，`dubbo`的搜索量增势放缓，而`Spring Boot`从16年中下旬开始发力，一路高涨。而学习了`Spring boot` 再学习`Spring Cloud`  几乎顺理成章。\n\n\n\nspring boot旨在解决Spring越来越臃肿的全家桶方案的`配置地狱`（讽刺的是，Spring刚出道是扯着轻量化解决方案大旗一路冲杀，现在自己也开始慢慢胖起来了）,提供了很多简单易用的`starter`。特点是预定大于配置。\n\n\n\ndubbo放缓是源于，阿里巴巴中间断更将近三年([dubbo-2.4.11](https://github.com/alibaba/dubbo/releases/tag/dubbo-2.4.11) 2014-10-30, [dubbo-2.5.4](https://github.com/alibaba/dubbo/releases/tag/dubbo-2.5.4) 2017-09-07),很多依赖框架和技术都较为陈旧，也不接纳社区的PR(当然，从17年九月份开始恢复更新，后面会有说到)，导致当当另起炉灶，fork了一个[dangdangdotcom/dubbox](https://github.com/dangdangdotcom/dubbox) 当然，现在也已断更。而且dubbo仅相当于Spring cloud的一个子集，参考 [微服务架构的基础框架选择：Spring Cloud还是Dubbo？](http://blog.csdn.net/kobejayandy/article/details/52078275) (此处说的是dubbo2.x,最新的3.x变化较大，后边会说到)\n\n\n\n `k8s`、`kubernetes` 、`docker` 的搜索趋势\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fmtcqtu6ejj20ye08bq3u.jpg)\n\n\n\n### 微服务vs单体应用\n\n下面是我整理的一些关于单体服务和微服务的对比\n\n单体应用好处\n\n- 开发简单\n- 容易测试\n- 易于部署\n- 事务回滚容易\n- 无分布式管理，调用开销\n- 重复功能/代码较少\n\n单体应用缺点\n\n- 迭代缓慢\n- 维护困难\n- 持续部署困难：微小改动，必须重启，不相干功能无法提供服务\n- 牵一发而动全身：依赖项冲突，变更后，需要大量测试，防止影响其他功能\n- 基础语言、框架升级缓慢\n- 框架语言单一，无法灵活选用\n\n\n微服务好处\n\n- 敏捷性：按功能拆分，快速迭代\n- 自主性：团队技术选型灵活(PHP,python,java,C#,nodejs,golang)，设计自主\n- 可靠性：微服务故障只影响此服务消费者，而单体式应用会导致整个服务不可用\n- 持续集成持续交付\n- 可扩展性：热点功能容易扩展\n\n微服务的缺点\n\n- 性能降低：服务间通过网络调用\n- 管理难度增大：增加了项目的复杂性\n- 事务一致性\n\n扩展阅读 [Introduction to Microservices](https://www.nginx.com/blog/introduction-to-microservices/)\n\n\n\n### 框架选型\n\n下面讲一下，我司在落地微服务时的框架选型方面的一些经验。\n\n\n\n公司主要使用java，所以决定使用spring 框架中的`spring cloud`作为微服务基础框架，但是原生 spring cloud 学习曲线比较陡峭，需要学习`feign`,`zuul`,`eureka`,`hystrix`,`zipkin`,`ribbon`... 所谓的Spring Cloud全家桶\n\n综合考虑团队的技术水平和学习成本，最后采用了国外的开源框架 [jhipster官网](http://www.jhipster.tech/)  [jhipster github](https://github.com/jhipster)，登记在册的，使用jhipster的企业有224家(截止2018-01-11)，包括埃森哲，google，adobe等大厂。\n\njhipster 是由2013年由法国Java专家 Julien Dubois (朱利安 杜波尔斯)率先倡导，至今已有快5年了，积累了大量丰富经验。 采用Java 8(目前尚不支持java9,但是有开发计划)，特色是多用注解, 不用XML 配置的组态，配备了全方位的工作环境，从开发，测试，监控到制成，以及云部署。\n\n国内用dubbo的较多，用jhipster的较少，起码很多群里交流的时候，很多表示没听过，或者是我加的假群？至于为啥不用dubbo，前面提到过，一个是中间断更，以及阿里说不更就不更的优良传统，还有dubbo从功能来说，只是Spring Cloud的一个子集(dubbo 2.x) 。\n\n列举一下 jhipster 给的技术栈 ，参见 [Technology stack](http://www.jhipster.tech/tech-stack/)\n\n#### 客户端技术栈\n\n- angular4,5 or angularv1.x\n- Bootstrap\n- [HTML5 Boilerplate](http://html5boilerplate.com/)\n- 兼容IE11+及现代浏览器\n- 支持国际化\n- 支持sass\n- 支持spring websocket\n- 支持yarn、bower管理js库\n- 支持webpack、gulp.js构建，优化，应用\n- 支持[Karma](http://karma-runner.github.io/), [Headless Chrome](https://github.com/GoogleChrome/puppeteer) 和 [Protractor](http://www.protractortest.org/) 进行前端单元测试测试\n- 支持[Thymeleaf](http://www.thymeleaf.org/) 模板引擎，从服务端渲染页面\n\n#### 服务端技术栈\n\n- 支持spring boot 简化spring配置\n- 支持maven、gradle，构建、测试、运行程序\n- 支持多配置文件(默认`dev`,`prod`)\n- spring security\n- spring mvc REST + jackson\n- spring websocket\n- spring data jpa + Bean Validation\n- 使用liquibase管理数据库表结构变更版本\n- 支持elasticsearch，进行应用内搜素\n- 支持mongoDB 、Couchbase、Cassandra等NoSQL\n- 支持h2db,pgsql,mysql,meriadb,sqlserver,oracle等关系型sql\n- 支持kafka mq\n- 使用 zuul或者traefik作为http理由\n- 使用eureka或consul进行服务发现\n- 支持ehcache,hazelcast,infinispan等缓存框架\n- 支持基于hazelcast的httpsession集群\n- 数据源使用HikariCP连接池\n- 生成Dockerfile,docker-compose.yml\n- 支持云服务商,AWS,Cloud Foundry,Heroku,Kubernetes,Openshift,Docker ...\n- 支持统一配置中心\n\n\n\n其实真正用过就会发现，jhipster支持的不止列表中描述的这些。\n\n如果不会用yarn或者不方便用命令行生成项目，可以使用[jhipster online](https://start.jhipster.tech/)\n\n如果想学习jhipster，可以参考我在公司推广jhipster时写的一本gitbook [jhipster开发笔记](https://jh.jiankangsn.com/)\n\n同时，值得一提的是，jhipster也支持通过 `jhipster rancher-compose` 命令来生成`rancher-compose.yml`和`docker-compose.yml` 参见 [[BETA] Deploying to Rancher](http://www.jhipster.tech/rancher/)\n\n\n\n对于小团队落地微服务，可以考虑使用jhipster来生成项目，能够极大的提高效率。基本上可以视作jhipster是一套基于spring boot的最佳实践(不仅支持微服务，也支持单体式应用)。\n\n对于想学习spring boot或者spring cloud的也建议了解一下jhipster，好过独自摸索\n\n\n\njhipster依赖的技术框架版本基本都是最新稳定版，版本更新比较及时，基本上一月一个版本，对github上的issues和pr响应比较及时(一般在24小时内)\n\n\n\n## 10分钟搭建微服务\n\n### [安装node,yarn](https://jh.jiankangsn.com/install.html)\n\n**注意**\n\n如果是windows nodejs 需要安装v7.x，因为注册中心和网关需要用到node-sass@4.5.0，但是github上的node-sass的rebuild只有v7.x(process 51) 版本的，而自己构建太反人类了。如果是linux，可以尝试高版本的。\n\n安装完 node,yarn后，执行下面代码，使用npm的淘宝镜像，加速构建。\n\n```bash\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\nyarn config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/\nyarn config set registry https://registry.npm.taobao.org\n```\n\n安装 jdk8,maven,maven加速，请自行百度。\n\n## 安装jhipster\n\n\n\n### 下载注册中心\n\n下载并运行 [注册中心-jhipster-registry](https://github.com/jhipster/jhipster-registry) 详细文档，参见 [The JHipster Registry](http://www.jhipster.tech/jhipster-registry/)\n\n```bash\n$ git clone https://github.com/jhipster/jhipster-registry.git\n$ cd jhipster-registry\n$ yarn install\n$ mvnw\n##....\n----------------------------------------------------------\n        Application 'jhipster-registry' is running! Access URLs:\n        Local:          http://localhost:8761\n        External:       http://xx.xx.xx.xx:8761\n        Profile(s):     [swagger, dev, native]\n----------------------------------------------------------\n```\n\n浏览器访问 `http://localhost:8761`  初始用户名密码均为 `admin`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofaf2j21fe0q4wgt.jpg)\n\n\n\nspring config server,统一配置中心，可以统一管理不同环境的数据库地址，用户名，密码等敏感数据\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofbxjj21fp0ofta7.jpg)\n\njhipster registry 对应SC(Spring Cloud)的eurake+spring config server，想想自己用原生的SC自己搞的辛酸泪吧，再牛逼，刚学，也得10min+才能跑起来吧？\n\n### 创建网关\n\n创建api网关，参见 [Creating an application](http://www.jhipster.tech/creating-an-app/) 和[The JHipster API Gateway](http://www.jhipster.tech/api-gateway/)\n\n```bash\n$ yarn global add generator-jhipster\n$ mkdir gateway\n$ cd gateway\n$ yo jhipster\n\n\n        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗\n        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗\n        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝\n  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║\n  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗\n   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝\n\n                            http://www.jhipster.tech\n\nWelcome to the JHipster Generator v4.13.2\n _______________________________________________________________________________________________________________\n\n  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster\n  Documentation for creating an application: http://www.jhipster.tech/creating-an-app/\n _______________________________________________________________________________________________________________\n\nApplication files will be generated in folder: G:\\jh\\gateway\n? Which *type* of application would you like to create? Microservice gateway\n? What is the base name of your application? gateway\n? As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 8080\n? What is your default Java package name? com.anjia.gateway\n? Which service discovery server do you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)\n? Which *type* of authentication would you like to use? JWT authentication (stateless, with a token)\n? Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)\n? Which *production* database would you like to use? MySQL\n? Which *development* database would you like to use? H2 with disk-based persistence\n? Do you want to use Hibernate 2nd level cache? Yes\n? Would you like to use Maven or Gradle for building the backend? Maven\n? Which other technologies would you like to use?\n? Which *Framework* would you like to use for the client? Angular 5\n? Would you like to enable *SASS* support using the LibSass stylesheet preprocessor? No\n? Would you like to enable internationalization support? Yes\n? Please choose the native language of the application English\n? Please choose additional languages to install\n? Besides JUnit and Karma, which testing frameworks would you like to use?\n? Would you like to install other generators from the JHipster Marketplace? No\n$ mvnw\n\n----------------------------------------------------------\n        Application 'gateway' is running! Access URLs:\n        Local:          http://localhost:8080\n        External:       http://xx.xx.xx.xx:8080\n        Profile(s):     [swagger, dev]\n----------------------------------------------------------\n```\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fncq2fhhg5j20yf0pwjv9.jpg)\n\n访问 `http://localhost:8080/` 默认用户名密码均为 `admin`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fncq3xeiuqj21gs0irac3.jpg)\n\n\n\n### 创建服务\n\n创建服务 参考 [Creating an application](http://www.jhipster.tech/creating-an-app/)\n\n```bash\n$ mkdir foo\n$ cd foo\n$ yo jhipster\n\n\n        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗\n        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗\n        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝\n  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║\n  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗\n   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝\n\n                            http://www.jhipster.tech\n\nWelcome to the JHipster Generator v4.13.2\n _______________________________________________________________________________________________________________\n\n  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster\n  Documentation for creating an application: http://www.jhipster.tech/creating-an-app/\n _______________________________________________________________________________________________________________\n\nApplication files will be generated in folder: G:\\jh\\foo\n? Which *type* of application would you like to create? Microservice application\n? What is the base name of your application? foo\n? As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 8081\n? What is your default Java package name? com.anjia.foo\n? Which service discovery server do you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)\n? Which *type* of authentication would you like to use? JWT authentication (stateless, with a token)\n? Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)\n? Which *production* database would you like to use? MySQL\n? Which *development* database would you like to use? H2 with disk-based persistence\n? Do you want to use the Spring cache abstraction? Yes, with the Hazelcast implementation (distributed cache, for multiple nodes)\n? Do you want to use Hibernate 2nd level cache? Yes\n? Would you like to use Maven or Gradle for building the backend? Maven\n? Which other technologies would you like to use?\n? Would you like to enable internationalization support? Yes\n? Please choose the native language of the application Chinese (Simplified)\n? Please choose additional languages to install\n? Besides JUnit and Karma, which testing frameworks would you like to use?\n? Would you like to install other generators from the JHipster Marketplace? No\n\n$ mvnw\n----------------------------------------------------------\n        Application 'foo' is running! Access URLs:\n        Local:          http://localhost:8081\n        External:       http://xx.xx.xx.xx:8081\n        Profile(s):     [swagger, dev]\n----------------------------------------------------------\n```\n\n\n\n访问 `http://localhost:8080/#/docs` 默认用户名密码均为 `admin` ，使用`swagger`管理api文档，开发时，仅需要添加对应的注解，即可自动生成文档，解决了传统通过word，pdf等管理接口时，文档更新不及时等问题。并且可以通过`try it`可以直接调用接口，避免了接口调试时使用`curl`,`postman`等工具\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofjgkj20y40l7dgs.jpg)\n\n\n至此，已经创建了一个简单微服务（jhipster-registry是注册中心，gateway是网关，foo是具体的功能模块）。\n\n### 创建实体\n\n参考文档 [Creating an entity](http://www.jhipster.tech/creating-an-entity/)\n\n\n\njhipster支持通过命令行创建实体，也支持uml或jdl生成实体，为了省事，此处使用 官方`jdl-studio` 的默认jdl文件 https://start.jhipster.tech/jdl-studio/\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn81m4vh86j20dy02kdfu.jpg)\n\n\n\n```bash\n$ yo jhipster:import-jdl /path/to/jdl-studio/jhipster-jdl.jh\nThe jdl is being parsed.\nWriting entity JSON files.\nUpdated entities are: Region,Country,Location,Department,Task,Employee,Job,JobHistory\nGenerating entities.\n\nFound the .jhipster/Region.json configuration file, entity can be automatically generated!\n\n\nThe entity Region is being updated.\n\n\nFound the .jhipster/Country.json configuration file, entity can be automatically generated!\n\n\nThe entity Country is being updated.\n\n\nFound the .jhipster/Location.json configuration file, entity can be automatically generated!\n\n\nThe entity Location is being updated.\n\n\nFound the .jhipster/Department.json configuration file, entity can be automatically generated!\n\n\nThe entity Department is being updated.\n\n\nFound the .jhipster/Task.json configuration file, entity can be automatically generated!\n\n\nThe entity Task is being updated.\n\n\nFound the .jhipster/Employee.json configuration file, entity can be automatically generated!\n\n\nThe entity Employee is being updated.\n\n\nFound the .jhipster/Job.json configuration file, entity can be automatically generated!\n\n\nThe entity Job is being updated.\n\n\nFound the .jhipster/JobHistory.json configuration file, entity can be automatically generated!\n\n\nThe entity JobHistory is being updated.\n\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064934_added_entity_Region.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Region.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\RegionRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\RegionResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\RegionService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\RegionServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\RegionDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EntityMapper.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\RegionMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\RegionResourceIntTest.java\n conflict src\\main\\resources\\config\\liquibase\\master.xml\n? Overwrite src\\main\\resources\\config\\liquibase\\master.xml? overwrite\n    force src\\main\\resources\\config\\liquibase\\master.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_Country.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_constraints_Country.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Country.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\CountryRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\CountryResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\CountryService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\CountryServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\CountryDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\CountryMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\CountryResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_Location.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_constraints_Location.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Location.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\LocationRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\LocationResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\LocationService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\LocationServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\LocationDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\LocationMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\LocationResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_Department.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_constraints_Department.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Department.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\DepartmentRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\DepartmentService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\DepartmentServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\DepartmentDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\DepartmentMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064938_added_entity_Task.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Task.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\TaskRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\TaskResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\TaskService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\TaskServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\TaskDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\TaskMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\TaskResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_Employee.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_constraints_Employee.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Employee.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\EmployeeRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\EmployeeDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EmployeeMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_Job.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_constraints_Job.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\Job.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\JobRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\JobResourceIntTest.java\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_JobHistory.xml\n   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_constraints_JobHistory.xml\n   create src\\main\\java\\com\\anjia\\foo\\domain\\JobHistory.java\n   create src\\main\\java\\com\\anjia\\foo\\repository\\JobHistoryRepository.java\n   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResource.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\JobHistoryService.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\JobHistoryServiceImpl.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobHistoryDTO.java\n   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobHistoryMapper.java\n   create src\\test\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResourceIntTest.java\n   create src\\main\\java\\com\\anjia\\foo\\domain\\enumeration\\Language.java\n```\n\n重启 `foo`服务,再次访问 `http://localhost:8080/#/docs` 发现多了很多接口\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn81x40lzzj21240oo412.jpg)\n\n\n\n通过swagger ui，找到 `region-resource` 找到 `POST /api/regions ` 创建一个名为`test`的`regison`\n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn8249j1itj20rj0mtaax.jpg)\n\n点 `try it out!` 然后浏览器打开 `h2 数据库` `http://localhost:8081/h2-console` \n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn825ejmpxj20g90b3t8x.jpg)\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fn825ehnhnj20op0bp755.jpg)\n\n查询 `REGION`表，数据已经插入成功。\n\n至此，一个虽然简单，但是可用的微服务已经弄好。\n\n\n\n## 将服务发布到rancher\n\n参见文档 [[BETA] Deploying to Rancher](http://www.jhipster.tech/rancher/) ,jhipster支持发布到 [Cloud Foundry](http://www.jhipster.tech/cloudfoundry/) ,[Heroku](http://www.jhipster.tech/heroku/),[Kubernetes](http://www.jhipster.tech/kubernetes/),[Openshift](http://www.jhipster.tech/openshift/),[Rancher](http://www.jhipster.tech/rancher/),[AWS](http://www.jhipster.tech/aws/),[Boxfuse](http://www.jhipster.tech/boxfuse/)\n\n建议使用rancher，原因，  [Cloud Foundry](http://www.jhipster.tech/cloudfoundry/) ,[Heroku](http://www.jhipster.tech/heroku/),[AWS](http://www.jhipster.tech/aws/),[Boxfuse](http://www.jhipster.tech/boxfuse/) 都是云环境，k8s和openshift origin太复杂了，而rancher很容易上手，其联合创始人成为CNCF的理事会成员。\n\n附上一张 CNCF天梯图 \n\n![](http://ww1.sinaimg.cn/large/afaffa71ly1fncqh707snj247p2dcb2b.jpg)\n\n\n\n```bash\n $ mkdir docker\n $ cd docker\n $ yo jhipster rancher-rancher\n\n\n        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗\n        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗\n        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝\n  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║\n  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗\n   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝\n\n                            http://www.jhipster.tech\n\nWelcome to the JHipster Generator v4.13.2\n _______________________________________________________________________________________________________________\n\n  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster\n  Documentation for creating an application: http://www.jhipster.tech/creating-an-app/\n _______________________________________________________________________________________________________________\n\nApplication files will be generated in folder: G:\\jh\\docker\n? What is the base name of your application? (docker)\nG:\\jh\\docker\nλ  jhipster rancher-compose\nUsing JHipster version installed globally\nExecuting jhipster:rancher-compose\nOptions:\n🐮 [BETA] Welcome to the JHipster Rancher Compose Generator 🐮\nFiles will be generated in folder: G:\\jh\\docker\n? Which *type* of application would you like to deploy? Microservice application\n? Enter the root directory where your gateway(s) and microservices are located ../\n2 applications found at G:\\jh\\\n\n? Which applications do you want to include in your configuration? foo, gateway\n? Do you want to setup monitoring for your applications ? Yes, for logs and metrics with the JHipster Console (based on ELK and Zipkin)\nJHipster registry detected as the service discovery and configuration provider used by your apps\n? Enter the admin password used to secure the JHipster Registry admin\n? Would you like to enable rancher load balancing support? Yes\n? What should we use for the base Docker repository name?\n? What command should we use for push Docker image to repository? docker push\n\nChecking Docker images in applications' directories...\nls: no such file or directory: G:/jh/foo/target/docker\nls: no such file or directory: G:/jh/gateway/target/docker\n   create rancher-compose.yml\n   create docker-compose.yml\n   create registry-config-sidekick\\Dockerfile\n   create registry-config-sidekick\\application.yml\n\n\nRancher Compose configuration generated with missing images!\nTo generate the missing Docker image(s), please run:\n  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\foo\n  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\gateway\n\nWARNING! You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:\ndocker push foo\ndocker push gateway\nCongratulations, JHipster execution is complete!\n```\n\n\n\n#### rancher-compose.yml\n\n```yaml\nversion: '2'\nservices:\n    lb:\n        # load balancer container\n        scale: 1\n        load_balancer_config:\n          name: lb config\n        health_check:\n          port: 42\n          interval: 2000\n          unhealthy_threshold: 3\n          healthy_threshold: 2\n          response_timeout: 2000\n    foo-app:\n        scale: 1\n    foo-mysql:\n        scale: 1\n    \n    gateway-app:\n        scale: 1\n    gateway-mysql:\n        scale: 1\n    \n\n    jhipster-registry:\n        scale: 1\n\n\n    jhipster-elasticsearch:\n        scale: 1\n    jhipster-logstash:\n        scale: 1\n    jhipster-console:\n        scale: 1\n    # Uncomment this section to enable Zipkin\n    #jhipster-zipkin:\n    #    scale: 1\n\n```\n\n\n\n#### docker-compose.yml\n\n```yaml\nversion: '2'\nservices:\n    lb:\n      image: rancher/load-balancer-service\n      ports:\n        # Listen on public port 80 and direct traffic to private port 8080 of the service\n        - 80:8080\n      links:\n        # Target services in the same stack will be listed as a link\n        - gateway-app:gateway-app\n    foo-app:\n        image: foo\n        environment:\n            - SPRING_PROFILES_ACTIVE=prod,swagger\n            - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/eureka\n            - SPRING_CLOUD_CONFIG_URI=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/config\n            - SPRING_DATASOURCE_URL=jdbc:mysql://foo-mysql:3306/foo?useUnicode=true&characterEncoding=utf8&useSSL=false\n            - JHIPSTER_SLEEP=30\n            - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true\n            - JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash\n            - JHIPSTER_METRICS_LOGS_ENABLED=true\n            - JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60\n            - JHIPSTER_REGISTRY_PASSWORD=admin\n    foo-mysql:\n        image: mysql:5.7.20\n        environment:\n            - MYSQL_USER=root\n            - MYSQL_ALLOW_EMPTY_PASSWORD=yes\n            - MYSQL_DATABASE=foo\n        command: >-\n            mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8\n            --explicit_defaults_for_timestamp\n    \n    gateway-app:\n        image: gateway\n        environment:\n            - SPRING_PROFILES_ACTIVE=prod,swagger\n            - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/eureka\n            - SPRING_CLOUD_CONFIG_URI=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/config\n            - SPRING_DATASOURCE_URL=jdbc:mysql://gateway-mysql:3306/gateway?useUnicode=true&characterEncoding=utf8&useSSL=false\n            - JHIPSTER_SLEEP=30\n            - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true\n            - JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash\n            - JHIPSTER_METRICS_LOGS_ENABLED=true\n            - JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60\n            - JHIPSTER_REGISTRY_PASSWORD=admin\n        ports:\n            - 8080:8080\n    gateway-mysql:\n        image: mysql:5.7.20\n        environment:\n            - MYSQL_USER=root\n            - MYSQL_ALLOW_EMPTY_PASSWORD=yes\n            - MYSQL_DATABASE=gateway\n        command: >-\n            mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8\n            --explicit_defaults_for_timestamp\n    \n    jhipster-registry:\n        image: jhipster/jhipster-registry:v3.2.4\n        #volumes:\n        #    - ./central-server-config:/central-config\n        # By default the JHipster Registry runs with the \"dev\" and \"native\"\n        # Spring profiles.\n        # \"native\" profile means the filesystem is used to store data, see\n        # http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html\n        environment:\n            - SPRING_PROFILES_ACTIVE=dev,native\n            - SECURITY_USER_PASSWORD=admin\n            - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true\n            - JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash\n            - JHIPSTER_METRICS_LOGS_ENABLED=true\n            - JHIPSTER_METRICS_LOGS_REPORTFREQUENCY=60\n            - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:./config/\n            # Uncomment to use a Git configuration source instead of the local filesystem\n            # mounted from the registry-config-sidekick volume\n            # - GIT_URI=https://github.com/jhipster/jhipster-registry/\n            # - GIT_SEARCH_PATHS=central-config\n        ports:\n            - 8761:8761\n        volumes:\n          - /config\n        volumes_from:\n          - registry-config-sidekick\n        labels:\n          io.rancher.sidekicks: registry-config-sidekick\n    registry-config-sidekick:\n        # this docker image must be built with:\n        # docker build -t registry-config-sidekick registry-config-sidekick\n        image: registry-config-sidekick\n        tty: true\n        stdin_open: true\n        command:\n          - cat\n        volumes:\n          - config:/config\n    jhipster-elasticsearch:\n        image: jhipster/jhipster-elasticsearch:v2.2.1\n        ports:\n            - 9200:9200\n            - 9300:9300\n        # Uncomment this section to have elasticsearch data persisted to a volume\n        #volumes:\n        #   - ./log-data:/usr/share/elasticsearch/data\n    jhipster-logstash:\n        image: jhipster/jhipster-logstash:v2.2.1\n        command: logstash -f /conf/logstash.conf\n        ports:\n            - 5000:5000/udp\n        # Uncomment this section to have logstash config loaded from a volume\n        #volumes:\n        #    - ./log-conf/:/conf\n    jhipster-console:\n        image: jhipster/jhipster-console:v2.2.1\n        ports:\n            - 5601:5601\n    # Uncomment this section to enable Zipkin\n    #jhipster-zipkin:\n    #    image: jhipster/jhipster-zipkin:v2.2.1\n    #    ports:\n    #        - 9411:9411\n    #    environment:\n    #        - ES_HOSTS=http://jhipster-elasticsearch:9200\n    #        - ZIPKIN_UI_LOGS_URL=http://localhost:5601/app/kibana#/dashboard/logs-dashboard?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-1h,mode:quick,to:now))&_a=(filters:!(),options:(darkTheme:!f),panels:!((col:1,id:logs-levels,panelIndex:2,row:1,size_x:6,size_y:3,type:visualization),(col:7,columns:!(stack_trace),id:Stacktraces,panelIndex:7,row:1,size_x:4,size_y:3,sort:!('@timestamp',desc),type:search),(col:11,id:Log-forwarding-instructions,panelIndex:8,row:1,size_x:2,size_y:3,type:visualization),(col:1,columns:!(app_name,level,message),id:All-logs,panelIndex:9,row:4,size_x:12,size_y:7,sort:!('@timestamp',asc),type:search)),query:(query_string:(analyze_wildcard:!t,query:'{traceId}')),title:logs-dashboard,uiState:())\n\n```\n\n`docker-compose.yml`中给的`jhipster-registry`是本地模式的，可以根据注释部分内容，改成从git拉。好处是维护方便，坏处是，容易造成单点故障。使用git模式，就可以将 `registry-config-sidekick` 部分去掉。\n\n\n\njhipster使用[liquibase](http://www.liquibase.org/) 进行数据库版本管理，便于数据库版本变更记录管理和迁移。(rancher server 也用的liquibase)\n\n把docker-compose.yml和rancher-compose.yml贴到rancher上，就能创建一个应用 stack了。\n\n不过，好像漏了点啥，少了CICD，rancher和docker的compsoe.yml有了，但是，还没构建镜像呢，镜像还没push到registry呢，对吧\n\n## 自建gitlab\n\n我司用gitlab管理源码，我在docker hub上发布了一个汉化的gitlab  https://hub.docker.com/r/gitlab/gitlab-ce/tags/,如果要用官方镜像，参见 https://hub.docker.com/r/gitlab/gitlab-ce/tags/\n\n```yaml\nversion: '2'\nservices:\n  gitlab:\n    mem_limit: 5368709120 #限制内存最大 5G = 5*1024*1024*1024\n    image: anjia0532/gitlab-ce-zh:10.3.3-ce.0\n    volumes:\n    - /data/gitlab/config:/etc/gitlab\n    - /data/gitlab/data:/var/opt/gitlab\n    - /data/gitlab/log:/var/log/gitlab\n    ports:\n    - 80:80/tcp\n    - 443:443/tcp\n\n```\n\n\n## gitlab ci \n\n参见文档 [GitLab Continuous Integration (GitLab CI)](https://docs.gitlab.com/ce/ci/README.html)\n\n为啥不用jenkins？\n\n这个萝卜白菜各有所爱，我是出于压缩技术栈的考虑，\n\n1. gitlab-ci够简单，也够用，\n2. 根gitlab配套，不用多学习jenkins，毕竟多一套，就多一套的学习成本\n\n\n## 搭建镜像伺服\n\n- 老牌 [sonatype nexus oss](https://www.sonatype.com/download-oss-sonatype) 可以管理 Bower,Docker,Git LFS,Maven,npm,NuGet,PyPI,Ruby Gems,Yum Proxy,功能丰富\n\n- [GitLab Container Registry administration](https://docs.gitlab.com/ce/administration/container_registry.html#gitlab-container-registry-administration) gitlab registry跟gitlab集成，不需要额外安装服务\n\n- [harbor](http://vmware.github.io/harbor/) rancher应用商店就有，安装方便，号称企业级registry，功能强大。\n\n还是那句话，看需求，我司有部署maven和npm的需要，所以用了nexus oss，顺便管理docker registry。\n\n\n\n## Service Mesh--下一代微服务\n\n我司是从16年八九月份开始拆分单体服务，彼时国内spring cloud，微服务等相关资料较少，国内流行dubbo(那会已经断更1年多了，虽然现在复更，但是对其前景不太看好)\n\n从17年开始，圈内讨论spring cloud的渐渐多起来了，同时市面上也有了介绍spring cloud的书籍，比如周立的[Spring Cloud与Docker微服务架构实战](https://item.jd.com/12168358.html), 翟永超的[Spring Cloud微服务实战](https://item.jd.com/12172344.html) 等\n\n\n\n但是用了spring cloud后，感觉spring cloud太复杂了(如果用了jhipster情况会好点)，并没有实现微服务的初衷\n\n- 跟语言，框架无关:局限于java\n- 隐藏底层细节，需要学习zuul路由，eureka注册中心，configserver配置中心，需要熔断，降级，需要实现分布式跟踪...\n\n\n在这种情况下，16年，国外buoyant公司提出Service Mesh概念，基于scala创建了linkerd项目。\n\nservice mesh 的设想就是，让开发人员专注于业务，不再分心于基础设施。\n\n\n目前主流框架\n\n1. [istio](https://istio.io/) 背靠google，ibm，后台硬，前景广阔\n2. [conduit ](https://conduit.io/) 跟linkerd是一个公司的，使用Rust语言开发，proxy消耗不到10M内存，p99控制在毫秒内\n3. [linkerd](https://linkerd.io/) 商用企业较多，国内我知道的有豆瓣\n4. [envoy](https://www.envoyproxy.io/) 国内腾讯在用\n\n\n其中istio和conduit都不太成熟，而linkerd和envoy都有商用案例，较为成熟。长远来看，更看好 istio和conduit\n\n\n\n在此 分享一个dubbo的老用户的利好消息，据说 dubbo3 将兼容2，并且支持service mesh，并且支持反应式编程。参见 重大革新！[Dubbo 3.0来了](http://mp.weixin.qq.com/s/eVYx-tUIMYtAk5wP-qkdkw)\n\n\n\n扩展阅读资料\n\n\n[官方文档|ServiceMesh服务网格Istio面板组件&设计目标](http://blog.shurenyun.com/untitled-102/)\n\n[演讲实录 | Service Mesh 时代的选边与站队（附PPT下载）](http://www.servicemesh.cn/?/article/25)\n\n[Service Mesh：下一代微服务](https://servicemesh.gitbooks.io/awesome-servicemesh/mesh/2017/service-mesh-next-generation-of-microservice/)\n\n[Service Mesh 在华为公有云的实践](http://gitbook.cn/books/5a1e7dca387c5b4ee351790b/index.html)\n\n[明星分分合合的洪荒点击量，微博Mesh服务化改造如何支撑？（附PPT下载）](https://mp.weixin.qq.com/s/XZVCHZZzCX8wwgNKZtsmcA)\n\n**注意**\n\n需要根据公司、团队实际情况理性选择框架，目前service mesh还处于垦荒阶段，而spring cloud或者dubbo还没到彻底过时的程度，建议持续关注，不建议立刻上马，如果已经落地了相关的微服务技术，不要盲目跟风，在可接受学习成本和开发成本情况下，可以考虑研究一下service mesh。\n\n如果使用的是spring框架的话，建议抛开spring cloud，直接spring boot+service mesh，更清爽一些\n\n\n\n","slug":"rancher-wechat-18-01-10","published":1,"updated":"2019-08-16T05:56:21.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzdtojlh00jj24dojtmb5y0o","content":"<h2 id=\"初创团队如何快速落地微服务–基于spring-cloud-jhipster的微服务实践\"><a href=\"#初创团队如何快速落地微服务–基于spring-cloud-jhipster的微服务实践\" class=\"headerlink\" title=\"初创团队如何快速落地微服务–基于spring cloud/jhipster的微服务实践\"></a>初创团队如何快速落地微服务–基于spring cloud/jhipster的微服务实践</h2><p>本次分享主要是针对，小公司及初创团队如何用较低成本落地微服务，拥抱变化，快速交付</p>\n<a id=\"more\"></a>\n<h2 id=\"微服务概述\"><a href=\"#微服务概述\" class=\"headerlink\" title=\"微服务概述\"></a>微服务概述</h2><h3 id=\"相关趋势图\"><a href=\"#相关趋势图\" class=\"headerlink\" title=\"相关趋势图\"></a>相关趋势图</h3><p>从<a href=\"http://index.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度指数</a>搜索 <code>微服务</code>、<code>spring boot</code>、<code>spring cloud</code>、<code>dubbo</code> 相关关键词，得到如下趋势（微服务的概念源于2014年3月Martin Fowler所写的一篇文章<a href=\"http://martinfowler.com/articles/microservices.html\" target=\"_blank\" rel=\"noopener\">Microservices</a> ,所以选择从2014.03至今）</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fmtclday7oj20y309rgnr.jpg\" alt=\"\"></p>\n<p>从图中可见，<code>dubbo</code>的搜索量增势放缓，而<code>Spring Boot</code>从16年中下旬开始发力，一路高涨。而学习了<code>Spring boot</code> 再学习<code>Spring Cloud</code>  几乎顺理成章。</p>\n<p>spring boot旨在解决Spring越来越臃肿的全家桶方案的<code>配置地狱</code>（讽刺的是，Spring刚出道是扯着轻量化解决方案大旗一路冲杀，现在自己也开始慢慢胖起来了）,提供了很多简单易用的<code>starter</code>。特点是预定大于配置。</p>\n<p>dubbo放缓是源于，阿里巴巴中间断更将近三年(<a href=\"https://github.com/alibaba/dubbo/releases/tag/dubbo-2.4.11\" target=\"_blank\" rel=\"noopener\">dubbo-2.4.11</a> 2014-10-30, <a href=\"https://github.com/alibaba/dubbo/releases/tag/dubbo-2.5.4\" target=\"_blank\" rel=\"noopener\">dubbo-2.5.4</a> 2017-09-07),很多依赖框架和技术都较为陈旧，也不接纳社区的PR(当然，从17年九月份开始恢复更新，后面会有说到)，导致当当另起炉灶，fork了一个<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">dangdangdotcom/dubbox</a> 当然，现在也已断更。而且dubbo仅相当于Spring cloud的一个子集，参考 <a href=\"http://blog.csdn.net/kobejayandy/article/details/52078275\" target=\"_blank\" rel=\"noopener\">微服务架构的基础框架选择：Spring Cloud还是Dubbo？</a> (此处说的是dubbo2.x,最新的3.x变化较大，后边会说到)</p>\n<p> <code>k8s</code>、<code>kubernetes</code> 、<code>docker</code> 的搜索趋势</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fmtcqtu6ejj20ye08bq3u.jpg\" alt=\"\"></p>\n<h3 id=\"微服务vs单体应用\"><a href=\"#微服务vs单体应用\" class=\"headerlink\" title=\"微服务vs单体应用\"></a>微服务vs单体应用</h3><p>下面是我整理的一些关于单体服务和微服务的对比</p>\n<p>单体应用好处</p>\n<ul>\n<li>开发简单</li>\n<li>容易测试</li>\n<li>易于部署</li>\n<li>事务回滚容易</li>\n<li>无分布式管理，调用开销</li>\n<li>重复功能/代码较少</li>\n</ul>\n<p>单体应用缺点</p>\n<ul>\n<li>迭代缓慢</li>\n<li>维护困难</li>\n<li>持续部署困难：微小改动，必须重启，不相干功能无法提供服务</li>\n<li>牵一发而动全身：依赖项冲突，变更后，需要大量测试，防止影响其他功能</li>\n<li>基础语言、框架升级缓慢</li>\n<li>框架语言单一，无法灵活选用</li>\n</ul>\n<p>微服务好处</p>\n<ul>\n<li>敏捷性：按功能拆分，快速迭代</li>\n<li>自主性：团队技术选型灵活(PHP,python,java,C#,nodejs,golang)，设计自主</li>\n<li>可靠性：微服务故障只影响此服务消费者，而单体式应用会导致整个服务不可用</li>\n<li>持续集成持续交付</li>\n<li>可扩展性：热点功能容易扩展</li>\n</ul>\n<p>微服务的缺点</p>\n<ul>\n<li>性能降低：服务间通过网络调用</li>\n<li>管理难度增大：增加了项目的复杂性</li>\n<li>事务一致性</li>\n</ul>\n<p>扩展阅读 <a href=\"https://www.nginx.com/blog/introduction-to-microservices/\" target=\"_blank\" rel=\"noopener\">Introduction to Microservices</a></p>\n<h3 id=\"框架选型\"><a href=\"#框架选型\" class=\"headerlink\" title=\"框架选型\"></a>框架选型</h3><p>下面讲一下，我司在落地微服务时的框架选型方面的一些经验。</p>\n<p>公司主要使用java，所以决定使用spring 框架中的<code>spring cloud</code>作为微服务基础框架，但是原生 spring cloud 学习曲线比较陡峭，需要学习<code>feign</code>,<code>zuul</code>,<code>eureka</code>,<code>hystrix</code>,<code>zipkin</code>,<code>ribbon</code>… 所谓的Spring Cloud全家桶</p>\n<p>综合考虑团队的技术水平和学习成本，最后采用了国外的开源框架 <a href=\"http://www.jhipster.tech/\" target=\"_blank\" rel=\"noopener\">jhipster官网</a>  <a href=\"https://github.com/jhipster\" target=\"_blank\" rel=\"noopener\">jhipster github</a>，登记在册的，使用jhipster的企业有224家(截止2018-01-11)，包括埃森哲，google，adobe等大厂。</p>\n<p>jhipster 是由2013年由法国Java专家 Julien Dubois (朱利安 杜波尔斯)率先倡导，至今已有快5年了，积累了大量丰富经验。 采用Java 8(目前尚不支持java9,但是有开发计划)，特色是多用注解, 不用XML 配置的组态，配备了全方位的工作环境，从开发，测试，监控到制成，以及云部署。</p>\n<p>国内用dubbo的较多，用jhipster的较少，起码很多群里交流的时候，很多表示没听过，或者是我加的假群？至于为啥不用dubbo，前面提到过，一个是中间断更，以及阿里说不更就不更的优良传统，还有dubbo从功能来说，只是Spring Cloud的一个子集(dubbo 2.x) 。</p>\n<p>列举一下 jhipster 给的技术栈 ，参见 <a href=\"http://www.jhipster.tech/tech-stack/\" target=\"_blank\" rel=\"noopener\">Technology stack</a></p>\n<h4 id=\"客户端技术栈\"><a href=\"#客户端技术栈\" class=\"headerlink\" title=\"客户端技术栈\"></a>客户端技术栈</h4><ul>\n<li>angular4,5 or angularv1.x</li>\n<li>Bootstrap</li>\n<li><a href=\"http://html5boilerplate.com/\" target=\"_blank\" rel=\"noopener\">HTML5 Boilerplate</a></li>\n<li>兼容IE11+及现代浏览器</li>\n<li>支持国际化</li>\n<li>支持sass</li>\n<li>支持spring websocket</li>\n<li>支持yarn、bower管理js库</li>\n<li>支持webpack、gulp.js构建，优化，应用</li>\n<li>支持<a href=\"http://karma-runner.github.io/\" target=\"_blank\" rel=\"noopener\">Karma</a>, <a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">Headless Chrome</a> 和 <a href=\"http://www.protractortest.org/\" target=\"_blank\" rel=\"noopener\">Protractor</a> 进行前端单元测试测试</li>\n<li>支持<a href=\"http://www.thymeleaf.org/\" target=\"_blank\" rel=\"noopener\">Thymeleaf</a> 模板引擎，从服务端渲染页面</li>\n</ul>\n<h4 id=\"服务端技术栈\"><a href=\"#服务端技术栈\" class=\"headerlink\" title=\"服务端技术栈\"></a>服务端技术栈</h4><ul>\n<li>支持spring boot 简化spring配置</li>\n<li>支持maven、gradle，构建、测试、运行程序</li>\n<li>支持多配置文件(默认<code>dev</code>,<code>prod</code>)</li>\n<li>spring security</li>\n<li>spring mvc REST + jackson</li>\n<li>spring websocket</li>\n<li>spring data jpa + Bean Validation</li>\n<li>使用liquibase管理数据库表结构变更版本</li>\n<li>支持elasticsearch，进行应用内搜素</li>\n<li>支持mongoDB 、Couchbase、Cassandra等NoSQL</li>\n<li>支持h2db,pgsql,mysql,meriadb,sqlserver,oracle等关系型sql</li>\n<li>支持kafka mq</li>\n<li>使用 zuul或者traefik作为http理由</li>\n<li>使用eureka或consul进行服务发现</li>\n<li>支持ehcache,hazelcast,infinispan等缓存框架</li>\n<li>支持基于hazelcast的httpsession集群</li>\n<li>数据源使用HikariCP连接池</li>\n<li>生成Dockerfile,docker-compose.yml</li>\n<li>支持云服务商,AWS,Cloud Foundry,Heroku,Kubernetes,Openshift,Docker …</li>\n<li>支持统一配置中心</li>\n</ul>\n<p>其实真正用过就会发现，jhipster支持的不止列表中描述的这些。</p>\n<p>如果不会用yarn或者不方便用命令行生成项目，可以使用<a href=\"https://start.jhipster.tech/\" target=\"_blank\" rel=\"noopener\">jhipster online</a></p>\n<p>如果想学习jhipster，可以参考我在公司推广jhipster时写的一本gitbook <a href=\"https://jh.jiankangsn.com/\" target=\"_blank\" rel=\"noopener\">jhipster开发笔记</a></p>\n<p>同时，值得一提的是，jhipster也支持通过 <code>jhipster rancher-compose</code> 命令来生成<code>rancher-compose.yml</code>和<code>docker-compose.yml</code> 参见 <a href=\"http://www.jhipster.tech/rancher/\" target=\"_blank\" rel=\"noopener\">[BETA] Deploying to Rancher</a></p>\n<p>对于小团队落地微服务，可以考虑使用jhipster来生成项目，能够极大的提高效率。基本上可以视作jhipster是一套基于spring boot的最佳实践(不仅支持微服务，也支持单体式应用)。</p>\n<p>对于想学习spring boot或者spring cloud的也建议了解一下jhipster，好过独自摸索</p>\n<p>jhipster依赖的技术框架版本基本都是最新稳定版，版本更新比较及时，基本上一月一个版本，对github上的issues和pr响应比较及时(一般在24小时内)</p>\n<h2 id=\"10分钟搭建微服务\"><a href=\"#10分钟搭建微服务\" class=\"headerlink\" title=\"10分钟搭建微服务\"></a>10分钟搭建微服务</h2><h3 id=\"安装node-yarn\"><a href=\"#安装node-yarn\" class=\"headerlink\" title=\"安装node,yarn\"></a><a href=\"https://jh.jiankangsn.com/install.html\" target=\"_blank\" rel=\"noopener\">安装node,yarn</a></h3><p><strong>注意</strong></p>\n<p>如果是windows nodejs 需要安装v7.x，因为注册中心和网关需要用到node-sass@4.5.0，但是github上的node-sass的rebuild只有v7.x(process 51) 版本的，而自己构建太反人类了。如果是linux，可以尝试高版本的。</p>\n<p>安装完 node,yarn后，执行下面代码，使用npm的淘宝镜像，加速构建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn config <span class=\"built_in\">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>安装 jdk8,maven,maven加速，请自行百度。</p>\n<h2 id=\"安装jhipster\"><a href=\"#安装jhipster\" class=\"headerlink\" title=\"安装jhipster\"></a>安装jhipster</h2><h3 id=\"下载注册中心\"><a href=\"#下载注册中心\" class=\"headerlink\" title=\"下载注册中心\"></a>下载注册中心</h3><p>下载并运行 <a href=\"https://github.com/jhipster/jhipster-registry\" target=\"_blank\" rel=\"noopener\">注册中心-jhipster-registry</a> 详细文档，参见 <a href=\"http://www.jhipster.tech/jhipster-registry/\" target=\"_blank\" rel=\"noopener\">The JHipster Registry</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jhipster/jhipster-registry.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> jhipster-registry</span><br><span class=\"line\">$ yarn install</span><br><span class=\"line\">$ mvnw</span><br><span class=\"line\"><span class=\"comment\">##....</span></span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">        Application <span class=\"string\">'jhipster-registry'</span> is running! Access URLs:</span><br><span class=\"line\">        Local:          http://localhost:8761</span><br><span class=\"line\">        External:       http://xx.xx.xx.xx:8761</span><br><span class=\"line\">        Profile(s):     [swagger, dev, native]</span><br><span class=\"line\">----------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>浏览器访问 <code>http://localhost:8761</code>  初始用户名密码均为 <code>admin</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofaf2j21fe0q4wgt.jpg\" alt=\"\"></p>\n<p>spring config server,统一配置中心，可以统一管理不同环境的数据库地址，用户名，密码等敏感数据</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofbxjj21fp0ofta7.jpg\" alt=\"\"></p>\n<p>jhipster registry 对应SC(Spring Cloud)的eurake+spring config server，想想自己用原生的SC自己搞的辛酸泪吧，再牛逼，刚学，也得10min+才能跑起来吧？</p>\n<h3 id=\"创建网关\"><a href=\"#创建网关\" class=\"headerlink\" title=\"创建网关\"></a>创建网关</h3><p>创建api网关，参见 <a href=\"http://www.jhipster.tech/creating-an-app/\" target=\"_blank\" rel=\"noopener\">Creating an application</a> 和<a href=\"http://www.jhipster.tech/api-gateway/\" target=\"_blank\" rel=\"noopener\">The JHipster API Gateway</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yarn global add generator-jhipster</span><br><span class=\"line\">$ mkdir gateway</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> gateway</span><br><span class=\"line\">$ yo jhipster</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class=\"line\">        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class=\"line\">        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class=\"line\">  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class=\"line\">  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class=\"line\">   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">                            http://www.jhipster.tech</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the JHipster Generator v4.13.2</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster</span><br><span class=\"line\">  Documentation <span class=\"keyword\">for</span> creating an application: http://www.jhipster.tech/creating-an-app/</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">Application files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\gateway</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of application would you like to create? Microservice gateway</span><br><span class=\"line\">? What is the base name of your application? gateway</span><br><span class=\"line\">? As you are running <span class=\"keyword\">in</span> a microservice architecture, on <span class=\"built_in\">which</span> port would like your server to run? It should be unique to avoid port conflicts. 8080</span><br><span class=\"line\">? What is your default Java package name? com.anjia.gateway</span><br><span class=\"line\">? Which service discovery server <span class=\"keyword\">do</span> you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of authentication would you like to use? JWT authentication (stateless, with a token)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span><br><span class=\"line\">? Which *production* database would you like to use? MySQL</span><br><span class=\"line\">? Which *development* database would you like to use? H2 with disk-based persistence</span><br><span class=\"line\">? Do you want to use Hibernate 2nd level cache? Yes</span><br><span class=\"line\">? Would you like to use Maven or Gradle <span class=\"keyword\">for</span> building the backend? Maven</span><br><span class=\"line\">? Which other technologies would you like to use?</span><br><span class=\"line\">? Which *Framework* would you like to use <span class=\"keyword\">for</span> the client? Angular 5</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> *SASS* support using the LibSass stylesheet preprocessor? No</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> internationalization support? Yes</span><br><span class=\"line\">? Please choose the native language of the application English</span><br><span class=\"line\">? Please choose additional languages to install</span><br><span class=\"line\">? Besides JUnit and Karma, <span class=\"built_in\">which</span> testing frameworks would you like to use?</span><br><span class=\"line\">? Would you like to install other generators from the JHipster Marketplace? No</span><br><span class=\"line\">$ mvnw</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">        Application <span class=\"string\">'gateway'</span> is running! Access URLs:</span><br><span class=\"line\">        Local:          http://localhost:8080</span><br><span class=\"line\">        External:       http://xx.xx.xx.xx:8080</span><br><span class=\"line\">        Profile(s):     [swagger, dev]</span><br><span class=\"line\">----------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fncq2fhhg5j20yf0pwjv9.jpg\" alt=\"\"></p>\n<p>访问 <code>http://localhost:8080/</code> 默认用户名密码均为 <code>admin</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fncq3xeiuqj21gs0irac3.jpg\" alt=\"\"></p>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>创建服务 参考 <a href=\"http://www.jhipster.tech/creating-an-app/\" target=\"_blank\" rel=\"noopener\">Creating an application</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir foo</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> foo</span><br><span class=\"line\">$ yo jhipster</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class=\"line\">        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class=\"line\">        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class=\"line\">  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class=\"line\">  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class=\"line\">   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">                            http://www.jhipster.tech</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the JHipster Generator v4.13.2</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster</span><br><span class=\"line\">  Documentation <span class=\"keyword\">for</span> creating an application: http://www.jhipster.tech/creating-an-app/</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">Application files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\foo</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of application would you like to create? Microservice application</span><br><span class=\"line\">? What is the base name of your application? foo</span><br><span class=\"line\">? As you are running <span class=\"keyword\">in</span> a microservice architecture, on <span class=\"built_in\">which</span> port would like your server to run? It should be unique to avoid port conflicts. 8081</span><br><span class=\"line\">? What is your default Java package name? com.anjia.foo</span><br><span class=\"line\">? Which service discovery server <span class=\"keyword\">do</span> you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of authentication would you like to use? JWT authentication (stateless, with a token)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span><br><span class=\"line\">? Which *production* database would you like to use? MySQL</span><br><span class=\"line\">? Which *development* database would you like to use? H2 with disk-based persistence</span><br><span class=\"line\">? Do you want to use the Spring cache abstraction? Yes, with the Hazelcast implementation (distributed cache, <span class=\"keyword\">for</span> multiple nodes)</span><br><span class=\"line\">? Do you want to use Hibernate 2nd level cache? Yes</span><br><span class=\"line\">? Would you like to use Maven or Gradle <span class=\"keyword\">for</span> building the backend? Maven</span><br><span class=\"line\">? Which other technologies would you like to use?</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> internationalization support? Yes</span><br><span class=\"line\">? Please choose the native language of the application Chinese (Simplified)</span><br><span class=\"line\">? Please choose additional languages to install</span><br><span class=\"line\">? Besides JUnit and Karma, <span class=\"built_in\">which</span> testing frameworks would you like to use?</span><br><span class=\"line\">? Would you like to install other generators from the JHipster Marketplace? No</span><br><span class=\"line\"></span><br><span class=\"line\">$ mvnw</span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">        Application <span class=\"string\">'foo'</span> is running! Access URLs:</span><br><span class=\"line\">        Local:          http://localhost:8081</span><br><span class=\"line\">        External:       http://xx.xx.xx.xx:8081</span><br><span class=\"line\">        Profile(s):     [swagger, dev]</span><br><span class=\"line\">----------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:8080/#/docs</code> 默认用户名密码均为 <code>admin</code> ，使用<code>swagger</code>管理api文档，开发时，仅需要添加对应的注解，即可自动生成文档，解决了传统通过word，pdf等管理接口时，文档更新不及时等问题。并且可以通过<code>try it</code>可以直接调用接口，避免了接口调试时使用<code>curl</code>,<code>postman</code>等工具</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofjgkj20y40l7dgs.jpg\" alt=\"\"></p>\n<p>至此，已经创建了一个简单微服务（jhipster-registry是注册中心，gateway是网关，foo是具体的功能模块）。</p>\n<h3 id=\"创建实体\"><a href=\"#创建实体\" class=\"headerlink\" title=\"创建实体\"></a>创建实体</h3><p>参考文档 <a href=\"http://www.jhipster.tech/creating-an-entity/\" target=\"_blank\" rel=\"noopener\">Creating an entity</a></p>\n<p>jhipster支持通过命令行创建实体，也支持uml或jdl生成实体，为了省事，此处使用 官方<code>jdl-studio</code> 的默认jdl文件 <a href=\"https://start.jhipster.tech/jdl-studio/\" target=\"_blank\" rel=\"noopener\">https://start.jhipster.tech/jdl-studio/</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn81m4vh86j20dy02kdfu.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yo jhipster:import-jdl /path/to/jdl-studio/jhipster-jdl.jh</span><br><span class=\"line\">The jdl is being parsed.</span><br><span class=\"line\">Writing entity JSON files.</span><br><span class=\"line\">Updated entities are: Region,Country,Location,Department,Task,Employee,Job,JobHistory</span><br><span class=\"line\">Generating entities.</span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Region.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Region is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Country.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Country is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Location.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Location is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Department.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Department is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Task.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Task is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Employee.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Employee is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Job.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Job is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/JobHistory.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity JobHistory is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064934_added_entity_Region.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Region.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\RegionRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\RegionResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\RegionService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\RegionServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\RegionDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EntityMapper.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\RegionMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\RegionResourceIntTest.java</span><br><span class=\"line\"> conflict src\\main\\resources\\config\\liquibase\\master.xml</span><br><span class=\"line\">? Overwrite src\\main\\resources\\config\\liquibase\\master.xml? overwrite</span><br><span class=\"line\">    force src\\main\\resources\\config\\liquibase\\master.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_Country.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_constraints_Country.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Country.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\CountryRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\CountryResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\CountryService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\CountryServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\CountryDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\CountryMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\CountryResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_Location.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_constraints_Location.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Location.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\LocationRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\LocationResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\LocationService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\LocationServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\LocationDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\LocationMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\LocationResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_Department.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_constraints_Department.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Department.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\DepartmentRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\DepartmentService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\DepartmentServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\DepartmentDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\DepartmentMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064938_added_entity_Task.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Task.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\TaskRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\TaskResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\TaskService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\TaskServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\TaskDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\TaskMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\TaskResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_Employee.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_constraints_Employee.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Employee.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\EmployeeRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\EmployeeDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EmployeeMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_Job.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_constraints_Job.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Job.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\JobRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\JobResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_JobHistory.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_constraints_JobHistory.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\JobHistory.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\JobHistoryRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\JobHistoryService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\JobHistoryServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobHistoryDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobHistoryMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\enumeration\\Language.java</span><br></pre></td></tr></table></figure>\n<p>重启 <code>foo</code>服务,再次访问 <code>http://localhost:8080/#/docs</code> 发现多了很多接口</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn81x40lzzj21240oo412.jpg\" alt=\"\"></p>\n<p>通过swagger ui，找到 <code>region-resource</code> 找到 <code>POST /api/regions</code> 创建一个名为<code>test</code>的<code>regison</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn8249j1itj20rj0mtaax.jpg\" alt=\"\"></p>\n<p>点 <code>try it out!</code> 然后浏览器打开 <code>h2 数据库</code> <code>http://localhost:8081/h2-console</code> </p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn825ejmpxj20g90b3t8x.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn825ehnhnj20op0bp755.jpg\" alt=\"\"></p>\n<p>查询 <code>REGION</code>表，数据已经插入成功。</p>\n<p>至此，一个虽然简单，但是可用的微服务已经弄好。</p>\n<h2 id=\"将服务发布到rancher\"><a href=\"#将服务发布到rancher\" class=\"headerlink\" title=\"将服务发布到rancher\"></a>将服务发布到rancher</h2><p>参见文档 <a href=\"http://www.jhipster.tech/rancher/\" target=\"_blank\" rel=\"noopener\">[BETA] Deploying to Rancher</a> ,jhipster支持发布到 <a href=\"http://www.jhipster.tech/cloudfoundry/\" target=\"_blank\" rel=\"noopener\">Cloud Foundry</a> ,<a href=\"http://www.jhipster.tech/heroku/\" target=\"_blank\" rel=\"noopener\">Heroku</a>,<a href=\"http://www.jhipster.tech/kubernetes/\" target=\"_blank\" rel=\"noopener\">Kubernetes</a>,<a href=\"http://www.jhipster.tech/openshift/\" target=\"_blank\" rel=\"noopener\">Openshift</a>,<a href=\"http://www.jhipster.tech/rancher/\" target=\"_blank\" rel=\"noopener\">Rancher</a>,<a href=\"http://www.jhipster.tech/aws/\" target=\"_blank\" rel=\"noopener\">AWS</a>,<a href=\"http://www.jhipster.tech/boxfuse/\" target=\"_blank\" rel=\"noopener\">Boxfuse</a></p>\n<p>建议使用rancher，原因，  <a href=\"http://www.jhipster.tech/cloudfoundry/\" target=\"_blank\" rel=\"noopener\">Cloud Foundry</a> ,<a href=\"http://www.jhipster.tech/heroku/\" target=\"_blank\" rel=\"noopener\">Heroku</a>,<a href=\"http://www.jhipster.tech/aws/\" target=\"_blank\" rel=\"noopener\">AWS</a>,<a href=\"http://www.jhipster.tech/boxfuse/\" target=\"_blank\" rel=\"noopener\">Boxfuse</a> 都是云环境，k8s和openshift origin太复杂了，而rancher很容易上手，其联合创始人成为CNCF的理事会成员。</p>\n<p>附上一张 CNCF天梯图 </p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fncqh707snj247p2dcb2b.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> $ mkdir docker</span><br><span class=\"line\"> $ <span class=\"built_in\">cd</span> docker</span><br><span class=\"line\"> $ yo jhipster rancher-rancher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class=\"line\">        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class=\"line\">        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class=\"line\">  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class=\"line\">  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class=\"line\">   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">                            http://www.jhipster.tech</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the JHipster Generator v4.13.2</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster</span><br><span class=\"line\">  Documentation <span class=\"keyword\">for</span> creating an application: http://www.jhipster.tech/creating-an-app/</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">Application files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\docker</span><br><span class=\"line\">? What is the base name of your application? (docker)</span><br><span class=\"line\">G:\\jh\\docker</span><br><span class=\"line\">λ  jhipster rancher-compose</span><br><span class=\"line\">Using JHipster version installed globally</span><br><span class=\"line\">Executing jhipster:rancher-compose</span><br><span class=\"line\">Options:</span><br><span class=\"line\">🐮 [BETA] Welcome to the JHipster Rancher Compose Generator 🐮</span><br><span class=\"line\">Files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\docker</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of application would you like to deploy? Microservice application</span><br><span class=\"line\">? Enter the root directory <span class=\"built_in\">where</span> your gateway(s) and microservices are located ../</span><br><span class=\"line\">2 applications found at G:\\jh\\</span><br><span class=\"line\"></span><br><span class=\"line\">? Which applications <span class=\"keyword\">do</span> you want to include <span class=\"keyword\">in</span> your configuration? foo, gateway</span><br><span class=\"line\">? Do you want to setup monitoring <span class=\"keyword\">for</span> your applications ? Yes, <span class=\"keyword\">for</span> logs and metrics with the JHipster Console (based on ELK and Zipkin)</span><br><span class=\"line\">JHipster registry detected as the service discovery and configuration provider used by your apps</span><br><span class=\"line\">? Enter the admin password used to secure the JHipster Registry admin</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> rancher load balancing support? Yes</span><br><span class=\"line\">? What should we use <span class=\"keyword\">for</span> the base Docker repository name?</span><br><span class=\"line\">? What <span class=\"built_in\">command</span> should we use <span class=\"keyword\">for</span> push Docker image to repository? docker push</span><br><span class=\"line\"></span><br><span class=\"line\">Checking Docker images <span class=\"keyword\">in</span> applications<span class=\"string\">' directories...</span></span><br><span class=\"line\"><span class=\"string\">ls: no such file or directory: G:/jh/foo/target/docker</span></span><br><span class=\"line\"><span class=\"string\">ls: no such file or directory: G:/jh/gateway/target/docker</span></span><br><span class=\"line\"><span class=\"string\">   create rancher-compose.yml</span></span><br><span class=\"line\"><span class=\"string\">   create docker-compose.yml</span></span><br><span class=\"line\"><span class=\"string\">   create registry-config-sidekick\\Dockerfile</span></span><br><span class=\"line\"><span class=\"string\">   create registry-config-sidekick\\application.yml</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Rancher Compose configuration generated with missing images!</span></span><br><span class=\"line\"><span class=\"string\">To generate the missing Docker image(s), please run:</span></span><br><span class=\"line\"><span class=\"string\">  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\foo</span></span><br><span class=\"line\"><span class=\"string\">  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\gateway</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">WARNING! You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:</span></span><br><span class=\"line\"><span class=\"string\">docker push foo</span></span><br><span class=\"line\"><span class=\"string\">docker push gateway</span></span><br><span class=\"line\"><span class=\"string\">Congratulations, JHipster execution is complete!</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"rancher-compose-yml\"><a href=\"#rancher-compose-yml\" class=\"headerlink\" title=\"rancher-compose.yml\"></a>rancher-compose.yml</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    lb:</span></span><br><span class=\"line\">        <span class=\"comment\"># load balancer container</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">        load_balancer_config:</span></span><br><span class=\"line\"><span class=\"attr\">          name:</span> <span class=\"string\">lb</span> <span class=\"string\">config</span></span><br><span class=\"line\"><span class=\"attr\">        health_check:</span></span><br><span class=\"line\"><span class=\"attr\">          port:</span> <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"attr\">          interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">          unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">          healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">          response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">    foo-app:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    foo-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">    gateway-app:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    gateway-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">    jhipster-registry:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">    jhipster-elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-logstash:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-console:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment this section to enable Zipkin</span></span><br><span class=\"line\">    <span class=\"comment\">#jhipster-zipkin:</span></span><br><span class=\"line\">    <span class=\"comment\">#    scale: 1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    lb:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">rancher/load-balancer-service</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\">        <span class=\"comment\"># Listen on public port 80 and direct traffic to private port 8080 of the service</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">80</span><span class=\"string\">:8080</span></span><br><span class=\"line\"><span class=\"attr\">      links:</span></span><br><span class=\"line\">        <span class=\"comment\"># Target services in the same stack will be listed as a link</span></span><br><span class=\"line\"><span class=\"attr\">        - gateway-app:</span><span class=\"string\">gateway-app</span></span><br><span class=\"line\"><span class=\"attr\">    foo-app:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=prod,swagger</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/eureka</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_CLOUD_CONFIG_URI=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/config</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_DATASOURCE_URL=jdbc:mysql://foo-mysql:3306/foo?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_SLEEP=30</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_REGISTRY_PASSWORD=admin</span></span><br><span class=\"line\"><span class=\"attr\">    foo-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">mysql:5.7.20</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_DATABASE=foo</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">            <span class=\"string\">mysqld</span> <span class=\"bullet\">--lower_case_table_names=1</span> <span class=\"bullet\">--skip-ssl</span> <span class=\"bullet\">--character_set_server=utf8</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span><span class=\"bullet\">-explicit_defaults_for_timestamp</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">    gateway-app:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=prod,swagger</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/eureka</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_CLOUD_CONFIG_URI=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/config</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_DATASOURCE_URL=jdbc:mysql://gateway-mysql:3306/gateway?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_SLEEP=30</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_REGISTRY_PASSWORD=admin</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br><span class=\"line\"><span class=\"attr\">    gateway-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">mysql:5.7.20</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_DATABASE=gateway</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">            <span class=\"string\">mysqld</span> <span class=\"bullet\">--lower_case_table_names=1</span> <span class=\"bullet\">--skip-ssl</span> <span class=\"bullet\">--character_set_server=utf8</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span><span class=\"bullet\">-explicit_defaults_for_timestamp</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">    jhipster-registry:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-registry:v3.2.4</span></span><br><span class=\"line\">        <span class=\"comment\">#volumes:</span></span><br><span class=\"line\">        <span class=\"comment\">#    - ./central-server-config:/central-config</span></span><br><span class=\"line\">        <span class=\"comment\"># By default the JHipster Registry runs with the \"dev\" and \"native\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Spring profiles.</span></span><br><span class=\"line\">        <span class=\"comment\"># \"native\" profile means the filesystem is used to store data, see</span></span><br><span class=\"line\">        <span class=\"comment\"># http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=dev,native</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SECURITY_USER_PASSWORD=admin</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_REPORTFREQUENCY=60</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:./config/</span></span><br><span class=\"line\">            <span class=\"comment\"># Uncomment to use a Git configuration source instead of the local filesystem</span></span><br><span class=\"line\">            <span class=\"comment\"># mounted from the registry-config-sidekick volume</span></span><br><span class=\"line\">            <span class=\"comment\"># - GIT_URI=https://github.com/jhipster/jhipster-registry/</span></span><br><span class=\"line\">            <span class=\"comment\"># - GIT_SEARCH_PATHS=central-config</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">8761</span><span class=\"string\">:8761</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">/config</span></span><br><span class=\"line\"><span class=\"attr\">        volumes_from:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">        labels:</span></span><br><span class=\"line\">          <span class=\"string\">io.rancher.sidekicks:</span> <span class=\"string\">registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">    registry-config-sidekick:</span></span><br><span class=\"line\">        <span class=\"comment\"># this docker image must be built with:</span></span><br><span class=\"line\">        <span class=\"comment\"># docker build -t registry-config-sidekick registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">        tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">cat</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"attr\">          - config:</span><span class=\"string\">/config</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-elasticsearch:v2.2.1</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">        <span class=\"comment\"># Uncomment this section to have elasticsearch data persisted to a volume</span></span><br><span class=\"line\">        <span class=\"comment\">#volumes:</span></span><br><span class=\"line\">        <span class=\"comment\">#   - ./log-data:/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-logstash:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-logstash:v2.2.1</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">logstash</span> <span class=\"bullet\">-f</span> <span class=\"string\">/conf/logstash.conf</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">5000</span><span class=\"string\">:5000/udp</span></span><br><span class=\"line\">        <span class=\"comment\"># Uncomment this section to have logstash config loaded from a volume</span></span><br><span class=\"line\">        <span class=\"comment\">#volumes:</span></span><br><span class=\"line\">        <span class=\"comment\">#    - ./log-conf/:/conf</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-console:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-console:v2.2.1</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">5601</span><span class=\"string\">:5601</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment this section to enable Zipkin</span></span><br><span class=\"line\">    <span class=\"comment\">#jhipster-zipkin:</span></span><br><span class=\"line\">    <span class=\"comment\">#    image: jhipster/jhipster-zipkin:v2.2.1</span></span><br><span class=\"line\">    <span class=\"comment\">#    ports:</span></span><br><span class=\"line\">    <span class=\"comment\">#        - 9411:9411</span></span><br><span class=\"line\">    <span class=\"comment\">#    environment:</span></span><br><span class=\"line\">    <span class=\"comment\">#        - ES_HOSTS=http://jhipster-elasticsearch:9200</span></span><br><span class=\"line\">    <span class=\"comment\">#        - ZIPKIN_UI_LOGS_URL=http://localhost:5601/app/kibana#/dashboard/logs-dashboard?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-1h,mode:quick,to:now))&amp;_a=(filters:!(),options:(darkTheme:!f),panels:!((col:1,id:logs-levels,panelIndex:2,row:1,size_x:6,size_y:3,type:visualization),(col:7,columns:!(stack_trace),id:Stacktraces,panelIndex:7,row:1,size_x:4,size_y:3,sort:!('@timestamp',desc),type:search),(col:11,id:Log-forwarding-instructions,panelIndex:8,row:1,size_x:2,size_y:3,type:visualization),(col:1,columns:!(app_name,level,message),id:All-logs,panelIndex:9,row:4,size_x:12,size_y:7,sort:!('@timestamp',asc),type:search)),query:(query_string:(analyze_wildcard:!t,query:'&#123;traceId&#125;')),title:logs-dashboard,uiState:())</span></span><br></pre></td></tr></table></figure>\n<p><code>docker-compose.yml</code>中给的<code>jhipster-registry</code>是本地模式的，可以根据注释部分内容，改成从git拉。好处是维护方便，坏处是，容易造成单点故障。使用git模式，就可以将 <code>registry-config-sidekick</code> 部分去掉。</p>\n<p>jhipster使用<a href=\"http://www.liquibase.org/\" target=\"_blank\" rel=\"noopener\">liquibase</a> 进行数据库版本管理，便于数据库版本变更记录管理和迁移。(rancher server 也用的liquibase)</p>\n<p>把docker-compose.yml和rancher-compose.yml贴到rancher上，就能创建一个应用 stack了。</p>\n<p>不过，好像漏了点啥，少了CICD，rancher和docker的compsoe.yml有了，但是，还没构建镜像呢，镜像还没push到registry呢，对吧</p>\n<h2 id=\"自建gitlab\"><a href=\"#自建gitlab\" class=\"headerlink\" title=\"自建gitlab\"></a>自建gitlab</h2><p>我司用gitlab管理源码，我在docker hub上发布了一个汉化的gitlab  <a href=\"https://hub.docker.com/r/gitlab/gitlab-ce/tags/,如果要用官方镜像，参见\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/gitlab/gitlab-ce/tags/,如果要用官方镜像，参见</a> <a href=\"https://hub.docker.com/r/gitlab/gitlab-ce/tags/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/gitlab/gitlab-ce/tags/</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">    mem_limit:</span> <span class=\"number\">5368709120</span> <span class=\"comment\">#限制内存最大 5G = 5*1024*1024*1024</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">anjia0532/gitlab-ce-zh:10.3.3-ce.0</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/gitlab/config:/etc/gitlab</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/gitlab/data:/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/gitlab/log:/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">80</span><span class=\"string\">:80/tcp</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">443</span><span class=\"string\">:443/tcp</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gitlab-ci\"><a href=\"#gitlab-ci\" class=\"headerlink\" title=\"gitlab ci\"></a>gitlab ci</h2><p>参见文档 <a href=\"https://docs.gitlab.com/ce/ci/README.html\" target=\"_blank\" rel=\"noopener\">GitLab Continuous Integration (GitLab CI)</a></p>\n<p>为啥不用jenkins？</p>\n<p>这个萝卜白菜各有所爱，我是出于压缩技术栈的考虑，</p>\n<ol>\n<li>gitlab-ci够简单，也够用，</li>\n<li>根gitlab配套，不用多学习jenkins，毕竟多一套，就多一套的学习成本</li>\n</ol>\n<h2 id=\"搭建镜像伺服\"><a href=\"#搭建镜像伺服\" class=\"headerlink\" title=\"搭建镜像伺服\"></a>搭建镜像伺服</h2><ul>\n<li><p>老牌 <a href=\"https://www.sonatype.com/download-oss-sonatype\" target=\"_blank\" rel=\"noopener\">sonatype nexus oss</a> 可以管理 Bower,Docker,Git LFS,Maven,npm,NuGet,PyPI,Ruby Gems,Yum Proxy,功能丰富</p>\n</li>\n<li><p><a href=\"https://docs.gitlab.com/ce/administration/container_registry.html#gitlab-container-registry-administration\" target=\"_blank\" rel=\"noopener\">GitLab Container Registry administration</a> gitlab registry跟gitlab集成，不需要额外安装服务</p>\n</li>\n<li><p><a href=\"http://vmware.github.io/harbor/\" target=\"_blank\" rel=\"noopener\">harbor</a> rancher应用商店就有，安装方便，号称企业级registry，功能强大。</p>\n</li>\n</ul>\n<p>还是那句话，看需求，我司有部署maven和npm的需要，所以用了nexus oss，顺便管理docker registry。</p>\n<h2 id=\"Service-Mesh–下一代微服务\"><a href=\"#Service-Mesh–下一代微服务\" class=\"headerlink\" title=\"Service Mesh–下一代微服务\"></a>Service Mesh–下一代微服务</h2><p>我司是从16年八九月份开始拆分单体服务，彼时国内spring cloud，微服务等相关资料较少，国内流行dubbo(那会已经断更1年多了，虽然现在复更，但是对其前景不太看好)</p>\n<p>从17年开始，圈内讨论spring cloud的渐渐多起来了，同时市面上也有了介绍spring cloud的书籍，比如周立的<a href=\"https://item.jd.com/12168358.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud与Docker微服务架构实战</a>, 翟永超的<a href=\"https://item.jd.com/12172344.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud微服务实战</a> 等</p>\n<p>但是用了spring cloud后，感觉spring cloud太复杂了(如果用了jhipster情况会好点)，并没有实现微服务的初衷</p>\n<ul>\n<li>跟语言，框架无关:局限于java</li>\n<li>隐藏底层细节，需要学习zuul路由，eureka注册中心，configserver配置中心，需要熔断，降级，需要实现分布式跟踪…</li>\n</ul>\n<p>在这种情况下，16年，国外buoyant公司提出Service Mesh概念，基于scala创建了linkerd项目。</p>\n<p>service mesh 的设想就是，让开发人员专注于业务，不再分心于基础设施。</p>\n<p>目前主流框架</p>\n<ol>\n<li><a href=\"https://istio.io/\" target=\"_blank\" rel=\"noopener\">istio</a> 背靠google，ibm，后台硬，前景广阔</li>\n<li><a href=\"https://conduit.io/\" target=\"_blank\" rel=\"noopener\">conduit </a> 跟linkerd是一个公司的，使用Rust语言开发，proxy消耗不到10M内存，p99控制在毫秒内</li>\n<li><a href=\"https://linkerd.io/\" target=\"_blank\" rel=\"noopener\">linkerd</a> 商用企业较多，国内我知道的有豆瓣</li>\n<li><a href=\"https://www.envoyproxy.io/\" target=\"_blank\" rel=\"noopener\">envoy</a> 国内腾讯在用</li>\n</ol>\n<p>其中istio和conduit都不太成熟，而linkerd和envoy都有商用案例，较为成熟。长远来看，更看好 istio和conduit</p>\n<p>在此 分享一个dubbo的老用户的利好消息，据说 dubbo3 将兼容2，并且支持service mesh，并且支持反应式编程。参见 重大革新！<a href=\"http://mp.weixin.qq.com/s/eVYx-tUIMYtAk5wP-qkdkw\" target=\"_blank\" rel=\"noopener\">Dubbo 3.0来了</a></p>\n<p>扩展阅读资料</p>\n<p><a href=\"http://blog.shurenyun.com/untitled-102/\" target=\"_blank\" rel=\"noopener\">官方文档|ServiceMesh服务网格Istio面板组件&amp;设计目标</a></p>\n<p><a href=\"http://www.servicemesh.cn/?/article/25\" target=\"_blank\" rel=\"noopener\">演讲实录 | Service Mesh 时代的选边与站队（附PPT下载）</a></p>\n<p><a href=\"https://servicemesh.gitbooks.io/awesome-servicemesh/mesh/2017/service-mesh-next-generation-of-microservice/\" target=\"_blank\" rel=\"noopener\">Service Mesh：下一代微服务</a></p>\n<p><a href=\"http://gitbook.cn/books/5a1e7dca387c5b4ee351790b/index.html\" target=\"_blank\" rel=\"noopener\">Service Mesh 在华为公有云的实践</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/XZVCHZZzCX8wwgNKZtsmcA\" target=\"_blank\" rel=\"noopener\">明星分分合合的洪荒点击量，微博Mesh服务化改造如何支撑？（附PPT下载）</a></p>\n<p><strong>注意</strong></p>\n<p>需要根据公司、团队实际情况理性选择框架，目前service mesh还处于垦荒阶段，而spring cloud或者dubbo还没到彻底过时的程度，建议持续关注，不建议立刻上马，如果已经落地了相关的微服务技术，不要盲目跟风，在可接受学习成本和开发成本情况下，可以考虑研究一下service mesh。</p>\n<p>如果使用的是spring框架的话，建议抛开spring cloud，直接spring boot+service mesh，更清爽一些</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"初创团队如何快速落地微服务–基于spring-cloud-jhipster的微服务实践\"><a href=\"#初创团队如何快速落地微服务–基于spring-cloud-jhipster的微服务实践\" class=\"headerlink\" title=\"初创团队如何快速落地微服务–基于spring cloud/jhipster的微服务实践\"></a>初创团队如何快速落地微服务–基于spring cloud/jhipster的微服务实践</h2><p>本次分享主要是针对，小公司及初创团队如何用较低成本落地微服务，拥抱变化，快速交付</p>","more":"<h2 id=\"微服务概述\"><a href=\"#微服务概述\" class=\"headerlink\" title=\"微服务概述\"></a>微服务概述</h2><h3 id=\"相关趋势图\"><a href=\"#相关趋势图\" class=\"headerlink\" title=\"相关趋势图\"></a>相关趋势图</h3><p>从<a href=\"http://index.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度指数</a>搜索 <code>微服务</code>、<code>spring boot</code>、<code>spring cloud</code>、<code>dubbo</code> 相关关键词，得到如下趋势（微服务的概念源于2014年3月Martin Fowler所写的一篇文章<a href=\"http://martinfowler.com/articles/microservices.html\" target=\"_blank\" rel=\"noopener\">Microservices</a> ,所以选择从2014.03至今）</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fmtclday7oj20y309rgnr.jpg\" alt=\"\"></p>\n<p>从图中可见，<code>dubbo</code>的搜索量增势放缓，而<code>Spring Boot</code>从16年中下旬开始发力，一路高涨。而学习了<code>Spring boot</code> 再学习<code>Spring Cloud</code>  几乎顺理成章。</p>\n<p>spring boot旨在解决Spring越来越臃肿的全家桶方案的<code>配置地狱</code>（讽刺的是，Spring刚出道是扯着轻量化解决方案大旗一路冲杀，现在自己也开始慢慢胖起来了）,提供了很多简单易用的<code>starter</code>。特点是预定大于配置。</p>\n<p>dubbo放缓是源于，阿里巴巴中间断更将近三年(<a href=\"https://github.com/alibaba/dubbo/releases/tag/dubbo-2.4.11\" target=\"_blank\" rel=\"noopener\">dubbo-2.4.11</a> 2014-10-30, <a href=\"https://github.com/alibaba/dubbo/releases/tag/dubbo-2.5.4\" target=\"_blank\" rel=\"noopener\">dubbo-2.5.4</a> 2017-09-07),很多依赖框架和技术都较为陈旧，也不接纳社区的PR(当然，从17年九月份开始恢复更新，后面会有说到)，导致当当另起炉灶，fork了一个<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">dangdangdotcom/dubbox</a> 当然，现在也已断更。而且dubbo仅相当于Spring cloud的一个子集，参考 <a href=\"http://blog.csdn.net/kobejayandy/article/details/52078275\" target=\"_blank\" rel=\"noopener\">微服务架构的基础框架选择：Spring Cloud还是Dubbo？</a> (此处说的是dubbo2.x,最新的3.x变化较大，后边会说到)</p>\n<p> <code>k8s</code>、<code>kubernetes</code> 、<code>docker</code> 的搜索趋势</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fmtcqtu6ejj20ye08bq3u.jpg\" alt=\"\"></p>\n<h3 id=\"微服务vs单体应用\"><a href=\"#微服务vs单体应用\" class=\"headerlink\" title=\"微服务vs单体应用\"></a>微服务vs单体应用</h3><p>下面是我整理的一些关于单体服务和微服务的对比</p>\n<p>单体应用好处</p>\n<ul>\n<li>开发简单</li>\n<li>容易测试</li>\n<li>易于部署</li>\n<li>事务回滚容易</li>\n<li>无分布式管理，调用开销</li>\n<li>重复功能/代码较少</li>\n</ul>\n<p>单体应用缺点</p>\n<ul>\n<li>迭代缓慢</li>\n<li>维护困难</li>\n<li>持续部署困难：微小改动，必须重启，不相干功能无法提供服务</li>\n<li>牵一发而动全身：依赖项冲突，变更后，需要大量测试，防止影响其他功能</li>\n<li>基础语言、框架升级缓慢</li>\n<li>框架语言单一，无法灵活选用</li>\n</ul>\n<p>微服务好处</p>\n<ul>\n<li>敏捷性：按功能拆分，快速迭代</li>\n<li>自主性：团队技术选型灵活(PHP,python,java,C#,nodejs,golang)，设计自主</li>\n<li>可靠性：微服务故障只影响此服务消费者，而单体式应用会导致整个服务不可用</li>\n<li>持续集成持续交付</li>\n<li>可扩展性：热点功能容易扩展</li>\n</ul>\n<p>微服务的缺点</p>\n<ul>\n<li>性能降低：服务间通过网络调用</li>\n<li>管理难度增大：增加了项目的复杂性</li>\n<li>事务一致性</li>\n</ul>\n<p>扩展阅读 <a href=\"https://www.nginx.com/blog/introduction-to-microservices/\" target=\"_blank\" rel=\"noopener\">Introduction to Microservices</a></p>\n<h3 id=\"框架选型\"><a href=\"#框架选型\" class=\"headerlink\" title=\"框架选型\"></a>框架选型</h3><p>下面讲一下，我司在落地微服务时的框架选型方面的一些经验。</p>\n<p>公司主要使用java，所以决定使用spring 框架中的<code>spring cloud</code>作为微服务基础框架，但是原生 spring cloud 学习曲线比较陡峭，需要学习<code>feign</code>,<code>zuul</code>,<code>eureka</code>,<code>hystrix</code>,<code>zipkin</code>,<code>ribbon</code>… 所谓的Spring Cloud全家桶</p>\n<p>综合考虑团队的技术水平和学习成本，最后采用了国外的开源框架 <a href=\"http://www.jhipster.tech/\" target=\"_blank\" rel=\"noopener\">jhipster官网</a>  <a href=\"https://github.com/jhipster\" target=\"_blank\" rel=\"noopener\">jhipster github</a>，登记在册的，使用jhipster的企业有224家(截止2018-01-11)，包括埃森哲，google，adobe等大厂。</p>\n<p>jhipster 是由2013年由法国Java专家 Julien Dubois (朱利安 杜波尔斯)率先倡导，至今已有快5年了，积累了大量丰富经验。 采用Java 8(目前尚不支持java9,但是有开发计划)，特色是多用注解, 不用XML 配置的组态，配备了全方位的工作环境，从开发，测试，监控到制成，以及云部署。</p>\n<p>国内用dubbo的较多，用jhipster的较少，起码很多群里交流的时候，很多表示没听过，或者是我加的假群？至于为啥不用dubbo，前面提到过，一个是中间断更，以及阿里说不更就不更的优良传统，还有dubbo从功能来说，只是Spring Cloud的一个子集(dubbo 2.x) 。</p>\n<p>列举一下 jhipster 给的技术栈 ，参见 <a href=\"http://www.jhipster.tech/tech-stack/\" target=\"_blank\" rel=\"noopener\">Technology stack</a></p>\n<h4 id=\"客户端技术栈\"><a href=\"#客户端技术栈\" class=\"headerlink\" title=\"客户端技术栈\"></a>客户端技术栈</h4><ul>\n<li>angular4,5 or angularv1.x</li>\n<li>Bootstrap</li>\n<li><a href=\"http://html5boilerplate.com/\" target=\"_blank\" rel=\"noopener\">HTML5 Boilerplate</a></li>\n<li>兼容IE11+及现代浏览器</li>\n<li>支持国际化</li>\n<li>支持sass</li>\n<li>支持spring websocket</li>\n<li>支持yarn、bower管理js库</li>\n<li>支持webpack、gulp.js构建，优化，应用</li>\n<li>支持<a href=\"http://karma-runner.github.io/\" target=\"_blank\" rel=\"noopener\">Karma</a>, <a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">Headless Chrome</a> 和 <a href=\"http://www.protractortest.org/\" target=\"_blank\" rel=\"noopener\">Protractor</a> 进行前端单元测试测试</li>\n<li>支持<a href=\"http://www.thymeleaf.org/\" target=\"_blank\" rel=\"noopener\">Thymeleaf</a> 模板引擎，从服务端渲染页面</li>\n</ul>\n<h4 id=\"服务端技术栈\"><a href=\"#服务端技术栈\" class=\"headerlink\" title=\"服务端技术栈\"></a>服务端技术栈</h4><ul>\n<li>支持spring boot 简化spring配置</li>\n<li>支持maven、gradle，构建、测试、运行程序</li>\n<li>支持多配置文件(默认<code>dev</code>,<code>prod</code>)</li>\n<li>spring security</li>\n<li>spring mvc REST + jackson</li>\n<li>spring websocket</li>\n<li>spring data jpa + Bean Validation</li>\n<li>使用liquibase管理数据库表结构变更版本</li>\n<li>支持elasticsearch，进行应用内搜素</li>\n<li>支持mongoDB 、Couchbase、Cassandra等NoSQL</li>\n<li>支持h2db,pgsql,mysql,meriadb,sqlserver,oracle等关系型sql</li>\n<li>支持kafka mq</li>\n<li>使用 zuul或者traefik作为http理由</li>\n<li>使用eureka或consul进行服务发现</li>\n<li>支持ehcache,hazelcast,infinispan等缓存框架</li>\n<li>支持基于hazelcast的httpsession集群</li>\n<li>数据源使用HikariCP连接池</li>\n<li>生成Dockerfile,docker-compose.yml</li>\n<li>支持云服务商,AWS,Cloud Foundry,Heroku,Kubernetes,Openshift,Docker …</li>\n<li>支持统一配置中心</li>\n</ul>\n<p>其实真正用过就会发现，jhipster支持的不止列表中描述的这些。</p>\n<p>如果不会用yarn或者不方便用命令行生成项目，可以使用<a href=\"https://start.jhipster.tech/\" target=\"_blank\" rel=\"noopener\">jhipster online</a></p>\n<p>如果想学习jhipster，可以参考我在公司推广jhipster时写的一本gitbook <a href=\"https://jh.jiankangsn.com/\" target=\"_blank\" rel=\"noopener\">jhipster开发笔记</a></p>\n<p>同时，值得一提的是，jhipster也支持通过 <code>jhipster rancher-compose</code> 命令来生成<code>rancher-compose.yml</code>和<code>docker-compose.yml</code> 参见 <a href=\"http://www.jhipster.tech/rancher/\" target=\"_blank\" rel=\"noopener\">[BETA] Deploying to Rancher</a></p>\n<p>对于小团队落地微服务，可以考虑使用jhipster来生成项目，能够极大的提高效率。基本上可以视作jhipster是一套基于spring boot的最佳实践(不仅支持微服务，也支持单体式应用)。</p>\n<p>对于想学习spring boot或者spring cloud的也建议了解一下jhipster，好过独自摸索</p>\n<p>jhipster依赖的技术框架版本基本都是最新稳定版，版本更新比较及时，基本上一月一个版本，对github上的issues和pr响应比较及时(一般在24小时内)</p>\n<h2 id=\"10分钟搭建微服务\"><a href=\"#10分钟搭建微服务\" class=\"headerlink\" title=\"10分钟搭建微服务\"></a>10分钟搭建微服务</h2><h3 id=\"安装node-yarn\"><a href=\"#安装node-yarn\" class=\"headerlink\" title=\"安装node,yarn\"></a><a href=\"https://jh.jiankangsn.com/install.html\" target=\"_blank\" rel=\"noopener\">安装node,yarn</a></h3><p><strong>注意</strong></p>\n<p>如果是windows nodejs 需要安装v7.x，因为注册中心和网关需要用到node-sass@4.5.0，但是github上的node-sass的rebuild只有v7.x(process 51) 版本的，而自己构建太反人类了。如果是linux，可以尝试高版本的。</p>\n<p>安装完 node,yarn后，执行下面代码，使用npm的淘宝镜像，加速构建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn config <span class=\"built_in\">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>安装 jdk8,maven,maven加速，请自行百度。</p>\n<h2 id=\"安装jhipster\"><a href=\"#安装jhipster\" class=\"headerlink\" title=\"安装jhipster\"></a>安装jhipster</h2><h3 id=\"下载注册中心\"><a href=\"#下载注册中心\" class=\"headerlink\" title=\"下载注册中心\"></a>下载注册中心</h3><p>下载并运行 <a href=\"https://github.com/jhipster/jhipster-registry\" target=\"_blank\" rel=\"noopener\">注册中心-jhipster-registry</a> 详细文档，参见 <a href=\"http://www.jhipster.tech/jhipster-registry/\" target=\"_blank\" rel=\"noopener\">The JHipster Registry</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jhipster/jhipster-registry.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> jhipster-registry</span><br><span class=\"line\">$ yarn install</span><br><span class=\"line\">$ mvnw</span><br><span class=\"line\"><span class=\"comment\">##....</span></span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">        Application <span class=\"string\">'jhipster-registry'</span> is running! Access URLs:</span><br><span class=\"line\">        Local:          http://localhost:8761</span><br><span class=\"line\">        External:       http://xx.xx.xx.xx:8761</span><br><span class=\"line\">        Profile(s):     [swagger, dev, native]</span><br><span class=\"line\">----------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>浏览器访问 <code>http://localhost:8761</code>  初始用户名密码均为 <code>admin</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofaf2j21fe0q4wgt.jpg\" alt=\"\"></p>\n<p>spring config server,统一配置中心，可以统一管理不同环境的数据库地址，用户名，密码等敏感数据</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofbxjj21fp0ofta7.jpg\" alt=\"\"></p>\n<p>jhipster registry 对应SC(Spring Cloud)的eurake+spring config server，想想自己用原生的SC自己搞的辛酸泪吧，再牛逼，刚学，也得10min+才能跑起来吧？</p>\n<h3 id=\"创建网关\"><a href=\"#创建网关\" class=\"headerlink\" title=\"创建网关\"></a>创建网关</h3><p>创建api网关，参见 <a href=\"http://www.jhipster.tech/creating-an-app/\" target=\"_blank\" rel=\"noopener\">Creating an application</a> 和<a href=\"http://www.jhipster.tech/api-gateway/\" target=\"_blank\" rel=\"noopener\">The JHipster API Gateway</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yarn global add generator-jhipster</span><br><span class=\"line\">$ mkdir gateway</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> gateway</span><br><span class=\"line\">$ yo jhipster</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class=\"line\">        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class=\"line\">        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class=\"line\">  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class=\"line\">  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class=\"line\">   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">                            http://www.jhipster.tech</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the JHipster Generator v4.13.2</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster</span><br><span class=\"line\">  Documentation <span class=\"keyword\">for</span> creating an application: http://www.jhipster.tech/creating-an-app/</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">Application files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\gateway</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of application would you like to create? Microservice gateway</span><br><span class=\"line\">? What is the base name of your application? gateway</span><br><span class=\"line\">? As you are running <span class=\"keyword\">in</span> a microservice architecture, on <span class=\"built_in\">which</span> port would like your server to run? It should be unique to avoid port conflicts. 8080</span><br><span class=\"line\">? What is your default Java package name? com.anjia.gateway</span><br><span class=\"line\">? Which service discovery server <span class=\"keyword\">do</span> you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of authentication would you like to use? JWT authentication (stateless, with a token)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span><br><span class=\"line\">? Which *production* database would you like to use? MySQL</span><br><span class=\"line\">? Which *development* database would you like to use? H2 with disk-based persistence</span><br><span class=\"line\">? Do you want to use Hibernate 2nd level cache? Yes</span><br><span class=\"line\">? Would you like to use Maven or Gradle <span class=\"keyword\">for</span> building the backend? Maven</span><br><span class=\"line\">? Which other technologies would you like to use?</span><br><span class=\"line\">? Which *Framework* would you like to use <span class=\"keyword\">for</span> the client? Angular 5</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> *SASS* support using the LibSass stylesheet preprocessor? No</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> internationalization support? Yes</span><br><span class=\"line\">? Please choose the native language of the application English</span><br><span class=\"line\">? Please choose additional languages to install</span><br><span class=\"line\">? Besides JUnit and Karma, <span class=\"built_in\">which</span> testing frameworks would you like to use?</span><br><span class=\"line\">? Would you like to install other generators from the JHipster Marketplace? No</span><br><span class=\"line\">$ mvnw</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">        Application <span class=\"string\">'gateway'</span> is running! Access URLs:</span><br><span class=\"line\">        Local:          http://localhost:8080</span><br><span class=\"line\">        External:       http://xx.xx.xx.xx:8080</span><br><span class=\"line\">        Profile(s):     [swagger, dev]</span><br><span class=\"line\">----------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fncq2fhhg5j20yf0pwjv9.jpg\" alt=\"\"></p>\n<p>访问 <code>http://localhost:8080/</code> 默认用户名密码均为 <code>admin</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fncq3xeiuqj21gs0irac3.jpg\" alt=\"\"></p>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>创建服务 参考 <a href=\"http://www.jhipster.tech/creating-an-app/\" target=\"_blank\" rel=\"noopener\">Creating an application</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir foo</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> foo</span><br><span class=\"line\">$ yo jhipster</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class=\"line\">        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class=\"line\">        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class=\"line\">  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class=\"line\">  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class=\"line\">   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">                            http://www.jhipster.tech</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the JHipster Generator v4.13.2</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster</span><br><span class=\"line\">  Documentation <span class=\"keyword\">for</span> creating an application: http://www.jhipster.tech/creating-an-app/</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">Application files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\foo</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of application would you like to create? Microservice application</span><br><span class=\"line\">? What is the base name of your application? foo</span><br><span class=\"line\">? As you are running <span class=\"keyword\">in</span> a microservice architecture, on <span class=\"built_in\">which</span> port would like your server to run? It should be unique to avoid port conflicts. 8081</span><br><span class=\"line\">? What is your default Java package name? com.anjia.foo</span><br><span class=\"line\">? Which service discovery server <span class=\"keyword\">do</span> you want to use? JHipster Registry (uses Eureka, provides Spring Cloud Config support and monitoring dashboards)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of authentication would you like to use? JWT authentication (stateless, with a token)</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span><br><span class=\"line\">? Which *production* database would you like to use? MySQL</span><br><span class=\"line\">? Which *development* database would you like to use? H2 with disk-based persistence</span><br><span class=\"line\">? Do you want to use the Spring cache abstraction? Yes, with the Hazelcast implementation (distributed cache, <span class=\"keyword\">for</span> multiple nodes)</span><br><span class=\"line\">? Do you want to use Hibernate 2nd level cache? Yes</span><br><span class=\"line\">? Would you like to use Maven or Gradle <span class=\"keyword\">for</span> building the backend? Maven</span><br><span class=\"line\">? Which other technologies would you like to use?</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> internationalization support? Yes</span><br><span class=\"line\">? Please choose the native language of the application Chinese (Simplified)</span><br><span class=\"line\">? Please choose additional languages to install</span><br><span class=\"line\">? Besides JUnit and Karma, <span class=\"built_in\">which</span> testing frameworks would you like to use?</span><br><span class=\"line\">? Would you like to install other generators from the JHipster Marketplace? No</span><br><span class=\"line\"></span><br><span class=\"line\">$ mvnw</span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">        Application <span class=\"string\">'foo'</span> is running! Access URLs:</span><br><span class=\"line\">        Local:          http://localhost:8081</span><br><span class=\"line\">        External:       http://xx.xx.xx.xx:8081</span><br><span class=\"line\">        Profile(s):     [swagger, dev]</span><br><span class=\"line\">----------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:8080/#/docs</code> 默认用户名密码均为 <code>admin</code> ，使用<code>swagger</code>管理api文档，开发时，仅需要添加对应的注解，即可自动生成文档，解决了传统通过word，pdf等管理接口时，文档更新不及时等问题。并且可以通过<code>try it</code>可以直接调用接口，避免了接口调试时使用<code>curl</code>,<code>postman</code>等工具</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn813ofjgkj20y40l7dgs.jpg\" alt=\"\"></p>\n<p>至此，已经创建了一个简单微服务（jhipster-registry是注册中心，gateway是网关，foo是具体的功能模块）。</p>\n<h3 id=\"创建实体\"><a href=\"#创建实体\" class=\"headerlink\" title=\"创建实体\"></a>创建实体</h3><p>参考文档 <a href=\"http://www.jhipster.tech/creating-an-entity/\" target=\"_blank\" rel=\"noopener\">Creating an entity</a></p>\n<p>jhipster支持通过命令行创建实体，也支持uml或jdl生成实体，为了省事，此处使用 官方<code>jdl-studio</code> 的默认jdl文件 <a href=\"https://start.jhipster.tech/jdl-studio/\" target=\"_blank\" rel=\"noopener\">https://start.jhipster.tech/jdl-studio/</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn81m4vh86j20dy02kdfu.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yo jhipster:import-jdl /path/to/jdl-studio/jhipster-jdl.jh</span><br><span class=\"line\">The jdl is being parsed.</span><br><span class=\"line\">Writing entity JSON files.</span><br><span class=\"line\">Updated entities are: Region,Country,Location,Department,Task,Employee,Job,JobHistory</span><br><span class=\"line\">Generating entities.</span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Region.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Region is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Country.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Country is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Location.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Location is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Department.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Department is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Task.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Task is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Employee.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Employee is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/Job.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity Job is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found the .jhipster/JobHistory.json configuration file, entity can be automatically generated!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The entity JobHistory is being updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064934_added_entity_Region.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Region.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\RegionRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\RegionResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\RegionService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\RegionServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\RegionDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EntityMapper.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\RegionMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\RegionResourceIntTest.java</span><br><span class=\"line\"> conflict src\\main\\resources\\config\\liquibase\\master.xml</span><br><span class=\"line\">? Overwrite src\\main\\resources\\config\\liquibase\\master.xml? overwrite</span><br><span class=\"line\">    force src\\main\\resources\\config\\liquibase\\master.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_Country.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064935_added_entity_constraints_Country.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Country.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\CountryRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\CountryResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\CountryService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\CountryServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\CountryDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\CountryMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\CountryResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_Location.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064936_added_entity_constraints_Location.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Location.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\LocationRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\LocationResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\LocationService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\LocationServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\LocationDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\LocationMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\LocationResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_Department.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064937_added_entity_constraints_Department.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Department.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\DepartmentRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\DepartmentService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\DepartmentServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\DepartmentDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\DepartmentMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\DepartmentResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064938_added_entity_Task.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Task.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\TaskRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\TaskResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\TaskService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\TaskServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\TaskDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\TaskMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\TaskResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_Employee.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064939_added_entity_constraints_Employee.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Employee.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\EmployeeRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\EmployeeDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\EmployeeMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\EmployeeResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_Job.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064940_added_entity_constraints_Job.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\Job.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\JobRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\JobResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_JobHistory.xml</span><br><span class=\"line\">   create src\\main\\resources\\config\\liquibase\\changelog\\20180107064941_added_entity_constraints_JobHistory.xml</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\JobHistory.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\repository\\JobHistoryRepository.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResource.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\JobHistoryService.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\impl\\JobHistoryServiceImpl.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\dto\\JobHistoryDTO.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\service\\mapper\\JobHistoryMapper.java</span><br><span class=\"line\">   create src\\<span class=\"built_in\">test</span>\\java\\com\\anjia\\foo\\web\\rest\\JobHistoryResourceIntTest.java</span><br><span class=\"line\">   create src\\main\\java\\com\\anjia\\foo\\domain\\enumeration\\Language.java</span><br></pre></td></tr></table></figure>\n<p>重启 <code>foo</code>服务,再次访问 <code>http://localhost:8080/#/docs</code> 发现多了很多接口</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn81x40lzzj21240oo412.jpg\" alt=\"\"></p>\n<p>通过swagger ui，找到 <code>region-resource</code> 找到 <code>POST /api/regions</code> 创建一个名为<code>test</code>的<code>regison</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn8249j1itj20rj0mtaax.jpg\" alt=\"\"></p>\n<p>点 <code>try it out!</code> 然后浏览器打开 <code>h2 数据库</code> <code>http://localhost:8081/h2-console</code> </p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn825ejmpxj20g90b3t8x.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fn825ehnhnj20op0bp755.jpg\" alt=\"\"></p>\n<p>查询 <code>REGION</code>表，数据已经插入成功。</p>\n<p>至此，一个虽然简单，但是可用的微服务已经弄好。</p>\n<h2 id=\"将服务发布到rancher\"><a href=\"#将服务发布到rancher\" class=\"headerlink\" title=\"将服务发布到rancher\"></a>将服务发布到rancher</h2><p>参见文档 <a href=\"http://www.jhipster.tech/rancher/\" target=\"_blank\" rel=\"noopener\">[BETA] Deploying to Rancher</a> ,jhipster支持发布到 <a href=\"http://www.jhipster.tech/cloudfoundry/\" target=\"_blank\" rel=\"noopener\">Cloud Foundry</a> ,<a href=\"http://www.jhipster.tech/heroku/\" target=\"_blank\" rel=\"noopener\">Heroku</a>,<a href=\"http://www.jhipster.tech/kubernetes/\" target=\"_blank\" rel=\"noopener\">Kubernetes</a>,<a href=\"http://www.jhipster.tech/openshift/\" target=\"_blank\" rel=\"noopener\">Openshift</a>,<a href=\"http://www.jhipster.tech/rancher/\" target=\"_blank\" rel=\"noopener\">Rancher</a>,<a href=\"http://www.jhipster.tech/aws/\" target=\"_blank\" rel=\"noopener\">AWS</a>,<a href=\"http://www.jhipster.tech/boxfuse/\" target=\"_blank\" rel=\"noopener\">Boxfuse</a></p>\n<p>建议使用rancher，原因，  <a href=\"http://www.jhipster.tech/cloudfoundry/\" target=\"_blank\" rel=\"noopener\">Cloud Foundry</a> ,<a href=\"http://www.jhipster.tech/heroku/\" target=\"_blank\" rel=\"noopener\">Heroku</a>,<a href=\"http://www.jhipster.tech/aws/\" target=\"_blank\" rel=\"noopener\">AWS</a>,<a href=\"http://www.jhipster.tech/boxfuse/\" target=\"_blank\" rel=\"noopener\">Boxfuse</a> 都是云环境，k8s和openshift origin太复杂了，而rancher很容易上手，其联合创始人成为CNCF的理事会成员。</p>\n<p>附上一张 CNCF天梯图 </p>\n<p><img src=\"http://ww1.sinaimg.cn/large/afaffa71ly1fncqh707snj247p2dcb2b.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> $ mkdir docker</span><br><span class=\"line\"> $ <span class=\"built_in\">cd</span> docker</span><br><span class=\"line\"> $ yo jhipster rancher-rancher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ██╗ ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class=\"line\">        ██║ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class=\"line\">        ██║ ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class=\"line\">  ██╗   ██║ ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class=\"line\">  ╚██████╔╝ ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class=\"line\">   ╚═════╝  ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">                            http://www.jhipster.tech</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the JHipster Generator v4.13.2</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">  If you find JHipster useful consider supporting our collective https://opencollective.com/generator-jhipster</span><br><span class=\"line\">  Documentation <span class=\"keyword\">for</span> creating an application: http://www.jhipster.tech/creating-an-app/</span><br><span class=\"line\"> _______________________________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\">Application files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\docker</span><br><span class=\"line\">? What is the base name of your application? (docker)</span><br><span class=\"line\">G:\\jh\\docker</span><br><span class=\"line\">λ  jhipster rancher-compose</span><br><span class=\"line\">Using JHipster version installed globally</span><br><span class=\"line\">Executing jhipster:rancher-compose</span><br><span class=\"line\">Options:</span><br><span class=\"line\">🐮 [BETA] Welcome to the JHipster Rancher Compose Generator 🐮</span><br><span class=\"line\">Files will be generated <span class=\"keyword\">in</span> folder: G:\\jh\\docker</span><br><span class=\"line\">? Which *<span class=\"built_in\">type</span>* of application would you like to deploy? Microservice application</span><br><span class=\"line\">? Enter the root directory <span class=\"built_in\">where</span> your gateway(s) and microservices are located ../</span><br><span class=\"line\">2 applications found at G:\\jh\\</span><br><span class=\"line\"></span><br><span class=\"line\">? Which applications <span class=\"keyword\">do</span> you want to include <span class=\"keyword\">in</span> your configuration? foo, gateway</span><br><span class=\"line\">? Do you want to setup monitoring <span class=\"keyword\">for</span> your applications ? Yes, <span class=\"keyword\">for</span> logs and metrics with the JHipster Console (based on ELK and Zipkin)</span><br><span class=\"line\">JHipster registry detected as the service discovery and configuration provider used by your apps</span><br><span class=\"line\">? Enter the admin password used to secure the JHipster Registry admin</span><br><span class=\"line\">? Would you like to <span class=\"built_in\">enable</span> rancher load balancing support? Yes</span><br><span class=\"line\">? What should we use <span class=\"keyword\">for</span> the base Docker repository name?</span><br><span class=\"line\">? What <span class=\"built_in\">command</span> should we use <span class=\"keyword\">for</span> push Docker image to repository? docker push</span><br><span class=\"line\"></span><br><span class=\"line\">Checking Docker images <span class=\"keyword\">in</span> applications<span class=\"string\">' directories...</span></span><br><span class=\"line\"><span class=\"string\">ls: no such file or directory: G:/jh/foo/target/docker</span></span><br><span class=\"line\"><span class=\"string\">ls: no such file or directory: G:/jh/gateway/target/docker</span></span><br><span class=\"line\"><span class=\"string\">   create rancher-compose.yml</span></span><br><span class=\"line\"><span class=\"string\">   create docker-compose.yml</span></span><br><span class=\"line\"><span class=\"string\">   create registry-config-sidekick\\Dockerfile</span></span><br><span class=\"line\"><span class=\"string\">   create registry-config-sidekick\\application.yml</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Rancher Compose configuration generated with missing images!</span></span><br><span class=\"line\"><span class=\"string\">To generate the missing Docker image(s), please run:</span></span><br><span class=\"line\"><span class=\"string\">  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\foo</span></span><br><span class=\"line\"><span class=\"string\">  ./mvnw verify -Pprod dockerfile:build in G:\\jh\\gateway</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">WARNING! You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:</span></span><br><span class=\"line\"><span class=\"string\">docker push foo</span></span><br><span class=\"line\"><span class=\"string\">docker push gateway</span></span><br><span class=\"line\"><span class=\"string\">Congratulations, JHipster execution is complete!</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"rancher-compose-yml\"><a href=\"#rancher-compose-yml\" class=\"headerlink\" title=\"rancher-compose.yml\"></a>rancher-compose.yml</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    lb:</span></span><br><span class=\"line\">        <span class=\"comment\"># load balancer container</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">        load_balancer_config:</span></span><br><span class=\"line\"><span class=\"attr\">          name:</span> <span class=\"string\">lb</span> <span class=\"string\">config</span></span><br><span class=\"line\"><span class=\"attr\">        health_check:</span></span><br><span class=\"line\"><span class=\"attr\">          port:</span> <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"attr\">          interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">          unhealthy_threshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">          healthy_threshold:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">          response_timeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">    foo-app:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    foo-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">    gateway-app:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    gateway-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">    jhipster-registry:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">    jhipster-elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-logstash:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-console:</span></span><br><span class=\"line\"><span class=\"attr\">        scale:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment this section to enable Zipkin</span></span><br><span class=\"line\">    <span class=\"comment\">#jhipster-zipkin:</span></span><br><span class=\"line\">    <span class=\"comment\">#    scale: 1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    lb:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">rancher/load-balancer-service</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\">        <span class=\"comment\"># Listen on public port 80 and direct traffic to private port 8080 of the service</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">80</span><span class=\"string\">:8080</span></span><br><span class=\"line\"><span class=\"attr\">      links:</span></span><br><span class=\"line\">        <span class=\"comment\"># Target services in the same stack will be listed as a link</span></span><br><span class=\"line\"><span class=\"attr\">        - gateway-app:</span><span class=\"string\">gateway-app</span></span><br><span class=\"line\"><span class=\"attr\">    foo-app:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=prod,swagger</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/eureka</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_CLOUD_CONFIG_URI=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/config</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_DATASOURCE_URL=jdbc:mysql://foo-mysql:3306/foo?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_SLEEP=30</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_REGISTRY_PASSWORD=admin</span></span><br><span class=\"line\"><span class=\"attr\">    foo-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">mysql:5.7.20</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_DATABASE=foo</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">            <span class=\"string\">mysqld</span> <span class=\"bullet\">--lower_case_table_names=1</span> <span class=\"bullet\">--skip-ssl</span> <span class=\"bullet\">--character_set_server=utf8</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span><span class=\"bullet\">-explicit_defaults_for_timestamp</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">    gateway-app:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=prod,swagger</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/eureka</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_CLOUD_CONFIG_URI=http://admin:$$&#123;jhipster.registry.password&#125;@jhipster-registry:8761/config</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_DATASOURCE_URL=jdbc:mysql://gateway-mysql:3306/gateway?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_SLEEP=30</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_REPORT_FREQUENCY=60</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_REGISTRY_PASSWORD=admin</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br><span class=\"line\"><span class=\"attr\">    gateway-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">mysql:5.7.20</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">MYSQL_DATABASE=gateway</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">            <span class=\"string\">mysqld</span> <span class=\"bullet\">--lower_case_table_names=1</span> <span class=\"bullet\">--skip-ssl</span> <span class=\"bullet\">--character_set_server=utf8</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span><span class=\"bullet\">-explicit_defaults_for_timestamp</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">    jhipster-registry:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-registry:v3.2.4</span></span><br><span class=\"line\">        <span class=\"comment\">#volumes:</span></span><br><span class=\"line\">        <span class=\"comment\">#    - ./central-server-config:/central-config</span></span><br><span class=\"line\">        <span class=\"comment\"># By default the JHipster Registry runs with the \"dev\" and \"native\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Spring profiles.</span></span><br><span class=\"line\">        <span class=\"comment\"># \"native\" profile means the filesystem is used to store data, see</span></span><br><span class=\"line\">        <span class=\"comment\"># http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=dev,native</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SECURITY_USER_PASSWORD=admin</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_LOGGING_LOGSTASH_HOST=jhipster-logstash</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_ENABLED=true</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">JHIPSTER_METRICS_LOGS_REPORTFREQUENCY=60</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:./config/</span></span><br><span class=\"line\">            <span class=\"comment\"># Uncomment to use a Git configuration source instead of the local filesystem</span></span><br><span class=\"line\">            <span class=\"comment\"># mounted from the registry-config-sidekick volume</span></span><br><span class=\"line\">            <span class=\"comment\"># - GIT_URI=https://github.com/jhipster/jhipster-registry/</span></span><br><span class=\"line\">            <span class=\"comment\"># - GIT_SEARCH_PATHS=central-config</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">8761</span><span class=\"string\">:8761</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">/config</span></span><br><span class=\"line\"><span class=\"attr\">        volumes_from:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">        labels:</span></span><br><span class=\"line\">          <span class=\"string\">io.rancher.sidekicks:</span> <span class=\"string\">registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">    registry-config-sidekick:</span></span><br><span class=\"line\">        <span class=\"comment\"># this docker image must be built with:</span></span><br><span class=\"line\">        <span class=\"comment\"># docker build -t registry-config-sidekick registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">registry-config-sidekick</span></span><br><span class=\"line\"><span class=\"attr\">        tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">cat</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"attr\">          - config:</span><span class=\"string\">/config</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-elasticsearch:v2.2.1</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">        <span class=\"comment\"># Uncomment this section to have elasticsearch data persisted to a volume</span></span><br><span class=\"line\">        <span class=\"comment\">#volumes:</span></span><br><span class=\"line\">        <span class=\"comment\">#   - ./log-data:/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-logstash:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-logstash:v2.2.1</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">logstash</span> <span class=\"bullet\">-f</span> <span class=\"string\">/conf/logstash.conf</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">5000</span><span class=\"string\">:5000/udp</span></span><br><span class=\"line\">        <span class=\"comment\"># Uncomment this section to have logstash config loaded from a volume</span></span><br><span class=\"line\">        <span class=\"comment\">#volumes:</span></span><br><span class=\"line\">        <span class=\"comment\">#    - ./log-conf/:/conf</span></span><br><span class=\"line\"><span class=\"attr\">    jhipster-console:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">jhipster/jhipster-console:v2.2.1</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">5601</span><span class=\"string\">:5601</span></span><br><span class=\"line\">    <span class=\"comment\"># Uncomment this section to enable Zipkin</span></span><br><span class=\"line\">    <span class=\"comment\">#jhipster-zipkin:</span></span><br><span class=\"line\">    <span class=\"comment\">#    image: jhipster/jhipster-zipkin:v2.2.1</span></span><br><span class=\"line\">    <span class=\"comment\">#    ports:</span></span><br><span class=\"line\">    <span class=\"comment\">#        - 9411:9411</span></span><br><span class=\"line\">    <span class=\"comment\">#    environment:</span></span><br><span class=\"line\">    <span class=\"comment\">#        - ES_HOSTS=http://jhipster-elasticsearch:9200</span></span><br><span class=\"line\">    <span class=\"comment\">#        - ZIPKIN_UI_LOGS_URL=http://localhost:5601/app/kibana#/dashboard/logs-dashboard?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-1h,mode:quick,to:now))&amp;_a=(filters:!(),options:(darkTheme:!f),panels:!((col:1,id:logs-levels,panelIndex:2,row:1,size_x:6,size_y:3,type:visualization),(col:7,columns:!(stack_trace),id:Stacktraces,panelIndex:7,row:1,size_x:4,size_y:3,sort:!('@timestamp',desc),type:search),(col:11,id:Log-forwarding-instructions,panelIndex:8,row:1,size_x:2,size_y:3,type:visualization),(col:1,columns:!(app_name,level,message),id:All-logs,panelIndex:9,row:4,size_x:12,size_y:7,sort:!('@timestamp',asc),type:search)),query:(query_string:(analyze_wildcard:!t,query:'&#123;traceId&#125;')),title:logs-dashboard,uiState:())</span></span><br></pre></td></tr></table></figure>\n<p><code>docker-compose.yml</code>中给的<code>jhipster-registry</code>是本地模式的，可以根据注释部分内容，改成从git拉。好处是维护方便，坏处是，容易造成单点故障。使用git模式，就可以将 <code>registry-config-sidekick</code> 部分去掉。</p>\n<p>jhipster使用<a href=\"http://www.liquibase.org/\" target=\"_blank\" rel=\"noopener\">liquibase</a> 进行数据库版本管理，便于数据库版本变更记录管理和迁移。(rancher server 也用的liquibase)</p>\n<p>把docker-compose.yml和rancher-compose.yml贴到rancher上，就能创建一个应用 stack了。</p>\n<p>不过，好像漏了点啥，少了CICD，rancher和docker的compsoe.yml有了，但是，还没构建镜像呢，镜像还没push到registry呢，对吧</p>\n<h2 id=\"自建gitlab\"><a href=\"#自建gitlab\" class=\"headerlink\" title=\"自建gitlab\"></a>自建gitlab</h2><p>我司用gitlab管理源码，我在docker hub上发布了一个汉化的gitlab  <a href=\"https://hub.docker.com/r/gitlab/gitlab-ce/tags/,如果要用官方镜像，参见\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/gitlab/gitlab-ce/tags/,如果要用官方镜像，参见</a> <a href=\"https://hub.docker.com/r/gitlab/gitlab-ce/tags/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/gitlab/gitlab-ce/tags/</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  gitlab:</span></span><br><span class=\"line\"><span class=\"attr\">    mem_limit:</span> <span class=\"number\">5368709120</span> <span class=\"comment\">#限制内存最大 5G = 5*1024*1024*1024</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">anjia0532/gitlab-ce-zh:10.3.3-ce.0</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/gitlab/config:/etc/gitlab</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/gitlab/data:/var/opt/gitlab</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/gitlab/log:/var/log/gitlab</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">80</span><span class=\"string\">:80/tcp</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">443</span><span class=\"string\">:443/tcp</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gitlab-ci\"><a href=\"#gitlab-ci\" class=\"headerlink\" title=\"gitlab ci\"></a>gitlab ci</h2><p>参见文档 <a href=\"https://docs.gitlab.com/ce/ci/README.html\" target=\"_blank\" rel=\"noopener\">GitLab Continuous Integration (GitLab CI)</a></p>\n<p>为啥不用jenkins？</p>\n<p>这个萝卜白菜各有所爱，我是出于压缩技术栈的考虑，</p>\n<ol>\n<li>gitlab-ci够简单，也够用，</li>\n<li>根gitlab配套，不用多学习jenkins，毕竟多一套，就多一套的学习成本</li>\n</ol>\n<h2 id=\"搭建镜像伺服\"><a href=\"#搭建镜像伺服\" class=\"headerlink\" title=\"搭建镜像伺服\"></a>搭建镜像伺服</h2><ul>\n<li><p>老牌 <a href=\"https://www.sonatype.com/download-oss-sonatype\" target=\"_blank\" rel=\"noopener\">sonatype nexus oss</a> 可以管理 Bower,Docker,Git LFS,Maven,npm,NuGet,PyPI,Ruby Gems,Yum Proxy,功能丰富</p>\n</li>\n<li><p><a href=\"https://docs.gitlab.com/ce/administration/container_registry.html#gitlab-container-registry-administration\" target=\"_blank\" rel=\"noopener\">GitLab Container Registry administration</a> gitlab registry跟gitlab集成，不需要额外安装服务</p>\n</li>\n<li><p><a href=\"http://vmware.github.io/harbor/\" target=\"_blank\" rel=\"noopener\">harbor</a> rancher应用商店就有，安装方便，号称企业级registry，功能强大。</p>\n</li>\n</ul>\n<p>还是那句话，看需求，我司有部署maven和npm的需要，所以用了nexus oss，顺便管理docker registry。</p>\n<h2 id=\"Service-Mesh–下一代微服务\"><a href=\"#Service-Mesh–下一代微服务\" class=\"headerlink\" title=\"Service Mesh–下一代微服务\"></a>Service Mesh–下一代微服务</h2><p>我司是从16年八九月份开始拆分单体服务，彼时国内spring cloud，微服务等相关资料较少，国内流行dubbo(那会已经断更1年多了，虽然现在复更，但是对其前景不太看好)</p>\n<p>从17年开始，圈内讨论spring cloud的渐渐多起来了，同时市面上也有了介绍spring cloud的书籍，比如周立的<a href=\"https://item.jd.com/12168358.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud与Docker微服务架构实战</a>, 翟永超的<a href=\"https://item.jd.com/12172344.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud微服务实战</a> 等</p>\n<p>但是用了spring cloud后，感觉spring cloud太复杂了(如果用了jhipster情况会好点)，并没有实现微服务的初衷</p>\n<ul>\n<li>跟语言，框架无关:局限于java</li>\n<li>隐藏底层细节，需要学习zuul路由，eureka注册中心，configserver配置中心，需要熔断，降级，需要实现分布式跟踪…</li>\n</ul>\n<p>在这种情况下，16年，国外buoyant公司提出Service Mesh概念，基于scala创建了linkerd项目。</p>\n<p>service mesh 的设想就是，让开发人员专注于业务，不再分心于基础设施。</p>\n<p>目前主流框架</p>\n<ol>\n<li><a href=\"https://istio.io/\" target=\"_blank\" rel=\"noopener\">istio</a> 背靠google，ibm，后台硬，前景广阔</li>\n<li><a href=\"https://conduit.io/\" target=\"_blank\" rel=\"noopener\">conduit </a> 跟linkerd是一个公司的，使用Rust语言开发，proxy消耗不到10M内存，p99控制在毫秒内</li>\n<li><a href=\"https://linkerd.io/\" target=\"_blank\" rel=\"noopener\">linkerd</a> 商用企业较多，国内我知道的有豆瓣</li>\n<li><a href=\"https://www.envoyproxy.io/\" target=\"_blank\" rel=\"noopener\">envoy</a> 国内腾讯在用</li>\n</ol>\n<p>其中istio和conduit都不太成熟，而linkerd和envoy都有商用案例，较为成熟。长远来看，更看好 istio和conduit</p>\n<p>在此 分享一个dubbo的老用户的利好消息，据说 dubbo3 将兼容2，并且支持service mesh，并且支持反应式编程。参见 重大革新！<a href=\"http://mp.weixin.qq.com/s/eVYx-tUIMYtAk5wP-qkdkw\" target=\"_blank\" rel=\"noopener\">Dubbo 3.0来了</a></p>\n<p>扩展阅读资料</p>\n<p><a href=\"http://blog.shurenyun.com/untitled-102/\" target=\"_blank\" rel=\"noopener\">官方文档|ServiceMesh服务网格Istio面板组件&amp;设计目标</a></p>\n<p><a href=\"http://www.servicemesh.cn/?/article/25\" target=\"_blank\" rel=\"noopener\">演讲实录 | Service Mesh 时代的选边与站队（附PPT下载）</a></p>\n<p><a href=\"https://servicemesh.gitbooks.io/awesome-servicemesh/mesh/2017/service-mesh-next-generation-of-microservice/\" target=\"_blank\" rel=\"noopener\">Service Mesh：下一代微服务</a></p>\n<p><a href=\"http://gitbook.cn/books/5a1e7dca387c5b4ee351790b/index.html\" target=\"_blank\" rel=\"noopener\">Service Mesh 在华为公有云的实践</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/XZVCHZZzCX8wwgNKZtsmcA\" target=\"_blank\" rel=\"noopener\">明星分分合合的洪荒点击量，微博Mesh服务化改造如何支撑？（附PPT下载）</a></p>\n<p><strong>注意</strong></p>\n<p>需要根据公司、团队实际情况理性选择框架，目前service mesh还处于垦荒阶段，而spring cloud或者dubbo还没到彻底过时的程度，建议持续关注，不建议立刻上马，如果已经落地了相关的微服务技术，不要盲目跟风，在可接受学习成本和开发成本情况下，可以考虑研究一下service mesh。</p>\n<p>如果使用的是spring框架的话，建议抛开spring cloud，直接spring boot+service mesh，更清爽一些</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjzdtojcj000824do7dmg0m5e","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojcr000e24dok661355y"},{"post_id":"cjzdtojce000324dodf8n2304","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojcu000j24dora7uivbq"},{"post_id":"cjzdtojci000624dody4lysok","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojcx000m24do9nw4k0ws"},{"post_id":"cjzdtojck000924dobnc4x5rq","category_id":"cjzdtojcr000f24dohbt1cz38","_id":"cjzdtojd0000t24dol1mbmsgn"},{"post_id":"cjzdtojcq000d24do3fky3nvu","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojd4000y24doldrbk0c1"},{"post_id":"cjzdtojd1000v24dox4ax7x5f","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojd8001324dotnmzrh72"},{"post_id":"cjzdtojct000i24domosl5k2p","category_id":"cjzdtojd0000u24dop25e3njo","_id":"cjzdtojd9001624dotk2q8fv0"},{"post_id":"cjzdtojd2000x24don5d9hlgy","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojdc001924do513frcaa"},{"post_id":"cjzdtojd5001024dozo0fznj4","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojdd001d24docgjdmglx"},{"post_id":"cjzdtojcw000l24dorupphwoq","category_id":"cjzdtojd0000u24dop25e3njo","_id":"cjzdtojdf001h24doo1k6mbyr"},{"post_id":"cjzdtojcy000q24doc7qb93po","category_id":"cjzdtojd0000u24dop25e3njo","_id":"cjzdtojdi001k24docj24g2yh"},{"post_id":"cjzdtojdd001c24domn9pmdzj","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojdk001o24dogosun11z"},{"post_id":"cjzdtojcz000s24doqyy6izok","category_id":"cjzdtojd0000u24dop25e3njo","_id":"cjzdtojdl001r24doo1rshghy"},{"post_id":"cjzdtojdf001g24dokei6lrs0","category_id":"cjzdtojdi001m24do1x8k77sf","_id":"cjzdtojdq001y24dotg7omxz6"},{"post_id":"cjzdtojdm001s24do4k3vvaso","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojds002324do8hcdewkz"},{"post_id":"cjzdtojdo001v24dontv3ss7b","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojdu002624do39rxlj3j"},{"post_id":"cjzdtojdg001j24doozp75k2b","category_id":"cjzdtojdn001t24dol1xa79am","_id":"cjzdtojdw002a24do6kd1p10t"},{"post_id":"cjzdtojdp001x24dov67987ww","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojdx002c24doms5rlrpi"},{"post_id":"cjzdtojdj001n24dovubtsuwu","category_id":"cjzdtojdr002024dorvu4bhjn","_id":"cjzdtoje0002g24don7uytiaw"},{"post_id":"cjzdtojdw002b24dou1qtvd5x","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtoje3002j24do7knd2nvp"},{"post_id":"cjzdtojdr002224dojot1ygoz","category_id":"cjzdtojdu002824dooym9pr60","_id":"cjzdtoje6002n24doxhdo1g0b"},{"post_id":"cjzdtojdt002524do9c1rhcqj","category_id":"cjzdtojdu002824dooym9pr60","_id":"cjzdtoje8002q24dopdnxpsg2"},{"post_id":"cjzdtoje5002m24do7br5s4ht","category_id":"cjzdtojcr000f24dohbt1cz38","_id":"cjzdtojec002x24dowfckcbrc"},{"post_id":"cjzdtojeb002w24do9xdoht0a","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojei003524do3o7xgk97"},{"post_id":"cjzdtoje7002p24docdbqd1kv","category_id":"cjzdtojea002u24dow3p7404p","_id":"cjzdtojek003824dom5nmcv1d"},{"post_id":"cjzdtojeh003424dopufw0fj6","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojev003e24doxb4z4c5t"},{"post_id":"cjzdtoje9002t24dobyv7r9e1","category_id":"cjzdtojeg003124don11hq678","_id":"cjzdtojex003i24do1bbyxfff"},{"post_id":"cjzdtojel003c24do4xa6z4u2","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojez003k24dopm6u7xa5"},{"post_id":"cjzdtojec002z24dojebpd84q","category_id":"cjzdtojek003924doe0bd4p5q","_id":"cjzdtojf1003o24dojj0dxh8p"},{"post_id":"cjzdtojef003024do643s6wlt","category_id":"cjzdtojew003f24dou06ewao6","_id":"cjzdtojf3003q24do3y1yg8j4"},{"post_id":"cjzdtojeu003d24dome7pvhnh","category_id":"cjzdtojf0003l24doatmuwo90","_id":"cjzdtojf5003u24doseh91czx"},{"post_id":"cjzdtojex003h24dowepre23v","category_id":"cjzdtojf4003s24doxy7p79zo","_id":"cjzdtojf5003x24do4rj1ok41"},{"post_id":"cjzdtojey003j24dotkw68gmj","category_id":"cjzdtojf5003v24doy9dw4gwf","_id":"cjzdtojfe004k24do3mg00y12"},{"post_id":"cjzdtojey003j24dotkw68gmj","category_id":"cjzdtojf6003z24doeuzuqdql","_id":"cjzdtojff004n24do18qkgf0k"},{"post_id":"cjzdtojey003j24dotkw68gmj","category_id":"cjzdtojf7004324do5bzauypi","_id":"cjzdtojff004o24doaurq97ym"},{"post_id":"cjzdtojey003j24dotkw68gmj","category_id":"cjzdtojf9004924do9ldgft7u","_id":"cjzdtojfg004q24doom18e3nn"},{"post_id":"cjzdtojey003j24dotkw68gmj","category_id":"cjzdtojfb004d24doru1xhig4","_id":"cjzdtojfh004s24do96boy71c"},{"post_id":"cjzdtoji900cq24doqiihltyi","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojih00cx24dozdhs6arg"},{"post_id":"cjzdtojig00cv24dof4qze8e6","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojin00d624doeprg2crj"},{"post_id":"cjzdtojia00cr24do62x64ya4","category_id":"cjzdtojf5003v24doy9dw4gwf","_id":"cjzdtojit00da24domnv6qe2n"},{"post_id":"cjzdtojia00cr24do62x64ya4","category_id":"cjzdtojih00cw24do3crvyzi3","_id":"cjzdtojiv00dd24dot4tuu9yk"},{"post_id":"cjzdtojik00d224dorqb1edg5","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojiz00dh24dox3pmg9o5"},{"post_id":"cjzdtojim00d524dog0c72hnt","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojj100dk24dodwv4o29y"},{"post_id":"cjzdtojie00ct24doyhh841lq","category_id":"cjzdtojil00d324do1e68rsaa","_id":"cjzdtojj300do24do2q2k4o90"},{"post_id":"cjzdtojip00d924don3dhvn4f","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojj400dr24don7yhj7ew"},{"post_id":"cjzdtojiw00dg24do2bchn93i","category_id":"cjzdtojcr000f24dohbt1cz38","_id":"cjzdtojj600dv24dozutv2uj2"},{"post_id":"cjzdtojiz00dj24dogeocj818","category_id":"cjzdtojf0003l24doatmuwo90","_id":"cjzdtojja00dy24dod37sqqlv"},{"post_id":"cjzdtojj100dn24do7re0rchr","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojjc00e224dokr05btqk"},{"post_id":"cjzdtojj300dq24doyxr85lqj","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojje00e624dovdkueoqt"},{"post_id":"cjzdtojj800dx24do7030535m","category_id":"cjzdtojch000524dozdt8za0y","_id":"cjzdtojjg00e924do3tbxrn88"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","category_id":"cjzdtojek003924doe0bd4p5q","_id":"cjzdtojjh00ed24dos6w4jj53"},{"post_id":"cjzdtojj500dt24doqpm6f1a0","category_id":"cjzdtojja00dz24donp16t38v","_id":"cjzdtojji00eg24dowmt8lah4"},{"post_id":"cjzdtojje00e824dohpp4b1un","category_id":"cjzdtojdi001m24do1x8k77sf","_id":"cjzdtojji00ei24doee4pf98n"},{"post_id":"cjzdtojkc00h624do7upw51ok","category_id":"cjzdtojd0000u24dop25e3njo","_id":"cjzdtojki00hb24docbyllo1r"},{"post_id":"cjzdtojkj00hc24doov2p01fz","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojkn00hk24dovwzh0gcx"},{"post_id":"cjzdtojkl00hf24do28hmjmla","category_id":"cjzdtojkn00hi24dod5la434p","_id":"cjzdtojko00hn24do035k5nl2"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojl700iu24do6y8fru2a"},{"post_id":"cjzdtojl500is24do5x44zj46","category_id":"cjzdtojcx000n24doga26r4da","_id":"cjzdtojl800iv24doyhg6fxos"}],"PostTag":[{"post_id":"cjzdtojco000c24doikxidgv2","tag_id":"cjzdtojcb000224do25q6x287","_id":"cjzdtojcs000h24dothw5s0vq"},{"post_id":"cjzdtojbz000024dodonebdbi","tag_id":"cjzdtojcb000224do25q6x287","_id":"cjzdtojcv000k24dotyw39j6j"},{"post_id":"cjzdtojbz000024dodonebdbi","tag_id":"cjzdtojci000724do3pr06rk6","_id":"cjzdtojcx000o24doq5afhoaz"},{"post_id":"cjzdtojbz000024dodonebdbi","tag_id":"cjzdtojcn000b24do4fln3neq","_id":"cjzdtojcz000r24do0llux4pg"},{"post_id":"cjzdtojc9000124dolyex4569","tag_id":"cjzdtojcs000g24doiva1ga1g","_id":"cjzdtojdc001a24dofxtprl8b"},{"post_id":"cjzdtojc9000124dolyex4569","tag_id":"cjzdtojcy000p24dofprrj9b8","_id":"cjzdtojde001e24dokgit1ieb"},{"post_id":"cjzdtojc9000124dolyex4569","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojdg001i24dop09lxr2w"},{"post_id":"cjzdtojc9000124dolyex4569","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtojdi001l24dojfzs75pk"},{"post_id":"cjzdtojce000324dodf8n2304","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojdp001w24dov6i0ny5y"},{"post_id":"cjzdtojce000324dodf8n2304","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojdq001z24doktc80eqt"},{"post_id":"cjzdtojce000324dodf8n2304","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojds002424do58i5ibap"},{"post_id":"cjzdtojci000624dody4lysok","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtoje5002l24do1zr62gwa"},{"post_id":"cjzdtojci000624dody4lysok","tag_id":"cjzdtojdr002124do53in5yjo","_id":"cjzdtoje7002o24do7hapik4v"},{"post_id":"cjzdtojci000624dody4lysok","tag_id":"cjzdtojdu002724dombbmwnk9","_id":"cjzdtoje9002s24dosoqrt1ma"},{"post_id":"cjzdtojci000624dody4lysok","tag_id":"cjzdtojdx002d24dohmwib5s5","_id":"cjzdtojea002v24doif9jqued"},{"post_id":"cjzdtojcj000824do7dmg0m5e","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojeh003324dopjpk60p6"},{"post_id":"cjzdtojcj000824do7dmg0m5e","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojei003624doj090jqy7"},{"post_id":"cjzdtojcj000824do7dmg0m5e","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojel003b24doqalg3pna"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojf7004124do6otvbnyi"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojel003a24doscb21vgh","_id":"cjzdtojf7004224dol9bc66we"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojew003g24do0tqwmwuh","_id":"cjzdtojf8004524doaktrdszk"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojf8004624doc6v4q4cc"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojf4003t24do6oyuxjdp","_id":"cjzdtojf9004824dojn82xwqc"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojf5003w24dov94kyxa7","_id":"cjzdtojfa004a24dogbtk8pqc"},{"post_id":"cjzdtojck000924dobnc4x5rq","tag_id":"cjzdtojf6003y24dol11q9agn","_id":"cjzdtojfb004c24do6xa0wpyg"},{"post_id":"cjzdtojcq000d24do3fky3nvu","tag_id":"cjzdtojcb000224do25q6x287","_id":"cjzdtojfd004f24dod9nheb6y"},{"post_id":"cjzdtojcq000d24do3fky3nvu","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojfd004g24do33tjwjz8"},{"post_id":"cjzdtojcq000d24do3fky3nvu","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojfe004i24dobsbmc803"},{"post_id":"cjzdtojcq000d24do3fky3nvu","tag_id":"cjzdtojf9004724do0zf5tl0m","_id":"cjzdtojfe004j24docf0kjqmx"},{"post_id":"cjzdtojcq000d24do3fky3nvu","tag_id":"cjzdtojfa004b24dou3kllkwn","_id":"cjzdtojff004m24dol12226br"},{"post_id":"cjzdtojct000i24domosl5k2p","tag_id":"cjzdtojfd004e24do2txegg3i","_id":"cjzdtojfg004r24do1w881vml"},{"post_id":"cjzdtojct000i24domosl5k2p","tag_id":"cjzdtojfe004h24doprzwdyag","_id":"cjzdtojfh004t24doz4x1t4d5"},{"post_id":"cjzdtojct000i24domosl5k2p","tag_id":"cjzdtojfe004l24do9f6y13f1","_id":"cjzdtojfh004v24doxvxk1diw"},{"post_id":"cjzdtojcw000l24dorupphwoq","tag_id":"cjzdtojfd004e24do2txegg3i","_id":"cjzdtojfi004y24dozm6bs0l7"},{"post_id":"cjzdtojcw000l24dorupphwoq","tag_id":"cjzdtojfe004h24doprzwdyag","_id":"cjzdtojfi004z24donw3b10l0"},{"post_id":"cjzdtojcw000l24dorupphwoq","tag_id":"cjzdtojfh004w24do4k17071q","_id":"cjzdtojfj005124dow1r2vwpd"},{"post_id":"cjzdtojcy000q24doc7qb93po","tag_id":"cjzdtojfd004e24do2txegg3i","_id":"cjzdtojfk005424do8rngd2f4"},{"post_id":"cjzdtojcy000q24doc7qb93po","tag_id":"cjzdtojfj005024dozr96xvpn","_id":"cjzdtojfk005524dowjlvkmnf"},{"post_id":"cjzdtojcy000q24doc7qb93po","tag_id":"cjzdtojfj005224do6h4upcn5","_id":"cjzdtojfl005724dod4evxsl4"},{"post_id":"cjzdtojcz000s24doqyy6izok","tag_id":"cjzdtojfd004e24do2txegg3i","_id":"cjzdtojfn005a24do8amemm5f"},{"post_id":"cjzdtojcz000s24doqyy6izok","tag_id":"cjzdtojfe004h24doprzwdyag","_id":"cjzdtojfn005b24doocygsnos"},{"post_id":"cjzdtojcz000s24doqyy6izok","tag_id":"cjzdtojfe004l24do9f6y13f1","_id":"cjzdtojfo005d24dodx59p1am"},{"post_id":"cjzdtojd1000v24dox4ax7x5f","tag_id":"cjzdtojfm005924dolhsp5nfe","_id":"cjzdtojfq005g24dovmhmej4n"},{"post_id":"cjzdtojd1000v24dox4ax7x5f","tag_id":"cjzdtojfn005c24do568mn5le","_id":"cjzdtojfq005h24dordpcvvi5"},{"post_id":"cjzdtojd1000v24dox4ax7x5f","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojfr005j24do35cmy1c9"},{"post_id":"cjzdtojd2000x24don5d9hlgy","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojfs005m24doie691wh8"},{"post_id":"cjzdtojd2000x24don5d9hlgy","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojfs005n24dops8ndlut"},{"post_id":"cjzdtojd2000x24don5d9hlgy","tag_id":"cjzdtojfr005k24do9cknvk6g","_id":"cjzdtojft005p24dom7n0s0he"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojfs005l24donwa474m8","_id":"cjzdtojfw005w24do42ms9djv"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojft005o24do6y0lzpxv","_id":"cjzdtojfw005x24dodin66ns7"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojft005q24docm1stsmj","_id":"cjzdtojfw005z24doppoo0qn5"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojfu005r24dou4e35j4u","_id":"cjzdtojfx006024doo5nr3mns"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojfu005s24dobm4rjvyg","_id":"cjzdtojfx006224do40bga3d4"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojdu002724dombbmwnk9","_id":"cjzdtojfx006324dov9vnxjmr"},{"post_id":"cjzdtojd5001024dozo0fznj4","tag_id":"cjzdtojdx002d24dohmwib5s5","_id":"cjzdtojfy006524do9jqe9zcn"},{"post_id":"cjzdtojd7001224do0azsms9v","tag_id":"cjzdtojfv005v24doi0z07j2t","_id":"cjzdtojfz006724do4w0dp0wb"},{"post_id":"cjzdtojd7001224do0azsms9v","tag_id":"cjzdtojfw005y24doxp4invsr","_id":"cjzdtojfz006824do2asrtv8m"},{"post_id":"cjzdtojd7001224do0azsms9v","tag_id":"cjzdtojfx006124do0sre88t3","_id":"cjzdtojg0006a24doftvn8ua5"},{"post_id":"cjzdtojd7001224do0azsms9v","tag_id":"cjzdtojfy006424do1k60x3ew","_id":"cjzdtojg0006b24do0jug1xwu"},{"post_id":"cjzdtojd8001524do0lhfetch","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojg1006f24do07pragiy"},{"post_id":"cjzdtojd8001524do0lhfetch","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojg2006g24dou34dicz1"},{"post_id":"cjzdtojd8001524do0lhfetch","tag_id":"cjzdtojg0006c24dovkcqajij","_id":"cjzdtojg2006i24doo3c7bsik"},{"post_id":"cjzdtojd8001524do0lhfetch","tag_id":"cjzdtojg1006d24dokphruatg","_id":"cjzdtojg2006j24dolpn1dyfz"},{"post_id":"cjzdtojdb001824do4d3bnmlx","tag_id":"cjzdtojg1006e24doj04937dc","_id":"cjzdtojg3006l24doq1o9wwhk"},{"post_id":"cjzdtojdb001824do4d3bnmlx","tag_id":"cjzdtojcb000224do25q6x287","_id":"cjzdtojg4006m24doj5u0ztnn"},{"post_id":"cjzdtojdb001824do4d3bnmlx","tag_id":"cjzdtojg2006h24dou6judrpb","_id":"cjzdtojg4006o24do590nxpzw"},{"post_id":"cjzdtojdd001c24domn9pmdzj","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojg7006s24do6sukph2q"},{"post_id":"cjzdtojdd001c24domn9pmdzj","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojg7006t24do85i9l3mt"},{"post_id":"cjzdtojdd001c24domn9pmdzj","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojg7006v24doq0z9q3df"},{"post_id":"cjzdtojdd001c24domn9pmdzj","tag_id":"cjzdtojg4006p24dohpatk3k7","_id":"cjzdtojg7006w24douo1737qf"},{"post_id":"cjzdtojdd001c24domn9pmdzj","tag_id":"cjzdtojg6006q24dorkp51v8l","_id":"cjzdtojg8006y24dobdncdlgh"},{"post_id":"cjzdtojdf001g24dokei6lrs0","tag_id":"cjzdtojg6006r24dop4fltac7","_id":"cjzdtojg8006z24do0bdibod5"},{"post_id":"cjzdtojdf001g24dokei6lrs0","tag_id":"cjzdtojg7006u24dohdm0rfbb","_id":"cjzdtojg9007124doioj8xr2n"},{"post_id":"cjzdtojdg001j24doozp75k2b","tag_id":"cjzdtojfv005v24doi0z07j2t","_id":"cjzdtojga007324doj69n004a"},{"post_id":"cjzdtojdg001j24doozp75k2b","tag_id":"cjzdtojg9007024doqjl50iew","_id":"cjzdtojga007424dod9yghdjq"},{"post_id":"cjzdtojdj001n24dovubtsuwu","tag_id":"cjzdtojga007224do0c2tufhd","_id":"cjzdtojgc007824dojtpoxmjh"},{"post_id":"cjzdtojdj001n24dovubtsuwu","tag_id":"cjzdtojga007524dob7hmuzn5","_id":"cjzdtojgc007924do8f2qoggy"},{"post_id":"cjzdtojdj001n24dovubtsuwu","tag_id":"cjzdtojgb007624dov9lo4p51","_id":"cjzdtojgc007b24dope7dx6sg"},{"post_id":"cjzdtojdk001q24dodbyxv4wl","tag_id":"cjzdtojga007224do0c2tufhd","_id":"cjzdtojgc007c24dojnfwy0y8"},{"post_id":"cjzdtojdm001s24do4k3vvaso","tag_id":"cjzdtojgc007a24dokgmeisev","_id":"cjzdtojge007h24do7osq59e2"},{"post_id":"cjzdtojdm001s24do4k3vvaso","tag_id":"cjzdtojgd007d24do9en818p8","_id":"cjzdtojge007i24do8q4b1y7o"},{"post_id":"cjzdtojdm001s24do4k3vvaso","tag_id":"cjzdtojgd007e24doj2a439p5","_id":"cjzdtojge007k24doo1l8gq50"},{"post_id":"cjzdtojdm001s24do4k3vvaso","tag_id":"cjzdtojgd007f24do9t1kigin","_id":"cjzdtojge007l24doctlimlpt"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojgg007q24do0pt9goxm"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojgg007r24dovfk874o3"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojgh007t24dopjb4mfwz"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojgd007g24dokpunpxtq","_id":"cjzdtojgh007u24do3mdgil0r"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojge007j24do2aq9fssm","_id":"cjzdtojgh007w24do2wxhltb2"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojgf007m24do6m6roip1","_id":"cjzdtojgi007x24doazkwv7qa"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojgf007n24do1ij1xclp","_id":"cjzdtojgj007z24dom0is14ui"},{"post_id":"cjzdtojdo001v24dontv3ss7b","tag_id":"cjzdtojgf007o24doiygq97wb","_id":"cjzdtojgj008024do7g16703j"},{"post_id":"cjzdtojdp001x24dov67987ww","tag_id":"cjzdtojcs000g24doiva1ga1g","_id":"cjzdtojgl008224dooct6qey5"},{"post_id":"cjzdtojdp001x24dov67987ww","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojgl008324doatr0jljj"},{"post_id":"cjzdtojdp001x24dov67987ww","tag_id":"cjzdtojew003g24do0tqwmwuh","_id":"cjzdtojgm008524dof9rydb45"},{"post_id":"cjzdtojdp001x24dov67987ww","tag_id":"cjzdtojgg007s24dolra3w0tb","_id":"cjzdtojgm008624doj5axbmqb"},{"post_id":"cjzdtojdp001x24dov67987ww","tag_id":"cjzdtojgh007v24doejp3vixy","_id":"cjzdtojgm008824doswptomm6"},{"post_id":"cjzdtojdp001x24dov67987ww","tag_id":"cjzdtojgi007y24do7omuyj74","_id":"cjzdtojgm008924doxm58vh6t"},{"post_id":"cjzdtojdr002224dojot1ygoz","tag_id":"cjzdtojgj008124dolri3lrfd","_id":"cjzdtojgo008c24doby53pxw8"},{"post_id":"cjzdtojdr002224dojot1ygoz","tag_id":"cjzdtojgl008424do58iv7toi","_id":"cjzdtojgo008d24dok4q9x4dp"},{"post_id":"cjzdtojdr002224dojot1ygoz","tag_id":"cjzdtojfd004e24do2txegg3i","_id":"cjzdtojgo008f24doweemsw7l"},{"post_id":"cjzdtojdr002224dojot1ygoz","tag_id":"cjzdtojfj005024dozr96xvpn","_id":"cjzdtojgp008g24dokw5md2z6"},{"post_id":"cjzdtojdt002524do9c1rhcqj","tag_id":"cjzdtojgj008124dolri3lrfd","_id":"cjzdtojgp008i24do2paqvp0l"},{"post_id":"cjzdtojdv002924dow72t0ukd","tag_id":"cjzdtojgo008e24do4hceac1y","_id":"cjzdtojgq008l24do9rjdu178"},{"post_id":"cjzdtojdv002924dow72t0ukd","tag_id":"cjzdtojgp008h24doc40frjr4","_id":"cjzdtojgq008m24dod90b6w1p"},{"post_id":"cjzdtojdv002924dow72t0ukd","tag_id":"cjzdtojgp008j24donpqtmmwz","_id":"cjzdtojgr008o24do173glngw"},{"post_id":"cjzdtojdw002b24dou1qtvd5x","tag_id":"cjzdtojgj008124dolri3lrfd","_id":"cjzdtojgs008t24doueb7mmuy"},{"post_id":"cjzdtojdw002b24dou1qtvd5x","tag_id":"cjzdtojgq008n24doz0ath3kr","_id":"cjzdtojgt008u24do0o6fwb89"},{"post_id":"cjzdtojdw002b24dou1qtvd5x","tag_id":"cjzdtojgr008p24do9emo76b8","_id":"cjzdtojgt008w24doi5skd5f4"},{"post_id":"cjzdtojdw002b24dou1qtvd5x","tag_id":"cjzdtojgr008q24dohf1qkqxy","_id":"cjzdtojgt008x24do1ko9jpye"},{"post_id":"cjzdtojdw002b24dou1qtvd5x","tag_id":"cjzdtojgs008r24dobmqblkar","_id":"cjzdtojgu008z24do5bpvy3kr"},{"post_id":"cjzdtojdx002e24dobuxq35bl","tag_id":"cjzdtojgj008124dolri3lrfd","_id":"cjzdtojgv009324dop57dxula"},{"post_id":"cjzdtojdx002e24dobuxq35bl","tag_id":"cjzdtojgt008v24dobb11kmcz","_id":"cjzdtojgv009424doejpkt2fd"},{"post_id":"cjzdtojdx002e24dobuxq35bl","tag_id":"cjzdtojgt008y24dopfe943c4","_id":"cjzdtojgw009624dok2kqw92k"},{"post_id":"cjzdtojdx002e24dobuxq35bl","tag_id":"cjzdtojgq008n24doz0ath3kr","_id":"cjzdtojgw009724dombsr8hnr"},{"post_id":"cjzdtojdx002e24dobuxq35bl","tag_id":"cjzdtojgu009124dovsdd066l","_id":"cjzdtojgx009924doreuasvbz"},{"post_id":"cjzdtoje1002h24dofwg1mr1d","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojgy009c24do1p5dh3ie"},{"post_id":"cjzdtoje1002h24dofwg1mr1d","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojgy009d24do5bf1bnxu"},{"post_id":"cjzdtoje1002h24dofwg1mr1d","tag_id":"cjzdtojg0006c24dovkcqajij","_id":"cjzdtojgz009f24docy2y4lc7"},{"post_id":"cjzdtoje1002h24dofwg1mr1d","tag_id":"cjzdtojg1006d24dokphruatg","_id":"cjzdtojgz009g24doysxhx7oe"},{"post_id":"cjzdtoje2002i24dobclmkav1","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojh0009j24dopos5ihsw"},{"post_id":"cjzdtoje2002i24dobclmkav1","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojh0009k24do3hcu3i0r"},{"post_id":"cjzdtoje2002i24dobclmkav1","tag_id":"cjzdtojg0006c24dovkcqajij","_id":"cjzdtojh1009m24dokkjae92i"},{"post_id":"cjzdtoje5002m24do7br5s4ht","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojh2009r24do6518dcos"},{"post_id":"cjzdtoje5002m24do7br5s4ht","tag_id":"cjzdtojg0006c24dovkcqajij","_id":"cjzdtojh3009s24do19api60o"},{"post_id":"cjzdtoje5002m24do7br5s4ht","tag_id":"cjzdtojh1009n24dozuw2x3ge","_id":"cjzdtojh3009u24donck0n70z"},{"post_id":"cjzdtoje5002m24do7br5s4ht","tag_id":"cjzdtojh1009o24dowf3yt87x","_id":"cjzdtojh3009v24dodcpaeru6"},{"post_id":"cjzdtoje5002m24do7br5s4ht","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojh4009x24do04mdgp4x"},{"post_id":"cjzdtoje5002m24do7br5s4ht","tag_id":"cjzdtojh1009p24domc196tgr","_id":"cjzdtojh4009y24dou21o1fb5"},{"post_id":"cjzdtoje7002p24docdbqd1kv","tag_id":"cjzdtojgt008v24dobb11kmcz","_id":"cjzdtojh500a024dotgxrbkd6"},{"post_id":"cjzdtoje7002p24docdbqd1kv","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtojh500a124do36h29hv2"},{"post_id":"cjzdtoje9002t24dobyv7r9e1","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtojh600a324doxyz8k5ae"},{"post_id":"cjzdtoje9002t24dobyv7r9e1","tag_id":"cjzdtojh3009t24dogmea6b9u","_id":"cjzdtojh600a424do7btqne9o"},{"post_id":"cjzdtoje9002t24dobyv7r9e1","tag_id":"cjzdtojh3009w24do244xdr09","_id":"cjzdtojh700a624dojyrsif7z"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojfs005l24donwa474m8","_id":"cjzdtojh800aa24do0tv4amyn"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojft005o24do6y0lzpxv","_id":"cjzdtojh900ab24do5klrqpz4"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojft005q24docm1stsmj","_id":"cjzdtojh900ad24dohfqshqw1"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojfu005r24dou4e35j4u","_id":"cjzdtojh900ae24do4ml54nhm"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojfu005s24dobm4rjvyg","_id":"cjzdtojha00ag24donhur6qlr"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojdu002724dombbmwnk9","_id":"cjzdtojha00ah24doih2q06db"},{"post_id":"cjzdtojeb002w24do9xdoht0a","tag_id":"cjzdtojdx002d24dohmwib5s5","_id":"cjzdtojha00aj24dog8wiqwxx"},{"post_id":"cjzdtojec002z24dojebpd84q","tag_id":"cjzdtojh800a924do1c4zpz1s","_id":"cjzdtojhc00an24dog5862g9m"},{"post_id":"cjzdtojec002z24dojebpd84q","tag_id":"cjzdtojh900ac24do13sjcnwm","_id":"cjzdtojhc00ao24dojjucrdv0"},{"post_id":"cjzdtojec002z24dojebpd84q","tag_id":"cjzdtojha00af24do9vph77rn","_id":"cjzdtojhd00aq24done10sbaq"},{"post_id":"cjzdtojec002z24dojebpd84q","tag_id":"cjzdtojha00ai24don3huo3yf","_id":"cjzdtojhd00ar24doh90pztwn"},{"post_id":"cjzdtojec002z24dojebpd84q","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojhe00at24doih3k6zq2"},{"post_id":"cjzdtojec002z24dojebpd84q","tag_id":"cjzdtojhb00al24dou0mwi5wk","_id":"cjzdtojhe00au24dojlhn930v"},{"post_id":"cjzdtojef003024do643s6wlt","tag_id":"cjzdtojhc00am24doit1e5kzs","_id":"cjzdtojhe00aw24do42hqxuqv"},{"post_id":"cjzdtojeh003424dopufw0fj6","tag_id":"cjzdtojhc00ap24domt7njjhj","_id":"cjzdtojhf00ax24doav7vere7"},{"post_id":"cjzdtojeh003424dopufw0fj6","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojhg00az24do6ec6d75a"},{"post_id":"cjzdtojeh003424dopufw0fj6","tag_id":"cjzdtojhd00as24do2cqxtibh","_id":"cjzdtojhg00b024do96odpq2i"},{"post_id":"cjzdtojej003724do7ot29vcd","tag_id":"cjzdtojgq008n24doz0ath3kr","_id":"cjzdtojhi00b424doc4rds9pt"},{"post_id":"cjzdtojej003724do7ot29vcd","tag_id":"cjzdtojhf00ay24dou51qncdq","_id":"cjzdtojhi00b524doub86wsdb"},{"post_id":"cjzdtojej003724do7ot29vcd","tag_id":"cjzdtojhh00b124do0qwzns4h","_id":"cjzdtojhi00b724doo0bhjy2z"},{"post_id":"cjzdtojej003724do7ot29vcd","tag_id":"cjzdtojhh00b224domhe7mmt3","_id":"cjzdtojhj00b824do8hq4ejbg"},{"post_id":"cjzdtojel003c24do4xa6z4u2","tag_id":"cjzdtojhh00b324do726n3wbf","_id":"cjzdtojhk00bd24dom74345cy"},{"post_id":"cjzdtojel003c24do4xa6z4u2","tag_id":"cjzdtojhi00b624do5ktpp2p9","_id":"cjzdtojhk00be24do2kc5sqqy"},{"post_id":"cjzdtojel003c24do4xa6z4u2","tag_id":"cjzdtojhj00b924do96y4z0c9","_id":"cjzdtojhl00bg24doeviirtlk"},{"post_id":"cjzdtojel003c24do4xa6z4u2","tag_id":"cjzdtojhj00ba24do84yb12tx","_id":"cjzdtojhl00bh24donia6ffxe"},{"post_id":"cjzdtojel003c24do4xa6z4u2","tag_id":"cjzdtojhj00bb24dolt7uy8ue","_id":"cjzdtojhl00bj24do3aq4l8ki"},{"post_id":"cjzdtojeu003d24dome7pvhnh","tag_id":"cjzdtojhk00bc24douzqj3kng","_id":"cjzdtojhm00bm24doz6g7vxj3"},{"post_id":"cjzdtojeu003d24dome7pvhnh","tag_id":"cjzdtojhk00bf24dohxn0wsnv","_id":"cjzdtojhm00bn24dof6vgcf1c"},{"post_id":"cjzdtojeu003d24dome7pvhnh","tag_id":"cjzdtojhl00bi24do6qaapdmz","_id":"cjzdtojhn00bp24dorpjs37lo"},{"post_id":"cjzdtojeu003d24dome7pvhnh","tag_id":"cjzdtojhm00bk24dopsq9ytd3","_id":"cjzdtojhn00bq24dos0o9brd8"},{"post_id":"cjzdtojeu003d24dome7pvhnh","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtojho00bs24donkrhzkk8"},{"post_id":"cjzdtojex003h24dowepre23v","tag_id":"cjzdtojhm00bl24doyovyqkxp","_id":"cjzdtojhp00bv24dopqjckqkx"},{"post_id":"cjzdtojex003h24dowepre23v","tag_id":"cjzdtojhn00bo24doo1q09sks","_id":"cjzdtojhp00bw24doyy1ggh7j"},{"post_id":"cjzdtojex003h24dowepre23v","tag_id":"cjzdtojhn00br24do1glz6bfc","_id":"cjzdtojhp00by24do5ytb6qbt"},{"post_id":"cjzdtojex003h24dowepre23v","tag_id":"cjzdtojho00bt24dog16t4mb1","_id":"cjzdtojhp00bz24dop9v3iy3u"},{"post_id":"cjzdtojey003j24dotkw68gmj","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtojhr00c324dohzvsisl6"},{"post_id":"cjzdtojey003j24dotkw68gmj","tag_id":"cjzdtojho00bu24dovgb0sg7g","_id":"cjzdtojhr00c424dogefrx3kq"},{"post_id":"cjzdtojey003j24dotkw68gmj","tag_id":"cjzdtojhp00bx24doh6bxvd4c","_id":"cjzdtojhs00c624dodwte0vut"},{"post_id":"cjzdtojey003j24dotkw68gmj","tag_id":"cjzdtojhq00c024doj488y95v","_id":"cjzdtojhs00c724do0r4loo15"},{"post_id":"cjzdtojey003j24dotkw68gmj","tag_id":"cjzdtojhq00c124do63zp4m0w","_id":"cjzdtojht00c924doprtha7rq"},{"post_id":"cjzdtojf0003n24dog61u5vuz","tag_id":"cjzdtojcs000g24doiva1ga1g","_id":"cjzdtojht00ca24do5og54bul"},{"post_id":"cjzdtojf0003n24dog61u5vuz","tag_id":"cjzdtojhq00c224do930thc79","_id":"cjzdtojht00cc24doaplv3k8q"},{"post_id":"cjzdtojf0003n24dog61u5vuz","tag_id":"cjzdtojhr00c524dovibvnurq","_id":"cjzdtojht00cd24dohke0cply"},{"post_id":"cjzdtojf2003p24dokjd4hbs2","tag_id":"cjzdtojf5003w24dov94kyxa7","_id":"cjzdtojhv00ch24do2gm6zwji"},{"post_id":"cjzdtojf2003p24dokjd4hbs2","tag_id":"cjzdtojht00cb24doznmjuhuf","_id":"cjzdtojhv00ci24doxnbyi41o"},{"post_id":"cjzdtojf2003p24dokjd4hbs2","tag_id":"cjzdtojhu00ce24doncl0unpu","_id":"cjzdtojhw00ck24do4ca11e21"},{"post_id":"cjzdtojf2003p24dokjd4hbs2","tag_id":"cjzdtojhu00cf24dodgd3bkf1","_id":"cjzdtojhw00cl24doq2yucqpq"},{"post_id":"cjzdtojf3003r24dozn7l1qcw","tag_id":"cjzdtojhu00cg24doyiqtg63w","_id":"cjzdtojhw00cn24do1kpj22w4"},{"post_id":"cjzdtojf3003r24dozn7l1qcw","tag_id":"cjzdtojhq00c224do930thc79","_id":"cjzdtojhx00co24docteklbja"},{"post_id":"cjzdtojf3003r24dozn7l1qcw","tag_id":"cjzdtojhw00cm24domyrl2o32","_id":"cjzdtojhx00cp24dozi1q3esk"},{"post_id":"cjzdtojia00cr24do62x64ya4","tag_id":"cjzdtojd6001124doadc3vtcd","_id":"cjzdtojig00cu24do0e3rp6rw"},{"post_id":"cjzdtojia00cr24do62x64ya4","tag_id":"cjzdtojho00bu24dovgb0sg7g","_id":"cjzdtojii00cy24dog31axk4i"},{"post_id":"cjzdtojia00cr24do62x64ya4","tag_id":"cjzdtojgp008j24donpqtmmwz","_id":"cjzdtojik00d124do9525r38o"},{"post_id":"cjzdtojia00cr24do62x64ya4","tag_id":"cjzdtojgp008h24doc40frjr4","_id":"cjzdtojim00d424doj90vsozd"},{"post_id":"cjzdtojie00ct24doyhh841lq","tag_id":"cjzdtojcy000p24dofprrj9b8","_id":"cjzdtojio00d824douuci61g5"},{"post_id":"cjzdtojie00ct24doyhh841lq","tag_id":"cjzdtojcs000g24doiva1ga1g","_id":"cjzdtojit00db24dojjh3fx48"},{"post_id":"cjzdtojie00ct24doyhh841lq","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojiw00df24dokf5tzsye"},{"post_id":"cjzdtojie00ct24doyhh841lq","tag_id":"cjzdtojfj005224do6h4upcn5","_id":"cjzdtojiz00di24do5vfg706y"},{"post_id":"cjzdtojie00ct24doyhh841lq","tag_id":"cjzdtojfm005924dolhsp5nfe","_id":"cjzdtojj100dl24do1wbgrxsa"},{"post_id":"cjzdtojie00ct24doyhh841lq","tag_id":"cjzdtojfn005c24do568mn5le","_id":"cjzdtojj300dp24doe9re531z"},{"post_id":"cjzdtoji900cq24doqiihltyi","tag_id":"cjzdtojcy000p24dofprrj9b8","_id":"cjzdtojj500ds24do9djnmzjw"},{"post_id":"cjzdtoji900cq24doqiihltyi","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojj700dw24dogji4kcvi"},{"post_id":"cjzdtoji900cq24doqiihltyi","tag_id":"cjzdtojew003g24do0tqwmwuh","_id":"cjzdtojjb00e024dogcwn7c8n"},{"post_id":"cjzdtoji900cq24doqiihltyi","tag_id":"cjzdtojid00cs24dok8o3z07b","_id":"cjzdtojjc00e424do5ds87bzn"},{"post_id":"cjzdtoji900cq24doqiihltyi","tag_id":"cjzdtojij00d024dogeozirv3","_id":"cjzdtojje00e724do5kskpnwp"},{"post_id":"cjzdtojim00d524dog0c72hnt","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojjg00eb24dou1lif01j"},{"post_id":"cjzdtojim00d524dog0c72hnt","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojjh00ec24doad649l93"},{"post_id":"cjzdtojim00d524dog0c72hnt","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojjh00ee24doiwavq9yw"},{"post_id":"cjzdtojim00d524dog0c72hnt","tag_id":"cjzdtojgd007g24dokpunpxtq","_id":"cjzdtojji00eh24dohny7y1un"},{"post_id":"cjzdtojim00d524dog0c72hnt","tag_id":"cjzdtojge007j24do2aq9fssm","_id":"cjzdtojji00ej24do2c0d4llz"},{"post_id":"cjzdtojim00d524dog0c72hnt","tag_id":"cjzdtojgf007m24do6m6roip1","_id":"cjzdtojjj00el24dovc8d99de"},{"post_id":"cjzdtojip00d924don3dhvn4f","tag_id":"cjzdtojcb000224do25q6x287","_id":"cjzdtojjk00em24doj8je7ckz"},{"post_id":"cjzdtojip00d924don3dhvn4f","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojjl00eo24do693kv82t"},{"post_id":"cjzdtojip00d924don3dhvn4f","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojjl00ep24dobkvdyw24"},{"post_id":"cjzdtojip00d924don3dhvn4f","tag_id":"cjzdtojf9004724do0zf5tl0m","_id":"cjzdtojjl00er24do65q1f3z8"},{"post_id":"cjzdtojip00d924don3dhvn4f","tag_id":"cjzdtojfa004b24dou3kllkwn","_id":"cjzdtojjl00es24doq57v1w11"},{"post_id":"cjzdtojig00cv24dof4qze8e6","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojjm00et24doztf7i6n3"},{"post_id":"cjzdtojig00cv24dof4qze8e6","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojjm00ev24do2tuy3uqh"},{"post_id":"cjzdtojig00cv24dof4qze8e6","tag_id":"cjzdtojio00d724doydpnb2yr","_id":"cjzdtojjn00ew24do1xxauc0j"},{"post_id":"cjzdtojig00cv24dof4qze8e6","tag_id":"cjzdtojiv00de24doqdx9odq7","_id":"cjzdtojjn00ey24dopcrnuijq"},{"post_id":"cjzdtojig00cv24dof4qze8e6","tag_id":"cjzdtojj100dm24dotpat8wtf","_id":"cjzdtojjn00ez24doclsz02jm"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","tag_id":"cjzdtojh800a924do1c4zpz1s","_id":"cjzdtojjo00f124dodlfrfsyw"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","tag_id":"cjzdtojh900ac24do13sjcnwm","_id":"cjzdtojjp00f224doosh4flfe"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","tag_id":"cjzdtojha00af24do9vph77rn","_id":"cjzdtojjp00f424dof5uh1bhr"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","tag_id":"cjzdtojha00ai24don3huo3yf","_id":"cjzdtojjp00f524doaqbj7lw5"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojjp00f624dojq0b4lzf"},{"post_id":"cjzdtojjc00e524do2yfxyrqv","tag_id":"cjzdtojhb00al24dou0mwi5wk","_id":"cjzdtojjq00f824dok9m5votn"},{"post_id":"cjzdtojik00d224dorqb1edg5","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojjr00f924doloex0yvu"},{"post_id":"cjzdtojik00d224dorqb1edg5","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojjr00fb24dofw1to1m5"},{"post_id":"cjzdtojik00d224dorqb1edg5","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojjr00fc24doauv3cequ"},{"post_id":"cjzdtojik00d224dorqb1edg5","tag_id":"cjzdtojgd007d24do9en818p8","_id":"cjzdtojjs00fe24do3s5tlhb9"},{"post_id":"cjzdtojik00d224dorqb1edg5","tag_id":"cjzdtojj600du24dooyc8zzki","_id":"cjzdtojjs00ff24dojka55vcu"},{"post_id":"cjzdtojik00d224dorqb1edg5","tag_id":"cjzdtojjc00e324dooxdknvpe","_id":"cjzdtojjs00fh24dowpfut287"},{"post_id":"cjzdtojit00dc24dom4ipf9n2","tag_id":"cjzdtojfn005c24do568mn5le","_id":"cjzdtojjt00fi24do8udw4tup"},{"post_id":"cjzdtojit00dc24dom4ipf9n2","tag_id":"cjzdtojfm005924dolhsp5nfe","_id":"cjzdtojjt00fj24doprygq596"},{"post_id":"cjzdtojit00dc24dom4ipf9n2","tag_id":"cjzdtojjg00ea24doxle6aubu","_id":"cjzdtojjt00fl24do9bg1636j"},{"post_id":"cjzdtojit00dc24dom4ipf9n2","tag_id":"cjzdtojjh00ef24dou787llem","_id":"cjzdtojjt00fm24dohbgj4was"},{"post_id":"cjzdtojit00dc24dom4ipf9n2","tag_id":"cjzdtojjj00ek24dohwopwpyv","_id":"cjzdtojju00fo24dowdyvh19p"},{"post_id":"cjzdtojit00dc24dom4ipf9n2","tag_id":"cjzdtojfh004w24do4k17071q","_id":"cjzdtojju00fp24dote2yxwve"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojjv00fr24doasayjnwj"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojf4003t24do6oyuxjdp","_id":"cjzdtojjv00fs24do1t6rllru"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojcb000224do25q6x287","_id":"cjzdtojjv00fu24dor9gxpixw"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojjv00fv24doolymuuhb"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojf4003t24do6oyuxjdp","_id":"cjzdtojjw00fw24dotz51n7ma"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojjk00en24do9swp6tzs","_id":"cjzdtojjw00fy24dodqwqnxf9"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojjl00eq24do3q62l3vc","_id":"cjzdtojjx00fz24do9vjjal6j"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojjm00eu24do4cguahd8","_id":"cjzdtojjx00g124do2qi5vlb3"},{"post_id":"cjzdtojiw00dg24do2bchn93i","tag_id":"cjzdtojjn00ex24downn2hhn1","_id":"cjzdtojjx00g224doeidvd9mj"},{"post_id":"cjzdtojiz00dj24dogeocj818","tag_id":"cjzdtojhk00bc24douzqj3kng","_id":"cjzdtojjy00g424do0tajfb9e"},{"post_id":"cjzdtojiz00dj24dogeocj818","tag_id":"cjzdtojhk00bf24dohxn0wsnv","_id":"cjzdtojjy00g524dorobco8c4"},{"post_id":"cjzdtojiz00dj24dogeocj818","tag_id":"cjzdtojhl00bi24do6qaapdmz","_id":"cjzdtojjy00g724do2gzap8m2"},{"post_id":"cjzdtojiz00dj24dogeocj818","tag_id":"cjzdtojhm00bk24dopsq9ytd3","_id":"cjzdtojjz00g824do46ep2wk6"},{"post_id":"cjzdtojiz00dj24dogeocj818","tag_id":"cjzdtojjo00f024dodp99wt9u","_id":"cjzdtojjz00g924dovftkud5e"},{"post_id":"cjzdtojiz00dj24dogeocj818","tag_id":"cjzdtojjp00f324doik0zcg3i","_id":"cjzdtojk000gb24doh0idfr5l"},{"post_id":"cjzdtojj100dn24do7re0rchr","tag_id":"cjzdtojjq00f724do24npl8ca","_id":"cjzdtojk000gc24dokwear9q9"},{"post_id":"cjzdtojj100dn24do7re0rchr","tag_id":"cjzdtojjr00fa24dopvgldcmq","_id":"cjzdtojk000ge24dod49mur4o"},{"post_id":"cjzdtojj100dn24do7re0rchr","tag_id":"cjzdtojjr00fd24dodepdvn87","_id":"cjzdtojk100gf24do3kan75ar"},{"post_id":"cjzdtojj100dn24do7re0rchr","tag_id":"cjzdtojjs00fg24dol5xofs3v","_id":"cjzdtojk100gh24doxk7key16"},{"post_id":"cjzdtojj100dn24do7re0rchr","tag_id":"cjzdtojjt00fk24doxm2ejwm8","_id":"cjzdtojk100gi24doasyb08w6"},{"post_id":"cjzdtojj100dn24do7re0rchr","tag_id":"cjzdtojjt00fn24do1snnqvca","_id":"cjzdtojk200gk24do28w7gx6z"},{"post_id":"cjzdtojj300dq24doyxr85lqj","tag_id":"cjzdtojdu002724dombbmwnk9","_id":"cjzdtojk200gl24dodoe0s72x"},{"post_id":"cjzdtojj300dq24doyxr85lqj","tag_id":"cjzdtojdx002d24dohmwib5s5","_id":"cjzdtojk200gm24doe2fhd6uq"},{"post_id":"cjzdtojj300dq24doyxr85lqj","tag_id":"cjzdtojft005q24docm1stsmj","_id":"cjzdtojk300go24dor625rqvj"},{"post_id":"cjzdtojj300dq24doyxr85lqj","tag_id":"cjzdtojju00fq24do2d7fbtuc","_id":"cjzdtojk300gp24dopxcg5f59"},{"post_id":"cjzdtojj300dq24doyxr85lqj","tag_id":"cjzdtojjv00ft24dogdgf3z9c","_id":"cjzdtojk400gq24dov96jutkx"},{"post_id":"cjzdtojj500dt24doqpm6f1a0","tag_id":"cjzdtojjw00fx24doecuut50n","_id":"cjzdtojk400gr24doilw3ls6g"},{"post_id":"cjzdtojj800dx24do7030535m","tag_id":"cjzdtojda001724do5dfpjppw","_id":"cjzdtojk500gs24dovhadx8sj"},{"post_id":"cjzdtojj800dx24do7030535m","tag_id":"cjzdtojde001f24dovnmklhgu","_id":"cjzdtojk500gt24doezswyv1n"},{"post_id":"cjzdtojj800dx24do7030535m","tag_id":"cjzdtojdk001p24donkyfg4mh","_id":"cjzdtojk600gu24dok9nkzf6b"},{"post_id":"cjzdtojj800dx24do7030535m","tag_id":"cjzdtojjx00g024doszha7p0j","_id":"cjzdtojk600gv24dons2e0vp0"},{"post_id":"cjzdtojj800dx24do7030535m","tag_id":"cjzdtojjx00g324do7f7cel1s","_id":"cjzdtojk600gw24doe74tj26d"},{"post_id":"cjzdtojj800dx24do7030535m","tag_id":"cjzdtojjy00g624do94zdt3p2","_id":"cjzdtojk700gx24doim1oo25z"},{"post_id":"cjzdtojjb00e124dop7tjh5lg","tag_id":"cjzdtojg0006c24dovkcqajij","_id":"cjzdtojk700gy24dosv6y63gm"},{"post_id":"cjzdtojjb00e124dop7tjh5lg","tag_id":"cjzdtojjz00ga24do41ao53f7","_id":"cjzdtojk700gz24dobi2f7t5g"},{"post_id":"cjzdtojjb00e124dop7tjh5lg","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojk700h024doby4389xk"},{"post_id":"cjzdtojjb00e124dop7tjh5lg","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojk700h124doang82yik"},{"post_id":"cjzdtojje00e824dohpp4b1un","tag_id":"cjzdtojk000gd24dobayu9xmh","_id":"cjzdtojk800h224domqimm71i"},{"post_id":"cjzdtojje00e824dohpp4b1un","tag_id":"cjzdtojk100gg24do9j2viv2g","_id":"cjzdtojk800h324do0ncs69fz"},{"post_id":"cjzdtojje00e824dohpp4b1un","tag_id":"cjzdtojk100gj24do292mog2p","_id":"cjzdtojk800h424dojoai4ble"},{"post_id":"cjzdtojje00e824dohpp4b1un","tag_id":"cjzdtojk200gn24dog1ygx9os","_id":"cjzdtojk800h524doe5aoy6vw"},{"post_id":"cjzdtojkc00h624do7upw51ok","tag_id":"cjzdtojfd004e24do2txegg3i","_id":"cjzdtojkk00he24donsydis06"},{"post_id":"cjzdtojkc00h624do7upw51ok","tag_id":"cjzdtojfe004h24doprzwdyag","_id":"cjzdtojkm00hg24doq2s6nr7b"},{"post_id":"cjzdtojkc00h624do7upw51ok","tag_id":"cjzdtojke00h824dowqielbls","_id":"cjzdtojkn00hj24dowh9jwloy"},{"post_id":"cjzdtojkd00h724do65ujbxx3","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojkp00ho24doqg8k1qru"},{"post_id":"cjzdtojkd00h724do65ujbxx3","tag_id":"cjzdtojha00ai24don3huo3yf","_id":"cjzdtojkp00hp24dovdpjcv2l"},{"post_id":"cjzdtojkd00h724do65ujbxx3","tag_id":"cjzdtojkk00hd24doks3p1mps","_id":"cjzdtojkq00hr24doeogl890l"},{"post_id":"cjzdtojkd00h724do65ujbxx3","tag_id":"cjzdtojkm00hh24do6majyn7b","_id":"cjzdtojkq00hs24doabbxrn7v"},{"post_id":"cjzdtojkd00h724do65ujbxx3","tag_id":"cjzdtojkn00hl24dordx53ivw","_id":"cjzdtojkq00hu24do1r5mmm2x"},{"post_id":"cjzdtojkf00h924doonizl41l","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojkr00hw24dothrv7p30"},{"post_id":"cjzdtojkf00h924doonizl41l","tag_id":"cjzdtojha00ai24don3huo3yf","_id":"cjzdtojkr00hx24doic2osjnn"},{"post_id":"cjzdtojkf00h924doonizl41l","tag_id":"cjzdtojkk00hd24doks3p1mps","_id":"cjzdtojks00hz24do6n1o5y4b"},{"post_id":"cjzdtojkf00h924doonizl41l","tag_id":"cjzdtojkm00hh24do6majyn7b","_id":"cjzdtojks00i024do5w0ehe44"},{"post_id":"cjzdtojkf00h924doonizl41l","tag_id":"cjzdtojkn00hl24dordx53ivw","_id":"cjzdtojkt00i224do9mzp8fw5"},{"post_id":"cjzdtojkh00ha24doy05lsbxh","tag_id":"cjzdtojgj008124dolri3lrfd","_id":"cjzdtojkt00i324dox8bezgbu"},{"post_id":"cjzdtojkh00ha24doy05lsbxh","tag_id":"cjzdtojgq008n24doz0ath3kr","_id":"cjzdtojku00i524do8kbyxzcc"},{"post_id":"cjzdtojkh00ha24doy05lsbxh","tag_id":"cjzdtojkr00hv24do44o89z0l","_id":"cjzdtojku00i624dou20noeea"},{"post_id":"cjzdtojkh00ha24doy05lsbxh","tag_id":"cjzdtojks00hy24dowo7spg89","_id":"cjzdtojku00i724dofow1qdt0"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojhc00ap24domt7njjhj","_id":"cjzdtojkx00ib24dom2upkcgl"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojd2000w24do0rllyssb","_id":"cjzdtojkx00ic24doejyni41b"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojhd00as24do2cqxtibh","_id":"cjzdtojky00ie24doom51qzei"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojks00i124doa7b6mvq8","_id":"cjzdtojky00if24do94givqop"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojkt00i424dotzrna7y9","_id":"cjzdtojkz00ih24do51i3pdkz"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojku00i824doo0pcfcpm","_id":"cjzdtojkz00ii24dotlfyqcj8"},{"post_id":"cjzdtojkj00hc24doov2p01fz","tag_id":"cjzdtojku00i924do15gdl7fd","_id":"cjzdtojkz00ik24doaom5r64m"},{"post_id":"cjzdtojkl00hf24do28hmjmla","tag_id":"cjzdtojju00fq24do2d7fbtuc","_id":"cjzdtojl000il24do2kc7x512"},{"post_id":"cjzdtojkl00hf24do28hmjmla","tag_id":"cjzdtojft005q24docm1stsmj","_id":"cjzdtojl000im24do09b9nn1q"},{"post_id":"cjzdtojkl00hf24do28hmjmla","tag_id":"cjzdtojkv00ia24dokeguq590","_id":"cjzdtojl000in24do89wkuyr3"},{"post_id":"cjzdtojkl00hf24do28hmjmla","tag_id":"cjzdtojkx00id24do5zve8v3p","_id":"cjzdtojl000io24doszhevdw0"},{"post_id":"cjzdtojkl00hf24do28hmjmla","tag_id":"cjzdtojky00ig24dob1rdr54c","_id":"cjzdtojl100ip24do7gj6eg3n"},{"post_id":"cjzdtojkl00hf24do28hmjmla","tag_id":"cjzdtojkz00ij24dop4bmyh2k","_id":"cjzdtojl100iq24dofmzqpsx1"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojhh00b324do726n3wbf","_id":"cjzdtojla00iz24do6rku34xt"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojhi00b624do5ktpp2p9","_id":"cjzdtojla00j024dol6cemyvn"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojl700it24dox3b5iu9x","_id":"cjzdtojlc00j224doxlgs0472"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojl800iw24dodir1rvwt","_id":"cjzdtojlc00j324donfoc5kx8"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojhj00ba24do84yb12tx","_id":"cjzdtojld00j524don044a8e9"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojid00cs24dok8o3z07b","_id":"cjzdtojle00j624dop242b2lg"},{"post_id":"cjzdtojl500ir24dorbxjrfq3","tag_id":"cjzdtojl800ix24do5exoct7y","_id":"cjzdtojle00j824dopephaut2"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojhh00b324do726n3wbf","_id":"cjzdtojlf00ja24doyzy4w950"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojhi00b624do5ktpp2p9","_id":"cjzdtojlg00jb24do14hod1ua"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojl700it24dox3b5iu9x","_id":"cjzdtojlg00jc24domp954mjp"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojl800iw24dodir1rvwt","_id":"cjzdtojlg00jd24domlknz5c0"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojhj00ba24do84yb12tx","_id":"cjzdtojlg00je24dovax295ye"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojid00cs24dok8o3z07b","_id":"cjzdtojlg00jf24dol7exn1st"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojl800ix24do5exoct7y","_id":"cjzdtojlg00jg24donl5s2sds"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojle00j724docoqxt7ld","_id":"cjzdtojlg00jh24dotiela2ht"},{"post_id":"cjzdtojl500is24do5x44zj46","tag_id":"cjzdtojle00j924dos380cl9h","_id":"cjzdtojlh00ji24dou2ndtbet"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojlj00jk24doltcgmlrx","_id":"cjzdtojlm00jp24do0mins6cl"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojlj00jl24doskfmr4fe","_id":"cjzdtojlm00jq24do3w19cvwc"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojlk00jm24dolrse6kgj","_id":"cjzdtojln00jr24do2ef1hb7f"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojhu00cf24dodgd3bkf1","_id":"cjzdtojln00js24dobtfmbtf7"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojf0003m24doo8xwarlm","_id":"cjzdtojln00jt24do5v6thyip"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojll00jn24do2nqv5ibb","_id":"cjzdtojln00ju24do98c4ckwl"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojll00jo24dofdkfaa6l","_id":"cjzdtojln00jv24dot8zqinl1"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojeg003224do3604ohbq","_id":"cjzdtojln00jw24dov57q4dh3"},{"post_id":"cjzdtojlh00jj24dojtmb5y0o","tag_id":"cjzdtojf8004424dovuyrquoe","_id":"cjzdtojln00jx24dob93ikzgs"}],"Tag":[{"name":"docker","_id":"cjzdtojcb000224do25q6x287"},{"name":"alpine","_id":"cjzdtojci000724do3pr06rk6"},{"name":"alpine-mirror","_id":"cjzdtojcn000b24do4fln3neq"},{"name":"linux","_id":"cjzdtojcs000g24doiva1ga1g"},{"name":"ansible","_id":"cjzdtojcy000p24dofprrj9b8"},{"name":"运维","_id":"cjzdtojd2000w24do0rllyssb"},{"name":"python","_id":"cjzdtojd6001124doadc3vtcd"},{"name":"CDH","_id":"cjzdtojda001724do5dfpjppw"},{"name":"hadoop","_id":"cjzdtojde001f24dovnmklhgu"},{"name":"大数据","_id":"cjzdtojdk001p24donkyfg4mh"},{"name":"csv","_id":"cjzdtojdr002124do53in5yjo"},{"name":"数据分析","_id":"cjzdtojdu002724dombbmwnk9"},{"name":"数据处理","_id":"cjzdtojdx002d24dohmwib5s5"},{"name":"k8s","_id":"cjzdtojeg003224do3604ohbq"},{"name":"云原生","_id":"cjzdtojel003a24doscb21vgh"},{"name":"devops","_id":"cjzdtojew003g24do0tqwmwuh"},{"name":"微服务","_id":"cjzdtojf0003m24doo8xwarlm"},{"name":"容器","_id":"cjzdtojf4003t24do6oyuxjdp"},{"name":"jrebel","_id":"cjzdtojf5003w24dov94kyxa7"},{"name":"telepresence","_id":"cjzdtojf6003y24dol11q9agn"},{"name":"kubernetes","_id":"cjzdtojf8004424dovuyrquoe"},{"name":"alibaba","_id":"cjzdtojf9004724do0zf5tl0m"},{"name":"Dragonfly","_id":"cjzdtojfa004b24dou3kllkwn"},{"name":"elk","_id":"cjzdtojfd004e24do2txegg3i"},{"name":"elkstasck","_id":"cjzdtojfe004h24doprzwdyag"},{"name":"ElastAlert","_id":"cjzdtojfe004l24do9f6y13f1"},{"name":"curator","_id":"cjzdtojfh004w24do4k17071q"},{"name":"elkstack","_id":"cjzdtojfj005024dozr96xvpn"},{"name":"beats","_id":"cjzdtojfj005224do6h4upcn5"},{"name":"es","_id":"cjzdtojfm005924dolhsp5nfe"},{"name":"elasticsearch","_id":"cjzdtojfn005c24do568mn5le"},{"name":"oozie","_id":"cjzdtojfr005k24do9cknvk6g"},{"name":"streamsets","_id":"cjzdtojfs005l24donwa474m8"},{"name":"sdc","_id":"cjzdtojft005o24do6y0lzpxv"},{"name":"mysql","_id":"cjzdtojft005q24docm1stsmj"},{"name":"binlog","_id":"cjzdtojfu005r24dou4e35j4u"},{"name":"etl","_id":"cjzdtojfu005s24dobm4rjvyg"},{"name":"github","_id":"cjzdtojfv005v24doi0z07j2t"},{"name":"maven","_id":"cjzdtojfw005y24doxp4invsr"},{"name":"central","_id":"cjzdtojfx006124do0sre88t3"},{"name":"mvn-deploy","_id":"cjzdtojfy006424do1k60x3ew"},{"name":"rancher","_id":"cjzdtojg0006c24dovkcqajij"},{"name":"gcr.io","_id":"cjzdtojg1006d24dokphruatg"},{"name":"gitlab","_id":"cjzdtojg1006e24doj04937dc"},{"name":"docker-compose","_id":"cjzdtojg2006h24dou6judrpb"},{"name":"hdfs","_id":"cjzdtojg4006p24dohpatk3k7"},{"name":"datanode","_id":"cjzdtojg6006q24dorkp51v8l"},{"name":"blog","_id":"cjzdtojg6006r24dop4fltac7"},{"name":"hexo","_id":"cjzdtojg7006u24dohdm0rfbb"},{"name":"ifttt","_id":"cjzdtojg9007024doqjl50iew"},{"name":"java","_id":"cjzdtojga007224do0c2tufhd"},{"name":"jdk8","_id":"cjzdtojga007524dob7hmuzn5"},{"name":"反编译","_id":"cjzdtojgb007624dov9lo4p51"},{"name":"Kettle","_id":"cjzdtojgc007a24dokgmeisev"},{"name":"ETL","_id":"cjzdtojgd007d24do9en818p8"},{"name":"PDI","_id":"cjzdtojgd007e24doj2a439p5"},{"name":"pentaho","_id":"cjzdtojgd007f24do9t1kigin"},{"name":"KYLIN","_id":"cjzdtojgd007g24dokpunpxtq"},{"name":"OLAP","_id":"cjzdtojge007j24do2aq9fssm"},{"name":"麒麟","_id":"cjzdtojgf007m24do6m6roip1"},{"name":"Excel","_id":"cjzdtojgf007n24do1ij1xclp"},{"name":"PowerBI","_id":"cjzdtojgf007o24doiygq97wb"},{"name":"排雷","_id":"cjzdtojgg007s24dolra3w0tb"},{"name":"磁盘","_id":"cjzdtojgh007v24doejp3vixy"},{"name":"ncdu","_id":"cjzdtojgi007y24do7omuyj74"},{"name":"nginx","_id":"cjzdtojgj008124dolri3lrfd"},{"name":"logstash","_id":"cjzdtojgl008424do58iv7toi"},{"name":"opencv","_id":"cjzdtojgo008e24do4hceac1y"},{"name":"ipython","_id":"cjzdtojgp008h24doc40frjr4"},{"name":"jupyter","_id":"cjzdtojgp008j24donpqtmmwz"},{"name":"openresty","_id":"cjzdtojgq008n24doz0ath3kr"},{"name":"maxminddb","_id":"cjzdtojgr008p24do9emo76b8"},{"name":"maxmind","_id":"cjzdtojgr008q24dohf1qkqxy"},{"name":"ipip","_id":"cjzdtojgs008r24dobmqblkar"},{"name":"redis","_id":"cjzdtojgt008v24dobb11kmcz"},{"name":"lua","_id":"cjzdtojgt008y24dopfe943c4"},{"name":"lua-resty-redis","_id":"cjzdtojgu009124dovsdd066l"},{"name":"rancher2","_id":"cjzdtojh1009n24dozuw2x3ge"},{"name":"集群","_id":"cjzdtojh1009o24dowf3yt87x"},{"name":"翻译","_id":"cjzdtojh1009p24domc196tgr"},{"name":"scrapy","_id":"cjzdtojh3009t24dogmea6b9u"},{"name":"proxy","_id":"cjzdtojh3009w24do244xdr09"},{"name":"spring boot","_id":"cjzdtojh800a924do1c4zpz1s"},{"name":"spring cloud","_id":"cjzdtojh900ac24do13sjcnwm"},{"name":"sentinel","_id":"cjzdtojha00af24do9vph77rn"},{"name":"hystrix","_id":"cjzdtojha00ai24don3huo3yf"},{"name":"熔断","_id":"cjzdtojhb00al24dou0mwi5wk"},{"name":"synergy","_id":"cjzdtojhc00am24doit1e5kzs"},{"name":"sentry","_id":"cjzdtojhc00ap24domt7njjhj"},{"name":"日志","_id":"cjzdtojhd00as24do2cqxtibh"},{"name":"stap","_id":"cjzdtojhf00ay24dou51qncdq"},{"name":"systemtap","_id":"cjzdtojhh00b124do0qwzns4h"},{"name":"flame-graph","_id":"cjzdtojhh00b224domhe7mmt3"},{"name":"pxe","_id":"cjzdtojhh00b324do726n3wbf"},{"name":"dhcp","_id":"cjzdtojhi00b624do5ktpp2p9"},{"name":"cloudboot","_id":"cjzdtojhj00b924do96y4z0c9"},{"name":"ubuntu","_id":"cjzdtojhj00ba24do84yb12tx"},{"name":"preseed","_id":"cjzdtojhj00bb24dolt7uy8ue"},{"name":"虚拟机","_id":"cjzdtojhk00bc24douzqj3kng"},{"name":"kvm","_id":"cjzdtojhk00bf24dohxn0wsnv"},{"name":"vagrant","_id":"cjzdtojhl00bi24do6qaapdmz"},{"name":"virtualbox","_id":"cjzdtojhm00bk24dopsq9ytd3"},{"name":"云计算","_id":"cjzdtojhm00bl24doyovyqkxp"},{"name":"虚拟化","_id":"cjzdtojhn00bo24doo1q09sks"},{"name":"企业级虚拟化","_id":"cjzdtojhn00br24do1glz6bfc"},{"name":"私有云","_id":"cjzdtojho00bt24dog16t4mb1"},{"name":"anaconda","_id":"cjzdtojho00bu24dovgb0sg7g"},{"name":"AI","_id":"cjzdtojhp00bx24doh6bxvd4c"},{"name":"Tensorflow","_id":"cjzdtojhq00c024doj488y95v"},{"name":"Keras","_id":"cjzdtojhq00c124do63zp4m0w"},{"name":"xshell","_id":"cjzdtojhq00c224do930thc79"},{"name":"xshell5","_id":"cjzdtojhr00c524dovibvnurq"},{"name":"xrebel","_id":"cjzdtojht00cb24doznmjuhuf"},{"name":"micro-service","_id":"cjzdtojhu00ce24doncl0unpu"},{"name":"spring-cloud","_id":"cjzdtojhu00cf24dodgd3bkf1"},{"name":"zsh","_id":"cjzdtojhu00cg24doyiqtg63w"},{"name":"oh-my-zsh","_id":"cjzdtojhw00cm24domyrl2o32"},{"name":"windows","_id":"cjzdtojid00cs24dok8o3z07b"},{"name":"ansible-playbook","_id":"cjzdtojij00d024dogeozirv3"},{"name":"spark","_id":"cjzdtojio00d724doydpnb2yr"},{"name":"cdh","_id":"cjzdtojiv00de24doqdx9odq7"},{"name":"hdp","_id":"cjzdtojj100dm24dotpat8wtf"},{"name":"StreamSets","_id":"cjzdtojj600du24dooyc8zzki"},{"name":"SDC","_id":"cjzdtojjc00e324dooxdknvpe"},{"name":"hot-warm","_id":"cjzdtojjg00ea24doxle6aubu"},{"name":"oss","_id":"cjzdtojjh00ef24dou787llem"},{"name":"backup","_id":"cjzdtojjj00ek24dohwopwpyv"},{"name":"google-jib","_id":"cjzdtojjk00en24do9swp6tzs"},{"name":"jib","_id":"cjzdtojjl00eq24do3q62l3vc"},{"name":"arthas","_id":"cjzdtojjm00eu24do4cguahd8"},{"name":"jvm","_id":"cjzdtojjn00ex24downn2hhn1"},{"name":"jumpserver","_id":"cjzdtojjo00f024dodp99wt9u"},{"name":"堡垒机","_id":"cjzdtojjp00f324doik0zcg3i"},{"name":"ssl","_id":"cjzdtojjq00f724do24npl8ca"},{"name":"https","_id":"cjzdtojjr00fa24dopvgldcmq"},{"name":"http2","_id":"cjzdtojjr00fd24dodepdvn87"},{"name":"lets-encrypt","_id":"cjzdtojjs00fg24dol5xofs3v"},{"name":"acme","_id":"cjzdtojjt00fk24doxm2ejwm8"},{"name":"acme-sh","_id":"cjzdtojjt00fn24do1snnqvca"},{"name":"数据库","_id":"cjzdtojju00fq24do2d7fbtuc"},{"name":"clickhouse","_id":"cjzdtojjv00ft24dogdgf3z9c"},{"name":"owncloud","_id":"cjzdtojjw00fx24doecuut50n"},{"name":"数据可视化","_id":"cjzdtojjx00g024doszha7p0j"},{"name":"Superset","_id":"cjzdtojjx00g324do7f7cel1s"},{"name":"redash","_id":"cjzdtojjy00g624do94zdt3p2"},{"name":"rke","_id":"cjzdtojjz00ga24do41ao53f7"},{"name":"springmvc","_id":"cjzdtojk000gd24dobayu9xmh"},{"name":"logback","_id":"cjzdtojk100gg24do9j2viv2g"},{"name":"log4j","_id":"cjzdtojk100gj24do292mog2p"},{"name":"log","_id":"cjzdtojk200gn24dog1ygx9os"},{"name":"Heartbeat","_id":"cjzdtojke00h824dowqielbls"},{"name":"hystrixcommand","_id":"cjzdtojkk00hd24doks3p1mps"},{"name":"hystrix-command","_id":"cjzdtojkm00hh24do6majyn7b"},{"name":"hystrix-command-dynamic","_id":"cjzdtojkn00hl24dordx53ivw"},{"name":"waf","_id":"cjzdtojkr00hv24do44o89z0l"},{"name":"firewall","_id":"cjzdtojks00hy24dowo7spg89"},{"name":"前端","_id":"cjzdtojks00i124doa7b6mvq8"},{"name":"vuejs","_id":"cjzdtojkt00i424dotzrna7y9"},{"name":"matomo","_id":"cjzdtojku00i824doo0pcfcpm"},{"name":"网站分析","_id":"cjzdtojku00i924do15gdl7fd"},{"name":"database","_id":"cjzdtojkv00ia24dokeguq590"},{"name":"tidb","_id":"cjzdtojkx00id24do5zve8v3p"},{"name":"tikv","_id":"cjzdtojky00ig24dob1rdr54c"},{"name":"dba","_id":"cjzdtojkz00ij24dop4bmyh2k"},{"name":"cobbler","_id":"cjzdtojl700it24dox3b5iu9x"},{"name":"centos","_id":"cjzdtojl800iw24dodir1rvwt"},{"name":"tftp","_id":"cjzdtojl800ix24do5exoct7y"},{"name":"win10","_id":"cjzdtojle00j724docoqxt7ld"},{"name":"server-2019","_id":"cjzdtojle00j924dos380cl9h"},{"name":"jhipster","_id":"cjzdtojlj00jk24doltcgmlrx"},{"name":"spring","_id":"cjzdtojlj00jl24doskfmr4fe"},{"name":"spring-boot","_id":"cjzdtojlk00jm24dolrse6kgj"},{"name":"microservices","_id":"cjzdtojll00jn24do2nqv5ibb"},{"name":"service-mesh","_id":"cjzdtojll00jo24dofdkfaa6l"}]}}