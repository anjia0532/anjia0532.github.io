{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1496316990000},{"_id":"themes/material/.gitignore","hash":"0e2700b8bcca0c252b8bcac0aea92a806a009986","modified":1496316990000},{"_id":"themes/material/.travis.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1496316990000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1496316990000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1496316990000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1496316990000},{"_id":"themes/material/README.md","hash":"cc7b80f6bce7b910a7ba641abac1ade1311705f8","modified":1496316990000},{"_id":"themes/material/_config.template.yml","hash":"3e9eb8083c0188dbab50ce3ebccf9fb2a504d8fb","modified":1496316990000},{"_id":"themes/material/_config.yml","hash":"2b2f72627b0e45139ea39d5cac9dc2443c7d1354","modified":1498727171320},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1496316990000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1496316990000},{"_id":"themes/material/package.json","hash":"6b63bbc7e3c8532359dd2a80328f51f4e97474b9","modified":1496316990000},{"_id":"source/_posts/elastalert-wechat-plugin.md","hash":"cb1dd12308ea37a17bba7020048f981500a7e3bc","modified":1487238099566},{"_id":"source/_posts/elasticsearch-delete-indices-by-date.md","hash":"39946d54c43b4b14d497c9f25d59b87c2125e96a","modified":1491459217067},{"_id":"source/_posts/elasticsearch-elastalert.md","hash":"52dd6034e594f32ae711a02f5ea69b2044217aa0","modified":1487053945097},{"_id":"source/_posts/elk-stack-beats.md","hash":"5a4d07cc1ea441ecdf4ef2807745557e2b69e354","modified":1488452261760},{"_id":"source/_posts/heartbeat.md","hash":"dcfd28a48322e3d542d41774c524ae6adb9e407b","modified":1488520704584},{"_id":"source/_posts/hexo-github-pages-blog.md","hash":"fb72ec300e8e1e342b6b5da830641d78ec2c146e","modified":1486563374903},{"_id":"source/_posts/jdk-zip.md","hash":"29f0288a65db890c3b3b29e16c7e66ae8da5703a","modified":1494998277917},{"_id":"source/_posts/nginx-logging-request-body-as-hexidecimal.md","hash":"6bc3a9f1811d64f3f58608c03582c3a6aff0dcd4","modified":1498014465271},{"_id":"source/_posts/nginx-regex-test-way.md","hash":"fbdbf717b0603f2b30114692ec71ec5ae44dfc19","modified":1498724310569},{"_id":"source/_posts/owncloud.md","hash":"8ad803964c8db8c5b32020e8a0913493a30ba49d","modified":1491840161477},{"_id":"source/_posts/springmvc-log4j-to-logback.md","hash":"ddecc48e838432ee6438e941470cc29b732ad468","modified":1488348125838},{"_id":"source/_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","hash":"084589f785c2899c0ef09486edcf6c308a58b531","modified":1487035162744},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1496316990000},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1496316990000},{"_id":"themes/material/languages/ar.yml","hash":"b8ffe10584fe49ed0218e57b27140b134e3022f8","modified":1496316990000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1496316990000},{"_id":"themes/material/languages/en.yml","hash":"2d538f5b71b2837b75bdcb686f1431a48dcb6eda","modified":1496316990000},{"_id":"themes/material/languages/es.yml","hash":"aaf23ea448489ec01f7c6228e3bf4833e062ec34","modified":1496316990000},{"_id":"themes/material/languages/fr.yml","hash":"66a966e8a9a60bfe00829b20c1f5e26cd6390f73","modified":1496316990000},{"_id":"themes/material/languages/ja.yml","hash":"af5466576ce9f6cac8529feb57ac8ba5401a318f","modified":1496316990000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1496316990000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1496316990000},{"_id":"themes/material/languages/zh-CN.yml","hash":"563671897a5d4d04ddc2f4b8a45e8f2c366a77b9","modified":1496316990000},{"_id":"themes/material/languages/zh-TW.yml","hash":"516b74e942f849e716098d111c7c3a9f4847cb0a","modified":1496316990000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1496316990000},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1496316990000},{"_id":"themes/material/layout/post.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1496316990000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1496316990000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496316990000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496316990000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"9c6e728a736eaba7edbcaf6862e5dcef8edd2a9e","modified":1496316990000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"31095a56feaf04a710e8302ccb18e2d4d10b97ba","modified":1496316990000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1496316990000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1496316990000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"ae949e16cbd20d895ba3c0b64f3992bf28d81e06","modified":1496316990000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1496316990000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"1b1a18b49674d2e78672a69c6ced6ff35f1b63e9","modified":1496316990000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1496316990000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"9956cc20b84b67334dcc80a5d4396f9064d4a804","modified":1496316990000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"f564ba4b36363882154870558091383887fffdf8","modified":1496316990000},{"_id":"themes/material/layout/_partial/config_footer.ejs","hash":"bd520f4e8a381494c78e3c00905c80a9cd807f97","modified":1496316990000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1496316990000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"c17e2da7d6cb0e4104fc64a541f4c81f4abed095","modified":1496316990000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1496316990000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"75ecc32a258857424c48a2ebb0b5b9f3b30614a5","modified":1496316990000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1496316990000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"16a4bc65e631f5d21e7fd204f457adc86ea2af26","modified":1496316990000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"88c604ae4f70ccf24289bc967f18ada697013304","modified":1496316990000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1496316990000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1496316990000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1496316990000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1496316990000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"b6e5af993245a2e3caa6eb66009503ec52c82f5b","modified":1496316990000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1496316990000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1496316990000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"44aba38692abc609f28b55bff81362a1c03ce36c","modified":1496316990000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1496316990000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1496316990000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1496316990000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"f3ed6673a774cd5a27c94dfe174e8f7344f4ebbe","modified":1496316990000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"1c0773c3b2cf33aad0e0373540e11540e5137c75","modified":1496316990000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1496316990000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1496316990000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1496316990000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"843818bffeaebe5e3fa07c90d260bb912555cb3b","modified":1496316990000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"f03bc95a0c9b4905413b8fdfefc1af463b51e828","modified":1496316990000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"52fcfe5b70c25378e48bb67daf85d952b32d34b2","modified":1496316990000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1496316990000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1496316990000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1496316990000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"ab544bc337a48bdd30f9cb146db6a287bb36a10f","modified":1496316990000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1496316990000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1496316990000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1496316990000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1496316990000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1496316990000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1496316990000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496316990000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1496316990000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1496316990000},{"_id":"themes/material/source/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1496316990000},{"_id":"themes/material/source/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1496316990000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1496316990000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"c52bbfe62863cd141925747b2575a6a6858444d1","modified":1496316990000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1496316990000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1496316990000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"c604f337d219bccf3f315e984cf12a6658dbd7a2","modified":1496316990000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1496316990000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1496316990000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1496316990000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1496316990000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1496316990000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1496316990000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1496316990000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1496316990000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1496316990000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1496316990000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1496316990000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1496316990000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1496316990000},{"_id":"themes/material/source/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1496316990000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1496316990000},{"_id":"themes/material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1496316990000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1496316990000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1496316990000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1496316990000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1496316990000},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1496316990000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1496316990000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496316990000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496316990000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1496316990000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1496316990000},{"_id":"themes/material/source/js/js.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1496316990000},{"_id":"themes/material/source/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1496316990000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"8bff3b1bd066eef693319b82400c353b2d6736e7","modified":1496316990000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"c24af97754140f221d20323a3e5aac9dd02889d4","modified":1496316990000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"61a891acb13e71289f360c91cb27fb88f81848ec","modified":1496316990000},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1496316990000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496316990000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1496316990000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496316990000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1496316990000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1496316990000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1496316990000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1496316990000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1496316990000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1496316990000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1496316990000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1496316990000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1496316990000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1496316990000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1496316990000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1496316990000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1496316990000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1496316990000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1496316990000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1496316990000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1496316990000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1496316990000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1496316990000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1496316990000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1496316990000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1496316990000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1496316990000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1496316990000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/163gentie/common.ejs","hash":"ac56d01746ef2f72d54bff4b61e0ca0089c5c164","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/163gentie/enter.ejs","hash":"6e057829fa926cc02e3e2ebfdee7c244a9b31dd7","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"fa89d225dafa4a6b0f6be6fe395ada0be172c4ae","modified":1496316990000},{"_id":"themes/material/layout/_widget/comment/163gentie/main.ejs","hash":"e84afb44929f4dab8cf279b958d472955bc5f034","modified":1496316990000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496316990000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1496316990000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1496316990000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1496316990000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1496316990000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1496316990000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1496316990000},{"_id":"public/atom.xml","hash":"95709a065d589715a0fe0276b0f49aa0802a9aa1","modified":1498726870715},{"_id":"public/content.json","hash":"5439124d99005ab995be3f6129d0174b1311f55a","modified":1498726871369},{"_id":"public/2017/06/29/nginx-regex-test-way/index.html","hash":"deb9bdfb7e74443886057fe7c511545ccec9cb04","modified":1498727188125},{"_id":"public/2017/06/21/nginx-logging-request-body-as-hexidecimal/index.html","hash":"fdb7ebe018965f8607a5845b78d820d46546ff2a","modified":1498727188125},{"_id":"public/2017/05/17/jdk-zip/index.html","hash":"b2074a97a40756b2e75f95e7cc3e9c6ea963d541","modified":1498727188126},{"_id":"public/2017/04/06/elasticsearch-delete-indices-by-date/index.html","hash":"4e056931f0fee004daa77e8e4864312975a1e249","modified":1498727188126},{"_id":"public/2017/04/05/owncloud/index.html","hash":"914e10ce4f2f037da925a397461d3cfb28598afc","modified":1498727188126},{"_id":"public/2017/03/03/heartbeat/index.html","hash":"9b7efcc4b375d8071d853502a8f9e42a9375e9af","modified":1498727188126},{"_id":"public/2017/03/02/elk-stack-beats/index.html","hash":"7db08ec4110d43c00d778fc9c8f85202e2057a1e","modified":1498727188127},{"_id":"public/2017/02/28/springmvc-log4j-to-logback/index.html","hash":"53d09407b3e3e2fe8119ff6dbdd71ea1932f42b1","modified":1498727188127},{"_id":"public/2017/02/16/elastalert-wechat-plugin/index.html","hash":"7ebf1bc60c1037b5aef1055dc7871c8cc7dfeceb","modified":1498727188127},{"_id":"public/2017/02/14/elasticsearch-elastalert/index.html","hash":"64d8f91382f3b4cac0e7e4cfef92b335895c83e4","modified":1498727188127},{"_id":"public/2017/02/08/share-mouse-and-keyboard-with-your-windows-linux-machines-md/index.html","hash":"f652037ace59c6cd9056e8b3dae5b19007bb6aab","modified":1498727188127},{"_id":"public/2017/02/03/hexo-github-pages-blog/index.html","hash":"ce028025971d5d6cd78a9b77b9ceb91d88d3ca19","modified":1498727188128},{"_id":"public/archives/index.html","hash":"feb78566038fae986697b52325bd79ad55b0691a","modified":1498727188128},{"_id":"public/archives/page/2/index.html","hash":"830cb5af7dd23ea7c42d155f67304f3de5973f65","modified":1498727188128},{"_id":"public/archives/2017/index.html","hash":"f9f161d13d031684b73b302a82dbfaa7dc0315cf","modified":1498727188128},{"_id":"public/archives/2017/page/2/index.html","hash":"9d57ed041abf012a0cd99ffc025512efb380c568","modified":1498727188128},{"_id":"public/archives/2017/02/index.html","hash":"295f27357ddfa32e73f0652d9666c7e141bd5635","modified":1498727188128},{"_id":"public/archives/2017/03/index.html","hash":"ab09ce9872b95dfee03ea20f307aa90b68f1f197","modified":1498727188128},{"_id":"public/archives/2017/04/index.html","hash":"c9bd032ba0f0cfd6a3b34423eeb2add1ab580807","modified":1498727188128},{"_id":"public/archives/2017/05/index.html","hash":"9afce9faaf896582348545ee6eb73b0b00fa7a56","modified":1498727188128},{"_id":"public/archives/2017/06/index.html","hash":"95cdb8e689c49ecfc981bffbca5562192a33914c","modified":1498727188129},{"_id":"public/categories/elkstasck/index.html","hash":"1de1b5a84bca743c10e06de31b8d159c472fa226","modified":1498727188129},{"_id":"public/categories/编程/index.html","hash":"424a9ea8aed43230bf92d382f4a713c974048b42","modified":1498727188129},{"_id":"public/categories/nginx/index.html","hash":"89c6d3165fef7925360eabdef5cc434a382e00c4","modified":1498727188129},{"_id":"public/categories/owncloud/index.html","hash":"6e020cd3376fe444461f9569b1120149b18f3fb2","modified":1498727188129},{"_id":"public/categories/工具/index.html","hash":"ac680a9ffa9add8ebfe062a115b983c03d1bbe75","modified":1498727188129},{"_id":"public/index.html","hash":"7847721b5cc53a9a1b4c39902664ff6c7b4beb6c","modified":1498727188129},{"_id":"public/page/2/index.html","hash":"a6982457de753e2616ac30d844c0518f41181823","modified":1498727188129},{"_id":"public/tags/elk/index.html","hash":"be1bf0e74ee8d1c22f86741bb204e1ffad4601a5","modified":1498727188129},{"_id":"public/tags/elkstasck/index.html","hash":"49cf562dad89ab0598b88b001c32d55f900a35f0","modified":1498727188129},{"_id":"public/tags/ElastAlert/index.html","hash":"d3f5ae52427bc97c258e18430b85ce03e846b7d3","modified":1498727188129},{"_id":"public/tags/curator/index.html","hash":"ee094bab416004e90747242e1ef09cf5a642bc06","modified":1498727188129},{"_id":"public/tags/elkstack/index.html","hash":"27203541045c936780d4ce0364f990be89763e17","modified":1498727188129},{"_id":"public/tags/beats/index.html","hash":"f5328b5bc563fe9be8deda3fccb851cbd413f973","modified":1498727188129},{"_id":"public/tags/Heartbeat/index.html","hash":"500a26e46cdd1f80b93a035411e0675d73ed6cd5","modified":1498727188129},{"_id":"public/tags/blog/index.html","hash":"72e70bb1e9a1831337fd26b6d455bb8a7c2a2b04","modified":1498727188129},{"_id":"public/tags/hexo/index.html","hash":"3f6ca37c92f6624f7ceb0a71263d64d05382b5d6","modified":1498727188130},{"_id":"public/tags/java/index.html","hash":"26af6e12f7b615a7c1b6487b09d402b5e2be457a","modified":1498727188130},{"_id":"public/tags/nginx/index.html","hash":"b9a4a5f3ffb8d4633f9cb0e383431b534beebb99","modified":1498727188130},{"_id":"public/tags/logstash/index.html","hash":"e3cc119cfe31444f5327f75bcc8ae385a27db83f","modified":1498727188130},{"_id":"public/tags/owncloud/index.html","hash":"7c986e951c9e9b9730aeb499c0b0c5ce9aef829d","modified":1498727188130},{"_id":"public/tags/synergy/index.html","hash":"aca8fbfafbd31b457873551d701fa483e6b8f22c","modified":1498727188130},{"_id":"public/tags/springmvc/index.html","hash":"57aa359b94de5d4108ea4e2f0503d998a4ec73ed","modified":1498727188130},{"_id":"public/tags/logback/index.html","hash":"2c34b9924f6bebcf490ce2590053fe4fa9c08355","modified":1498727188130},{"_id":"public/tags/log4j/index.html","hash":"a9800c418409d2df6d1d602228b115c3a6304dc1","modified":1498727188130},{"_id":"public/tags/log/index.html","hash":"60b3bc73fb65421337228a28b046852bf8d29221","modified":1498727188130},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1498726871423},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1498726871423},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1498726871423},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1498726871423},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1498726871423},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1498726871423},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1498726871423},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1498726871423},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1498726871423},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1498726871423},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1498726871423},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1498726871423},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1498726871423},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1498726871423},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1498726871423},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1498726871423},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1498726871424},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1498726871424},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1498726871424},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1498726871424},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1498726871424},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1498726871424},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1498726871424},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1498726871424},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1498726871424},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1498726871424},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1498726871425},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1498726871425},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1498726871425},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1498726871425},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1498726871425},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1498726871425},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1498726871440},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498726871444},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498726871446},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1498726871446},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1498726871446},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1498726871446},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1498726871446},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1498726871446},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1498726871446},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1498726871446},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1498726871446},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1498726871446},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1498726871447},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1498726871447},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1498726871456},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1498726871456},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1498726871456},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1498726871456},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1498726871456},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1498726871456},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1498726871456},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1498726871456},{"_id":"public/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1498726871456},{"_id":"public/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1498726871456},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1498726871456},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1498726871456},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1498726871457},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1498726871457},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1498726871457},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1498726871457},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1498726871457},{"_id":"public/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1498726871457},{"_id":"public/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1498726871457},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1498726871457},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1498726871457},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1498726871457},{"_id":"public/js/js.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1498726871457},{"_id":"public/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1498726871457},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1498726871457},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1498726871457},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498726871457},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1498726871457},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498726871457},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498726871458},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1498726871510},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1498726871521},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1498726871521},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1498726871521},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1498726871521},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1498726871522},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1498726871522}],"Category":[{"name":"elkstasck","_id":"cj4i7a5ux0002hgdoz66kvot2"},{"name":"编程","_id":"cj4i7a5vi000ihgdo3qbh1wdp"},{"name":"nginx","_id":"cj4i7a5vo000phgdoflpd1k9c"},{"name":"owncloud","_id":"cj4i7a5vu000yhgdoior5f5sz"},{"name":"工具","_id":"cj4i7a5vv0014hgdoc2eoabs3"}],"Data":[],"Page":[],"Post":[{"title":"elastalert微信报警","date":"2017-02-16T08:27:53.000Z","_content":"\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.16/test\"  -d '{\n\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",\n\"field\": \"value\"\n}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","source":"_posts/elastalert-wechat-plugin.md","raw":"---\ntitle: elastalert微信报警\ndate: 2017-02-16 16:27:53\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\n针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)\n\n<!-- more -->\n\n## 简介\nElastAlert支持以下方式报警\n\n* Command\n* Email\n* JIRA\n* OpsGenie\n* SNS\n* HipChat\n* Slack\n* Telegram\n* Debug\n* Stomp\n\nEmail 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件\n\n使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）\n\n详细分析 参见 [为何使用微信企业号团队号][为何使用微信企业号团队号]\n\n## ElastAlert Python 插件\n\n### 准备工作\n1. Elasticsearch 5.2.0\n2. ElastAlert 0.1.8\n\n### 步骤\n\n具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 [ElastAlert 基于Elasticsearch的监控告警](https://anjia.ml/2017/02/14/elasticsearch-elastalert/)\n\n```bash\n$ cd ~/\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ cd elastalert\n\n$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py\n\n$ touch ~/elastalert/elastalert_modules/__init__.py\n\n$ cp  config.yaml.example config.yaml\n\n$ vi example_rules/example_frequency.yaml\n```\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\n\ntype: frequency\n\nindex: logstash-*\n\nnum_events: 1\n\ntimeframe:\n    minutes: 1\n\nfilter:\n- term:\n    _type: \"test\"\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xx\n#设置微信企业号的Secret\nsecret: xx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xx\n#部门id\nparty_id: xx\n#用户微信号\nuser_id: xx\n# 标签id\ntag_id: xx\n```\n\n\n```bash\n$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml\n\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.16/test\"  -d '{\n\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",\n\"field\": \"value\"\n}'\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits\n{u'errcode': 0, u'errmsg': u'ok'}\nINFO:elastalert:发送消息给 xxx\nINFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 57 seconds\n```\n\n![elastalert-wechat-plugin](https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png)\n\n部分代码参考 [python与shell通过微信企业号发送消息][python-shell-wechat]\n\n## ElastAlert Command之java版\n\n### 准备工作\n1. [申请企业号][weixin-qiye] 具体自行百度\n2. [安装Git][git]\n3. [Java 1.8+][jdk]\n4. [Maven][maven]\n\n### 步骤\n\n参见我的项目 [anjia0532/weixin-qiye-alert][weixin-qiye-alert]\n\n[python-shell-wechat]: http://www.cnblogs.com/caoguo/p/5668653.html\n[为何使用微信企业号团队号]: https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\n[weixin-qiye]: https://qy.weixin.qq.com/\n[git]: https://git-scm.com/\n[jdk]: http://www.oracle.com/technetwork/java/javase/downloads/index.html\n[maven]: http://maven.apache.org/download.cgi\n[weixin-qiye-alert]: https://github.com/anjia0532/weixin-qiye-alert\n","slug":"elastalert-wechat-plugin","published":1,"updated":"2017-02-16T09:41:39.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5um0000hgdolwl05275","content":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\" target=\"_blank\" rel=\"external\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/</div><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</div><div class=\"line\"></div><div class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py</div><div class=\"line\"></div><div class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</div><div class=\"line\"></div><div class=\"line\">$ cp  config.yaml.example config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- term:</span></div><div class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#部门id</span></div><div class=\"line\"><span class=\"attr\">party_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#用户微信号</span></div><div class=\"line\"><span class=\"attr\">user_id:</span> xx</div><div class=\"line\"><span class=\"comment\"># 标签id</span></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.16/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</span></div><div class=\"line\">\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</div><div class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</div><div class=\"line\">INFO:elastalert:发送消息给 xxx</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\" target=\"_blank\" rel=\"external\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\" target=\"_blank\" rel=\"external\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"external\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\" target=\"_blank\" rel=\"external\">anjia0532/weixin-qiye-alert</a></p>\n","excerpt":"<p>针对国人微信使用率较高的情况，开发了三个ElastAlert微信插件(shell,python,java)</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ElastAlert支持以下方式报警</p>\n<ul>\n<li>Command</li>\n<li>Email</li>\n<li>JIRA</li>\n<li>OpsGenie</li>\n<li>SNS</li>\n<li>HipChat</li>\n<li>Slack</li>\n<li>Telegram</li>\n<li>Debug</li>\n<li>Stomp</li>\n</ul>\n<p>Email 优点是免费，可追溯(不手动删除情况下),配置方便。缺点是查看不及时(QQ邮箱除外，弹窗提示，我服)，阅读不方便，大部分人都是使用PC阅读邮件</p>\n<p>使用Command调用短信接口推送短信，成本高，信息少且单一，不及时（停机时，丢失信息）</p>\n<p>详细分析 参见 <a href=\"https://github.com/anjia0532/weixin-qiye-alert#为何使用微信企业号团队号\">为何使用微信企业号团队号</a></p>\n<h2 id=\"ElastAlert-Python-插件\"><a href=\"#ElastAlert-Python-插件\" class=\"headerlink\" title=\"ElastAlert Python 插件\"></a>ElastAlert Python 插件</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>Elasticsearch 5.2.0</li>\n<li>ElastAlert 0.1.8</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>具体ElastAlert安装以及使用Email报警，参见我写的另外一篇文章 <a href=\"https://anjia.ml/2017/02/14/elasticsearch-elastalert/\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/</div><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> elastalert</div><div class=\"line\"></div><div class=\"line\">$ wget -P ~/elastalert/elastalert_modules/ https://raw.githubusercontent.com/anjia0532/elastalert-wechat-plugin/master/wechat_qiye_alert.py</div><div class=\"line\"></div><div class=\"line\">$ touch ~/elastalert/elastalert_modules/__init__.py</div><div class=\"line\"></div><div class=\"line\">$ cp  config.yaml.example config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- term:</span></div><div class=\"line\"><span class=\"attr\">    _type:</span> <span class=\"string\">\"test\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#部门id</span></div><div class=\"line\"><span class=\"attr\">party_id:</span> xx</div><div class=\"line\"><span class=\"comment\">#用户微信号</span></div><div class=\"line\"><span class=\"attr\">user_id:</span> xx</div><div class=\"line\"><span class=\"comment\"># 标签id</span></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_rules/example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.16/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</div><div class=\"line\">\"@timestamp\": \"2017-02-16T17:23:00.000+08:00\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</span></div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-16 17:16 CST to 2017-02-16 17:25 CST: 1 / 1 hits</div><div class=\"line\">&#123;u<span class=\"string\">'errcode'</span>: 0, u<span class=\"string\">'errmsg'</span>: u<span class=\"string\">'ok'</span>&#125;</div><div class=\"line\">INFO:elastalert:发送消息给 xxx</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-16 16:31 CST to 2017-02-16 17:25 CST: 1 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 57 seconds</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/16/58a5712d54ddd.png\" alt=\"elastalert-wechat-plugin\"></p>\n<p>部分代码参考 <a href=\"http://www.cnblogs.com/caoguo/p/5668653.html\">python与shell通过微信企业号发送消息</a></p>\n<h2 id=\"ElastAlert-Command之java版\"><a href=\"#ElastAlert-Command之java版\" class=\"headerlink\" title=\"ElastAlert Command之java版\"></a>ElastAlert Command之java版</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><a href=\"https://qy.weixin.qq.com/\">申请企业号</a> 具体自行百度</li>\n<li><a href=\"https://git-scm.com/\">安装Git</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">Java 1.8+</a></li>\n<li><a href=\"http://maven.apache.org/download.cgi\">Maven</a></li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>参见我的项目 <a href=\"https://github.com/anjia0532/weixin-qiye-alert\">anjia0532/weixin-qiye-alert</a></p>"},{"title":"elasticsearch按照日期定时删除索引","date":"2017-04-06T06:10:47.000Z","_content":"\n使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。\n\n<!-- more -->\n\n### 使用官网_delete_by_query进行删除\n[官网文档--Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html)\n\n```bash\ncurl -u 用户名:密码  -H'Content-Type:application/json' -d'{\n    \"query\": {\n        \"range\": {\n            \"@timestamp\": {\n                \"lt\": \"now-7d\",\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"\n```\n\n**解释**\n\n`-u`是格式为`userName:password`，使用`Basic Auth`进行登录。如果`elasticsearch`没有使用类似`x-pack`进行安全登录，则不需要加`-u参数`\n\n`-H`是指定文档类型是json格式\n\n`-XPOST`是指定用`POST`方式请求\n\n`-d`是指定`body`内容\n\n```javascript\n{\n    \"query\": {\n        \"range\": { //范围\n            \"@timestamp\": {//时间字段\n                \"lt\": \"now-7d\",//lt是小于(<)，lte是小于等于(<=),gt是大于(>),gte是大于等于(>=),now-7d是当前时间减7天\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n```\n\n定时删除\n```bash\n$ crontab -e\n\n* 0 * * * /usr/bin/curl -u username:password  -H'Content-Type:application/json' -d'{\"query\":{\"range\":{\"@timestamp\":{\"lt\":\"now-7d\",\"format\":\"epoch_millis\"}}}}' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\" > /tmp/elk_clean.txt\n```\n\n每天0点删除超过7天的无效索引\n\n优点：\n\n- 不依赖第三方插件或者代码\n\n- 简单易理解\n\n- 不需要指定索引名称可用`*`通配符删除\n\n缺点：\n- 效率低\n\n### 使用sh脚本删除\n在stackoverflow看到一个帖子 [Removing old indices in elasticsearch#answer-39746705](http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705)\n```bash\n#!/bin/bash\nsearchIndex=logstash-monitor\nelastic_url=logging.core.k94.kvk.nl\nelastic_port=9200\n\ndate2stamp () {\n    date --utc --date \"$1\" +%s\n}\n\ndateDiff (){\n    case $1 in\n        -s)   sec=1;      shift;;\n        -m)   sec=60;     shift;;\n        -h)   sec=3600;   shift;;\n        -d)   sec=86400;  shift;;\n        *)    sec=86400;;\n    esac\n    dte1=$(date2stamp $1)\n    dte2=$(date2stamp $2)\n    diffSec=$((dte2-dte1))\n    if ((diffSec < 0)); then abs=-1; else abs=1; fi\n    echo $((diffSec/sec*abs))\n}\n\nfor index in $(curl -s \"${elastic_url}:${elastic_port}/_cat/indices?v\" |     grep -E \" ${searchIndex}-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\" | awk '{     print $3 }'); do\n  date=$(echo ${index: -10} | sed 's/\\./-/g')\n  cond=$(date +%Y-%m-%d)\n  diff=$(dateDiff -d $date $cond)\n  echo -n \"${index} (${diff})\"\n  if [ $diff -gt 1 ]; then\n    echo \" / DELETE\"\n    # curl -XDELETE \"${elastic_url}:${elastic_port}/${index}?pretty\"\n  else\n    echo \"\"\n  fi\ndone    \n```\n使用了 `_cat/indices`api。\n\n### 使用 curator\n\n支持windows[zip](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html),[msi](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html),和linux[apt](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html),[yum](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html)\n\n[Curator Reference](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html) [github-curator](https://github.com/elastic/curator)\n\n#### 安装\n[安装](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html)\n\n#### 配置\n\n参考 http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\n\n1.config文件\n\n```yaml\n---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    * 127.0.0.1\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth: username:password\n  timeout:\n  master_only: True\n\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  #blacklist: ['elasticsearch', 'urllib3']\n```\n\n2.action文件\n\n```yaml\n---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 7 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    * filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    * filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7\n      exclude:\n```\n\n这里是用`index-'%Y.%m.%d'`进行匹配，如果是按照索引创建日期来删除，`source: creation_date` 参见 https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\n\n3.运行\n\n```\ncurator --config /path/config_file.yml /path/action_file.yml\n```\n\n别忘了加定时任务`crontab -e`","source":"_posts/elasticsearch-delete-indices-by-date.md","raw":"---\ntitle: elasticsearch按照日期定时删除索引\ndate: 2017-04-06 14:10:47\ntags: [elk,elkstasck,curator]\ncategories: [elkstasck]\n---\n\n使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。\n\n<!-- more -->\n\n### 使用官网_delete_by_query进行删除\n[官网文档--Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html)\n\n```bash\ncurl -u 用户名:密码  -H'Content-Type:application/json' -d'{\n    \"query\": {\n        \"range\": {\n            \"@timestamp\": {\n                \"lt\": \"now-7d\",\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"\n```\n\n**解释**\n\n`-u`是格式为`userName:password`，使用`Basic Auth`进行登录。如果`elasticsearch`没有使用类似`x-pack`进行安全登录，则不需要加`-u参数`\n\n`-H`是指定文档类型是json格式\n\n`-XPOST`是指定用`POST`方式请求\n\n`-d`是指定`body`内容\n\n```javascript\n{\n    \"query\": {\n        \"range\": { //范围\n            \"@timestamp\": {//时间字段\n                \"lt\": \"now-7d\",//lt是小于(<)，lte是小于等于(<=),gt是大于(>),gte是大于等于(>=),now-7d是当前时间减7天\n                \"format\": \"epoch_millis\"\n            }\n        }\n    }\n}\n```\n\n定时删除\n```bash\n$ crontab -e\n\n* 0 * * * /usr/bin/curl -u username:password  -H'Content-Type:application/json' -d'{\"query\":{\"range\":{\"@timestamp\":{\"lt\":\"now-7d\",\"format\":\"epoch_millis\"}}}}' -XPOST \"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\" > /tmp/elk_clean.txt\n```\n\n每天0点删除超过7天的无效索引\n\n优点：\n\n- 不依赖第三方插件或者代码\n\n- 简单易理解\n\n- 不需要指定索引名称可用`*`通配符删除\n\n缺点：\n- 效率低\n\n### 使用sh脚本删除\n在stackoverflow看到一个帖子 [Removing old indices in elasticsearch#answer-39746705](http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705)\n```bash\n#!/bin/bash\nsearchIndex=logstash-monitor\nelastic_url=logging.core.k94.kvk.nl\nelastic_port=9200\n\ndate2stamp () {\n    date --utc --date \"$1\" +%s\n}\n\ndateDiff (){\n    case $1 in\n        -s)   sec=1;      shift;;\n        -m)   sec=60;     shift;;\n        -h)   sec=3600;   shift;;\n        -d)   sec=86400;  shift;;\n        *)    sec=86400;;\n    esac\n    dte1=$(date2stamp $1)\n    dte2=$(date2stamp $2)\n    diffSec=$((dte2-dte1))\n    if ((diffSec < 0)); then abs=-1; else abs=1; fi\n    echo $((diffSec/sec*abs))\n}\n\nfor index in $(curl -s \"${elastic_url}:${elastic_port}/_cat/indices?v\" |     grep -E \" ${searchIndex}-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\" | awk '{     print $3 }'); do\n  date=$(echo ${index: -10} | sed 's/\\./-/g')\n  cond=$(date +%Y-%m-%d)\n  diff=$(dateDiff -d $date $cond)\n  echo -n \"${index} (${diff})\"\n  if [ $diff -gt 1 ]; then\n    echo \" / DELETE\"\n    # curl -XDELETE \"${elastic_url}:${elastic_port}/${index}?pretty\"\n  else\n    echo \"\"\n  fi\ndone    \n```\n使用了 `_cat/indices`api。\n\n### 使用 curator\n\n支持windows[zip](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html),[msi](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html),和linux[apt](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html),[yum](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html)\n\n[Curator Reference](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html) [github-curator](https://github.com/elastic/curator)\n\n#### 安装\n[安装](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html)\n\n#### 配置\n\n参考 http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\n\n1.config文件\n\n```yaml\n---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    * 127.0.0.1\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth: username:password\n  timeout:\n  master_only: True\n\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  #blacklist: ['elasticsearch', 'urllib3']\n```\n\n2.action文件\n\n```yaml\n---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 7 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    * filtertype: pattern\n      kind: prefix\n      value: logstash-\n      exclude:\n    * filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7\n      exclude:\n```\n\n这里是用`index-'%Y.%m.%d'`进行匹配，如果是按照索引创建日期来删除，`source: creation_date` 参见 https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\n\n3.运行\n\n```\ncurator --config /path/config_file.yml /path/action_file.yml\n```\n\n别忘了加定时任务`crontab -e`","slug":"elasticsearch-delete-indices-by-date","published":1,"updated":"2017-04-06T06:13:37.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5uq0001hgdo97po8ifx","content":"<p>使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。</p>\n<a id=\"more\"></a>\n<h3 id=\"使用官网-delete-by-query进行删除\"><a href=\"#使用官网-delete-by-query进行删除\" class=\"headerlink\" title=\"使用官网_delete_by_query进行删除\"></a>使用官网_delete_by_query进行删除</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html\" target=\"_blank\" rel=\"external\">官网文档–Delete By Query API</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -u 用户名:密码  -H<span class=\"string\">'Content-Type:application/json'</span> <span class=\"_\">-d</span><span class=\"string\">'&#123;</span></div><div class=\"line\">    \"query\": &#123;</div><div class=\"line\">        \"range\": &#123;</div><div class=\"line\">            \"@timestamp\": &#123;</div><div class=\"line\">                \"lt\": \"now-7d\",</div><div class=\"line\">                \"format\": \"epoch_millis\"</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">' -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span></div></pre></td></tr></table></figure>\n<p><strong>解释</strong></p>\n<p><code>-u</code>是格式为<code>userName:password</code>，使用<code>Basic Auth</code>进行登录。如果<code>elasticsearch</code>没有使用类似<code>x-pack</code>进行安全登录，则不需要加<code>-u参数</code></p>\n<p><code>-H</code>是指定文档类型是json格式</p>\n<p><code>-XPOST</code>是指定用<code>POST</code>方式请求</p>\n<p><code>-d</code>是指定<code>body</code>内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"range\"</span>: &#123; <span class=\"comment\">//范围</span></div><div class=\"line\">            <span class=\"string\">\"@timestamp\"</span>: &#123;<span class=\"comment\">//时间字段</span></div><div class=\"line\">                <span class=\"string\">\"lt\"</span>: <span class=\"string\">\"now-7d\"</span>,<span class=\"comment\">//lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</span></div><div class=\"line\">                <span class=\"string\">\"format\"</span>: <span class=\"string\">\"epoch_millis\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定时删除<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ crontab <span class=\"_\">-e</span></div><div class=\"line\"></div><div class=\"line\">* 0 * * * /usr/bin/curl -u username:password  -H<span class=\"string\">'Content-Type:application/json'</span> <span class=\"_\">-d</span><span class=\"string\">'&#123;\"query\":&#123;\"range\":&#123;\"@timestamp\":&#123;\"lt\":\"now-7d\",\"format\":\"epoch_millis\"&#125;&#125;&#125;&#125;'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span> &gt; /tmp/elk_clean.txt</div></pre></td></tr></table></figure></p>\n<p>每天0点删除超过7天的无效索引</p>\n<p>优点：</p>\n<ul>\n<li><p>不依赖第三方插件或者代码</p>\n</li>\n<li><p>简单易理解</p>\n</li>\n<li><p>不需要指定索引名称可用<code>*</code>通配符删除</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效率低</li>\n</ul>\n<h3 id=\"使用sh脚本删除\"><a href=\"#使用sh脚本删除\" class=\"headerlink\" title=\"使用sh脚本删除\"></a>使用sh脚本删除</h3><p>在stackoverflow看到一个帖子 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705\" target=\"_blank\" rel=\"external\">Removing old indices in elasticsearch#answer-39746705</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">searchIndex=logstash-monitor</div><div class=\"line\">elastic_url=logging.core.k94.kvk.nl</div><div class=\"line\">elastic_port=9200</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">date2stamp</span></span> () &#123;</div><div class=\"line\">    date --utc --date <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> +%s</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">dateDiff</span></span> ()&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"_\">-s</span>)   sec=1;      <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        -m)   sec=60;     <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        -h)   sec=3600;   <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        <span class=\"_\">-d</span>)   sec=86400;  <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        *)    sec=86400;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\">    dte1=$(date2stamp <span class=\"variable\">$1</span>)</div><div class=\"line\">    dte2=$(date2stamp <span class=\"variable\">$2</span>)</div><div class=\"line\">    diffSec=$((dte2-dte1))</div><div class=\"line\">    <span class=\"keyword\">if</span> ((diffSec &lt; 0)); <span class=\"keyword\">then</span> abs=-1; <span class=\"keyword\">else</span> abs=1; <span class=\"keyword\">fi</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> $((diffSec/sec*abs))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> $(curl <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$&#123;elastic_url&#125;</span>:<span class=\"variable\">$&#123;elastic_port&#125;</span>/_cat/indices?v\"</span> |     grep -E <span class=\"string\">\" <span class=\"variable\">$&#123;searchIndex&#125;</span>-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\"</span> | awk <span class=\"string\">'&#123;     print $3 &#125;'</span>); <span class=\"keyword\">do</span></div><div class=\"line\">  date=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;index: -10&#125;</span> | sed <span class=\"string\">'s/\\./-/g'</span>)</div><div class=\"line\">  cond=$(date +%Y-%m-%d)</div><div class=\"line\">  diff=$(dateDiff <span class=\"_\">-d</span> <span class=\"variable\">$date</span> <span class=\"variable\">$cond</span>)</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$&#123;index&#125;</span> (<span class=\"variable\">$&#123;diff&#125;</span>)\"</span></div><div class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$diff</span> <span class=\"_\">-gt</span> 1 ]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\" / DELETE\"</span></div><div class=\"line\">    <span class=\"comment\"># curl -XDELETE \"$&#123;elastic_url&#125;:$&#123;elastic_port&#125;/$&#123;index&#125;?pretty\"</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<p>使用了 <code>_cat/indices</code>api。</p>\n<h3 id=\"使用-curator\"><a href=\"#使用-curator\" class=\"headerlink\" title=\"使用 curator\"></a>使用 curator</h3><p>支持windows<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html\" target=\"_blank\" rel=\"external\">zip</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html\" target=\"_blank\" rel=\"external\">msi</a>,和linux<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html\" target=\"_blank\" rel=\"external\">apt</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html\" target=\"_blank\" rel=\"external\">yum</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html\" target=\"_blank\" rel=\"external\">Curator Reference</a> <a href=\"https://github.com/elastic/curator\" target=\"_blank\" rel=\"external\">github-curator</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html\" target=\"_blank\" rel=\"external\">安装</a></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>参考 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400</a></p>\n<p>1.config文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"comment\"># Remember, leave a key empty if there is no value.  None will be a string,</span></div><div class=\"line\"><span class=\"comment\"># not a Python \"NoneType\"</span></div><div class=\"line\"><span class=\"attr\">client:</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span></div><div class=\"line\">    * <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9200</span></div><div class=\"line\"><span class=\"attr\">  url_prefix:</span></div><div class=\"line\"><span class=\"attr\">  use_ssl:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">  certificate:</span></div><div class=\"line\"><span class=\"attr\">  client_cert:</span></div><div class=\"line\"><span class=\"attr\">  client_key:</span></div><div class=\"line\"><span class=\"attr\">  ssl_no_validate:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">  http_auth:</span> username:password</div><div class=\"line\"><span class=\"attr\">  timeout:</span></div><div class=\"line\"><span class=\"attr\">  master_only:</span> <span class=\"literal\">True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  loglevel:</span> INFO</div><div class=\"line\"><span class=\"attr\">  logfile:</span></div><div class=\"line\"><span class=\"attr\">  logformat:</span> default</div><div class=\"line\">  <span class=\"comment\">#blacklist: ['elasticsearch', 'urllib3']</span></div></pre></td></tr></table></figure>\n<p>2.action文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">actions:</span></div><div class=\"line\">  <span class=\"number\">1</span>:</div><div class=\"line\"><span class=\"attr\">    action:</span> delete_indices</div><div class=\"line\"><span class=\"attr\">    description:</span> &gt;-</div><div class=\"line\">      Delete indices older than <span class=\"number\">7</span> days (based on index name), for logstash-</div><div class=\"line\">      prefixed indices. Ignore the error if the filter does not result in an</div><div class=\"line\">      actionable list of indices (ignore_empty_list) and exit cleanly.</div><div class=\"line\"><span class=\"attr\">    options:</span></div><div class=\"line\"><span class=\"attr\">      ignore_empty_list:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">      timeout_override:</span></div><div class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">    filters:</span></div><div class=\"line\">    * filtertype: pattern</div><div class=\"line\"><span class=\"attr\">      kind:</span> prefix</div><div class=\"line\"><span class=\"attr\">      value:</span> logstash-</div><div class=\"line\"><span class=\"attr\">      exclude:</span></div><div class=\"line\">    * filtertype: age</div><div class=\"line\"><span class=\"attr\">      source:</span> name</div><div class=\"line\"><span class=\"attr\">      direction:</span> older</div><div class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></div><div class=\"line\"><span class=\"attr\">      unit:</span> days</div><div class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">7</span></div><div class=\"line\"><span class=\"attr\">      exclude:</span></div></pre></td></tr></table></figure>\n<p>这里是用<code>index-&#39;%Y.%m.%d&#39;</code>进行匹配，如果是按照索引创建日期来删除，<code>source: creation_date</code> 参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\" target=\"_blank\" rel=\"external\">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date</a></p>\n<p>3.运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">curator --config /path/config_file.yml /path/action_file.yml</div></pre></td></tr></table></figure>\n<p>别忘了加定时任务<code>crontab -e</code></p>\n","excerpt":"<p>使用elkstack作为日志分析工具，采集nginx访问日志，项目log日志，心跳检测日志，服务器度量日志等，每天产生大量索引(Index)，占用磁盘空间。对于过期数据需要进行删除来释放磁盘空间。</p>","more":"<h3 id=\"使用官网-delete-by-query进行删除\"><a href=\"#使用官网-delete-by-query进行删除\" class=\"headerlink\" title=\"使用官网_delete_by_query进行删除\"></a>使用官网_delete_by_query进行删除</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html\">官网文档–Delete By Query API</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -u 用户名:密码  -H<span class=\"string\">'Content-Type:application/json'</span> <span class=\"_\">-d</span><span class=\"string\">'&#123;</div><div class=\"line\">    \"query\": &#123;</div><div class=\"line\">        \"range\": &#123;</div><div class=\"line\">            \"@timestamp\": &#123;</div><div class=\"line\">                \"lt\": \"now-7d\",</div><div class=\"line\">                \"format\": \"epoch_millis\"</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span></div></pre></td></tr></table></figure>\n<p><strong>解释</strong></p>\n<p><code>-u</code>是格式为<code>userName:password</code>，使用<code>Basic Auth</code>进行登录。如果<code>elasticsearch</code>没有使用类似<code>x-pack</code>进行安全登录，则不需要加<code>-u参数</code></p>\n<p><code>-H</code>是指定文档类型是json格式</p>\n<p><code>-XPOST</code>是指定用<code>POST</code>方式请求</p>\n<p><code>-d</code>是指定<code>body</code>内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"range\"</span>: &#123; <span class=\"comment\">//范围</span></div><div class=\"line\">            <span class=\"string\">\"@timestamp\"</span>: &#123;<span class=\"comment\">//时间字段</span></div><div class=\"line\">                <span class=\"string\">\"lt\"</span>: <span class=\"string\">\"now-7d\"</span>,<span class=\"comment\">//lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</span></div><div class=\"line\">                <span class=\"string\">\"format\"</span>: <span class=\"string\">\"epoch_millis\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定时删除<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ crontab <span class=\"_\">-e</span></div><div class=\"line\"></div><div class=\"line\">* 0 * * * /usr/bin/curl -u username:password  -H<span class=\"string\">'Content-Type:application/json'</span> <span class=\"_\">-d</span><span class=\"string\">'&#123;\"query\":&#123;\"range\":&#123;\"@timestamp\":&#123;\"lt\":\"now-7d\",\"format\":\"epoch_millis\"&#125;&#125;&#125;&#125;'</span> -XPOST <span class=\"string\">\"http://127.0.0.1:9200/*-*/_delete_by_query?pretty\"</span> &gt; /tmp/elk_clean.txt</div></pre></td></tr></table></figure></p>\n<p>每天0点删除超过7天的无效索引</p>\n<p>优点：</p>\n<ul>\n<li><p>不依赖第三方插件或者代码</p>\n</li>\n<li><p>简单易理解</p>\n</li>\n<li><p>不需要指定索引名称可用<code>*</code>通配符删除</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效率低</li>\n</ul>\n<h3 id=\"使用sh脚本删除\"><a href=\"#使用sh脚本删除\" class=\"headerlink\" title=\"使用sh脚本删除\"></a>使用sh脚本删除</h3><p>在stackoverflow看到一个帖子 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-39746705\">Removing old indices in elasticsearch#answer-39746705</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">searchIndex=logstash-monitor</div><div class=\"line\">elastic_url=logging.core.k94.kvk.nl</div><div class=\"line\">elastic_port=9200</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">date2stamp</span></span> () &#123;</div><div class=\"line\">    date --utc --date <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> +%s</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">dateDiff</span></span> ()&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"_\">-s</span>)   sec=1;      <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        -m)   sec=60;     <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        -h)   sec=3600;   <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        <span class=\"_\">-d</span>)   sec=86400;  <span class=\"built_in\">shift</span>;;</div><div class=\"line\">        *)    sec=86400;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\">    dte1=$(date2stamp <span class=\"variable\">$1</span>)</div><div class=\"line\">    dte2=$(date2stamp <span class=\"variable\">$2</span>)</div><div class=\"line\">    diffSec=$((dte2-dte1))</div><div class=\"line\">    <span class=\"keyword\">if</span> ((diffSec &lt; 0)); <span class=\"keyword\">then</span> abs=-1; <span class=\"keyword\">else</span> abs=1; <span class=\"keyword\">fi</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> $((diffSec/sec*abs))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> $(curl <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$&#123;elastic_url&#125;</span>:<span class=\"variable\">$&#123;elastic_port&#125;</span>/_cat/indices?v\"</span> |     grep -E <span class=\"string\">\" <span class=\"variable\">$&#123;searchIndex&#125;</span>-20[0-9][0-9]\\.[0-1][0-9]\\.[0-3][0-9]\"</span> | awk <span class=\"string\">'&#123;     print $3 &#125;'</span>); <span class=\"keyword\">do</span></div><div class=\"line\">  date=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;index: -10&#125;</span> | sed <span class=\"string\">'s/\\./-/g'</span>)</div><div class=\"line\">  cond=$(date +%Y-%m-%d)</div><div class=\"line\">  diff=$(dateDiff <span class=\"_\">-d</span> <span class=\"variable\">$date</span> <span class=\"variable\">$cond</span>)</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$&#123;index&#125;</span> (<span class=\"variable\">$&#123;diff&#125;</span>)\"</span></div><div class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$diff</span> <span class=\"_\">-gt</span> 1 ]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\" / DELETE\"</span></div><div class=\"line\">    <span class=\"comment\"># curl -XDELETE \"$&#123;elastic_url&#125;:$&#123;elastic_port&#125;/$&#123;index&#125;?pretty\"</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<p>使用了 <code>_cat/indices</code>api。</p>\n<h3 id=\"使用-curator\"><a href=\"#使用-curator\" class=\"headerlink\" title=\"使用 curator\"></a>使用 curator</h3><p>支持windows<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-zip.html\">zip</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/windows-msi.html\">msi</a>,和linux<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/apt-repository.html\">apt</a>,<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/yum-repository.html\">yum</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/5.0/index.html\">Curator Reference</a> <a href=\"https://github.com/elastic/curator\">github-curator</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html\">安装</a></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>参考 <a href=\"http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400\">http://stackoverflow.com/questions/33430055/removing-old-indices-in-elasticsearch#answer-42268400</a></p>\n<p>1.config文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"comment\"># Remember, leave a key empty if there is no value.  None will be a string,</span></div><div class=\"line\"><span class=\"comment\"># not a Python \"NoneType\"</span></div><div class=\"line\"><span class=\"attr\">client:</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span></div><div class=\"line\">    * <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9200</span></div><div class=\"line\"><span class=\"attr\">  url_prefix:</span></div><div class=\"line\"><span class=\"attr\">  use_ssl:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">  certificate:</span></div><div class=\"line\"><span class=\"attr\">  client_cert:</span></div><div class=\"line\"><span class=\"attr\">  client_key:</span></div><div class=\"line\"><span class=\"attr\">  ssl_no_validate:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">  http_auth:</span> username:password</div><div class=\"line\"><span class=\"attr\">  timeout:</span></div><div class=\"line\"><span class=\"attr\">  master_only:</span> <span class=\"literal\">True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  loglevel:</span> INFO</div><div class=\"line\"><span class=\"attr\">  logfile:</span></div><div class=\"line\"><span class=\"attr\">  logformat:</span> default</div><div class=\"line\">  <span class=\"comment\">#blacklist: ['elasticsearch', 'urllib3']</span></div></pre></td></tr></table></figure>\n<p>2.action文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">actions:</span></div><div class=\"line\">  <span class=\"number\">1</span>:</div><div class=\"line\"><span class=\"attr\">    action:</span> delete_indices</div><div class=\"line\"><span class=\"attr\">    description:</span> &gt;-</div><div class=\"line\">      Delete indices older than <span class=\"number\">7</span> days (based on index name), for logstash-</div><div class=\"line\">      prefixed indices. Ignore the error if the filter does not result in an</div><div class=\"line\">      actionable list of indices (ignore_empty_list) and exit cleanly.</div><div class=\"line\"><span class=\"attr\">    options:</span></div><div class=\"line\"><span class=\"attr\">      ignore_empty_list:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">      timeout_override:</span></div><div class=\"line\"><span class=\"attr\">      continue_if_exception:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">      disable_action:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">    filters:</span></div><div class=\"line\">    * filtertype: pattern</div><div class=\"line\"><span class=\"attr\">      kind:</span> prefix</div><div class=\"line\"><span class=\"attr\">      value:</span> logstash-</div><div class=\"line\"><span class=\"attr\">      exclude:</span></div><div class=\"line\">    * filtertype: age</div><div class=\"line\"><span class=\"attr\">      source:</span> name</div><div class=\"line\"><span class=\"attr\">      direction:</span> older</div><div class=\"line\"><span class=\"attr\">      timestring:</span> <span class=\"string\">'%Y.%m.%d'</span></div><div class=\"line\"><span class=\"attr\">      unit:</span> days</div><div class=\"line\"><span class=\"attr\">      unit_count:</span> <span class=\"number\">7</span></div><div class=\"line\"><span class=\"attr\">      exclude:</span></div></pre></td></tr></table></figure>\n<p>这里是用<code>index-&#39;%Y.%m.%d&#39;</code>进行匹配，如果是按照索引创建日期来删除，<code>source: creation_date</code> 参见 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date\">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/fe_source.html#_creation_date</a></p>\n<p>3.运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">curator --config /path/config_file.yml /path/action_file.yml</div></pre></td></tr></table></figure>\n<p>别忘了加定时任务<code>crontab -e</code></p>"},{"title":"ElastAlert 基于Elasticsearch的监控告警","date":"2017-02-14T00:27:47.000Z","_content":"\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","source":"_posts/elasticsearch-elastalert.md","raw":"---\ntitle: ElastAlert 基于Elasticsearch的监控告警\ndate: 2017-02-14 08:27:47\ntags: [elk,elkstasck,ElastAlert]\ncategories: [elkstasck]\n---\n\nElastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)\n\n<!-- more -->\n\n## 环境\n\nUbuntu 16.10(内核 4.8.0-37-generic)\n\nelasticsearch 5.2.0\n\nlogstash 5.2.0\n\nkibana 5.2.0\n\n## 依赖\n\n参见 [http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements](http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements)\n\n- Elasticsearch\n- ISO8601 or Unix timestamped data\n- Python 2.6 or 2.7\n- pip, see requirements.txt\n\n\n## 安装Elastalert\n\n安装之前先运行 `python --version`查看python的版本\n\n```bash\n$ python --version\n\nPython 2.7.12+\n\n#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x\n#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2\n```\n\n下载最新elastalert并安装模块\n\n```bash\n\n$ git clone https://github.com/Yelp/elastalert.git\n\n$ sudo python setup.py install\n\n$ sudo pip install -r requirements.txt\n\n```\n\n安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令\n```bash\n\n$ ll /usr/local/bin/elastalert*\n-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/local/bin/elastalert\n-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/local/bin/elastalert-create-index\n-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/local/bin/elastalert-rule-from-kibana\n-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/local/bin/elastalert-test-rule\n\n```\n\n## 设置elasticsearch索引\n\n参见 [setting-up-elasticsearch][setting-up-elasticsearch] \n\n`elastalert-create-index` 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送`alert`,默认情况下，创建的索引叫 `elastalert_status`\n\n```bash\n$ elastalert-create-index\nNew index name (Default elastalert_status)\nName of existing index to copy (Default None)\nNew index elastalert_status created\nDone!\n```\n\n具体生成的数据，请参见 [ElastAlert Metadata Index][metadata]\n\n## 设置配置文件和规则Rule\n\n```bash\n$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml\n\n$ vi ~/elastalert/config.yaml\n```\n\n```yaml\n# This is the folder that contains the rule yaml files\n# Any .yaml file will be loaded as a rule\nrules_folder: example_rules\n\n# How often ElastAlert will query Elasticsearch\n# The unit can be anything from weeks to seconds\nrun_every:\n  minutes: 1\n\n# ElastAlert will buffer results from the most recent\n# period of time, in case some log sources are not in real time\nbuffer_time:\n  minutes: 15\n\n# The Elasticsearch hostname for metadata writeback\n# Note that every rule can have its own Elasticsearch host\nes_host: 127.0.0.1\n\n# The Elasticsearch port\nes_port: 9200\n\n# Optional URL prefix for Elasticsearch\n#es_url_prefix: elasticsearch\n\n# Connect with TLS to Elasticsearch\n#use_ssl: True\n\n# Verify TLS certificates\n#verify_certs: True\n\n# GET request with body is the default option for Elasticsearch.\n# If it fails for some reason, you can pass 'GET', 'POST' or 'source'.\n# See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport\n# for details\n#es_send_get_body_as: GET\n\n# Option basic-auth username and password for Elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# The index on es_host which is used for metadata storage\n# This can be a unmapped index, but it is recommended that you run\n# elastalert-create-index to set a mapping\nwriteback_index: elastalert_status\n\n# If an alert fails for some reason, ElastAlert will retry\n# sending the alert until this time period has elapsed\nalert_time_limit:\n  days: 1\n\n```\n\n```bash\n#注意将${userName}替换成具体用户名\nvi /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n```\n```yaml\n#发送邮件的邮箱\nuser: xxx@163.com\n#不是邮箱密码，是设置的POP3密码\npassword: xxx\n```\n```bash\nvi ~/elastalert/example_rules/example_frequency.yaml\n```\n参见 [creating-a-rule][creating-a-rule]\n```yaml\n# From example_rules/example_frequency.yaml\n#es_host: elasticsearch.example.com\n#es_port: 14900\nname: Example rule\ntype: frequency\nindex: logstash-*\n#限定时间内，发生事件次数\nnum_events: 1\n#限定时间刻度\ntimeframe:\n    #1分钟\n    minutes: 1\n\nfilter:\n- query:\n    query_string:\n      query: \"field: value\"\n\n#SMTP协议的邮件服务器相关配置\n#smtp.163.com是网易163邮箱的smtp服务器\n#登陆163邮箱后，找到 【设置】>【POP3/SMTP/IMAP】>开启，然后设置【客户端授权密码】\nsmtp_host: smtp.163.com\nsmtp_port: 25\n\n#用户认证文件，需要user和password两个属性\n#注意将${userName}替换成具体用户名\nsmtp_auth_file: /home/${userName}/elastalert/example_rules/smtp_auth_file.yaml\n#回复给那个邮箱\nemail_reply_to: xxx@163.com\n#从哪个邮箱发送\nfrom_addr: xxx@163.com\n\n# (Required)\n# The alert is use when a match is found\nalert:\n- \"email\"\n\n# (required, email specific)\n# a list of email addresses to send alerts to\nemail:\n#接收报警邮件的邮箱\n- \"xxxx@qq.com\"\n```\n\n## 测试规则\n\n参见 [Testing Your Rule][testing-your-rule]\n\n```bash\nelastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml\n```\n\n具体配置，参见 [commonconfig][commonconfig]\n\n## 运行\n```bash\n$ cd ~/elastalert\n$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml\n\nINFO:elastalert:Starting up\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n```bash\n$ curl -X POST \"http://127.0.0.1:9200/logstash-2017.02.14/test\"  -d '{\n\"@timestamp\": \"2017-02-14T03:10:46.000Z\",\n\"field\": \"value\"\n}'\n\n# 返回 {\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n\n```\n**@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50**\n```bash\n#如果正常，会输出如下信息\n\nINFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits\nINFO:elastalert:Alert for Example rule at 2017-02-14T03:10:46Z:\nINFO:elastalert:Example rule\n\nAt least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST\n\n@timestamp: 2017-02-14T03:10:46Z\n_id: AVo6oVCnFreCcJPhQqgX\n_index: logstash-2017.02.14\n_type: test\nfield: value\nnum_hits: 2\nnum_matches: 1\n\nINFO:elastalert:Sent email to ['xxx@qq.com']\nINFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent\nINFO:elastalert:Sleeping for 59 seconds\n\n```\n\n## Alert\n\n![成功报警](https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png)\n\n[setting-up-elasticsearch]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\n[metadata]: http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\n[creating-a-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\n[commonconfig]: http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\n[testing-your-rule]: http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\n","slug":"elasticsearch-elastalert","published":1,"updated":"2017-02-14T06:32:25.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5uz0004hgdouqs4p1et","content":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"external\">https://github.com/Yelp/elastalert</a></p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\" target=\"_blank\" rel=\"external\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python --version</div><div class=\"line\"></div><div class=\"line\">Python 2.7.12+</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></div><div class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></div></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ sudo python setup.py install</div><div class=\"line\"></div><div class=\"line\">$ sudo pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</div><div class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</div><div class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</div><div class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</div><div class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</div></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\" target=\"_blank\" rel=\"external\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ elastalert-create-index</div><div class=\"line\">New index name (Default elastalert_status)</div><div class=\"line\">Name of existing index to copy (Default None)</div><div class=\"line\">New index elastalert_status created</div><div class=\"line\">Done!</div></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\" target=\"_blank\" rel=\"external\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi ~/elastalert/config.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></div><div class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></div><div class=\"line\"><span class=\"attr\">rules_folder:</span> example_rules</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></div><div class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></div><div class=\"line\"><span class=\"attr\">run_every:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></div><div class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></div><div class=\"line\"><span class=\"attr\">buffer_time:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></div><div class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></div><div class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></div><div class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></div><div class=\"line\"><span class=\"comment\">#verify_certs: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></div><div class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></div><div class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></div><div class=\"line\"><span class=\"comment\"># for details</span></div><div class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></div><div class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></div><div class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></div><div class=\"line\"><span class=\"attr\">writeback_index:</span> elastalert_status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></div><div class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></div><div class=\"line\"><span class=\"attr\">alert_time_limit:</span></div><div class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></div><div class=\"line\"><span class=\"attr\">user:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></div><div class=\"line\"><span class=\"attr\">password:</span> xxx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\" target=\"_blank\" rel=\"external\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">#限定时间刻度</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\">    <span class=\"comment\">#1分钟</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- query:</span></div><div class=\"line\"><span class=\"attr\">    query_string:</span></div><div class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></div><div class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></div><div class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></div><div class=\"line\"><span class=\"attr\">smtp_host:</span> smtp<span class=\"number\">.163</span>.com</div><div class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></div><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\"><span class=\"attr\">smtp_auth_file:</span> /home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</div><div class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></div><div class=\"line\"><span class=\"attr\">email_reply_to:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></div><div class=\"line\"><span class=\"attr\">from_addr:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (required, email specific)</span></div><div class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></div><div class=\"line\"><span class=\"attr\">email:</span></div><div class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\" target=\"_blank\" rel=\"external\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"external\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</div><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</span></div><div class=\"line\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></div></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</div><div class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</div><div class=\"line\">INFO:elastalert:Example rule</div><div class=\"line\"></div><div class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</div><div class=\"line\"></div><div class=\"line\">@timestamp: 2017-02-14T03:10:46Z</div><div class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</div><div class=\"line\">_index: logstash-2017.02.14</div><div class=\"line\">_type: <span class=\"built_in\">test</span></div><div class=\"line\">field: value</div><div class=\"line\">num_hits: 2</div><div class=\"line\">num_matches: 1</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>\n","excerpt":"<p>Elastalert是Yelp公司用python2写的一个报警框架(目前支持python2.6和2.7，不支持3.x),github地址为 <a href=\"https://github.com/Yelp/elastalert\">https://github.com/Yelp/elastalert</a></p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Ubuntu 16.10(内核 4.8.0-37-generic)</p>\n<p>elasticsearch 5.2.0</p>\n<p>logstash 5.2.0</p>\n<p>kibana 5.2.0</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements\">http://elastalert.readthedocs.io/en/latest/running_elastalert.html#requirements</a></p>\n<ul>\n<li>Elasticsearch</li>\n<li>ISO8601 or Unix timestamped data</li>\n<li>Python 2.6 or 2.7</li>\n<li>pip, see requirements.txt</li>\n</ul>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前先运行 <code>python --version</code>查看python的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python --version</div><div class=\"line\"></div><div class=\"line\">Python 2.7.12+</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#如果2.6或者2.7则正常，如果是3.x则需要改成python2.x</span></div><div class=\"line\"><span class=\"comment\">#假设本机装了python 2和3 可以将/usr/bin/python的软连接指向 python2</span></div></pre></td></tr></table></figure>\n<p>下载最新elastalert并安装模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</div><div class=\"line\"></div><div class=\"line\">$ sudo python setup.py install</div><div class=\"line\"></div><div class=\"line\">$ sudo pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/elastalert*</div><div class=\"line\">-rwxr-xr-x 1 root root 396 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert</div><div class=\"line\">-rwxr-xr-x 1 root root 422 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-create-index</div><div class=\"line\">-rwxr-xr-x 1 root root 430 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-rule-from-kibana</div><div class=\"line\">-rwxr-xr-x 1 root root 416 2月  14 10:03 /usr/<span class=\"built_in\">local</span>/bin/elastalert-test-rule</div></pre></td></tr></table></figure></p>\n<h2 id=\"设置elasticsearch索引\"><a href=\"#设置elasticsearch索引\" class=\"headerlink\" title=\"设置elasticsearch索引\"></a>设置elasticsearch索引</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#setting-up-elasticsearch\">setting-up-elasticsearch</a> </p>\n<p><code>elastalert-create-index</code> 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送<code>alert</code>,默认情况下，创建的索引叫 <code>elastalert_status</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ elastalert-create-index</div><div class=\"line\">New index name (Default elastalert_status)</div><div class=\"line\">Name of existing index to copy (Default None)</div><div class=\"line\">New index elastalert_status created</div><div class=\"line\">Done!</div></pre></td></tr></table></figure>\n<p>具体生成的数据，请参见 <a href=\"http://elastalert.readthedocs.io/en/latest/elastalert_status.html#metadata\">ElastAlert Metadata Index</a></p>\n<h2 id=\"设置配置文件和规则Rule\"><a href=\"#设置配置文件和规则Rule\" class=\"headerlink\" title=\"设置配置文件和规则Rule\"></a>设置配置文件和规则Rule</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml</div><div class=\"line\"></div><div class=\"line\">$ vi ~/elastalert/config.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></div><div class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></div><div class=\"line\"><span class=\"attr\">rules_folder:</span> example_rules</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></div><div class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></div><div class=\"line\"><span class=\"attr\">run_every:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></div><div class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></div><div class=\"line\"><span class=\"attr\">buffer_time:</span></div><div class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></div><div class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></div><div class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></div><div class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optional URL prefix for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_url_prefix: elasticsearch</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Connect with TLS to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Verify TLS certificates</span></div><div class=\"line\"><span class=\"comment\">#verify_certs: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># GET request with body is the default option for Elasticsearch.</span></div><div class=\"line\"><span class=\"comment\"># If it fails for some reason, you can pass 'GET', 'POST' or 'source'.</span></div><div class=\"line\"><span class=\"comment\"># See http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport</span></div><div class=\"line\"><span class=\"comment\"># for details</span></div><div class=\"line\"><span class=\"comment\">#es_send_get_body_as: GET</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Option basic-auth username and password for Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></div><div class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></div><div class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></div><div class=\"line\"><span class=\"attr\">writeback_index:</span> elastalert_status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></div><div class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></div><div class=\"line\"><span class=\"attr\">alert_time_limit:</span></div><div class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\">vi /home/<span class=\"variable\">$&#123;userName&#125;</span>/elastalert/example_rules/smtp_auth_file.yaml</div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#发送邮件的邮箱</span></div><div class=\"line\"><span class=\"attr\">user:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#不是邮箱密码，是设置的POP3密码</span></div><div class=\"line\"><span class=\"attr\">password:</span> xxx</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#creating-a-rule\">creating-a-rule</a><br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># From example_rules/example_frequency.yaml</span></div><div class=\"line\"><span class=\"comment\">#es_host: elasticsearch.example.com</span></div><div class=\"line\"><span class=\"comment\">#es_port: 14900</span></div><div class=\"line\"><span class=\"attr\">name:</span> Example rule</div><div class=\"line\"><span class=\"attr\">type:</span> frequency</div><div class=\"line\"><span class=\"attr\">index:</span> logstash-*</div><div class=\"line\"><span class=\"comment\">#限定时间内，发生事件次数</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">#限定时间刻度</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\">    <span class=\"comment\">#1分钟</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">filter:</span></div><div class=\"line\"><span class=\"attr\">- query:</span></div><div class=\"line\"><span class=\"attr\">    query_string:</span></div><div class=\"line\"><span class=\"attr\">      query:</span> <span class=\"string\">\"field: value\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#SMTP协议的邮件服务器相关配置</span></div><div class=\"line\"><span class=\"comment\">#smtp.163.com是网易163邮箱的smtp服务器</span></div><div class=\"line\"><span class=\"comment\">#登陆163邮箱后，找到 【设置】&gt;【POP3/SMTP/IMAP】&gt;开启，然后设置【客户端授权密码】</span></div><div class=\"line\"><span class=\"attr\">smtp_host:</span> smtp<span class=\"number\">.163</span>.com</div><div class=\"line\"><span class=\"attr\">smtp_port:</span> <span class=\"number\">25</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用户认证文件，需要user和password两个属性</span></div><div class=\"line\"><span class=\"comment\">#注意将$&#123;userName&#125;替换成具体用户名</span></div><div class=\"line\"><span class=\"attr\">smtp_auth_file:</span> /home/$&#123;userName&#125;/elastalert/example_rules/smtp_auth_file.yaml</div><div class=\"line\"><span class=\"comment\">#回复给那个邮箱</span></div><div class=\"line\"><span class=\"attr\">email_reply_to:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"comment\">#从哪个邮箱发送</span></div><div class=\"line\"><span class=\"attr\">from_addr:</span> xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"email\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (required, email specific)</span></div><div class=\"line\"><span class=\"comment\"># a list of email addresses to send alerts to</span></div><div class=\"line\"><span class=\"attr\">email:</span></div><div class=\"line\"><span class=\"comment\">#接收报警邮件的邮箱</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"xxxx@qq.com\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"测试规则\"><a href=\"#测试规则\" class=\"headerlink\" title=\"测试规则\"></a>测试规则</h2><p>参见 <a href=\"http://elastalert.readthedocs.io/en/latest/running_elastalert.html#testing-your-rule\">Testing Your Rule</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml</div></pre></td></tr></table></figure>\n<p>具体配置，参见 <a href=\"http://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\">commonconfig</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/elastalert</div><div class=\"line\">$ python -m elastalert.elastalert --verbose --rule example_frequency.yaml</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Starting up</div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 / 0 hits</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:09 CST: 0 query hits, 0 matches, 0 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ curl -X POST <span class=\"string\">\"http://127.0.0.1:9200/logstash-2017.02.14/test\"</span>  <span class=\"_\">-d</span> <span class=\"string\">'&#123;</div><div class=\"line\">\"@timestamp\": \"2017-02-14T03:10:46.000Z\",</div><div class=\"line\">\"field\": \"value\"</div><div class=\"line\">&#125;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 返回 &#123;\"_index\":\"logstash-2017.02.14\",\"_type\":\"test\",\"_id\":\"AVo6oVCnFreCcJPhQqgX\",\"_version\":1,\"result\":\"created\",\"shards\":&#123;\"total\":2,\"successful\":1,\"failed\":0&#125;,\"created\":true&#125;</span></div></pre></td></tr></table></figure>\n<p><strong>@timestamp的时间是UTC时间，换算方式北京时间（东八区）减8小时，例如2017-02-14 11:21:50的UTC时间是 2017-02-14 03:21:50</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#如果正常，会输出如下信息</span></div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Queried rule Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 / 2 hits</div><div class=\"line\">INFO:elastalert:Alert <span class=\"keyword\">for</span> Example rule at 2017-02-14T03:10:46Z:</div><div class=\"line\">INFO:elastalert:Example rule</div><div class=\"line\"></div><div class=\"line\">At least 1 events occurred between 2017-02-14 11:09 CST and 2017-02-14 11:10 CST</div><div class=\"line\"></div><div class=\"line\">@timestamp: 2017-02-14T03:10:46Z</div><div class=\"line\">_id: AVo6oVCnFreCcJPhQqgX</div><div class=\"line\">_index: logstash-2017.02.14</div><div class=\"line\">_type: <span class=\"built_in\">test</span></div><div class=\"line\">field: value</div><div class=\"line\">num_hits: 2</div><div class=\"line\">num_matches: 1</div><div class=\"line\"></div><div class=\"line\">INFO:elastalert:Sent email to [<span class=\"string\">'xxx@qq.com'</span>]</div><div class=\"line\">INFO:elastalert:Ran Example rule from 2017-02-14 11:08 CST to 2017-02-14 11:19 CST: 2 query hits, 1 matches, 2 alerts sent</div><div class=\"line\">INFO:elastalert:Sleeping <span class=\"keyword\">for</span> 59 seconds</div></pre></td></tr></table></figure></p>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a27e882df14.png\" alt=\"成功报警\"></p>"},{"title":"ELK Stack之Beats简介","date":"2017-03-02T10:55:39.000Z","_content":"\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","source":"_posts/elk-stack-beats.md","raw":"---\ntitle: ELK Stack之Beats简介\ndate: 2017-03-02 18:55:39\ntags: [elk,elkstack,beats]\ncategories: [elkstasck]\n---\n\nBeats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。\n<!-- more -->\n## Filebeat\n\nFilebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。\n\n####  健壮性\nfilebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）\n#### 智能调节传输速度，防止logstash、elasticsearch过载\nFilebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。\n![Filebeat](https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891)\n\n## Metricbeat\n\nMetricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标\n\n#### 简化系统监控\n\n通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息\n![简化系统监控](https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891)\n\n#### 多模块监控支持\n支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可\n![模块监控](https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891)\n\n#### 监控容器\n如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API\n\n#### 无缝接入ELK\nMetricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Packetbeat\n\nPacketbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。\n\n#### 实时监控你的服务和应用程序\n\nPacketbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施\n\n#### 支持多种应用层协议\n\nPacketbeat是一个库，支持多种应用程序层协议，如下所示\n![支持多种应用层协议](https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891)\n\n#### 可以搜索和分析网络流量\nPacketbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch\n![搜索和分析网络流量](https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891)\n\n#### 无缝接入ELK\nPacketbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Winlogbeat\n\nWinlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash\n\n#### 从任何Windows事件日志通道(Channel)读取\n\n如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。\n![从任何Windows事件日志通道(Channel)读取](https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891)\n\n#### 无缝接入ELK\nWinlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。\n\n## Heartbeat\n\nHeartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，**Heartbeat就问一句，还活着没？活着吱一声。。。**) 可以结合ELK Stack其他产品做进一步的分析\n\n#### 容易上手，配置简单\n\n不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat\n\n#### Ping你想Ping的任何东西\n\nHeartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)\n\n#### 动态添加和删除目标\n\n现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)\n\n#### 无缝接入ELK\n\nHeartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。","slug":"elk-stack-beats","published":1,"updated":"2017-03-02T10:57:41.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5v10005hgdoh1yu10in","content":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br><a id=\"more\"></a></p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n","excerpt":"<p>Beats 是ELK Stack技术栈中负责单一用途数据采集并推送给Logstash或Elasticsearch的轻量级产品。<br>","more":"</p>\n<h2 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h2><p>Filebeat是一个轻量级日志收集工具。官网介绍说，当有几十，几百甚至上千台服务器、容器、虚拟机生成日志时，Filebeat提供一种轻量级简单的方式转发和收集日志。</p>\n<h4 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h4><p>filebeat异常中断重启后会继续上次停止的位置。（通过${filebeat_home}\\data\\registry文件来记录日志的偏移量）</p>\n<h4 id=\"智能调节传输速度，防止logstash、elasticsearch过载\"><a href=\"#智能调节传输速度，防止logstash、elasticsearch过载\" class=\"headerlink\" title=\"智能调节传输速度，防止logstash、elasticsearch过载\"></a>智能调节传输速度，防止logstash、elasticsearch过载</h4><p>Filebeat使用压力敏感协议(backpressure-sensitive)来传输数据，在logstash忙的时候，Filebeat会减慢读取-传输速度，一旦logsta恢复，则Filebeat恢复原来的速度。<br><img src=\"https://static-www.elastic.co/assets/blt203883a0718cdc5a/filebeat-diagram.png?q=891\" alt=\"Filebeat\"></p>\n<h2 id=\"Metricbeat\"><a href=\"#Metricbeat\" class=\"headerlink\" title=\"Metricbeat\"></a>Metricbeat</h2><p>Metricbeat是一个轻量级的系统级性能指标监控工具。收集CPU，内存，磁盘等系统指标和Redis，nginx等各种服务的指标</p>\n<h4 id=\"简化系统监控\"><a href=\"#简化系统监控\" class=\"headerlink\" title=\"简化系统监控\"></a>简化系统监控</h4><p>通过在Linux，Windows，Mac上部署Metricbeat，可以收集cpu，内存，文件系统，磁盘IO，网络IO等统计信息<br><img src=\"https://static-www.elastic.co/assets/bltcaef5fe4015417d6/product-metricbeat-1.gif?q=891\" alt=\"简化系统监控\"></p>\n<h4 id=\"多模块监控支持\"><a href=\"#多模块监控支持\" class=\"headerlink\" title=\"多模块监控支持\"></a>多模块监控支持</h4><p>支持采集Apache, NGINX, MongoDB, MySQL, PostgreSQL, Redis, and ZooKeeper等服务的指标。零依赖，只需要在配置文件中启用即可<br><img src=\"https://static-www.elastic.co/assets/blt53458fcf0602cad1/metricbeat-logos-4.svg?q=891\" alt=\"模块监控\"></p>\n<h4 id=\"监控容器\"><a href=\"#监控容器\" class=\"headerlink\" title=\"监控容器\"></a>监控容器</h4><p>如果你使用Docker管理你的服务。可以在该主机上单独起一个Metricbeat容器，他通过从proc文件系统中直接读取cgroups信息来收集有关Docker主机上每个容器的统计信息。不需要特殊权限访问Docker API</p>\n<h4 id=\"无缝接入ELK\"><a href=\"#无缝接入ELK\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Metricbeats是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Packetbeat\"><a href=\"#Packetbeat\" class=\"headerlink\" title=\"Packetbeat\"></a>Packetbeat</h2><p>Packetbeat是一个轻量级的网络数据包分析工具。如果你用过wireshark，fiddler会很好理解数据包分析的概念，如果没用过，那你可以参考Chrome的dev tools的Network的功能。Packetbeat可以通过抓包分析应用程序的网络交互。并且将抓到的数据发送到Logstash或者Elasticsearch。</p>\n<h4 id=\"实时监控你的服务和应用程序\"><a href=\"#实时监控你的服务和应用程序\" class=\"headerlink\" title=\"实时监控你的服务和应用程序\"></a>实时监控你的服务和应用程序</h4><p>Packetbeat 轻松的实时监控并解析像HTTP这样的网络协议。以了解流量是如何经过你的网络。Packetbeat是被动的，不增加延迟开销，无代码侵入。不干涉其他基础设施</p>\n<h4 id=\"支持多种应用层协议\"><a href=\"#支持多种应用层协议\" class=\"headerlink\" title=\"支持多种应用层协议\"></a>支持多种应用层协议</h4><p>Packetbeat是一个库，支持多种应用程序层协议，如下所示<br><img src=\"https://static-www.elastic.co/assets/bltbc6a3f306a97dd20/packetbeat-logo-4.svg?q=891\" alt=\"支持多种应用层协议\"></p>\n<h4 id=\"可以搜索和分析网络流量\"><a href=\"#可以搜索和分析网络流量\" class=\"headerlink\" title=\"可以搜索和分析网络流量\"></a>可以搜索和分析网络流量</h4><p>Packetbeat可以让你实时在目标服务器上进行抓包-解码-获取请求和响应-展开字段-将json格式的结果发送到Elasticsearch<br><img src=\"https://static-www.elastic.co/assets/bltd9ea7151b811b1c6/packetbeat-monitoring-steps3.svg?q=891\" alt=\"搜索和分析网络流量\"></p>\n<h4 id=\"无缝接入ELK-1\"><a href=\"#无缝接入ELK-1\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Packetbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Winlogbeat\"><a href=\"#Winlogbeat\" class=\"headerlink\" title=\"Winlogbeat\"></a>Winlogbeat</h2><p>Winlogbeat是一个轻量级的Windows事件日志收集工具。将Windows事件发送到Elasticsearch或者Logstash</p>\n<h4 id=\"从任何Windows事件日志通道-Channel-读取\"><a href=\"#从任何Windows事件日志通道-Channel-读取\" class=\"headerlink\" title=\"从任何Windows事件日志通道(Channel)读取\"></a>从任何Windows事件日志通道(Channel)读取</h4><p>如果你有Windows服务器的话，其实可以从Windows事件日志中看到很多东西。例如，登陆(4624),登陆失败(4625),插入USB便携设备(4663)或者新装软件(11707)。WinlogBeat可以配置从任何事件日志通道读取并且结构化提供原始事件数据。使得通过Elasticsearch过滤和聚合结果变得很容易。<br><img src=\"https://static-www.elastic.co/assets/blt1d5fc2155a06db09/winlogbeat-diagram.jpg?q=891\" alt=\"从任何Windows事件日志通道(Channel)读取\"></p>\n<h4 id=\"无缝接入ELK-2\"><a href=\"#无缝接入ELK-2\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Winlogbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>\n<h2 id=\"Heartbeat\"><a href=\"#Heartbeat\" class=\"headerlink\" title=\"Heartbeat\"></a>Heartbeat</h2><p>Heartbeat 是一个心跳检测工具，主要监控服务的可用性。监控给定的地址是否可用(官网原话：对于给定的URL列表，<strong>Heartbeat就问一句，还活着没？活着吱一声。。。</strong>) 可以结合ELK Stack其他产品做进一步的分析</p>\n<h4 id=\"容易上手，配置简单\"><a href=\"#容易上手，配置简单\" class=\"headerlink\" title=\"容易上手，配置简单\"></a>容易上手，配置简单</h4><p>不管你是测试同主机服务还是其他网络服务，Heartbeat都可以很轻松的生成正常运行时间和响应时间数据。而且修改配置不需要重启Heartbeat</p>\n<h4 id=\"Ping你想Ping的任何东西\"><a href=\"#Ping你想Ping的任何东西\" class=\"headerlink\" title=\"Ping你想Ping的任何东西\"></a>Ping你想Ping的任何东西</h4><p>Heartbeat通过ICMP,TCP,和HTTP进行ping，也支持TLS，身份验证（authentication ），和代理(proxies)。由于简单的DNS解析，你可以监控所有负载均衡的服务(原文:You can monitor all the hosts behind a load-balanced server thanks to simple DNS resolution)</p>\n<h4 id=\"动态添加和删除目标\"><a href=\"#动态添加和删除目标\" class=\"headerlink\" title=\"动态添加和删除目标\"></a>动态添加和删除目标</h4><p>现如今基础设施，服务和主机经常动态调整。Heartbeat可以修改配置文件后自动加载(原文:Heartbeat makes it easy to automate the process of adding and removing monitoring targets via a simple, file-based interface.)</p>\n<h4 id=\"无缝接入ELK-3\"><a href=\"#无缝接入ELK-3\" class=\"headerlink\" title=\"无缝接入ELK\"></a>无缝接入ELK</h4><p>Heartbeat是ELK Stack全家桶中的一员，可以和ELK无缝协同工作。例如使用Logstash二次处理数据，用Elasticsearch分析，或者用Kibana创建和共享仪表盘。</p>"},{"title":"ElkStack之Heartbeat(心跳检测)","date":"2017-03-02T17:20:16.000Z","_content":"\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用->不可用/不可用->可用)时获取到通知即可\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","source":"_posts/heartbeat.md","raw":"---\ntitle: ElkStack之Heartbeat(心跳检测)\ndate: 2017-03-03 01:20:16\ntags: [elk,elkstasck,Heartbeat]\ncategories: [elkstasck]\n---\n\nHeartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问\n\nHeartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例\n\n你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用\n\n配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在`9:00`~`17:00`运行\n\nHeartbeat目前支持通过以下方式检查hosts\n- ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- TCP。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- HTTP。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n\n# 安装Heartbeat\n\nHeartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里\n\n从[下载页面][downloads]根据系统下载相应的安装包\n\n**deb(Debian/Ubuntu)**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb\nsudo dpkg -i heartbeat-5.2.2-amd64.deb\n```\n\n**rpm(Redhat / Centos / Fedora)**\n```bash\ncurl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm\nsudo rpm -vi heartbeat-5.2.2-x86_64.rpm\n```\n\n**mac**\n```bash\ncurl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz\ntar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz\n```\n\n**windows**\n\n1. 根据具体系统[下载][downloads] 32位系统 `https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip`或者 64位系统`https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip` 注意将`{version}`替换成具体版本,格式类似于`5.2.1`\n\n1. 将下载的zip解压到指定文件夹，例如 `D:\\Heartbeat`\n\n1. 以管理员身份打开PowerShell(右键单击PowerShell图标，选择**以管理员身份运行**)。注意，如果是xp，需要单独安装powershell\n\n1. 运行以下命令安装为Windows服务\n```powershell\nPS > cd 'D:\\Heartbeat'\nPS D:\\Heartbeat> .\\install-service-heartbeat.ps1\n```\n\n!> 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用[nssm][nssm],具体用法，百度之。具体参数为`-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\`\n\n测试阶段可以使用 `heartbeat.exe -e -f heartbeat.yml`\n\n如果已经安装服务，可以使用`net start heartbeat`(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入`services.msc`，找到heartbeat服务手动开启)\n\n\n# 配置Heartbeat\n可以通过编辑`heartbeat.yml`来配置heartbeat。`heartbeat.full.yml`里面有所有可用的选项，可以作为参考\n\nHeartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 [简介][overview]）\n\n#### 要启用的监控列表，使用(`-`) 开头(yaml中的数组),以下表示的用Heartbeat监控`ICMP`和`TCP`\n\n```yaml\nheartbeat.monitors:\n- type: icmp\n  schedule: '*/5 * * * * * *'   #1\n  hosts: [\"myhost\"]\n- type: tcp\n  schedule: '@every 5s'         #2\n  hosts: [\"myhost:7\"]  # default TCP Echo Protocol\n  mode: any                     #3\n  check.send: \"Check\"\n  check.receive: \"Check\"\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://localhost:80/service/status\"]\n  check.response.status: 200\nheartbeat.scheduler:\n  limit: 10\n```\n\n1. 这个ICMP监控，每五秒钟运行一次(e.g. `10:00:00`,`10:00:05` ...) `schedule`选项是类`cron`语法。具体参见[this cronexpr implementation][cronexpr]\n\n2. 这个TCP监控也是每5秒运行一次。Heartbeat添加了`@every`关键词添加到了`conexpr`包里\n\n3. `mode`指定是否用来ping一个ip（`any`）或全解析IPS(`all`) 。\n\n[原版配置][heartbeat-configuration-details]\n\n#### 监控选项\n\n###### type\n- `icmp`(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用`icmp`。这个监控器需要管理员权限\n\n- `tcp`。 `tcp`监控器是通过TCP协议来连接。可以选择配置`tcp`监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用\n\n- `http`。使用`http`监控器是通过http协议进行连接。可以选择配置`http`监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容\n\n`tcp`和`http`都支持SSL/TLS和代理设置\n###### name\n监控器名字\n\n###### enabled\nBoolean值，指定监控模块是否启用，默认为true\n\n###### schedule\n类cron表达式\n\n###### ipv4\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### ipv6\nBoolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true\n\n###### mode\n`any`或者`all`,默认为`any`。如果是`any`，监控器对指定的主机名只ping一个ip地址。如果是`all`，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用\n\n###### watch.poll_file\n**此为实验功能。未来可能更改或删除**\n\n这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。\n\n每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用`watch.poll_file`进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更\n\n```yaml\nheartbeat.monitors:\n- type: tcp\n  schedule: '*/5 * * * * * *'\n  hosts: [\"myhost\"]\n  watch.poll_file:\n    path: {path.config}/monitors/dynamic.json\n    interval: 5s\n```\n    path\n\n        指定的JSON文件地址\n\n    interval\n\n        指定间隔时间\n\nJSON文件内容如下\n```javascript\n{\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"}     #1\n{\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]}      #2\n```\n\n1. 检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次\n2. heartbeat新增一个监控，使用带有ca证书的基于TLS的连接\n\n##### ICMP选项\n\n`type`设置为`icmp`时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机\n\n###### hosts\n需要ping的主机列表\n\n###### wait\n等待时间，默认1s\n\n##### TCP 选项\n`type`设置为`tcp`时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。\n\n###### hosts\n需要ping的主机列表。\n* 简单的主机名，例如`localhost` 或者ip地址。如果你指定了这个选项，你必须在指定`ports`选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 主机名+端口，例如`localhost:8080`。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接\n* 完整的URL，语法为 `scheme://<host>:[port]`\n    - `scheme` 为 `tcp`,`plain`,`ssl`或者`tls`。如果指定的是`tcp`或者`plain`，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了`tls`或者`ssl`,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)\n    - `host`是主机名。\n    - `port`是端口号。\n\n###### ports\n如果`hosts`中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n```\n\n###### check\n验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为`hello message`或者`banner`(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a \"hello message\" or \"banner\" on connect.)\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [7]\n  check.send: 'Hello World'\n  check.receive: 'Hello World'\n```\n###### proxy_url\n只可以用socks5代理。\n```yaml\nproxy_url: socks5://user:password@socks5-proxy:2233\n```\n使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改\n\n###### proxy_use_local_resolver\nBoolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。\n\n###### ssl\nTLS/SSL连接设置。如果`check`未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败\n\n```yaml\n- type: tcp\n  schedule: '@every 5s'\n  hosts: [\"myhost\"]\n  ports: [80, 9200, 5044]\n  ssl:\n    certificate_authorities: ['/etc/ca.crt']\n    supported_protocols: [\"TLSv1.0\", \"TLSv1.1\", \"TLSv1.2\"]\n```\n\n##### HTTP选项\n`type`设置为`http`时，该项生效。通过http协议验证host是否返回预期响应。\n\n###### urls\n用于连接的URLs列表\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n```\n###### proxy_url\nhttp代理url。选填项。如果不设置，默认使用系统环境中的`HTTP_PROXY`\n\n###### username\n选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403\n\n###### password\n选填项。同username\n\n###### ssl 同tcp ssl\n\n###### check(咳咳，划重点)\n\n选填项。发送`request`到远程服务，并接受期望响应`response`\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"http://myhost:80\"]\n  check.request.method: HEAD\n  check.response.status: 200\n```\n\n* `check.request` 选项\n    - method - HTTP方法。支持`HEAD`,`GET`和`POST`\n    - headers - 设置请求头\n    - body - 选填请求体(用于POST方法)\n\n* `check.response` 选项\n    - status - 期望的响应码。未设置或者设置的是`0`，除`404`以外状态码均可\n    - headers - 必须响应的header头信息\n    - body - 必须的响应体\n\n```yaml\n- type: http\n  schedule: '@every 5s'\n  urls: [\"https://myhost:80\"]\ncheck.request:\n  method: GET\n  headers:\n    'X-API-Key': '12345-mykey-67890'\ncheck.response:\n  status: 200\n  body: '{\"status\": \"ok\"}'\n```\n\n##### Scheduler 选项\n\n```yaml\nheartbeat.scheduler:\n  limit: 10\n  location: 'UTC-08:00'\n```\n示例中设置`limit`为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址\n\n###### limit\n允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将`limit`的值设置低于`ulimit`\n\n###### location\n设置时区。默认使用本地实际 `localtime`\n\n#### 发送到Elasticsearch\n```yaml\noutput.elasticsearch:\n  hosts: [\"192.168.1.42:9200\"]\n  template.name: \"heartbeat\"                #1\n  template.path: \"heartbeat.template.json\"  #2\n```\n1,2处是自动在Elasticsearch中加载索引模板，详细信息[参见官网文档][heartbeat-template]\n\n如果是要输出到Logstash，参见[配置Heartbeat使用Logstash][config-heartbeat-logstash]\n\n*如果要测试配置，在heartbeat可执行目录下，运行`./heartbeat -configtest -e`*\n\n# 运行Heartbeat\n\ndeb :\n```bash\nsudo /etc/init.d/ start\n```\n\nrpm :\n```bash\nsudo /etc/init.d/heartbeat start\n```\n\nmac :\n```bash\nsudo ./heartbeat -e -c heartbeat.yml -d \"publish\"\n```\n\nwin : **管理员权限**\n```bash\nnet start heartbeat\n```\nWindows默认将log输出在`${Heartbeat_home}\\Logs`文件夹\n\n*目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)*\n\n# 命令行选项\n\n*命令行运行`./heartbeat -h`查看完整的选项列表*\n\n`-E <setting>=<value>`\n\n    覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n\n`-N`\n\n    禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n\n`-c <file>`\n\n    指定heartbeat配置文件\n\n`configtest`\n\n    测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n\n`-cpuprofile <output file>`\n\n    将cpu配置信息输出到指定文件。在排除故障的时候很有用\n\n`-d <selectors>`\n\n    使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d \"*\"`调试所有的组件。例如`-d \"publish\"`显示所有`\"publish\"`相关的信息\n\n`-e`\n\n    禁用syslog/file输出，只记录到stderr\n\n`-httpprof [<host>]:<port>`\n\n    启动http服务器进行性能分析\n\n`-memprofile <output file>`\n\n    将内存配置信息写入到指定文件。\n\n`-path.config`\n\n    设置配置文件的路径\n\n`-path.data`\n\n    设置data文件路径\n\n`-path.home`\n\n    设置可执行文件所在路径\n\n`-path.logs`\n\n    设置日志文件的路径\n\n`-v`\n\n    启用详细输出，以显示INFO级别日志\n\n`-version`\n\n    显示beat版本并退出\n\n\n本文只是针对官网文档进行了部分翻译。其他像是[输出到logstash,redis等配置信息][configuring-howto-heartbeat]以及[Processors][configuration-processors]部分[Exported Fields][exported-fields]部分,[Securing Heartbeat][securing-heartbeat]暂不翻译\n\n\n# Heartbeat+ElastAlert 心跳报警\nElastAlert如何使用， [参见另外一篇文章][_elastalert] 。\n\n监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。[common fields#_up][common_fields_up] 。\n\n使用ElastAlert的[change rule][change_rule]。具体示例参见 `example_rules/example_change.yaml`文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用->不可用/不可用->可用)时获取到通知即可\n\n我的配置如下\n\n```yaml\n# Alert when some field changes between documents\n# This rule would alert on documents similar to the following:\n# {'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'}\n# {'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'}\n# Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)\n\n# (Optional)\n# Elasticsearch host\n# es_host: elasticsearch.example.com\n\n# (Optional)\n# Elasticsearch port\n# es_port: 14900\n\n# (Optional) Connect with SSL to Elasticsearch\n#use_ssl: True\n\n# (Optional) basic-auth username and password for elasticsearch\n#es_username: someusername\n#es_password: somepassword\n\n# (Required)\n# Rule name, must be unique\nname: heartbeat-monitor\n\n# (Required)\n# Type of alert.\n# the change rule will alert when a certain field changes in two documents within a timeframe\ntype: change\n\n# (Required)\n# Index to search, wildcard supported\nindex: heartbeat-*\n\n# (Required, change specific)\n# The field to look for changes in\ncompare_key: up\n\n# (Required, change specific)\n# Ignore documents without the compare_key (country_name) field\nignore_null: true\n\n# (Required, change specific)\n# The change must occur in two documents with the same query_key\nquery_key: monitor\n\n# (Required, change specific)\n# The value of compare_key must change in two events that are less than timeframe apart to trigger an alert\nnum_events: 1\ntimeframe:\n    minutes: 1\n\n# (Required)\n# The alert is use when a match is found\nalert:\n#- \"email\"\n#- \"debug\"\n- \"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"\n\n#后台登陆后【设置】->【权限管理】->【普通管理组】->【创建并设置通讯录和应用权限】->【CorpID，Secret】\n#设置微信企业号的appid\ncorp_id: xxx\n#设置微信企业号的Secret\nsecret: xxx\n#后台登陆后【应用中心】->【选择应用】->【应用id】\n#设置微信企业号应用id\nagent_id: xxx\n#如果标签下无用户，则推送到部门\n#party_id: xxx\n#如果标签下无用户，则推送到用户\n#user_id: xxx\n\ntag_id: xxx\n```\n\n不过elastalert有个代码逻辑错误。我已提交[Pull request#926][pr]和[Issue#925][issues] 。 如果官方不采纳的话，可以手动修改`elastalert\\ruletypes.py#L135`将 `not val`改成 `val is None`具体原因参见[Issue#925][issues]\n\n如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示`xx hits/xx hits`并发送微信。\n\n![snipaste20170303_134853.png](https://ooo.0o0.ooo/2017/03/03/58b9040175781.png)\n\n[downloads]: https://www.elastic.co/downloads/beats/heartbeat\n[nssm]: http://nssm.cc/download\n[overview]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\n[cronexpr]: https://github.com/gorhill/cronexpr#implementation\n[heartbeat-configuration-details]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\n[config-heartbeat-logstash]: https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\n[heartbeat-template]: https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\n[configuring-howto-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\n[exported-fields]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\n[securing-heartbeat]: https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\n[configuration-processors]: https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\n[_elastalert]: https://anjia.ml/2017/03/03/heartbeat/\n[change_rule]: https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\n[common_fields_up]: https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\n[pr]: https://github.com/Yelp/elastalert/pull/926\n[issues]: https://github.com/Yelp/elastalert/issues/925\n","slug":"heartbeat","published":1,"updated":"2017-03-03T05:58:24.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5v50006hgdow8eioiq0","content":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"external\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</div><div class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</div></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</div><div class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</div></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</div><div class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\" target=\"_blank\" rel=\"external\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><div class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></div><div class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\" target=\"_blank\" rel=\"external\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\" target=\"_blank\" rel=\"external\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> icmp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost:7\"</span>]  <span class=\"comment\"># default TCP Echo Protocol</span></div><div class=\"line\"><span class=\"attr\">  mode:</span> any                     <span class=\"comment\">#3</span></div><div class=\"line\">  check.send: <span class=\"string\">\"Check\"</span></div><div class=\"line\">  check.receive: <span class=\"string\">\"Check\"</span></div><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://localhost:80/service/status\"</span>]</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\" target=\"_blank\" rel=\"external\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\" target=\"_blank\" rel=\"external\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\">  watch.poll_file:</div><div class=\"line\"><span class=\"attr\">    path:</span> &#123;path.config&#125;/monitors/dynamic.json</div><div class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span>s</div></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</div><div class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</div></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">7</span>]</div><div class=\"line\">  check.send: <span class=\"string\">'Hello World'</span></div><div class=\"line\">  check.receive: <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">proxy_url:</span> socks5://user:password@socks5-proxy:<span class=\"number\">2233</span></div></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div><div class=\"line\"><span class=\"attr\">  ssl:</span></div><div class=\"line\"><span class=\"attr\">    certificate_authorities:</span> [<span class=\"string\">'/etc/ca.crt'</span>]</div><div class=\"line\"><span class=\"attr\">    supported_protocols:</span> [<span class=\"string\">\"TLSv1.0\"</span>, <span class=\"string\">\"TLSv1.1\"</span>, <span class=\"string\">\"TLSv1.2\"</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div><div class=\"line\">  check.request.method: HEAD</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"https://myhost:80\"</span>]</div><div class=\"line\">check.request:</div><div class=\"line\"><span class=\"attr\">  method:</span> GET</div><div class=\"line\"><span class=\"attr\">  headers:</span></div><div class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></div><div class=\"line\">check.response:</div><div class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></div><div class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></div></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></div></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">output.elasticsearch:</div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"192.168.1.42:9200\"</span>]</div><div class=\"line\">  template.name: <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></div><div class=\"line\">  template.path: <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></div></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\" target=\"_blank\" rel=\"external\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\" target=\"_blank\" rel=\"external\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ start</div></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/heartbeat start</div></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ./heartbeat <span class=\"_\">-e</span> -c heartbeat.yml <span class=\"_\">-d</span> <span class=\"string\">\"publish\"</span></div></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">net start heartbeat</div></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\" target=\"_blank\" rel=\"external\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\" target=\"_blank\" rel=\"external\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\" target=\"_blank\" rel=\"external\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\" target=\"_blank\" rel=\"external\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\" target=\"_blank\" rel=\"external\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\" target=\"_blank\" rel=\"external\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用-&gt;不可用/不可用-&gt;可用)时获取到通知即可</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></div><div class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch host</span></div><div class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch port</span></div><div class=\"line\"><span class=\"comment\"># es_port: 14900</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></div><div class=\"line\"><span class=\"attr\">name:</span> heartbeat-monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Type of alert.</span></div><div class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></div><div class=\"line\"><span class=\"attr\">type:</span> change</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></div><div class=\"line\"><span class=\"attr\">index:</span> heartbeat-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The field to look for changes in</span></div><div class=\"line\"><span class=\"attr\">compare_key:</span> up</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></div><div class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></div><div class=\"line\"><span class=\"attr\">query_key:</span> monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"comment\">#- \"email\"</span></div><div class=\"line\"><span class=\"comment\">#- \"debug\"</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xxx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></div><div class=\"line\"><span class=\"comment\">#party_id: xxx</span></div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></div><div class=\"line\"><span class=\"comment\">#user_id: xxx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xxx</div></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\" target=\"_blank\" rel=\"external\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"external\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\" target=\"_blank\" rel=\"external\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n","excerpt":"","more":"<p>Heartbeat是一个轻量级守护程序，安装在远程服务器上以定期检查服务的状态，检查服务是否可用。与Metricbeat不同，Metricbeat只告诉你服务器是启动还是停止，Heartbeat可以告诉你，服务是否可以正常访问</p>\n<p>Heartbeat可以帮你验证服务是否可以正常访问，如果你需要验证内部服务时，他还可以用于其它方案，例如，安全用例</p>\n<p>你可以配置Heartbeat来Ping指定主机名的所有DNS可解析的IP地址。从而检查所有的负载均衡服务，是否可用</p>\n<p>配置Heartbeat时，可以指定用于监控的hosts 。 每个监控器按照你设置的监控计划运行。例如，你可以将一个监控器配置为每10分钟运行一次，并且配置不同的监控器在<code>9:00</code>~<code>17:00</code>运行</p>\n<p>Heartbeat目前支持通过以下方式检查hosts</p>\n<ul>\n<li><p>ICMP(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p>TCP。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p>HTTP。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h1 id=\"安装Heartbeat\"><a href=\"#安装Heartbeat\" class=\"headerlink\" title=\"安装Heartbeat\"></a>安装Heartbeat</h1><p>Heartbeat检测服务心跳，一般安装在较为稳定的独立服务器上（类似云服务，不断电，不断网）。尽量不要跟被监控的服务放在一个篮子里</p>\n<p>从<a href=\"https://www.elastic.co/downloads/beats/heartbeat\">下载页面</a>根据系统下载相应的安装包</p>\n<p><strong>deb(Debian/Ubuntu)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-amd64.deb</div><div class=\"line\">sudo dpkg -i heartbeat-5.2.2-amd64.deb</div></pre></td></tr></table></figure></p>\n<p><strong>rpm(Redhat / Centos / Fedora)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-x86_64.rpm</div><div class=\"line\">sudo rpm -vi heartbeat-5.2.2-x86_64.rpm</div></pre></td></tr></table></figure></p>\n<p><strong>mac</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl -L -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-5.2.2-darwin-x86_64.tar.gz</div><div class=\"line\">tar xzvf heartbeat-5.2.2-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure></p>\n<p><strong>windows</strong></p>\n<ol>\n<li><p>根据具体系统<a href=\"https://www.elastic.co/downloads/beats/heartbeat\">下载</a> 32位系统 <code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86.zip</code>或者 64位系统<code>https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-windows-x86_64.zip</code> 注意将<code>{version}</code>替换成具体版本,格式类似于<code>5.2.1</code></p>\n</li>\n<li><p>将下载的zip解压到指定文件夹，例如 <code>D:\\Heartbeat</code></p>\n</li>\n<li><p>以管理员身份打开PowerShell(右键单击PowerShell图标，选择<strong>以管理员身份运行</strong>)。注意，如果是xp，需要单独安装powershell</p>\n</li>\n<li><p>运行以下命令安装为Windows服务</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><div class=\"line\">PS &gt; cd <span class=\"string\">'D:\\Heartbeat'</span></div><div class=\"line\">PS D:\\Heartbeat&gt; .\\install-service-heartbeat.ps1</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>!&gt; 如果脚本被禁用，或者安装不成功，或者是xp系统，其实可以考虑使用<a href=\"http://nssm.cc/download\">nssm</a>,具体用法，百度之。具体参数为<code>-c D:\\Heartbeat\\heartbeat.yml  -path.home D:\\Heartbeat\\ -path.data D:\\Heartbeat\\</code></p>\n<p>测试阶段可以使用 <code>heartbeat.exe -e -f heartbeat.yml</code></p>\n<p>如果已经安装服务，可以使用<code>net start heartbeat</code>(使用管理员权限的cmd或者powershell或者从服务(<kbd>Win</kbd>+<kbd>R</kbd>输入<code>services.msc</code>，找到heartbeat服务手动开启)</p>\n<h1 id=\"配置Heartbeat\"><a href=\"#配置Heartbeat\" class=\"headerlink\" title=\"配置Heartbeat\"></a>配置Heartbeat</h1><p>可以通过编辑<code>heartbeat.yml</code>来配置heartbeat。<code>heartbeat.full.yml</code>里面有所有可用的选项，可以作为参考</p>\n<p>Heartbeat提供在指定的间隔时间检测主机心跳状态的监控，可以单独配置每个监控。Heartbeat目前提供ICMP,TCP 和HTTP 的监控（更多有关监控的信息，参见 <a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-overview.html\">简介</a>）</p>\n<h4 id=\"要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\"><a href=\"#要启用的监控列表，使用-开头-yaml中的数组-以下表示的用Heartbeat监控ICMP和TCP\" class=\"headerlink\" title=\"要启用的监控列表，使用(-) 开头(yaml中的数组),以下表示的用Heartbeat监控ICMP和TCP\"></a>要启用的监控列表，使用(<code>-</code>) 开头(yaml中的数组),以下表示的用Heartbeat监控<code>ICMP</code>和<code>TCP</code></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> icmp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span>   <span class=\"comment\">#1</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span>         <span class=\"comment\">#2</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost:7\"</span>]  <span class=\"comment\"># default TCP Echo Protocol</span></div><div class=\"line\"><span class=\"attr\">  mode:</span> any                     <span class=\"comment\">#3</span></div><div class=\"line\">  check.send: <span class=\"string\">\"Check\"</span></div><div class=\"line\">  check.receive: <span class=\"string\">\"Check\"</span></div><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://localhost:80/service/status\"</span>]</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>这个ICMP监控，每五秒钟运行一次(e.g. <code>10:00:00</code>,<code>10:00:05</code> …) <code>schedule</code>选项是类<code>cron</code>语法。具体参见<a href=\"https://github.com/gorhill/cronexpr#implementation\">this cronexpr implementation</a></p>\n</li>\n<li><p>这个TCP监控也是每5秒运行一次。Heartbeat添加了<code>@every</code>关键词添加到了<code>conexpr</code>包里</p>\n</li>\n<li><p><code>mode</code>指定是否用来ping一个ip（<code>any</code>）或全解析IPS(<code>all</code>) 。</p>\n</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration-details.html\">原版配置</a></p>\n<h4 id=\"监控选项\"><a href=\"#监控选项\" class=\"headerlink\" title=\"监控选项\"></a>监控选项</h4><h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h6><ul>\n<li><p><code>icmp</code>(IPV4/IPV6)回显请求。当你只是想检查服务是否可用时，可以使用<code>icmp</code>。这个监控器需要管理员权限</p>\n</li>\n<li><p><code>tcp</code>。 <code>tcp</code>监控器是通过TCP协议来连接。可以选择配置<code>tcp</code>监控器，通过发送或接受自定义有效内容(payload)来验证端点(endpoint)是否可用</p>\n</li>\n<li><p><code>http</code>。使用<code>http</code>监控器是通过http协议进行连接。可以选择配置<code>http</code>监控器来验证服务是否返回预期的响应，例如，特定的状态码，响应头或者内容</p>\n</li>\n</ul>\n<p><code>tcp</code>和<code>http</code>都支持SSL/TLS和代理设置</p>\n<h6 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h6><p>监控器名字</p>\n<h6 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h6><p>Boolean值，指定监控模块是否启用，默认为true</p>\n<h6 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h6><p>类cron表达式</p>\n<h6 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h6><p>Boolean值，如果指定了host，是否使用ipv4协议进行pin，默认为true</p>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><p><code>any</code>或者<code>all</code>,默认为<code>any</code>。如果是<code>any</code>，监控器对指定的主机名只ping一个ip地址。如果是<code>all</code>，则ping所有dns能解析出来的ip地址。对于负载均衡监控很有用</p>\n<h6 id=\"watch-poll-file\"><a href=\"#watch-poll-file\" class=\"headerlink\" title=\"watch.poll_file\"></a>watch.poll_file</h6><p><strong>此为实验功能。未来可能更改或删除</strong></p>\n<p>这是JSON格式的监控器配置文件。可以包含多个需要监控的对象。Heartbeat定期检查此文件。Heartbeat会合并heartbeat.yml和json中的配置，有新增的则新增监控实例。josn文件中删除实例后，heartbeat会停止监控该实例。</p>\n<p>每个监控器用协议，主机，端口等参数作为唯一id。如果存在相同的，则使用合并后的最后一个json定义的设置。(以json中定义的为准)。所以为了不重启heartbeat，建议使用<code>watch.poll_file</code>进行配置，但是需要注意，这个是实验室功能，后期可能会修改或者变更</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.monitors:</div><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'*/5 * * * * * *'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\">  watch.poll_file:</div><div class=\"line\"><span class=\"attr\">    path:</span> &#123;path.config&#125;/monitors/dynamic.json</div><div class=\"line\"><span class=\"attr\">    interval:</span> <span class=\"number\">5</span>s</div></pre></td></tr></table></figure>\n<pre><code>path\n\n    指定的JSON文件地址\n\ninterval\n\n    指定间隔时间\n</code></pre><p>JSON文件内容如下<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;\"hosts\": [\"myhost:1234\"], \"schedule\": \"*/15 * * * * * *\"&#125;     #1</div><div class=\"line\">&#123;\"hosts\": [\"tls://otherhost:479\"], \"ssl.certificate_authorities\": [\"path/to/ca/file.pem\"]&#125;      #2</div></pre></td></tr></table></figure></p>\n<ol>\n<li>检查到文件变更后，heartbeat会重启该监控器，并改为每15秒钟运行一次</li>\n<li>heartbeat新增一个监控，使用带有ca证书的基于TLS的连接</li>\n</ol>\n<h5 id=\"ICMP选项\"><a href=\"#ICMP选项\" class=\"headerlink\" title=\"ICMP选项\"></a>ICMP选项</h5><p><code>type</code>设置为<code>icmp</code>时，该项生效。Heartbeat使用ICMP(v4和v6)回显请求来检查配置的主机</p>\n<h6 id=\"hosts\"><a href=\"#hosts\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表</p>\n<h6 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h6><p>等待时间，默认1s</p>\n<h5 id=\"TCP-选项\"><a href=\"#TCP-选项\" class=\"headerlink\" title=\"TCP 选项\"></a>TCP 选项</h5><p><code>type</code>设置为<code>tcp</code>时，该项生效。通过tcp协议发送或接受自定义内容来验证端点是否可用。</p>\n<h6 id=\"hosts-1\"><a href=\"#hosts-1\" class=\"headerlink\" title=\"hosts\"></a>hosts</h6><p>需要ping的主机列表。</p>\n<ul>\n<li>简单的主机名，例如<code>localhost</code> 或者ip地址。如果你指定了这个选项，你必须在指定<code>ports</code>选项。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>主机名+端口，例如<code>localhost:8080</code>。heartbeat根据主机名和端口号进行连接。如果监控器配置了使用ssl，heartbeat使用基于ssl、tls的连接。否则的话，使用普通的tcp连接</li>\n<li>完整的URL，语法为 <code>scheme://&lt;host&gt;:[port]</code><ul>\n<li><code>scheme</code> 为 <code>tcp</code>,<code>plain</code>,<code>ssl</code>或者<code>tls</code>。如果指定的是<code>tcp</code>或者<code>plain</code>，heartbeat使用tcp连接即使监控器配置为使用ssl，如果指定了<code>tls</code>或者<code>ssl</code>,heartbeat建立ssl连接。但是如果监控器没用ssl，则使用系统默认值(暂不支持windows)</li>\n<li><code>host</code>是主机名。</li>\n<li><code>port</code>是端口号。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h6><p>如果<code>hosts</code>中没指定端口，则在此需要配置需要ping的端口列表。例如检查 80,9200,5044端口<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div></pre></td></tr></table></figure></p>\n<h6 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h6><p>验证发送到主机的有效内容(payload)和预期的响应。如果未指定有效内容(payload)，一旦连接成功，则视为可用。如果只指定了发送，未指定接收。接收到任何响应都视为成功。如果只指定接收内容，未指定发送内容。不发送payload，但是在连接中，客户端希望接收到的内容为<code>hello message</code>或者<code>banner</code>(原文: If receive is specified without send, no payload is sent, but the client expects to receive a payload in the form of a “hello message” or “banner” on connect.)<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">7</span>]</div><div class=\"line\">  check.send: <span class=\"string\">'Hello World'</span></div><div class=\"line\">  check.receive: <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"proxy-url\"><a href=\"#proxy-url\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>只可以用socks5代理。<br><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">proxy_url:</span> socks5://user:password@socks5-proxy:<span class=\"number\">2233</span></div></pre></td></tr></table></figure></p>\n<p>使用代理时，主机名实在代理服务器上解析，而不是在客户端解析。可以通过设置 proxy_use_local_resolver来修改</p>\n<h6 id=\"proxy-use-local-resolver\"><a href=\"#proxy-use-local-resolver\" class=\"headerlink\" title=\"proxy_use_local_resolver\"></a>proxy_use_local_resolver</h6><p>Boolean值，用于确定主机名是否本地解析还是在代理服务器解析。默认值为false，即在代理服务器解析。</p>\n<h6 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h6><p>TLS/SSL连接设置。如果<code>check</code>未配置，则监控器将仅检查是否可以建立SSL/TLS连接。此检查可能在TCP级别或在证书验证期间失败</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> tcp</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"myhost\"</span>]</div><div class=\"line\"><span class=\"attr\">  ports:</span> [<span class=\"number\">80</span>, <span class=\"number\">9200</span>, <span class=\"number\">5044</span>]</div><div class=\"line\"><span class=\"attr\">  ssl:</span></div><div class=\"line\"><span class=\"attr\">    certificate_authorities:</span> [<span class=\"string\">'/etc/ca.crt'</span>]</div><div class=\"line\"><span class=\"attr\">    supported_protocols:</span> [<span class=\"string\">\"TLSv1.0\"</span>, <span class=\"string\">\"TLSv1.1\"</span>, <span class=\"string\">\"TLSv1.2\"</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"HTTP选项\"><a href=\"#HTTP选项\" class=\"headerlink\" title=\"HTTP选项\"></a>HTTP选项</h5><p><code>type</code>设置为<code>http</code>时，该项生效。通过http协议验证host是否返回预期响应。</p>\n<h6 id=\"urls\"><a href=\"#urls\" class=\"headerlink\" title=\"urls\"></a>urls</h6><p>用于连接的URLs列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div></pre></td></tr></table></figure>\n<h6 id=\"proxy-url-1\"><a href=\"#proxy-url-1\" class=\"headerlink\" title=\"proxy_url\"></a>proxy_url</h6><p>http代理url。选填项。如果不设置，默认使用系统环境中的<code>HTTP_PROXY</code></p>\n<h6 id=\"username\"><a href=\"#username\" class=\"headerlink\" title=\"username\"></a>username</h6><p>选填项。用来请求身份验证的服务。如果验证身份的服务不指定，很可能返回403</p>\n<h6 id=\"password\"><a href=\"#password\" class=\"headerlink\" title=\"password\"></a>password</h6><p>选填项。同username</p>\n<h6 id=\"ssl-同tcp-ssl\"><a href=\"#ssl-同tcp-ssl\" class=\"headerlink\" title=\"ssl 同tcp ssl\"></a>ssl 同tcp ssl</h6><h6 id=\"check-咳咳，划重点\"><a href=\"#check-咳咳，划重点\" class=\"headerlink\" title=\"check(咳咳，划重点)\"></a>check(咳咳，划重点)</h6><p>选填项。发送<code>request</code>到远程服务，并接受期望响应<code>response</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"http://myhost:80\"</span>]</div><div class=\"line\">  check.request.method: HEAD</div><div class=\"line\">  check.response.status: <span class=\"number\">200</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>check.request</code> 选项</p>\n<ul>\n<li>method - HTTP方法。支持<code>HEAD</code>,<code>GET</code>和<code>POST</code></li>\n<li>headers - 设置请求头</li>\n<li>body - 选填请求体(用于POST方法)</li>\n</ul>\n</li>\n<li><p><code>check.response</code> 选项</p>\n<ul>\n<li>status - 期望的响应码。未设置或者设置的是<code>0</code>，除<code>404</code>以外状态码均可</li>\n<li>headers - 必须响应的header头信息</li>\n<li>body - 必须的响应体</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">- type:</span> http</div><div class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">'@every 5s'</span></div><div class=\"line\"><span class=\"attr\">  urls:</span> [<span class=\"string\">\"https://myhost:80\"</span>]</div><div class=\"line\">check.request:</div><div class=\"line\"><span class=\"attr\">  method:</span> GET</div><div class=\"line\"><span class=\"attr\">  headers:</span></div><div class=\"line\"><span class=\"attr\">    'X-API-Key':</span> <span class=\"string\">'12345-mykey-67890'</span></div><div class=\"line\">check.response:</div><div class=\"line\"><span class=\"attr\">  status:</span> <span class=\"number\">200</span></div><div class=\"line\"><span class=\"attr\">  body:</span> <span class=\"string\">'&#123;\"status\": \"ok\"&#125;'</span></div></pre></td></tr></table></figure>\n<h5 id=\"Scheduler-选项\"><a href=\"#Scheduler-选项\" class=\"headerlink\" title=\"Scheduler 选项\"></a>Scheduler 选项</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">heartbeat.scheduler:</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">  location:</span> <span class=\"string\">'UTC-08:00'</span></div></pre></td></tr></table></figure>\n<p>示例中设置<code>limit</code>为10，确保只有10个IO任务处于活动状态。IO任务可以是通过DNS实际检查或者解析地址</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><p>允许Heartbeat执行的并发IO任务数。如果为0，则没有限制。默认值为0。大多数操作系统文件，将文件描述符限制设置为1024。为了Heartbeat正确运行并且不意外组织输出。应该将<code>limit</code>的值设置低于<code>ulimit</code></p>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>设置时区。默认使用本地实际 <code>localtime</code></p>\n<h4 id=\"发送到Elasticsearch\"><a href=\"#发送到Elasticsearch\" class=\"headerlink\" title=\"发送到Elasticsearch\"></a>发送到Elasticsearch</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\">output.elasticsearch:</div><div class=\"line\"><span class=\"attr\">  hosts:</span> [<span class=\"string\">\"192.168.1.42:9200\"</span>]</div><div class=\"line\">  template.name: <span class=\"string\">\"heartbeat\"</span>                <span class=\"comment\">#1</span></div><div class=\"line\">  template.path: <span class=\"string\">\"heartbeat.template.json\"</span>  <span class=\"comment\">#2</span></div></pre></td></tr></table></figure>\n<p>1,2处是自动在Elasticsearch中加载索引模板，详细信息<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-template.html\">参见官网文档</a></p>\n<p>如果是要输出到Logstash，参见<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/config-heartbeat-logstash.html\">配置Heartbeat使用Logstash</a></p>\n<p><em>如果要测试配置，在heartbeat可执行目录下，运行<code>./heartbeat -configtest -e</code></em></p>\n<h1 id=\"运行Heartbeat\"><a href=\"#运行Heartbeat\" class=\"headerlink\" title=\"运行Heartbeat\"></a>运行Heartbeat</h1><p>deb :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ start</div></pre></td></tr></table></figure></p>\n<p>rpm :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/heartbeat start</div></pre></td></tr></table></figure></p>\n<p>mac :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ./heartbeat <span class=\"_\">-e</span> -c heartbeat.yml <span class=\"_\">-d</span> <span class=\"string\">\"publish\"</span></div></pre></td></tr></table></figure></p>\n<p>win : <strong>管理员权限</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">net start heartbeat</div></pre></td></tr></table></figure></p>\n<p>Windows默认将log输出在<code>${Heartbeat_home}\\Logs</code>文件夹</p>\n<p><em>目前为止，Heartbeat已经开始检查你的服务状态并且发送相应的数据到你定义的输出点了(logstash/elasticsearch)</em></p>\n<h1 id=\"命令行选项\"><a href=\"#命令行选项\" class=\"headerlink\" title=\"命令行选项\"></a>命令行选项</h1><p><em>命令行运行<code>./heartbeat -h</code>查看完整的选项列表</em></p>\n<p><code>-E &lt;setting&gt;=&lt;value&gt;</code></p>\n<pre><code>覆盖配置文件中的某个配置例如 `./heartbeat -c heartbeat.yml -E name=mybeat`\n</code></pre><p><code>-N</code></p>\n<pre><code>禁止发送数据到指定的输出。这个选项在测试Beat时很有用\n</code></pre><p><code>-c &lt;file&gt;</code></p>\n<pre><code>指定heartbeat配置文件\n</code></pre><p><code>configtest</code></p>\n<pre><code>测试配置文件是否可用，然后退出。在排除配置文件错误时很有用\n</code></pre><p><code>-cpuprofile &lt;output file&gt;</code></p>\n<pre><code>将cpu配置信息输出到指定文件。在排除故障的时候很有用\n</code></pre><p><code>-d &lt;selectors&gt;</code></p>\n<pre><code>使用指定的选择器进行调试。参数用逗号隔开，或者使用 `-d &quot;*&quot;`调试所有的组件。例如`-d &quot;publish&quot;`显示所有`&quot;publish&quot;`相关的信息\n</code></pre><p><code>-e</code></p>\n<pre><code>禁用syslog/file输出，只记录到stderr\n</code></pre><p><code>-httpprof [&lt;host&gt;]:&lt;port&gt;</code></p>\n<pre><code>启动http服务器进行性能分析\n</code></pre><p><code>-memprofile &lt;output file&gt;</code></p>\n<pre><code>将内存配置信息写入到指定文件。\n</code></pre><p><code>-path.config</code></p>\n<pre><code>设置配置文件的路径\n</code></pre><p><code>-path.data</code></p>\n<pre><code>设置data文件路径\n</code></pre><p><code>-path.home</code></p>\n<pre><code>设置可执行文件所在路径\n</code></pre><p><code>-path.logs</code></p>\n<pre><code>设置日志文件的路径\n</code></pre><p><code>-v</code></p>\n<pre><code>启用详细输出，以显示INFO级别日志\n</code></pre><p><code>-version</code></p>\n<pre><code>显示beat版本并退出\n</code></pre><p>本文只是针对官网文档进行了部分翻译。其他像是<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuring-howto-heartbeat.html\">输出到logstash,redis等配置信息</a>以及<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/configuration-processors.html\">Processors</a>部分<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields.html\">Exported Fields</a>部分,<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/securing-heartbeat.html\">Securing Heartbeat</a>暂不翻译</p>\n<h1 id=\"Heartbeat-ElastAlert-心跳报警\"><a href=\"#Heartbeat-ElastAlert-心跳报警\" class=\"headerlink\" title=\"Heartbeat+ElastAlert 心跳报警\"></a>Heartbeat+ElastAlert 心跳报警</h1><p>ElastAlert如何使用， <a href=\"https://anjia.ml/2017/03/03/heartbeat/\">参见另外一篇文章</a> 。</p>\n<p>监控服务(主机能否ping通，端口是否开放，http响应是否合法)。使用Heartbeat如果up=true则说明验证通过。服务可用。<a href=\"https://www.elastic.co/guide/en/beats/heartbeat/current/exported-fields-common.html#_up\">common fields#_up</a> 。</p>\n<p>使用ElastAlert的<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#change\">change rule</a>。具体示例参见 <code>example_rules/example_change.yaml</code>文件。为啥用change rule，是因为一般服务就两种状态，up/down 我们只需要在状态切换(可用-&gt;不可用/不可用-&gt;可用)时获取到通知即可</p>\n<p>我的配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Alert when some field changes between documents</span></div><div class=\"line\"><span class=\"comment\"># This rule would alert on documents similar to the following:</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'USA', '@timestamp': '2014-10-15T00:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># &#123;'username': 'bob', 'country_name': 'Russia', '@timestamp': '2014-10-15T05:00:00'&#125;</span></div><div class=\"line\"><span class=\"comment\"># Because the user (query_key) bob logged in from different countries (compare_key) in the same day (timeframe)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch host</span></div><div class=\"line\"><span class=\"comment\"># es_host: elasticsearch.example.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional)</span></div><div class=\"line\"><span class=\"comment\"># Elasticsearch port</span></div><div class=\"line\"><span class=\"comment\"># es_port: 14900</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) Connect with SSL to Elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#use_ssl: True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Optional) basic-auth username and password for elasticsearch</span></div><div class=\"line\"><span class=\"comment\">#es_username: someusername</span></div><div class=\"line\"><span class=\"comment\">#es_password: somepassword</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Rule name, must be unique</span></div><div class=\"line\"><span class=\"attr\">name:</span> heartbeat-monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Type of alert.</span></div><div class=\"line\"><span class=\"comment\"># the change rule will alert when a certain field changes in two documents within a timeframe</span></div><div class=\"line\"><span class=\"attr\">type:</span> change</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># Index to search, wildcard supported</span></div><div class=\"line\"><span class=\"attr\">index:</span> heartbeat-*</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The field to look for changes in</span></div><div class=\"line\"><span class=\"attr\">compare_key:</span> up</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># Ignore documents without the compare_key (country_name) field</span></div><div class=\"line\"><span class=\"attr\">ignore_null:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The change must occur in two documents with the same query_key</span></div><div class=\"line\"><span class=\"attr\">query_key:</span> monitor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required, change specific)</span></div><div class=\"line\"><span class=\"comment\"># The value of compare_key must change in two events that are less than timeframe apart to trigger an alert</span></div><div class=\"line\"><span class=\"attr\">num_events:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">timeframe:</span></div><div class=\"line\"><span class=\"attr\">    minutes:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># (Required)</span></div><div class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></div><div class=\"line\"><span class=\"attr\">alert:</span></div><div class=\"line\"><span class=\"comment\">#- \"email\"</span></div><div class=\"line\"><span class=\"comment\">#- \"debug\"</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"elastalert_modules.wechat_qiye_alert.WeChatAlerter\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#后台登陆后【设置】-&gt;【权限管理】-&gt;【普通管理组】-&gt;【创建并设置通讯录和应用权限】-&gt;【CorpID，Secret】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号的appid</span></div><div class=\"line\"><span class=\"attr\">corp_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#设置微信企业号的Secret</span></div><div class=\"line\"><span class=\"attr\">secret:</span> xxx</div><div class=\"line\"><span class=\"comment\">#后台登陆后【应用中心】-&gt;【选择应用】-&gt;【应用id】</span></div><div class=\"line\"><span class=\"comment\">#设置微信企业号应用id</span></div><div class=\"line\"><span class=\"attr\">agent_id:</span> xxx</div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到部门</span></div><div class=\"line\"><span class=\"comment\">#party_id: xxx</span></div><div class=\"line\"><span class=\"comment\">#如果标签下无用户，则推送到用户</span></div><div class=\"line\"><span class=\"comment\">#user_id: xxx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">tag_id:</span> xxx</div></pre></td></tr></table></figure>\n<p>不过elastalert有个代码逻辑错误。我已提交<a href=\"https://github.com/Yelp/elastalert/pull/926\">Pull request#926</a>和<a href=\"https://github.com/Yelp/elastalert/issues/925\">Issue#925</a> 。 如果官方不采纳的话，可以手动修改<code>elastalert\\ruletypes.py#L135</code>将 <code>not val</code>改成 <code>val is None</code>具体原因参见<a href=\"https://github.com/Yelp/elastalert/issues/925\">Issue#925</a></p>\n<p>如果正常的话，先将Heartbeat监听的服务启动，输出到Elasticsearch后，再停用。再次写入到Elasticsearch后。Elastalert控制台也会提示<code>xx hits/xx hits</code>并发送微信。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/03/58b9040175781.png\" alt=\"snipaste20170303_134853.png\"></p>\n"},{"title":"hexo搭建博客","date":"2017-02-03T08:07:16.000Z","_content":"本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","source":"_posts/hexo-github-pages-blog.md","raw":"title: hexo搭建博客\ndate: 2017-02-03 16:07:16\ntags: [blog,hexo]\ncategories: [编程]\n---\n本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客\n\n<!-- more -->\n\n## 配置环境\n### Nodejs\n[安装Nodejs](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n默认安装在c盘,具体的默认参数可以通过 `npm config ls -l` 进行查看,输出类似下面的信息, 注意 `; ...` 开头的都是注释内容,不生效\n\n```bash\n\n; cli configs\nlong = true\nscope = \"\"\nuser-agent = \"npm/4.0.5 node/v7.4.0 win32 x64\"\n\n; builtin config undefined\n; prefix = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm\" (overridden)\n\n\n; cache = \"C:\\\\Users\\\\{userName}\\\\AppData\\\\Roaming\\\\npm-cache\" (overridden)\ncache-lock-retries = 10\ncache-lock-stale = 60000\ncache-lock-wait = 10000\ncache-max = null\n\n```\n\n修改默认库路径\n\n```bash\n\nnpm config set cache \"${NodejsHome}\\node_cache\" # 将${NodejsHome}换成实际安装路径\n\nnpm config set prefix \"${NodejsHome}\"\n\n```\n\n`npm config set prefix` 设置成安装路径的好处是 `npm install -g xxx` 安装的库在执行时不会报命令找不到(否则还需要改系统的`Path`环境变量)\n\n天朝网络环境比较差,需要使用 [淘宝npm镜像](http://npm.taobao.org/)\n\n```bash\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n```\n\n安装成功后,以后使用`npm install`的统统可以改成`cnpm install`\n\n\n\n### Git\n\n下载地址: [http://git-scm.com/download/](http://git-scm.com/download/)\n\n### Hexo\n\n```bash\n\ncd d:\\blog # 创建目录\n\ncnpm install hexo-cli -g # 全局安装hexo\n\nhexo init # 初始化当前目录(hexo init blog 创建blog并初始化)\n\ncnpm install # 使用淘宝npm镜像加载依赖\n\nhexo g # 生成静态代码\n\nhexo s # 启动服务,在http://localhost:4000/查看\n\n```\n\n打开 [http://localhost:4000/](http://localhost:4000/) 已经可以看到默认的一篇blog了\n\n```bash\n\n# 命令缩写\n\nhexo n == hexo new\n\nhexo g == hexo generate\n\nhexo s == hexo server\n\nhexo d == hexo deploy\n\n# 命令组合\nhexo d -g # 生成并部署\n\nhexo s -g # 生成并本地预览\n\n```\n\n如果是windows打开git-bash.exe\n\n### GitHub 配置\n\n#### 生成rsa文件\n\n```bash\n\nssh-keygen\n\n# 输入编译代码\nEnter file in which to save the key (/c/Users/{userName}/.ssh/id_rsa): # rsakey文件名,假设使用默认的id_rsa\nEnter passphrase (empty for no passphrase): # 密码\nEnter same passphrase again: #确认密码\n\n```\n\n#### 文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\n\n```\nssh-rsa\n\nxxxx 具体的key xxxxxx  userName@email\n\n```\n\n#### github 设置ssh key\n\n左上角 用户->settings->Personal settings->SSH and GPG keys->New SSH key->Title 随意->Key 贴上一步的ssh-rsa开头的一串文本 ->Add SSH key\n\n#### 创建仓库\n\n左上角 用户旁边 + 号->New repository->Repository name 填${userName}.github.io ${userName}为账号名->Create repository\n\n### 提交github并自动发布\n\n#### 提交代码到github\n\n```bash\n\ngit init # 初始化本地仓库\n\ngit add . # 添加文件\n\ngit commit -m '初始化' # 提交到本地仓库并指定message\n\ngit checkout -b blog-source # 创建分支,为了使用 travis-ci 自动构建\n\ngit remote add origin git@github.com:${userName}/${userName}.github.io.git # 添加远程仓库地址 将 ${userName} 替换成实际账户名\n\ngit push origin blog-source:blog-source # 推送到github远程仓库分支\n\n```\n\n#### 创建 `.travis.yml` 文件\n\n```yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n\nbefore_script:\n  - npm install hexo-helper-qrcode --save\n  - npm install hexo-generator-feed --save\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  # 如果设置自定义域名,则自动生成CNAME文件\n  - if [ $MY_DOMAIN ]; then echo ${MY_DOMAIN} > CNAME; fi\n  - git init\n  - git config user.name \"${userName}\"\n  - git config user.email \"${email}\"\n  - git add .\n  - git commit -m \"Update docs\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n\nbranches:\n  only:\n    - blog-source\nenv:\n global:\n   - GH_REF: github.com/${userName}/${userName}.github.io.git\n   # 自定义域名\n   - MY_DOMAIN: anjia.ml\n```\n\n将${userName}和${email}替换成实际值\n\n参考 [简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://www.jianshu.com/p/e22c13d85659)\n\n通过travis自动构建并发布\n\n### 使用https 自定义域名\n[开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​](https://zhuanlan.zhihu.com/p/22667528)\n\n","slug":"hexo-github-pages-blog","published":1,"updated":"2017-02-08T14:16:14.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5v80009hgdop8rsx6cn","content":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>\n<a id=\"more\"></a>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">; cli configs</div><div class=\"line\">long = <span class=\"literal\">true</span></div><div class=\"line\">scope = <span class=\"string\">\"\"</span></div><div class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></div><div class=\"line\"></div><div class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</div><div class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</div><div class=\"line\">cache-lock-retries = 10</div><div class=\"line\">cache-lock-stale = 60000</div><div class=\"line\">cache-lock-wait = 10000</div><div class=\"line\">cache-max = null</div></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></div><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"external\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></div><div class=\"line\"></div><div class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></div><div class=\"line\"></div><div class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></div><div class=\"line\"></div><div class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></div><div class=\"line\"></div><div class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></div><div class=\"line\"></div><div class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></div></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令缩写</span></div><div class=\"line\"></div><div class=\"line\">hexo n == hexo new</div><div class=\"line\"></div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\"></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\"></div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令组合</span></div><div class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></div><div class=\"line\"></div><div class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></div></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ssh-keygen</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输入编译代码</span></div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></div><div class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></div></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh-rsa</div><div class=\"line\"></div><div class=\"line\">xxxx 具体的key xxxxxx  userName@email</div></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></div><div class=\"line\"></div><div class=\"line\">git add . <span class=\"comment\"># 添加文件</span></div><div class=\"line\"></div><div class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></div><div class=\"line\"></div><div class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></div><div class=\"line\"></div><div class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></div><div class=\"line\"></div><div class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></div></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"attr\">node_js:</span> stable</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></div><div class=\"line\"><span class=\"attr\">install:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">before_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-helper-qrcode --save</div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-generator-feed --save</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> hexo g</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">after_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> cd ./public</div><div class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></div><div class=\"line\"><span class=\"bullet\">  -</span> if [ $MY_DOMAIN ]; then echo $&#123;MY_DOMAIN&#125; &gt; CNAME; fi</div><div class=\"line\"><span class=\"bullet\">  -</span> git init</div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.name <span class=\"string\">\"$&#123;userName&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.email <span class=\"string\">\"$&#123;email&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git add .</div><div class=\"line\"><span class=\"bullet\">  -</span> git commit -m <span class=\"string\">\"Update docs\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git push --force --quiet <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> master:master</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> blog-source</div><div class=\"line\"><span class=\"attr\">env:</span></div><div class=\"line\"><span class=\"attr\"> global:</span></div><div class=\"line\"><span class=\"attr\">   - GH_REF:</span> github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</div><div class=\"line\">   <span class=\"comment\"># 自定义域名</span></div><div class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> anjia.ml</div></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"external\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\" target=\"_blank\" rel=\"external\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>\n","excerpt":"<p>本文主要讲解如何通过github pages功能从零开始搭建一个炫酷的个人技术博客</p>","more":"<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">安装Nodejs</a></p>\n<p>默认安装在c盘,具体的默认参数可以通过 <code>npm config ls -l</code> 进行查看,输出类似下面的信息, 注意 <code>; ...</code> 开头的都是注释内容,不生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">; cli configs</div><div class=\"line\">long = <span class=\"literal\">true</span></div><div class=\"line\">scope = <span class=\"string\">\"\"</span></div><div class=\"line\">user-agent = <span class=\"string\">\"npm/4.0.5 node/v7.4.0 win32 x64\"</span></div><div class=\"line\"></div><div class=\"line\">; <span class=\"built_in\">builtin</span> config undefined</div><div class=\"line\">; prefix = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm\"</span> (overridden)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">; cache = <span class=\"string\">\"C:\\\\Users\\\\&#123;userName&#125;\\\\AppData\\\\Roaming\\\\npm-cache\"</span> (overridden)</div><div class=\"line\">cache-lock-retries = 10</div><div class=\"line\">cache-lock-stale = 60000</div><div class=\"line\">cache-lock-wait = 10000</div><div class=\"line\">cache-max = null</div></pre></td></tr></table></figure>\n<p>修改默认库路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\\node_cache\"</span> <span class=\"comment\"># 将$&#123;NodejsHome&#125;换成实际安装路径</span></div><div class=\"line\"></div><div class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"<span class=\"variable\">$&#123;NodejsHome&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<p><code>npm config set prefix</code> 设置成安装路径的好处是 <code>npm install -g xxx</code> 安装的库在执行时不会报命令找不到(否则还需要改系统的<code>Path</code>环境变量)</p>\n<p>天朝网络环境比较差,需要使用 <a href=\"http://npm.taobao.org/\">淘宝npm镜像</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>安装成功后,以后使用<code>npm install</code>的统统可以改成<code>cnpm install</code></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>下载地址: <a href=\"http://git-scm.com/download/\">http://git-scm.com/download/</a></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> d:\\blog <span class=\"comment\"># 创建目录</span></div><div class=\"line\"></div><div class=\"line\">cnpm install hexo-cli -g <span class=\"comment\"># 全局安装hexo</span></div><div class=\"line\"></div><div class=\"line\">hexo init <span class=\"comment\"># 初始化当前目录(hexo init blog 创建blog并初始化)</span></div><div class=\"line\"></div><div class=\"line\">cnpm install <span class=\"comment\"># 使用淘宝npm镜像加载依赖</span></div><div class=\"line\"></div><div class=\"line\">hexo g <span class=\"comment\"># 生成静态代码</span></div><div class=\"line\"></div><div class=\"line\">hexo s <span class=\"comment\"># 启动服务,在http://localhost:4000/查看</span></div></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 已经可以看到默认的一篇blog了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令缩写</span></div><div class=\"line\"></div><div class=\"line\">hexo n == hexo new</div><div class=\"line\"></div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\"></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\"></div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 命令组合</span></div><div class=\"line\">hexo d -g <span class=\"comment\"># 生成并部署</span></div><div class=\"line\"></div><div class=\"line\">hexo s -g <span class=\"comment\"># 生成并本地预览</span></div></pre></td></tr></table></figure>\n<p>如果是windows打开git-bash.exe</p>\n<h3 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h3><h4 id=\"生成rsa文件\"><a href=\"#生成rsa文件\" class=\"headerlink\" title=\"生成rsa文件\"></a>生成rsa文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ssh-keygen</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输入编译代码</span></div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/&#123;userName&#125;/.ssh/id_rsa): <span class=\"comment\"># rsakey文件名,假设使用默认的id_rsa</span></div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): <span class=\"comment\"># 密码</span></div><div class=\"line\">Enter same passphrase again: <span class=\"comment\">#确认密码</span></div></pre></td></tr></table></figure>\n<h4 id=\"文本编辑器打开-ssh-id-rsa-pub-并复制内容\"><a href=\"#文本编辑器打开-ssh-id-rsa-pub-并复制内容\" class=\"headerlink\" title=\"文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容\"></a>文本编辑器打开 ~/.ssh/id_rsa.pub 并复制内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh-rsa</div><div class=\"line\"></div><div class=\"line\">xxxx 具体的key xxxxxx  userName@email</div></pre></td></tr></table></figure>\n<h4 id=\"github-设置ssh-key\"><a href=\"#github-设置ssh-key\" class=\"headerlink\" title=\"github 设置ssh key\"></a>github 设置ssh key</h4><p>左上角 用户-&gt;settings-&gt;Personal settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Title 随意-&gt;Key 贴上一步的ssh-rsa开头的一串文本 -&gt;Add SSH key</p>\n<h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4><p>左上角 用户旁边 + 号-&gt;New repository-&gt;Repository name 填${userName}.github.io ${userName}为账号名-&gt;Create repository</p>\n<h3 id=\"提交github并自动发布\"><a href=\"#提交github并自动发布\" class=\"headerlink\" title=\"提交github并自动发布\"></a>提交github并自动发布</h3><h4 id=\"提交代码到github\"><a href=\"#提交代码到github\" class=\"headerlink\" title=\"提交代码到github\"></a>提交代码到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git init <span class=\"comment\"># 初始化本地仓库</span></div><div class=\"line\"></div><div class=\"line\">git add . <span class=\"comment\"># 添加文件</span></div><div class=\"line\"></div><div class=\"line\">git commit -m <span class=\"string\">'初始化'</span> <span class=\"comment\"># 提交到本地仓库并指定message</span></div><div class=\"line\"></div><div class=\"line\">git checkout -b blog-source <span class=\"comment\"># 创建分支,为了使用 travis-ci 自动构建</span></div><div class=\"line\"></div><div class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$&#123;userName&#125;</span>/<span class=\"variable\">$&#123;userName&#125;</span>.github.io.git <span class=\"comment\"># 添加远程仓库地址 将 $&#123;userName&#125; 替换成实际账户名</span></div><div class=\"line\"></div><div class=\"line\">git push origin blog-source:blog-source <span class=\"comment\"># 推送到github远程仓库分支</span></div></pre></td></tr></table></figure>\n<h4 id=\"创建-travis-yml-文件\"><a href=\"#创建-travis-yml-文件\" class=\"headerlink\" title=\"创建 .travis.yml 文件\"></a>创建 <code>.travis.yml</code> 文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"attr\">node_js:</span> stable</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></div><div class=\"line\"><span class=\"attr\">install:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">before_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-helper-qrcode --save</div><div class=\"line\"><span class=\"bullet\">  -</span> npm install hexo-generator-feed --save</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> hexo g</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">after_script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> cd ./public</div><div class=\"line\">  <span class=\"comment\"># 如果设置自定义域名,则自动生成CNAME文件</span></div><div class=\"line\"><span class=\"bullet\">  -</span> if [ $MY_DOMAIN ]; then echo $&#123;MY_DOMAIN&#125; &gt; CNAME; fi</div><div class=\"line\"><span class=\"bullet\">  -</span> git init</div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.name <span class=\"string\">\"$&#123;userName&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git config user.email <span class=\"string\">\"$&#123;email&#125;\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git add .</div><div class=\"line\"><span class=\"bullet\">  -</span> git commit -m <span class=\"string\">\"Update docs\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> git push --force --quiet <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> master:master</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> blog-source</div><div class=\"line\"><span class=\"attr\">env:</span></div><div class=\"line\"><span class=\"attr\"> global:</span></div><div class=\"line\"><span class=\"attr\">   - GH_REF:</span> github.com/$&#123;userName&#125;/$&#123;userName&#125;.github.io.git</div><div class=\"line\">   <span class=\"comment\"># 自定义域名</span></div><div class=\"line\"><span class=\"attr\">   - MY_DOMAIN:</span> anjia.ml</div></pre></td></tr></table></figure>\n<p>将${userName}和${email}替换成实际值</p>\n<p>参考 <a href=\"http://www.jianshu.com/p/e22c13d85659\">简书-手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>通过travis自动构建并发布</p>\n<h3 id=\"使用https-自定义域名\"><a href=\"#使用https-自定义域名\" class=\"headerlink\" title=\"使用https 自定义域名\"></a>使用https 自定义域名</h3><p><a href=\"https://zhuanlan.zhihu.com/p/22667528\">开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持​</a></p>"},{"title":"jdk绿色免安装","date":"2017-05-17T04:39:16.000Z","_content":"\n## windows 免安装\n\njava自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。\n\nwindows安装版有一下坏处\n1. 会写注册表\n2. 会将java.exe,javaw.exe 等解压到`C:\\Windows\\System32`或者`C:\\Windows\\SysWOW64` \n3. 会将定期更新程序设置开机自启动，发现新版本弹窗提示\n4. 会在`PATH`中写一个oracle的javapath,还会加上`jre\\bin`\n\n好处就是安装方便\n\n\n今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的`%JAVA_HOME%\\bin;`又配了一个`%JAVA_HOME%\\jre\\bin;`导致出了一个很诡异的错误。\n\n\n下面说一下，如何免安装\n\n从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载最新的jdk windows安装版\ne.g.\n`jdk-8u131-windows-x64.exe`\n\n用解压缩软件解压到`E:\\jdk-8u131-windows-x64\\` `Win+R`->`cmd`打开命令行\n\n```\ncd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\nextrac32.exe 111\n\n:: 此时解压出 tools.zip 文件\n:: 打开当前文件夹\nexplorer.exe .\n:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`\n\n:: 将 .pack文件改成.jar文件\n\ncd tools\nfor /r %x in (*.pack) do .\\bin\\unpack200 -r \"%x\" \"%~dx%~px%~nx.jar\"\n\n:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步\n\ncd ..\\..\\JAVA_CAB9\nextrac32 110\n\n:: 将src.zip移动到tools文件夹\n\nmove src.zip ..\\JAVA_CAB10\\tools\\\n\n:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk\n\nxcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk\n\n:: 删除 E:\\jdk-8u131-windows-x64 文件夹\ncd / && rd /s /q E:\\jdk-8u131-windows-x64\n```\n\n设置环境变量 \n增加 `JAVA_HOME` `d:\\jdk`\n\n修改`PATH`\n\n追加 `;%JAVA_HOME%\\bin;`\n\n增加 `CLASSPATH`\n\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n设置环境变量后，需要重新打开`cmd`\n\n```\njava -version && javac -version\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)\njavac 1.8.0_131\n```\n\n\n## linux 免安装\n```bash\n\n# 下载文件\n$ wget -P ~/downloads --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz\n\n# 解压\n$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/local/\n\n#创建软连接\n$ sudo ln -sf /usr/local/jdk1.8.0_121 /usr/local/jdk\n\n$ sudo vi /etc/profile\n\n#设置java环境\nexport JAVA_HOME=/usr/local/jdk\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar;:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$PATH\n\n#保存并退出\n\n#使配置生效\n$ source /etc/profile\n```\n\n本人原创\n\n博客 https://anjia.ml/2017/05/17/jdk-zip/\n简书 http://www.jianshu.com/p/5dc20d5d4f5c\n掘金 https://juejin.im/post/591bdb222f301e006bcde36b","source":"_posts/jdk-zip.md","raw":"---\ntitle: jdk绿色免安装\ndate: 2017-05-17 12:39:16\ntags: java\n---\n\n## windows 免安装\n\njava自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。\n\nwindows安装版有一下坏处\n1. 会写注册表\n2. 会将java.exe,javaw.exe 等解压到`C:\\Windows\\System32`或者`C:\\Windows\\SysWOW64` \n3. 会将定期更新程序设置开机自启动，发现新版本弹窗提示\n4. 会在`PATH`中写一个oracle的javapath,还会加上`jre\\bin`\n\n好处就是安装方便\n\n\n今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的`%JAVA_HOME%\\bin;`又配了一个`%JAVA_HOME%\\jre\\bin;`导致出了一个很诡异的错误。\n\n\n下面说一下，如何免安装\n\n从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载最新的jdk windows安装版\ne.g.\n`jdk-8u131-windows-x64.exe`\n\n用解压缩软件解压到`E:\\jdk-8u131-windows-x64\\` `Win+R`->`cmd`打开命令行\n\n```\ncd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\nextrac32.exe 111\n\n:: 此时解压出 tools.zip 文件\n:: 打开当前文件夹\nexplorer.exe .\n:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`\n\n:: 将 .pack文件改成.jar文件\n\ncd tools\nfor /r %x in (*.pack) do .\\bin\\unpack200 -r \"%x\" \"%~dx%~px%~nx.jar\"\n\n:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步\n\ncd ..\\..\\JAVA_CAB9\nextrac32 110\n\n:: 将src.zip移动到tools文件夹\n\nmove src.zip ..\\JAVA_CAB10\\tools\\\n\n:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk\n\nxcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk\n\n:: 删除 E:\\jdk-8u131-windows-x64 文件夹\ncd / && rd /s /q E:\\jdk-8u131-windows-x64\n```\n\n设置环境变量 \n增加 `JAVA_HOME` `d:\\jdk`\n\n修改`PATH`\n\n追加 `;%JAVA_HOME%\\bin;`\n\n增加 `CLASSPATH`\n\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n设置环境变量后，需要重新打开`cmd`\n\n```\njava -version && javac -version\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)\njavac 1.8.0_131\n```\n\n\n## linux 免安装\n```bash\n\n# 下载文件\n$ wget -P ~/downloads --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz\n\n# 解压\n$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/local/\n\n#创建软连接\n$ sudo ln -sf /usr/local/jdk1.8.0_121 /usr/local/jdk\n\n$ sudo vi /etc/profile\n\n#设置java环境\nexport JAVA_HOME=/usr/local/jdk\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar;:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$PATH\n\n#保存并退出\n\n#使配置生效\n$ source /etc/profile\n```\n\n本人原创\n\n博客 https://anjia.ml/2017/05/17/jdk-zip/\n简书 http://www.jianshu.com/p/5dc20d5d4f5c\n掘金 https://juejin.im/post/591bdb222f301e006bcde36b","slug":"jdk-zip","published":1,"updated":"2017-05-17T05:17:57.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5vc000bhgdoofco4n3k","content":"<h2 id=\"windows-免安装\"><a href=\"#windows-免安装\" class=\"headerlink\" title=\"windows 免安装\"></a>windows 免安装</h2><p>java自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。</p>\n<p>windows安装版有一下坏处</p>\n<ol>\n<li>会写注册表</li>\n<li>会将java.exe,javaw.exe 等解压到<code>C:\\Windows\\System32</code>或者<code>C:\\Windows\\SysWOW64</code> </li>\n<li>会将定期更新程序设置开机自启动，发现新版本弹窗提示</li>\n<li>会在<code>PATH</code>中写一个oracle的javapath,还会加上<code>jre\\bin</code></li>\n</ol>\n<p>好处就是安装方便</p>\n<p>今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的<code>%JAVA_HOME%\\bin;</code>又配了一个<code>%JAVA_HOME%\\jre\\bin;</code>导致出了一个很诡异的错误。</p>\n<p>下面说一下，如何免安装</p>\n<p>从 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载最新的jdk windows安装版<br>e.g.<br><code>jdk-8u131-windows-x64.exe</code></p>\n<p>用解压缩软件解压到<code>E:\\jdk-8u131-windows-x64\\</code> <code>Win+R</code>-&gt;<code>cmd</code>打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10</div><div class=\"line\">extrac32.exe 111</div><div class=\"line\"></div><div class=\"line\">:: 此时解压出 tools.zip 文件</div><div class=\"line\">:: 打开当前文件夹</div><div class=\"line\">explorer.exe .</div><div class=\"line\">:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`</div><div class=\"line\"></div><div class=\"line\">:: 将 .pack文件改成.jar文件</div><div class=\"line\"></div><div class=\"line\">cd tools</div><div class=\"line\">for /r %x in (*.pack) do .\\bin\\unpack200 -r &quot;%x&quot; &quot;%~dx%~px%~nx.jar&quot;</div><div class=\"line\"></div><div class=\"line\">:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步</div><div class=\"line\"></div><div class=\"line\">cd ..\\..\\JAVA_CAB9</div><div class=\"line\">extrac32 110</div><div class=\"line\"></div><div class=\"line\">:: 将src.zip移动到tools文件夹</div><div class=\"line\"></div><div class=\"line\">move src.zip ..\\JAVA_CAB10\\tools\\</div><div class=\"line\"></div><div class=\"line\">:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk</div><div class=\"line\"></div><div class=\"line\">xcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk</div><div class=\"line\"></div><div class=\"line\">:: 删除 E:\\jdk-8u131-windows-x64 文件夹</div><div class=\"line\">cd / &amp;&amp; rd /s /q E:\\jdk-8u131-windows-x64</div></pre></td></tr></table></figure>\n<p>设置环境变量<br>增加 <code>JAVA_HOME</code> <code>d:\\jdk</code></p>\n<p>修改<code>PATH</code></p>\n<p>追加 <code>;%JAVA_HOME%\\bin;</code></p>\n<p>增加 <code>CLASSPATH</code></p>\n<p><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p>设置环境变量后，需要重新打开<code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">java -version &amp;&amp; javac -version</div><div class=\"line\">java version &quot;1.8.0_131&quot;</div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b15)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)</div><div class=\"line\">javac 1.8.0_131</div></pre></td></tr></table></figure>\n<h2 id=\"linux-免安装\"><a href=\"#linux-免安装\" class=\"headerlink\" title=\"linux 免安装\"></a>linux 免安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 下载文件</span></div><div class=\"line\">$ wget -P ~/downloads --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 解压</span></div><div class=\"line\">$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/<span class=\"built_in\">local</span>/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建软连接</span></div><div class=\"line\">$ sudo ln -sf /usr/<span class=\"built_in\">local</span>/jdk1.8.0_121 /usr/<span class=\"built_in\">local</span>/jdk</div><div class=\"line\"></div><div class=\"line\">$ sudo vi /etc/profile</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置java环境</span></div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk</div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar;:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$CLASSPATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#保存并退出</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使配置生效</span></div><div class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n<p>本人原创</p>\n<p>博客 <a href=\"https://anjia.ml/2017/05/17/jdk-zip/\">https://anjia.ml/2017/05/17/jdk-zip/</a><br>简书 <a href=\"http://www.jianshu.com/p/5dc20d5d4f5c\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/5dc20d5d4f5c</a><br>掘金 <a href=\"https://juejin.im/post/591bdb222f301e006bcde36b\" target=\"_blank\" rel=\"external\">https://juejin.im/post/591bdb222f301e006bcde36b</a></p>\n","excerpt":"","more":"<h2 id=\"windows-免安装\"><a href=\"#windows-免安装\" class=\"headerlink\" title=\"windows 免安装\"></a>windows 免安装</h2><p>java自从被oracle收购后，windows下新的版本只有安装版。没有zip免安装。</p>\n<p>windows安装版有一下坏处</p>\n<ol>\n<li>会写注册表</li>\n<li>会将java.exe,javaw.exe 等解压到<code>C:\\Windows\\System32</code>或者<code>C:\\Windows\\SysWOW64</code> </li>\n<li>会将定期更新程序设置开机自启动，发现新版本弹窗提示</li>\n<li>会在<code>PATH</code>中写一个oracle的javapath,还会加上<code>jre\\bin</code></li>\n</ol>\n<p>好处就是安装方便</p>\n<p>今天给同事处理问题时，就因为他电脑装了jdk7和jdk8两个安装版，并且path配置的<code>%JAVA_HOME%\\bin;</code>又配了一个<code>%JAVA_HOME%\\jre\\bin;</code>导致出了一个很诡异的错误。</p>\n<p>下面说一下，如何免安装</p>\n<p>从 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载最新的jdk windows安装版<br>e.g.<br><code>jdk-8u131-windows-x64.exe</code></p>\n<p>用解压缩软件解压到<code>E:\\jdk-8u131-windows-x64\\</code> <code>Win+R</code>-&gt;<code>cmd</code>打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd /d E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10</div><div class=\"line\">extrac32.exe 111</div><div class=\"line\"></div><div class=\"line\">:: 此时解压出 tools.zip 文件</div><div class=\"line\">:: 打开当前文件夹</div><div class=\"line\">explorer.exe .</div><div class=\"line\">:: 将tools.zip 用解压软件解压到当前文件夹,e.g. `E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools`</div><div class=\"line\"></div><div class=\"line\">:: 将 .pack文件改成.jar文件</div><div class=\"line\"></div><div class=\"line\">cd tools</div><div class=\"line\">for /r %x in (*.pack) do .\\bin\\unpack200 -r &quot;%x&quot; &quot;%~dx%~px%~nx.jar&quot;</div><div class=\"line\"></div><div class=\"line\">:: 解压 src.zip 如果不需要源码 src.zip 可忽略此步</div><div class=\"line\"></div><div class=\"line\">cd ..\\..\\JAVA_CAB9</div><div class=\"line\">extrac32 110</div><div class=\"line\"></div><div class=\"line\">:: 将src.zip移动到tools文件夹</div><div class=\"line\"></div><div class=\"line\">move src.zip ..\\JAVA_CAB10\\tools\\</div><div class=\"line\"></div><div class=\"line\">:: 将tools文件夹里的内容复制到指定目录，e.g. D:\\jdk</div><div class=\"line\"></div><div class=\"line\">xcopy /s /e /i /y E:\\jdk-8u131-windows-x64\\.rsrc\\1033\\JAVA_CAB10\\tools d:\\jdk</div><div class=\"line\"></div><div class=\"line\">:: 删除 E:\\jdk-8u131-windows-x64 文件夹</div><div class=\"line\">cd / &amp;&amp; rd /s /q E:\\jdk-8u131-windows-x64</div></pre></td></tr></table></figure>\n<p>设置环境变量<br>增加 <code>JAVA_HOME</code> <code>d:\\jdk</code></p>\n<p>修改<code>PATH</code></p>\n<p>追加 <code>;%JAVA_HOME%\\bin;</code></p>\n<p>增加 <code>CLASSPATH</code></p>\n<p><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p>设置环境变量后，需要重新打开<code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">java -version &amp;&amp; javac -version</div><div class=\"line\">java version &quot;1.8.0_131&quot;</div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b15)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b15, mixed mode)</div><div class=\"line\">javac 1.8.0_131</div></pre></td></tr></table></figure>\n<h2 id=\"linux-免安装\"><a href=\"#linux-免安装\" class=\"headerlink\" title=\"linux 免安装\"></a>linux 免安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 下载文件</span></div><div class=\"line\">$ wget -P ~/downloads --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 解压</span></div><div class=\"line\">$ sudo tar zxf ~/downloads/jdk-*.tar.gz -C /usr/<span class=\"built_in\">local</span>/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建软连接</span></div><div class=\"line\">$ sudo ln -sf /usr/<span class=\"built_in\">local</span>/jdk1.8.0_121 /usr/<span class=\"built_in\">local</span>/jdk</div><div class=\"line\"></div><div class=\"line\">$ sudo vi /etc/profile</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置java环境</span></div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk</div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar;:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$CLASSPATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#保存并退出</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使配置生效</span></div><div class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n<p>本人原创</p>\n<p>博客 <a href=\"https://anjia.ml/2017/05/17/jdk-zip/\">https://anjia.ml/2017/05/17/jdk-zip/</a><br>简书 <a href=\"http://www.jianshu.com/p/5dc20d5d4f5c\">http://www.jianshu.com/p/5dc20d5d4f5c</a><br>掘金 <a href=\"https://juejin.im/post/591bdb222f301e006bcde36b\">https://juejin.im/post/591bdb222f301e006bcde36b</a></p>\n"},{"title":"nginx日志中$request_body 十六进制字符(\\x22\\x9B\\x5C\\x09\\x08...)完美解决方案","date":"2017-06-21T02:11:46.000Z","_content":"在使用nginx记录访问日志时，发现在含有`request_body`的 `PUT`,`POST` 请求时，日志中会含有 `\\x22` `\\x9B` `\\x5C` `\\x09` `\\x08` 字符，不利于阅读和处理。\n\n<!-- more -->\n\n具体 支持`request_body`的http method参见 [http1.1定义 9 Method Definitions][link9MethodDefinitions] 和 [Payloads of HTTP Request Methods][linkPayloadsOfHttpRequestMethods]\n\n\n`nginx.conf` 默认access_log 配置\n```\n    log_format  main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n                      '$http_host $upstream_status $upstream_addr $request_time $upstream_response_time'; \n```\n\n改成\n```\n    log_format json_log escape=json '{\"realip\":\"$remote_addr\",\"@timestamp\":\"$time_iso8601\",\"host\":\"$http_host\",\"request\":\"$request\",\"req_body\":\"$request_body\",\"status\":\"$status\",\"size\":$body_bytes_sent,\"ua\":\"$http_user_agent\",\"cookie\":\"$http_cookie\",\"req_time\":\"$request_time\",\"uri\":\"$uri\",\"referer\":\"$http_referer\",\"xff\":\"$http_x_forwarded_for\",\"ups_status\":\"$upstream_status\",\"ups_addr\":\"$upstream_addr\",\"ups_time\":\"$upstream_response_time\"}';\n```\n\n参考 [How to generate a JSON log from nginx?][linkHowToGenerateAJsonLogFromNginx?]\n\n[官方文档ngx_http_log_module.html#log_format][ngx_http_log_module] 注意，`escape`是从*1.11.8*后新增的参数。\n\n如果是老版本的，linux可以考虑使用`shell`命令替换，`logstash`可以考虑使用`ruby`处理 ，参考 [Optionally support handling of \\x escape codes][linkOptionallySupportHandlingOf\\xEscape]\n\n博客 [https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/][blog]\n简书 [http://www.jianshu.com/p/8409f28f32e9][jianshu]\n掘金 [https://juejin.im/post/5949e0f7128fe1006a627cc0][juejin]\n\n\n[link9MethodDefinitions]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[linkPayloadsOfHttpRequestMethods]: https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\n[linkHowToGenerateAJsonLogFromNginx?]: https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\n[ngx_http_log_module]: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n[linkOptionallySupportHandlingOf\\xEscape]: https://github.com/logstash-plugins/logstash-codec-json/issues/2\n[jianshu]: http://www.jianshu.com/p/8409f28f32e9\n[juejin]: https://juejin.im/post/5949e0f7128fe1006a627cc0\n[blog]: https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\n","source":"_posts/nginx-logging-request-body-as-hexidecimal.md","raw":"---\ntitle: nginx日志中$request_body 十六进制字符(\\x22\\x9B\\x5C\\x09\\x08...)完美解决方案\ndate: 2017-06-21 10:11:46\ntags: [nginx,logstash,elk,elkstack]\ncategories: [nginx]\n---\n在使用nginx记录访问日志时，发现在含有`request_body`的 `PUT`,`POST` 请求时，日志中会含有 `\\x22` `\\x9B` `\\x5C` `\\x09` `\\x08` 字符，不利于阅读和处理。\n\n<!-- more -->\n\n具体 支持`request_body`的http method参见 [http1.1定义 9 Method Definitions][link9MethodDefinitions] 和 [Payloads of HTTP Request Methods][linkPayloadsOfHttpRequestMethods]\n\n\n`nginx.conf` 默认access_log 配置\n```\n    log_format  main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n                      '$http_host $upstream_status $upstream_addr $request_time $upstream_response_time'; \n```\n\n改成\n```\n    log_format json_log escape=json '{\"realip\":\"$remote_addr\",\"@timestamp\":\"$time_iso8601\",\"host\":\"$http_host\",\"request\":\"$request\",\"req_body\":\"$request_body\",\"status\":\"$status\",\"size\":$body_bytes_sent,\"ua\":\"$http_user_agent\",\"cookie\":\"$http_cookie\",\"req_time\":\"$request_time\",\"uri\":\"$uri\",\"referer\":\"$http_referer\",\"xff\":\"$http_x_forwarded_for\",\"ups_status\":\"$upstream_status\",\"ups_addr\":\"$upstream_addr\",\"ups_time\":\"$upstream_response_time\"}';\n```\n\n参考 [How to generate a JSON log from nginx?][linkHowToGenerateAJsonLogFromNginx?]\n\n[官方文档ngx_http_log_module.html#log_format][ngx_http_log_module] 注意，`escape`是从*1.11.8*后新增的参数。\n\n如果是老版本的，linux可以考虑使用`shell`命令替换，`logstash`可以考虑使用`ruby`处理 ，参考 [Optionally support handling of \\x escape codes][linkOptionallySupportHandlingOf\\xEscape]\n\n博客 [https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/][blog]\n简书 [http://www.jianshu.com/p/8409f28f32e9][jianshu]\n掘金 [https://juejin.im/post/5949e0f7128fe1006a627cc0][juejin]\n\n\n[link9MethodDefinitions]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[linkPayloadsOfHttpRequestMethods]: https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\n[linkHowToGenerateAJsonLogFromNginx?]: https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\n[ngx_http_log_module]: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n[linkOptionallySupportHandlingOf\\xEscape]: https://github.com/logstash-plugins/logstash-codec-json/issues/2\n[jianshu]: http://www.jianshu.com/p/8409f28f32e9\n[juejin]: https://juejin.im/post/5949e0f7128fe1006a627cc0\n[blog]: https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\n","slug":"nginx-logging-request-body-as-hexidecimal","published":1,"updated":"2017-06-21T03:07:45.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5vf000fhgdol7f6klq0","content":"<p>在使用nginx记录访问日志时，发现在含有<code>request_body</code>的 <code>PUT</code>,<code>POST</code> 请求时，日志中会含有 <code>\\x22</code> <code>\\x9B</code> <code>\\x5C</code> <code>\\x09</code> <code>\\x08</code> 字符，不利于阅读和处理。</p>\n<a id=\"more\"></a>\n<p>具体 支持<code>request_body</code>的http method参见 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" target=\"_blank\" rel=\"external\">http1.1定义 9 Method Definitions</a> 和 <a href=\"https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\" target=\"_blank\" rel=\"external\">Payloads of HTTP Request Methods</a></p>\n<p><code>nginx.conf</code> 默认access_log 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</div><div class=\"line\">                  &apos;$http_host $upstream_status $upstream_addr $request_time $upstream_response_time&apos;;</div></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log_format json_log escape=json &apos;&#123;&quot;realip&quot;:&quot;$remote_addr&quot;,&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;host&quot;:&quot;$http_host&quot;,&quot;request&quot;:&quot;$request&quot;,&quot;req_body&quot;:&quot;$request_body&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;size&quot;:$body_bytes_sent,&quot;ua&quot;:&quot;$http_user_agent&quot;,&quot;cookie&quot;:&quot;$http_cookie&quot;,&quot;req_time&quot;:&quot;$request_time&quot;,&quot;uri&quot;:&quot;$uri&quot;,&quot;referer&quot;:&quot;$http_referer&quot;,&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&quot;ups_status&quot;:&quot;$upstream_status&quot;,&quot;ups_addr&quot;:&quot;$upstream_addr&quot;,&quot;ups_time&quot;:&quot;$upstream_response_time&quot;&#125;&apos;;</div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\" target=\"_blank\" rel=\"external\">How to generate a JSON log from nginx?</a></p>\n<p><a href=\"http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\" target=\"_blank\" rel=\"external\">官方文档ngx_http_log_module.html#log_format</a> 注意，<code>escape</code>是从<em>1.11.8</em>后新增的参数。</p>\n<p>如果是老版本的，linux可以考虑使用<code>shell</code>命令替换，<code>logstash</code>可以考虑使用<code>ruby</code>处理 ，参考 <a href=\"https://github.com/logstash-plugins/logstash-codec-json/issues/2\" target=\"_blank\" rel=\"external\">Optionally support handling of \\x escape codes</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\">https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/</a><br>简书 <a href=\"http://www.jianshu.com/p/8409f28f32e9\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/8409f28f32e9</a><br>掘金 <a href=\"https://juejin.im/post/5949e0f7128fe1006a627cc0\" target=\"_blank\" rel=\"external\">https://juejin.im/post/5949e0f7128fe1006a627cc0</a></p>\n","excerpt":"<p>在使用nginx记录访问日志时，发现在含有<code>request_body</code>的 <code>PUT</code>,<code>POST</code> 请求时，日志中会含有 <code>\\x22</code> <code>\\x9B</code> <code>\\x5C</code> <code>\\x09</code> <code>\\x08</code> 字符，不利于阅读和处理。</p>","more":"<p>具体 支持<code>request_body</code>的http method参见 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">http1.1定义 9 Method Definitions</a> 和 <a href=\"https://stackoverflow.com/questions/5905916/payloads-of-http-request-methods#answer-5928241\">Payloads of HTTP Request Methods</a></p>\n<p><code>nginx.conf</code> 默认access_log 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</div><div class=\"line\">                  &apos;$http_host $upstream_status $upstream_addr $request_time $upstream_response_time&apos;;</div></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log_format json_log escape=json &apos;&#123;&quot;realip&quot;:&quot;$remote_addr&quot;,&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;host&quot;:&quot;$http_host&quot;,&quot;request&quot;:&quot;$request&quot;,&quot;req_body&quot;:&quot;$request_body&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;size&quot;:$body_bytes_sent,&quot;ua&quot;:&quot;$http_user_agent&quot;,&quot;cookie&quot;:&quot;$http_cookie&quot;,&quot;req_time&quot;:&quot;$request_time&quot;,&quot;uri&quot;:&quot;$uri&quot;,&quot;referer&quot;:&quot;$http_referer&quot;,&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&quot;ups_status&quot;:&quot;$upstream_status&quot;,&quot;ups_addr&quot;:&quot;$upstream_addr&quot;,&quot;ups_time&quot;:&quot;$upstream_response_time&quot;&#125;&apos;;</div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/25049667/how-to-generate-a-json-log-from-nginx#answer-42564710\">How to generate a JSON log from nginx?</a></p>\n<p><a href=\"http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\">官方文档ngx_http_log_module.html#log_format</a> 注意，<code>escape</code>是从<em>1.11.8</em>后新增的参数。</p>\n<p>如果是老版本的，linux可以考虑使用<code>shell</code>命令替换，<code>logstash</code>可以考虑使用<code>ruby</code>处理 ，参考 <a href=\"https://github.com/logstash-plugins/logstash-codec-json/issues/2\">Optionally support handling of \\x escape codes</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/\">https://anjia.ml/2017/06/21/nginx-logging-request-body-as-hexidecimal/</a><br>简书 <a href=\"http://www.jianshu.com/p/8409f28f32e9\">http://www.jianshu.com/p/8409f28f32e9</a><br>掘金 <a href=\"https://juejin.im/post/5949e0f7128fe1006a627cc0\">https://juejin.im/post/5949e0f7128fe1006a627cc0</a></p>"},{"title":"nginx正则表达式快捷测试方法","date":"2017-06-29T08:03:19.000Z","_content":"之前在配置时都是本地起一个nginx服务，修改`location`规则,然后`nginx -s reload` 或则 `service nginx reload`不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. [在线工具](http://tool.oschina.net/regex/))又因为使用的库不同，多少存在差异。\n\n<!-- more -->\n\n正则表达式有不同的规则引擎，具体参见 wikipedia的 [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries)\n\nnginx使用的是[PCRE](http://www.pcre.org/)\n\n截取nginx官方文档 [Building nginx from Sources](http://nginx.org/en/docs/configure.html)\n> --with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.\n\n建议使用linux下的 `grep` 工具\n\nwindows可以使用[cygwin](http://www.cygwin.com/) 或者[git for windows](https://git-for-windows.github.io/)中的`git-bash.exe`\n\n```bash\n$ grep --help\n\n# ...\n\nRegexp selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n\n# ...\n```\n\n使用 `grep -P`命令即可\n\n```bash\n$ echo 'a.gif' | grep -P '\\.(jp?g|gif|bmp|png)'\n\n#输出\na.gif\n\n```\n\n如果只想输出匹配部分，则加上`-o`参数\n\n```bash\n$ echo 'a.gif' | grep -P -o '\\.(jp?g|gif|bmp|png)'\n\n#输出\n.gif\n```\n\n具体 perl 正则表达式语法，可参考\n\n[Perl regular expressions man page](http://perldoc.perl.org/perlre.html)\n\n[汤姆的猫-Perl入门（四）Perl的正则表达式](http://blog.csdn.net/sunshoupo211/article/details/31769837)\n\n\n博客 [https://anjia.ml/2017/06/29/nginx-regex-test-way/][blog]\n简书 [http://www.jianshu.com/p/17eb0ba22ff6][jianshu]\n掘金 [https://juejin.im/post/5954ad1b5188250d8f602bca][juejin]\n\n[jianshu]: http://www.jianshu.com/p/17eb0ba22ff6\n[juejin]: https://juejin.im/post/5954ad1b5188250d8f602bca\n[blog]: https://anjia.ml/2017/06/29/nginx-regex-test-way/","source":"_posts/nginx-regex-test-way.md","raw":"---\ntitle: nginx正则表达式快捷测试方法\ndate: 2017-06-29 16:03:19\ntags: [nginx]\ncategories: [nginx]\n---\n之前在配置时都是本地起一个nginx服务，修改`location`规则,然后`nginx -s reload` 或则 `service nginx reload`不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. [在线工具](http://tool.oschina.net/regex/))又因为使用的库不同，多少存在差异。\n\n<!-- more -->\n\n正则表达式有不同的规则引擎，具体参见 wikipedia的 [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries)\n\nnginx使用的是[PCRE](http://www.pcre.org/)\n\n截取nginx官方文档 [Building nginx from Sources](http://nginx.org/en/docs/configure.html)\n> --with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.\n\n建议使用linux下的 `grep` 工具\n\nwindows可以使用[cygwin](http://www.cygwin.com/) 或者[git for windows](https://git-for-windows.github.io/)中的`git-bash.exe`\n\n```bash\n$ grep --help\n\n# ...\n\nRegexp selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n\n# ...\n```\n\n使用 `grep -P`命令即可\n\n```bash\n$ echo 'a.gif' | grep -P '\\.(jp?g|gif|bmp|png)'\n\n#输出\na.gif\n\n```\n\n如果只想输出匹配部分，则加上`-o`参数\n\n```bash\n$ echo 'a.gif' | grep -P -o '\\.(jp?g|gif|bmp|png)'\n\n#输出\n.gif\n```\n\n具体 perl 正则表达式语法，可参考\n\n[Perl regular expressions man page](http://perldoc.perl.org/perlre.html)\n\n[汤姆的猫-Perl入门（四）Perl的正则表达式](http://blog.csdn.net/sunshoupo211/article/details/31769837)\n\n\n博客 [https://anjia.ml/2017/06/29/nginx-regex-test-way/][blog]\n简书 [http://www.jianshu.com/p/17eb0ba22ff6][jianshu]\n掘金 [https://juejin.im/post/5954ad1b5188250d8f602bca][juejin]\n\n[jianshu]: http://www.jianshu.com/p/17eb0ba22ff6\n[juejin]: https://juejin.im/post/5954ad1b5188250d8f602bca\n[blog]: https://anjia.ml/2017/06/29/nginx-regex-test-way/","slug":"nginx-regex-test-way","published":1,"updated":"2017-06-29T08:18:30.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5vh000hhgdo6vhxiym8","content":"<p>之前在配置时都是本地起一个nginx服务，修改<code>location</code>规则,然后<code>nginx -s reload</code> 或则 <code>service nginx reload</code>不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. <a href=\"http://tool.oschina.net/regex/\" target=\"_blank\" rel=\"external\">在线工具</a>)又因为使用的库不同，多少存在差异。</p>\n<a id=\"more\"></a>\n<p>正则表达式有不同的规则引擎，具体参见 wikipedia的 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries\" target=\"_blank\" rel=\"external\">Comparison of regular expression engines</a></p>\n<p>nginx使用的是<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"external\">PCRE</a></p>\n<p>截取nginx官方文档 <a href=\"http://nginx.org/en/docs/configure.html\" target=\"_blank\" rel=\"external\">Building nginx from Sources</a></p>\n<blockquote>\n<p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p>\n</blockquote>\n<p>建议使用linux下的 <code>grep</code> 工具</p>\n<p>windows可以使用<a href=\"http://www.cygwin.com/\" target=\"_blank\" rel=\"external\">cygwin</a> 或者<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">git for windows</a>中的<code>git-bash.exe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ grep --help</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ...</span></div><div class=\"line\"></div><div class=\"line\">Regexp selection and interpretation:</div><div class=\"line\">  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)</div><div class=\"line\">  -F, --fixed-strings       PATTERN is a <span class=\"built_in\">set</span> of newline-separated strings</div><div class=\"line\">  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)</div><div class=\"line\">  -P, --perl-regexp         PATTERN is a Perl regular expression</div><div class=\"line\">  <span class=\"_\">-e</span>, --regexp=PATTERN      use PATTERN <span class=\"keyword\">for</span> matching</div><div class=\"line\">  <span class=\"_\">-f</span>, --file=FILE           obtain PATTERN from FILE</div><div class=\"line\">  -i, --ignore-case         ignore <span class=\"keyword\">case</span> distinctions</div><div class=\"line\">  -w, --word-regexp         force PATTERN to match only whole words</div><div class=\"line\">  -x, --line-regexp         force PATTERN to match only whole lines</div><div class=\"line\">  -z, --null-data           a data line ends <span class=\"keyword\">in</span> 0 byte, not newline</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ...</span></div></pre></td></tr></table></figure>\n<p>使用 <code>grep -P</code>命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#输出</span></div><div class=\"line\">a.gif</div></pre></td></tr></table></figure>\n<p>如果只想输出匹配部分，则加上<code>-o</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P -o <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#输出</span></div><div class=\"line\">.gif</div></pre></td></tr></table></figure>\n<p>具体 perl 正则表达式语法，可参考</p>\n<p><a href=\"http://perldoc.perl.org/perlre.html\" target=\"_blank\" rel=\"external\">Perl regular expressions man page</a></p>\n<p><a href=\"http://blog.csdn.net/sunshoupo211/article/details/31769837\" target=\"_blank\" rel=\"external\">汤姆的猫-Perl入门（四）Perl的正则表达式</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/29/nginx-regex-test-way/\">https://anjia.ml/2017/06/29/nginx-regex-test-way/</a><br>简书 <a href=\"http://www.jianshu.com/p/17eb0ba22ff6\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/17eb0ba22ff6</a><br>掘金 <a href=\"https://juejin.im/post/5954ad1b5188250d8f602bca\" target=\"_blank\" rel=\"external\">https://juejin.im/post/5954ad1b5188250d8f602bca</a></p>\n","excerpt":"<p>之前在配置时都是本地起一个nginx服务，修改<code>location</code>规则,然后<code>nginx -s reload</code> 或则 <code>service nginx reload</code>不断尝试来判断是否符合预期。显而易见，效率极低。使用一些在线正则表达式测试(e.g. <a href=\"http://tool.oschina.net/regex/\">在线工具</a>)又因为使用的库不同，多少存在差异。</p>","more":"<p>正则表达式有不同的规则引擎，具体参见 wikipedia的 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Libraries\">Comparison of regular expression engines</a></p>\n<p>nginx使用的是<a href=\"http://www.pcre.org/\">PCRE</a></p>\n<p>截取nginx官方文档 <a href=\"http://nginx.org/en/docs/configure.html\">Building nginx from Sources</a></p>\n<blockquote>\n<p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p>\n</blockquote>\n<p>建议使用linux下的 <code>grep</code> 工具</p>\n<p>windows可以使用<a href=\"http://www.cygwin.com/\">cygwin</a> 或者<a href=\"https://git-for-windows.github.io/\">git for windows</a>中的<code>git-bash.exe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ grep --help</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ...</span></div><div class=\"line\"></div><div class=\"line\">Regexp selection and interpretation:</div><div class=\"line\">  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)</div><div class=\"line\">  -F, --fixed-strings       PATTERN is a <span class=\"built_in\">set</span> of newline-separated strings</div><div class=\"line\">  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)</div><div class=\"line\">  -P, --perl-regexp         PATTERN is a Perl regular expression</div><div class=\"line\">  <span class=\"_\">-e</span>, --regexp=PATTERN      use PATTERN <span class=\"keyword\">for</span> matching</div><div class=\"line\">  <span class=\"_\">-f</span>, --file=FILE           obtain PATTERN from FILE</div><div class=\"line\">  -i, --ignore-case         ignore <span class=\"keyword\">case</span> distinctions</div><div class=\"line\">  -w, --word-regexp         force PATTERN to match only whole words</div><div class=\"line\">  -x, --line-regexp         force PATTERN to match only whole lines</div><div class=\"line\">  -z, --null-data           a data line ends <span class=\"keyword\">in</span> 0 byte, not newline</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ...</span></div></pre></td></tr></table></figure>\n<p>使用 <code>grep -P</code>命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#输出</span></div><div class=\"line\">a.gif</div></pre></td></tr></table></figure>\n<p>如果只想输出匹配部分，则加上<code>-o</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'a.gif'</span> | grep -P -o <span class=\"string\">'\\.(jp?g|gif|bmp|png)'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#输出</span></div><div class=\"line\">.gif</div></pre></td></tr></table></figure>\n<p>具体 perl 正则表达式语法，可参考</p>\n<p><a href=\"http://perldoc.perl.org/perlre.html\">Perl regular expressions man page</a></p>\n<p><a href=\"http://blog.csdn.net/sunshoupo211/article/details/31769837\">汤姆的猫-Perl入门（四）Perl的正则表达式</a></p>\n<p>博客 <a href=\"https://anjia.ml/2017/06/29/nginx-regex-test-way/\">https://anjia.ml/2017/06/29/nginx-regex-test-way/</a><br>简书 <a href=\"http://www.jianshu.com/p/17eb0ba22ff6\">http://www.jianshu.com/p/17eb0ba22ff6</a><br>掘金 <a href=\"https://juejin.im/post/5954ad1b5188250d8f602bca\">https://juejin.im/post/5954ad1b5188250d8f602bca</a></p>"},{"title":"自建私有云Owncloud+Nginx（支持16G大文件上传）","date":"2017-04-05T04:21:25.000Z","_content":"\n## [Owncloud官网](https://owncloud.org/)\n桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry\n\n## 环境\n- Ubuntu-16.04_64\n- Owncloud9.14-2.1\n- SQLite3\n- PHP7\n- Nginx 1.10.0\n\n## 最简单安装\n\n### 根据linux版本选择相应版本\n[owncloud-9.1](http://download.owncloud.org/download/repositories/9.1/owncloud/)\n\n### 安装\n以Ubuntu-16.04 安装owncloud-9.14-2.1为例\n\n#### 用root权限添加owncloud密钥\n\n```bash\nsu root\n\nwget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key\napt-key add - < Release.key\n```\n\n#### 用root权限添加owncloud软件源\n```bash\nsh -c \"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' > /etc/apt/sources.list.d/owncloud.list\"\napt  update -y && apt install owncloud -y\n```\n\n## 源码安装\n\n### 安装PHP7\n\n```bash\nsudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring\n```\n\n### 安装数据库\n```bash\n#mariadb\nsudo apt-get install -y mariadb-server php7.0-mysql\n\n#sqlite3\nsudo apt-get install -y sqlite3 php7.0-sqlite3\n```\n\n### 安装web容器\n```bash\n#apache2\nsudo apt-get install -y apache2 libapache2-mod-php7.0\n\n#nginx\nsudo apt-get install -y nginx php7.0-fpm \n```\n\n### 修改fpm配置文件(nginx)\n```bash\n$ vi /etc/php/7.0/fpm/pool.d/www.conf\n```\n\n修改`listen = /run/php/php7.0-fpm.sock`为`listen=127.0.0.1:9000`(大约36行)\n\n放开`env`的注释(大约384-388行)\n```\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\n```\n\n\n### 下载最新源码\n```bash\n$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  && sudo unzip /tmp/owncloud-latest.zip -d /var/www/ && rm -rf /tmp/owncloud-latest.zip\n```\n\n### 给www-data授权\n```bash\nsudo chown -R www-data:www-data /var/www/owncloud/\n```\n\n### 参考资料\n[官方nginx+https配置](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html)\n\n[支持大文件上传(16G)](https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB)\n\n### 我的nginx配置\n\n#### nginx\n```bash\n$ vi  /etc/nginx/sites-enabled/owncloud.conf\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 10010;\n    server_name 127.0.0.1;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /var/www/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 16400M;\n    fastcgi_buffers 64 4K;\n    fastcgi_read_timeout 600;\n    client_body_buffer_size 1048576k;\n    client_body_temp_path /tmp/owncloud;\n    \n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    #pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        #fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off; #Available since nginx 1.7.11\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n```\n#### php.ini\n```bash\n\n$ sudo vi /etc/php/7.0/fpm/php.ini\n\n##修改以下几个配置参数\n\n; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB\npost_max_size = 16400M\n\n; cannot be bigger than post_max_size\nupload_max_filesize = 16G\n\n; on online servers this could require bigger values (my server is at home)\nmax_input_time = 3600\n\n; from ownCloud documentation - not sure if is required\noutput_buffering = Off\n\n; not sure if it is required [3] but it seems like ownCloud needs time to move the file to it's\n; final place after upload and that can take quite some time for big files\nmax_execution_time = 1800\n\n; you may also want to point this to a folder having enough space for big files being uploaded\nupload_tmp_dir = /tmp/owncloud\n\n```\n\n\n### 启动服务\n```bash\n$ sudo service php7.0-fpm restart\n\n$ sudo service nginx restart\n```\n\n### 配置\n浏览器打开`http://127.0.0.1:10010`,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html 和https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\n\n![owncloud.png](https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png)\n\n### 配置域名\n详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\n```bash\nsudo vi /var/www/owncloud/config/config.php\n```\n修改\n```\n'trusted_domains' => \n  array (\n    0 => '127.0.0.1:10010',\n    1 => '域名',\n  ),\n```\n\n修改\n```\n'overwrite.cli.url' => 'http://域名',\n```\n\n### 创建用户\n\n浏览器访问`http://127.0.0.1:10010/settings/users`,用管理员用户名密码登陆\n\n### 下载客户端\n\n参见 https://owncloud.org/install/#install-clients","source":"_posts/owncloud.md","raw":"---\ntitle: 自建私有云Owncloud+Nginx（支持16G大文件上传）\ndate: 2017-04-05 12:21:25\ntags: [owncloud]\ncategories: [owncloud]\n---\n\n## [Owncloud官网](https://owncloud.org/)\n桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry\n\n## 环境\n- Ubuntu-16.04_64\n- Owncloud9.14-2.1\n- SQLite3\n- PHP7\n- Nginx 1.10.0\n\n## 最简单安装\n\n### 根据linux版本选择相应版本\n[owncloud-9.1](http://download.owncloud.org/download/repositories/9.1/owncloud/)\n\n### 安装\n以Ubuntu-16.04 安装owncloud-9.14-2.1为例\n\n#### 用root权限添加owncloud密钥\n\n```bash\nsu root\n\nwget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key\napt-key add - < Release.key\n```\n\n#### 用root权限添加owncloud软件源\n```bash\nsh -c \"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' > /etc/apt/sources.list.d/owncloud.list\"\napt  update -y && apt install owncloud -y\n```\n\n## 源码安装\n\n### 安装PHP7\n\n```bash\nsudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring\n```\n\n### 安装数据库\n```bash\n#mariadb\nsudo apt-get install -y mariadb-server php7.0-mysql\n\n#sqlite3\nsudo apt-get install -y sqlite3 php7.0-sqlite3\n```\n\n### 安装web容器\n```bash\n#apache2\nsudo apt-get install -y apache2 libapache2-mod-php7.0\n\n#nginx\nsudo apt-get install -y nginx php7.0-fpm \n```\n\n### 修改fpm配置文件(nginx)\n```bash\n$ vi /etc/php/7.0/fpm/pool.d/www.conf\n```\n\n修改`listen = /run/php/php7.0-fpm.sock`为`listen=127.0.0.1:9000`(大约36行)\n\n放开`env`的注释(大约384-388行)\n```\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\n```\n\n\n### 下载最新源码\n```bash\n$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  && sudo unzip /tmp/owncloud-latest.zip -d /var/www/ && rm -rf /tmp/owncloud-latest.zip\n```\n\n### 给www-data授权\n```bash\nsudo chown -R www-data:www-data /var/www/owncloud/\n```\n\n### 参考资料\n[官方nginx+https配置](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html)\n\n[支持大文件上传(16G)](https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB)\n\n### 我的nginx配置\n\n#### nginx\n```bash\n$ vi  /etc/nginx/sites-enabled/owncloud.conf\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 10010;\n    server_name 127.0.0.1;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /var/www/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 16400M;\n    fastcgi_buffers 64 4K;\n    fastcgi_read_timeout 600;\n    client_body_buffer_size 1048576k;\n    client_body_temp_path /tmp/owncloud;\n    \n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    #pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        #fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off; #Available since nginx 1.7.11\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n```\n#### php.ini\n```bash\n\n$ sudo vi /etc/php/7.0/fpm/php.ini\n\n##修改以下几个配置参数\n\n; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB\npost_max_size = 16400M\n\n; cannot be bigger than post_max_size\nupload_max_filesize = 16G\n\n; on online servers this could require bigger values (my server is at home)\nmax_input_time = 3600\n\n; from ownCloud documentation - not sure if is required\noutput_buffering = Off\n\n; not sure if it is required [3] but it seems like ownCloud needs time to move the file to it's\n; final place after upload and that can take quite some time for big files\nmax_execution_time = 1800\n\n; you may also want to point this to a folder having enough space for big files being uploaded\nupload_tmp_dir = /tmp/owncloud\n\n```\n\n\n### 启动服务\n```bash\n$ sudo service php7.0-fpm restart\n\n$ sudo service nginx restart\n```\n\n### 配置\n浏览器打开`http://127.0.0.1:10010`,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html 和https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\n\n![owncloud.png](https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png)\n\n### 配置域名\n详见 https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\n```bash\nsudo vi /var/www/owncloud/config/config.php\n```\n修改\n```\n'trusted_domains' => \n  array (\n    0 => '127.0.0.1:10010',\n    1 => '域名',\n  ),\n```\n\n修改\n```\n'overwrite.cli.url' => 'http://域名',\n```\n\n### 创建用户\n\n浏览器访问`http://127.0.0.1:10010/settings/users`,用管理员用户名密码登陆\n\n### 下载客户端\n\n参见 https://owncloud.org/install/#install-clients","slug":"owncloud","published":1,"updated":"2017-04-10T16:02:41.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5vk000lhgdofimhh38g","content":"<h2 id=\"Owncloud官网\"><a href=\"#Owncloud官网\" class=\"headerlink\" title=\"Owncloud官网\"></a><a href=\"https://owncloud.org/\" target=\"_blank\" rel=\"external\">Owncloud官网</a></h2><p>桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Ubuntu-16.04_64</li>\n<li>Owncloud9.14-2.1</li>\n<li>SQLite3</li>\n<li>PHP7</li>\n<li>Nginx 1.10.0</li>\n</ul>\n<h2 id=\"最简单安装\"><a href=\"#最简单安装\" class=\"headerlink\" title=\"最简单安装\"></a>最简单安装</h2><h3 id=\"根据linux版本选择相应版本\"><a href=\"#根据linux版本选择相应版本\" class=\"headerlink\" title=\"根据linux版本选择相应版本\"></a>根据linux版本选择相应版本</h3><p><a href=\"http://download.owncloud.org/download/repositories/9.1/owncloud/\" target=\"_blank\" rel=\"external\">owncloud-9.1</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>以Ubuntu-16.04 安装owncloud-9.14-2.1为例</p>\n<h4 id=\"用root权限添加owncloud密钥\"><a href=\"#用root权限添加owncloud密钥\" class=\"headerlink\" title=\"用root权限添加owncloud密钥\"></a>用root权限添加owncloud密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">su root</div><div class=\"line\"></div><div class=\"line\">wget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key</div><div class=\"line\">apt-key add - &lt; Release.key</div></pre></td></tr></table></figure>\n<h4 id=\"用root权限添加owncloud软件源\"><a href=\"#用root权限添加owncloud软件源\" class=\"headerlink\" title=\"用root权限添加owncloud软件源\"></a>用root权限添加owncloud软件源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sh -c <span class=\"string\">\"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' &gt; /etc/apt/sources.list.d/owncloud.list\"</span></div><div class=\"line\">apt  update -y &amp;&amp; apt install owncloud -y</div></pre></td></tr></table></figure>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring</div></pre></td></tr></table></figure>\n<h3 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#mariadb</span></div><div class=\"line\">sudo apt-get install -y mariadb-server php7.0-mysql</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#sqlite3</span></div><div class=\"line\">sudo apt-get install -y sqlite3 php7.0-sqlite3</div></pre></td></tr></table></figure>\n<h3 id=\"安装web容器\"><a href=\"#安装web容器\" class=\"headerlink\" title=\"安装web容器\"></a>安装web容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#apache2</span></div><div class=\"line\">sudo apt-get install -y apache2 libapache2-mod-php7.0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#nginx</span></div><div class=\"line\">sudo apt-get install -y nginx php7.0-fpm</div></pre></td></tr></table></figure>\n<h3 id=\"修改fpm配置文件-nginx\"><a href=\"#修改fpm配置文件-nginx\" class=\"headerlink\" title=\"修改fpm配置文件(nginx)\"></a>修改fpm配置文件(nginx)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vi /etc/php/7.0/fpm/pool.d/www.conf</div></pre></td></tr></table></figure>\n<p>修改<code>listen = /run/php/php7.0-fpm.sock</code>为<code>listen=127.0.0.1:9000</code>(大约36行)</p>\n<p>放开<code>env</code>的注释(大约384-388行)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">env[HOSTNAME] = $HOSTNAME</div><div class=\"line\">env[PATH] = /usr/local/bin:/usr/bin:/bin</div><div class=\"line\">env[TMP] = /tmp</div><div class=\"line\">env[TMPDIR] = /tmp</div><div class=\"line\">env[TEMP] = /tmp</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载最新源码\"><a href=\"#下载最新源码\" class=\"headerlink\" title=\"下载最新源码\"></a>下载最新源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  &amp;&amp; sudo unzip /tmp/owncloud-latest.zip <span class=\"_\">-d</span> /var/www/ &amp;&amp; rm -rf /tmp/owncloud-latest.zip</div></pre></td></tr></table></figure>\n<h3 id=\"给www-data授权\"><a href=\"#给www-data授权\" class=\"headerlink\" title=\"给www-data授权\"></a>给www-data授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo chown -R www-data:www-data /var/www/owncloud/</div></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html\" target=\"_blank\" rel=\"external\">官方nginx+https配置</a></p>\n<p><a href=\"https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB\" target=\"_blank\" rel=\"external\">支持大文件上传(16G)</a></p>\n<h3 id=\"我的nginx配置\"><a href=\"#我的nginx配置\" class=\"headerlink\" title=\"我的nginx配置\"></a>我的nginx配置</h3><h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vi  /etc/nginx/sites-enabled/owncloud.conf</div><div class=\"line\"></div><div class=\"line\">upstream php-handler &#123;</div><div class=\"line\">    server 127.0.0.1:9000;</div><div class=\"line\">    <span class=\"comment\">#server unix:/var/run/php5-fpm.sock;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 10010;</div><div class=\"line\">    server_name 127.0.0.1;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Add headers to serve security related headers</span></div><div class=\"line\">    <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></div><div class=\"line\">    <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\">    add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</div><div class=\"line\">    add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</div><div class=\"line\">    add_header X-Robots-Tag none;</div><div class=\"line\">    add_header X-Download-Options noopen;</div><div class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Path to the root of your installation</span></div><div class=\"line\">    root /var/www/owncloud/;</div><div class=\"line\"></div><div class=\"line\">    location = /robots.txt &#123;</div><div class=\"line\">        allow all;</div><div class=\"line\">        log_not_found off;</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># The following 2 rules are only needed for the user_webfinger app.</span></div><div class=\"line\">    <span class=\"comment\"># Uncomment it if you're planning to use this app.</span></div><div class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></div><div class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></div><div class=\"line\"></div><div class=\"line\">    location = /.well-known/carddav &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location = /.well-known/caldav &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># set max upload size</span></div><div class=\"line\">    client_max_body_size 16400M;</div><div class=\"line\">    fastcgi_buffers 64 4K;</div><div class=\"line\">    fastcgi_read_timeout 600;</div><div class=\"line\">    client_body_buffer_size 1048576k;</div><div class=\"line\">    client_body_temp_path /tmp/owncloud;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># Disable gzip to avoid the removal of the ETag header</span></div><div class=\"line\">    gzip off;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Uncomment if your server is build with the ngx_pagespeed module</span></div><div class=\"line\">    <span class=\"comment\"># This module is currently not supported.</span></div><div class=\"line\">    <span class=\"comment\">#pagespeed off;</span></div><div class=\"line\"></div><div class=\"line\">    error_page 403 /core/templates/403.php;</div><div class=\"line\">    error_page 404 /core/templates/404.php;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        rewrite ^ /index.php<span class=\"variable\">$uri</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 404;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">        fastcgi_param PATH_INFO <span class=\"variable\">$fastcgi_path_info</span>;</div><div class=\"line\">        <span class=\"comment\">#fastcgi_param HTTPS on;</span></div><div class=\"line\">        fastcgi_param modHeadersAvailable <span class=\"literal\">true</span>; <span class=\"comment\">#Avoid sending the security headers twice</span></div><div class=\"line\">        fastcgi_param front_controller_active <span class=\"literal\">true</span>;</div><div class=\"line\">        fastcgi_pass php-handler;</div><div class=\"line\">        fastcgi_intercept_errors on;</div><div class=\"line\">        fastcgi_request_buffering off; <span class=\"comment\">#Available since nginx 1.7.11</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</div><div class=\"line\">        index index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Adding the cache control header for js and css files</span></div><div class=\"line\">    <span class=\"comment\"># Make sure it is BELOW the PHP block</span></div><div class=\"line\">    location ~* \\.(?:css|js)$ &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</div><div class=\"line\">        add_header Cache-Control <span class=\"string\">\"public, max-age=7200\"</span>;</div><div class=\"line\">        <span class=\"comment\"># Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</span></div><div class=\"line\">        <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></div><div class=\"line\">        <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></div><div class=\"line\">        add_header X-Content-Type-Options nosniff;</div><div class=\"line\">        add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</div><div class=\"line\">        add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</div><div class=\"line\">        add_header X-Robots-Tag none;</div><div class=\"line\">        add_header X-Download-Options noopen;</div><div class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\">        <span class=\"comment\"># Optional: Don't log access to assets</span></div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</div><div class=\"line\">        <span class=\"comment\"># Optional: Don't log access to other assets</span></div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"php-ini\"><a href=\"#php-ini\" class=\"headerlink\" title=\"php.ini\"></a>php.ini</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ sudo vi /etc/php/7.0/fpm/php.ini</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">##修改以下几个配置参数</span></div><div class=\"line\"></div><div class=\"line\">; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB</div><div class=\"line\">post_max_size = 16400M</div><div class=\"line\"></div><div class=\"line\">; cannot be bigger than post_max_size</div><div class=\"line\">upload_max_filesize = 16G</div><div class=\"line\"></div><div class=\"line\">; on online servers this could require bigger values (my server is at home)</div><div class=\"line\">max_input_time = 3600</div><div class=\"line\"></div><div class=\"line\">; from ownCloud documentation - not sure <span class=\"keyword\">if</span> is required</div><div class=\"line\">output_buffering = Off</div><div class=\"line\"></div><div class=\"line\">; not sure <span class=\"keyword\">if</span> it is required [3] but it seems like ownCloud needs time to move the file to it<span class=\"string\">'s</span></div><div class=\"line\">; final place after upload and that can take quite some time for big files</div><div class=\"line\">max_execution_time = 1800</div><div class=\"line\"></div><div class=\"line\">; you may also want to point this to a folder having enough space for big files being uploaded</div><div class=\"line\">upload_tmp_dir = /tmp/owncloud</div></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo service php7.0-fpm restart</div><div class=\"line\"></div><div class=\"line\">$ sudo service nginx restart</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>浏览器打开<code>http://127.0.0.1:10010</code>,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html\" target=\"_blank\" rel=\"external\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html</a> 和<a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\" target=\"_blank\" rel=\"external\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png\" alt=\"owncloud.png\"></p>\n<h3 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h3><p>详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\" target=\"_blank\" rel=\"external\">https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vi /var/www/owncloud/config/config.php</div></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&apos;trusted_domains&apos; =&gt; </div><div class=\"line\">  array (</div><div class=\"line\">    0 =&gt; &apos;127.0.0.1:10010&apos;,</div><div class=\"line\">    1 =&gt; &apos;域名&apos;,</div><div class=\"line\">  ),</div></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&apos;overwrite.cli.url&apos; =&gt; &apos;http://域名&apos;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>浏览器访问<code>http://127.0.0.1:10010/settings/users</code>,用管理员用户名密码登陆</p>\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><p>参见 <a href=\"https://owncloud.org/install/#install-clients\" target=\"_blank\" rel=\"external\">https://owncloud.org/install/#install-clients</a></p>\n","excerpt":"","more":"<h2 id=\"Owncloud官网\"><a href=\"#Owncloud官网\" class=\"headerlink\" title=\"Owncloud官网\"></a><a href=\"https://owncloud.org/\">Owncloud官网</a></h2><p>桌面版支持Windows,Mac,Linux 移动版本支持，android,ios,blackberry</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Ubuntu-16.04_64</li>\n<li>Owncloud9.14-2.1</li>\n<li>SQLite3</li>\n<li>PHP7</li>\n<li>Nginx 1.10.0</li>\n</ul>\n<h2 id=\"最简单安装\"><a href=\"#最简单安装\" class=\"headerlink\" title=\"最简单安装\"></a>最简单安装</h2><h3 id=\"根据linux版本选择相应版本\"><a href=\"#根据linux版本选择相应版本\" class=\"headerlink\" title=\"根据linux版本选择相应版本\"></a>根据linux版本选择相应版本</h3><p><a href=\"http://download.owncloud.org/download/repositories/9.1/owncloud/\">owncloud-9.1</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>以Ubuntu-16.04 安装owncloud-9.14-2.1为例</p>\n<h4 id=\"用root权限添加owncloud密钥\"><a href=\"#用root权限添加owncloud密钥\" class=\"headerlink\" title=\"用root权限添加owncloud密钥\"></a>用root权限添加owncloud密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">su root</div><div class=\"line\"></div><div class=\"line\">wget -nv https://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/Release.key -O Release.key</div><div class=\"line\">apt-key add - &lt; Release.key</div></pre></td></tr></table></figure>\n<h4 id=\"用root权限添加owncloud软件源\"><a href=\"#用root权限添加owncloud软件源\" class=\"headerlink\" title=\"用root权限添加owncloud软件源\"></a>用root权限添加owncloud软件源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sh -c <span class=\"string\">\"echo 'deb http://download.owncloud.org/download/repositories/9.1/Ubuntu_16.04/ /' &gt; /etc/apt/sources.list.d/owncloud.list\"</span></div><div class=\"line\">apt  update -y &amp;&amp; apt install owncloud -y</div></pre></td></tr></table></figure>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install -y php7.0-common  php7.0-gd php7.0-json php7.0-mysql php7.0-curl  php7.0-intl php7.0-mcrypt php-imagick  php7.0-zip php7.0-xml php7.0-mbstring</div></pre></td></tr></table></figure>\n<h3 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#mariadb</span></div><div class=\"line\">sudo apt-get install -y mariadb-server php7.0-mysql</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#sqlite3</span></div><div class=\"line\">sudo apt-get install -y sqlite3 php7.0-sqlite3</div></pre></td></tr></table></figure>\n<h3 id=\"安装web容器\"><a href=\"#安装web容器\" class=\"headerlink\" title=\"安装web容器\"></a>安装web容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#apache2</span></div><div class=\"line\">sudo apt-get install -y apache2 libapache2-mod-php7.0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#nginx</span></div><div class=\"line\">sudo apt-get install -y nginx php7.0-fpm</div></pre></td></tr></table></figure>\n<h3 id=\"修改fpm配置文件-nginx\"><a href=\"#修改fpm配置文件-nginx\" class=\"headerlink\" title=\"修改fpm配置文件(nginx)\"></a>修改fpm配置文件(nginx)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vi /etc/php/7.0/fpm/pool.d/www.conf</div></pre></td></tr></table></figure>\n<p>修改<code>listen = /run/php/php7.0-fpm.sock</code>为<code>listen=127.0.0.1:9000</code>(大约36行)</p>\n<p>放开<code>env</code>的注释(大约384-388行)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">env[HOSTNAME] = $HOSTNAME</div><div class=\"line\">env[PATH] = /usr/local/bin:/usr/bin:/bin</div><div class=\"line\">env[TMP] = /tmp</div><div class=\"line\">env[TMPDIR] = /tmp</div><div class=\"line\">env[TEMP] = /tmp</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载最新源码\"><a href=\"#下载最新源码\" class=\"headerlink\" title=\"下载最新源码\"></a>下载最新源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ wget -P /tmp https://download.owncloud.org/download/community/owncloud-latest.zip  &amp;&amp; sudo unzip /tmp/owncloud-latest.zip <span class=\"_\">-d</span> /var/www/ &amp;&amp; rm -rf /tmp/owncloud-latest.zip</div></pre></td></tr></table></figure>\n<h3 id=\"给www-data授权\"><a href=\"#给www-data授权\" class=\"headerlink\" title=\"给www-data授权\"></a>给www-data授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo chown -R www-data:www-data /var/www/owncloud/</div></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_examples.html\">官方nginx+https配置</a></p>\n<p><a href=\"https://github.com/owncloud/documentation/wiki/Uploading-files-up-to-16GB\">支持大文件上传(16G)</a></p>\n<h3 id=\"我的nginx配置\"><a href=\"#我的nginx配置\" class=\"headerlink\" title=\"我的nginx配置\"></a>我的nginx配置</h3><h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vi  /etc/nginx/sites-enabled/owncloud.conf</div><div class=\"line\"></div><div class=\"line\">upstream php-handler &#123;</div><div class=\"line\">    server 127.0.0.1:9000;</div><div class=\"line\">    <span class=\"comment\">#server unix:/var/run/php5-fpm.sock;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 10010;</div><div class=\"line\">    server_name 127.0.0.1;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Add headers to serve security related headers</span></div><div class=\"line\">    <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></div><div class=\"line\">    <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\">    add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</div><div class=\"line\">    add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</div><div class=\"line\">    add_header X-Robots-Tag none;</div><div class=\"line\">    add_header X-Download-Options noopen;</div><div class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Path to the root of your installation</span></div><div class=\"line\">    root /var/www/owncloud/;</div><div class=\"line\"></div><div class=\"line\">    location = /robots.txt &#123;</div><div class=\"line\">        allow all;</div><div class=\"line\">        log_not_found off;</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># The following 2 rules are only needed for the user_webfinger app.</span></div><div class=\"line\">    <span class=\"comment\"># Uncomment it if you're planning to use this app.</span></div><div class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></div><div class=\"line\">    <span class=\"comment\">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></div><div class=\"line\"></div><div class=\"line\">    location = /.well-known/carddav &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location = /.well-known/caldav &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 301 <span class=\"variable\">$scheme</span>://<span class=\"variable\">$host</span>/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># set max upload size</span></div><div class=\"line\">    client_max_body_size 16400M;</div><div class=\"line\">    fastcgi_buffers 64 4K;</div><div class=\"line\">    fastcgi_read_timeout 600;</div><div class=\"line\">    client_body_buffer_size 1048576k;</div><div class=\"line\">    client_body_temp_path /tmp/owncloud;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># Disable gzip to avoid the removal of the ETag header</span></div><div class=\"line\">    gzip off;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Uncomment if your server is build with the ngx_pagespeed module</span></div><div class=\"line\">    <span class=\"comment\"># This module is currently not supported.</span></div><div class=\"line\">    <span class=\"comment\">#pagespeed off;</span></div><div class=\"line\"></div><div class=\"line\">    error_page 403 /core/templates/403.php;</div><div class=\"line\">    error_page 404 /core/templates/404.php;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        rewrite ^ /index.php<span class=\"variable\">$uri</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 404;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> 404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">        fastcgi_param PATH_INFO <span class=\"variable\">$fastcgi_path_info</span>;</div><div class=\"line\">        <span class=\"comment\">#fastcgi_param HTTPS on;</span></div><div class=\"line\">        fastcgi_param modHeadersAvailable <span class=\"literal\">true</span>; <span class=\"comment\">#Avoid sending the security headers twice</span></div><div class=\"line\">        fastcgi_param front_controller_active <span class=\"literal\">true</span>;</div><div class=\"line\">        fastcgi_pass php-handler;</div><div class=\"line\">        fastcgi_intercept_errors on;</div><div class=\"line\">        fastcgi_request_buffering off; <span class=\"comment\">#Available since nginx 1.7.11</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</div><div class=\"line\">        index index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Adding the cache control header for js and css files</span></div><div class=\"line\">    <span class=\"comment\"># Make sure it is BELOW the PHP block</span></div><div class=\"line\">    location ~* \\.(?:css|js)$ &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</div><div class=\"line\">        add_header Cache-Control <span class=\"string\">\"public, max-age=7200\"</span>;</div><div class=\"line\">        <span class=\"comment\"># Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</span></div><div class=\"line\">        <span class=\"comment\"># Before enabling Strict-Transport-Security headers please read into this topic first.</span></div><div class=\"line\">        <span class=\"comment\">#add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";</span></div><div class=\"line\">        add_header X-Content-Type-Options nosniff;</div><div class=\"line\">        add_header X-Frame-Options <span class=\"string\">\"SAMEORIGIN\"</span>;</div><div class=\"line\">        add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</div><div class=\"line\">        add_header X-Robots-Tag none;</div><div class=\"line\">        add_header X-Download-Options noopen;</div><div class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\">        <span class=\"comment\"># Optional: Don't log access to assets</span></div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> /index.php<span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</div><div class=\"line\">        <span class=\"comment\"># Optional: Don't log access to other assets</span></div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"php-ini\"><a href=\"#php-ini\" class=\"headerlink\" title=\"php.ini\"></a>php.ini</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ sudo vi /etc/php/7.0/fpm/php.ini</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">##修改以下几个配置参数</span></div><div class=\"line\"></div><div class=\"line\">; should be bit bigger than upload_max_filesize 16400M = 16G + 16M = 16 * 1025 MB</div><div class=\"line\">post_max_size = 16400M</div><div class=\"line\"></div><div class=\"line\">; cannot be bigger than post_max_size</div><div class=\"line\">upload_max_filesize = 16G</div><div class=\"line\"></div><div class=\"line\">; on online servers this could require bigger values (my server is at home)</div><div class=\"line\">max_input_time = 3600</div><div class=\"line\"></div><div class=\"line\">; from ownCloud documentation - not sure <span class=\"keyword\">if</span> is required</div><div class=\"line\">output_buffering = Off</div><div class=\"line\"></div><div class=\"line\">; not sure <span class=\"keyword\">if</span> it is required [3] but it seems like ownCloud needs time to move the file to it<span class=\"string\">'s</div><div class=\"line\">; final place after upload and that can take quite some time for big files</div><div class=\"line\">max_execution_time = 1800</div><div class=\"line\"></div><div class=\"line\">; you may also want to point this to a folder having enough space for big files being uploaded</div><div class=\"line\">upload_tmp_dir = /tmp/owncloud</span></div></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo service php7.0-fpm restart</div><div class=\"line\"></div><div class=\"line\">$ sudo service nginx restart</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>浏览器打开<code>http://127.0.0.1:10010</code>,MariaDB是Mysql的开源分支(mysql被oracle收购了)，适合大规模使用，对并发和性能要求比较高的场景。SQLite3适合小规模使用。此处使用SQLite3。详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/db_conversion.html</a> 和<a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html\">https://doc.owncloud.org/server/latest/admin_manual/configuration_database/linux_database_configuration.html</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/4/5/4469d32ea305747b364c60c6f03d8a39.png\" alt=\"owncloud.png\"></p>\n<h3 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h3><p>详见 <a href=\"https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html\">https://doc.owncloud.org/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vi /var/www/owncloud/config/config.php</div></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&apos;trusted_domains&apos; =&gt; </div><div class=\"line\">  array (</div><div class=\"line\">    0 =&gt; &apos;127.0.0.1:10010&apos;,</div><div class=\"line\">    1 =&gt; &apos;域名&apos;,</div><div class=\"line\">  ),</div></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&apos;overwrite.cli.url&apos; =&gt; &apos;http://域名&apos;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>浏览器访问<code>http://127.0.0.1:10010/settings/users</code>,用管理员用户名密码登陆</p>\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><p>参见 <a href=\"https://owncloud.org/install/#install-clients\">https://owncloud.org/install/#install-clients</a></p>\n"},{"title":"synergy 一套键鼠多台设备共享","date":"2017-02-08T09:44:28.000Z","_content":"Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n## 注册[synergy](https://symless.com/synergy/#get-synergy)\n\n填写`email`和`fullname`\n\n<kbd>Enter</kbd>回车确定，不进行支付\n\n## 下载最新版本[每夜构建版本](https://symless.com/nightly)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-master-stable-a5140aa-Windows-x64.msi](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi) 和 [synergy-master-stable-a5140aa-Linux-x86_64.deb](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb)\n\n## 获取序列号\n\n从 [1.4.18免费下载页面](http://symless.com/download/free/)随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的`Login` 进行登录，重复此步骤\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","source":"_posts/share-mouse-and-keyboard-with-your-windows-linux-machines-md.md","raw":"---\ntitle: synergy 一套键鼠多台设备共享\ndate: 2017-02-08 17:44:28\ntags: [synergy]\ncategories: [工具]\n---\nSynergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。\n\n<!-- more -->\n\nSynergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.\n\n具体关于synergy的介绍可以看 [Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持\\(Win/Mac/Linux\\)](http://www.iplaysoft.com/synergy.html) [Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑](http://www.appinn.com/synergy/)\n\n>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？\n\n>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！\n\n但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。\n\n\n## 注册[synergy](https://symless.com/synergy/#get-synergy)\n\n填写`email`和`fullname`\n\n<kbd>Enter</kbd>回车确定，不进行支付\n\n## 下载最新版本[每夜构建版本](https://symless.com/nightly)\n\n按照需要下载指定版本\n\n比如我下载的 [synergy-master-stable-a5140aa-Windows-x64.msi](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi) 和 [synergy-master-stable-a5140aa-Linux-x86_64.deb](https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb)\n\n## 获取序列号\n\n从 [1.4.18免费下载页面](http://symless.com/download/free/)随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的`Login` 进行登录，重复此步骤\n\n## 安装windows版本\n\n**千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨**\n\n![360sb](https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png)\n\n### 安装步骤\n\n![synergy.png](https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png)\n\n有个地方选择语言，因为已经安装过了，无法截图，可参见 http://www.veryhuo.com/down/html/90189.html\n\n### 设置服务器\n\n![设置服务器](https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png)\n\n## 安装Ubuntu\n\n```bash\n\n# synergy 依赖 libavahi-compat-libdnssd1\n# 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃\n# 所以手动下载\n# 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&q=libavahi-compat-libdnssd1 找最新的下载\n\nwget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb #ubuntu 16.10 版本\n\nwget https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nsudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb\n\n# 此时如果提示依赖项未安装，则执行\n# sudo apt-get update # 更新\n# sudo apt-get -f install # 解决依赖关系\n# sudo dpkg -i xxx.deb # 重新安装\n\nsudo dpkg -i synergy-master-stable-a5140aa-Linux-x86_64.deb\n\nnohup synergy &\n```\n\n![设置客户端](https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png)\n\nsynergy启动后取消自动配置，手动填写server ip\n\n**注意如果在server端未设置client，client会一直报错 **\n\n**client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 **\n\n**如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 **","slug":"share-mouse-and-keyboard-with-your-windows-linux-machines-md","published":1,"updated":"2017-02-14T01:19:22.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5vl000ohgdoy80xpopc","content":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>\n<a id=\"more\"></a>\n<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\" target=\"_blank\" rel=\"external\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\" target=\"_blank\" rel=\"external\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"注册synergy\"><a href=\"#注册synergy\" class=\"headerlink\" title=\"注册synergy\"></a>注册<a href=\"https://symless.com/synergy/#get-synergy\" target=\"_blank\" rel=\"external\">synergy</a></h2><p>填写<code>email</code>和<code>fullname</code></p>\n<p><kbd>Enter</kbd>回车确定，不进行支付</p>\n<h2 id=\"下载最新版本每夜构建版本\"><a href=\"#下载最新版本每夜构建版本\" class=\"headerlink\" title=\"下载最新版本每夜构建版本\"></a>下载最新版本<a href=\"https://symless.com/nightly\" target=\"_blank\" rel=\"external\">每夜构建版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi\" target=\"_blank\" rel=\"external\">synergy-master-stable-a5140aa-Windows-x64.msi</a> 和 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\" target=\"_blank\" rel=\"external\">synergy-master-stable-a5140aa-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p>从 <a href=\"http://symless.com/download/free/\" target=\"_blank\" rel=\"external\">1.4.18免费下载页面</a>随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的<code>Login</code> 进行登录，重复此步骤</p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\" target=\"_blank\" rel=\"external\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></div><div class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></div><div class=\"line\"><span class=\"comment\"># 所以手动下载</span></div><div class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></div><div class=\"line\"></div><div class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></div><div class=\"line\"></div><div class=\"line\">wget https://symless.com/files/nightly/synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></div><div class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">nohup synergy &amp;</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>\n","excerpt":"<p>Synergy 可以在多台电脑之间共享鼠标、键盘、剪贴板。开源，跨 Win、Linux、Mac。</p>","more":"<p>Synergy 需要注意不是远控软件，类似双屏或者KVM切换器，只是共享鼠标和键盘.</p>\n<p>具体关于synergy的介绍可以看 <a href=\"http://www.iplaysoft.com/synergy.html\">Synergy 一套键鼠同时控制多台电脑的神器！超级方便！开源免费，支持(Win/Mac/Linux)</a> <a href=\"http://www.appinn.com/synergy/\">Synergy – 教你在局域网中用一套键盘/鼠标控制多台电脑</a></p>\n<blockquote>\n<p>想必很多人都拥有多台电脑，譬如台式机+笔记本，很多时候我们都会同时打开它们工作。可是你有没发现，如果桌子上摆放着多台电脑多套键盘鼠标，不停来回切换使用是否很累呢？如果说现在可以只用一套键鼠，就能同时控制你全部的电脑，你会否兴奋？</p>\n<p>Synergy 正是为此而生的好工具！它可以让你的多台电脑共享一套键鼠，甚至还可以共享剪贴板，而你只需动动鼠标，指针就可以轻松地在各台电脑屏幕之间来回穿梭，就像一台电脑使用多个显示器一样。而且 Synergy 完全免费开源，并跨平台支持 Win/Mac/Linux，相当给力！ 使用之后，工作效率提高，腿不酸腰不疼，桌面也干净了，绝对是绝世神器啊！</p>\n</blockquote>\n<p>但是该文章中的版本较旧，本着折腾的态度，终于搞定2台PC（Ubuntu Zesty Zapus + Windows10 1607版），安装最新版并且免费使用。</p>\n<h2 id=\"注册synergy\"><a href=\"#注册synergy\" class=\"headerlink\" title=\"注册synergy\"></a>注册<a href=\"https://symless.com/synergy/#get-synergy\">synergy</a></h2><p>填写<code>email</code>和<code>fullname</code></p>\n<p><kbd>Enter</kbd>回车确定，不进行支付</p>\n<h2 id=\"下载最新版本每夜构建版本\"><a href=\"#下载最新版本每夜构建版本\" class=\"headerlink\" title=\"下载最新版本每夜构建版本\"></a>下载最新版本<a href=\"https://symless.com/nightly\">每夜构建版本</a></h2><p>按照需要下载指定版本</p>\n<p>比如我下载的 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Windows-x64.msi\">synergy-master-stable-a5140aa-Windows-x64.msi</a> 和 <a href=\"https://symless.com/files/nightly/synergy-master-stable-a5140aa-Linux-x86_64.deb\">synergy-master-stable-a5140aa-Linux-x86_64.deb</a></p>\n<h2 id=\"获取序列号\"><a href=\"#获取序列号\" class=\"headerlink\" title=\"获取序列号\"></a>获取序列号</h2><p>从 <a href=\"http://symless.com/download/free/\">1.4.18免费下载页面</a>随便下载一个，即可显示序列号，复制并保存下来，如果没有，则点击右上角的<code>Login</code> 进行登录，重复此步骤</p>\n<h2 id=\"安装windows版本\"><a href=\"#安装windows版本\" class=\"headerlink\" title=\"安装windows版本\"></a>安装windows版本</h2><p><strong>千万注意安装和运行时，退出360，否则会卡死，妈的，被坑的很惨</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/09/589bcf5446e43.png\" alt=\"360sb\"></p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/08/589af1a1280b0.png\" alt=\"synergy.png\"></p>\n<p>有个地方选择语言，因为已经安装过了，无法截图，可参见 <a href=\"http://www.veryhuo.com/down/html/90189.html\">http://www.veryhuo.com/down/html/90189.html</a></p>\n<h3 id=\"设置服务器\"><a href=\"#设置服务器\" class=\"headerlink\" title=\"设置服务器\"></a>设置服务器</h3><p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a4796.png\" alt=\"设置服务器\"></p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># synergy 依赖 libavahi-compat-libdnssd1</span></div><div class=\"line\"><span class=\"comment\"># 但是从sudo apt install -y libavahi-compat-libdnssd1 会提示找不到已废弃</span></div><div class=\"line\"><span class=\"comment\"># 所以手动下载</span></div><div class=\"line\"><span class=\"comment\"># 从https://www.ubuntuupdates.org/package_metas?utf8=%E2%9C%93&amp;q=libavahi-compat-libdnssd1 找最新的下载</span></div><div class=\"line\"></div><div class=\"line\">wget http://security.ubuntu.com/ubuntu/pool/main/a/avahi/libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb <span class=\"comment\">#ubuntu 16.10 版本</span></div><div class=\"line\"></div><div class=\"line\">wget https://symless.com/files/nightly/synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i libavahi-compat-libdnssd1_0.6.32-1ubuntu1_amd64.deb</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 此时如果提示依赖项未安装，则执行</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get update # 更新</span></div><div class=\"line\"><span class=\"comment\"># sudo apt-get -f install # 解决依赖关系</span></div><div class=\"line\"><span class=\"comment\"># sudo dpkg -i xxx.deb # 重新安装</span></div><div class=\"line\"></div><div class=\"line\">sudo dpkg -i synergy-master-stable<span class=\"_\">-a</span>5140aa-Linux-x86_64.deb</div><div class=\"line\"></div><div class=\"line\">nohup synergy &amp;</div></pre></td></tr></table></figure>\n<p><img src=\"https://ooo.0o0.ooo/2017/02/14/58a25ac9a6991.png\" alt=\"设置客户端\"></p>\n<p>synergy启动后取消自动配置，手动填写server ip</p>\n<p><strong>注意如果在server端未设置client，client会一直报错 </strong></p>\n<p><strong>client和server需要在一个局域网里，否则无法连接。如果网速慢的话，server控制client会出现卡顿现象 </strong></p>\n<p><strong>如果在一个局域网但是不是一个网段，无法直接ping通可以通过端口映射e.g.  Ngrok等软件进行端口映射 </strong></p>"},{"title":"Spring3.0 Log4j转logback","date":"2017-02-28T06:54:44.000Z","_content":"公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","source":"_posts/springmvc-log4j-to-logback.md","raw":"---\ntitle: Spring3.0 Log4j转logback\ndate: 2017-02-28 14:54:44\ntags: [springmvc,logback,log4j,log]\ncategories: [编程]\n---\n公司项目用的还是`Spring3.0.5`,而目前`Spring5.0 M3`已发布。。。\n\n为啥选择 `logback` 而不是`log4j2`\n\n原因\n\n1. log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)\n2. log4j2 的JSONLayout 内置字段较少，且不支持自定义。\n\n而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) [FileAppender throughput\n](https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0)\n\n本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1\n\n### Maven\n\n`pom.xml`中关键部分代码\n\n```xml\n    <properties>\n        <!-- log相关 -->\n        <slf4j.version>1.7.24</slf4j.version>\n        <logback.version>1.2.1</logback.version>\n        \n        <!-- Spring监听 -->\n        <logback-ext-spring.version>0.1.4</logback-ext-spring.version>\n        \n        <!-- logback的logstash插件 -->\n        <logstash-logback-encoder.version>4.8</logstash-logback-encoder.version>\n        <!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本-->\n        <jackson.version>2.8.6</jackson.version>\n        \n        <!-- 项目使用UTF-8字符集  -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n    </properties>\n\n    <dependencies>\n        <!-- slf4j统一log接口 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- slf4j接管 Apache Commons Logging -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- slf4j接管log4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        \n        <!-- logback的Spring监听 -->\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>${logback-ext-spring.version}</version>\n        </dependency>\n        \n        <!-- slf4j日志接口，logback具体实现 -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        <!-- logback 日志输出到logstash的插件 -->\n        <dependency>\n            <groupId>net.logstash.logback</groupId>\n            <artifactId>logstash-logback-encoder</artifactId>\n            <version>${logstash-logback-encoder.version}</version>\n        </dependency>\n        \n        <!-- logstash-logback-encoder依赖的jackson版本较旧 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n### 非Maven项目\n(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到`pom.xml`保存成文件,cmd进入到pom.xml同目录，运行  `mvn dependency:copy-dependencies -DoutputDirectory=lib` 会自动将依赖包，复制到当前`lib`目录下)\n从[中央仓库下载](http://mvnrepository.com/)下列jar 到Spring MVC 项目的lib目录\n```\njackson-annotations-2.8.0.jar\njackson-core-2.8.6.jar\njackson-databind-2.8.6.jar\njcl-over-slf4j-1.7.24.jar\nlog4j-over-slf4j-1.7.24.jar\nlogback-classic-1.2.1.jar\nlogback-core-1.2.1.jar\nlogback-ext-spring-0.1.4.jar\nlogstash-logback-encoder-4.8.jar\nslf4j-api-1.7.24.jar\n```\n\n### 解决jar冲突\n\n不管是maven还是非maven项目都需要删除类似`log4j.jar`,`slf4j-log4j12-xxx.jar`,旧版本的`slf4j-api-xxx.jar`和`commons-logging.jar` 确保不会有jar冲突\n\n\n\n### 解决问题代码\n\n删除项目自定义的一些log工具类，e.g. `StdoutListener`,`MyDailyRollingFileAppender`\n\n### 修改web.xml\n\n#### 删除log4j相关配置\n\n删除以下代码\n\n```xml\n<context-param>\n    <param-name>log4jConfigLocation</param-name>\n    <param-value>/WEB-INF/properties/log4j.xml</param-value>\n</context-param>\n<listener>\n    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>\n</listener>\n```\n删除相关的`log4j.xml`文件\n\n#### 添加logback相关配置\n```xml\n<context-param>\n    <param-name>logbackConfigLocation</param-name>\n    <param-value>WEB-INF/config/logback.xml</param-value>\n</context-param>\n\n<listener>\n     <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\n</listener>\n```\n\n### logback.xml配置\n\n将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration scan=\"false\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <!-- log输出目录 -->\n    <property name=\"LOG_HOME\" value=\"D:/logtest\" />\n    <!-- 项目名称 -->\n    <property name=\"APP_NAME\" value=\"logtest\" />\n    <!-- 项目端口号 -->\n    <property name=\"APP_PORT\" value=\"8080\" />\n    \n    <!-- 控制台和文件的日志格式 -->\n    <!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 -->\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    <property name=\"FILE_LOG_PATTERN\" value=\"%date{HH:mm:ss.SSS}[%-5level]%logger.%method#%line - %msg%n\" />\n    \n    <!-- Logstash 服务器地址和端口 -->\n    <property name=\"LOGSTASH_SERVER\" value=\"\" />\n    <property name=\"LOGSTASH_PORT\" value=\"\" />\n    \n\n    <logger name=\"org.springframework\" level=\"WARN\" />\n    <logger name=\"org.springframework.web\" level=\"WARN\" />\n    <logger name=\"org.springframework.security\" level=\"WARN\" />\n    <logger name=\"org.springframework.cache\" level=\"WARN\" />\n    <logger name=\"org.springframework.beans\" level=\"WARN\" />\n    <logger name=\"com.shunneng.logtest\" level=\"DEBUG\" />\n\n    <!-- 输出日志到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        \n        <!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        \n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>utf8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 输出日志到文件  -->\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 文件名称 -->\n        <file>${LOG_HOME}/${APP_NAME}.log</file>\n        \n        <!-- 编码字符集和日志格式 -->\n        <encoder>\n            <charset>utf-8</charset>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n        </encoder>\n        \n        <!-- 日志过大后，滚动输出日志 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%i.log</fileNamePattern>\n        </rollingPolicy>\n        \n        <!-- 限定单日志大小 -->\n        <triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>100MB</MaxFileSize>\n        </triggeringPolicy>\n        \n    </appender>\n    \n    <!-- 日志输出到日志搜集框架  -->\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashSocketAppender\">\n        <!-- logstash 服务地址  -->\n        <host>${LOGSTASH_SERVER}</host>\n        <!-- logstash 端口 -->\n        <port>${LOGSTASH_PORT}</port>\n        <!-- 自定义字段，增加项目名称和端口  -->\n        <customFields>{\"app_name\":\"${APP_NAME}\",\"app_port\":\"${APP_PORT}\"}</customFields>\n    </appender>\n    \n    <!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 -->\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\" />\n    </appender>\n    \n    <!-- 允许动态修改日志级别 -->\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    \n    <!-- 默认输出INFO级别日志 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"ASYNC\" />\n        <appender-ref ref=\"LOGSTASH\" />\n    </root>\n\n</configuration>\n\n```\n\n### Java改造\n\n使用了`jcl-over-slf4j`和`log4j-over-slf4j`后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法\n\n```java\n...\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n\nprivate final Logger logger = LoggerFactory.getLogger(Demo.class);\n\nlog.info(\"这是一个{}信息\",\"info\"); //输出:这是一个info信息\n...\n```\n\n不建议使用logger.info(\"这是一个\"+\"info\"+\"信息\");\n\n原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。\n需要改成\n\n```java\nif (logger.isInfoEnabled()){\n    logger.info(\"这是一个\"+\"info\"+\"信息\");\n}\n```\n\n当然如果是常量字符串拼接，在编译时会自动优化成 `这是一个info信息`但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）\n\n所以，建议使用 `{}`进行占位输出。如果是变量很多，使用`Object[]`\n\n### 规范\n\n\n**强烈建议阅读此文** [写给开发者：记录日志的10个建议](http://blog.jobbole.com/52018/) 英语原文(需翻墙)[The 10 Commandments of Logging](http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/)\n\n以及 简书上的[LOG使用规范（整理）](http://www.jianshu.com/p/8551fe9c6354)\n\n摘录其中部分内容\n> #### 2. 你应在适当级别上进行log\n\n>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统\n\n>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。\n\n>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)\n\n>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来\n\n>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么\n\n>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件\n\n>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。\n\n> #### 4. 你应该写有意义的log\n\n> #### 6. 你应该给log带上上下文\n\n> #### 7. 你应该用机器可解析的格式来打日志\n\n对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 `ReflectionToStringBuilder.toString()`和`new ToStringBuilder()`\n\n其中  `ReflectionToStringBuilder.toString()` 打印的类似 `lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]] `\n\n而 `new ToStringBuilder()`可以只打印部分属性\n```java\nnew ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n    .append(\"name\", name)\n    .append(\"age\", age)\n    .append(\"bar\", bar)\n    .toString()\n```","slug":"springmvc-log4j-to-logback","published":1,"updated":"2017-03-01T06:02:05.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i7a5vq000shgdo2p1361l1","content":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\" target=\"_blank\" rel=\"external\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">jackson-annotations-2.8.0.jar</div><div class=\"line\">jackson-core-2.8.6.jar</div><div class=\"line\">jackson-databind-2.8.6.jar</div><div class=\"line\">jcl-over-slf4j-1.7.24.jar</div><div class=\"line\">log4j-over-slf4j-1.7.24.jar</div><div class=\"line\">logback-classic-1.2.1.jar</div><div class=\"line\">logback-core-1.2.1.jar</div><div class=\"line\">logback-ext-spring-0.1.4.jar</div><div class=\"line\">logstash-logback-encoder-4.8.jar</div><div class=\"line\">slf4j-api-1.7.24.jar</div></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</div><div class=\"line\"></div><div class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\" target=\"_blank\" rel=\"external\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\" target=\"_blank\" rel=\"external\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\" target=\"_blank\" rel=\"external\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</div><div class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</div><div class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</div><div class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</div><div class=\"line\">    .toString()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>公司项目用的还是<code>Spring3.0.5</code>,而目前<code>Spring5.0 M3</code>已发布。。。</p>\n<p>为啥选择 <code>logback</code> 而不是<code>log4j2</code></p>\n<p>原因</p>\n<ol>\n<li>log4j2 不支持动态改变logger的级别(生产环境不利于定位问题)</li>\n<li>log4j2 的JSONLayout 内置字段较少，且不支持自定义。</li>\n</ol>\n<p>而且log4j2引以为傲的领先logback 10倍的吞吐量的情况在最新版本中(1.2.0+)已经不存在了。具体参见(需翻墙) <a href=\"https://docs.google.com/spreadsheets/d/1cpb5D7qnyye4W0RTlHUnXedYK98catNZytYIu5D91m0/edit#gid=0\">FileAppender throughput\n</a></p>\n<p>本文主要讲解，如何将spring3.0.5(非maven)由log4j迁移到slf4j+logback1.2.1</p>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><p><code>pom.xml</code>中关键部分代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log相关 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logback-ext-spring.version</span>&gt;</span>0.1.4<span class=\"tag\">&lt;/<span class=\"name\">logback-ext-spring.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的logstash插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span>4.8<span class=\"tag\">&lt;/<span class=\"name\">logstash-logback-encoder.version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 可以略去jackson的依赖， logstash-logback-encoder自带的版本较低，所以手动指定jackson版本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目使用UTF-8字符集  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.encoding</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j统一log接口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管 Apache Commons Logging --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j接管log4j --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback的Spring监听 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.logback-extensions<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-ext-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback-ext-spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j日志接口，logback具体实现 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logback 日志输出到logstash的插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- logstash-logback-encoder依赖的jackson版本较旧 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h3><p>(有个小技巧，本地配有maven环境的情况下，将上面的关键代码贴到<code>pom.xml</code>保存成文件,cmd进入到pom.xml同目录，运行  <code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code> 会自动将依赖包，复制到当前<code>lib</code>目录下)<br>从<a href=\"http://mvnrepository.com/\">中央仓库下载</a>下列jar 到Spring MVC 项目的lib目录<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">jackson-annotations-2.8.0.jar</div><div class=\"line\">jackson-core-2.8.6.jar</div><div class=\"line\">jackson-databind-2.8.6.jar</div><div class=\"line\">jcl-over-slf4j-1.7.24.jar</div><div class=\"line\">log4j-over-slf4j-1.7.24.jar</div><div class=\"line\">logback-classic-1.2.1.jar</div><div class=\"line\">logback-core-1.2.1.jar</div><div class=\"line\">logback-ext-spring-0.1.4.jar</div><div class=\"line\">logstash-logback-encoder-4.8.jar</div><div class=\"line\">slf4j-api-1.7.24.jar</div></pre></td></tr></table></figure></p>\n<h3 id=\"解决jar冲突\"><a href=\"#解决jar冲突\" class=\"headerlink\" title=\"解决jar冲突\"></a>解决jar冲突</h3><p>不管是maven还是非maven项目都需要删除类似<code>log4j.jar</code>,<code>slf4j-log4j12-xxx.jar</code>,旧版本的<code>slf4j-api-xxx.jar</code>和<code>commons-logging.jar</code> 确保不会有jar冲突</p>\n<h3 id=\"解决问题代码\"><a href=\"#解决问题代码\" class=\"headerlink\" title=\"解决问题代码\"></a>解决问题代码</h3><p>删除项目自定义的一些log工具类，e.g. <code>StdoutListener</code>,<code>MyDailyRollingFileAppender</code></p>\n<h3 id=\"修改web-xml\"><a href=\"#修改web-xml\" class=\"headerlink\" title=\"修改web.xml\"></a>修改web.xml</h3><h4 id=\"删除log4j相关配置\"><a href=\"#删除log4j相关配置\" class=\"headerlink\" title=\"删除log4j相关配置\"></a>删除log4j相关配置</h4><p>删除以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>log4jConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/properties/log4j.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>删除相关的<code>log4j.xml</code>文件</p>\n<h4 id=\"添加logback相关配置\"><a href=\"#添加logback相关配置\" class=\"headerlink\" title=\"添加logback相关配置\"></a>添加logback相关配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/config/logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"logback-xml配置\"><a href=\"#logback-xml配置\" class=\"headerlink\" title=\"logback.xml配置\"></a>logback.xml配置</h3><p>将下面的配置文件保存到 WEB-INF/config/logback.xml,注意修改项目名，logstash等相关配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- log输出目录 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"D:/logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目名称 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_NAME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logtest\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 项目端口号 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"APP_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"8080\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 控制台和文件的日志格式 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- %method和%line性能较低，如果不太介意打印的方法和行号，强烈建议取消 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE_LOG_PATTERN\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date&#123;HH:mm:ss.SSS&#125;[%-5level]%logger.%method#%line - %msg%n\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Logstash 服务器地址和端口 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_SERVER\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH_PORT\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.security\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.cache\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.beans\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.shunneng.logtest\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CONSOLE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 控制台输出性能较低。只打印ERRROR,其他信息从日志或者elasticsearch查询 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 输出日志到文件  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 文件名称 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 编码字符集和日志格式 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 日志过大后，滚动输出日志 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 限定单日志大小 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志输出到日志搜集框架  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashSocketAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 服务地址  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;LOGSTASH_SERVER&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- logstash 端口 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;LOGSTASH_PORT&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 自定义字段，增加项目名称和端口  --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;APP_NAME&#125;\",\"app_port\":\"$&#123;APP_PORT&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 异步批量(512)打印日志，在异常关闭时，有可能会有部分日志丢失 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 允许动态修改日志级别 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">contextListener</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.jul.LevelChangePropagator\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resetJUL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">resetJUL</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">contextListener</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 默认输出INFO级别日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Java改造\"><a href=\"#Java改造\" class=\"headerlink\" title=\"Java改造\"></a>Java改造</h3><p>使用了<code>jcl-over-slf4j</code>和<code>log4j-over-slf4j</code>后原有方法不需要变更。但是建议在允许的情况下。改成slf4j的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Demo.class);</div><div class=\"line\"></div><div class=\"line\">log.info(<span class=\"string\">\"这是一个&#123;&#125;信息\"</span>,<span class=\"string\">\"info\"</span>); <span class=\"comment\">//输出:这是一个info信息</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>不建议使用logger.info(“这是一个”+”info”+”信息”);</p>\n<p>原因在于，假设该logger设置的是error级别，程序走到这会先将输出信息toString后并拼接，但是因为不是error级别的，所以不输出。导致性能上的浪费。<br>需要改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (logger.isInfoEnabled())&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"这是一个\"</span>+<span class=\"string\">\"info\"</span>+<span class=\"string\">\"信息\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然如果是常量字符串拼接，在编译时会自动优化成 <code>这是一个info信息</code>但是对于变量拼接，字符串拼接的缺点就体现出来了。（感兴趣的可以自行百度 string stringbuilder stringbuffer区别）</p>\n<p>所以，建议使用 <code>{}</code>进行占位输出。如果是变量很多，使用<code>Object[]</code></p>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p><strong>强烈建议阅读此文</strong> <a href=\"http://blog.jobbole.com/52018/\">写给开发者：记录日志的10个建议</a> 英语原文(需翻墙)<a href=\"http://www.masterzen.fr/2013/01/13/the-10-commandments-of-logging/\">The 10 Commandments of Logging</a></p>\n<p>以及 简书上的<a href=\"http://www.jianshu.com/p/8551fe9c6354\">LOG使用规范（整理）</a></p>\n<p>摘录其中部分内容</p>\n<blockquote>\n<h4 id=\"2-你应在适当级别上进行log\"><a href=\"#2-你应在适当级别上进行log\" class=\"headerlink\" title=\"2. 你应在适当级别上进行log\"></a>2. 你应在适当级别上进行log</h4><p>TRACE level: 如果使用在生产环境中，这是一个代码异味(code smell)。它可以用于开发过程中追踪bug，但不要提交到你的版本控制系统</p>\n<p>DEBUG level: 把一切东西都记录在这里。这在debug过程中最常用到。我主张在进入生产阶段前减少debug语句的数量，只留下最有意义的部分，在调试(troubleshooting)的时候激活。</p>\n<p>INFO level: 把用户行为(user-driven)和系统的特定行为(例如计划任务…)</p>\n<p>NOTICE level: 这是生产环境中使用的级别。把一切不认为是错误的，可以记录的事件都log起来</p>\n<p>WARN level: 记录在这个级别的事件都有可能成为一个error。例如，一次调用数据库使用的时间超过了预设时间，或者内存缓存即将到达容量上限。这可以让你适当地发出警报，或者在调试时更好地理解系统在failure之前做了些什么</p>\n<p>ERROR level: 把每一个错误条件都记录在这。例如API调用返回了错误，或是内部错误条件</p>\n<p>FATAL level: 末日来了。它极少被用到，在实际程序中也不应该出现多少。在这个级别上进行log意味着程序要结束了。例如一个网络守护进程无法bind到socket上，那么它唯一能做的就只有log到这里，然后退出运行。</p>\n<h4 id=\"4-你应该写有意义的log\"><a href=\"#4-你应该写有意义的log\" class=\"headerlink\" title=\"4. 你应该写有意义的log\"></a>4. 你应该写有意义的log</h4><h4 id=\"6-你应该给log带上上下文\"><a href=\"#6-你应该给log带上上下文\" class=\"headerlink\" title=\"6. 你应该给log带上上下文\"></a>6. 你应该给log带上上下文</h4><h4 id=\"7-你应该用机器可解析的格式来打日志\"><a href=\"#7-你应该用机器可解析的格式来打日志\" class=\"headerlink\" title=\"7. 你应该用机器可解析的格式来打日志\"></a>7. 你应该用机器可解析的格式来打日志</h4></blockquote>\n<p>对于需要打印的对象，一定注意重载对象的toString方法，或者使用commons-lang3包下的 <code>ReflectionToStringBuilder.toString()</code>和<code>new ToStringBuilder()</code></p>\n<p>其中  <code>ReflectionToStringBuilder.toString()</code> 打印的类似 <code>lang.Foo@c2a132[name=foo,age=88,bar=lang.Bar@e102dc[name=bar]]</code></p>\n<p>而 <code>new ToStringBuilder()</code>可以只打印部分属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>, ToStringStyle.MULTI_LINE_STYLE)</div><div class=\"line\">    .append(<span class=\"string\">\"name\"</span>, name)</div><div class=\"line\">    .append(<span class=\"string\">\"age\"</span>, age)</div><div class=\"line\">    .append(<span class=\"string\">\"bar\"</span>, bar)</div><div class=\"line\">    .toString()</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4i7a5v10005hgdoh1yu10in","category_id":"cj4i7a5ux0002hgdoz66kvot2","_id":"cj4i7a5vb000ahgdoa90lu6cv"},{"post_id":"cj4i7a5um0000hgdolwl05275","category_id":"cj4i7a5ux0002hgdoz66kvot2","_id":"cj4i7a5vf000ehgdog5t9ijrg"},{"post_id":"cj4i7a5v50006hgdow8eioiq0","category_id":"cj4i7a5ux0002hgdoz66kvot2","_id":"cj4i7a5vg000ghgdopaqq98e8"},{"post_id":"cj4i7a5uq0001hgdo97po8ifx","category_id":"cj4i7a5ux0002hgdoz66kvot2","_id":"cj4i7a5vj000khgdoj22muuyf"},{"post_id":"cj4i7a5uz0004hgdouqs4p1et","category_id":"cj4i7a5ux0002hgdoz66kvot2","_id":"cj4i7a5vl000nhgdo4e50y4e9"},{"post_id":"cj4i7a5v80009hgdop8rsx6cn","category_id":"cj4i7a5vi000ihgdo3qbh1wdp","_id":"cj4i7a5vt000uhgdo1wj6qa82"},{"post_id":"cj4i7a5vq000shgdo2p1361l1","category_id":"cj4i7a5vi000ihgdo3qbh1wdp","_id":"cj4i7a5vu000xhgdou3gba3tx"},{"post_id":"cj4i7a5vf000fhgdol7f6klq0","category_id":"cj4i7a5vo000phgdoflpd1k9c","_id":"cj4i7a5vu000zhgdon4khj32h"},{"post_id":"cj4i7a5vh000hhgdo6vhxiym8","category_id":"cj4i7a5vo000phgdoflpd1k9c","_id":"cj4i7a5vv0012hgdoaf0m2lo3"},{"post_id":"cj4i7a5vk000lhgdofimhh38g","category_id":"cj4i7a5vu000yhgdoior5f5sz","_id":"cj4i7a5vx0017hgdogodxneqk"},{"post_id":"cj4i7a5vl000ohgdoy80xpopc","category_id":"cj4i7a5vv0014hgdoc2eoabs3","_id":"cj4i7a5vx0019hgdo68r4b4w7"}],"PostTag":[{"post_id":"cj4i7a5um0000hgdolwl05275","tag_id":"cj4i7a5uy0003hgdoxme5mg4t","_id":"cj4i7a5vl000mhgdoaq8520r3"},{"post_id":"cj4i7a5um0000hgdolwl05275","tag_id":"cj4i7a5v60008hgdoicrj4u8a","_id":"cj4i7a5vp000qhgdouz8qi3fe"},{"post_id":"cj4i7a5um0000hgdolwl05275","tag_id":"cj4i7a5ve000dhgdoli8njcas","_id":"cj4i7a5vs000thgdoonyjfa0d"},{"post_id":"cj4i7a5uq0001hgdo97po8ifx","tag_id":"cj4i7a5uy0003hgdoxme5mg4t","_id":"cj4i7a5vv0011hgdoqc2h7kw7"},{"post_id":"cj4i7a5uq0001hgdo97po8ifx","tag_id":"cj4i7a5v60008hgdoicrj4u8a","_id":"cj4i7a5vv0013hgdohiv8n2jf"},{"post_id":"cj4i7a5uq0001hgdo97po8ifx","tag_id":"cj4i7a5vt000whgdom3gro0mg","_id":"cj4i7a5vw0016hgdovshxnn5d"},{"post_id":"cj4i7a5uz0004hgdouqs4p1et","tag_id":"cj4i7a5uy0003hgdoxme5mg4t","_id":"cj4i7a5vz001bhgdor7cg9fg3"},{"post_id":"cj4i7a5uz0004hgdouqs4p1et","tag_id":"cj4i7a5v60008hgdoicrj4u8a","_id":"cj4i7a5vz001chgdopft0a7vk"},{"post_id":"cj4i7a5uz0004hgdouqs4p1et","tag_id":"cj4i7a5ve000dhgdoli8njcas","_id":"cj4i7a5w0001ehgdokbh77z1w"},{"post_id":"cj4i7a5v10005hgdoh1yu10in","tag_id":"cj4i7a5uy0003hgdoxme5mg4t","_id":"cj4i7a5w1001ghgdoitfl1sc6"},{"post_id":"cj4i7a5v10005hgdoh1yu10in","tag_id":"cj4i7a5vx001ahgdomcnmtns4","_id":"cj4i7a5w1001hhgdooobt5bxl"},{"post_id":"cj4i7a5v10005hgdoh1yu10in","tag_id":"cj4i7a5vz001dhgdo2w9l47bn","_id":"cj4i7a5w1001jhgdobzrcl854"},{"post_id":"cj4i7a5v50006hgdow8eioiq0","tag_id":"cj4i7a5uy0003hgdoxme5mg4t","_id":"cj4i7a5w2001lhgdog4svbre1"},{"post_id":"cj4i7a5v50006hgdow8eioiq0","tag_id":"cj4i7a5v60008hgdoicrj4u8a","_id":"cj4i7a5w2001mhgdocfax4aoo"},{"post_id":"cj4i7a5v50006hgdow8eioiq0","tag_id":"cj4i7a5w1001ihgdocwaltens","_id":"cj4i7a5w2001ohgdovyu5t4es"},{"post_id":"cj4i7a5v80009hgdop8rsx6cn","tag_id":"cj4i7a5w2001khgdonjz2w2pu","_id":"cj4i7a5w4001qhgdo33o77eo3"},{"post_id":"cj4i7a5v80009hgdop8rsx6cn","tag_id":"cj4i7a5w2001nhgdosvadqgl8","_id":"cj4i7a5w4001rhgdoa7bkvst5"},{"post_id":"cj4i7a5vc000bhgdoofco4n3k","tag_id":"cj4i7a5w3001phgdobfzojdvm","_id":"cj4i7a5w5001thgdo2y7kmhmo"},{"post_id":"cj4i7a5vf000fhgdol7f6klq0","tag_id":"cj4i7a5w4001shgdoflxh7qkl","_id":"cj4i7a5w7001xhgdoq04ie9j7"},{"post_id":"cj4i7a5vf000fhgdol7f6klq0","tag_id":"cj4i7a5w6001uhgdobf51ahj5","_id":"cj4i7a5w8001yhgdoos9xsflj"},{"post_id":"cj4i7a5vf000fhgdol7f6klq0","tag_id":"cj4i7a5uy0003hgdoxme5mg4t","_id":"cj4i7a5w80020hgdozc9docd6"},{"post_id":"cj4i7a5vf000fhgdol7f6klq0","tag_id":"cj4i7a5vx001ahgdomcnmtns4","_id":"cj4i7a5w80021hgdonfgbghxo"},{"post_id":"cj4i7a5vh000hhgdo6vhxiym8","tag_id":"cj4i7a5w4001shgdoflxh7qkl","_id":"cj4i7a5w80023hgdor2fkezz1"},{"post_id":"cj4i7a5vk000lhgdofimhh38g","tag_id":"cj4i7a5w8001zhgdoqay0ypav","_id":"cj4i7a5wa0024hgdopp1qw13h"},{"post_id":"cj4i7a5vl000ohgdoy80xpopc","tag_id":"cj4i7a5w80022hgdowta0uozg","_id":"cj4i7a5wa0026hgdosqoxs253"},{"post_id":"cj4i7a5vq000shgdo2p1361l1","tag_id":"cj4i7a5wa0025hgdo9g0pt2fc","_id":"cj4i7a5wb002ahgdols1xzq2x"},{"post_id":"cj4i7a5vq000shgdo2p1361l1","tag_id":"cj4i7a5wa0027hgdo4xwfozg4","_id":"cj4i7a5wb002bhgdo4jtqqpi9"},{"post_id":"cj4i7a5vq000shgdo2p1361l1","tag_id":"cj4i7a5wb0028hgdokxi542t8","_id":"cj4i7a5wc002chgdo69c9at61"},{"post_id":"cj4i7a5vq000shgdo2p1361l1","tag_id":"cj4i7a5wb0029hgdom9adl7tz","_id":"cj4i7a5wc002dhgdo4wzmuztc"}],"Tag":[{"name":"elk","_id":"cj4i7a5uy0003hgdoxme5mg4t"},{"name":"elkstasck","_id":"cj4i7a5v60008hgdoicrj4u8a"},{"name":"ElastAlert","_id":"cj4i7a5ve000dhgdoli8njcas"},{"name":"curator","_id":"cj4i7a5vt000whgdom3gro0mg"},{"name":"elkstack","_id":"cj4i7a5vx001ahgdomcnmtns4"},{"name":"beats","_id":"cj4i7a5vz001dhgdo2w9l47bn"},{"name":"Heartbeat","_id":"cj4i7a5w1001ihgdocwaltens"},{"name":"blog","_id":"cj4i7a5w2001khgdonjz2w2pu"},{"name":"hexo","_id":"cj4i7a5w2001nhgdosvadqgl8"},{"name":"java","_id":"cj4i7a5w3001phgdobfzojdvm"},{"name":"nginx","_id":"cj4i7a5w4001shgdoflxh7qkl"},{"name":"logstash","_id":"cj4i7a5w6001uhgdobf51ahj5"},{"name":"owncloud","_id":"cj4i7a5w8001zhgdoqay0ypav"},{"name":"synergy","_id":"cj4i7a5w80022hgdowta0uozg"},{"name":"springmvc","_id":"cj4i7a5wa0025hgdo9g0pt2fc"},{"name":"logback","_id":"cj4i7a5wa0027hgdo4xwfozg4"},{"name":"log4j","_id":"cj4i7a5wb0028hgdokxi542t8"},{"name":"log","_id":"cj4i7a5wb0029hgdom9adl7tz"}]}}